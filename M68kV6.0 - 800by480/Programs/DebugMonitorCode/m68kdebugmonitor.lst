680x0 MACRO ASSEMBLER   Version 5.00   (c) 1992-2005 Peter J. Fondse

Date: 08 Feb 2023      Time: 22:38:38          Source: C:\CPEN412\GITHUB_STEUP\M68KV6.0 - 800BY480\PROGRAMS\DEBUGMONITORCODE\M68KDEBUGMONITOR.SRC

                       1          section   code
                       2   ; for initial stack use $08040000 if your system uses SRAM for main memory (top of 256kbyte SRAM space)
                       3   ; When your system is converted to use DRAM for main memory set this constant to $0C000000 (top of 64MByte DRAM space
                       4   
                       5   ;StackPointerVal     equ $08040000      when using sram
          0C00 0000    6   StackPointerVal     equ $0C000000      when using dram
                       7   
                       8   ; define RamVectorTable as $0803000 if your system uses SRAM for main memory
                       9   ; When your system is converted to use DRAM for main memory define RamVectorTable constant as $0B000000 (top of 64MByte DRAM space)
                      10   
                      11   ;RamVectorTable      equ $08030000      when using sram
          0B00 0000   12   RamVectorTable      equ $0B000000      when using dram
                      13   
                      14   
                      15   
                      16   ; CSTART.ASM  -  C startup-code for Debug Monitor
00000000              17                   align
                      18   
00000000              19                   org $00000000          ;start of rom based vector table, 68k hard wired to expect this at $0
                      20   
00000000  0C00 0000   21   InitialSP       dc.l StackPointerVal   ;initial supervisor state stack pointer(stack decrements first before being used)
00000004  0000 0400   22   InitialPC       dc.l start             ;address of 1st instruction of program after a reset
00000008  0000 0802   23   BusError        dc.l E_BErro           ;bus error - stop program
0000000C  0000 0814   24   AddressError    dc.l E_AErro           ;address error - stop program
00000010  0000 0826   25   IllegalInstr    dc.l E_IInst           ;illegal instruction - stop program
00000014  0000 0838   26   DividebyZero    dc.l E_DZero           ;divide by zero error - stop program
00000018  0000 084A   27   Check           dc.l E_Check           ;Check instruction - stop program
0000001C  0000 085C   28   TrapV           dc.l E_Trapv           ;Trapv instruction - stop program
00000020  0000 086E   29   Privilege       dc.l E_Priv            ;privilige violation - stop program
00000024  0000 0880   30   Trace           dc.l E_Trace           ;stop on trace
00000028  0000 0892   31   Line1010emul    dc.l E_1010            ;1010 instructions stop
0000002C  0000 08A4   32   Line1111emul    dc.l E_1111            ;1111 instructions stop
00000030  0000 08B6   33   Unassigned1     dc.l E_Unnas1           ;unassigned vector
00000034  0000 08B6   34   Unassigned2     dc.l E_Unnas2           ;unassigned vector
00000038  0000 08B6   35   Unassigned3     dc.l E_Unnas3           ;unassigned vector
0000003C  0000 08B6   36   Uninit_IRQ      dc.l E_UnitI           ;uninitialised interrupt
00000040  0000 08B6   37   Unassigned4     dc.l E_Unnas4           ;unassigned vector
00000044  0000 08B6   38   Unassigned5     dc.l E_Unnas5           ;unassigned vector
00000048  0000 08B6   39   Unassigned6     dc.l E_Unnas6           ;unassigned vector
0000004C  0000 08B6   40   Unassigned7     dc.l E_Unnas7           ;unassigned vector
00000050  0000 08B6   41   Unassigned8     dc.l E_Unnas8           ;unassigned vector
00000054  0000 08B6   42   Unassigned9     dc.l E_Unnas9           ;unassigned vector
00000058  0000 08B6   43   Unassigned10    dc.l E_Unnas10           ;unassigned vector
0000005C  0000 08B6   44   Unassigned11    dc.l E_Unnas11           ;unassigned vector
00000060  0000 08B6   45   SpuriousIRQ     dc.l E_Spuri           ;stop on spurious irq
                      46   *
                      47   *
00000064  0000 049A   48   Level1IRQ       dc.l Level1RamISR
00000068  0000 04AC   49   Level2IRQ       dc.l Level2RamISR
0000006C  0000 04BE   50   Level3IRQ       dc.l Level3RamISR
00000070  0000 04D0   51   Level4IRQ       dc.l Level4RamISR
00000074  0000 04E2   52   Level5IRQ       dc.l Level5RamISR
00000078  0000 05EC   53   Level6IRQ       dc.l Level6RamISR
0000007C  0000 05FE   54   Level7IRQ       dc.l Level7RamISR
                      55   *
                      56   *
00000080  0000 0610   57   Trap0           dc.l Trap0RamISR        ; User installed trap handler
00000084  0000 0622   58   Trap1           dc.l Trap1RamISR        ; User installed trap handler
00000088  0000 0634   59   Trap2           dc.l Trap2RamISR        ; User installed trap handler
0000008C  0000 0646   60   Trap3           dc.l Trap3RamISR        ; User installed trap handler
00000090  0000 0658   61   Trap4           dc.l Trap4RamISR        ; User installed trap handler
00000094  0000 066A   62   Trap5           dc.l Trap5RamISR        ; User installed trap handler
00000098  0000 067C   63   Trap6           dc.l Trap6RamISR        ; User installed trap handler
0000009C  0000 068E   64   Trap7           dc.l Trap7RamISR        ; User installed trap handler
000000A0  0000 06A0   65   Trap8           dc.l Trap8RamISR        ; User installed trap handler
000000A4  0000 06B2   66   Trap9           dc.l Trap9RamISR        ; User installed trap handler
000000A8  0000 06C4   67   Trap10          dc.l Trap10RamISR       ; User installed trap handler
000000AC  0000 06D6   68   Trap11          dc.l Trap11RamISR       ; User installed trap handler
000000B0  0000 06E8   69   Trap12          dc.l Trap12RamISR       ; User installed trap handler
000000B4  0000 06FA   70   Trap13          dc.l Trap13RamISR       ; User installed trap handler
000000B8  0000 070C   71   Trap14          dc.l Trap14RamISR       ; User installed trap handler
000000BC  0000 07FC   72   Trap15          dc.l Trap15RamISR       ; User installed trap handler
                      73   
                      74   *
                      75   * Other vectors 64-255 are users vectors for autovectored IO device (not implemented in TG68)
                      76   *
                      77   
00000400              78                   org       $00000400
                      79   
00000400  46FC 2700   80   start:          move.w     #$2700,SR             set interrupts to disable until later
                      81   
                      82   *************************************************************************************
                      83   ** add some 68000 instruction to read and write to memory, IO etc. This doesn't do anything
                      84   ** important, it just creates read and write bus cycles to specific addresses which
                      85   ** help with debugging hardware in Quartus simulations
                      86   **************************************************************************************
                      87   
                      88                   ; perform some dummy read/write of 32 bit values to memory to see waveforms during a simulation
                      89   
00000404  23FC 1122   90                   move.l     #$11223344,$08060000 write 32 bits, to memory
00000408  3344 0806 
0000040C  0000      
0000040E  2039 0806   91                   move.l     $08060000,d0         read 32 bits back
00000412  0000      
00000414  13FC 0000   92                   move.b     #$00,$00400000         write to the output ports
00000418  0040 0000 
0000041C  13FC 0000   93                   move.b     #$00,$00400002         write to the output ports
00000420  0040 0002 
00000424  13FC 0000   94                   move.b     #$00,$00400004         write to the output ports
00000428  0040 0004 
0000042C  13FC 0000   95                   move.b     #$00,$00400006         write to the output ports
00000430  0040 0006 
00000434  13FC 0000   96                   move.b     #$00,$00400008         write to the output ports
00000438  0040 0008 
0000043C  13FC 0000   97                   move.b     #$00,$00400010         write to the hex display ports
00000440  0040 0010 
00000444  13FC 0000   98                   move.b     #$00,$00400012         write to the hex display ports
00000448  0040 0012 
0000044C  13FC 0000   99                   move.b     #$00,$00400014         write to the hex display ports
00000450  0040 0014 
00000454  13FC 0000  100                   move.b     #0,$00400020         write to the LCD
00000458  0040 0020 
0000045C  13FC 0000  101                   move.b     #0,$00400022         write to the LCD
00000460  0040 0022 
00000464  13FC 0000  102                   move.b     #0,$00400030         write to the Timer1 Data
00000468  0040 0030 
0000046C  13FC 0000  103                   move.b     #0,$00400032         write to the Timer1 Control
00000470  0040 0032 
                     104   
                     105                   ; some important initialisation do not modify
00000474  23FC FFFF  106                   move.l    #-1,__ungetbuf  ; unget-buffer for keyboard input
00000478  FFFF 0B00 
0000047C  00C0      
0000047E  23FC 0000  107                   move.l    #0,__allocp     ; pointer to allocated memory for malloc-function
00000482  0000 0B00 
00000486  00C4      
00000488  23FC 0B00  108                   move.l    #heap,__heap    ; pointer to free memory
0000048C  0596 0B00 
00000490  00C4      
                     109   
                     110   
00000492  4EB9 0000  111   mainloop        jsr       _main
00000496  2EB4      
00000498  60F8       112                   bra       mainloop
                     113   
                     114   *********************************************************************************************************
                     115   * Code to call Ram Based Interrupt handler and other exeception handler code
                     116   *********************************************************************************************************
0000049A  48E7 FFFE  117   Level1RamISR    movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
0000049E  2079 0B00  118                   move.l    VL1IRQ,a0               get ram based address into a0
000004A2  0064      
000004A4  4E90       119                   jsr       0(a0)                   jump to the subroutine that is the interrupt handler, using ram based address
000004A6  4CDF 7FFF  120                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
000004AA  4E73       121                   rte
000004AC  48E7 FFFE  122   Level2RamISR    movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
000004B0  2079 0B00  123                   move.l    VL2IRQ,a0               get ram based address into a0
000004B4  0068      
000004B6  4E90       124                   jsr       0(a0)                   jump to the subroutine that is the interrupt handler, using ram based address
000004B8  4CDF 7FFF  125                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
000004BC  4E73       126                   rte
000004BE  48E7 FFFE  127   Level3RamISR    movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
000004C2  2079 0B00  128                   move.l    VL3IRQ,a0               get ram based address into a0
000004C6  006C      
000004C8  4E90       129                   jsr       0(a0)                   jump to the subroutine that is the interrupt handler, using ram based address
000004CA  4CDF 7FFF  130                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
000004CE  4E73       131                   rte
000004D0  48E7 FFFE  132   Level4RamISR    movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
000004D4  2079 0B00  133                   move.l    VL4IRQ,a0               get ram based address into a0
000004D8  0070      
000004DA  4E90       134                   jsr       0(a0)                   jump to the subroutine that is the interrupt handler, using ram based address
000004DC  4CDF 7FFF  135                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
000004E0  4E73       136                   rte
                     137   
                     138   * Trace trap Handler
                     139   
                     140   Level5RamISR
                     141   *
                     142   **         Copy 68000 registers from debug monitor Variables,
                     143   *
                     144   *
000004E2  23FC 0000  145                   move.l    #1,_Trace              switch on Trace Mode
000004E6  0001 0B00 
000004EA  00D8      
000004EC  13FC 0000  146                   move.b    #$0,$0040000A          turn off a trace exception so we don't when generate a trace when disassembling instruction in the register dump (disassembling causes access to use program)
000004F0  0040 000A 
000004F4  33DF 0B00  147                   move.w    (sp)+,_SR              get at the users status register pointed to by stack pointer and copy
000004F8  012C      
000004FA  23DF 0B00  148                   move.l    (sp)+,_PC              get at the users program counter and copy
000004FE  0120      
                     149   *
00000500  23CF 0B00  150                   move.l    SP,_SSP                copy system stack pointer to debug monitor variable
00000504  0124      
00000506  23C0 0B00  151                   move.l    d0,_d0
0000050A  00E4      
0000050C  23C1 0B00  152                   move.l    d1,_d1
00000510  00E8      
00000512  23C2 0B00  153                   move.l    d2,_d2
00000516  00EC      
00000518  23C3 0B00  154                   move.l    d3,_d3
0000051C  00F0      
0000051E  23C4 0B00  155                   move.l    d4,_d4
00000522  00F4      
00000524  23C5 0B00  156                   move.l    d5,_d5
00000528  00F8      
0000052A  23C6 0B00  157                   move.l    d6,_d6
0000052E  00FC      
00000530  23C7 0B00  158                   move.l    d7,_d7
00000534  0100      
                     159   *
00000536  23C8 0B00  160                   move.l    a0,_a0
0000053A  0104      
0000053C  23C9 0B00  161                   move.l    a1,_a1
00000540  0108      
00000542  23CA 0B00  162                   move.l    a2,_a2
00000546  010C      
00000548  23CB 0B00  163                   move.l    a3,_a3
0000054C  0110      
0000054E  23CC 0B00  164                   move.l    a4,_a4
00000552  0114      
00000554  23CD 0B00  165                   move.l    a5,_a5
00000558  0118      
0000055A  23CE 0B00  166                   move.l    a6,_a6
0000055E  011C      
00000560  4E68       167                   move.l    usp,a0
00000562  23C8 0B00  168                   move.l    a0,_USP
00000566  0128      
                     169   *
00000568  2079 0B00  170                   move.l    VL5IRQ,a0              get ram based address into a0, trace exception for next instruction will be generated in Menu SPACE command
0000056C  0074      
0000056E  4E90       171                   jsr       0(a0)                  jump to the subroutine that is the trap handler, using ram based address
                     172   
                     173   ** After trace, reload 68000 registers with new values before continuing
                     174   
00000570  2039 0B00  175                   move.l   _d0,d0
00000574  00E4      
00000576  2239 0B00  176                   move.l   _d1,d1
0000057A  00E8      
0000057C  2439 0B00  177                   move.l   _d2,d2
00000580  00EC      
00000582  2639 0B00  178                   move.l   _d3,d3
00000586  00F0      
00000588  2839 0B00  179                   move.l   _d4,d4
0000058C  00F4      
0000058E  2A39 0B00  180                   move.l   _d5,d5
00000592  00F8      
00000594  2C39 0B00  181                   move.l   _d6,d6
00000598  00FC      
0000059A  2E39 0B00  182                   move.l   _d7,d7
0000059E  0100      
                     183   
000005A0  2079 0B00  184                   move.l   _USP,a0
000005A4  0128      
000005A6  4E60       185                   move.l   a0,USP                     load user stack pointer
000005A8  2079 0B00  186                   move.l   _a0,a0
000005AC  0104      
000005AE  2279 0B00  187                   move.l   _a1,a1
000005B2  0108      
000005B4  2479 0B00  188                   move.l   _a2,a2
000005B8  010C      
000005BA  2679 0B00  189                   move.l   _a3,a3
000005BE  0110      
000005C0  2879 0B00  190                   move.l   _a4,a4
000005C4  0114      
000005C6  2A79 0B00  191                   move.l   _a5,a5
000005CA  0118      
000005CC  2C79 0B00  192                   move.l   _a6,a6
000005D0  011C      
                     193   
000005D2  2E79 0B00  194                   move.l   _SSP,sp
000005D6  0124      
000005D8  2F39 0B00  195                   move.l   _PC,-(sp)
000005DC  0120      
000005DE  3F39 0B00  196                   move.w   _SR,-(sp)
000005E2  012C      
000005E4  11F8 0074  197                   move.b    $00000074,$0	          read trace exception vector after accessing disassembly to reset the trace request causes by disassembling program above
000005E8  0000      
000005EA  4E73       198                   rte
                     199   
                     200   * address trap handler
                     201   
000005EC  48E7 FFFE  202   Level6RamISR    movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
000005F0  2079 0B00  203                   move.l    VL6IRQ,a0               get ram based address into a0
000005F4  0078      
000005F6  4E90       204                   jsr       0(a0)                   jump to the subroutine that is the interrupt handler, using ram based address
000005F8  4CDF 7FFF  205                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
000005FC  4E73       206                   rte
                     207   
000005FE  48E7 FFFE  208   Level7RamISR    movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000602  2079 0B00  209                   move.l    VL7IRQ,a0               get ram based address into a0
00000606  007C      
00000608  4E90       210                   jsr       0(a0)                   jump to the subroutine that is the interrupt handler, using ram based address
0000060A  4CDF 7FFF  211                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
0000060E  4E73       212                   rte
                     213   
                     214   
                     215   ********************************************************************************************************
                     216   * Ram based Trap handler and other exeception handler code
                     217   *********************************************************************************************************
                     218   
00000610  48E7 FFFE  219   Trap0RamISR     movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000614  2079 0B00  220                   move.l    VTrap0,a0                get ram based address into a0
00000618  0080      
0000061A  4E90       221                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
0000061C  4CDF 7FFF  222                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
00000620  4E73       223                   rte
                     224   
00000622  48E7 FFFE  225   Trap1RamISR     movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000626  2079 0B00  226                   move.l    VTrap1,a0                get ram based address into a0
0000062A  0084      
0000062C  4E90       227                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
0000062E  4CDF 7FFF  228                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
00000632  4E73       229                   rte
                     230   
00000634  48E7 FFFE  231   Trap2RamISR     movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000638  2079 0B00  232                   move.l    VTrap2,a0                get ram based address into a0
0000063C  0088      
0000063E  4E90       233                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
00000640  4CDF 7FFF  234                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
00000644  4E73       235                   rte
                     236   
00000646  48E7 FFFE  237   Trap3RamISR     movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
0000064A  2079 0B00  238                   move.l    VTrap3,a0                get ram based address into a0
0000064E  008C      
00000650  4E90       239                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
00000652  4CDF 7FFF  240                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
00000656  4E73       241                   rte
                     242   
00000658  48E7 FFFE  243   Trap4RamISR     movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
0000065C  2079 0B00  244                   move.l    VTrap4,a0                get ram based address into a0
00000660  0090      
00000662  4E90       245                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
00000664  4CDF 7FFF  246                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
00000668  4E73       247                   rte
                     248   
0000066A  48E7 FFFE  249   Trap5RamISR     movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
0000066E  2079 0B00  250                   move.l    VTrap5,a0                get ram based address into a0
00000672  0094      
00000674  4E90       251                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
00000676  4CDF 7FFF  252                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
0000067A  4E73       253                   rte
                     254   
0000067C  48E7 FFFE  255   Trap6RamISR     movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000680  2079 0B00  256                   move.l    VTrap6,a0                get ram based address into a0
00000684  0098      
00000686  4E90       257                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
00000688  4CDF 7FFF  258                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
0000068C  4E73       259                   rte
                     260   
0000068E  48E7 FFFE  261   Trap7RamISR     movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000692  2079 0B00  262                   move.l    VTrap7,a0                get ram based address into a0
00000696  009C      
00000698  4E90       263                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
0000069A  4CDF 7FFF  264                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
0000069E  4E73       265                   rte
                     266   
000006A0  48E7 FFFE  267   Trap8RamISR     movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
000006A4  2079 0B00  268                   move.l    VTrap8,a0                get ram based address into a0
000006A8  00A0      
000006AA  4E90       269                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
000006AC  4CDF 7FFF  270                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
000006B0  4E73       271                   rte
                     272   
000006B2  48E7 FFFE  273   Trap9RamISR     movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
000006B6  2079 0B00  274                   move.l    VTrap9,a0                get ram based address into a0
000006BA  00A4      
000006BC  4E90       275                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
000006BE  4CDF 7FFF  276                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
000006C2  4E73       277                   rte
                     278   
000006C4  48E7 FFFE  279   Trap10RamISR    movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
000006C8  2079 0B00  280                   move.l    VTrap10,a0                get ram based address into a0
000006CC  00A8      
000006CE  4E90       281                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
000006D0  4CDF 7FFF  282                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
000006D4  4E73       283                   rte
                     284   
000006D6  48E7 FFFE  285   Trap11RamISR    movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
000006DA  2079 0B00  286                   move.l    VTrap11,a0                get ram based address into a0
000006DE  00AC      
000006E0  4E90       287                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
000006E2  4CDF 7FFF  288                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
000006E6  4E73       289                   rte
                     290   
000006E8  48E7 FFFE  291   Trap12RamISR    movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
000006EC  2079 0B00  292                   move.l    VTrap12,a0                get ram based address into a0
000006F0  00B0      
000006F2  4E90       293                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
000006F4  4CDF 7FFF  294                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
000006F8  4E73       295                   rte
                     296   
000006FA  48E7 FFFE  297   Trap13RamISR    movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
000006FE  2079 0B00  298                   move.l    VTrap13,a0                get ram based address into a0
00000702  00B4      
00000704  4E90       299                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
00000706  4CDF 7FFF  300                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
0000070A  4E73       301                   rte
                     302   
                     303   Trap14RamISR    ;Break Point Handler
                     304   *
                     305   **         Copy 68000 registers from debug monitor Variables
                     306   *
0000070C  23FC 0000  307                   move.l    #1,_Trace      switch on Trace Mode
00000710  0001 0B00 
00000714  00D8      
00000716  33DF 0B00  308                   move.w    (sp)+,_SR       get at the users status register pointed to by stack pointer and copy
0000071A  012C      
0000071C  23DF 0B00  309                   move.l    (sp)+,_PC      get at the users program counter and copy
00000720  0120      
                     310   *
00000722  23C0 0B00  311                   move.l    d0,_d0
00000726  00E4      
00000728  23C1 0B00  312                   move.l    d1,_d1
0000072C  00E8      
0000072E  23C2 0B00  313                   move.l    d2,_d2
00000732  00EC      
00000734  23C3 0B00  314                   move.l    d3,_d3
00000738  00F0      
0000073A  23C4 0B00  315                   move.l    d4,_d4
0000073E  00F4      
00000740  23C5 0B00  316                   move.l    d5,_d5
00000744  00F8      
00000746  23C6 0B00  317                   move.l    d6,_d6
0000074A  00FC      
0000074C  23C7 0B00  318                   move.l    d7,_d7
00000750  0100      
                     319   *
00000752  23C8 0B00  320                   move.l    a0,_a0
00000756  0104      
00000758  23C9 0B00  321                   move.l    a1,_a1
0000075C  0108      
0000075E  23CA 0B00  322                   move.l    a2,_a2
00000762  010C      
00000764  23CB 0B00  323                   move.l    a3,_a3
00000768  0110      
0000076A  23CC 0B00  324                   move.l    a4,_a4
0000076E  0114      
00000770  23CD 0B00  325                   move.l    a5,_a5
00000774  0118      
00000776  23CE 0B00  326                   move.l    a6,_a6
0000077A  011C      
0000077C  4E68       327                   move.l    USP,a0
0000077E  23C8 0B00  328                   move.l    a0,_USP
00000782  0128      
                     329   *
00000784  2079 0B00  330                   move.l    VTrap14,a0             get ram based address into a0
00000788  00B8      
0000078A  4E90       331                   jsr       0(a0)                  jump to the subroutine that is the trap handler, using ram based address
                     332   
                     333   ** After breakpoint reload 68000 registers with new values before continuing
                     334   
                     335   *                move.b    #$ff,$0040000A     generate a trace exception for the next instruction
0000078C  2039 0B00  336                   move.l   _d0,d0
00000790  00E4      
00000792  2239 0B00  337                   move.l   _d1,d1
00000796  00E8      
00000798  2439 0B00  338                   move.l   _d2,d2
0000079C  00EC      
0000079E  2639 0B00  339                   move.l   _d3,d3
000007A2  00F0      
000007A4  2839 0B00  340                   move.l   _d4,d4
000007A8  00F4      
000007AA  2A39 0B00  341                   move.l   _d5,d5
000007AE  00F8      
000007B0  2C39 0B00  342                   move.l   _d6,d6
000007B4  00FC      
000007B6  2E39 0B00  343                   move.l   _d7,d7
000007BA  0100      
                     344   
000007BC  2079 0B00  345                   move.l   _USP,a0
000007C0  0128      
000007C2  4E60       346                   move.l   a0,USP        load user stack pointer A7
000007C4  2079 0B00  347                   move.l   _a0,a0
000007C8  0104      
000007CA  2279 0B00  348                   move.l   _a1,a1
000007CE  0108      
000007D0  2479 0B00  349                   move.l   _a2,a2
000007D4  010C      
000007D6  2679 0B00  350                   move.l   _a3,a3
000007DA  0110      
000007DC  2879 0B00  351                   move.l   _a4,a4
000007E0  0114      
000007E2  2A79 0B00  352                   move.l   _a5,a5
000007E6  0118      
000007E8  2C79 0B00  353                   move.l   _a6,a6
000007EC  011C      
                     354   
000007EE  2F39 0B00  355                   move.l   _PC,-(sp)
000007F2  0120      
000007F4  3F39 0B00  356                   move.w   _SR,-(sp)
000007F8  012C      
000007FA  4E73       357                   rte
                     358   
000007FC  4EF9 0000  359   Trap15RamISR    jmp     _CallDebugMonitor
00000800  1F86      
                     360   *                movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
                     361   *                move.l    VTrap15,a0                get ram based address into a0
                     362   *                jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
                     363   *                movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
                     364   *                rte
                     365   
                     366   *********************************************************************************************************
                     367   *Default exception handler for everything without a specific handler
                     368   *********************************************************************************************************
                     369   
                     370   *
                     371   **              Jump here for each unhandled exception
                     372   **              If you need to, MAKE SURE YOU SAVE ALL IMPORTANT REGISTERS AND RESTORE THEM BEFORE RETURNING (IF APPROPRIATE)
                     373   *
                     374   
00000802  48E7 FFFE  375   E_BErro         movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000806  2079 0B00  376                   move.l    VBusError,a0            get ram based address into a0
0000080A  0008      
0000080C  4E90       377                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
0000080E  4CDF 7FFF  378                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
00000812  4E73       379                   rte
00000814  48E7 FFFE  380   E_AErro         movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000818  2079 0B00  381                   move.l    VAddressError,a0        get ram based address into a0
0000081C  000C      
0000081E  4E90       382                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
00000820  4CDF 7FFF  383                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
00000824  4E73       384                   rte
00000826  48E7 FFFE  385   E_IInst         movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
0000082A  2079 0B00  386                   move.l    VIllegalInstr,a0        get ram based address into a0
0000082E  0010      
00000830  4E90       387                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
00000832  4CDF 7FFF  388                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
00000836  4E73       389                   rte
00000838  48E7 FFFE  390   E_DZero         movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
0000083C  2079 0B00  391                   move.l    VDividebyZero,a0        get ram based address into a0
00000840  0014      
00000842  4E90       392                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
00000844  4CDF 7FFF  393                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
00000848  4E73       394                   rte
0000084A  48E7 FFFE  395   E_Check         movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
0000084E  2079 0B00  396                   move.l    VCheck,a0               get ram based address into a0
00000852  0018      
00000854  4E90       397                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
00000856  4CDF 7FFF  398                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
0000085A  4E73       399                   rte
0000085C  48E7 FFFE  400   E_Trapv         movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000860  2079 0B00  401                   move.l    VTrapV,a0               get ram based address into a0
00000864  001C      
00000866  4E90       402                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
00000868  4CDF 7FFF  403                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
0000086C  4E73       404                   rte
0000086E  48E7 FFFE  405   E_Priv          movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000872  2079 0B00  406                   move.l    VPrivilege,a0           get ram based address into a0
00000876  0020      
00000878  4E90       407                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
0000087A  4CDF 7FFF  408                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
0000087E  4E73       409                   rte
00000880  48E7 FFFE  410   E_Trace         movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000884  2079 0B00  411                   move.l    VTrace,a0               get ram based address into a0
00000888  0024      
0000088A  4E90       412                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
0000088C  4CDF 7FFF  413                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
00000890  4E73       414                   rte
00000892  48E7 FFFE  415   E_1010          movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000896  2079 0B00  416                   move.l    VLine1010emul,a0        get ram based address into a0
0000089A  0028      
0000089C  4E90       417                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
0000089E  4CDF 7FFF  418                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
000008A2  4E73       419                   rte
000008A4  48E7 FFFE  420   E_1111          movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
000008A8  2079 0B00  421                   move.l    VLine1111emul,a0        get ram based address into a0
000008AC  002C      
000008AE  4E90       422                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
000008B0  4CDF 7FFF  423                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
000008B4  4E73       424                   rte
                     425   E_Unnas1
                     426   E_Unnas2
                     427   E_Unnas3
                     428   E_UnitI
                     429   E_Unnas4
                     430   E_Unnas5
                     431   E_Unnas6
                     432   E_Unnas7
                     433   E_Unnas8
                     434   E_Unnas9
                     435   E_Unnas10
                     436   E_Unnas11
                     437   E_Spuri
000008B6  60FE       438   _stop            bra _stop                         stop
                     439   ***************************************************************************************************
                     440   * Go() function in debug monitor
                     441   ***************************************************************************************************
                     442   _go
000008B8  2E79 0B00  443                   move.l   _SSP,a7        load system stack pointer (remember we are in supervisor mode when running this so a7 is the System stack pointer)
000008BC  0124      
000008BE  2F39 0B00  444                   move.l   _PC,-(sp)      copy debug monitor PC variable to the stack
000008C2  0120      
000008C4  3F39 0B00  445                   move.w   _SR,-(sp)      copy debug monitor status reg to the stack
000008C8  012C      
                     446   
000008CA  1038 0078  447                   move.b   $00000078,d0  remove any spurious address exception arising after power on
000008CE  2039 0B00  448                   move.l   _d0,d0
000008D2  00E4      
000008D4  2239 0B00  449                   move.l   _d1,d1
000008D8  00E8      
000008DA  2439 0B00  450                   move.l   _d2,d2
000008DE  00EC      
000008E0  2639 0B00  451                   move.l   _d3,d3
000008E4  00F0      
000008E6  2839 0B00  452                   move.l   _d4,d4
000008EA  00F4      
000008EC  2A39 0B00  453                   move.l   _d5,d5
000008F0  00F8      
000008F2  2C39 0B00  454                   move.l   _d6,d6
000008F6  00FC      
000008F8  2E39 0B00  455                   move.l   _d7,d7
000008FC  0100      
                     456   
000008FE  2079 0B00  457                   move.l   _USP,a0
00000902  0128      
00000904  4E60       458                   move.l   a0,USP        load user stack pointer (remember we are in supervisor mode when running this, so a7 is the System stack pointer)
00000906  2079 0B00  459                   move.l   _a0,a0
0000090A  0104      
0000090C  2279 0B00  460                   move.l   _a1,a1
00000910  0108      
00000912  2479 0B00  461                   move.l   _a2,a2
00000916  010C      
00000918  2679 0B00  462                   move.l   _a3,a3
0000091C  0110      
0000091E  2879 0B00  463                   move.l   _a4,a4
00000922  0114      
00000924  2A79 0B00  464                   move.l   _a5,a5
00000928  0118      
0000092A  2C79 0B00  465                   move.l   _a6,a6
0000092E  011C      
00000930  4E73       466                   rte                    load the status reg and PC from the stack and commence running
                     467                                          *used to be rte but this didn't load the status byte
                     468   
                     469   ; C:\CPEN412\GITHUB_STEUP\M68KV6.0 - 800BY480\PROGRAMS\DEBUGMONITORCODE\M68KDEBUG (NO DISASSEMBLER).C - Compiled by CC68K  Version 5.00 (c) 1991-2005  Peter J. Fondse
                     470   ; #include "DebugMonitor.h"
                     471   ; // use 08030000 for a system running from sram or 0B000000 for system running from dram
                     472   ; //#define StartOfExceptionVectorTable 0x08030000
                     473   ; #define StartOfExceptionVectorTable 0x0B000000
                     474   ; // use 0C000000 for dram or hex 08040000 for sram
                     475   ; //#define TopOfStack 0x08040000
                     476   ; #define TopOfStack 0x0C000000
                     477   ; /* DO NOT INITIALISE GLOBAL VARIABLES - DO IT in MAIN() */
                     478   ; unsigned int i, x, y, z, PortA_Count;
                     479   ; int     Trace, GoFlag, Echo;                       // used in tracing/single stepping
                     480   ; // 68000 register dump and preintialise value (these can be changed by the user program when it is running, e.g. stack pointer, registers etc
                     481   ; unsigned int d0,d1,d2,d3,d4,d5,d6,d7 ;
                     482   ; unsigned int a0,a1,a2,a3,a4,a5,a6 ;
                     483   ; unsigned int PC, SSP, USP ;
                     484   ; unsigned short int SR;
                     485   ; // Breakpoint variables
                     486   ; unsigned int BreakPointAddress[8];                      //array of 8 breakpoint addresses
                     487   ; unsigned short int BreakPointInstruction[8] ;           // to hold the instruction opcode at the breakpoint
                     488   ; unsigned int BreakPointSetOrCleared[8] ;
                     489   ; unsigned int InstructionSize ;
                     490   ; // watchpoint variables
                     491   ; unsigned int WatchPointAddress[8];                      //array of 8 breakpoint addresses
                     492   ; unsigned int WatchPointSetOrCleared[8] ;
                     493   ; char WatchPointString[8][100] ;
                     494   ; char    TempString[100] ;
                     495   ; /************************************************************************************
                     496   ; *Subroutine to give the 68000 something useless to do to waste 1 mSec
                     497   ; ************************************************************************************/
                     498   ; void Wait1ms(void)
                     499   ; {
                     500   _Wait1ms:
00000932  2F02       501          move.l    D2,-(A7)
                     502   ; long int  i ;
                     503   ; for(i = 0; i < 1000; i ++)
00000934  4282       504          clr.l     D2
                     505   Wait1ms_1:
00000936  0C82 0000  506          cmp.l     #1000,D2
0000093A  03E8      
0000093C  6C04       507          bge.s     Wait1ms_3
0000093E  5282       508          addq.l    #1,D2
00000940  60F4       509          bra       Wait1ms_1
                     510   Wait1ms_3:
00000942  241F       511          move.l    (A7)+,D2
00000944  4E75       512          rts
                     513   ; ;
                     514   ; }
                     515   ; /************************************************************************************
                     516   ; *Subroutine to give the 68000 something useless to do to waste 3 mSec
                     517   ; **************************************************************************************/
                     518   ; void Wait3ms(void)
                     519   ; {
                     520   _Wait3ms:
00000946  2F02       521          move.l    D2,-(A7)
                     522   ; int i ;
                     523   ; for(i = 0; i < 3; i++)
00000948  4282       524          clr.l     D2
                     525   Wait3ms_1:
0000094A  0C82 0000  526          cmp.l     #3,D2
0000094E  0003      
00000950  6C08       527          bge.s     Wait3ms_3
                     528   ; Wait1ms() ;
00000952  4EB8 0932  529          jsr       _Wait1ms
00000956  5282       530          addq.l    #1,D2
00000958  60F0       531          bra       Wait3ms_1
                     532   Wait3ms_3:
0000095A  241F       533          move.l    (A7)+,D2
0000095C  4E75       534          rts
                     535   ; }
                     536   ; /*********************************************************************************************
                     537   ; *Subroutine to initialise the display by writing some commands to the LCD internal registers
                     538   ; *********************************************************************************************/
                     539   ; void Init_LCD(void)
                     540   ; {
                     541   _Init_LCD:
                     542   ; LCDcommand = (char)(0x0c) ;
0000095E  13FC 000C  543          move.b    #12,4194336
00000962  0040 0020 
                     544   ; Wait3ms() ;
00000966  4EB8 0946  545          jsr       _Wait3ms
                     546   ; LCDcommand = (char)(0x38) ;
0000096A  13FC 0038  547          move.b    #56,4194336
0000096E  0040 0020 
                     548   ; Wait3ms() ;
00000972  4EB8 0946  549          jsr       _Wait3ms
00000976  4E75       550          rts
                     551   ; }
                     552   ; /******************************************************************************
                     553   ; *subroutine to output a single character held in d1 to the LCD display
                     554   ; *it is assumed the character is an ASCII code and it will be displayed at the
                     555   ; *current cursor position
                     556   ; *******************************************************************************/
                     557   ; void Outchar(int c)
                     558   ; {
                     559   _Outchar:
00000978  4E56 0000  560          link      A6,#0
                     561   ; LCDdata = (char)(c);
0000097C  202E 0008  562          move.l    8(A6),D0
00000980  13C0 0040  563          move.b    D0,4194338
00000984  0022      
                     564   ; Wait1ms() ;
00000986  4EB8 0932  565          jsr       _Wait1ms
0000098A  4E5E       566          unlk      A6
0000098C  4E75       567          rts
                     568   ; }
                     569   ; /**********************************************************************************
                     570   ; *subroutine to output a message at the current cursor position of the LCD display
                     571   ; ************************************************************************************/
                     572   ; void OutMess(char *theMessage)
                     573   ; {
                     574   _OutMess:
0000098E  4E56 FFFC  575          link      A6,#-4
                     576   ; char c ;
                     577   ; while((c = *theMessage++) != (char)(0))
                     578   OutMess_1:
00000992  206E 0008  579          move.l    8(A6),A0
00000996  52AE 0008  580          addq.l    #1,8(A6)
0000099A  1D50 FFFF  581          move.b    (A0),-1(A6)
0000099E  1010       582          move.b    (A0),D0
000009A0  6712       583          beq.s     OutMess_3
                     584   ; Outchar(c) ;
000009A2  122E FFFF  585          move.b    -1(A6),D1
000009A6  4881       586          ext.w     D1
000009A8  48C1       587          ext.l     D1
000009AA  2F01       588          move.l    D1,-(A7)
000009AC  4EB8 0978  589          jsr       _Outchar
000009B0  584F       590          addq.w    #4,A7
000009B2  60DE       591          bra       OutMess_1
                     592   OutMess_3:
000009B4  4E5E       593          unlk      A6
000009B6  4E75       594          rts
                     595   ; }
                     596   ; /******************************************************************************
                     597   ; *subroutine to clear the line by issuing 24 space characters
                     598   ; *******************************************************************************/
                     599   ; void Clearln(void)
                     600   ; {
                     601   _Clearln:
000009B8  2F02       602          move.l    D2,-(A7)
                     603   ; unsigned char i ;
                     604   ; for(i = 0; i < 24; i ++)
000009BA  4202       605          clr.b     D2
                     606   Clearln_1:
000009BC  0C02 0018  607          cmp.b     #24,D2
000009C0  640E       608          bhs.s     Clearln_3
                     609   ; Outchar(' ') ;  /* write a space char to the LCD display */
000009C2  4878 0020  610          pea       32
000009C6  4EB8 0978  611          jsr       _Outchar
000009CA  584F       612          addq.w    #4,A7
000009CC  5202       613          addq.b    #1,D2
000009CE  60EC       614          bra       Clearln_1
                     615   Clearln_3:
000009D0  241F       616          move.l    (A7)+,D2
000009D2  4E75       617          rts
                     618   ; }
                     619   ; /******************************************************************************
                     620   ; *subroutine to move the cursor to the start of line 1 and clear that line
                     621   ; *******************************************************************************/
                     622   ; void Oline0(char *theMessage)
                     623   ; {
                     624   _Oline0:
000009D4  4E56 0000  625          link      A6,#0
                     626   ; LCDcommand = (char)(0x80) ;
000009D8  13FC 0080  627          move.b    #128,4194336
000009DC  0040 0020 
                     628   ; Wait3ms();
000009E0  4EB8 0946  629          jsr       _Wait3ms
                     630   ; Clearln() ;
000009E4  4EB8 09B8  631          jsr       _Clearln
                     632   ; LCDcommand = (char)(0x80) ;
000009E8  13FC 0080  633          move.b    #128,4194336
000009EC  0040 0020 
                     634   ; Wait3ms() ;
000009F0  4EB8 0946  635          jsr       _Wait3ms
                     636   ; OutMess(theMessage) ;
000009F4  2F2E 0008  637          move.l    8(A6),-(A7)
000009F8  4EB8 098E  638          jsr       _OutMess
000009FC  584F       639          addq.w    #4,A7
000009FE  4E5E       640          unlk      A6
00000A00  4E75       641          rts
                     642   ; }
                     643   ; /******************************************************************************
                     644   ; *subroutine to move the cursor to the start of line 2 and clear that line
                     645   ; *******************************************************************************/
                     646   ; void Oline1(char *theMessage)
                     647   ; {
                     648   _Oline1:
00000A02  4E56 0000  649          link      A6,#0
                     650   ; LCDcommand = (char)(0xC0) ;
00000A06  13FC 00C0  651          move.b    #192,4194336
00000A0A  0040 0020 
                     652   ; Wait3ms();
00000A0E  4EB8 0946  653          jsr       _Wait3ms
                     654   ; Clearln() ;
00000A12  4EB8 09B8  655          jsr       _Clearln
                     656   ; LCDcommand = (char)(0xC0) ;
00000A16  13FC 00C0  657          move.b    #192,4194336
00000A1A  0040 0020 
                     658   ; Wait3ms() ;
00000A1E  4EB8 0946  659          jsr       _Wait3ms
                     660   ; OutMess(theMessage) ;
00000A22  2F2E 0008  661          move.l    8(A6),-(A7)
00000A26  4EB8 098E  662          jsr       _OutMess
00000A2A  584F       663          addq.w    #4,A7
00000A2C  4E5E       664          unlk      A6
00000A2E  4E75       665          rts
                     666   ; }
                     667   ; void InstallExceptionHandler( void (*function_ptr)(), int level)
                     668   ; {
                     669   _InstallExceptionHandler:
00000A30  4E56 FFFC  670          link      A6,#-4
                     671   ; volatile long int *RamVectorAddress = (volatile long int *)(StartOfExceptionVectorTable) ;   // pointer to the Ram based interrupt vector table created in Cstart in debug monitor
00000A34  2D7C 0B00  672          move.l    #184549376,-4(A6)
00000A38  0000 FFFC 
                     673   ; RamVectorAddress[level] = (long int *)(function_ptr);
00000A3C  206E FFFC  674          move.l    -4(A6),A0
00000A40  202E 000C  675          move.l    12(A6),D0
00000A44  E588       676          lsl.l     #2,D0
00000A46  21AE 0008  677          move.l    8(A6),0(A0,D0.L)
00000A4A  0800      
00000A4C  4E5E       678          unlk      A6
00000A4E  4E75       679          rts
                     680   ; }
                     681   ; void TestLEDS(void)
                     682   ; {
                     683   _TestLEDS:
00000A50  48E7 3000  684          movem.l   D2/D3,-(A7)
                     685   ; int delay ;
                     686   ; unsigned char count = 0 ;
00000A54  4202       687          clr.b     D2
                     688   ; while(1)    {
                     689   TestLEDS_1:
                     690   ; PortA = PortB = PortC = PortD = HEX_A = HEX_B = HEX_C = HEX_D = ((count << 4) + (count & 0x0f)) ;
00000A56  1002       691          move.b    D2,D0
00000A58  E908       692          lsl.b     #4,D0
00000A5A  1202       693          move.b    D2,D1
00000A5C  C23C 000F  694          and.b     #15,D1
00000A60  D001       695          add.b     D1,D0
00000A62  13C0 0040  696          move.b    D0,4194326
00000A66  0016      
00000A68  13C0 0040  697          move.b    D0,4194324
00000A6C  0014      
00000A6E  13C0 0040  698          move.b    D0,4194322
00000A72  0012      
00000A74  13C0 0040  699          move.b    D0,4194320
00000A78  0010      
00000A7A  13C0 0040  700          move.b    D0,4194310
00000A7E  0006      
00000A80  13C0 0040  701          move.b    D0,4194308
00000A84  0004      
00000A86  13C0 0040  702          move.b    D0,4194306
00000A8A  0002      
00000A8C  13C0 0040  703          move.b    D0,4194304
00000A90  0000      
                     704   ; for(delay = 0; delay < 200000; delay ++)
00000A92  4283       705          clr.l     D3
                     706   TestLEDS_4:
00000A94  0C83 0003  707          cmp.l     #200000,D3
00000A98  0D40      
00000A9A  6C04       708          bge.s     TestLEDS_6
00000A9C  5283       709          addq.l    #1,D3
00000A9E  60F4       710          bra       TestLEDS_4
                     711   TestLEDS_6:
                     712   ; ;
                     713   ; count ++;
00000AA0  5202       714          addq.b    #1,D2
00000AA2  60B2       715          bra       TestLEDS_1
                     716   ; }
                     717   ; }
                     718   ; void SwitchTest(void)
                     719   ; {
                     720   _SwitchTest:
00000AA4  48E7 3020  721          movem.l   D2/D3/A2,-(A7)
00000AA8  45F9 0000  722          lea       _printf.L,A2
00000AAC  3C12      
                     723   ; int i, switches = 0 ;
00000AAE  4283       724          clr.l     D3
                     725   ; printf("\r\n") ;
00000AB0  4879 0000  726          pea       @m68kde~1_1.L
00000AB4  45D6      
00000AB6  4E92       727          jsr       (A2)
00000AB8  584F       728          addq.w    #4,A7
                     729   ; while(1)    {
                     730   SwitchTest_1:
                     731   ; switches = (PortB << 8) | (PortA) ;
00000ABA  1039 0040  732          move.b    4194306,D0
00000ABE  0002      
00000AC0  C0BC 0000  733          and.l     #255,D0
00000AC4  00FF      
00000AC6  E188       734          lsl.l     #8,D0
00000AC8  1239 0040  735          move.b    4194304,D1
00000ACC  0000      
00000ACE  C2BC 0000  736          and.l     #255,D1
00000AD2  00FF      
00000AD4  8081       737          or.l      D1,D0
00000AD6  2600       738          move.l    D0,D3
                     739   ; printf("\rSwitches SW[7-0] = ") ;
00000AD8  4879 0000  740          pea       @m68kde~1_2.L
00000ADC  45DA      
00000ADE  4E92       741          jsr       (A2)
00000AE0  584F       742          addq.w    #4,A7
                     743   ; for( i = (int)(0x00000080); i > 0; i = i >> 1)  {
00000AE2  243C 0000  744          move.l    #128,D2
00000AE6  0080      
                     745   SwitchTest_4:
00000AE8  0C82 0000  746          cmp.l     #0,D2
00000AEC  0000      
00000AEE  6F20       747          ble.s     SwitchTest_6
                     748   ; if((switches & i) == 0)
00000AF0  2003       749          move.l    D3,D0
00000AF2  C082       750          and.l     D2,D0
00000AF4  660C       751          bne.s     SwitchTest_7
                     752   ; printf("0") ;
00000AF6  4879 0000  753          pea       @m68kde~1_3.L
00000AFA  45F0      
00000AFC  4E92       754          jsr       (A2)
00000AFE  584F       755          addq.w    #4,A7
00000B00  600A       756          bra.s     SwitchTest_8
                     757   SwitchTest_7:
                     758   ; else
                     759   ; printf("1") ;
00000B02  4879 0000  760          pea       @m68kde~1_4.L
00000B06  45F2      
00000B08  4E92       761          jsr       (A2)
00000B0A  584F       762          addq.w    #4,A7
                     763   SwitchTest_8:
00000B0C  E282       764          asr.l     #1,D2
00000B0E  60D8       765          bra       SwitchTest_4
                     766   SwitchTest_6:
00000B10  60A8       767          bra       SwitchTest_1
                     768   ; }
                     769   ; }
                     770   ; }
                     771   ; /*********************************************************************************************
                     772   ; *Subroutine to initialise the RS232 Port by writing some commands to the internal registers
                     773   ; *********************************************************************************************/
                     774   ; void Init_RS232(void)
                     775   ; {
                     776   _Init_RS232:
                     777   ; RS232_Control = (char)(0x15) ; //  %00010101    divide by 16 clock, set rts low, 8 bits no parity, 1 stop bit transmitter interrupt disabled
00000B12  13FC 0015  778          move.b    #21,4194368
00000B16  0040 0040 
                     779   ; RS232_Baud = (char)(0x1) ;      // program baud rate generator 000 = 230k, 001 = 115k, 010 = 57.6k, 011 = 38.4k, 100 = 19.2, all others = 9600
00000B1A  13FC 0001  780          move.b    #1,4194372
00000B1E  0040 0044 
00000B22  4E75       781          rts
                     782   ; }
                     783   ; int kbhit(void)
                     784   ; {
                     785   _kbhit:
                     786   ; if(((char)(RS232_Status) & (char)(0x01)) == (char)(0x01))    // wait for Rx bit in status register to be '1'
00000B24  1039 0040  787          move.b    4194368,D0
00000B28  0040      
00000B2A  C03C 0001  788          and.b     #1,D0
00000B2E  0C00 0001  789          cmp.b     #1,D0
00000B32  6604       790          bne.s     kbhit_1
                     791   ; return 1 ;
00000B34  7001       792          moveq     #1,D0
00000B36  6002       793          bra.s     kbhit_3
                     794   kbhit_1:
                     795   ; else
                     796   ; return 0 ;
00000B38  4280       797          clr.l     D0
                     798   kbhit_3:
00000B3A  4E75       799          rts
                     800   ; }
                     801   ; /*********************************************************************************************************
                     802   ; **  Subroutine to provide a low level output function to 6850 ACIA
                     803   ; **  This routine provides the basic functionality to output a single character to the serial Port
                     804   ; **  to allow the board to communicate with HyperTerminal Program
                     805   ; **
                     806   ; **  NOTE you do not call this function directly, instead you call the normal putchar() function
                     807   ; **  which in turn calls _putch() below). Other functions like puts(), printf() call putchar() so will
                     808   ; **  call _putch() also
                     809   ; *********************************************************************************************************/
                     810   ; int _putch( int c)
                     811   ; {
                     812   __putch:
00000B3C  4E56 0000  813          link      A6,#0
                     814   ; while(((char)(RS232_Status) & (char)(0x02)) != (char)(0x02))    // wait for Tx bit in status register or 6850 serial comms chip to be '1'
                     815   _putch_1:
00000B40  1039 0040  816          move.b    4194368,D0
00000B44  0040      
00000B46  C03C 0002  817          and.b     #2,D0
00000B4A  0C00 0002  818          cmp.b     #2,D0
00000B4E  6702       819          beq.s     _putch_3
00000B50  60EE       820          bra       _putch_1
                     821   _putch_3:
                     822   ; ;
                     823   ; (char)(RS232_TxData) = ((char)(c) & (char)(0x7f));                      // write to the data register to output the character (mask off bit 8 to keep it 7 bit ASCII)
00000B52  202E 0008  824          move.l    8(A6),D0
00000B56  C03C 007F  825          and.b     #127,D0
00000B5A  13C0 0040  826          move.b    D0,4194370
00000B5E  0042      
                     827   ; return c ;                                              // putchar() expects the character to be returned
00000B60  202E 0008  828          move.l    8(A6),D0
00000B64  4E5E       829          unlk      A6
00000B66  4E75       830          rts
                     831   ; }
                     832   ; /*********************************************************************************************************
                     833   ; **  Subroutine to provide a low level input function to 6850 ACIA
                     834   ; **  This routine provides the basic functionality to input a single character from the serial Port
                     835   ; **  to allow the board to communicate with HyperTerminal Program Keyboard (your PC)
                     836   ; **
                     837   ; **  NOTE you do not call this function directly, instead you call the normal _getch() function
                     838   ; **  which in turn calls _getch() below). Other functions like gets(), scanf() call _getch() so will
                     839   ; **  call _getch() also
                     840   ; *********************************************************************************************************/
                     841   ; int _getch( void )
                     842   ; {
                     843   __getch:
00000B68  2F02       844          move.l    D2,-(A7)
                     845   ; int c ;
                     846   ; while(((char)(RS232_Status) & (char)(0x01)) != (char)(0x01))    // wait for Rx bit in 6850 serial comms chip status register to be '1'
                     847   _getch_1:
00000B6A  1039 0040  848          move.b    4194368,D0
00000B6E  0040      
00000B70  C03C 0001  849          and.b     #1,D0
00000B74  0C00 0001  850          cmp.b     #1,D0
00000B78  6702       851          beq.s     _getch_3
00000B7A  60EE       852          bra       _getch_1
                     853   _getch_3:
                     854   ; ;
                     855   ; c = (RS232_RxData & (char)(0x7f));                   // read received character, mask off top bit and return as 7 bit ASCII character
00000B7C  1039 0040  856          move.b    4194370,D0
00000B80  0042      
00000B82  C0BC 0000  857          and.l     #255,D0
00000B86  00FF      
00000B88  C0BC 0000  858          and.l     #127,D0
00000B8C  007F      
00000B8E  2400       859          move.l    D0,D2
                     860   ; // shall we echo the character? Echo is set to TRUE at reset, but for speed we don't want to echo when downloading code with the 'L' debugger command
                     861   ; if(Echo)
00000B90  4AB9 0B00  862          tst.l     _Echo.L
00000B94  00E0      
00000B96  6708       863          beq.s     _getch_4
                     864   ; _putch(c);
00000B98  2F02       865          move.l    D2,-(A7)
00000B9A  4EB8 0B3C  866          jsr       __putch
00000B9E  584F       867          addq.w    #4,A7
                     868   _getch_4:
                     869   ; return c ;
00000BA0  2002       870          move.l    D2,D0
00000BA2  241F       871          move.l    (A7)+,D2
00000BA4  4E75       872          rts
                     873   ; }
                     874   ; // flush the input stream for any unread characters
                     875   ; void FlushKeyboard(void)
                     876   ; {
                     877   _FlushKeyboard:
00000BA6  4E56 FFFC  878          link      A6,#-4
                     879   ; char c ;
                     880   ; while(1)    {
                     881   FlushKeyboard_1:
                     882   ; if(((char)(RS232_Status) & (char)(0x01)) == (char)(0x01))    // if Rx bit in status register is '1'
00000BAA  1039 0040  883          move.b    4194368,D0
00000BAE  0040      
00000BB0  C03C 0001  884          and.b     #1,D0
00000BB4  0C00 0001  885          cmp.b     #1,D0
00000BB8  6610       886          bne.s     FlushKeyboard_4
                     887   ; c = ((char)(RS232_RxData) & (char)(0x7f)) ;
00000BBA  1039 0040  888          move.b    4194370,D0
00000BBE  0042      
00000BC0  C03C 007F  889          and.b     #127,D0
00000BC4  1D40 FFFF  890          move.b    D0,-1(A6)
00000BC8  6002       891          bra.s     FlushKeyboard_5
                     892   FlushKeyboard_4:
                     893   ; else
                     894   ; return ;
00000BCA  6002       895          bra.s     FlushKeyboard_6
                     896   FlushKeyboard_5:
00000BCC  60DC       897          bra       FlushKeyboard_1
                     898   FlushKeyboard_6:
00000BCE  4E5E       899          unlk      A6
00000BD0  4E75       900          rts
                     901   ; }
                     902   ; }
                     903   ; // converts hex char to 4 bit binary equiv in range 0000-1111 (0-F)
                     904   ; // char assumed to be a valid hex char 0-9, a-f, A-F
                     905   ; char xtod(int c)
                     906   ; {
                     907   _xtod:
00000BD2  4E56 0000  908          link      A6,#0
00000BD6  2F02       909          move.l    D2,-(A7)
00000BD8  242E 0008  910          move.l    8(A6),D2
                     911   ; if ((char)(c) <= (char)('9'))
00000BDC  0C02 0039  912          cmp.b     #57,D2
00000BE0  6E08       913          bgt.s     xtod_1
                     914   ; return c - (char)(0x30);    // 0 - 9 = 0x30 - 0x39 so convert to number by sutracting 0x30
00000BE2  1002       915          move.b    D2,D0
00000BE4  0400 0030  916          sub.b     #48,D0
00000BE8  6014       917          bra.s     xtod_3
                     918   xtod_1:
                     919   ; else if((char)(c) > (char)('F'))    // assume lower case
00000BEA  0C02 0046  920          cmp.b     #70,D2
00000BEE  6F08       921          ble.s     xtod_4
                     922   ; return c - (char)(0x57);    // a-f = 0x61-66 so needs to be converted to 0x0A - 0x0F so subtract 0x57
00000BF0  1002       923          move.b    D2,D0
00000BF2  0400 0057  924          sub.b     #87,D0
00000BF6  6006       925          bra.s     xtod_3
                     926   xtod_4:
                     927   ; else
                     928   ; return c - (char)(0x37);    // A-F = 0x41-46 so needs to be converted to 0x0A - 0x0F so subtract 0x37
00000BF8  1002       929          move.b    D2,D0
00000BFA  0400 0037  930          sub.b     #55,D0
                     931   xtod_3:
00000BFE  241F       932          move.l    (A7)+,D2
00000C00  4E5E       933          unlk      A6
00000C02  4E75       934          rts
                     935   ; }
                     936   ; int Get2HexDigits(char *CheckSumPtr)
                     937   ; {
                     938   _Get2HexDigits:
00000C04  4E56 0000  939          link      A6,#0
00000C08  2F02       940          move.l    D2,-(A7)
                     941   ; register int i = (xtod(_getch()) << 4) | (xtod(_getch()));
00000C0A  2F00       942          move.l    D0,-(A7)
00000C0C  4EB8 0B68  943          jsr       __getch
00000C10  2200       944          move.l    D0,D1
00000C12  201F       945          move.l    (A7)+,D0
00000C14  2F01       946          move.l    D1,-(A7)
00000C16  4EB8 0BD2  947          jsr       _xtod
00000C1A  584F       948          addq.w    #4,A7
00000C1C  C0BC 0000  949          and.l     #255,D0
00000C20  00FF      
00000C22  E980       950          asl.l     #4,D0
00000C24  2F00       951          move.l    D0,-(A7)
00000C26  2F01       952          move.l    D1,-(A7)
00000C28  4EB8 0B68  953          jsr       __getch
00000C2C  221F       954          move.l    (A7)+,D1
00000C2E  2F00       955          move.l    D0,-(A7)
00000C30  4EB8 0BD2  956          jsr       _xtod
00000C34  584F       957          addq.w    #4,A7
00000C36  2200       958          move.l    D0,D1
00000C38  201F       959          move.l    (A7)+,D0
00000C3A  C2BC 0000  960          and.l     #255,D1
00000C3E  00FF      
00000C40  8081       961          or.l      D1,D0
00000C42  2400       962          move.l    D0,D2
                     963   ; if(CheckSumPtr)
00000C44  4AAE 0008  964          tst.l     8(A6)
00000C48  6706       965          beq.s     Get2HexDigits_1
                     966   ; *CheckSumPtr += i ;
00000C4A  206E 0008  967          move.l    8(A6),A0
00000C4E  D510       968          add.b     D2,(A0)
                     969   Get2HexDigits_1:
                     970   ; return i ;
00000C50  2002       971          move.l    D2,D0
00000C52  241F       972          move.l    (A7)+,D2
00000C54  4E5E       973          unlk      A6
00000C56  4E75       974          rts
                     975   ; }
                     976   ; int Get4HexDigits(char *CheckSumPtr)
                     977   ; {
                     978   _Get4HexDigits:
00000C58  4E56 0000  979          link      A6,#0
                     980   ; return (Get2HexDigits(CheckSumPtr) << 8) | (Get2HexDigits(CheckSumPtr));
00000C5C  2F2E 0008  981          move.l    8(A6),-(A7)
00000C60  4EB8 0C04  982          jsr       _Get2HexDigits
00000C64  584F       983          addq.w    #4,A7
00000C66  E180       984          asl.l     #8,D0
00000C68  2F00       985          move.l    D0,-(A7)
00000C6A  2F2E 0008  986          move.l    8(A6),-(A7)
00000C6E  4EB8 0C04  987          jsr       _Get2HexDigits
00000C72  584F       988          addq.w    #4,A7
00000C74  2200       989          move.l    D0,D1
00000C76  201F       990          move.l    (A7)+,D0
00000C78  8081       991          or.l      D1,D0
00000C7A  4E5E       992          unlk      A6
00000C7C  4E75       993          rts
                     994   ; }
                     995   ; int Get6HexDigits(char *CheckSumPtr)
                     996   ; {
                     997   _Get6HexDigits:
00000C7E  4E56 0000  998          link      A6,#0
                     999   ; return (Get4HexDigits(CheckSumPtr) << 8) | (Get2HexDigits(CheckSumPtr));
00000C82  2F2E 0008 1000          move.l    8(A6),-(A7)
00000C86  4EB8 0C58 1001          jsr       _Get4HexDigits
00000C8A  584F      1002          addq.w    #4,A7
00000C8C  E180      1003          asl.l     #8,D0
00000C8E  2F00      1004          move.l    D0,-(A7)
00000C90  2F2E 0008 1005          move.l    8(A6),-(A7)
00000C94  4EB8 0C04 1006          jsr       _Get2HexDigits
00000C98  584F      1007          addq.w    #4,A7
00000C9A  2200      1008          move.l    D0,D1
00000C9C  201F      1009          move.l    (A7)+,D0
00000C9E  8081      1010          or.l      D1,D0
00000CA0  4E5E      1011          unlk      A6
00000CA2  4E75      1012          rts
                    1013   ; }
                    1014   ; int Get8HexDigits(char *CheckSumPtr)
                    1015   ; {
                    1016   _Get8HexDigits:
00000CA4  4E56 0000 1017          link      A6,#0
                    1018   ; return (Get4HexDigits(CheckSumPtr) << 16) | (Get4HexDigits(CheckSumPtr));
00000CA8  2F2E 0008 1019          move.l    8(A6),-(A7)
00000CAC  4EB8 0C58 1020          jsr       _Get4HexDigits
00000CB0  584F      1021          addq.w    #4,A7
00000CB2  E180      1022          asl.l     #8,D0
00000CB4  E180      1023          asl.l     #8,D0
00000CB6  2F00      1024          move.l    D0,-(A7)
00000CB8  2F2E 0008 1025          move.l    8(A6),-(A7)
00000CBC  4EB8 0C58 1026          jsr       _Get4HexDigits
00000CC0  584F      1027          addq.w    #4,A7
00000CC2  2200      1028          move.l    D0,D1
00000CC4  201F      1029          move.l    (A7)+,D0
00000CC6  8081      1030          or.l      D1,D0
00000CC8  4E5E      1031          unlk      A6
00000CCA  4E75      1032          rts
                    1033   ; }
                    1034   ; void DumpMemory(void)   // simple dump memory fn
                    1035   ; {
                    1036   _DumpMemory:
00000CCC  48E7 3C30 1037          movem.l   D2/D3/D4/D5/A2/A3,-(A7)
00000CD0  45F9 0000 1038          lea       _printf.L,A2
00000CD4  3C12      
00000CD6  47F9 0000 1039          lea       _putch.L,A3
00000CDA  326E      
                    1040   ; int i, j ;
                    1041   ; unsigned char *RamPtr,c ; // pointer to where the program is download (assumed)
                    1042   ; printf("\r\nDump Memory Block: <ESC> to Abort, <SPACE> to Continue") ;
00000CDC  4879 0000 1043          pea       @m68kde~1_5.L
00000CE0  45F4      
00000CE2  4E92      1044          jsr       (A2)
00000CE4  584F      1045          addq.w    #4,A7
                    1046   ; printf("\r\nEnter Start Address: ") ;
00000CE6  4879 0000 1047          pea       @m68kde~1_6.L
00000CEA  462E      
00000CEC  4E92      1048          jsr       (A2)
00000CEE  584F      1049          addq.w    #4,A7
                    1050   ; RamPtr = Get8HexDigits(0);
00000CF0  42A7      1051          clr.l     -(A7)
00000CF2  4EB8 0CA4 1052          jsr       _Get8HexDigits
00000CF6  584F      1053          addq.w    #4,A7
00000CF8  2600      1054          move.l    D0,D3
                    1055   ; while(1)    {
                    1056   DumpMemory_1:
                    1057   ; for(i = 0; i < 16; i ++)    {
00000CFA  4285      1058          clr.l     D5
                    1059   DumpMemory_4:
00000CFC  0C85 0000 1060          cmp.l     #16,D5
00000D00  0010      
00000D02  6C00 0096 1061          bge       DumpMemory_6
                    1062   ; printf("\r\n%08x ", RamPtr) ;
00000D06  2F03      1063          move.l    D3,-(A7)
00000D08  4879 0000 1064          pea       @m68kde~1_7.L
00000D0C  4646      
00000D0E  4E92      1065          jsr       (A2)
00000D10  504F      1066          addq.w    #8,A7
                    1067   ; for(j=0; j < 16; j ++)  {
00000D12  4282      1068          clr.l     D2
                    1069   DumpMemory_7:
00000D14  0C82 0000 1070          cmp.l     #16,D2
00000D18  0010      
00000D1A  6C24      1071          bge.s     DumpMemory_9
                    1072   ; printf("%02X",RamPtr[j]) ;
00000D1C  2043      1073          move.l    D3,A0
00000D1E  1230 2800 1074          move.b    0(A0,D2.L),D1
00000D22  C2BC 0000 1075          and.l     #255,D1
00000D26  00FF      
00000D28  2F01      1076          move.l    D1,-(A7)
00000D2A  4879 0000 1077          pea       @m68kde~1_8.L
00000D2E  464E      
00000D30  4E92      1078          jsr       (A2)
00000D32  504F      1079          addq.w    #8,A7
                    1080   ; putchar(' ') ;
00000D34  4878 0020 1081          pea       32
00000D38  4E93      1082          jsr       (A3)
00000D3A  584F      1083          addq.w    #4,A7
00000D3C  5282      1084          addq.l    #1,D2
00000D3E  60D4      1085          bra       DumpMemory_7
                    1086   DumpMemory_9:
                    1087   ; }
                    1088   ; // now display the data as ASCII at the end
                    1089   ; printf("  ") ;
00000D40  4879 0000 1090          pea       @m68kde~1_9.L
00000D44  4654      
00000D46  4E92      1091          jsr       (A2)
00000D48  584F      1092          addq.w    #4,A7
                    1093   ; for(j = 0; j < 16; j++) {
00000D4A  4282      1094          clr.l     D2
                    1095   DumpMemory_10:
00000D4C  0C82 0000 1096          cmp.l     #16,D2
00000D50  0010      
00000D52  6C00 003A 1097          bge       DumpMemory_12
                    1098   ; c = ((char)(RamPtr[j]) & 0x7f) ;
00000D56  2043      1099          move.l    D3,A0
00000D58  1030 2800 1100          move.b    0(A0,D2.L),D0
00000D5C  C03C 007F 1101          and.b     #127,D0
00000D60  1800      1102          move.b    D0,D4
                    1103   ; if((c > (char)(0x7f)) || (c < ' '))
00000D62  0C04 007F 1104          cmp.b     #127,D4
00000D66  6206      1105          bhi.s     DumpMemory_15
00000D68  0C04 0020 1106          cmp.b     #32,D4
00000D6C  640A      1107          bhs.s     DumpMemory_13
                    1108   DumpMemory_15:
                    1109   ; putchar('.') ;
00000D6E  4878 002E 1110          pea       46
00000D72  4E93      1111          jsr       (A3)
00000D74  584F      1112          addq.w    #4,A7
00000D76  6012      1113          bra.s     DumpMemory_14
                    1114   DumpMemory_13:
                    1115   ; else
                    1116   ; putchar(RamPtr[j]) ;
00000D78  2043      1117          move.l    D3,A0
00000D7A  1230 2800 1118          move.b    0(A0,D2.L),D1
00000D7E  C2BC 0000 1119          and.l     #255,D1
00000D82  00FF      
00000D84  2F01      1120          move.l    D1,-(A7)
00000D86  4E93      1121          jsr       (A3)
00000D88  584F      1122          addq.w    #4,A7
                    1123   DumpMemory_14:
00000D8A  5282      1124          addq.l    #1,D2
00000D8C  60BE      1125          bra       DumpMemory_10
                    1126   DumpMemory_12:
                    1127   ; }
                    1128   ; RamPtr = RamPtr + 16 ;
00000D8E  0683 0000 1129          add.l     #16,D3
00000D92  0010      
00000D94  5285      1130          addq.l    #1,D5
00000D96  6000 FF64 1131          bra       DumpMemory_4
                    1132   DumpMemory_6:
                    1133   ; }
                    1134   ; printf("\r\n") ;
00000D9A  4879 0000 1135          pea       @m68kde~1_1.L
00000D9E  45D6      
00000DA0  4E92      1136          jsr       (A2)
00000DA2  584F      1137          addq.w    #4,A7
                    1138   ; c = _getch() ;
00000DA4  4EB8 0B68 1139          jsr       __getch
00000DA8  1800      1140          move.b    D0,D4
                    1141   ; if(c == 0x1b)          // break on ESC
00000DAA  0C04 001B 1142          cmp.b     #27,D4
00000DAE  6602      1143          bne.s     DumpMemory_16
                    1144   ; break ;
00000DB0  6004      1145          bra.s     DumpMemory_3
                    1146   DumpMemory_16:
00000DB2  6000 FF46 1147          bra       DumpMemory_1
                    1148   DumpMemory_3:
00000DB6  4CDF 0C3C 1149          movem.l   (A7)+,D2/D3/D4/D5/A2/A3
00000DBA  4E75      1150          rts
                    1151   ; }
                    1152   ; }
                    1153   ; void FillMemory()
                    1154   ; {
                    1155   _FillMemory:
00000DBC  48E7 3820 1156          movem.l   D2/D3/D4/A2,-(A7)
00000DC0  45F9 0000 1157          lea       _printf.L,A2
00000DC4  3C12      
                    1158   ; char *StartRamPtr, *EndRamPtr ;
                    1159   ; unsigned char FillData ;
                    1160   ; printf("\r\nFill Memory Block") ;
00000DC6  4879 0000 1161          pea       @m68kde~1_10.L
00000DCA  4658      
00000DCC  4E92      1162          jsr       (A2)
00000DCE  584F      1163          addq.w    #4,A7
                    1164   ; printf("\r\nEnter Start Address: ") ;
00000DD0  4879 0000 1165          pea       @m68kde~1_6.L
00000DD4  462E      
00000DD6  4E92      1166          jsr       (A2)
00000DD8  584F      1167          addq.w    #4,A7
                    1168   ; StartRamPtr = Get8HexDigits(0) ;
00000DDA  42A7      1169          clr.l     -(A7)
00000DDC  4EB8 0CA4 1170          jsr       _Get8HexDigits
00000DE0  584F      1171          addq.w    #4,A7
00000DE2  2400      1172          move.l    D0,D2
                    1173   ; printf("\r\nEnter End Address: ") ;
00000DE4  4879 0000 1174          pea       @m68kde~1_11.L
00000DE8  466C      
00000DEA  4E92      1175          jsr       (A2)
00000DEC  584F      1176          addq.w    #4,A7
                    1177   ; EndRamPtr = Get8HexDigits(0) ;
00000DEE  42A7      1178          clr.l     -(A7)
00000DF0  4EB8 0CA4 1179          jsr       _Get8HexDigits
00000DF4  584F      1180          addq.w    #4,A7
00000DF6  2800      1181          move.l    D0,D4
                    1182   ; printf("\r\nEnter Fill Data: ") ;
00000DF8  4879 0000 1183          pea       @m68kde~1_12.L
00000DFC  4682      
00000DFE  4E92      1184          jsr       (A2)
00000E00  584F      1185          addq.w    #4,A7
                    1186   ; FillData = Get2HexDigits(0) ;
00000E02  42A7      1187          clr.l     -(A7)
00000E04  4EB8 0C04 1188          jsr       _Get2HexDigits
00000E08  584F      1189          addq.w    #4,A7
00000E0A  1600      1190          move.b    D0,D3
                    1191   ; printf("\r\nFilling Addresses [$%08X - $%08X] with $%02X", StartRamPtr, EndRamPtr, FillData) ;
00000E0C  C6BC 0000 1192          and.l     #255,D3
00000E10  00FF      
00000E12  2F03      1193          move.l    D3,-(A7)
00000E14  2F04      1194          move.l    D4,-(A7)
00000E16  2F02      1195          move.l    D2,-(A7)
00000E18  4879 0000 1196          pea       @m68kde~1_13.L
00000E1C  4696      
00000E1E  4E92      1197          jsr       (A2)
00000E20  DEFC 0010 1198          add.w     #16,A7
                    1199   ; while(StartRamPtr < EndRamPtr)
                    1200   FillMemory_1:
00000E24  B484      1201          cmp.l     D4,D2
00000E26  6408      1202          bhs.s     FillMemory_3
                    1203   ; *StartRamPtr++ = FillData ;
00000E28  2042      1204          move.l    D2,A0
00000E2A  5282      1205          addq.l    #1,D2
00000E2C  1083      1206          move.b    D3,(A0)
00000E2E  60F4      1207          bra       FillMemory_1
                    1208   FillMemory_3:
00000E30  4CDF 041C 1209          movem.l   (A7)+,D2/D3/D4/A2
00000E34  4E75      1210          rts
                    1211   ; }
                    1212   ; void Load_SRecordFile()
                    1213   ; {
                    1214   _Load_SRecordFile:
00000E36  4E56 FFDC 1215          link      A6,#-36
00000E3A  48E7 3F3C 1216          movem.l   D2/D3/D4/D5/D6/D7/A2/A3/A4/A5,-(A7)
00000E3E  45EE FFFA 1217          lea       -6(A6),A2
00000E42  47F8 0C04 1218          lea       _Get2HexDigits.L,A3
00000E46  49F9 0000 1219          lea       _printf.L,A4
00000E4A  3C12      
                    1220   ; int i, Address, AddressSize, DataByte, NumDataBytesToRead, LoadFailed, FailedAddress, AddressFail, SRecordCount = 0, ByteTotal = 0 ;
00000E4C  42AE FFEE 1221          clr.l     -18(A6)
00000E50  3A7C 0000 1222          move.w    #0,A5
                    1223   ; int result, ByteCount ;
                    1224   ; char c, CheckSum, ReadCheckSum, HeaderType ;
                    1225   ; char *RamPtr ;                          // pointer to Memory where downloaded program will be stored
                    1226   ; LoadFailed = 0 ;                        //assume LOAD operation will pass
00000E54  7E00      1227          moveq     #0,D7
                    1228   ; AddressFail = 0 ;
00000E56  42AE FFEA 1229          clr.l     -22(A6)
                    1230   ; Echo = 0 ;                              // don't echo S records during download
00000E5A  42B9 0B00 1231          clr.l     _Echo.L
00000E5E  00E0      
                    1232   ; printf("\r\nUse HyperTerminal to Send Text File (.hex)\r\n") ;
00000E60  4879 0000 1233          pea       @m68kde~1_14.L
00000E64  46C6      
00000E66  4E94      1234          jsr       (A4)
00000E68  584F      1235          addq.w    #4,A7
                    1236   ; while(1)    {
                    1237   Load_SRecordFile_1:
                    1238   ; CheckSum = 0 ;
00000E6A  4212      1239          clr.b     (A2)
                    1240   ; do {
                    1241   Load_SRecordFile_4:
                    1242   ; c = toupper(_getch()) ;
00000E6C  2F00      1243          move.l    D0,-(A7)
00000E6E  4EB8 0B68 1244          jsr       __getch
00000E72  2200      1245          move.l    D0,D1
00000E74  201F      1246          move.l    (A7)+,D0
00000E76  2F01      1247          move.l    D1,-(A7)
00000E78  4EB9 0000 1248          jsr       _toupper
00000E7C  3350      
00000E7E  584F      1249          addq.w    #4,A7
00000E80  1C00      1250          move.b    D0,D6
                    1251   ; if(c == 0x1b )      // if break
00000E82  0C06 001B 1252          cmp.b     #27,D6
00000E86  6604      1253          bne.s     Load_SRecordFile_6
                    1254   ; return;
00000E88  6000 0132 1255          bra       Load_SRecordFile_8
                    1256   Load_SRecordFile_6:
00000E8C  0C06 0053 1257          cmp.b     #83,D6
00000E90  66DA      1258          bne       Load_SRecordFile_4
                    1259   ; }while(c != (char)('S'));   // wait for S start of header
                    1260   ; HeaderType = _getch() ;
00000E92  4EB8 0B68 1261          jsr       __getch
00000E96  1600      1262          move.b    D0,D3
                    1263   ; if(HeaderType == (char)('0') || HeaderType == (char)('5'))       // ignore s0, s5 records
00000E98  0C03 0030 1264          cmp.b     #48,D3
00000E9C  6706      1265          beq.s     Load_SRecordFile_11
00000E9E  0C03 0035 1266          cmp.b     #53,D3
00000EA2  6604      1267          bne.s     Load_SRecordFile_9
                    1268   Load_SRecordFile_11:
                    1269   ; continue ;
00000EA4  6000 00D2 1270          bra       Load_SRecordFile_23
                    1271   Load_SRecordFile_9:
                    1272   ; if(HeaderType >= (char)('7'))
00000EA8  0C03 0037 1273          cmp.b     #55,D3
00000EAC  6D04      1274          blt.s     Load_SRecordFile_12
                    1275   ; break ;                 // end load on s7,s8,s9 records
00000EAE  6000 00CC 1276          bra       Load_SRecordFile_3
                    1277   Load_SRecordFile_12:
                    1278   ; // get the bytecount
                    1279   ; ByteCount = Get2HexDigits(&CheckSum) ;
00000EB2  2F0A      1280          move.l    A2,-(A7)
00000EB4  4E93      1281          jsr       (A3)
00000EB6  584F      1282          addq.w    #4,A7
00000EB8  2D40 FFF6 1283          move.l    D0,-10(A6)
                    1284   ; // get the address, 4 digits for s1, 6 digits for s2, and 8 digits for s3 record
                    1285   ; if(HeaderType == (char)('1')) {
00000EBC  0C03 0031 1286          cmp.b     #49,D3
00000EC0  660E      1287          bne.s     Load_SRecordFile_14
                    1288   ; AddressSize = 2 ;       // 2 byte address
00000EC2  7A02      1289          moveq     #2,D5
                    1290   ; Address = Get4HexDigits(&CheckSum);
00000EC4  2F0A      1291          move.l    A2,-(A7)
00000EC6  4EB8 0C58 1292          jsr       _Get4HexDigits
00000ECA  584F      1293          addq.w    #4,A7
00000ECC  2800      1294          move.l    D0,D4
00000ECE  6020      1295          bra.s     Load_SRecordFile_17
                    1296   Load_SRecordFile_14:
                    1297   ; }
                    1298   ; else if (HeaderType == (char)('2')) {
00000ED0  0C03 0032 1299          cmp.b     #50,D3
00000ED4  660E      1300          bne.s     Load_SRecordFile_16
                    1301   ; AddressSize = 3 ;       // 3 byte address
00000ED6  7A03      1302          moveq     #3,D5
                    1303   ; Address = Get6HexDigits(&CheckSum) ;
00000ED8  2F0A      1304          move.l    A2,-(A7)
00000EDA  4EB8 0C7E 1305          jsr       _Get6HexDigits
00000EDE  584F      1306          addq.w    #4,A7
00000EE0  2800      1307          move.l    D0,D4
00000EE2  600C      1308          bra.s     Load_SRecordFile_17
                    1309   Load_SRecordFile_16:
                    1310   ; }
                    1311   ; else    {
                    1312   ; AddressSize = 4 ;       // 4 byte address
00000EE4  7A04      1313          moveq     #4,D5
                    1314   ; Address = Get8HexDigits(&CheckSum) ;
00000EE6  2F0A      1315          move.l    A2,-(A7)
00000EE8  4EB8 0CA4 1316          jsr       _Get8HexDigits
00000EEC  584F      1317          addq.w    #4,A7
00000EEE  2800      1318          move.l    D0,D4
                    1319   Load_SRecordFile_17:
                    1320   ; }
                    1321   ; RamPtr = (char *)(Address) ;                            // point to download area
00000EF0  2D44 FFFC 1322          move.l    D4,-4(A6)
                    1323   ; NumDataBytesToRead = ByteCount - AddressSize - 1 ;
00000EF4  202E FFF6 1324          move.l    -10(A6),D0
00000EF8  9085      1325          sub.l     D5,D0
00000EFA  5380      1326          subq.l    #1,D0
00000EFC  2D40 FFE2 1327          move.l    D0,-30(A6)
                    1328   ; for(i = 0; i < NumDataBytesToRead; i ++) {     // read in remaining data bytes (ignore address and checksum at the end
00000F00  4282      1329          clr.l     D2
                    1330   Load_SRecordFile_18:
00000F02  B4AE FFE2 1331          cmp.l     -30(A6),D2
00000F06  6C1E      1332          bge.s     Load_SRecordFile_20
                    1333   ; DataByte = Get2HexDigits(&CheckSum) ;
00000F08  2F0A      1334          move.l    A2,-(A7)
00000F0A  4E93      1335          jsr       (A3)
00000F0C  584F      1336          addq.w    #4,A7
00000F0E  2D40 FFDE 1337          move.l    D0,-34(A6)
                    1338   ; *RamPtr++ = DataByte ;                      // store downloaded byte in Ram at specified address
00000F12  202E FFDE 1339          move.l    -34(A6),D0
00000F16  206E FFFC 1340          move.l    -4(A6),A0
00000F1A  52AE FFFC 1341          addq.l    #1,-4(A6)
00000F1E  1080      1342          move.b    D0,(A0)
                    1343   ; ByteTotal++;
00000F20  524D      1344          addq.w    #1,A5
00000F22  5282      1345          addq.l    #1,D2
00000F24  60DC      1346          bra       Load_SRecordFile_18
                    1347   Load_SRecordFile_20:
                    1348   ; }
                    1349   ; // checksum is the 1's complement of the sum of all data pairs following the bytecount, i.e. it includes the address and the data itself
                    1350   ; ReadCheckSum = Get2HexDigits(0) ;
00000F26  42A7      1351          clr.l     -(A7)
00000F28  4E93      1352          jsr       (A3)
00000F2A  584F      1353          addq.w    #4,A7
00000F2C  1D40 FFFB 1354          move.b    D0,-5(A6)
                    1355   ; if((~CheckSum&0Xff) != (ReadCheckSum&0Xff))   {
00000F30  1012      1356          move.b    (A2),D0
00000F32  4600      1357          not.b     D0
00000F34  4880      1358          ext.w     D0
00000F36  C07C 00FF 1359          and.w     #255,D0
00000F3A  122E FFFB 1360          move.b    -5(A6),D1
00000F3E  4881      1361          ext.w     D1
00000F40  C27C 00FF 1362          and.w     #255,D1
00000F44  B041      1363          cmp.w     D1,D0
00000F46  6708      1364          beq.s     Load_SRecordFile_21
                    1365   ; LoadFailed = 1 ;
00000F48  7E01      1366          moveq     #1,D7
                    1367   ; FailedAddress = Address ;
00000F4A  2D44 FFE6 1368          move.l    D4,-26(A6)
                    1369   ; break;
00000F4E  602C      1370          bra.s     Load_SRecordFile_3
                    1371   Load_SRecordFile_21:
                    1372   ; }
                    1373   ; SRecordCount++ ;
00000F50  52AE FFEE 1374          addq.l    #1,-18(A6)
                    1375   ; // display feedback on progress
                    1376   ; if(SRecordCount % 25 == 0)
00000F54  2F2E FFEE 1377          move.l    -18(A6),-(A7)
00000F58  4878 0019 1378          pea       25
00000F5C  4EB9 0000 1379          jsr       LDIV
00000F60  3190      
00000F62  202F 0004 1380          move.l    4(A7),D0
00000F66  504F      1381          addq.w    #8,A7
00000F68  4A80      1382          tst.l     D0
00000F6A  660C      1383          bne.s     Load_SRecordFile_23
                    1384   ; putchar('.') ;
00000F6C  4878 002E 1385          pea       46
00000F70  4EB9 0000 1386          jsr       _putch
00000F74  326E      
00000F76  584F      1387          addq.w    #4,A7
                    1388   Load_SRecordFile_23:
00000F78  6000 FEF0 1389          bra       Load_SRecordFile_1
                    1390   Load_SRecordFile_3:
                    1391   ; }
                    1392   ; if(LoadFailed == 1) {
00000F7C  0C87 0000 1393          cmp.l     #1,D7
00000F80  0001      
00000F82  6610      1394          bne.s     Load_SRecordFile_25
                    1395   ; printf("\r\nLoad Failed at Address = [$%08X]\r\n", FailedAddress) ;
00000F84  2F2E FFE6 1396          move.l    -26(A6),-(A7)
00000F88  4879 0000 1397          pea       @m68kde~1_15.L
00000F8C  46F6      
00000F8E  4E94      1398          jsr       (A4)
00000F90  504F      1399          addq.w    #8,A7
00000F92  600C      1400          bra.s     Load_SRecordFile_26
                    1401   Load_SRecordFile_25:
                    1402   ; }
                    1403   ; else
                    1404   ; printf("\r\nSuccess: Downloaded %d bytes\r\n", ByteTotal) ;
00000F94  2F0D      1405          move.l    A5,-(A7)
00000F96  4879 0000 1406          pea       @m68kde~1_16.L
00000F9A  471C      
00000F9C  4E94      1407          jsr       (A4)
00000F9E  504F      1408          addq.w    #8,A7
                    1409   Load_SRecordFile_26:
                    1410   ; // pause at the end to wait for download to finish transmitting at the end of S8 etc
                    1411   ; for(i = 0; i < 400000; i ++)
00000FA0  4282      1412          clr.l     D2
                    1413   Load_SRecordFile_27:
00000FA2  0C82 0006 1414          cmp.l     #400000,D2
00000FA6  1A80      
00000FA8  6C04      1415          bge.s     Load_SRecordFile_29
00000FAA  5282      1416          addq.l    #1,D2
00000FAC  60F4      1417          bra       Load_SRecordFile_27
                    1418   Load_SRecordFile_29:
                    1419   ; ;
                    1420   ; FlushKeyboard() ;
00000FAE  4EB8 0BA6 1421          jsr       _FlushKeyboard
                    1422   ; Echo = 1;
00000FB2  23FC 0000 1423          move.l    #1,_Echo.L
00000FB6  0001 0B00 
00000FBA  00E0      
                    1424   Load_SRecordFile_8:
00000FBC  4CDF 3CFC 1425          movem.l   (A7)+,D2/D3/D4/D5/D6/D7/A2/A3/A4/A5
00000FC0  4E5E      1426          unlk      A6
00000FC2  4E75      1427          rts
                    1428   ; }
                    1429   ; void MemoryChange(void)
                    1430   ; {
                    1431   _MemoryChange:
00000FC4  48E7 3820 1432          movem.l   D2/D3/D4/A2,-(A7)
00000FC8  45F9 0000 1433          lea       _printf.L,A2
00000FCC  3C12      
                    1434   ; unsigned char *RamPtr,c ; // pointer to memory
                    1435   ; int Data ;
                    1436   ; printf("\r\nExamine and Change Memory") ;
00000FCE  4879 0000 1437          pea       @m68kde~1_17.L
00000FD2  473E      
00000FD4  4E92      1438          jsr       (A2)
00000FD6  584F      1439          addq.w    #4,A7
                    1440   ; printf("\r\n<ESC> to Stop, <SPACE> to Advance, '-' to Go Back, <DATA> to change") ;
00000FD8  4879 0000 1441          pea       @m68kde~1_18.L
00000FDC  475A      
00000FDE  4E92      1442          jsr       (A2)
00000FE0  584F      1443          addq.w    #4,A7
                    1444   ; printf("\r\nEnter Address: ") ;
00000FE2  4879 0000 1445          pea       @m68kde~1_19.L
00000FE6  47A0      
00000FE8  4E92      1446          jsr       (A2)
00000FEA  584F      1447          addq.w    #4,A7
                    1448   ; RamPtr = Get8HexDigits(0) ;
00000FEC  42A7      1449          clr.l     -(A7)
00000FEE  4EB8 0CA4 1450          jsr       _Get8HexDigits
00000FF2  584F      1451          addq.w    #4,A7
00000FF4  2600      1452          move.l    D0,D3
                    1453   ; while(1)    {
                    1454   MemoryChange_1:
                    1455   ; printf("\r\n[%08x] : %02x  ", RamPtr, *RamPtr) ;
00000FF6  2043      1456          move.l    D3,A0
00000FF8  1210      1457          move.b    (A0),D1
00000FFA  C2BC 0000 1458          and.l     #255,D1
00000FFE  00FF      
00001000  2F01      1459          move.l    D1,-(A7)
00001002  2F03      1460          move.l    D3,-(A7)
00001004  4879 0000 1461          pea       @m68kde~1_20.L
00001008  47B2      
0000100A  4E92      1462          jsr       (A2)
0000100C  DEFC 000C 1463          add.w     #12,A7
                    1464   ; c = tolower(_getch()) ;
00001010  2F00      1465          move.l    D0,-(A7)
00001012  4EB8 0B68 1466          jsr       __getch
00001016  2200      1467          move.l    D0,D1
00001018  201F      1468          move.l    (A7)+,D0
0000101A  2F01      1469          move.l    D1,-(A7)
0000101C  4EB9 0000 1470          jsr       _tolower
00001020  32DA      
00001022  584F      1471          addq.w    #4,A7
00001024  1400      1472          move.b    D0,D2
                    1473   ; if(c == (char)(0x1b))
00001026  0C02 001B 1474          cmp.b     #27,D2
0000102A  6604      1475          bne.s     MemoryChange_4
                    1476   ; return ;                                // abort on escape
0000102C  6000 0090 1477          bra       MemoryChange_6
                    1478   MemoryChange_4:
                    1479   ; else if((c >= '0' && c <= '9') || (c >= 'a' && c <= 'f')) {  // are we trying to change data at this location by entering a hex char
00001030  0C02 0030 1480          cmp.b     #48,D2
00001034  6506      1481          blo.s     MemoryChange_10
00001036  0C02 0039 1482          cmp.b     #57,D2
0000103A  6310      1483          bls.s     MemoryChange_9
                    1484   MemoryChange_10:
0000103C  0C02 0061 1485          cmp.b     #97,D2
00001040  6500 006E 1486          blo       MemoryChange_7
00001044  0C02 0066 1487          cmp.b     #102,D2
00001048  6200 0066 1488          bhi       MemoryChange_7
                    1489   MemoryChange_9:
                    1490   ; Data = (xtod(c) << 4) | (xtod(_getch()));
0000104C  C4BC 0000 1491          and.l     #255,D2
00001050  00FF      
00001052  2F02      1492          move.l    D2,-(A7)
00001054  4EB8 0BD2 1493          jsr       _xtod
00001058  584F      1494          addq.w    #4,A7
0000105A  C0BC 0000 1495          and.l     #255,D0
0000105E  00FF      
00001060  E980      1496          asl.l     #4,D0
00001062  2F00      1497          move.l    D0,-(A7)
00001064  2F01      1498          move.l    D1,-(A7)
00001066  4EB8 0B68 1499          jsr       __getch
0000106A  221F      1500          move.l    (A7)+,D1
0000106C  2F00      1501          move.l    D0,-(A7)
0000106E  4EB8 0BD2 1502          jsr       _xtod
00001072  584F      1503          addq.w    #4,A7
00001074  2200      1504          move.l    D0,D1
00001076  201F      1505          move.l    (A7)+,D0
00001078  C2BC 0000 1506          and.l     #255,D1
0000107C  00FF      
0000107E  8081      1507          or.l      D1,D0
00001080  2800      1508          move.l    D0,D4
                    1509   ; *RamPtr = (char)(Data) ;
00001082  2043      1510          move.l    D3,A0
00001084  1084      1511          move.b    D4,(A0)
                    1512   ; if(*RamPtr != Data) {
00001086  2043      1513          move.l    D3,A0
00001088  1010      1514          move.b    (A0),D0
0000108A  C0BC 0000 1515          and.l     #255,D0
0000108E  00FF      
00001090  B084      1516          cmp.l     D4,D0
00001092  671A      1517          beq.s     MemoryChange_11
                    1518   ; printf("\r\nWarning Change Failed: Wrote [%02x], Read [%02x]", Data, *RamPtr) ;
00001094  2043      1519          move.l    D3,A0
00001096  1210      1520          move.b    (A0),D1
00001098  C2BC 0000 1521          and.l     #255,D1
0000109C  00FF      
0000109E  2F01      1522          move.l    D1,-(A7)
000010A0  2F04      1523          move.l    D4,-(A7)
000010A2  4879 0000 1524          pea       @m68kde~1_21.L
000010A6  47C4      
000010A8  4E92      1525          jsr       (A2)
000010AA  DEFC 000C 1526          add.w     #12,A7
                    1527   MemoryChange_11:
000010AE  6008      1528          bra.s     MemoryChange_13
                    1529   MemoryChange_7:
                    1530   ; }
                    1531   ; }
                    1532   ; else if(c == (char)('-'))
000010B0  0C02 002D 1533          cmp.b     #45,D2
000010B4  6602      1534          bne.s     MemoryChange_13
                    1535   ; RamPtr -= 2 ; ;
000010B6  5583      1536          subq.l    #2,D3
                    1537   MemoryChange_13:
                    1538   ; RamPtr ++ ;
000010B8  5283      1539          addq.l    #1,D3
000010BA  6000 FF3A 1540          bra       MemoryChange_1
                    1541   MemoryChange_6:
000010BE  4CDF 041C 1542          movem.l   (A7)+,D2/D3/D4/A2
000010C2  4E75      1543          rts
                    1544   ; }
                    1545   ; }
                    1546   ; /*******************************************************************
                    1547   ; ** Write a program to SPI Flash Chip from memory and verify by reading back
                    1548   ; ********************************************************************/
                    1549   ; void ProgramFlashChip(void)
                    1550   ; {
                    1551   _ProgramFlashChip:
000010C4  4E75      1552          rts
                    1553   ; //
                    1554   ; // TODO : put your code here to program the 1st 256k of ram (where user program is held at hex 08000000) to SPI flash chip
                    1555   ; // TODO : then verify by reading it back and comparing to memory
                    1556   ; //
                    1557   ; }
                    1558   ; /*************************************************************************
                    1559   ; ** Load a program from SPI Flash Chip and copy to Dram
                    1560   ; **************************************************************************/
                    1561   ; void LoadFromFlashChip(void)
                    1562   ; {
                    1563   _LoadFromFlashChip:
                    1564   ; printf("\r\nLoading Program From SPI Flash....") ;
000010C6  4879 0000 1565          pea       @m68kde~1_22.L
000010CA  47F8      
000010CC  4EB9 0000 1566          jsr       _printf
000010D0  3C12      
000010D2  584F      1567          addq.w    #4,A7
000010D4  4E75      1568          rts
                    1569   ; //
                    1570   ; // TODO : put your code here to read 256k of data from SPI flash chip and store in user ram starting at hex 08000000
                    1571   ; //
                    1572   ; }
                    1573   ; //////////////////////////////////////////////////////////////////////////////////////////////////
                    1574   ; // IMPORTANT
                    1575   ; // TG68 does not support the Native Trace mode of the original 68000 so tracing
                    1576   ; // has to be done with an interrupt (IRQ Level 6)
                    1577   ; //
                    1578   ; // To allow the 68000 to execute one more instruction after each pseudo trace (IRQ6)
                    1579   ; // the IRQ is removed in hardware once the TG68 reads the IRQ autovector (i.e. acknowledges the IRQ)
                    1580   ; //
                    1581   ; // on return from the IRQ service handler, the first access to the user memory program space
                    1582   ; // generates a fresh IRQ (in hardware) to generate a new trace, this allows the tg68 to
                    1583   ; // execute one more new instruction (without it the TG68 would trace on the same instruction
                    1584   ; // each time and not after the next one). It also means it doesn't simgle step outside the user
                    1585   ; // program area
                    1586   ; //
                    1587   ; // The bottom line is the Trace handler, which includes the Dump registers below
                    1588   ; // cannot access the user memory to display for example the Instruction Opcode or to disassemble etc
                    1589   ; // as this would lead to a new IRQ being reset and the TG68 would trace on same instruction
                    1590   ; // NOT SURE THIS IS TRUE NOW THAT TRACE HANDLER HAS BEEN MODIVIED TO NOT AUTOMATICALLY GENERATE A TRACE EXCEPTION
                    1591   ; // INSTEAD IT IS DONE IN THE 'N' COMMAND FOR NEXT
                    1592   ; /////////////////////////////////////////////////////////////////////////////////////////////////////
                    1593   ; void DumpRegisters()
                    1594   ; {
                    1595   _DumpRegisters:
000010D6  48E7 3F3C 1596          movem.l   D2/D3/D4/D5/D6/D7/A2/A3/A4/A5,-(A7)
000010DA  45F9 0000 1597          lea       _putch.L,A2
000010DE  326E      
000010E0  47F9 0000 1598          lea       _printf.L,A3
000010E4  3C12      
000010E6  49F9 0B00 1599          lea       _SR.L,A4
000010EA  012C      
000010EC  4BF9 0B00 1600          lea       _WatchPointString.L,A5
000010F0  01C2      
                    1601   ; short i, x, j, k ;
                    1602   ; unsigned char c, *BytePointer;
                    1603   ; // buld up strings for displaying watchpoints
                    1604   ; for(x = 0; x < (short)(8); x++)
000010F2  4242      1605          clr.w     D2
                    1606   DumpRegisters_1:
000010F4  0C42 0008 1607          cmp.w     #8,D2
000010F8  6C00 01C6 1608          bge       DumpRegisters_3
                    1609   ; {
                    1610   ; if(WatchPointSetOrCleared[x] == 1)
000010FC  48C2      1611          ext.l     D2
000010FE  2002      1612          move.l    D2,D0
00001100  E588      1613          lsl.l     #2,D0
00001102  41F9 0B00 1614          lea       _WatchPointSetOrCleared.L,A0
00001106  01A2      
00001108  2030 0800 1615          move.l    0(A0,D0.L),D0
0000110C  0C80 0000 1616          cmp.l     #1,D0
00001110  0001      
00001112  6600 0186 1617          bne       DumpRegisters_4
                    1618   ; {
                    1619   ; sprintf(WatchPointString[x], "$%08X  ", WatchPointAddress[x]) ;
00001116  48C2      1620          ext.l     D2
00001118  2202      1621          move.l    D2,D1
0000111A  E589      1622          lsl.l     #2,D1
0000111C  41F9 0B00 1623          lea       _WatchPointAddress.L,A0
00001120  0182      
00001122  2F30 1800 1624          move.l    0(A0,D1.L),-(A7)
00001126  4879 0000 1625          pea       @m68kde~1_23.L
0000112A  481E      
0000112C  220D      1626          move.l    A5,D1
0000112E  48C2      1627          ext.l     D2
00001130  2F00      1628          move.l    D0,-(A7)
00001132  2002      1629          move.l    D2,D0
00001134  C1FC 0064 1630          muls      #100,D0
00001138  D280      1631          add.l     D0,D1
0000113A  201F      1632          move.l    (A7)+,D0
0000113C  2F01      1633          move.l    D1,-(A7)
0000113E  4EB9 0000 1634          jsr       _sprintf
00001142  3306      
00001144  DEFC 000C 1635          add.w     #12,A7
                    1636   ; BytePointer = (char *)(WatchPointAddress[x]) ;
00001148  48C2      1637          ext.l     D2
0000114A  2002      1638          move.l    D2,D0
0000114C  E588      1639          lsl.l     #2,D0
0000114E  41F9 0B00 1640          lea       _WatchPointAddress.L,A0
00001152  0182      
00001154  2A30 0800 1641          move.l    0(A0,D0.L),D5
                    1642   ; for(j = 0; j < (short)(16); j+=2)
00001158  4243      1643          clr.w     D3
                    1644   DumpRegisters_6:
0000115A  0C43 0010 1645          cmp.w     #16,D3
0000115E  6C00 0082 1646          bge       DumpRegisters_8
                    1647   ; {
                    1648   ; for(k = 0; k < (short)(2); k++)
00001162  4246      1649          clr.w     D6
                    1650   DumpRegisters_9:
00001164  0C46 0002 1651          cmp.w     #2,D6
00001168  6C00 0052 1652          bge       DumpRegisters_11
                    1653   ; {
                    1654   ; sprintf(TempString, "%02X", BytePointer[j+k]) ;
0000116C  2045      1655          move.l    D5,A0
0000116E  48C3      1656          ext.l     D3
00001170  2203      1657          move.l    D3,D1
00001172  48C6      1658          ext.l     D6
00001174  D286      1659          add.l     D6,D1
00001176  1230 1800 1660          move.b    0(A0,D1.L),D1
0000117A  C2BC 0000 1661          and.l     #255,D1
0000117E  00FF      
00001180  2F01      1662          move.l    D1,-(A7)
00001182  4879 0000 1663          pea       @m68kde~1_8.L
00001186  464E      
00001188  4879 0B00 1664          pea       _TempString.L
0000118C  04E2      
0000118E  4EB9 0000 1665          jsr       _sprintf
00001192  3306      
00001194  DEFC 000C 1666          add.w     #12,A7
                    1667   ; strcat(WatchPointString[x], TempString) ;
00001198  4879 0B00 1668          pea       _TempString.L
0000119C  04E2      
0000119E  220D      1669          move.l    A5,D1
000011A0  48C2      1670          ext.l     D2
000011A2  2F00      1671          move.l    D0,-(A7)
000011A4  2002      1672          move.l    D2,D0
000011A6  C1FC 0064 1673          muls      #100,D0
000011AA  D280      1674          add.l     D0,D1
000011AC  201F      1675          move.l    (A7)+,D0
000011AE  2F01      1676          move.l    D1,-(A7)
000011B0  4EB9 0000 1677          jsr       _strcat
000011B4  333A      
000011B6  504F      1678          addq.w    #8,A7
000011B8  5246      1679          addq.w    #1,D6
000011BA  60A8      1680          bra       DumpRegisters_9
                    1681   DumpRegisters_11:
                    1682   ; }
                    1683   ; strcat(WatchPointString[x]," ") ;
000011BC  4879 0000 1684          pea       @m68kde~1_24.L
000011C0  4826      
000011C2  220D      1685          move.l    A5,D1
000011C4  48C2      1686          ext.l     D2
000011C6  2F00      1687          move.l    D0,-(A7)
000011C8  2002      1688          move.l    D2,D0
000011CA  C1FC 0064 1689          muls      #100,D0
000011CE  D280      1690          add.l     D0,D1
000011D0  201F      1691          move.l    (A7)+,D0
000011D2  2F01      1692          move.l    D1,-(A7)
000011D4  4EB9 0000 1693          jsr       _strcat
000011D8  333A      
000011DA  504F      1694          addq.w    #8,A7
000011DC  5443      1695          addq.w    #2,D3
000011DE  6000 FF7A 1696          bra       DumpRegisters_6
                    1697   DumpRegisters_8:
                    1698   ; }
                    1699   ; strcat(WatchPointString[x], "  ") ;
000011E2  4879 0000 1700          pea       @m68kde~1_9.L
000011E6  4654      
000011E8  220D      1701          move.l    A5,D1
000011EA  48C2      1702          ext.l     D2
000011EC  2F00      1703          move.l    D0,-(A7)
000011EE  2002      1704          move.l    D2,D0
000011F0  C1FC 0064 1705          muls      #100,D0
000011F4  D280      1706          add.l     D0,D1
000011F6  201F      1707          move.l    (A7)+,D0
000011F8  2F01      1708          move.l    D1,-(A7)
000011FA  4EB9 0000 1709          jsr       _strcat
000011FE  333A      
00001200  504F      1710          addq.w    #8,A7
                    1711   ; BytePointer = (char *)(WatchPointAddress[x]) ;
00001202  48C2      1712          ext.l     D2
00001204  2002      1713          move.l    D2,D0
00001206  E588      1714          lsl.l     #2,D0
00001208  41F9 0B00 1715          lea       _WatchPointAddress.L,A0
0000120C  0182      
0000120E  2A30 0800 1716          move.l    0(A0,D0.L),D5
                    1717   ; for(j = 0; j < (short)(16); j++)
00001212  4243      1718          clr.w     D3
                    1719   DumpRegisters_12:
00001214  0C43 0010 1720          cmp.w     #16,D3
00001218  6C00 007E 1721          bge       DumpRegisters_14
                    1722   ; {
                    1723   ; c = ((char)(BytePointer[j]) & 0x7f) ;
0000121C  2045      1724          move.l    D5,A0
0000121E  48C3      1725          ext.l     D3
00001220  1030 3800 1726          move.b    0(A0,D3.L),D0
00001224  C03C 007F 1727          and.b     #127,D0
00001228  1E00      1728          move.b    D0,D7
                    1729   ; if((c > (char)(0x7f)) || (c < (char)(' ')))
0000122A  0C07 007F 1730          cmp.b     #127,D7
0000122E  6206      1731          bhi.s     DumpRegisters_17
00001230  0C07 0020 1732          cmp.b     #32,D7
00001234  6416      1733          bhs.s     DumpRegisters_15
                    1734   DumpRegisters_17:
                    1735   ; sprintf(TempString, ".") ;
00001236  4879 0000 1736          pea       @m68kde~1_25.L
0000123A  4828      
0000123C  4879 0B00 1737          pea       _TempString.L
00001240  04E2      
00001242  4EB9 0000 1738          jsr       _sprintf
00001246  3306      
00001248  504F      1739          addq.w    #8,A7
0000124A  6026      1740          bra.s     DumpRegisters_16
                    1741   DumpRegisters_15:
                    1742   ; else
                    1743   ; sprintf(TempString, "%c", BytePointer[j]) ;
0000124C  2045      1744          move.l    D5,A0
0000124E  48C3      1745          ext.l     D3
00001250  1230 3800 1746          move.b    0(A0,D3.L),D1
00001254  C2BC 0000 1747          and.l     #255,D1
00001258  00FF      
0000125A  2F01      1748          move.l    D1,-(A7)
0000125C  4879 0000 1749          pea       @m68kde~1_26.L
00001260  482A      
00001262  4879 0B00 1750          pea       _TempString.L
00001266  04E2      
00001268  4EB9 0000 1751          jsr       _sprintf
0000126C  3306      
0000126E  DEFC 000C 1752          add.w     #12,A7
                    1753   DumpRegisters_16:
                    1754   ; strcat(WatchPointString[x], TempString) ;
00001272  4879 0B00 1755          pea       _TempString.L
00001276  04E2      
00001278  220D      1756          move.l    A5,D1
0000127A  48C2      1757          ext.l     D2
0000127C  2F00      1758          move.l    D0,-(A7)
0000127E  2002      1759          move.l    D2,D0
00001280  C1FC 0064 1760          muls      #100,D0
00001284  D280      1761          add.l     D0,D1
00001286  201F      1762          move.l    (A7)+,D0
00001288  2F01      1763          move.l    D1,-(A7)
0000128A  4EB9 0000 1764          jsr       _strcat
0000128E  333A      
00001290  504F      1765          addq.w    #8,A7
00001292  5243      1766          addq.w    #1,D3
00001294  6000 FF7E 1767          bra       DumpRegisters_12
                    1768   DumpRegisters_14:
00001298  6020      1769          bra.s     DumpRegisters_5
                    1770   DumpRegisters_4:
                    1771   ; }
                    1772   ; }
                    1773   ; else
                    1774   ; strcpy(WatchPointString[x], "") ;
0000129A  4879 0000 1775          pea       @m68kde~1_27.L
0000129E  482E      
000012A0  220D      1776          move.l    A5,D1
000012A2  48C2      1777          ext.l     D2
000012A4  2F00      1778          move.l    D0,-(A7)
000012A6  2002      1779          move.l    D2,D0
000012A8  C1FC 0064 1780          muls      #100,D0
000012AC  D280      1781          add.l     D0,D1
000012AE  201F      1782          move.l    (A7)+,D0
000012B0  2F01      1783          move.l    D1,-(A7)
000012B2  4EB9 0000 1784          jsr       _strcpy
000012B6  316E      
000012B8  504F      1785          addq.w    #8,A7
                    1786   DumpRegisters_5:
000012BA  5242      1787          addq.w    #1,D2
000012BC  6000 FE36 1788          bra       DumpRegisters_1
                    1789   DumpRegisters_3:
                    1790   ; }
                    1791   ; printf("\r\n\r\n D0 = $%08X  A0 = $%08X",d0,a0) ;
000012C0  2F39 0B00 1792          move.l    _a0.L,-(A7)
000012C4  0104      
000012C6  2F39 0B00 1793          move.l    _d0.L,-(A7)
000012CA  00E4      
000012CC  4879 0000 1794          pea       @m68kde~1_28.L
000012D0  4830      
000012D2  4E93      1795          jsr       (A3)
000012D4  DEFC 000C 1796          add.w     #12,A7
                    1797   ; printf("\r\n D1 = $%08X  A1 = $%08X",d1,a1) ;
000012D8  2F39 0B00 1798          move.l    _a1.L,-(A7)
000012DC  0108      
000012DE  2F39 0B00 1799          move.l    _d1.L,-(A7)
000012E2  00E8      
000012E4  4879 0000 1800          pea       @m68kde~1_29.L
000012E8  484C      
000012EA  4E93      1801          jsr       (A3)
000012EC  DEFC 000C 1802          add.w     #12,A7
                    1803   ; printf("\r\n D2 = $%08X  A2 = $%08X",d2,a2) ;
000012F0  2F39 0B00 1804          move.l    _a2.L,-(A7)
000012F4  010C      
000012F6  2F39 0B00 1805          move.l    _d2.L,-(A7)
000012FA  00EC      
000012FC  4879 0000 1806          pea       @m68kde~1_30.L
00001300  4866      
00001302  4E93      1807          jsr       (A3)
00001304  DEFC 000C 1808          add.w     #12,A7
                    1809   ; printf("\r\n D3 = $%08X  A3 = $%08X",d3,a3) ;
00001308  2F39 0B00 1810          move.l    _a3.L,-(A7)
0000130C  0110      
0000130E  2F39 0B00 1811          move.l    _d3.L,-(A7)
00001312  00F0      
00001314  4879 0000 1812          pea       @m68kde~1_31.L
00001318  4880      
0000131A  4E93      1813          jsr       (A3)
0000131C  DEFC 000C 1814          add.w     #12,A7
                    1815   ; printf("\r\n D4 = $%08X  A4 = $%08X",d4,a4) ;
00001320  2F39 0B00 1816          move.l    _a4.L,-(A7)
00001324  0114      
00001326  2F39 0B00 1817          move.l    _d4.L,-(A7)
0000132A  00F4      
0000132C  4879 0000 1818          pea       @m68kde~1_32.L
00001330  489A      
00001332  4E93      1819          jsr       (A3)
00001334  DEFC 000C 1820          add.w     #12,A7
                    1821   ; printf("\r\n D5 = $%08X  A5 = $%08X",d5,a5) ;
00001338  2F39 0B00 1822          move.l    _a5.L,-(A7)
0000133C  0118      
0000133E  2F39 0B00 1823          move.l    _d5.L,-(A7)
00001342  00F8      
00001344  4879 0000 1824          pea       @m68kde~1_33.L
00001348  48B4      
0000134A  4E93      1825          jsr       (A3)
0000134C  DEFC 000C 1826          add.w     #12,A7
                    1827   ; printf("\r\n D6 = $%08X  A6 = $%08X",d6,a6) ;
00001350  2F39 0B00 1828          move.l    _a6.L,-(A7)
00001354  011C      
00001356  2F39 0B00 1829          move.l    _d6.L,-(A7)
0000135A  00FC      
0000135C  4879 0000 1830          pea       @m68kde~1_34.L
00001360  48CE      
00001362  4E93      1831          jsr       (A3)
00001364  DEFC 000C 1832          add.w     #12,A7
                    1833   ; printf("\r\n D7 = $%08X  A7 = $%08X",d7,((SR & (unsigned short int)(0x2000)) == ((unsigned short int)(0x2000))) ? SSP : USP) ;
00001368  3214      1834          move.w    (A4),D1
0000136A  C27C 2000 1835          and.w     #8192,D1
0000136E  0C41 2000 1836          cmp.w     #8192,D1
00001372  6608      1837          bne.s     DumpRegisters_18
00001374  2239 0B00 1838          move.l    _SSP.L,D1
00001378  0124      
0000137A  6006      1839          bra.s     DumpRegisters_19
                    1840   DumpRegisters_18:
0000137C  2239 0B00 1841          move.l    _USP.L,D1
00001380  0128      
                    1842   DumpRegisters_19:
00001382  2F01      1843          move.l    D1,-(A7)
00001384  2F39 0B00 1844          move.l    _d7.L,-(A7)
00001388  0100      
0000138A  4879 0000 1845          pea       @m68kde~1_35.L
0000138E  48E8      
00001390  4E93      1846          jsr       (A3)
00001392  DEFC 000C 1847          add.w     #12,A7
                    1848   ; printf("\r\n\r\nUSP = $%08X  (A7) User SP", USP ) ;
00001396  2F39 0B00 1849          move.l    _USP.L,-(A7)
0000139A  0128      
0000139C  4879 0000 1850          pea       @m68kde~1_36.L
000013A0  4902      
000013A2  4E93      1851          jsr       (A3)
000013A4  504F      1852          addq.w    #8,A7
                    1853   ; printf("\r\nSSP = $%08X  (A7) Supervisor SP", SSP) ;
000013A6  2F39 0B00 1854          move.l    _SSP.L,-(A7)
000013AA  0124      
000013AC  4879 0000 1855          pea       @m68kde~1_37.L
000013B0  4920      
000013B2  4E93      1856          jsr       (A3)
000013B4  504F      1857          addq.w    #8,A7
                    1858   ; printf("\r\n SR = $%04X   ",SR) ;
000013B6  3214      1859          move.w    (A4),D1
000013B8  C2BC 0000 1860          and.l     #65535,D1
000013BC  FFFF      
000013BE  2F01      1861          move.l    D1,-(A7)
000013C0  4879 0000 1862          pea       @m68kde~1_38.L
000013C4  4942      
000013C6  4E93      1863          jsr       (A3)
000013C8  504F      1864          addq.w    #8,A7
                    1865   ; // display the status word in characters etc.
                    1866   ; printf("   [") ;
000013CA  4879 0000 1867          pea       @m68kde~1_39.L
000013CE  4954      
000013D0  4E93      1868          jsr       (A3)
000013D2  584F      1869          addq.w    #4,A7
                    1870   ; if((SR & (unsigned short int)(0x8000)) == (unsigned short int)(0x8000)) putchar('T') ; else putchar('-') ;      // Trace bit(bit 15)
000013D4  3014      1871          move.w    (A4),D0
000013D6  C07C 8000 1872          and.w     #32768,D0
000013DA  0C40 8000 1873          cmp.w     #32768,D0
000013DE  660A      1874          bne.s     DumpRegisters_20
000013E0  4878 0054 1875          pea       84
000013E4  4E92      1876          jsr       (A2)
000013E6  584F      1877          addq.w    #4,A7
000013E8  6008      1878          bra.s     DumpRegisters_21
                    1879   DumpRegisters_20:
000013EA  4878 002D 1880          pea       45
000013EE  4E92      1881          jsr       (A2)
000013F0  584F      1882          addq.w    #4,A7
                    1883   DumpRegisters_21:
                    1884   ; if((SR & (unsigned short int)(0x2000)) == (unsigned short int)(0x2000)) putchar('S') ; else putchar('U') ;      // supervisor bit  (bit 13)
000013F2  3014      1885          move.w    (A4),D0
000013F4  C07C 2000 1886          and.w     #8192,D0
000013F8  0C40 2000 1887          cmp.w     #8192,D0
000013FC  660A      1888          bne.s     DumpRegisters_22
000013FE  4878 0053 1889          pea       83
00001402  4E92      1890          jsr       (A2)
00001404  584F      1891          addq.w    #4,A7
00001406  6008      1892          bra.s     DumpRegisters_23
                    1893   DumpRegisters_22:
00001408  4878 0055 1894          pea       85
0000140C  4E92      1895          jsr       (A2)
0000140E  584F      1896          addq.w    #4,A7
                    1897   DumpRegisters_23:
                    1898   ; if((SR & (unsigned short int)(0x0400)) == (unsigned short int)(0x0400)) putchar('1') ; else putchar('0') ;      // IRQ2 Bit (bit 10)
00001410  3014      1899          move.w    (A4),D0
00001412  C07C 0400 1900          and.w     #1024,D0
00001416  0C40 0400 1901          cmp.w     #1024,D0
0000141A  660A      1902          bne.s     DumpRegisters_24
0000141C  4878 0031 1903          pea       49
00001420  4E92      1904          jsr       (A2)
00001422  584F      1905          addq.w    #4,A7
00001424  6008      1906          bra.s     DumpRegisters_25
                    1907   DumpRegisters_24:
00001426  4878 0030 1908          pea       48
0000142A  4E92      1909          jsr       (A2)
0000142C  584F      1910          addq.w    #4,A7
                    1911   DumpRegisters_25:
                    1912   ; if((SR & (unsigned short int)(0x0200)) == (unsigned short int)(0x0200)) putchar('1') ; else putchar('0') ;      // IRQ1 Bit (bit 9)
0000142E  3014      1913          move.w    (A4),D0
00001430  C07C 0200 1914          and.w     #512,D0
00001434  0C40 0200 1915          cmp.w     #512,D0
00001438  660A      1916          bne.s     DumpRegisters_26
0000143A  4878 0031 1917          pea       49
0000143E  4E92      1918          jsr       (A2)
00001440  584F      1919          addq.w    #4,A7
00001442  6008      1920          bra.s     DumpRegisters_27
                    1921   DumpRegisters_26:
00001444  4878 0030 1922          pea       48
00001448  4E92      1923          jsr       (A2)
0000144A  584F      1924          addq.w    #4,A7
                    1925   DumpRegisters_27:
                    1926   ; if((SR & (unsigned short int)(0x0100)) == (unsigned short int)(0x0100)) putchar('1') ; else putchar('0') ;      // IRQ0 Bit (bit 8)
0000144C  3014      1927          move.w    (A4),D0
0000144E  C07C 0100 1928          and.w     #256,D0
00001452  0C40 0100 1929          cmp.w     #256,D0
00001456  660A      1930          bne.s     DumpRegisters_28
00001458  4878 0031 1931          pea       49
0000145C  4E92      1932          jsr       (A2)
0000145E  584F      1933          addq.w    #4,A7
00001460  6008      1934          bra.s     DumpRegisters_29
                    1935   DumpRegisters_28:
00001462  4878 0030 1936          pea       48
00001466  4E92      1937          jsr       (A2)
00001468  584F      1938          addq.w    #4,A7
                    1939   DumpRegisters_29:
                    1940   ; if((SR & (unsigned short int)(0x0010)) == (unsigned short int)(0x0010)) putchar('X') ; else putchar('-') ;      // X Bit (bit 4)
0000146A  3014      1941          move.w    (A4),D0
0000146C  C07C 0010 1942          and.w     #16,D0
00001470  0C40 0010 1943          cmp.w     #16,D0
00001474  660A      1944          bne.s     DumpRegisters_30
00001476  4878 0058 1945          pea       88
0000147A  4E92      1946          jsr       (A2)
0000147C  584F      1947          addq.w    #4,A7
0000147E  6008      1948          bra.s     DumpRegisters_31
                    1949   DumpRegisters_30:
00001480  4878 002D 1950          pea       45
00001484  4E92      1951          jsr       (A2)
00001486  584F      1952          addq.w    #4,A7
                    1953   DumpRegisters_31:
                    1954   ; if((SR & (unsigned short int)(0x0008)) == (unsigned short int)(0x0008)) putchar('N') ; else putchar('-') ;      // N Bit (bit 3)
00001488  3014      1955          move.w    (A4),D0
0000148A  C07C 0008 1956          and.w     #8,D0
0000148E  0C40 0008 1957          cmp.w     #8,D0
00001492  660A      1958          bne.s     DumpRegisters_32
00001494  4878 004E 1959          pea       78
00001498  4E92      1960          jsr       (A2)
0000149A  584F      1961          addq.w    #4,A7
0000149C  6008      1962          bra.s     DumpRegisters_33
                    1963   DumpRegisters_32:
0000149E  4878 002D 1964          pea       45
000014A2  4E92      1965          jsr       (A2)
000014A4  584F      1966          addq.w    #4,A7
                    1967   DumpRegisters_33:
                    1968   ; if((SR & (unsigned short int)(0x0004)) == (unsigned short int)(0x0004)) putchar('Z') ; else putchar('-') ;      // Z Bit (bit 2)
000014A6  3014      1969          move.w    (A4),D0
000014A8  C07C 0004 1970          and.w     #4,D0
000014AC  0C40 0004 1971          cmp.w     #4,D0
000014B0  660A      1972          bne.s     DumpRegisters_34
000014B2  4878 005A 1973          pea       90
000014B6  4E92      1974          jsr       (A2)
000014B8  584F      1975          addq.w    #4,A7
000014BA  6008      1976          bra.s     DumpRegisters_35
                    1977   DumpRegisters_34:
000014BC  4878 002D 1978          pea       45
000014C0  4E92      1979          jsr       (A2)
000014C2  584F      1980          addq.w    #4,A7
                    1981   DumpRegisters_35:
                    1982   ; if((SR & (unsigned short int)(0x0002)) == (unsigned short int)(0x0002)) putchar('V') ; else putchar('-') ;      // V Bit (bit 1)
000014C4  3014      1983          move.w    (A4),D0
000014C6  C07C 0002 1984          and.w     #2,D0
000014CA  0C40 0002 1985          cmp.w     #2,D0
000014CE  660A      1986          bne.s     DumpRegisters_36
000014D0  4878 0056 1987          pea       86
000014D4  4E92      1988          jsr       (A2)
000014D6  584F      1989          addq.w    #4,A7
000014D8  6008      1990          bra.s     DumpRegisters_37
                    1991   DumpRegisters_36:
000014DA  4878 002D 1992          pea       45
000014DE  4E92      1993          jsr       (A2)
000014E0  584F      1994          addq.w    #4,A7
                    1995   DumpRegisters_37:
                    1996   ; if((SR & (unsigned short int)(0x0001)) == (unsigned short int)(0x0001)) putchar('C') ; else putchar('-') ;      // C Bit (bit 0)
000014E2  3014      1997          move.w    (A4),D0
000014E4  C07C 0001 1998          and.w     #1,D0
000014E8  0C40 0001 1999          cmp.w     #1,D0
000014EC  660A      2000          bne.s     DumpRegisters_38
000014EE  4878 0043 2001          pea       67
000014F2  4E92      2002          jsr       (A2)
000014F4  584F      2003          addq.w    #4,A7
000014F6  6008      2004          bra.s     DumpRegisters_39
                    2005   DumpRegisters_38:
000014F8  4878 002D 2006          pea       45
000014FC  4E92      2007          jsr       (A2)
000014FE  584F      2008          addq.w    #4,A7
                    2009   DumpRegisters_39:
                    2010   ; putchar(']') ;
00001500  4878 005D 2011          pea       93
00001504  4E92      2012          jsr       (A2)
00001506  584F      2013          addq.w    #4,A7
                    2014   ; printf("\r\n PC = $%08X  ", PC) ;
00001508  2F39 0B00 2015          move.l    _PC.L,-(A7)
0000150C  0120      
0000150E  4879 0000 2016          pea       @m68kde~1_40.L
00001512  495A      
00001514  4E93      2017          jsr       (A3)
00001516  504F      2018          addq.w    #8,A7
                    2019   ; if(*(unsigned short int *)(PC) == 0x4e4e)
00001518  2039 0B00 2020          move.l    _PC.L,D0
0000151C  0120      
0000151E  2040      2021          move.l    D0,A0
00001520  3010      2022          move.w    (A0),D0
00001522  0C40 4E4E 2023          cmp.w     #20046,D0
00001526  660A      2024          bne.s     DumpRegisters_40
                    2025   ; printf("[@ BREAKPOINT]") ;
00001528  4879 0000 2026          pea       @m68kde~1_41.L
0000152C  496A      
0000152E  4E93      2027          jsr       (A3)
00001530  584F      2028          addq.w    #4,A7
                    2029   DumpRegisters_40:
                    2030   ; printf("\r\n") ;
00001532  4879 0000 2031          pea       @m68kde~1_1.L
00001536  45D6      
00001538  4E93      2032          jsr       (A3)
0000153A  584F      2033          addq.w    #4,A7
                    2034   ; for(i=0; i < 8; i++)    {
0000153C  4244      2035          clr.w     D4
                    2036   DumpRegisters_42:
0000153E  0C44 0008 2037          cmp.w     #8,D4
00001542  6C00 0040 2038          bge       DumpRegisters_44
                    2039   ; if(WatchPointSetOrCleared[i] == 1)
00001546  48C4      2040          ext.l     D4
00001548  2004      2041          move.l    D4,D0
0000154A  E588      2042          lsl.l     #2,D0
0000154C  41F9 0B00 2043          lea       _WatchPointSetOrCleared.L,A0
00001550  01A2      
00001552  2030 0800 2044          move.l    0(A0,D0.L),D0
00001556  0C80 0000 2045          cmp.l     #1,D0
0000155A  0001      
0000155C  6622      2046          bne.s     DumpRegisters_45
                    2047   ; printf("\r\nWP%d = %s", i, WatchPointString[i]) ;
0000155E  220D      2048          move.l    A5,D1
00001560  48C4      2049          ext.l     D4
00001562  2F00      2050          move.l    D0,-(A7)
00001564  2004      2051          move.l    D4,D0
00001566  C1FC 0064 2052          muls      #100,D0
0000156A  D280      2053          add.l     D0,D1
0000156C  201F      2054          move.l    (A7)+,D0
0000156E  2F01      2055          move.l    D1,-(A7)
00001570  48C4      2056          ext.l     D4
00001572  2F04      2057          move.l    D4,-(A7)
00001574  4879 0000 2058          pea       @m68kde~1_42.L
00001578  497A      
0000157A  4E93      2059          jsr       (A3)
0000157C  DEFC 000C 2060          add.w     #12,A7
                    2061   DumpRegisters_45:
00001580  5244      2062          addq.w    #1,D4
00001582  60BA      2063          bra       DumpRegisters_42
                    2064   DumpRegisters_44:
00001584  4CDF 3CFC 2065          movem.l   (A7)+,D2/D3/D4/D5/D6/D7/A2/A3/A4/A5
00001588  4E75      2066          rts
                    2067   ; }
                    2068   ; }
                    2069   ; // Trace Exception Handler
                    2070   ; void DumpRegistersandPause(void)
                    2071   ; {
                    2072   _DumpRegistersandPause:
0000158A  2F0A      2073          move.l    A2,-(A7)
0000158C  45F9 0000 2074          lea       _printf.L,A2
00001590  3C12      
                    2075   ; printf("\r\n\r\n\r\n\r\n\r\n\r\nSingle Step  :[ON]") ;
00001592  4879 0000 2076          pea       @m68kde~1_43.L
00001596  4986      
00001598  4E92      2077          jsr       (A2)
0000159A  584F      2078          addq.w    #4,A7
                    2079   ; printf("\r\nBreak Points :[Disabled]") ;
0000159C  4879 0000 2080          pea       @m68kde~1_44.L
000015A0  49A6      
000015A2  4E92      2081          jsr       (A2)
000015A4  584F      2082          addq.w    #4,A7
                    2083   ; DumpRegisters() ;
000015A6  4EB8 10D6 2084          jsr       _DumpRegisters
                    2085   ; printf("\r\nPress <SPACE> to Execute Next Instruction");
000015AA  4879 0000 2086          pea       @m68kde~1_45.L
000015AE  49C2      
000015B0  4E92      2087          jsr       (A2)
000015B2  584F      2088          addq.w    #4,A7
                    2089   ; printf("\r\nPress <ESC> to Resume Program") ;
000015B4  4879 0000 2090          pea       @m68kde~1_46.L
000015B8  49EE      
000015BA  4E92      2091          jsr       (A2)
000015BC  584F      2092          addq.w    #4,A7
                    2093   ; menu() ;
000015BE  4EB9 0000 2094          jsr       _menu
000015C2  216E      
000015C4  245F      2095          move.l    (A7)+,A2
000015C6  4E75      2096          rts
                    2097   ; }
                    2098   ; void ChangeRegisters(void)
                    2099   ; {
                    2100   _ChangeRegisters:
000015C8  4E56 FFFC 2101          link      A6,#-4
000015CC  48E7 303C 2102          movem.l   D2/D3/A2/A3/A4/A5,-(A7)
000015D0  45F9 0000 2103          lea       _printf.L,A2
000015D4  3C12      
000015D6  47EE FFFC 2104          lea       -4(A6),A3
000015DA  49F8 0CA4 2105          lea       _Get8HexDigits.L,A4
000015DE  4BF8 0B68 2106          lea       __getch.L,A5
                    2107   ; // get register name d0-d7, a0-a7, up, sp, sr, pc
                    2108   ; int reg_val ;
                    2109   ; char c, reg[3] ;
                    2110   ; reg[0] = tolower(_getch()) ;
000015E2  2F00      2111          move.l    D0,-(A7)
000015E4  4E95      2112          jsr       (A5)
000015E6  2200      2113          move.l    D0,D1
000015E8  201F      2114          move.l    (A7)+,D0
000015EA  2F01      2115          move.l    D1,-(A7)
000015EC  4EB9 0000 2116          jsr       _tolower
000015F0  32DA      
000015F2  584F      2117          addq.w    #4,A7
000015F4  1680      2118          move.b    D0,(A3)
                    2119   ; reg[1] = c = tolower(_getch()) ;
000015F6  2F00      2120          move.l    D0,-(A7)
000015F8  4E95      2121          jsr       (A5)
000015FA  2200      2122          move.l    D0,D1
000015FC  201F      2123          move.l    (A7)+,D0
000015FE  2F01      2124          move.l    D1,-(A7)
00001600  4EB9 0000 2125          jsr       _tolower
00001604  32DA      
00001606  584F      2126          addq.w    #4,A7
00001608  1400      2127          move.b    D0,D2
0000160A  1740 0001 2128          move.b    D0,1(A3)
                    2129   ; if(reg[0] == (char)('d'))  {    // change data register
0000160E  1013      2130          move.b    (A3),D0
00001610  0C00 0064 2131          cmp.b     #100,D0
00001614  6600 00AE 2132          bne       ChangeRegisters_1
                    2133   ; if((reg[1] > (char)('7')) || (reg[1] < (char)('0'))) {
00001618  102B 0001 2134          move.b    1(A3),D0
0000161C  0C00 0037 2135          cmp.b     #55,D0
00001620  6E0A      2136          bgt.s     ChangeRegisters_5
00001622  102B 0001 2137          move.b    1(A3),D0
00001626  0C00 0030 2138          cmp.b     #48,D0
0000162A  6C0E      2139          bge.s     ChangeRegisters_3
                    2140   ChangeRegisters_5:
                    2141   ; printf("\r\nIllegal Data Register : Use D0-D7.....\r\n") ;
0000162C  4879 0000 2142          pea       @m68kde~1_47.L
00001630  4A0E      
00001632  4E92      2143          jsr       (A2)
00001634  584F      2144          addq.w    #4,A7
                    2145   ; return ;
00001636  6000 0244 2146          bra       ChangeRegisters_6
                    2147   ChangeRegisters_3:
                    2148   ; }
                    2149   ; else {
                    2150   ; printf("\r\nD%c = ", c) ;
0000163A  4882      2151          ext.w     D2
0000163C  48C2      2152          ext.l     D2
0000163E  2F02      2153          move.l    D2,-(A7)
00001640  4879 0000 2154          pea       @m68kde~1_48.L
00001644  4A3A      
00001646  4E92      2155          jsr       (A2)
00001648  504F      2156          addq.w    #8,A7
                    2157   ; reg_val = Get8HexDigits(0) ;    // read 32 bit value from user keyboard
0000164A  42A7      2158          clr.l     -(A7)
0000164C  4E94      2159          jsr       (A4)
0000164E  584F      2160          addq.w    #4,A7
00001650  2600      2161          move.l    D0,D3
                    2162   ; }
                    2163   ; // bit cludgy but d0-d7 not stored as an array for good reason
                    2164   ; if(c == (char)('0'))
00001652  0C02 0030 2165          cmp.b     #48,D2
00001656  660A      2166          bne.s     ChangeRegisters_7
                    2167   ; d0 = reg_val ;
00001658  23C3 0B00 2168          move.l    D3,_d0.L
0000165C  00E4      
0000165E  6000 0060 2169          bra       ChangeRegisters_20
                    2170   ChangeRegisters_7:
                    2171   ; else if(c == (char)('1'))
00001662  0C02 0031 2172          cmp.b     #49,D2
00001666  660A      2173          bne.s     ChangeRegisters_9
                    2174   ; d1 = reg_val ;
00001668  23C3 0B00 2175          move.l    D3,_d1.L
0000166C  00E8      
0000166E  6000 0050 2176          bra       ChangeRegisters_20
                    2177   ChangeRegisters_9:
                    2178   ; else if(c == (char)('2'))
00001672  0C02 0032 2179          cmp.b     #50,D2
00001676  660A      2180          bne.s     ChangeRegisters_11
                    2181   ; d2 = reg_val ;
00001678  23C3 0B00 2182          move.l    D3,_d2.L
0000167C  00EC      
0000167E  6000 0040 2183          bra       ChangeRegisters_20
                    2184   ChangeRegisters_11:
                    2185   ; else if(c == (char)('3'))
00001682  0C02 0033 2186          cmp.b     #51,D2
00001686  6608      2187          bne.s     ChangeRegisters_13
                    2188   ; d3 = reg_val ;
00001688  23C3 0B00 2189          move.l    D3,_d3.L
0000168C  00F0      
0000168E  6030      2190          bra.s     ChangeRegisters_20
                    2191   ChangeRegisters_13:
                    2192   ; else if(c == (char)('4'))
00001690  0C02 0034 2193          cmp.b     #52,D2
00001694  6608      2194          bne.s     ChangeRegisters_15
                    2195   ; d4 = reg_val ;
00001696  23C3 0B00 2196          move.l    D3,_d4.L
0000169A  00F4      
0000169C  6022      2197          bra.s     ChangeRegisters_20
                    2198   ChangeRegisters_15:
                    2199   ; else if(c == (char)('5'))
0000169E  0C02 0035 2200          cmp.b     #53,D2
000016A2  6608      2201          bne.s     ChangeRegisters_17
                    2202   ; d5 = reg_val ;
000016A4  23C3 0B00 2203          move.l    D3,_d5.L
000016A8  00F8      
000016AA  6014      2204          bra.s     ChangeRegisters_20
                    2205   ChangeRegisters_17:
                    2206   ; else if(c == (char)('6'))
000016AC  0C02 0036 2207          cmp.b     #54,D2
000016B0  6608      2208          bne.s     ChangeRegisters_19
                    2209   ; d6 = reg_val ;
000016B2  23C3 0B00 2210          move.l    D3,_d6.L
000016B6  00FC      
000016B8  6006      2211          bra.s     ChangeRegisters_20
                    2212   ChangeRegisters_19:
                    2213   ; else
                    2214   ; d7 = reg_val ;
000016BA  23C3 0B00 2215          move.l    D3,_d7.L
000016BE  0100      
                    2216   ChangeRegisters_20:
000016C0  6000 01B6 2217          bra       ChangeRegisters_51
                    2218   ChangeRegisters_1:
                    2219   ; }
                    2220   ; else if(reg[0] == (char)('a'))  {    // change address register, a7 is the user stack pointer, sp is the system stack pointer
000016C4  1013      2221          move.b    (A3),D0
000016C6  0C00 0061 2222          cmp.b     #97,D0
000016CA  6600 00A6 2223          bne       ChangeRegisters_21
                    2224   ; if((c > (char)('7')) || (c < (char)('0'))) {
000016CE  0C02 0037 2225          cmp.b     #55,D2
000016D2  6E06      2226          bgt.s     ChangeRegisters_25
000016D4  0C02 0030 2227          cmp.b     #48,D2
000016D8  6C0E      2228          bge.s     ChangeRegisters_23
                    2229   ChangeRegisters_25:
                    2230   ; printf("\r\nIllegal Address Register : Use A0-A7.....\r\n") ;
000016DA  4879 0000 2231          pea       @m68kde~1_49.L
000016DE  4A44      
000016E0  4E92      2232          jsr       (A2)
000016E2  584F      2233          addq.w    #4,A7
                    2234   ; return ;
000016E4  6000 0196 2235          bra       ChangeRegisters_6
                    2236   ChangeRegisters_23:
                    2237   ; }
                    2238   ; else {
                    2239   ; printf("\r\nA%c = ", c) ;
000016E8  4882      2240          ext.w     D2
000016EA  48C2      2241          ext.l     D2
000016EC  2F02      2242          move.l    D2,-(A7)
000016EE  4879 0000 2243          pea       @m68kde~1_50.L
000016F2  4A72      
000016F4  4E92      2244          jsr       (A2)
000016F6  504F      2245          addq.w    #8,A7
                    2246   ; reg_val = Get8HexDigits(0) ;    // read 32 bit value from user keyboard
000016F8  42A7      2247          clr.l     -(A7)
000016FA  4E94      2248          jsr       (A4)
000016FC  584F      2249          addq.w    #4,A7
000016FE  2600      2250          move.l    D0,D3
                    2251   ; }
                    2252   ; // bit cludgy but a0-a7 not stored as an array for good reason
                    2253   ; if(c == (char)('0'))
00001700  0C02 0030 2254          cmp.b     #48,D2
00001704  660A      2255          bne.s     ChangeRegisters_26
                    2256   ; a0 = reg_val ;
00001706  23C3 0B00 2257          move.l    D3,_a0.L
0000170A  0104      
0000170C  6000 0060 2258          bra       ChangeRegisters_39
                    2259   ChangeRegisters_26:
                    2260   ; else if(c == (char)('1'))
00001710  0C02 0031 2261          cmp.b     #49,D2
00001714  660A      2262          bne.s     ChangeRegisters_28
                    2263   ; a1 = reg_val ;
00001716  23C3 0B00 2264          move.l    D3,_a1.L
0000171A  0108      
0000171C  6000 0050 2265          bra       ChangeRegisters_39
                    2266   ChangeRegisters_28:
                    2267   ; else if(c == (char)('2'))
00001720  0C02 0032 2268          cmp.b     #50,D2
00001724  660A      2269          bne.s     ChangeRegisters_30
                    2270   ; a2 = reg_val ;
00001726  23C3 0B00 2271          move.l    D3,_a2.L
0000172A  010C      
0000172C  6000 0040 2272          bra       ChangeRegisters_39
                    2273   ChangeRegisters_30:
                    2274   ; else if(c == (char)('3'))
00001730  0C02 0033 2275          cmp.b     #51,D2
00001734  6608      2276          bne.s     ChangeRegisters_32
                    2277   ; a3 = reg_val ;
00001736  23C3 0B00 2278          move.l    D3,_a3.L
0000173A  0110      
0000173C  6030      2279          bra.s     ChangeRegisters_39
                    2280   ChangeRegisters_32:
                    2281   ; else if(c == (char)('4'))
0000173E  0C02 0034 2282          cmp.b     #52,D2
00001742  6608      2283          bne.s     ChangeRegisters_34
                    2284   ; a4 = reg_val ;
00001744  23C3 0B00 2285          move.l    D3,_a4.L
00001748  0114      
0000174A  6022      2286          bra.s     ChangeRegisters_39
                    2287   ChangeRegisters_34:
                    2288   ; else if(c == (char)('5'))
0000174C  0C02 0035 2289          cmp.b     #53,D2
00001750  6608      2290          bne.s     ChangeRegisters_36
                    2291   ; a5 = reg_val ;
00001752  23C3 0B00 2292          move.l    D3,_a5.L
00001756  0118      
00001758  6014      2293          bra.s     ChangeRegisters_39
                    2294   ChangeRegisters_36:
                    2295   ; else if(c == (char)('6'))
0000175A  0C02 0036 2296          cmp.b     #54,D2
0000175E  6608      2297          bne.s     ChangeRegisters_38
                    2298   ; a6 = reg_val ;
00001760  23C3 0B00 2299          move.l    D3,_a6.L
00001764  011C      
00001766  6006      2300          bra.s     ChangeRegisters_39
                    2301   ChangeRegisters_38:
                    2302   ; else
                    2303   ; USP = reg_val ;
00001768  23C3 0B00 2304          move.l    D3,_USP.L
0000176C  0128      
                    2305   ChangeRegisters_39:
0000176E  6000 0108 2306          bra       ChangeRegisters_51
                    2307   ChangeRegisters_21:
                    2308   ; }
                    2309   ; else if((reg[0] == (char)('u')) && (c == (char)('s')))  {
00001772  1013      2310          move.b    (A3),D0
00001774  0C00 0075 2311          cmp.b     #117,D0
00001778  6600 004E 2312          bne       ChangeRegisters_40
0000177C  0C02 0073 2313          cmp.b     #115,D2
00001780  6600 0046 2314          bne       ChangeRegisters_40
                    2315   ; if(tolower(_getch()) == 'p')  {    // change user stack pointer
00001784  2F00      2316          move.l    D0,-(A7)
00001786  4E95      2317          jsr       (A5)
00001788  2200      2318          move.l    D0,D1
0000178A  201F      2319          move.l    (A7)+,D0
0000178C  2F01      2320          move.l    D1,-(A7)
0000178E  4EB9 0000 2321          jsr       _tolower
00001792  32DA      
00001794  584F      2322          addq.w    #4,A7
00001796  0C80 0000 2323          cmp.l     #112,D0
0000179A  0070      
0000179C  6618      2324          bne.s     ChangeRegisters_42
                    2325   ; printf("\r\nUser SP = ") ;
0000179E  4879 0000 2326          pea       @m68kde~1_51.L
000017A2  4A7C      
000017A4  4E92      2327          jsr       (A2)
000017A6  584F      2328          addq.w    #4,A7
                    2329   ; USP = Get8HexDigits(0) ;    // read 32 bit value from user keyboard
000017A8  42A7      2330          clr.l     -(A7)
000017AA  4E94      2331          jsr       (A4)
000017AC  584F      2332          addq.w    #4,A7
000017AE  23C0 0B00 2333          move.l    D0,_USP.L
000017B2  0128      
000017B4  600E      2334          bra.s     ChangeRegisters_43
                    2335   ChangeRegisters_42:
                    2336   ; }
                    2337   ; else {
                    2338   ; printf("\r\nIllegal Register....") ;
000017B6  4879 0000 2339          pea       @m68kde~1_52.L
000017BA  4A8A      
000017BC  4E92      2340          jsr       (A2)
000017BE  584F      2341          addq.w    #4,A7
                    2342   ; return ;
000017C0  6000 00BA 2343          bra       ChangeRegisters_6
                    2344   ChangeRegisters_43:
000017C4  6000 00B2 2345          bra       ChangeRegisters_51
                    2346   ChangeRegisters_40:
                    2347   ; }
                    2348   ; }
                    2349   ; else if((reg[0] == (char)('s')) && (c == (char)('s')))  {
000017C8  1013      2350          move.b    (A3),D0
000017CA  0C00 0073 2351          cmp.b     #115,D0
000017CE  6600 004E 2352          bne       ChangeRegisters_44
000017D2  0C02 0073 2353          cmp.b     #115,D2
000017D6  6600 0046 2354          bne       ChangeRegisters_44
                    2355   ; if(tolower(_getch()) == 'p')  {    // change system stack pointer
000017DA  2F00      2356          move.l    D0,-(A7)
000017DC  4E95      2357          jsr       (A5)
000017DE  2200      2358          move.l    D0,D1
000017E0  201F      2359          move.l    (A7)+,D0
000017E2  2F01      2360          move.l    D1,-(A7)
000017E4  4EB9 0000 2361          jsr       _tolower
000017E8  32DA      
000017EA  584F      2362          addq.w    #4,A7
000017EC  0C80 0000 2363          cmp.l     #112,D0
000017F0  0070      
000017F2  6618      2364          bne.s     ChangeRegisters_46
                    2365   ; printf("\r\nSystem SP = ") ;
000017F4  4879 0000 2366          pea       @m68kde~1_53.L
000017F8  4AA2      
000017FA  4E92      2367          jsr       (A2)
000017FC  584F      2368          addq.w    #4,A7
                    2369   ; SSP = Get8HexDigits(0) ;    // read 32 bit value from user keyboard
000017FE  42A7      2370          clr.l     -(A7)
00001800  4E94      2371          jsr       (A4)
00001802  584F      2372          addq.w    #4,A7
00001804  23C0 0B00 2373          move.l    D0,_SSP.L
00001808  0124      
0000180A  600E      2374          bra.s     ChangeRegisters_47
                    2375   ChangeRegisters_46:
                    2376   ; }
                    2377   ; else {
                    2378   ; printf("\r\nIllegal Register....") ;
0000180C  4879 0000 2379          pea       @m68kde~1_52.L
00001810  4A8A      
00001812  4E92      2380          jsr       (A2)
00001814  584F      2381          addq.w    #4,A7
                    2382   ; return ;
00001816  6000 0064 2383          bra       ChangeRegisters_6
                    2384   ChangeRegisters_47:
0000181A  6000 005C 2385          bra       ChangeRegisters_51
                    2386   ChangeRegisters_44:
                    2387   ; }
                    2388   ; }
                    2389   ; else if((reg[0] == (char)('p')) && (c == (char)('c')))  {    // change program counter
0000181E  1013      2390          move.b    (A3),D0
00001820  0C00 0070 2391          cmp.b     #112,D0
00001824  6620      2392          bne.s     ChangeRegisters_48
00001826  0C02 0063 2393          cmp.b     #99,D2
0000182A  661A      2394          bne.s     ChangeRegisters_48
                    2395   ; printf("\r\nPC = ") ;
0000182C  4879 0000 2396          pea       @m68kde~1_54.L
00001830  4AB2      
00001832  4E92      2397          jsr       (A2)
00001834  584F      2398          addq.w    #4,A7
                    2399   ; PC = Get8HexDigits(0) ;    // read 32 bit value from user keyboard
00001836  42A7      2400          clr.l     -(A7)
00001838  4E94      2401          jsr       (A4)
0000183A  584F      2402          addq.w    #4,A7
0000183C  23C0 0B00 2403          move.l    D0,_PC.L
00001840  0120      
00001842  6000 0034 2404          bra       ChangeRegisters_51
                    2405   ChangeRegisters_48:
                    2406   ; }
                    2407   ; else if((reg[0] == (char)('s')) && (c == (char)('r')))  {    // change status register
00001846  1013      2408          move.b    (A3),D0
00001848  0C00 0073 2409          cmp.b     #115,D0
0000184C  6620      2410          bne.s     ChangeRegisters_50
0000184E  0C02 0072 2411          cmp.b     #114,D2
00001852  661A      2412          bne.s     ChangeRegisters_50
                    2413   ; printf("\r\nSR = ") ;
00001854  4879 0000 2414          pea       @m68kde~1_55.L
00001858  4ABA      
0000185A  4E92      2415          jsr       (A2)
0000185C  584F      2416          addq.w    #4,A7
                    2417   ; SR = Get4HexDigits(0) ;    // read 16 bit value from user keyboard
0000185E  42A7      2418          clr.l     -(A7)
00001860  4EB8 0C58 2419          jsr       _Get4HexDigits
00001864  584F      2420          addq.w    #4,A7
00001866  33C0 0B00 2421          move.w    D0,_SR.L
0000186A  012C      
0000186C  600A      2422          bra.s     ChangeRegisters_51
                    2423   ChangeRegisters_50:
                    2424   ; }
                    2425   ; else
                    2426   ; printf("\r\nIllegal Register: Use A0-A7, D0-D7, SSP, USP, PC or SR\r\n") ;
0000186E  4879 0000 2427          pea       @m68kde~1_56.L
00001872  4AC2      
00001874  4E92      2428          jsr       (A2)
00001876  584F      2429          addq.w    #4,A7
                    2430   ChangeRegisters_51:
                    2431   ; DumpRegisters() ;
00001878  4EB8 10D6 2432          jsr       _DumpRegisters
                    2433   ChangeRegisters_6:
0000187C  4CDF 3C0C 2434          movem.l   (A7)+,D2/D3/A2/A3/A4/A5
00001880  4E5E      2435          unlk      A6
00001882  4E75      2436          rts
                    2437   ; }
                    2438   ; void BreakPointDisplay(void)
                    2439   ; {
                    2440   _BreakPointDisplay:
00001884  48E7 3030 2441          movem.l   D2/D3/A2/A3,-(A7)
00001888  45F9 0000 2442          lea       _printf.L,A2
0000188C  3C12      
0000188E  47F9 0B00 2443          lea       _BreakPointAddress.L,A3
00001892  012E      
                    2444   ; int i, BreakPointsSet = 0 ;
00001894  4283      2445          clr.l     D3
                    2446   ; // any break points  set
                    2447   ; for(i = 0; i < 8; i++)  {
00001896  4282      2448          clr.l     D2
                    2449   BreakPointDisplay_1:
00001898  0C82 0000 2450          cmp.l     #8,D2
0000189C  0008      
0000189E  6C1C      2451          bge.s     BreakPointDisplay_3
                    2452   ; if(BreakPointSetOrCleared[i] == 1)
000018A0  2002      2453          move.l    D2,D0
000018A2  E588      2454          lsl.l     #2,D0
000018A4  41F9 0B00 2455          lea       _BreakPointSetOrCleared.L,A0
000018A8  015E      
000018AA  2030 0800 2456          move.l    0(A0,D0.L),D0
000018AE  0C80 0000 2457          cmp.l     #1,D0
000018B2  0001      
000018B4  6602      2458          bne.s     BreakPointDisplay_4
                    2459   ; BreakPointsSet = 1;
000018B6  7601      2460          moveq     #1,D3
                    2461   BreakPointDisplay_4:
000018B8  5282      2462          addq.l    #1,D2
000018BA  60DC      2463          bra       BreakPointDisplay_1
                    2464   BreakPointDisplay_3:
                    2465   ; }
                    2466   ; if(BreakPointsSet == 1) {
000018BC  0C83 0000 2467          cmp.l     #1,D3
000018C0  0001      
000018C2  6616      2468          bne.s     BreakPointDisplay_6
                    2469   ; printf("\r\n\r\nNum     Address      Instruction") ;
000018C4  4879 0000 2470          pea       @m68kde~1_57.L
000018C8  4AFE      
000018CA  4E92      2471          jsr       (A2)
000018CC  584F      2472          addq.w    #4,A7
                    2473   ; printf("\r\n---     ---------    -----------") ;
000018CE  4879 0000 2474          pea       @m68kde~1_58.L
000018D2  4B24      
000018D4  4E92      2475          jsr       (A2)
000018D6  584F      2476          addq.w    #4,A7
000018D8  600A      2477          bra.s     BreakPointDisplay_7
                    2478   BreakPointDisplay_6:
                    2479   ; }
                    2480   ; else
                    2481   ; printf("\r\nNo BreakPoints Set") ;
000018DA  4879 0000 2482          pea       @m68kde~1_59.L
000018DE  4B48      
000018E0  4E92      2483          jsr       (A2)
000018E2  584F      2484          addq.w    #4,A7
                    2485   BreakPointDisplay_7:
                    2486   ; for(i = 0; i < 8; i++)  {
000018E4  4282      2487          clr.l     D2
                    2488   BreakPointDisplay_8:
000018E6  0C82 0000 2489          cmp.l     #8,D2
000018EA  0008      
000018EC  6C00 005A 2490          bge       BreakPointDisplay_10
                    2491   ; // put opcode back, then put break point back
                    2492   ; if(BreakPointSetOrCleared[i] == 1)  {
000018F0  2002      2493          move.l    D2,D0
000018F2  E588      2494          lsl.l     #2,D0
000018F4  41F9 0B00 2495          lea       _BreakPointSetOrCleared.L,A0
000018F8  015E      
000018FA  2030 0800 2496          move.l    0(A0,D0.L),D0
000018FE  0C80 0000 2497          cmp.l     #1,D0
00001902  0001      
00001904  6600 003E 2498          bne       BreakPointDisplay_11
                    2499   ; *(unsigned short int *)(BreakPointAddress[i]) = BreakPointInstruction[i];
00001908  2002      2500          move.l    D2,D0
0000190A  E388      2501          lsl.l     #1,D0
0000190C  41F9 0B00 2502          lea       _BreakPointInstruction.L,A0
00001910  014E      
00001912  2202      2503          move.l    D2,D1
00001914  E589      2504          lsl.l     #2,D1
00001916  2233 1800 2505          move.l    0(A3,D1.L),D1
0000191A  2241      2506          move.l    D1,A1
0000191C  32B0 0800 2507          move.w    0(A0,D0.L),(A1)
                    2508   ; *(unsigned short int *)(BreakPointAddress[i]) = (unsigned short int)(0x4e4e) ;
00001920  2002      2509          move.l    D2,D0
00001922  E588      2510          lsl.l     #2,D0
00001924  2033 0800 2511          move.l    0(A3,D0.L),D0
00001928  2040      2512          move.l    D0,A0
0000192A  30BC 4E4E 2513          move.w    #20046,(A0)
                    2514   ; printf("\r\n%3d     $%08x",i, BreakPointAddress[i]) ;
0000192E  2202      2515          move.l    D2,D1
00001930  E589      2516          lsl.l     #2,D1
00001932  2F33 1800 2517          move.l    0(A3,D1.L),-(A7)
00001936  2F02      2518          move.l    D2,-(A7)
00001938  4879 0000 2519          pea       @m68kde~1_60.L
0000193C  4B5E      
0000193E  4E92      2520          jsr       (A2)
00001940  DEFC 000C 2521          add.w     #12,A7
                    2522   BreakPointDisplay_11:
00001944  5282      2523          addq.l    #1,D2
00001946  609E      2524          bra       BreakPointDisplay_8
                    2525   BreakPointDisplay_10:
                    2526   ; }
                    2527   ; }
                    2528   ; printf("\r\n") ;
00001948  4879 0000 2529          pea       @m68kde~1_1.L
0000194C  45D6      
0000194E  4E92      2530          jsr       (A2)
00001950  584F      2531          addq.w    #4,A7
00001952  4CDF 0C0C 2532          movem.l   (A7)+,D2/D3/A2/A3
00001956  4E75      2533          rts
                    2534   ; }
                    2535   ; void WatchPointDisplay(void)
                    2536   ; {
                    2537   _WatchPointDisplay:
00001958  48E7 3020 2538          movem.l   D2/D3/A2,-(A7)
0000195C  45F9 0000 2539          lea       _printf.L,A2
00001960  3C12      
                    2540   ; int i ;
                    2541   ; int WatchPointsSet = 0 ;
00001962  4283      2542          clr.l     D3
                    2543   ; // any watchpoints set
                    2544   ; for(i = 0; i < 8; i++)  {
00001964  4282      2545          clr.l     D2
                    2546   WatchPointDisplay_1:
00001966  0C82 0000 2547          cmp.l     #8,D2
0000196A  0008      
0000196C  6C1C      2548          bge.s     WatchPointDisplay_3
                    2549   ; if(WatchPointSetOrCleared[i] == 1)
0000196E  2002      2550          move.l    D2,D0
00001970  E588      2551          lsl.l     #2,D0
00001972  41F9 0B00 2552          lea       _WatchPointSetOrCleared.L,A0
00001976  01A2      
00001978  2030 0800 2553          move.l    0(A0,D0.L),D0
0000197C  0C80 0000 2554          cmp.l     #1,D0
00001980  0001      
00001982  6602      2555          bne.s     WatchPointDisplay_4
                    2556   ; WatchPointsSet = 1;
00001984  7601      2557          moveq     #1,D3
                    2558   WatchPointDisplay_4:
00001986  5282      2559          addq.l    #1,D2
00001988  60DC      2560          bra       WatchPointDisplay_1
                    2561   WatchPointDisplay_3:
                    2562   ; }
                    2563   ; if(WatchPointsSet == 1) {
0000198A  0C83 0000 2564          cmp.l     #1,D3
0000198E  0001      
00001990  6616      2565          bne.s     WatchPointDisplay_6
                    2566   ; printf("\r\nNum     Address") ;
00001992  4879 0000 2567          pea       @m68kde~1_61.L
00001996  4B6E      
00001998  4E92      2568          jsr       (A2)
0000199A  584F      2569          addq.w    #4,A7
                    2570   ; printf("\r\n---     ---------") ;
0000199C  4879 0000 2571          pea       @m68kde~1_62.L
000019A0  4B80      
000019A2  4E92      2572          jsr       (A2)
000019A4  584F      2573          addq.w    #4,A7
000019A6  600A      2574          bra.s     WatchPointDisplay_7
                    2575   WatchPointDisplay_6:
                    2576   ; }
                    2577   ; else
                    2578   ; printf("\r\nNo WatchPoints Set") ;
000019A8  4879 0000 2579          pea       @m68kde~1_63.L
000019AC  4B94      
000019AE  4E92      2580          jsr       (A2)
000019B0  584F      2581          addq.w    #4,A7
                    2582   WatchPointDisplay_7:
                    2583   ; for(i = 0; i < 8; i++)  {
000019B2  4282      2584          clr.l     D2
                    2585   WatchPointDisplay_8:
000019B4  0C82 0000 2586          cmp.l     #8,D2
000019B8  0008      
000019BA  6C00 0038 2587          bge       WatchPointDisplay_10
                    2588   ; if(WatchPointSetOrCleared[i] == 1)
000019BE  2002      2589          move.l    D2,D0
000019C0  E588      2590          lsl.l     #2,D0
000019C2  41F9 0B00 2591          lea       _WatchPointSetOrCleared.L,A0
000019C6  01A2      
000019C8  2030 0800 2592          move.l    0(A0,D0.L),D0
000019CC  0C80 0000 2593          cmp.l     #1,D0
000019D0  0001      
000019D2  661C      2594          bne.s     WatchPointDisplay_11
                    2595   ; printf("\r\n%3d     $%08x",i, WatchPointAddress[i]) ;
000019D4  2202      2596          move.l    D2,D1
000019D6  E589      2597          lsl.l     #2,D1
000019D8  41F9 0B00 2598          lea       _WatchPointAddress.L,A0
000019DC  0182      
000019DE  2F30 1800 2599          move.l    0(A0,D1.L),-(A7)
000019E2  2F02      2600          move.l    D2,-(A7)
000019E4  4879 0000 2601          pea       @m68kde~1_60.L
000019E8  4B5E      
000019EA  4E92      2602          jsr       (A2)
000019EC  DEFC 000C 2603          add.w     #12,A7
                    2604   WatchPointDisplay_11:
000019F0  5282      2605          addq.l    #1,D2
000019F2  60C0      2606          bra       WatchPointDisplay_8
                    2607   WatchPointDisplay_10:
                    2608   ; }
                    2609   ; printf("\r\n") ;
000019F4  4879 0000 2610          pea       @m68kde~1_1.L
000019F8  45D6      
000019FA  4E92      2611          jsr       (A2)
000019FC  584F      2612          addq.w    #4,A7
000019FE  4CDF 040C 2613          movem.l   (A7)+,D2/D3/A2
00001A02  4E75      2614          rts
                    2615   ; }
                    2616   ; void BreakPointClear(void)
                    2617   ; {
                    2618   _BreakPointClear:
00001A04  4E56 FFFC 2619          link      A6,#-4
00001A08  48E7 2020 2620          movem.l   D2/A2,-(A7)
00001A0C  45F9 0000 2621          lea       _printf.L,A2
00001A10  3C12      
                    2622   ; unsigned int i ;
                    2623   ; volatile unsigned short int *ProgramBreakPointAddress ;
                    2624   ; BreakPointDisplay() ;
00001A12  4EB8 1884 2625          jsr       _BreakPointDisplay
                    2626   ; printf("\r\nEnter Break Point Number: ") ;
00001A16  4879 0000 2627          pea       @m68kde~1_64.L
00001A1A  4BAA      
00001A1C  4E92      2628          jsr       (A2)
00001A1E  584F      2629          addq.w    #4,A7
                    2630   ; i = xtod(_getch()) ;           // get break pointer number
00001A20  2F00      2631          move.l    D0,-(A7)
00001A22  4EB8 0B68 2632          jsr       __getch
00001A26  2200      2633          move.l    D0,D1
00001A28  201F      2634          move.l    (A7)+,D0
00001A2A  2F01      2635          move.l    D1,-(A7)
00001A2C  4EB8 0BD2 2636          jsr       _xtod
00001A30  584F      2637          addq.w    #4,A7
00001A32  C0BC 0000 2638          and.l     #255,D0
00001A36  00FF      
00001A38  2400      2639          move.l    D0,D2
                    2640   ; if((i < 0) || (i > 7))   {
00001A3A  0C82 0000 2641          cmp.l     #0,D2
00001A3E  0000      
00001A40  6508      2642          blo.s     BreakPointClear_3
00001A42  0C82 0000 2643          cmp.l     #7,D2
00001A46  0007      
00001A48  630E      2644          bls.s     BreakPointClear_1
                    2645   BreakPointClear_3:
                    2646   ; printf("\r\nIllegal Range : Use 0 - 7") ;
00001A4A  4879 0000 2647          pea       @m68kde~1_65.L
00001A4E  4BC8      
00001A50  4E92      2648          jsr       (A2)
00001A52  584F      2649          addq.w    #4,A7
                    2650   ; return ;
00001A54  6000 0080 2651          bra       BreakPointClear_4
                    2652   BreakPointClear_1:
                    2653   ; }
                    2654   ; if(BreakPointSetOrCleared[i] == 1)  {       // if break point set
00001A58  2002      2655          move.l    D2,D0
00001A5A  E588      2656          lsl.l     #2,D0
00001A5C  41F9 0B00 2657          lea       _BreakPointSetOrCleared.L,A0
00001A60  015E      
00001A62  2030 0800 2658          move.l    0(A0,D0.L),D0
00001A66  0C80 0000 2659          cmp.l     #1,D0
00001A6A  0001      
00001A6C  6600 005A 2660          bne       BreakPointClear_5
                    2661   ; ProgramBreakPointAddress = (volatile unsigned short int *)(BreakPointAddress[i]) ;     // point to the instruction in the user program we are about to change
00001A70  2002      2662          move.l    D2,D0
00001A72  E588      2663          lsl.l     #2,D0
00001A74  41F9 0B00 2664          lea       _BreakPointAddress.L,A0
00001A78  012E      
00001A7A  2D70 0800 2665          move.l    0(A0,D0.L),-4(A6)
00001A7E  FFFC      
                    2666   ; BreakPointAddress[i] = 0 ;
00001A80  2002      2667          move.l    D2,D0
00001A82  E588      2668          lsl.l     #2,D0
00001A84  41F9 0B00 2669          lea       _BreakPointAddress.L,A0
00001A88  012E      
00001A8A  42B0 0800 2670          clr.l     0(A0,D0.L)
                    2671   ; BreakPointSetOrCleared[i] = 0 ;
00001A8E  2002      2672          move.l    D2,D0
00001A90  E588      2673          lsl.l     #2,D0
00001A92  41F9 0B00 2674          lea       _BreakPointSetOrCleared.L,A0
00001A96  015E      
00001A98  42B0 0800 2675          clr.l     0(A0,D0.L)
                    2676   ; *ProgramBreakPointAddress = BreakPointInstruction[i] ;  // put original instruction back
00001A9C  2002      2677          move.l    D2,D0
00001A9E  E388      2678          lsl.l     #1,D0
00001AA0  41F9 0B00 2679          lea       _BreakPointInstruction.L,A0
00001AA4  014E      
00001AA6  226E FFFC 2680          move.l    -4(A6),A1
00001AAA  32B0 0800 2681          move.w    0(A0,D0.L),(A1)
                    2682   ; BreakPointInstruction[i] = 0 ;
00001AAE  2002      2683          move.l    D2,D0
00001AB0  E388      2684          lsl.l     #1,D0
00001AB2  41F9 0B00 2685          lea       _BreakPointInstruction.L,A0
00001AB6  014E      
00001AB8  4270 0800 2686          clr.w     0(A0,D0.L)
                    2687   ; printf("\r\nBreak Point Cleared.....\r\n") ;
00001ABC  4879 0000 2688          pea       @m68kde~1_66.L
00001AC0  4BE4      
00001AC2  4E92      2689          jsr       (A2)
00001AC4  584F      2690          addq.w    #4,A7
00001AC6  600A      2691          bra.s     BreakPointClear_6
                    2692   BreakPointClear_5:
                    2693   ; }
                    2694   ; else
                    2695   ; printf("\r\nBreak Point wasn't Set.....") ;
00001AC8  4879 0000 2696          pea       @m68kde~1_67.L
00001ACC  4C02      
00001ACE  4E92      2697          jsr       (A2)
00001AD0  584F      2698          addq.w    #4,A7
                    2699   BreakPointClear_6:
                    2700   ; BreakPointDisplay() ;
00001AD2  4EB8 1884 2701          jsr       _BreakPointDisplay
                    2702   ; return ;
                    2703   BreakPointClear_4:
00001AD6  4CDF 0404 2704          movem.l   (A7)+,D2/A2
00001ADA  4E5E      2705          unlk      A6
00001ADC  4E75      2706          rts
                    2707   ; }
                    2708   ; void WatchPointClear(void)
                    2709   ; {
                    2710   _WatchPointClear:
00001ADE  48E7 2020 2711          movem.l   D2/A2,-(A7)
00001AE2  45F9 0000 2712          lea       _printf.L,A2
00001AE6  3C12      
                    2713   ; unsigned int i ;
                    2714   ; WatchPointDisplay() ;
00001AE8  4EB8 1958 2715          jsr       _WatchPointDisplay
                    2716   ; printf("\r\nEnter Watch Point Number: ") ;
00001AEC  4879 0000 2717          pea       @m68kde~1_68.L
00001AF0  4C20      
00001AF2  4E92      2718          jsr       (A2)
00001AF4  584F      2719          addq.w    #4,A7
                    2720   ; i = xtod(_getch()) ;           // get watch pointer number
00001AF6  2F00      2721          move.l    D0,-(A7)
00001AF8  4EB8 0B68 2722          jsr       __getch
00001AFC  2200      2723          move.l    D0,D1
00001AFE  201F      2724          move.l    (A7)+,D0
00001B00  2F01      2725          move.l    D1,-(A7)
00001B02  4EB8 0BD2 2726          jsr       _xtod
00001B06  584F      2727          addq.w    #4,A7
00001B08  C0BC 0000 2728          and.l     #255,D0
00001B0C  00FF      
00001B0E  2400      2729          move.l    D0,D2
                    2730   ; if((i < 0) || (i > 7))   {
00001B10  0C82 0000 2731          cmp.l     #0,D2
00001B14  0000      
00001B16  6508      2732          blo.s     WatchPointClear_3
00001B18  0C82 0000 2733          cmp.l     #7,D2
00001B1C  0007      
00001B1E  630E      2734          bls.s     WatchPointClear_1
                    2735   WatchPointClear_3:
                    2736   ; printf("\r\nIllegal Range : Use 0 - 7") ;
00001B20  4879 0000 2737          pea       @m68kde~1_65.L
00001B24  4BC8      
00001B26  4E92      2738          jsr       (A2)
00001B28  584F      2739          addq.w    #4,A7
                    2740   ; return ;
00001B2A  6000 004E 2741          bra       WatchPointClear_4
                    2742   WatchPointClear_1:
                    2743   ; }
                    2744   ; if(WatchPointSetOrCleared[i] == 1)  {       // if watch point set
00001B2E  2002      2745          move.l    D2,D0
00001B30  E588      2746          lsl.l     #2,D0
00001B32  41F9 0B00 2747          lea       _WatchPointSetOrCleared.L,A0
00001B36  01A2      
00001B38  2030 0800 2748          move.l    0(A0,D0.L),D0
00001B3C  0C80 0000 2749          cmp.l     #1,D0
00001B40  0001      
00001B42  6628      2750          bne.s     WatchPointClear_5
                    2751   ; WatchPointAddress[i] = 0 ;
00001B44  2002      2752          move.l    D2,D0
00001B46  E588      2753          lsl.l     #2,D0
00001B48  41F9 0B00 2754          lea       _WatchPointAddress.L,A0
00001B4C  0182      
00001B4E  42B0 0800 2755          clr.l     0(A0,D0.L)
                    2756   ; WatchPointSetOrCleared[i] = 0 ;
00001B52  2002      2757          move.l    D2,D0
00001B54  E588      2758          lsl.l     #2,D0
00001B56  41F9 0B00 2759          lea       _WatchPointSetOrCleared.L,A0
00001B5A  01A2      
00001B5C  42B0 0800 2760          clr.l     0(A0,D0.L)
                    2761   ; printf("\r\nWatch Point Cleared.....\r\n") ;
00001B60  4879 0000 2762          pea       @m68kde~1_69.L
00001B64  4C3E      
00001B66  4E92      2763          jsr       (A2)
00001B68  584F      2764          addq.w    #4,A7
00001B6A  600A      2765          bra.s     WatchPointClear_6
                    2766   WatchPointClear_5:
                    2767   ; }
                    2768   ; else
                    2769   ; printf("\r\nWatch Point Was not Set.....") ;
00001B6C  4879 0000 2770          pea       @m68kde~1_70.L
00001B70  4C5C      
00001B72  4E92      2771          jsr       (A2)
00001B74  584F      2772          addq.w    #4,A7
                    2773   WatchPointClear_6:
                    2774   ; WatchPointDisplay() ;
00001B76  4EB8 1958 2775          jsr       _WatchPointDisplay
                    2776   ; return ;
                    2777   WatchPointClear_4:
00001B7A  4CDF 0404 2778          movem.l   (A7)+,D2/A2
00001B7E  4E75      2779          rts
                    2780   ; }
                    2781   ; void DisableBreakPoints(void)
                    2782   ; {
                    2783   _DisableBreakPoints:
00001B80  4E56 FFFC 2784          link      A6,#-4
00001B84  2F02      2785          move.l    D2,-(A7)
                    2786   ; int i ;
                    2787   ; volatile unsigned short int *ProgramBreakPointAddress ;
                    2788   ; for(i = 0; i < 8; i++)  {
00001B86  4282      2789          clr.l     D2
                    2790   DisableBreakPoints_1:
00001B88  0C82 0000 2791          cmp.l     #8,D2
00001B8C  0008      
00001B8E  6C00 003E 2792          bge       DisableBreakPoints_3
                    2793   ; if(BreakPointSetOrCleared[i] == 1)    {                                                    // if break point set
00001B92  2002      2794          move.l    D2,D0
00001B94  E588      2795          lsl.l     #2,D0
00001B96  41F9 0B00 2796          lea       _BreakPointSetOrCleared.L,A0
00001B9A  015E      
00001B9C  2030 0800 2797          move.l    0(A0,D0.L),D0
00001BA0  0C80 0000 2798          cmp.l     #1,D0
00001BA4  0001      
00001BA6  6622      2799          bne.s     DisableBreakPoints_4
                    2800   ; ProgramBreakPointAddress = (volatile unsigned short int *)(BreakPointAddress[i]) ;     // point to the instruction in the user program where the break point has been set
00001BA8  2002      2801          move.l    D2,D0
00001BAA  E588      2802          lsl.l     #2,D0
00001BAC  41F9 0B00 2803          lea       _BreakPointAddress.L,A0
00001BB0  012E      
00001BB2  2D70 0800 2804          move.l    0(A0,D0.L),-4(A6)
00001BB6  FFFC      
                    2805   ; *ProgramBreakPointAddress = BreakPointInstruction[i];                                  // copy the instruction back to the user program overwritting the $4e4e
00001BB8  2002      2806          move.l    D2,D0
00001BBA  E388      2807          lsl.l     #1,D0
00001BBC  41F9 0B00 2808          lea       _BreakPointInstruction.L,A0
00001BC0  014E      
00001BC2  226E FFFC 2809          move.l    -4(A6),A1
00001BC6  32B0 0800 2810          move.w    0(A0,D0.L),(A1)
                    2811   DisableBreakPoints_4:
00001BCA  5282      2812          addq.l    #1,D2
00001BCC  60BA      2813          bra       DisableBreakPoints_1
                    2814   DisableBreakPoints_3:
00001BCE  241F      2815          move.l    (A7)+,D2
00001BD0  4E5E      2816          unlk      A6
00001BD2  4E75      2817          rts
                    2818   ; }
                    2819   ; }
                    2820   ; }
                    2821   ; void EnableBreakPoints(void)
                    2822   ; {
                    2823   _EnableBreakPoints:
00001BD4  4E56 FFFC 2824          link      A6,#-4
00001BD8  2F02      2825          move.l    D2,-(A7)
                    2826   ; int i ;
                    2827   ; volatile unsigned short int *ProgramBreakPointAddress ;
                    2828   ; for(i = 0; i < 8; i++)  {
00001BDA  4282      2829          clr.l     D2
                    2830   EnableBreakPoints_1:
00001BDC  0C82 0000 2831          cmp.l     #8,D2
00001BE0  0008      
00001BE2  6C32      2832          bge.s     EnableBreakPoints_3
                    2833   ; if(BreakPointSetOrCleared[i] == 1)    {                                                     // if break point set
00001BE4  2002      2834          move.l    D2,D0
00001BE6  E588      2835          lsl.l     #2,D0
00001BE8  41F9 0B00 2836          lea       _BreakPointSetOrCleared.L,A0
00001BEC  015E      
00001BEE  2030 0800 2837          move.l    0(A0,D0.L),D0
00001BF2  0C80 0000 2838          cmp.l     #1,D0
00001BF6  0001      
00001BF8  6618      2839          bne.s     EnableBreakPoints_4
                    2840   ; ProgramBreakPointAddress = (volatile unsigned short int *)(BreakPointAddress[i]) ;     // point to the instruction in the user program where the break point has been set
00001BFA  2002      2841          move.l    D2,D0
00001BFC  E588      2842          lsl.l     #2,D0
00001BFE  41F9 0B00 2843          lea       _BreakPointAddress.L,A0
00001C02  012E      
00001C04  2D70 0800 2844          move.l    0(A0,D0.L),-4(A6)
00001C08  FFFC      
                    2845   ; *ProgramBreakPointAddress = (unsigned short int)(0x4e4e);                              // put the breakpoint back in user program
00001C0A  206E FFFC 2846          move.l    -4(A6),A0
00001C0E  30BC 4E4E 2847          move.w    #20046,(A0)
                    2848   EnableBreakPoints_4:
00001C12  5282      2849          addq.l    #1,D2
00001C14  60C6      2850          bra       EnableBreakPoints_1
                    2851   EnableBreakPoints_3:
00001C16  241F      2852          move.l    (A7)+,D2
00001C18  4E5E      2853          unlk      A6
00001C1A  4E75      2854          rts
                    2855   ; }
                    2856   ; }
                    2857   ; }
                    2858   ; void KillAllBreakPoints(void)
                    2859   ; {
                    2860   _KillAllBreakPoints:
00001C1C  4E56 FFFC 2861          link      A6,#-4
00001C20  2F02      2862          move.l    D2,-(A7)
                    2863   ; int i ;
                    2864   ; volatile unsigned short int *ProgramBreakPointAddress ;
                    2865   ; for(i = 0; i < 8; i++)  {
00001C22  4282      2866          clr.l     D2
                    2867   KillAllBreakPoints_1:
00001C24  0C82 0000 2868          cmp.l     #8,D2
00001C28  0008      
00001C2A  6C00 0052 2869          bge       KillAllBreakPoints_3
                    2870   ; // clear BP
                    2871   ; ProgramBreakPointAddress = (volatile unsigned short int *)(BreakPointAddress[i]) ;     // point to the instruction in the user program where the break point has been set
00001C2E  2002      2872          move.l    D2,D0
00001C30  E588      2873          lsl.l     #2,D0
00001C32  41F9 0B00 2874          lea       _BreakPointAddress.L,A0
00001C36  012E      
00001C38  2D70 0800 2875          move.l    0(A0,D0.L),-4(A6)
00001C3C  FFFC      
                    2876   ; *ProgramBreakPointAddress = BreakPointInstruction[i];                                  // copy the instruction back to the user program
00001C3E  2002      2877          move.l    D2,D0
00001C40  E388      2878          lsl.l     #1,D0
00001C42  41F9 0B00 2879          lea       _BreakPointInstruction.L,A0
00001C46  014E      
00001C48  226E FFFC 2880          move.l    -4(A6),A1
00001C4C  32B0 0800 2881          move.w    0(A0,D0.L),(A1)
                    2882   ; BreakPointAddress[i] = 0 ;                                                             // set BP address to NULL
00001C50  2002      2883          move.l    D2,D0
00001C52  E588      2884          lsl.l     #2,D0
00001C54  41F9 0B00 2885          lea       _BreakPointAddress.L,A0
00001C58  012E      
00001C5A  42B0 0800 2886          clr.l     0(A0,D0.L)
                    2887   ; BreakPointInstruction[i] = 0 ;
00001C5E  2002      2888          move.l    D2,D0
00001C60  E388      2889          lsl.l     #1,D0
00001C62  41F9 0B00 2890          lea       _BreakPointInstruction.L,A0
00001C66  014E      
00001C68  4270 0800 2891          clr.w     0(A0,D0.L)
                    2892   ; BreakPointSetOrCleared[i] = 0 ;                                                        // mark break point as cleared for future setting
00001C6C  2002      2893          move.l    D2,D0
00001C6E  E588      2894          lsl.l     #2,D0
00001C70  41F9 0B00 2895          lea       _BreakPointSetOrCleared.L,A0
00001C74  015E      
00001C76  42B0 0800 2896          clr.l     0(A0,D0.L)
00001C7A  5282      2897          addq.l    #1,D2
00001C7C  60A6      2898          bra       KillAllBreakPoints_1
                    2899   KillAllBreakPoints_3:
00001C7E  241F      2900          move.l    (A7)+,D2
00001C80  4E5E      2901          unlk      A6
00001C82  4E75      2902          rts
                    2903   ; }
                    2904   ; //BreakPointDisplay() ;       // display the break points
                    2905   ; }
                    2906   ; void KillAllWatchPoints(void)
                    2907   ; {
                    2908   _KillAllWatchPoints:
00001C84  2F02      2909          move.l    D2,-(A7)
                    2910   ; int i ;
                    2911   ; for(i = 0; i < 8; i++)  {
00001C86  4282      2912          clr.l     D2
                    2913   KillAllWatchPoints_1:
00001C88  0C82 0000 2914          cmp.l     #8,D2
00001C8C  0008      
00001C8E  6C20      2915          bge.s     KillAllWatchPoints_3
                    2916   ; WatchPointAddress[i] = 0 ;                                                             // set BP address to NULL
00001C90  2002      2917          move.l    D2,D0
00001C92  E588      2918          lsl.l     #2,D0
00001C94  41F9 0B00 2919          lea       _WatchPointAddress.L,A0
00001C98  0182      
00001C9A  42B0 0800 2920          clr.l     0(A0,D0.L)
                    2921   ; WatchPointSetOrCleared[i] = 0 ;                                                        // mark break point as cleared for future setting
00001C9E  2002      2922          move.l    D2,D0
00001CA0  E588      2923          lsl.l     #2,D0
00001CA2  41F9 0B00 2924          lea       _WatchPointSetOrCleared.L,A0
00001CA6  01A2      
00001CA8  42B0 0800 2925          clr.l     0(A0,D0.L)
00001CAC  5282      2926          addq.l    #1,D2
00001CAE  60D8      2927          bra       KillAllWatchPoints_1
                    2928   KillAllWatchPoints_3:
00001CB0  241F      2929          move.l    (A7)+,D2
00001CB2  4E75      2930          rts
                    2931   ; }
                    2932   ; //WatchPointDisplay() ;       // display the break points
                    2933   ; }
                    2934   ; void SetBreakPoint(void)
                    2935   ; {
                    2936   _SetBreakPoint:
00001CB4  4E56 FFFC 2937          link      A6,#-4
00001CB8  48E7 3830 2938          movem.l   D2/D3/D4/A2/A3,-(A7)
00001CBC  45F9 0000 2939          lea       _printf.L,A2
00001CC0  3C12      
00001CC2  47F9 0B00 2940          lea       _BreakPointSetOrCleared.L,A3
00001CC6  015E      
                    2941   ; int i ;
                    2942   ; int BPNumber;
                    2943   ; int BPAddress;
                    2944   ; volatile unsigned short int *ProgramBreakPointAddress ;
                    2945   ; // see if any free break points
                    2946   ; for(i = 0; i < 8; i ++) {
00001CC8  4282      2947          clr.l     D2
                    2948   SetBreakPoint_1:
00001CCA  0C82 0000 2949          cmp.l     #8,D2
00001CCE  0008      
00001CD0  6C10      2950          bge.s     SetBreakPoint_3
                    2951   ; if( BreakPointSetOrCleared[i] == 0)
00001CD2  2002      2952          move.l    D2,D0
00001CD4  E588      2953          lsl.l     #2,D0
00001CD6  2033 0800 2954          move.l    0(A3,D0.L),D0
00001CDA  6602      2955          bne.s     SetBreakPoint_4
                    2956   ; break ;         // if spare BP found allow user to set it
00001CDC  6004      2957          bra.s     SetBreakPoint_3
                    2958   SetBreakPoint_4:
00001CDE  5282      2959          addq.l    #1,D2
00001CE0  60E8      2960          bra       SetBreakPoint_1
                    2961   SetBreakPoint_3:
                    2962   ; }
                    2963   ; if(i == 8) {
00001CE2  0C82 0000 2964          cmp.l     #8,D2
00001CE6  0008      
00001CE8  660E      2965          bne.s     SetBreakPoint_6
                    2966   ; printf("\r\nNo FREE Break Points.....") ;
00001CEA  4879 0000 2967          pea       @m68kde~1_71.L
00001CEE  4C7C      
00001CF0  4E92      2968          jsr       (A2)
00001CF2  584F      2969          addq.w    #4,A7
                    2970   ; return ;
00001CF4  6000 00D6 2971          bra       SetBreakPoint_15
                    2972   SetBreakPoint_6:
                    2973   ; }
                    2974   ; printf("\r\nBreak Point Address: ") ;
00001CF8  4879 0000 2975          pea       @m68kde~1_72.L
00001CFC  4C98      
00001CFE  4E92      2976          jsr       (A2)
00001D00  584F      2977          addq.w    #4,A7
                    2978   ; BPAddress = Get8HexDigits(0) ;
00001D02  42A7      2979          clr.l     -(A7)
00001D04  4EB8 0CA4 2980          jsr       _Get8HexDigits
00001D08  584F      2981          addq.w    #4,A7
00001D0A  2600      2982          move.l    D0,D3
                    2983   ; ProgramBreakPointAddress = (volatile unsigned short int *)(BPAddress) ;     // point to the instruction in the user program we are about to change
00001D0C  2803      2984          move.l    D3,D4
                    2985   ; if((BPAddress & 0x00000001) == 0x00000001)  {   // cannot set BP at an odd address
00001D0E  2003      2986          move.l    D3,D0
00001D10  C0BC 0000 2987          and.l     #1,D0
00001D14  0001      
00001D16  0C80 0000 2988          cmp.l     #1,D0
00001D1A  0001      
00001D1C  660E      2989          bne.s     SetBreakPoint_9
                    2990   ; printf("\r\nError : Break Points CANNOT be set at ODD addresses") ;
00001D1E  4879 0000 2991          pea       @m68kde~1_73.L
00001D22  4CB0      
00001D24  4E92      2992          jsr       (A2)
00001D26  584F      2993          addq.w    #4,A7
                    2994   ; return ;
00001D28  6000 00A2 2995          bra       SetBreakPoint_15
                    2996   SetBreakPoint_9:
                    2997   ; }
                    2998   ; if(BPAddress < 0x00008000)  {   // cannot set BP in ROM
00001D2C  0C83 0000 2999          cmp.l     #32768,D3
00001D30  8000      
00001D32  640E      3000          bhs.s     SetBreakPoint_11
                    3001   ; printf("\r\nError : Break Points CANNOT be set for ROM in Range : [$0-$00007FFF]") ;
00001D34  4879 0000 3002          pea       @m68kde~1_74.L
00001D38  4CE6      
00001D3A  4E92      3003          jsr       (A2)
00001D3C  584F      3004          addq.w    #4,A7
                    3005   ; return ;
00001D3E  6000 008C 3006          bra       SetBreakPoint_15
                    3007   SetBreakPoint_11:
                    3008   ; }
                    3009   ; // search for first free bp or existing same BP
                    3010   ; for(i = 0; i < 8; i++)  {
00001D42  4282      3011          clr.l     D2
                    3012   SetBreakPoint_13:
00001D44  0C82 0000 3013          cmp.l     #8,D2
00001D48  0008      
00001D4A  6C00 0080 3014          bge       SetBreakPoint_15
                    3015   ; if(BreakPointAddress[i] == BPAddress)   {
00001D4E  2002      3016          move.l    D2,D0
00001D50  E588      3017          lsl.l     #2,D0
00001D52  41F9 0B00 3018          lea       _BreakPointAddress.L,A0
00001D56  012E      
00001D58  B6B0 0800 3019          cmp.l     0(A0,D0.L),D3
00001D5C  6610      3020          bne.s     SetBreakPoint_16
                    3021   ; printf("\r\nError: Break Point Already Exists at Address : %08x\r\n", BPAddress) ;
00001D5E  2F03      3022          move.l    D3,-(A7)
00001D60  4879 0000 3023          pea       @m68kde~1_75.L
00001D64  4D2E      
00001D66  4E92      3024          jsr       (A2)
00001D68  504F      3025          addq.w    #8,A7
                    3026   ; return ;
00001D6A  6000 0060 3027          bra       SetBreakPoint_15
                    3028   SetBreakPoint_16:
                    3029   ; }
                    3030   ; if(BreakPointSetOrCleared[i] == 0) {
00001D6E  2002      3031          move.l    D2,D0
00001D70  E588      3032          lsl.l     #2,D0
00001D72  2033 0800 3033          move.l    0(A3,D0.L),D0
00001D76  6600 004E 3034          bne       SetBreakPoint_18
                    3035   ; // set BP here
                    3036   ; BreakPointSetOrCleared[i] = 1 ;                                 // mark this breakpoint as set
00001D7A  2002      3037          move.l    D2,D0
00001D7C  E588      3038          lsl.l     #2,D0
00001D7E  27BC 0000 3039          move.l    #1,0(A3,D0.L)
00001D82  0001 0800 
                    3040   ; BreakPointInstruction[i] = *ProgramBreakPointAddress ;          // copy the user program instruction here so we can put it back afterwards
00001D86  2044      3041          move.l    D4,A0
00001D88  2002      3042          move.l    D2,D0
00001D8A  E388      3043          lsl.l     #1,D0
00001D8C  43F9 0B00 3044          lea       _BreakPointInstruction.L,A1
00001D90  014E      
00001D92  3390 0800 3045          move.w    (A0),0(A1,D0.L)
                    3046   ; printf("\r\nBreak Point Set at Address: [$%08x]", ProgramBreakPointAddress) ;
00001D96  2F04      3047          move.l    D4,-(A7)
00001D98  4879 0000 3048          pea       @m68kde~1_76.L
00001D9C  4D66      
00001D9E  4E92      3049          jsr       (A2)
00001DA0  504F      3050          addq.w    #8,A7
                    3051   ; *ProgramBreakPointAddress = (unsigned short int)(0x4e4e)    ;   // put a Trap14 instruction at the user specified address
00001DA2  2044      3052          move.l    D4,A0
00001DA4  30BC 4E4E 3053          move.w    #20046,(A0)
                    3054   ; BreakPointAddress[i] = BPAddress ;                              // record the address of this break point in the debugger
00001DA8  2002      3055          move.l    D2,D0
00001DAA  E588      3056          lsl.l     #2,D0
00001DAC  41F9 0B00 3057          lea       _BreakPointAddress.L,A0
00001DB0  012E      
00001DB2  2183 0800 3058          move.l    D3,0(A0,D0.L)
                    3059   ; printf("\r\n") ;
00001DB6  4879 0000 3060          pea       @m68kde~1_1.L
00001DBA  45D6      
00001DBC  4E92      3061          jsr       (A2)
00001DBE  584F      3062          addq.w    #4,A7
                    3063   ; BreakPointDisplay() ;       // display the break points
00001DC0  4EB8 1884 3064          jsr       _BreakPointDisplay
                    3065   ; return ;
00001DC4  6006      3066          bra.s     SetBreakPoint_15
                    3067   SetBreakPoint_18:
00001DC6  5282      3068          addq.l    #1,D2
00001DC8  6000 FF7A 3069          bra       SetBreakPoint_13
                    3070   SetBreakPoint_15:
00001DCC  4CDF 0C1C 3071          movem.l   (A7)+,D2/D3/D4/A2/A3
00001DD0  4E5E      3072          unlk      A6
00001DD2  4E75      3073          rts
                    3074   ; }
                    3075   ; }
                    3076   ; }
                    3077   ; void SetWatchPoint(void)
                    3078   ; {
                    3079   _SetWatchPoint:
00001DD4  4E56 FFF8 3080          link      A6,#-8
00001DD8  48E7 3030 3081          movem.l   D2/D3/A2/A3,-(A7)
00001DDC  45F9 0000 3082          lea       _printf.L,A2
00001DE0  3C12      
00001DE2  47F9 0B00 3083          lea       _WatchPointSetOrCleared.L,A3
00001DE6  01A2      
                    3084   ; int i ;
                    3085   ; int WPNumber;
                    3086   ; int WPAddress;
                    3087   ; volatile unsigned short int *ProgramWatchPointAddress ;
                    3088   ; // see if any free break points
                    3089   ; for(i = 0; i < 8; i ++) {
00001DE8  4282      3090          clr.l     D2
                    3091   SetWatchPoint_1:
00001DEA  0C82 0000 3092          cmp.l     #8,D2
00001DEE  0008      
00001DF0  6C10      3093          bge.s     SetWatchPoint_3
                    3094   ; if( WatchPointSetOrCleared[i] == 0)
00001DF2  2002      3095          move.l    D2,D0
00001DF4  E588      3096          lsl.l     #2,D0
00001DF6  2033 0800 3097          move.l    0(A3,D0.L),D0
00001DFA  6602      3098          bne.s     SetWatchPoint_4
                    3099   ; break ;         // if spare WP found allow user to set it
00001DFC  6004      3100          bra.s     SetWatchPoint_3
                    3101   SetWatchPoint_4:
00001DFE  5282      3102          addq.l    #1,D2
00001E00  60E8      3103          bra       SetWatchPoint_1
                    3104   SetWatchPoint_3:
                    3105   ; }
                    3106   ; if(i == 8) {
00001E02  0C82 0000 3107          cmp.l     #8,D2
00001E06  0008      
00001E08  660E      3108          bne.s     SetWatchPoint_6
                    3109   ; printf("\r\nNo FREE Watch Points.....") ;
00001E0A  4879 0000 3110          pea       @m68kde~1_77.L
00001E0E  4D8C      
00001E10  4E92      3111          jsr       (A2)
00001E12  584F      3112          addq.w    #4,A7
                    3113   ; return ;
00001E14  6000 008C 3114          bra       SetWatchPoint_11
                    3115   SetWatchPoint_6:
                    3116   ; }
                    3117   ; printf("\r\nWatch Point Address: ") ;
00001E18  4879 0000 3118          pea       @m68kde~1_78.L
00001E1C  4DA8      
00001E1E  4E92      3119          jsr       (A2)
00001E20  584F      3120          addq.w    #4,A7
                    3121   ; WPAddress = Get8HexDigits(0) ;
00001E22  42A7      3122          clr.l     -(A7)
00001E24  4EB8 0CA4 3123          jsr       _Get8HexDigits
00001E28  584F      3124          addq.w    #4,A7
00001E2A  2600      3125          move.l    D0,D3
                    3126   ; // search for first free wp or existing same wp
                    3127   ; for(i = 0; i < 8; i++)  {
00001E2C  4282      3128          clr.l     D2
                    3129   SetWatchPoint_9:
00001E2E  0C82 0000 3130          cmp.l     #8,D2
00001E32  0008      
00001E34  6C00 006C 3131          bge       SetWatchPoint_11
                    3132   ; if(WatchPointAddress[i] == WPAddress && WPAddress != 0)   {     //so we can set a wp at 0
00001E38  2002      3133          move.l    D2,D0
00001E3A  E588      3134          lsl.l     #2,D0
00001E3C  41F9 0B00 3135          lea       _WatchPointAddress.L,A0
00001E40  0182      
00001E42  B6B0 0800 3136          cmp.l     0(A0,D0.L),D3
00001E46  6614      3137          bne.s     SetWatchPoint_12
00001E48  4A83      3138          tst.l     D3
00001E4A  6710      3139          beq.s     SetWatchPoint_12
                    3140   ; printf("\r\nError: Watch Point Already Set at Address : %08x\r\n", WPAddress) ;
00001E4C  2F03      3141          move.l    D3,-(A7)
00001E4E  4879 0000 3142          pea       @m68kde~1_79.L
00001E52  4DC0      
00001E54  4E92      3143          jsr       (A2)
00001E56  504F      3144          addq.w    #8,A7
                    3145   ; return ;
00001E58  6000 0048 3146          bra       SetWatchPoint_11
                    3147   SetWatchPoint_12:
                    3148   ; }
                    3149   ; if(WatchPointSetOrCleared[i] == 0) {
00001E5C  2002      3150          move.l    D2,D0
00001E5E  E588      3151          lsl.l     #2,D0
00001E60  2033 0800 3152          move.l    0(A3,D0.L),D0
00001E64  6600 0038 3153          bne       SetWatchPoint_14
                    3154   ; WatchPointSetOrCleared[i] = 1 ;                                 // mark this watchpoint as set
00001E68  2002      3155          move.l    D2,D0
00001E6A  E588      3156          lsl.l     #2,D0
00001E6C  27BC 0000 3157          move.l    #1,0(A3,D0.L)
00001E70  0001 0800 
                    3158   ; printf("\r\nWatch Point Set at Address: [$%08x]", WPAddress) ;
00001E74  2F03      3159          move.l    D3,-(A7)
00001E76  4879 0000 3160          pea       @m68kde~1_80.L
00001E7A  4DF6      
00001E7C  4E92      3161          jsr       (A2)
00001E7E  504F      3162          addq.w    #8,A7
                    3163   ; WatchPointAddress[i] = WPAddress ;                              // record the address of this watch point in the debugger
00001E80  2002      3164          move.l    D2,D0
00001E82  E588      3165          lsl.l     #2,D0
00001E84  41F9 0B00 3166          lea       _WatchPointAddress.L,A0
00001E88  0182      
00001E8A  2183 0800 3167          move.l    D3,0(A0,D0.L)
                    3168   ; printf("\r\n") ;
00001E8E  4879 0000 3169          pea       @m68kde~1_1.L
00001E92  45D6      
00001E94  4E92      3170          jsr       (A2)
00001E96  584F      3171          addq.w    #4,A7
                    3172   ; WatchPointDisplay() ;       // display the break points
00001E98  4EB8 1958 3173          jsr       _WatchPointDisplay
                    3174   ; return ;
00001E9C  6004      3175          bra.s     SetWatchPoint_11
                    3176   SetWatchPoint_14:
00001E9E  5282      3177          addq.l    #1,D2
00001EA0  608C      3178          bra       SetWatchPoint_9
                    3179   SetWatchPoint_11:
00001EA2  4CDF 0C0C 3180          movem.l   (A7)+,D2/D3/A2/A3
00001EA6  4E5E      3181          unlk      A6
00001EA8  4E75      3182          rts
                    3183   ; }
                    3184   ; }
                    3185   ; }
                    3186   ; void HandleBreakPoint(void)
                    3187   ; {
                    3188   _HandleBreakPoint:
00001EAA  4E56 FFFC 3189          link      A6,#-4
00001EAE  48E7 0038 3190          movem.l   A2/A3/A4,-(A7)
00001EB2  45F9 0B00 3191          lea       _i.L,A2
00001EB6  00C4      
00001EB8  47F9 0000 3192          lea       _printf.L,A3
00001EBC  3C12      
00001EBE  49F9 0B00 3193          lea       _PC.L,A4
00001EC2  0120      
                    3194   ; volatile unsigned short int *ProgramBreakPointAddress ;
                    3195   ; // now we have to put the break point back to run the instruction
                    3196   ; // PC will contain the address of the TRAP instruction but advanced by two bytes so lets play with that
                    3197   ; PC = PC - 2 ;  // ready for user to resume after reaching breakpoint
00001EC4  5594      3198          subq.l    #2,(A4)
                    3199   ; printf("\r\n\r\n\r\n\r\n@BREAKPOINT") ;
00001EC6  4879 0000 3200          pea       @m68kde~1_81.L
00001ECA  4E1C      
00001ECC  4E93      3201          jsr       (A3)
00001ECE  584F      3202          addq.w    #4,A7
                    3203   ; printf("\r\nSingle Step : [ON]") ;
00001ED0  4879 0000 3204          pea       @m68kde~1_82.L
00001ED4  4E30      
00001ED6  4E93      3205          jsr       (A3)
00001ED8  584F      3206          addq.w    #4,A7
                    3207   ; printf("\r\nBreakPoints : [Enabled]") ;
00001EDA  4879 0000 3208          pea       @m68kde~1_83.L
00001EDE  4E46      
00001EE0  4E93      3209          jsr       (A3)
00001EE2  584F      3210          addq.w    #4,A7
                    3211   ; // now clear the break point (put original instruction back)
                    3212   ; ProgramBreakPointAddress = PC ;
00001EE4  2D54 FFFC 3213          move.l    (A4),-4(A6)
                    3214   ; for(i = 0; i < 8; i ++) {
00001EE8  4292      3215          clr.l     (A2)
                    3216   HandleBreakPoint_1:
00001EEA  2012      3217          move.l    (A2),D0
00001EEC  0C80 0000 3218          cmp.l     #8,D0
00001EF0  0008      
00001EF2  6400 0056 3219          bhs       HandleBreakPoint_3
                    3220   ; if(BreakPointAddress[i] == PC) {        // if we have found the breakpoint
00001EF6  2012      3221          move.l    (A2),D0
00001EF8  E588      3222          lsl.l     #2,D0
00001EFA  41F9 0B00 3223          lea       _BreakPointAddress.L,A0
00001EFE  012E      
00001F00  2230 0800 3224          move.l    0(A0,D0.L),D1
00001F04  B294      3225          cmp.l     (A4),D1
00001F06  6600 003E 3226          bne       HandleBreakPoint_4
                    3227   ; BreakPointAddress[i] = 0 ;
00001F0A  2012      3228          move.l    (A2),D0
00001F0C  E588      3229          lsl.l     #2,D0
00001F0E  41F9 0B00 3230          lea       _BreakPointAddress.L,A0
00001F12  012E      
00001F14  42B0 0800 3231          clr.l     0(A0,D0.L)
                    3232   ; BreakPointSetOrCleared[i] = 0 ;
00001F18  2012      3233          move.l    (A2),D0
00001F1A  E588      3234          lsl.l     #2,D0
00001F1C  41F9 0B00 3235          lea       _BreakPointSetOrCleared.L,A0
00001F20  015E      
00001F22  42B0 0800 3236          clr.l     0(A0,D0.L)
                    3237   ; *ProgramBreakPointAddress = BreakPointInstruction[i] ;  // put original instruction back
00001F26  2012      3238          move.l    (A2),D0
00001F28  E388      3239          lsl.l     #1,D0
00001F2A  41F9 0B00 3240          lea       _BreakPointInstruction.L,A0
00001F2E  014E      
00001F30  226E FFFC 3241          move.l    -4(A6),A1
00001F34  32B0 0800 3242          move.w    0(A0,D0.L),(A1)
                    3243   ; BreakPointInstruction[i] = 0 ;
00001F38  2012      3244          move.l    (A2),D0
00001F3A  E388      3245          lsl.l     #1,D0
00001F3C  41F9 0B00 3246          lea       _BreakPointInstruction.L,A0
00001F40  014E      
00001F42  4270 0800 3247          clr.w     0(A0,D0.L)
                    3248   HandleBreakPoint_4:
00001F46  5292      3249          addq.l    #1,(A2)
00001F48  60A0      3250          bra       HandleBreakPoint_1
                    3251   HandleBreakPoint_3:
                    3252   ; }
                    3253   ; }
                    3254   ; DumpRegisters() ;
00001F4A  4EB8 10D6 3255          jsr       _DumpRegisters
                    3256   ; printf("\r\nPress <SPACE> to Execute Next Instruction");
00001F4E  4879 0000 3257          pea       @m68kde~1_45.L
00001F52  49C2      
00001F54  4E93      3258          jsr       (A3)
00001F56  584F      3259          addq.w    #4,A7
                    3260   ; printf("\r\nPress <ESC> to Resume User Program\r\n") ;
00001F58  4879 0000 3261          pea       @m68kde~1_84.L
00001F5C  4E60      
00001F5E  4E93      3262          jsr       (A3)
00001F60  584F      3263          addq.w    #4,A7
                    3264   ; menu() ;
00001F62  4EB9 0000 3265          jsr       _menu
00001F66  216E      
00001F68  4CDF 1C00 3266          movem.l   (A7)+,A2/A3/A4
00001F6C  4E5E      3267          unlk      A6
00001F6E  4E75      3268          rts
                    3269   ; }
                    3270   ; void UnknownCommand()
                    3271   ; {
                    3272   _UnknownCommand:
                    3273   ; printf("\r\nUnknown Command.....\r\n") ;
00001F70  4879 0000 3274          pea       @m68kde~1_85.L
00001F74  4E88      
00001F76  4EB9 0000 3275          jsr       _printf
00001F7A  3C12      
00001F7C  584F      3276          addq.w    #4,A7
                    3277   ; Help() ;
00001F7E  4EB9 0000 3278          jsr       _Help
00001F82  2094      
00001F84  4E75      3279          rts
                    3280   ; }
                    3281   ; // system when the users program executes a TRAP #15 instruction to halt program and return to debug monitor
                    3282   ; void CallDebugMonitor(void)
                    3283   ; {
                    3284   _CallDebugMonitor:
                    3285   ; printf("\r\nProgram Ended (TRAP #15)....") ;
00001F86  4879 0000 3286          pea       @m68kde~1_86.L
00001F8A  4EA2      
00001F8C  4EB9 0000 3287          jsr       _printf
00001F90  3C12      
00001F92  584F      3288          addq.w    #4,A7
                    3289   ; menu();
00001F94  4EB9 0000 3290          jsr       _menu
00001F98  216E      
00001F9A  4E75      3291          rts
                    3292   ; }
                    3293   ; void Breakpoint(void)
                    3294   ; {
                    3295   _Breakpoint:
00001F9C  2F02      3296          move.l    D2,-(A7)
                    3297   ; char c;
                    3298   ; c = toupper(_getch());
00001F9E  2F00      3299          move.l    D0,-(A7)
00001FA0  4EB8 0B68 3300          jsr       __getch
00001FA4  2200      3301          move.l    D0,D1
00001FA6  201F      3302          move.l    (A7)+,D0
00001FA8  2F01      3303          move.l    D1,-(A7)
00001FAA  4EB9 0000 3304          jsr       _toupper
00001FAE  3350      
00001FB0  584F      3305          addq.w    #4,A7
00001FB2  1400      3306          move.b    D0,D2
                    3307   ; if( c == (char)('D'))                                      // BreakPoint Display
00001FB4  0C02 0044 3308          cmp.b     #68,D2
00001FB8  6608      3309          bne.s     Breakpoint_1
                    3310   ; BreakPointDisplay() ;
00001FBA  4EB8 1884 3311          jsr       _BreakPointDisplay
00001FBE  6000 0054 3312          bra       Breakpoint_10
                    3313   Breakpoint_1:
                    3314   ; else if(c == (char)('K')) {                                 // breakpoint Kill
00001FC2  0C02 004B 3315          cmp.b     #75,D2
00001FC6  6630      3316          bne.s     Breakpoint_3
                    3317   ; printf("\r\nKill All Break Points...(y/n)?") ;
00001FC8  4879 0000 3318          pea       @m68kde~1_87.L
00001FCC  4EC2      
00001FCE  4EB9 0000 3319          jsr       _printf
00001FD2  3C12      
00001FD4  584F      3320          addq.w    #4,A7
                    3321   ; c = toupper(_getch());
00001FD6  2F00      3322          move.l    D0,-(A7)
00001FD8  4EB8 0B68 3323          jsr       __getch
00001FDC  2200      3324          move.l    D0,D1
00001FDE  201F      3325          move.l    (A7)+,D0
00001FE0  2F01      3326          move.l    D1,-(A7)
00001FE2  4EB9 0000 3327          jsr       _toupper
00001FE6  3350      
00001FE8  584F      3328          addq.w    #4,A7
00001FEA  1400      3329          move.b    D0,D2
                    3330   ; if(c == (char)('Y'))
00001FEC  0C02 0059 3331          cmp.b     #89,D2
00001FF0  6604      3332          bne.s     Breakpoint_5
                    3333   ; KillAllBreakPoints() ;
00001FF2  4EB8 1C1C 3334          jsr       _KillAllBreakPoints
                    3335   Breakpoint_5:
00001FF6  601C      3336          bra.s     Breakpoint_10
                    3337   Breakpoint_3:
                    3338   ; }
                    3339   ; else if(c == (char)('S')) {
00001FF8  0C02 0053 3340          cmp.b     #83,D2
00001FFC  6606      3341          bne.s     Breakpoint_7
                    3342   ; SetBreakPoint() ;
00001FFE  4EB8 1CB4 3343          jsr       _SetBreakPoint
00002002  6010      3344          bra.s     Breakpoint_10
                    3345   Breakpoint_7:
                    3346   ; }
                    3347   ; else if(c == (char)('C')) {
00002004  0C02 0043 3348          cmp.b     #67,D2
00002008  6606      3349          bne.s     Breakpoint_9
                    3350   ; BreakPointClear() ;
0000200A  4EB8 1A04 3351          jsr       _BreakPointClear
0000200E  6004      3352          bra.s     Breakpoint_10
                    3353   Breakpoint_9:
                    3354   ; }
                    3355   ; else
                    3356   ; UnknownCommand() ;
00002010  4EB8 1F70 3357          jsr       _UnknownCommand
                    3358   Breakpoint_10:
00002014  241F      3359          move.l    (A7)+,D2
00002016  4E75      3360          rts
                    3361   ; }
                    3362   ; void Watchpoint(void)
                    3363   ; {
                    3364   _Watchpoint:
00002018  2F02      3365          move.l    D2,-(A7)
                    3366   ; char c;
                    3367   ; c = toupper(_getch());
0000201A  2F00      3368          move.l    D0,-(A7)
0000201C  4EB8 0B68 3369          jsr       __getch
00002020  2200      3370          move.l    D0,D1
00002022  201F      3371          move.l    (A7)+,D0
00002024  2F01      3372          move.l    D1,-(A7)
00002026  4EB9 0000 3373          jsr       _toupper
0000202A  3350      
0000202C  584F      3374          addq.w    #4,A7
0000202E  1400      3375          move.b    D0,D2
                    3376   ; if( c == (char)('D'))                                      // WatchPoint Display
00002030  0C02 0044 3377          cmp.b     #68,D2
00002034  6608      3378          bne.s     Watchpoint_1
                    3379   ; WatchPointDisplay() ;
00002036  4EB8 1958 3380          jsr       _WatchPointDisplay
0000203A  6000 0054 3381          bra       Watchpoint_10
                    3382   Watchpoint_1:
                    3383   ; else if(c == (char)('K')) {                                 // wtahcpoint Kill
0000203E  0C02 004B 3384          cmp.b     #75,D2
00002042  6630      3385          bne.s     Watchpoint_3
                    3386   ; printf("\r\nKill All Watch Points...(y/n)?") ;
00002044  4879 0000 3387          pea       @m68kde~1_88.L
00002048  4EE4      
0000204A  4EB9 0000 3388          jsr       _printf
0000204E  3C12      
00002050  584F      3389          addq.w    #4,A7
                    3390   ; c = toupper(_getch());
00002052  2F00      3391          move.l    D0,-(A7)
00002054  4EB8 0B68 3392          jsr       __getch
00002058  2200      3393          move.l    D0,D1
0000205A  201F      3394          move.l    (A7)+,D0
0000205C  2F01      3395          move.l    D1,-(A7)
0000205E  4EB9 0000 3396          jsr       _toupper
00002062  3350      
00002064  584F      3397          addq.w    #4,A7
00002066  1400      3398          move.b    D0,D2
                    3399   ; if(c == (char)('Y'))
00002068  0C02 0059 3400          cmp.b     #89,D2
0000206C  6604      3401          bne.s     Watchpoint_5
                    3402   ; KillAllWatchPoints() ;
0000206E  4EB8 1C84 3403          jsr       _KillAllWatchPoints
                    3404   Watchpoint_5:
00002072  601C      3405          bra.s     Watchpoint_10
                    3406   Watchpoint_3:
                    3407   ; }
                    3408   ; else if(c == (char)('S')) {
00002074  0C02 0053 3409          cmp.b     #83,D2
00002078  6606      3410          bne.s     Watchpoint_7
                    3411   ; SetWatchPoint() ;
0000207A  4EB8 1DD4 3412          jsr       _SetWatchPoint
0000207E  6010      3413          bra.s     Watchpoint_10
                    3414   Watchpoint_7:
                    3415   ; }
                    3416   ; else if(c == (char)('C')) {
00002080  0C02 0043 3417          cmp.b     #67,D2
00002084  6606      3418          bne.s     Watchpoint_9
                    3419   ; WatchPointClear() ;
00002086  4EB8 1ADE 3420          jsr       _WatchPointClear
0000208A  6004      3421          bra.s     Watchpoint_10
                    3422   Watchpoint_9:
                    3423   ; }
                    3424   ; else
                    3425   ; UnknownCommand() ;
0000208C  4EB8 1F70 3426          jsr       _UnknownCommand
                    3427   Watchpoint_10:
00002090  241F      3428          move.l    (A7)+,D2
00002092  4E75      3429          rts
                    3430   ; }
                    3431   ; void Help(void)
                    3432   ; {
                    3433   _Help:
00002094  48E7 2020 3434          movem.l   D2/A2,-(A7)
00002098  45F9 0000 3435          lea       _printf.L,A2
0000209C  3C12      
                    3436   ; char *banner = "\r\n----------------------------------------------------------------" ;
0000209E  41F9 0000 3437          lea       @m68kde~1_89.L,A0
000020A2  4F06      
000020A4  2408      3438          move.l    A0,D2
                    3439   ; printf(banner) ;
000020A6  2F02      3440          move.l    D2,-(A7)
000020A8  4E92      3441          jsr       (A2)
000020AA  584F      3442          addq.w    #4,A7
                    3443   ; printf("\r\n  Debugger Command Summary") ;
000020AC  4879 0000 3444          pea       @m68kde~1_90.L
000020B0  4F4A      
000020B2  4E92      3445          jsr       (A2)
000020B4  584F      3446          addq.w    #4,A7
                    3447   ; printf(banner) ;
000020B6  2F02      3448          move.l    D2,-(A7)
000020B8  4E92      3449          jsr       (A2)
000020BA  584F      3450          addq.w    #4,A7
                    3451   ; printf("\r\n  .(reg)       - Change Registers: e.g A0-A7,D0-D7,PC,SSP,USP,SR");
000020BC  4879 0000 3452          pea       @m68kde~1_91.L
000020C0  4F68      
000020C2  4E92      3453          jsr       (A2)
000020C4  584F      3454          addq.w    #4,A7
                    3455   ; printf("\r\n  BD/BS/BC/BK  - Break Point: Display/Set/Clear/Kill") ;
000020C6  4879 0000 3456          pea       @m68kde~1_92.L
000020CA  4FAC      
000020CC  4E92      3457          jsr       (A2)
000020CE  584F      3458          addq.w    #4,A7
                    3459   ; printf("\r\n  C            - Copy Program from Flash to Main Memory") ;
000020D0  4879 0000 3460          pea       @m68kde~1_93.L
000020D4  4FE4      
000020D6  4E92      3461          jsr       (A2)
000020D8  584F      3462          addq.w    #4,A7
                    3463   ; printf("\r\n  D            - Dump Memory Contents to Screen") ;
000020DA  4879 0000 3464          pea       @m68kde~1_94.L
000020DE  501E      
000020E0  4E92      3465          jsr       (A2)
000020E2  584F      3466          addq.w    #4,A7
                    3467   ; printf("\r\n  E            - Enter String into Memory") ;
000020E4  4879 0000 3468          pea       @m68kde~1_95.L
000020E8  5050      
000020EA  4E92      3469          jsr       (A2)
000020EC  584F      3470          addq.w    #4,A7
                    3471   ; printf("\r\n  F            - Fill Memory with Data") ;
000020EE  4879 0000 3472          pea       @m68kde~1_96.L
000020F2  507C      
000020F4  4E92      3473          jsr       (A2)
000020F6  584F      3474          addq.w    #4,A7
                    3475   ; printf("\r\n  G            - Go Program Starting at Address: $%08X", PC) ;
000020F8  2F39 0B00 3476          move.l    _PC.L,-(A7)
000020FC  0120      
000020FE  4879 0000 3477          pea       @m68kde~1_97.L
00002102  50A6      
00002104  4E92      3478          jsr       (A2)
00002106  504F      3479          addq.w    #8,A7
                    3480   ; printf("\r\n  L            - Load Program (.HEX file) from Laptop") ;
00002108  4879 0000 3481          pea       @m68kde~1_98.L
0000210C  50E0      
0000210E  4E92      3482          jsr       (A2)
00002110  584F      3483          addq.w    #4,A7
                    3484   ; printf("\r\n  M            - Memory Examine and Change");
00002112  4879 0000 3485          pea       @m68kde~1_99.L
00002116  5118      
00002118  4E92      3486          jsr       (A2)
0000211A  584F      3487          addq.w    #4,A7
                    3488   ; printf("\r\n  P            - Program Flash Memory with User Program") ;
0000211C  4879 0000 3489          pea       @m68kde~1_100.L
00002120  5146      
00002122  4E92      3490          jsr       (A2)
00002124  584F      3491          addq.w    #4,A7
                    3492   ; printf("\r\n  R            - Display 68000 Registers") ;
00002126  4879 0000 3493          pea       @m68kde~1_101.L
0000212A  5180      
0000212C  4E92      3494          jsr       (A2)
0000212E  584F      3495          addq.w    #4,A7
                    3496   ; printf("\r\n  S            - Toggle ON/OFF Single Step Mode") ;
00002130  4879 0000 3497          pea       @m68kde~1_102.L
00002134  51AC      
00002136  4E92      3498          jsr       (A2)
00002138  584F      3499          addq.w    #4,A7
                    3500   ; printf("\r\n  TM           - Test Memory") ;
0000213A  4879 0000 3501          pea       @m68kde~1_103.L
0000213E  51DE      
00002140  4E92      3502          jsr       (A2)
00002142  584F      3503          addq.w    #4,A7
                    3504   ; printf("\r\n  TS           - Test Switches: SW7-0") ;
00002144  4879 0000 3505          pea       @m68kde~1_104.L
00002148  51FE      
0000214A  4E92      3506          jsr       (A2)
0000214C  584F      3507          addq.w    #4,A7
                    3508   ; printf("\r\n  TD           - Test Displays: LEDs and 7-Segment") ;
0000214E  4879 0000 3509          pea       @m68kde~1_105.L
00002152  5226      
00002154  4E92      3510          jsr       (A2)
00002156  584F      3511          addq.w    #4,A7
                    3512   ; printf("\r\n  WD/WS/WC/WK  - Watch Point: Display/Set/Clear/Kill") ;
00002158  4879 0000 3513          pea       @m68kde~1_106.L
0000215C  525C      
0000215E  4E92      3514          jsr       (A2)
00002160  584F      3515          addq.w    #4,A7
                    3516   ; printf(banner) ;
00002162  2F02      3517          move.l    D2,-(A7)
00002164  4E92      3518          jsr       (A2)
00002166  584F      3519          addq.w    #4,A7
00002168  4CDF 0404 3520          movem.l   (A7)+,D2/A2
0000216C  4E75      3521          rts
                    3522   ; }
                    3523   ; void menu(void)
                    3524   ; {
                    3525   _menu:
0000216E  48E7 303C 3526          movem.l   D2/D3/A2/A3/A4/A5,-(A7)
00002172  45F9 0000 3527          lea       _printf.L,A2
00002176  3C12      
00002178  47F9 0B00 3528          lea       _Trace.L,A3
0000217C  00D8      
0000217E  49F9 0B00 3529          lea       _x.L,A4
00002182  00C8      
00002184  4BF9 0B00 3530          lea       _SR.L,A5
00002188  012C      
                    3531   ; char c,c1 ;
                    3532   ; while(1)    {
                    3533   menu_1:
                    3534   ; FlushKeyboard() ;               // dump unread characters from keyboard
0000218A  4EB8 0BA6 3535          jsr       _FlushKeyboard
                    3536   ; printf("\r\n#") ;
0000218E  4879 0000 3537          pea       @m68kde~1_107.L
00002192  5294      
00002194  4E92      3538          jsr       (A2)
00002196  584F      3539          addq.w    #4,A7
                    3540   ; c = toupper(_getch());
00002198  2F00      3541          move.l    D0,-(A7)
0000219A  4EB8 0B68 3542          jsr       __getch
0000219E  2200      3543          move.l    D0,D1
000021A0  201F      3544          move.l    (A7)+,D0
000021A2  2F01      3545          move.l    D1,-(A7)
000021A4  4EB9 0000 3546          jsr       _toupper
000021A8  3350      
000021AA  584F      3547          addq.w    #4,A7
000021AC  1400      3548          move.b    D0,D2
                    3549   ; if( c == (char)('L'))                  // load s record file
000021AE  0C02 004C 3550          cmp.b     #76,D2
000021B2  6608      3551          bne.s     menu_4
                    3552   ; Load_SRecordFile() ;
000021B4  4EB8 0E36 3553          jsr       _Load_SRecordFile
000021B8  6000 021E 3554          bra       menu_46
                    3555   menu_4:
                    3556   ; else if( c == (char)('D'))             // dump memory
000021BC  0C02 0044 3557          cmp.b     #68,D2
000021C0  6608      3558          bne.s     menu_6
                    3559   ; DumpMemory() ;
000021C2  4EB8 0CCC 3560          jsr       _DumpMemory
000021C6  6000 0210 3561          bra       menu_46
                    3562   menu_6:
                    3563   ; else if( c == (char)('E'))             // Enter String into memory
000021CA  0C02 0045 3564          cmp.b     #69,D2
000021CE  660A      3565          bne.s     menu_8
                    3566   ; EnterString() ;
000021D0  4EB9 0000 3567          jsr       _EnterString
000021D4  2520      
000021D6  6000 0200 3568          bra       menu_46
                    3569   menu_8:
                    3570   ; else if( c == (char)('F'))             // fill memory
000021DA  0C02 0046 3571          cmp.b     #70,D2
000021DE  6608      3572          bne.s     menu_10
                    3573   ; FillMemory() ;
000021E0  4EB8 0DBC 3574          jsr       _FillMemory
000021E4  6000 01F2 3575          bra       menu_46
                    3576   menu_10:
                    3577   ; else if( c == (char)('G'))  {           // go user program
000021E8  0C02 0047 3578          cmp.b     #71,D2
000021EC  6626      3579          bne.s     menu_12
                    3580   ; printf("\r\nProgram Running.....") ;
000021EE  4879 0000 3581          pea       @m68kde~1_108.L
000021F2  5298      
000021F4  4E92      3582          jsr       (A2)
000021F6  584F      3583          addq.w    #4,A7
                    3584   ; printf("\r\nPress <RESET> button <Key0> on DE1 to stop") ;
000021F8  4879 0000 3585          pea       @m68kde~1_109.L
000021FC  52B0      
000021FE  4E92      3586          jsr       (A2)
00002200  584F      3587          addq.w    #4,A7
                    3588   ; GoFlag = 1 ;
00002202  23FC 0000 3589          move.l    #1,_GoFlag.L
00002206  0001 0B00 
0000220A  00DC      
                    3590   ; go() ;
0000220C  4EB8 08B8 3591          jsr       _go
00002210  6000 01C6 3592          bra       menu_46
                    3593   menu_12:
                    3594   ; }
                    3595   ; else if( c == (char)('M'))           // memory examine and modify
00002214  0C02 004D 3596          cmp.b     #77,D2
00002218  6608      3597          bne.s     menu_14
                    3598   ; MemoryChange() ;
0000221A  4EB8 0FC4 3599          jsr       _MemoryChange
0000221E  6000 01B8 3600          bra       menu_46
                    3601   menu_14:
                    3602   ; else if( c == (char)('P'))            // Program Flash Chip
00002222  0C02 0050 3603          cmp.b     #80,D2
00002226  6608      3604          bne.s     menu_16
                    3605   ; ProgramFlashChip() ;
00002228  4EB8 10C4 3606          jsr       _ProgramFlashChip
0000222C  6000 01AA 3607          bra       menu_46
                    3608   menu_16:
                    3609   ; else if( c == (char)('C'))             // copy flash chip to ram and go
00002230  0C02 0043 3610          cmp.b     #67,D2
00002234  6608      3611          bne.s     menu_18
                    3612   ; LoadFromFlashChip();
00002236  4EB8 10C6 3613          jsr       _LoadFromFlashChip
0000223A  6000 019C 3614          bra       menu_46
                    3615   menu_18:
                    3616   ; else if( c == (char)('R'))             // dump registers
0000223E  0C02 0052 3617          cmp.b     #82,D2
00002242  6608      3618          bne.s     menu_20
                    3619   ; DumpRegisters() ;
00002244  4EB8 10D6 3620          jsr       _DumpRegisters
00002248  6000 018E 3621          bra       menu_46
                    3622   menu_20:
                    3623   ; else if( c == (char)('.'))           // change registers
0000224C  0C02 002E 3624          cmp.b     #46,D2
00002250  6608      3625          bne.s     menu_22
                    3626   ; ChangeRegisters() ;
00002252  4EB8 15C8 3627          jsr       _ChangeRegisters
00002256  6000 0180 3628          bra       menu_46
                    3629   menu_22:
                    3630   ; else if( c == (char)('B'))              // breakpoint command
0000225A  0C02 0042 3631          cmp.b     #66,D2
0000225E  6608      3632          bne.s     menu_24
                    3633   ; Breakpoint() ;
00002260  4EB8 1F9C 3634          jsr       _Breakpoint
00002264  6000 0172 3635          bra       menu_46
                    3636   menu_24:
                    3637   ; else if( c == (char)('T'))  {          // Test command
00002268  0C02 0054 3638          cmp.b     #84,D2
0000226C  6600 0046 3639          bne       menu_26
                    3640   ; c1 = toupper(_getch()) ;
00002270  2F00      3641          move.l    D0,-(A7)
00002272  4EB8 0B68 3642          jsr       __getch
00002276  2200      3643          move.l    D0,D1
00002278  201F      3644          move.l    (A7)+,D0
0000227A  2F01      3645          move.l    D1,-(A7)
0000227C  4EB9 0000 3646          jsr       _toupper
00002280  3350      
00002282  584F      3647          addq.w    #4,A7
00002284  1600      3648          move.b    D0,D3
                    3649   ; if(c1 == (char)('M'))                    // memory test
00002286  0C03 004D 3650          cmp.b     #77,D3
0000228A  6608      3651          bne.s     menu_28
                    3652   ; MemoryTest() ;
0000228C  4EB9 0000 3653          jsr       _MemoryTest
00002290  2A48      
00002292  601C      3654          bra.s     menu_33
                    3655   menu_28:
                    3656   ; else if( c1 == (char)('S'))              // Switch Test command
00002294  0C03 0053 3657          cmp.b     #83,D3
00002298  6606      3658          bne.s     menu_30
                    3659   ; SwitchTest() ;
0000229A  4EB8 0AA4 3660          jsr       _SwitchTest
0000229E  6010      3661          bra.s     menu_33
                    3662   menu_30:
                    3663   ; else if( c1 == (char)('D'))              // display Test command
000022A0  0C03 0044 3664          cmp.b     #68,D3
000022A4  6606      3665          bne.s     menu_32
                    3666   ; TestLEDS() ;
000022A6  4EB8 0A50 3667          jsr       _TestLEDS
000022AA  6004      3668          bra.s     menu_33
                    3669   menu_32:
                    3670   ; else
                    3671   ; UnknownCommand() ;
000022AC  4EB8 1F70 3672          jsr       _UnknownCommand
                    3673   menu_33:
000022B0  6000 0126 3674          bra       menu_46
                    3675   menu_26:
                    3676   ; }
                    3677   ; else if( c == (char)(' ')) {             // Next instruction command
000022B4  0C02 0020 3678          cmp.b     #32,D2
000022B8  6636      3679          bne.s     menu_34
                    3680   ; DisableBreakPoints() ;
000022BA  4EB8 1B80 3681          jsr       _DisableBreakPoints
                    3682   ; if(Trace == 1 && GoFlag == 1)   {    // if the program is running and trace mode on then 'N' is valid
000022BE  2013      3683          move.l    (A3),D0
000022C0  0C80 0000 3684          cmp.l     #1,D0
000022C4  0001      
000022C6  661A      3685          bne.s     menu_36
000022C8  2039 0B00 3686          move.l    _GoFlag.L,D0
000022CC  00DC      
000022CE  0C80 0000 3687          cmp.l     #1,D0
000022D2  0001      
000022D4  660C      3688          bne.s     menu_36
                    3689   ; TraceException = 1 ;             // generate a trace exception for the next instruction if user wants to single step though next instruction
000022D6  13FC 0001 3690          move.b    #1,4194314
000022DA  0040 000A 
                    3691   ; return ;
000022DE  6000 00FC 3692          bra       menu_38
                    3693   menu_36:
                    3694   ; }
                    3695   ; else
                    3696   ; printf("\r\nError: Press 'G' first to start program") ;
000022E2  4879 0000 3697          pea       @m68kde~1_110.L
000022E6  52DE      
000022E8  4E92      3698          jsr       (A2)
000022EA  584F      3699          addq.w    #4,A7
000022EC  6000 00EA 3700          bra       menu_46
                    3701   menu_34:
                    3702   ; }
                    3703   ; else if( c == (char)('S')) {             // single step
000022F0  0C02 0053 3704          cmp.b     #83,D2
000022F4  6600 008C 3705          bne       menu_39
                    3706   ; if(Trace == 0) {
000022F8  2013      3707          move.l    (A3),D0
000022FA  6600 0050 3708          bne       menu_41
                    3709   ; DisableBreakPoints() ;
000022FE  4EB8 1B80 3710          jsr       _DisableBreakPoints
                    3711   ; printf("\r\nSingle Step  :[ON]") ;
00002302  4879 0000 3712          pea       @m68kde~1_111.L
00002306  5308      
00002308  4E92      3713          jsr       (A2)
0000230A  584F      3714          addq.w    #4,A7
                    3715   ; printf("\r\nBreak Points :[Disabled]") ;
0000230C  4879 0000 3716          pea       @m68kde~1_44.L
00002310  49A6      
00002312  4E92      3717          jsr       (A2)
00002314  584F      3718          addq.w    #4,A7
                    3719   ; SR = SR | (unsigned short int)(0x8000) ;    // set T bit in status register
00002316  0055 8000 3720          or.w      #32768,(A5)
                    3721   ; printf("\r\nPress 'G' to Trace Program from address $%08x.....",PC) ;
0000231A  2F39 0B00 3722          move.l    _PC.L,-(A7)
0000231E  0120      
00002320  4879 0000 3723          pea       @m68kde~1_112.L
00002324  531E      
00002326  4E92      3724          jsr       (A2)
00002328  504F      3725          addq.w    #8,A7
                    3726   ; printf("\r\nPush <RESET Button> to Stop.....") ;
0000232A  4879 0000 3727          pea       @m68kde~1_113.L
0000232E  5354      
00002330  4E92      3728          jsr       (A2)
00002332  584F      3729          addq.w    #4,A7
                    3730   ; DumpRegisters() ;
00002334  4EB8 10D6 3731          jsr       _DumpRegisters
                    3732   ; Trace = 1;
00002338  26BC 0000 3733          move.l    #1,(A3)
0000233C  0001      
                    3734   ; TraceException = 1;
0000233E  13FC 0001 3735          move.b    #1,4194314
00002342  0040 000A 
                    3736   ; x = *(unsigned int *)(0x00000074) ;       // simulate responding to a Level 5 IRQ by reading vector to reset Trace exception generator
00002346  28B8 0074 3737          move.l    116,(A4)
0000234A  6032      3738          bra.s     menu_42
                    3739   menu_41:
                    3740   ; }
                    3741   ; else {
                    3742   ; Trace = 0 ;
0000234C  4293      3743          clr.l     (A3)
                    3744   ; TraceException = 0 ;
0000234E  4239 0040 3745          clr.b     4194314
00002352  000A      
                    3746   ; x = *(unsigned int *)(0x00000074) ;       // simulate responding to a Level 5 IRQ by reading vector to reset Trace exception generator
00002354  28B8 0074 3747          move.l    116,(A4)
                    3748   ; EnableBreakPoints() ;
00002358  4EB8 1BD4 3749          jsr       _EnableBreakPoints
                    3750   ; SR = SR & (unsigned short int)(0x7FFF) ;    // clear T bit in status register
0000235C  0255 7FFF 3751          and.w     #32767,(A5)
                    3752   ; printf("\r\nSingle Step : [OFF]") ;
00002360  4879 0000 3753          pea       @m68kde~1_114.L
00002364  5378      
00002366  4E92      3754          jsr       (A2)
00002368  584F      3755          addq.w    #4,A7
                    3756   ; printf("\r\nBreak Points :[Enabled]") ;
0000236A  4879 0000 3757          pea       @m68kde~1_115.L
0000236E  538E      
00002370  4E92      3758          jsr       (A2)
00002372  584F      3759          addq.w    #4,A7
                    3760   ; printf("\r\nPress <ESC> to Resume User Program.....") ;
00002374  4879 0000 3761          pea       @m68kde~1_116.L
00002378  53A8      
0000237A  4E92      3762          jsr       (A2)
0000237C  584F      3763          addq.w    #4,A7
                    3764   menu_42:
0000237E  6000 0058 3765          bra       menu_46
                    3766   menu_39:
                    3767   ; }
                    3768   ; }
                    3769   ; else if(c == (char)(0x1b))  {   // if user choses to end trace and run program
00002382  0C02 001B 3770          cmp.b     #27,D2
00002386  6600 0040 3771          bne       menu_43
                    3772   ; Trace = 0;
0000238A  4293      3773          clr.l     (A3)
                    3774   ; TraceException = 0;
0000238C  4239 0040 3775          clr.b     4194314
00002390  000A      
                    3776   ; x = *(unsigned int *)(0x00000074) ;   // read IRQ 5 vector to reset trace vector generator
00002392  28B8 0074 3777          move.l    116,(A4)
                    3778   ; EnableBreakPoints() ;
00002396  4EB8 1BD4 3779          jsr       _EnableBreakPoints
                    3780   ; SR = SR & (unsigned short int)(0x7FFF) ;    // clear T bit in status register
0000239A  0255 7FFF 3781          and.w     #32767,(A5)
                    3782   ; printf("\r\nSingle Step  :[OFF]") ;
0000239E  4879 0000 3783          pea       @m68kde~1_117.L
000023A2  53D2      
000023A4  4E92      3784          jsr       (A2)
000023A6  584F      3785          addq.w    #4,A7
                    3786   ; printf("\r\nBreak Points :[Enabled]");
000023A8  4879 0000 3787          pea       @m68kde~1_115.L
000023AC  538E      
000023AE  4E92      3788          jsr       (A2)
000023B0  584F      3789          addq.w    #4,A7
                    3790   ; printf("\r\nProgram Running.....") ;
000023B2  4879 0000 3791          pea       @m68kde~1_108.L
000023B6  5298      
000023B8  4E92      3792          jsr       (A2)
000023BA  584F      3793          addq.w    #4,A7
                    3794   ; printf("\r\nPress <RESET> button <Key0> on DE1 to stop") ;
000023BC  4879 0000 3795          pea       @m68kde~1_109.L
000023C0  52B0      
000023C2  4E92      3796          jsr       (A2)
000023C4  584F      3797          addq.w    #4,A7
                    3798   ; return ;
000023C6  6014      3799          bra.s     menu_38
                    3800   menu_43:
                    3801   ; }
                    3802   ; else if( c == (char)('W'))              // Watchpoint command
000023C8  0C02 0057 3803          cmp.b     #87,D2
000023CC  6606      3804          bne.s     menu_45
                    3805   ; Watchpoint() ;
000023CE  4EB8 2018 3806          jsr       _Watchpoint
000023D2  6004      3807          bra.s     menu_46
                    3808   menu_45:
                    3809   ; else
                    3810   ; UnknownCommand() ;
000023D4  4EB8 1F70 3811          jsr       _UnknownCommand
                    3812   menu_46:
000023D8  6000 FDB0 3813          bra       menu_1
                    3814   menu_38:
000023DC  4CDF 3C0C 3815          movem.l   (A7)+,D2/D3/A2/A3/A4/A5
000023E0  4E75      3816          rts
                    3817   ; }
                    3818   ; }
                    3819   ; void PrintErrorMessageandAbort(char *string) {
                    3820   _PrintErrorMessageandAbort:
000023E2  4E56 0000 3821          link      A6,#0
                    3822   ; printf("\r\n\r\nProgram ABORT !!!!!!\r\n") ;
000023E6  4879 0000 3823          pea       @m68kde~1_118.L
000023EA  53E8      
000023EC  4EB9 0000 3824          jsr       _printf
000023F0  3C12      
000023F2  584F      3825          addq.w    #4,A7
                    3826   ; printf("%s\r\n", string) ;
000023F4  2F2E 0008 3827          move.l    8(A6),-(A7)
000023F8  4879 0000 3828          pea       @m68kde~1_119.L
000023FC  5404      
000023FE  4EB9 0000 3829          jsr       _printf
00002402  3C12      
00002404  504F      3830          addq.w    #8,A7
                    3831   ; menu() ;
00002406  4EB8 216E 3832          jsr       _menu
0000240A  4E5E      3833          unlk      A6
0000240C  4E75      3834          rts
                    3835   ; }
                    3836   ; void IRQMessage(int level) {
                    3837   _IRQMessage:
0000240E  4E56 0000 3838          link      A6,#0
                    3839   ; printf("\r\n\r\nProgram ABORT !!!!!");
00002412  4879 0000 3840          pea       @m68kde~1_120.L
00002416  540A      
00002418  4EB9 0000 3841          jsr       _printf
0000241C  3C12      
0000241E  584F      3842          addq.w    #4,A7
                    3843   ; printf("\r\nUnhandled Interrupt: IRQ%d !!!!!", level) ;
00002420  2F2E 0008 3844          move.l    8(A6),-(A7)
00002424  4879 0000 3845          pea       @m68kde~1_121.L
00002428  5422      
0000242A  4EB9 0000 3846          jsr       _printf
0000242E  3C12      
00002430  504F      3847          addq.w    #8,A7
                    3848   ; menu() ;
00002432  4EB8 216E 3849          jsr       _menu
00002436  4E5E      3850          unlk      A6
00002438  4E75      3851          rts
                    3852   ; }
                    3853   ; void UnhandledIRQ1(void) {
                    3854   _UnhandledIRQ1:
                    3855   ; IRQMessage(1);
0000243A  4878 0001 3856          pea       1
0000243E  4EB8 240E 3857          jsr       _IRQMessage
00002442  584F      3858          addq.w    #4,A7
00002444  4E75      3859          rts
                    3860   ; }
                    3861   ; void UnhandledIRQ2(void) {
                    3862   _UnhandledIRQ2:
                    3863   ; IRQMessage(2);
00002446  4878 0002 3864          pea       2
0000244A  4EB8 240E 3865          jsr       _IRQMessage
0000244E  584F      3866          addq.w    #4,A7
00002450  4E75      3867          rts
                    3868   ; }
                    3869   ; void UnhandledIRQ3(void){
                    3870   _UnhandledIRQ3:
                    3871   ; IRQMessage(3);
00002452  4878 0003 3872          pea       3
00002456  4EB8 240E 3873          jsr       _IRQMessage
0000245A  584F      3874          addq.w    #4,A7
0000245C  4E75      3875          rts
                    3876   ; }
                    3877   ; void UnhandledIRQ4(void) {
                    3878   _UnhandledIRQ4:
                    3879   ; IRQMessage(4);
0000245E  4878 0004 3880          pea       4
00002462  4EB8 240E 3881          jsr       _IRQMessage
00002466  584F      3882          addq.w    #4,A7
00002468  4E75      3883          rts
                    3884   ; }
                    3885   ; void UnhandledIRQ5(void) {
                    3886   _UnhandledIRQ5:
                    3887   ; IRQMessage(5);
0000246A  4878 0005 3888          pea       5
0000246E  4EB8 240E 3889          jsr       _IRQMessage
00002472  584F      3890          addq.w    #4,A7
00002474  4E75      3891          rts
                    3892   ; }
                    3893   ; void UnhandledIRQ6(void) {
                    3894   _UnhandledIRQ6:
                    3895   ; PrintErrorMessageandAbort("ADDRESS ERROR: 16 or 32 Bit Transfer to/from an ODD Address....") ;
00002476  4879 0000 3896          pea       @m68kde~1_122.L
0000247A  5446      
0000247C  4EB8 23E2 3897          jsr       _PrintErrorMessageandAbort
00002480  584F      3898          addq.w    #4,A7
                    3899   ; menu() ;
00002482  4EB8 216E 3900          jsr       _menu
00002486  4E75      3901          rts
                    3902   ; }
                    3903   ; void UnhandledIRQ7(void) {
                    3904   _UnhandledIRQ7:
                    3905   ; IRQMessage(7);
00002488  4878 0007 3906          pea       7
0000248C  4EB8 240E 3907          jsr       _IRQMessage
00002490  584F      3908          addq.w    #4,A7
00002492  4E75      3909          rts
                    3910   ; }
                    3911   ; void UnhandledTrap(void) {
                    3912   _UnhandledTrap:
                    3913   ; PrintErrorMessageandAbort("Unhandled Trap !!!!!") ;
00002494  4879 0000 3914          pea       @m68kde~1_123.L
00002498  5486      
0000249A  4EB8 23E2 3915          jsr       _PrintErrorMessageandAbort
0000249E  584F      3916          addq.w    #4,A7
000024A0  4E75      3917          rts
                    3918   ; }
                    3919   ; void BusError() {
                    3920   _BusError:
                    3921   ; PrintErrorMessageandAbort("BUS Error!") ;
000024A2  4879 0000 3922          pea       @m68kde~1_124.L
000024A6  549C      
000024A8  4EB8 23E2 3923          jsr       _PrintErrorMessageandAbort
000024AC  584F      3924          addq.w    #4,A7
000024AE  4E75      3925          rts
                    3926   ; }
                    3927   ; void AddressError() {
                    3928   _AddressError:
                    3929   ; PrintErrorMessageandAbort("ADDRESS Error!") ;
000024B0  4879 0000 3930          pea       @m68kde~1_125.L
000024B4  54A8      
000024B6  4EB8 23E2 3931          jsr       _PrintErrorMessageandAbort
000024BA  584F      3932          addq.w    #4,A7
000024BC  4E75      3933          rts
                    3934   ; }
                    3935   ; void IllegalInstruction() {
                    3936   _IllegalInstruction:
                    3937   ; PrintErrorMessageandAbort("ILLEGAL INSTRUCTION") ;
000024BE  4879 0000 3938          pea       @m68kde~1_126.L
000024C2  54B8      
000024C4  4EB8 23E2 3939          jsr       _PrintErrorMessageandAbort
000024C8  584F      3940          addq.w    #4,A7
000024CA  4E75      3941          rts
                    3942   ; }
                    3943   ; void Dividebyzero() {
                    3944   _Dividebyzero:
                    3945   ; PrintErrorMessageandAbort("DIVIDE BY ZERO") ;
000024CC  4879 0000 3946          pea       @m68kde~1_127.L
000024D0  54CC      
000024D2  4EB8 23E2 3947          jsr       _PrintErrorMessageandAbort
000024D6  584F      3948          addq.w    #4,A7
000024D8  4E75      3949          rts
                    3950   ; }
                    3951   ; void Check() {
                    3952   _Check:
                    3953   ; PrintErrorMessageandAbort("'CHK' INSTRUCTION") ;
000024DA  4879 0000 3954          pea       @m68kde~1_128.L
000024DE  54DC      
000024E0  4EB8 23E2 3955          jsr       _PrintErrorMessageandAbort
000024E4  584F      3956          addq.w    #4,A7
000024E6  4E75      3957          rts
                    3958   ; }
                    3959   ; void Trapv() {
                    3960   _Trapv:
                    3961   ; PrintErrorMessageandAbort("TRAPV INSTRUCTION") ;
000024E8  4879 0000 3962          pea       @m68kde~1_129.L
000024EC  54EE      
000024EE  4EB8 23E2 3963          jsr       _PrintErrorMessageandAbort
000024F2  584F      3964          addq.w    #4,A7
000024F4  4E75      3965          rts
                    3966   ; }
                    3967   ; void PrivError() {
                    3968   _PrivError:
                    3969   ; PrintErrorMessageandAbort("PRIVILEGE VIOLATION") ;
000024F6  4879 0000 3970          pea       @m68kde~1_130.L
000024FA  5500      
000024FC  4EB8 23E2 3971          jsr       _PrintErrorMessageandAbort
00002500  584F      3972          addq.w    #4,A7
00002502  4E75      3973          rts
                    3974   ; }
                    3975   ; void UnitIRQ() {
                    3976   _UnitIRQ:
                    3977   ; PrintErrorMessageandAbort("UNINITIALISED IRQ") ;
00002504  4879 0000 3978          pea       @m68kde~1_131.L
00002508  5514      
0000250A  4EB8 23E2 3979          jsr       _PrintErrorMessageandAbort
0000250E  584F      3980          addq.w    #4,A7
00002510  4E75      3981          rts
                    3982   ; }
                    3983   ; void Spurious() {
                    3984   _Spurious:
                    3985   ; PrintErrorMessageandAbort("SPURIOUS IRQ") ;
00002512  4879 0000 3986          pea       @m68kde~1_132.L
00002516  5526      
00002518  4EB8 23E2 3987          jsr       _PrintErrorMessageandAbort
0000251C  584F      3988          addq.w    #4,A7
0000251E  4E75      3989          rts
                    3990   ; }
                    3991   ; void EnterString(void)
                    3992   ; {
                    3993   _EnterString:
00002520  4E56 FFFC 3994          link      A6,#-4
00002524  2F02      3995          move.l    D2,-(A7)
                    3996   ; unsigned char *Start;
                    3997   ; unsigned char c;
                    3998   ; printf("\r\nStart Address in Memory: ") ;
00002526  4879 0000 3999          pea       @m68kde~1_133.L
0000252A  5534      
0000252C  4EB9 0000 4000          jsr       _printf
00002530  3C12      
00002532  584F      4001          addq.w    #4,A7
                    4002   ; Start = Get8HexDigits(0) ;
00002534  42A7      4003          clr.l     -(A7)
00002536  4EB8 0CA4 4004          jsr       _Get8HexDigits
0000253A  584F      4005          addq.w    #4,A7
0000253C  2400      4006          move.l    D0,D2
                    4007   ; printf("\r\nEnter String (ESC to end) :") ;
0000253E  4879 0000 4008          pea       @m68kde~1_134.L
00002542  5550      
00002544  4EB9 0000 4009          jsr       _printf
00002548  3C12      
0000254A  584F      4010          addq.w    #4,A7
                    4011   ; while((c = getchar()) != 0x1b)
                    4012   EnterString_1:
0000254C  4EB9 0000 4013          jsr       _getch
00002550  329E      
00002552  1D40 FFFF 4014          move.b    D0,-1(A6)
00002556  0C00 001B 4015          cmp.b     #27,D0
0000255A  670A      4016          beq.s     EnterString_3
                    4017   ; *Start++ = c ;
0000255C  2042      4018          move.l    D2,A0
0000255E  5282      4019          addq.l    #1,D2
00002560  10AE FFFF 4020          move.b    -1(A6),(A0)
00002564  60E6      4021          bra       EnterString_1
                    4022   EnterString_3:
                    4023   ; *Start = 0x00;  // terminate with a null
00002566  2042      4024          move.l    D2,A0
00002568  4210      4025          clr.b     (A0)
0000256A  241F      4026          move.l    (A7)+,D2
0000256C  4E5E      4027          unlk      A6
0000256E  4E75      4028          rts
                    4029   ; }
                    4030   ; // Memory test helper functions
                    4031   ; int Get2HexDigitsForMemTest(char pat)
                    4032   ; {
                    4033   _Get2HexDigitsForMemTest:
00002570  4E56 0000 4034          link      A6,#0
                    4035   ; return (xtod(pat) << 4) | (xtod(pat));
00002574  122E 000B 4036          move.b    11(A6),D1
00002578  4881      4037          ext.w     D1
0000257A  48C1      4038          ext.l     D1
0000257C  2F01      4039          move.l    D1,-(A7)
0000257E  4EB8 0BD2 4040          jsr       _xtod
00002582  584F      4041          addq.w    #4,A7
00002584  C0BC 0000 4042          and.l     #255,D0
00002588  00FF      
0000258A  E980      4043          asl.l     #4,D0
0000258C  2F00      4044          move.l    D0,-(A7)
0000258E  102E 000B 4045          move.b    11(A6),D0
00002592  4880      4046          ext.w     D0
00002594  48C0      4047          ext.l     D0
00002596  2F00      4048          move.l    D0,-(A7)
00002598  4EB8 0BD2 4049          jsr       _xtod
0000259C  584F      4050          addq.w    #4,A7
0000259E  2200      4051          move.l    D0,D1
000025A0  201F      4052          move.l    (A7)+,D0
000025A2  C2BC 0000 4053          and.l     #255,D1
000025A6  00FF      
000025A8  8081      4054          or.l      D1,D0
000025AA  4E5E      4055          unlk      A6
000025AC  4E75      4056          rts
                    4057   ; }
                    4058   ; int Get4HexDigitsForMemTest(char pat)
                    4059   ; {
                    4060   _Get4HexDigitsForMemTest:
000025AE  4E56 0000 4061          link      A6,#0
000025B2  2F02      4062          move.l    D2,-(A7)
000025B4  142E 000B 4063          move.b    11(A6),D2
000025B8  4882      4064          ext.w     D2
000025BA  48C2      4065          ext.l     D2
                    4066   ; return (xtod(pat) << 12) | (xtod(pat) << 8) |(Get2HexDigitsForMemTest(pat));
000025BC  4882      4067          ext.w     D2
000025BE  48C2      4068          ext.l     D2
000025C0  2F02      4069          move.l    D2,-(A7)
000025C2  4EB8 0BD2 4070          jsr       _xtod
000025C6  584F      4071          addq.w    #4,A7
000025C8  E100      4072          asl.b     #8,D0
000025CA  E900      4073          asl.b     #4,D0
000025CC  2F00      4074          move.l    D0,-(A7)
000025CE  4882      4075          ext.w     D2
000025D0  48C2      4076          ext.l     D2
000025D2  2F02      4077          move.l    D2,-(A7)
000025D4  4EB8 0BD2 4078          jsr       _xtod
000025D8  584F      4079          addq.w    #4,A7
000025DA  2200      4080          move.l    D0,D1
000025DC  201F      4081          move.l    (A7)+,D0
000025DE  E101      4082          asl.b     #8,D1
000025E0  8001      4083          or.b      D1,D0
000025E2  4880      4084          ext.w     D0
000025E4  48C0      4085          ext.l     D0
000025E6  2F00      4086          move.l    D0,-(A7)
000025E8  4882      4087          ext.w     D2
000025EA  48C2      4088          ext.l     D2
000025EC  2F02      4089          move.l    D2,-(A7)
000025EE  4EB8 2570 4090          jsr       _Get2HexDigitsForMemTest
000025F2  584F      4091          addq.w    #4,A7
000025F4  2200      4092          move.l    D0,D1
000025F6  201F      4093          move.l    (A7)+,D0
000025F8  8081      4094          or.l      D1,D0
000025FA  241F      4095          move.l    (A7)+,D2
000025FC  4E5E      4096          unlk      A6
000025FE  4E75      4097          rts
                    4098   ; }
                    4099   ; int Get8HexDigitsForMemTest(char pat)
                    4100   ; {
                    4101   _Get8HexDigitsForMemTest:
00002600  4E56 0000 4102          link      A6,#0
00002604  48E7 2020 4103          movem.l   D2/A2,-(A7)
00002608  142E 000B 4104          move.b    11(A6),D2
0000260C  4882      4105          ext.w     D2
0000260E  48C2      4106          ext.l     D2
00002610  45F8 0BD2 4107          lea       _xtod.L,A2
                    4108   ; return  (xtod(pat) << 28) | (xtod(pat) << 24) | (xtod(pat) << 20) | (xtod(pat) << 16) |(Get4HexDigitsForMemTest(pat));
00002614  4882      4109          ext.w     D2
00002616  48C2      4110          ext.l     D2
00002618  2F02      4111          move.l    D2,-(A7)
0000261A  4E92      4112          jsr       (A2)
0000261C  584F      4113          addq.w    #4,A7
0000261E  E100      4114          asl.b     #8,D0
00002620  E100      4115          asl.b     #8,D0
00002622  E100      4116          asl.b     #8,D0
00002624  E900      4117          asl.b     #4,D0
00002626  2F00      4118          move.l    D0,-(A7)
00002628  4882      4119          ext.w     D2
0000262A  48C2      4120          ext.l     D2
0000262C  2F02      4121          move.l    D2,-(A7)
0000262E  4E92      4122          jsr       (A2)
00002630  584F      4123          addq.w    #4,A7
00002632  2200      4124          move.l    D0,D1
00002634  201F      4125          move.l    (A7)+,D0
00002636  E101      4126          asl.b     #8,D1
00002638  E101      4127          asl.b     #8,D1
0000263A  E101      4128          asl.b     #8,D1
0000263C  8001      4129          or.b      D1,D0
0000263E  2F00      4130          move.l    D0,-(A7)
00002640  4882      4131          ext.w     D2
00002642  48C2      4132          ext.l     D2
00002644  2F02      4133          move.l    D2,-(A7)
00002646  4E92      4134          jsr       (A2)
00002648  584F      4135          addq.w    #4,A7
0000264A  2200      4136          move.l    D0,D1
0000264C  201F      4137          move.l    (A7)+,D0
0000264E  E101      4138          asl.b     #8,D1
00002650  E101      4139          asl.b     #8,D1
00002652  E901      4140          asl.b     #4,D1
00002654  8001      4141          or.b      D1,D0
00002656  2F00      4142          move.l    D0,-(A7)
00002658  4882      4143          ext.w     D2
0000265A  48C2      4144          ext.l     D2
0000265C  2F02      4145          move.l    D2,-(A7)
0000265E  4E92      4146          jsr       (A2)
00002660  584F      4147          addq.w    #4,A7
00002662  2200      4148          move.l    D0,D1
00002664  201F      4149          move.l    (A7)+,D0
00002666  E101      4150          asl.b     #8,D1
00002668  E101      4151          asl.b     #8,D1
0000266A  8001      4152          or.b      D1,D0
0000266C  4880      4153          ext.w     D0
0000266E  48C0      4154          ext.l     D0
00002670  2F00      4155          move.l    D0,-(A7)
00002672  4882      4156          ext.w     D2
00002674  48C2      4157          ext.l     D2
00002676  2F02      4158          move.l    D2,-(A7)
00002678  4EB8 25AE 4159          jsr       _Get4HexDigitsForMemTest
0000267C  584F      4160          addq.w    #4,A7
0000267E  2200      4161          move.l    D0,D1
00002680  201F      4162          move.l    (A7)+,D0
00002682  8081      4163          or.l      D1,D0
00002684  4CDF 0404 4164          movem.l   (A7)+,D2/A2
00002688  4E5E      4165          unlk      A6
0000268A  4E75      4166          rts
                    4167   ; }
                    4168   ; int Get7HexDigitsForMemTest(char one, char two, char three, char four, char five, char six, char seven)
                    4169   ; {
                    4170   _Get7HexDigitsForMemTest:
0000268C  4E56 0000 4171          link      A6,#0
00002690  2F0A      4172          move.l    A2,-(A7)
00002692  45F8 0BD2 4173          lea       _xtod.L,A2
                    4174   ; return (xtod(one) << 24) | (xtod(two) << 20) | (xtod(three) << 16) | (xtod(four) << 12) | (xtod(five) << 8) | (xtod(six) << 4) | (xtod(seven));
00002696  122E 000B 4175          move.b    11(A6),D1
0000269A  4881      4176          ext.w     D1
0000269C  48C1      4177          ext.l     D1
0000269E  2F01      4178          move.l    D1,-(A7)
000026A0  4E92      4179          jsr       (A2)
000026A2  584F      4180          addq.w    #4,A7
000026A4  C0BC 0000 4181          and.l     #255,D0
000026A8  00FF      
000026AA  E180      4182          asl.l     #8,D0
000026AC  E180      4183          asl.l     #8,D0
000026AE  E180      4184          asl.l     #8,D0
000026B0  2F00      4185          move.l    D0,-(A7)
000026B2  102E 000F 4186          move.b    15(A6),D0
000026B6  4880      4187          ext.w     D0
000026B8  48C0      4188          ext.l     D0
000026BA  2F00      4189          move.l    D0,-(A7)
000026BC  4E92      4190          jsr       (A2)
000026BE  584F      4191          addq.w    #4,A7
000026C0  2200      4192          move.l    D0,D1
000026C2  201F      4193          move.l    (A7)+,D0
000026C4  C2BC 0000 4194          and.l     #255,D1
000026C8  00FF      
000026CA  E181      4195          asl.l     #8,D1
000026CC  E181      4196          asl.l     #8,D1
000026CE  E981      4197          asl.l     #4,D1
000026D0  8081      4198          or.l      D1,D0
000026D2  2F00      4199          move.l    D0,-(A7)
000026D4  102E 0013 4200          move.b    19(A6),D0
000026D8  4880      4201          ext.w     D0
000026DA  48C0      4202          ext.l     D0
000026DC  2F00      4203          move.l    D0,-(A7)
000026DE  4E92      4204          jsr       (A2)
000026E0  584F      4205          addq.w    #4,A7
000026E2  2200      4206          move.l    D0,D1
000026E4  201F      4207          move.l    (A7)+,D0
000026E6  C2BC 0000 4208          and.l     #255,D1
000026EA  00FF      
000026EC  E181      4209          asl.l     #8,D1
000026EE  E181      4210          asl.l     #8,D1
000026F0  8081      4211          or.l      D1,D0
000026F2  2F00      4212          move.l    D0,-(A7)
000026F4  102E 0017 4213          move.b    23(A6),D0
000026F8  4880      4214          ext.w     D0
000026FA  48C0      4215          ext.l     D0
000026FC  2F00      4216          move.l    D0,-(A7)
000026FE  4E92      4217          jsr       (A2)
00002700  584F      4218          addq.w    #4,A7
00002702  2200      4219          move.l    D0,D1
00002704  201F      4220          move.l    (A7)+,D0
00002706  C2BC 0000 4221          and.l     #255,D1
0000270A  00FF      
0000270C  E181      4222          asl.l     #8,D1
0000270E  E981      4223          asl.l     #4,D1
00002710  8081      4224          or.l      D1,D0
00002712  2F00      4225          move.l    D0,-(A7)
00002714  102E 001B 4226          move.b    27(A6),D0
00002718  4880      4227          ext.w     D0
0000271A  48C0      4228          ext.l     D0
0000271C  2F00      4229          move.l    D0,-(A7)
0000271E  4E92      4230          jsr       (A2)
00002720  584F      4231          addq.w    #4,A7
00002722  2200      4232          move.l    D0,D1
00002724  201F      4233          move.l    (A7)+,D0
00002726  C2BC 0000 4234          and.l     #255,D1
0000272A  00FF      
0000272C  E181      4235          asl.l     #8,D1
0000272E  8081      4236          or.l      D1,D0
00002730  2F00      4237          move.l    D0,-(A7)
00002732  102E 001F 4238          move.b    31(A6),D0
00002736  4880      4239          ext.w     D0
00002738  48C0      4240          ext.l     D0
0000273A  2F00      4241          move.l    D0,-(A7)
0000273C  4E92      4242          jsr       (A2)
0000273E  584F      4243          addq.w    #4,A7
00002740  2200      4244          move.l    D0,D1
00002742  201F      4245          move.l    (A7)+,D0
00002744  C2BC 0000 4246          and.l     #255,D1
00002748  00FF      
0000274A  E981      4247          asl.l     #4,D1
0000274C  8081      4248          or.l      D1,D0
0000274E  2F00      4249          move.l    D0,-(A7)
00002750  102E 0023 4250          move.b    35(A6),D0
00002754  4880      4251          ext.w     D0
00002756  48C0      4252          ext.l     D0
00002758  2F00      4253          move.l    D0,-(A7)
0000275A  4E92      4254          jsr       (A2)
0000275C  584F      4255          addq.w    #4,A7
0000275E  2200      4256          move.l    D0,D1
00002760  201F      4257          move.l    (A7)+,D0
00002762  C2BC 0000 4258          and.l     #255,D1
00002766  00FF      
00002768  8081      4259          or.l      D1,D0
0000276A  245F      4260          move.l    (A7)+,A2
0000276C  4E5E      4261          unlk      A6
0000276E  4E75      4262          rts
                    4263   ; }
                    4264   ; int Get7HexDigits(void)
                    4265   ; {
                    4266   _Get7HexDigits:
00002770  48E7 2030 4267          movem.l   D2/A2/A3,-(A7)
00002774  45F8 0B68 4268          lea       __getch.L,A2
00002778  47F8 0BD2 4269          lea       _xtod.L,A3
                    4270   ; register int i = (xtod(_getch()) << 24) | (xtod(_getch()) << 20) | (xtod(_getch()) << 16) | (xtod(_getch()) << 12) | (xtod(_getch()) << 8) | (xtod(_getch()) << 4) | (xtod(_getch()));
0000277C  2F00      4271          move.l    D0,-(A7)
0000277E  4E92      4272          jsr       (A2)
00002780  2200      4273          move.l    D0,D1
00002782  201F      4274          move.l    (A7)+,D0
00002784  2F01      4275          move.l    D1,-(A7)
00002786  4E93      4276          jsr       (A3)
00002788  584F      4277          addq.w    #4,A7
0000278A  C0BC 0000 4278          and.l     #255,D0
0000278E  00FF      
00002790  E180      4279          asl.l     #8,D0
00002792  E180      4280          asl.l     #8,D0
00002794  E180      4281          asl.l     #8,D0
00002796  2F00      4282          move.l    D0,-(A7)
00002798  2F01      4283          move.l    D1,-(A7)
0000279A  4E92      4284          jsr       (A2)
0000279C  221F      4285          move.l    (A7)+,D1
0000279E  2F00      4286          move.l    D0,-(A7)
000027A0  4E93      4287          jsr       (A3)
000027A2  584F      4288          addq.w    #4,A7
000027A4  2200      4289          move.l    D0,D1
000027A6  201F      4290          move.l    (A7)+,D0
000027A8  C2BC 0000 4291          and.l     #255,D1
000027AC  00FF      
000027AE  E181      4292          asl.l     #8,D1
000027B0  E181      4293          asl.l     #8,D1
000027B2  E981      4294          asl.l     #4,D1
000027B4  8081      4295          or.l      D1,D0
000027B6  2F00      4296          move.l    D0,-(A7)
000027B8  2F01      4297          move.l    D1,-(A7)
000027BA  4E92      4298          jsr       (A2)
000027BC  221F      4299          move.l    (A7)+,D1
000027BE  2F00      4300          move.l    D0,-(A7)
000027C0  4E93      4301          jsr       (A3)
000027C2  584F      4302          addq.w    #4,A7
000027C4  2200      4303          move.l    D0,D1
000027C6  201F      4304          move.l    (A7)+,D0
000027C8  C2BC 0000 4305          and.l     #255,D1
000027CC  00FF      
000027CE  E181      4306          asl.l     #8,D1
000027D0  E181      4307          asl.l     #8,D1
000027D2  8081      4308          or.l      D1,D0
000027D4  2F00      4309          move.l    D0,-(A7)
000027D6  2F01      4310          move.l    D1,-(A7)
000027D8  4E92      4311          jsr       (A2)
000027DA  221F      4312          move.l    (A7)+,D1
000027DC  2F00      4313          move.l    D0,-(A7)
000027DE  4E93      4314          jsr       (A3)
000027E0  584F      4315          addq.w    #4,A7
000027E2  2200      4316          move.l    D0,D1
000027E4  201F      4317          move.l    (A7)+,D0
000027E6  C2BC 0000 4318          and.l     #255,D1
000027EA  00FF      
000027EC  E181      4319          asl.l     #8,D1
000027EE  E981      4320          asl.l     #4,D1
000027F0  8081      4321          or.l      D1,D0
000027F2  2F00      4322          move.l    D0,-(A7)
000027F4  2F01      4323          move.l    D1,-(A7)
000027F6  4E92      4324          jsr       (A2)
000027F8  221F      4325          move.l    (A7)+,D1
000027FA  2F00      4326          move.l    D0,-(A7)
000027FC  4E93      4327          jsr       (A3)
000027FE  584F      4328          addq.w    #4,A7
00002800  2200      4329          move.l    D0,D1
00002802  201F      4330          move.l    (A7)+,D0
00002804  C2BC 0000 4331          and.l     #255,D1
00002808  00FF      
0000280A  E181      4332          asl.l     #8,D1
0000280C  8081      4333          or.l      D1,D0
0000280E  2F00      4334          move.l    D0,-(A7)
00002810  2F01      4335          move.l    D1,-(A7)
00002812  4E92      4336          jsr       (A2)
00002814  221F      4337          move.l    (A7)+,D1
00002816  2F00      4338          move.l    D0,-(A7)
00002818  4E93      4339          jsr       (A3)
0000281A  584F      4340          addq.w    #4,A7
0000281C  2200      4341          move.l    D0,D1
0000281E  201F      4342          move.l    (A7)+,D0
00002820  C2BC 0000 4343          and.l     #255,D1
00002824  00FF      
00002826  E981      4344          asl.l     #4,D1
00002828  8081      4345          or.l      D1,D0
0000282A  2F00      4346          move.l    D0,-(A7)
0000282C  2F01      4347          move.l    D1,-(A7)
0000282E  4E92      4348          jsr       (A2)
00002830  221F      4349          move.l    (A7)+,D1
00002832  2F00      4350          move.l    D0,-(A7)
00002834  4E93      4351          jsr       (A3)
00002836  584F      4352          addq.w    #4,A7
00002838  2200      4353          move.l    D0,D1
0000283A  201F      4354          move.l    (A7)+,D0
0000283C  C2BC 0000 4355          and.l     #255,D1
00002840  00FF      
00002842  8081      4356          or.l      D1,D0
00002844  2400      4357          move.l    D0,D2
                    4358   ; return i;
00002846  2002      4359          move.l    D2,D0
00002848  4CDF 0C04 4360          movem.l   (A7)+,D2/A2/A3
0000284C  4E75      4361          rts
                    4362   ; }
                    4363   ; void FillMemoryForMemTest(char* StartRamPtr, char* EndRamPtr, unsigned long FillData, int config)
                    4364   ; {
                    4365   _FillMemoryForMemTest:
0000284E  4E56 0000 4366          link      A6,#0
00002852  48E7 3C00 4367          movem.l   D2/D3/D4/D5,-(A7)
00002856  262E 000C 4368          move.l    12(A6),D3
0000285A  282E 0010 4369          move.l    16(A6),D4
0000285E  2A2E 0014 4370          move.l    20(A6),D5
                    4371   ; char* start = StartRamPtr;
00002862  242E 0008 4372          move.l    8(A6),D2
                    4373   ; printf("\r\nFilling Addresses [$%08X - $%08X] with $%02X", StartRamPtr, EndRamPtr, FillData);
00002866  2F04      4374          move.l    D4,-(A7)
00002868  2F03      4375          move.l    D3,-(A7)
0000286A  2F2E 0008 4376          move.l    8(A6),-(A7)
0000286E  4879 0000 4377          pea       @m68kde~1_13.L
00002872  4696      
00002874  4EB9 0000 4378          jsr       _printf
00002878  3C12      
0000287A  DEFC 0010 4379          add.w     #16,A7
                    4380   ; if (config == 1) {
0000287E  0C85 0000 4381          cmp.l     #1,D5
00002882  0001      
00002884  660C      4382          bne.s     FillMemoryForMemTest_5
                    4383   ; while (start <= EndRamPtr){
                    4384   FillMemoryForMemTest_3:
00002886  B483      4385          cmp.l     D3,D2
00002888  6208      4386          bhi.s     FillMemoryForMemTest_5
                    4387   ; *start++ = FillData;
0000288A  2042      4388          move.l    D2,A0
0000288C  5282      4389          addq.l    #1,D2
0000288E  1084      4390          move.b    D4,(A0)
00002890  60F4      4391          bra       FillMemoryForMemTest_3
                    4392   FillMemoryForMemTest_5:
                    4393   ; }
                    4394   ; }
                    4395   ; if (config == 2) {
00002892  0C85 0000 4396          cmp.l     #2,D5
00002896  0002      
00002898  660C      4397          bne.s     FillMemoryForMemTest_10
                    4398   ; while (start <= EndRamPtr) {
                    4399   FillMemoryForMemTest_8:
0000289A  B483      4400          cmp.l     D3,D2
0000289C  6208      4401          bhi.s     FillMemoryForMemTest_10
                    4402   ; *start = FillData;
0000289E  2042      4403          move.l    D2,A0
000028A0  1084      4404          move.b    D4,(A0)
                    4405   ; start += 1;
000028A2  5282      4406          addq.l    #1,D2
000028A4  60F4      4407          bra       FillMemoryForMemTest_8
                    4408   FillMemoryForMemTest_10:
                    4409   ; }
                    4410   ; }
                    4411   ; if (config == 3) {
000028A6  0C85 0000 4412          cmp.l     #3,D5
000028AA  0003      
000028AC  660C      4413          bne.s     FillMemoryForMemTest_15
                    4414   ; while (start <= EndRamPtr) {
                    4415   FillMemoryForMemTest_13:
000028AE  B483      4416          cmp.l     D3,D2
000028B0  6208      4417          bhi.s     FillMemoryForMemTest_15
                    4418   ; *start = FillData;
000028B2  2042      4419          move.l    D2,A0
000028B4  1084      4420          move.b    D4,(A0)
                    4421   ; start += 1;
000028B6  5282      4422          addq.l    #1,D2
000028B8  60F4      4423          bra       FillMemoryForMemTest_13
                    4424   FillMemoryForMemTest_15:
000028BA  4CDF 003C 4425          movem.l   (A7)+,D2/D3/D4/D5
000028BE  4E5E      4426          unlk      A6
000028C0  4E75      4427          rts
                    4428   ; }
                    4429   ; }
                    4430   ; }
                    4431   ; void ReadMemoryForMemTest(char* StartRamPtr, char* EndRamPtr, unsigned long FillData, int config)
                    4432   ; {
                    4433   _ReadMemoryForMemTest:
000028C2  4E56 0000 4434          link      A6,#0
000028C6  48E7 3C20 4435          movem.l   D2/D3/D4/D5/A2,-(A7)
000028CA  262E 0010 4436          move.l    16(A6),D3
000028CE  45F9 0000 4437          lea       _printf.L,A2
000028D2  3C12      
000028D4  282E 000C 4438          move.l    12(A6),D4
000028D8  2A2E 0014 4439          move.l    20(A6),D5
                    4440   ; unsigned char* start = StartRamPtr;
000028DC  242E 0008 4441          move.l    8(A6),D2
                    4442   ; printf("\r\nReading Addresses [$%08X - $%08X] for $%02X", StartRamPtr, EndRamPtr, FillData);
000028E0  2F03      4443          move.l    D3,-(A7)
000028E2  2F04      4444          move.l    D4,-(A7)
000028E4  2F2E 0008 4445          move.l    8(A6),-(A7)
000028E8  4879 0000 4446          pea       @m68kde~1_135.L
000028EC  556E      
000028EE  4E92      4447          jsr       (A2)
000028F0  DEFC 0010 4448          add.w     #16,A7
                    4449   ; if (config == 1) {
000028F4  0C85 0000 4450          cmp.l     #1,D5
000028F8  0001      
000028FA  6600 0050 4451          bne       ReadMemoryForMemTest_5
                    4452   ; while (start <= EndRamPtr) {
                    4453   ReadMemoryForMemTest_3:
000028FE  B484      4454          cmp.l     D4,D2
00002900  6200 004A 4455          bhi       ReadMemoryForMemTest_5
                    4456   ; if (*start != FillData)
00002904  2042      4457          move.l    D2,A0
00002906  1010      4458          move.b    (A0),D0
00002908  C0BC 0000 4459          and.l     #255,D0
0000290C  00FF      
0000290E  B083      4460          cmp.l     D3,D0
00002910  671C      4461          beq.s     ReadMemoryForMemTest_6
                    4462   ; printf("\r\nValue incorrect at addresses $%08X ... should be $%02X but found $%02X", start, FillData, *start);
00002912  2042      4463          move.l    D2,A0
00002914  1210      4464          move.b    (A0),D1
00002916  C2BC 0000 4465          and.l     #255,D1
0000291A  00FF      
0000291C  2F01      4466          move.l    D1,-(A7)
0000291E  2F03      4467          move.l    D3,-(A7)
00002920  2F02      4468          move.l    D2,-(A7)
00002922  4879 0000 4469          pea       @m68kde~1_136.L
00002926  559C      
00002928  4E92      4470          jsr       (A2)
0000292A  DEFC 0010 4471          add.w     #16,A7
                    4472   ReadMemoryForMemTest_6:
                    4473   ; printf("\r\nValue: $%02X found at Address: $%08X", *start, start);
0000292E  2F02      4474          move.l    D2,-(A7)
00002930  2042      4475          move.l    D2,A0
00002932  1210      4476          move.b    (A0),D1
00002934  C2BC 0000 4477          and.l     #255,D1
00002938  00FF      
0000293A  2F01      4478          move.l    D1,-(A7)
0000293C  4879 0000 4479          pea       @m68kde~1_137.L
00002940  55E6      
00002942  4E92      4480          jsr       (A2)
00002944  DEFC 000C 4481          add.w     #12,A7
                    4482   ; start++;
00002948  5282      4483          addq.l    #1,D2
0000294A  60B2      4484          bra       ReadMemoryForMemTest_3
                    4485   ReadMemoryForMemTest_5:
                    4486   ; }
                    4487   ; }
                    4488   ; if (config == 2) {
0000294C  0C85 0000 4489          cmp.l     #2,D5
00002950  0002      
00002952  6600 0064 4490          bne       ReadMemoryForMemTest_12
                    4491   ; while (start <= EndRamPtr) {
                    4492   ReadMemoryForMemTest_10:
00002956  B484      4493          cmp.l     D4,D2
00002958  6200 005E 4494          bhi       ReadMemoryForMemTest_12
                    4495   ; if(*start != FillData)
0000295C  2042      4496          move.l    D2,A0
0000295E  1010      4497          move.b    (A0),D0
00002960  C0BC 0000 4498          and.l     #255,D0
00002964  00FF      
00002966  B083      4499          cmp.l     D3,D0
00002968  671C      4500          beq.s     ReadMemoryForMemTest_13
                    4501   ; printf("\r\nValue incorrect at addresses $%08X ... should be $%02X but found $%02X", start, FillData, *start);
0000296A  2042      4502          move.l    D2,A0
0000296C  1210      4503          move.b    (A0),D1
0000296E  C2BC 0000 4504          and.l     #255,D1
00002972  00FF      
00002974  2F01      4505          move.l    D1,-(A7)
00002976  2F03      4506          move.l    D3,-(A7)
00002978  2F02      4507          move.l    D2,-(A7)
0000297A  4879 0000 4508          pea       @m68kde~1_136.L
0000297E  559C      
00002980  4E92      4509          jsr       (A2)
00002982  DEFC 0010 4510          add.w     #16,A7
                    4511   ReadMemoryForMemTest_13:
                    4512   ; printf("\r\nValue: $%02X $%02X found at Address: $%08X and $%08X", *start, *(start + 1), start, (start + 1));
00002986  2202      4513          move.l    D2,D1
00002988  5281      4514          addq.l    #1,D1
0000298A  2F01      4515          move.l    D1,-(A7)
0000298C  2F02      4516          move.l    D2,-(A7)
0000298E  2042      4517          move.l    D2,A0
00002990  1228 0001 4518          move.b    1(A0),D1
00002994  C2BC 0000 4519          and.l     #255,D1
00002998  00FF      
0000299A  2F01      4520          move.l    D1,-(A7)
0000299C  2042      4521          move.l    D2,A0
0000299E  1210      4522          move.b    (A0),D1
000029A0  C2BC 0000 4523          and.l     #255,D1
000029A4  00FF      
000029A6  2F01      4524          move.l    D1,-(A7)
000029A8  4879 0000 4525          pea       @m68kde~1_138.L
000029AC  560E      
000029AE  4E92      4526          jsr       (A2)
000029B0  DEFC 0014 4527          add.w     #20,A7
                    4528   ; start += 2;
000029B4  5482      4529          addq.l    #2,D2
000029B6  609E      4530          bra       ReadMemoryForMemTest_10
                    4531   ReadMemoryForMemTest_12:
                    4532   ; }
                    4533   ; }
                    4534   ; if (config == 3) {
000029B8  0C85 0000 4535          cmp.l     #3,D5
000029BC  0003      
000029BE  6600 0080 4536          bne       ReadMemoryForMemTest_19
                    4537   ; while (start <= EndRamPtr) {
                    4538   ReadMemoryForMemTest_17:
000029C2  B484      4539          cmp.l     D4,D2
000029C4  6200 007A 4540          bhi       ReadMemoryForMemTest_19
                    4541   ; if (*start != FillData)
000029C8  2042      4542          move.l    D2,A0
000029CA  1010      4543          move.b    (A0),D0
000029CC  C0BC 0000 4544          and.l     #255,D0
000029D0  00FF      
000029D2  B083      4545          cmp.l     D3,D0
000029D4  671C      4546          beq.s     ReadMemoryForMemTest_20
                    4547   ; printf("\r\nValue incorrect at addresses $%08X ... should be $%02X but found $%02X", start, FillData, *start);
000029D6  2042      4548          move.l    D2,A0
000029D8  1210      4549          move.b    (A0),D1
000029DA  C2BC 0000 4550          and.l     #255,D1
000029DE  00FF      
000029E0  2F01      4551          move.l    D1,-(A7)
000029E2  2F03      4552          move.l    D3,-(A7)
000029E4  2F02      4553          move.l    D2,-(A7)
000029E6  4879 0000 4554          pea       @m68kde~1_136.L
000029EA  559C      
000029EC  4E92      4555          jsr       (A2)
000029EE  DEFC 0010 4556          add.w     #16,A7
                    4557   ReadMemoryForMemTest_20:
                    4558   ; printf("\r\nValue: $%02X $%02X $%02X $%02X found at Address: $%08X - $%08X", *start, *(start + 1), *(start + 2), *(start + 3), start, (start + 3));
000029F2  2202      4559          move.l    D2,D1
000029F4  5681      4560          addq.l    #3,D1
000029F6  2F01      4561          move.l    D1,-(A7)
000029F8  2F02      4562          move.l    D2,-(A7)
000029FA  2042      4563          move.l    D2,A0
000029FC  1228 0003 4564          move.b    3(A0),D1
00002A00  C2BC 0000 4565          and.l     #255,D1
00002A04  00FF      
00002A06  2F01      4566          move.l    D1,-(A7)
00002A08  2042      4567          move.l    D2,A0
00002A0A  1228 0002 4568          move.b    2(A0),D1
00002A0E  C2BC 0000 4569          and.l     #255,D1
00002A12  00FF      
00002A14  2F01      4570          move.l    D1,-(A7)
00002A16  2042      4571          move.l    D2,A0
00002A18  1228 0001 4572          move.b    1(A0),D1
00002A1C  C2BC 0000 4573          and.l     #255,D1
00002A20  00FF      
00002A22  2F01      4574          move.l    D1,-(A7)
00002A24  2042      4575          move.l    D2,A0
00002A26  1210      4576          move.b    (A0),D1
00002A28  C2BC 0000 4577          and.l     #255,D1
00002A2C  00FF      
00002A2E  2F01      4578          move.l    D1,-(A7)
00002A30  4879 0000 4579          pea       @m68kde~1_139.L
00002A34  5646      
00002A36  4E92      4580          jsr       (A2)
00002A38  DEFC 001C 4581          add.w     #28,A7
                    4582   ; start += 4;
00002A3C  5882      4583          addq.l    #4,D2
00002A3E  6082      4584          bra       ReadMemoryForMemTest_17
                    4585   ReadMemoryForMemTest_19:
00002A40  4CDF 043C 4586          movem.l   (A7)+,D2/D3/D4/D5/A2
00002A44  4E5E      4587          unlk      A6
00002A46  4E75      4588          rts
                    4589   ; }
                    4590   ; }
                    4591   ; }
                    4592   ; void MemoryTest(void)
                    4593   ; {
                    4594   _MemoryTest:
00002A48  4E56 FFF0 4595          link      A6,#-16
00002A4C  48E7 3F3C 4596          movem.l   D2/D3/D4/D5/D6/D7/A2/A3/A4/A5,-(A7)
00002A50  45F9 0000 4597          lea       _printf.L,A2
00002A54  3C12      
00002A56  49F8 28C2 4598          lea       _ReadMemoryForMemTest.L,A4
00002A5A  4BF8 2570 4599          lea       _Get2HexDigitsForMemTest.L,A5
                    4600   ; unsigned int start_boundary = 0xF0000000;
00002A5E  2E3C F000 4601          move.l    #-268435456,D7
00002A62  0000      
                    4602   ; unsigned int end_boundary = 0xF3FFFFFF;
00002A64  2C3C F3FF 4603          move.l    #-201326593,D6
00002A68  FFFF      
                    4604   ; int test_config = 0;
00002A6A  4285      4605          clr.l     D5
                    4606   ; int test_pattern = 0;
00002A6C  367C 0000 4607          move.w    #0,A3
                    4608   ; char start_addr[7];
                    4609   ; int start_val = 0;
00002A70  4282      4610          clr.l     D2
                    4611   ; char end_addr[7];
                    4612   ; int end_val = 0;
00002A72  4283      4613          clr.l     D3
                    4614   ; char digit;
                    4615   ; scanflush();
00002A74  4EB9 0000 4616          jsr       _scanflush
00002A78  3608      
                    4617   ; // Prompt the user to enter a test configuration
                    4618   ; printf("\r\nEnter memory test configuration(1 - bytes, 2 - words, 3 - long words): ");
00002A7A  4879 0000 4619          pea       @m68kde~1_140.L
00002A7E  5688      
00002A80  4E92      4620          jsr       (A2)
00002A82  584F      4621          addq.w    #4,A7
                    4622   ; test_config = (int)(xtod(_getch()));
00002A84  2F00      4623          move.l    D0,-(A7)
00002A86  4EB8 0B68 4624          jsr       __getch
00002A8A  2200      4625          move.l    D0,D1
00002A8C  201F      4626          move.l    (A7)+,D0
00002A8E  2F01      4627          move.l    D1,-(A7)
00002A90  4EB8 0BD2 4628          jsr       _xtod
00002A94  584F      4629          addq.w    #4,A7
00002A96  4880      4630          ext.w     D0
00002A98  48C0      4631          ext.l     D0
00002A9A  2A00      4632          move.l    D0,D5
                    4633   ; // Check for invalid configuration entry and re-prompt if needed
                    4634   ; while (test_config > 3 || test_config < 1) {
                    4635   MemoryTest_1:
00002A9C  0C85 0000 4636          cmp.l     #3,D5
00002AA0  0003      
00002AA2  6E0A      4637          bgt.s     MemoryTest_4
00002AA4  0C85 0000 4638          cmp.l     #1,D5
00002AA8  0001      
00002AAA  6C00 0032 4639          bge       MemoryTest_3
                    4640   MemoryTest_4:
                    4641   ; printf("\r\nConfiguration invalid %d, try again", test_config);
00002AAE  2F05      4642          move.l    D5,-(A7)
00002AB0  4879 0000 4643          pea       @m68kde~1_141.L
00002AB4  56D2      
00002AB6  4E92      4644          jsr       (A2)
00002AB8  504F      4645          addq.w    #8,A7
                    4646   ; printf("\r\nEnter memory test configuration(1 - bytes, 2 - words, 3 - long words): ");
00002ABA  4879 0000 4647          pea       @m68kde~1_140.L
00002ABE  5688      
00002AC0  4E92      4648          jsr       (A2)
00002AC2  584F      4649          addq.w    #4,A7
                    4650   ; test_config = (int)(xtod(_getch()));
00002AC4  2F00      4651          move.l    D0,-(A7)
00002AC6  4EB8 0B68 4652          jsr       __getch
00002ACA  2200      4653          move.l    D0,D1
00002ACC  201F      4654          move.l    (A7)+,D0
00002ACE  2F01      4655          move.l    D1,-(A7)
00002AD0  4EB8 0BD2 4656          jsr       _xtod
00002AD4  584F      4657          addq.w    #4,A7
00002AD6  4880      4658          ext.w     D0
00002AD8  48C0      4659          ext.l     D0
00002ADA  2A00      4660          move.l    D0,D5
00002ADC  60BE      4661          bra       MemoryTest_1
                    4662   MemoryTest_3:
                    4663   ; //scanf("%d", &test_config);
                    4664   ; }
                    4665   ; // Prompt the user to enter a test pattern
                    4666   ; printf("\r\nChoose between different memory test patterns(1 - 5, 2 - A, 3 - F, 4 - 0): ");
00002ADE  4879 0000 4667          pea       @m68kde~1_142.L
00002AE2  56F8      
00002AE4  4E92      4668          jsr       (A2)
00002AE6  584F      4669          addq.w    #4,A7
                    4670   ; test_pattern = (int)(xtod(_getch()));
00002AE8  2F00      4671          move.l    D0,-(A7)
00002AEA  4EB8 0B68 4672          jsr       __getch
00002AEE  2200      4673          move.l    D0,D1
00002AF0  201F      4674          move.l    (A7)+,D0
00002AF2  2F01      4675          move.l    D1,-(A7)
00002AF4  4EB8 0BD2 4676          jsr       _xtod
00002AF8  584F      4677          addq.w    #4,A7
00002AFA  4880      4678          ext.w     D0
00002AFC  48C0      4679          ext.l     D0
00002AFE  2640      4680          move.l    D0,A3
                    4681   ; // Check for invalid pattern entry and re-prompt if needed
                    4682   ; while (test_pattern > 4 || test_pattern < 1) {
                    4683   MemoryTest_5:
00002B00  200B      4684          move.l    A3,D0
00002B02  0C80 0000 4685          cmp.l     #4,D0
00002B06  0004      
00002B08  6E0C      4686          bgt.s     MemoryTest_8
00002B0A  200B      4687          move.l    A3,D0
00002B0C  0C80 0000 4688          cmp.l     #1,D0
00002B10  0001      
00002B12  6C00 0030 4689          bge       MemoryTest_7
                    4690   MemoryTest_8:
                    4691   ; printf("\r\nPattern invalid, try again");
00002B16  4879 0000 4692          pea       @m68kde~1_143.L
00002B1A  5746      
00002B1C  4E92      4693          jsr       (A2)
00002B1E  584F      4694          addq.w    #4,A7
                    4695   ; printf("\r\nChoose between different memory test patterns(1 - 5, 2 - A, 3 - F, 4 - 0): ");
00002B20  4879 0000 4696          pea       @m68kde~1_142.L
00002B24  56F8      
00002B26  4E92      4697          jsr       (A2)
00002B28  584F      4698          addq.w    #4,A7
                    4699   ; //scanf("%d", &test_pattern);
                    4700   ; test_pattern = (int)(xtod(_getch()));
00002B2A  2F00      4701          move.l    D0,-(A7)
00002B2C  4EB8 0B68 4702          jsr       __getch
00002B30  2200      4703          move.l    D0,D1
00002B32  201F      4704          move.l    (A7)+,D0
00002B34  2F01      4705          move.l    D1,-(A7)
00002B36  4EB8 0BD2 4706          jsr       _xtod
00002B3A  584F      4707          addq.w    #4,A7
00002B3C  4880      4708          ext.w     D0
00002B3E  48C0      4709          ext.l     D0
00002B40  2640      4710          move.l    D0,A3
00002B42  60BC      4711          bra       MemoryTest_5
                    4712   MemoryTest_7:
                    4713   ; }
                    4714   ; // Prompt the user to enter a starting address
                    4715   ; printf("\r\nEnter starting address(%X - %X inclusive): ", start_boundary, end_boundary);
00002B44  2F06      4716          move.l    D6,-(A7)
00002B46  2F07      4717          move.l    D7,-(A7)
00002B48  4879 0000 4718          pea       @m68kde~1_144.L
00002B4C  5764      
00002B4E  4E92      4719          jsr       (A2)
00002B50  DEFC 000C 4720          add.w     #12,A7
                    4721   ; start_val = Get8HexDigits(0);
00002B54  42A7      4722          clr.l     -(A7)
00002B56  4EB8 0CA4 4723          jsr       _Get8HexDigits
00002B5A  584F      4724          addq.w    #4,A7
00002B5C  2400      4725          move.l    D0,D2
                    4726   ; // Check for invalid start address and re-prompt if needed
                    4727   ; // Check for illegal address, start address must be even if writing words or long words to memory
                    4728   ; while (start_val < start_boundary || start_val > end_boundary || strlen(start_addr) > 7 || (start_val % 2 != 0 && test_config != 1))
                    4729   MemoryTest_9:
00002B5E  B487      4730          cmp.l     D7,D2
00002B60  6500 0038 4731          blo       MemoryTest_12
00002B64  B486      4732          cmp.l     D6,D2
00002B66  6232      4733          bhi.s     MemoryTest_12
00002B68  486E FFF0 4734          pea       -16(A6)
00002B6C  4EB9 0000 4735          jsr       _strlen
00002B70  325C      
00002B72  584F      4736          addq.w    #4,A7
00002B74  0C80 0000 4737          cmp.l     #7,D0
00002B78  0007      
00002B7A  6E1E      4738          bgt.s     MemoryTest_12
00002B7C  2F02      4739          move.l    D2,-(A7)
00002B7E  4878 0002 4740          pea       2
00002B82  4EB9 0000 4741          jsr       LDIV
00002B86  3190      
00002B88  202F 0004 4742          move.l    4(A7),D0
00002B8C  504F      4743          addq.w    #8,A7
00002B8E  4A80      4744          tst.l     D0
00002B90  672E      4745          beq.s     MemoryTest_11
00002B92  0C85 0000 4746          cmp.l     #1,D5
00002B96  0001      
00002B98  6726      4747          beq.s     MemoryTest_11
                    4748   MemoryTest_12:
                    4749   ; { // start address must be 7 chars and within bounds
                    4750   ; printf("\r\nInvalid starting address.. try again");
00002B9A  4879 0000 4751          pea       @m68kde~1_145.L
00002B9E  5792      
00002BA0  4E92      4752          jsr       (A2)
00002BA2  584F      4753          addq.w    #4,A7
                    4754   ; //printf("\r\nStarting address out of bounds.. try again");
                    4755   ; printf("\r\nEnter starting address(%X - %X inclusive): ", start_boundary, end_boundary);
00002BA4  2F06      4756          move.l    D6,-(A7)
00002BA6  2F07      4757          move.l    D7,-(A7)
00002BA8  4879 0000 4758          pea       @m68kde~1_144.L
00002BAC  5764      
00002BAE  4E92      4759          jsr       (A2)
00002BB0  DEFC 000C 4760          add.w     #12,A7
                    4761   ; start_val = Get8HexDigits(0);
00002BB4  42A7      4762          clr.l     -(A7)
00002BB6  4EB8 0CA4 4763          jsr       _Get8HexDigits
00002BBA  584F      4764          addq.w    #4,A7
00002BBC  2400      4765          move.l    D0,D2
00002BBE  609E      4766          bra       MemoryTest_9
                    4767   MemoryTest_11:
                    4768   ; }
                    4769   ; // Prompt the user to enter an ending address
                    4770   ; printf("\r\nEnter ending address(%X - %X inclusive): ", start_boundary, end_boundary);
00002BC0  2F06      4771          move.l    D6,-(A7)
00002BC2  2F07      4772          move.l    D7,-(A7)
00002BC4  4879 0000 4773          pea       @m68kde~1_146.L
00002BC8  57BA      
00002BCA  4E92      4774          jsr       (A2)
00002BCC  DEFC 000C 4775          add.w     #12,A7
                    4776   ; end_val = Get8HexDigits(0);
00002BD0  42A7      4777          clr.l     -(A7)
00002BD2  4EB8 0CA4 4778          jsr       _Get8HexDigits
00002BD6  584F      4779          addq.w    #4,A7
00002BD8  2600      4780          move.l    D0,D3
                    4781   ; // When writing words, the given address range should be a multiple of 2 bytes (size of a word)
                    4782   ; // When writing long words, the given address range should be a multiple of 4 bytes (size of a long word)
                    4783   ; while (end_val < start_boundary || end_val > end_boundary || strlen(end_addr) > 7 ||
                    4784   MemoryTest_13:
00002BDA  B687      4785          cmp.l     D7,D3
00002BDC  6500 006C 4786          blo       MemoryTest_16
00002BE0  B686      4787          cmp.l     D6,D3
00002BE2  6200 0066 4788          bhi       MemoryTest_16
00002BE6  486E FFF8 4789          pea       -8(A6)
00002BEA  4EB9 0000 4790          jsr       _strlen
00002BEE  325C      
00002BF0  584F      4791          addq.w    #4,A7
00002BF2  0C80 0000 4792          cmp.l     #7,D0
00002BF6  0007      
00002BF8  6E00 0050 4793          bgt       MemoryTest_16
00002BFC  B682      4794          cmp.l     D2,D3
00002BFE  6D00 004A 4795          blt       MemoryTest_16
00002C02  2003      4796          move.l    D3,D0
00002C04  9082      4797          sub.l     D2,D0
00002C06  5280      4798          addq.l    #1,D0
00002C08  2F00      4799          move.l    D0,-(A7)
00002C0A  4878 0002 4800          pea       2
00002C0E  4EB9 0000 4801          jsr       LDIV
00002C12  3190      
00002C14  202F 0004 4802          move.l    4(A7),D0
00002C18  504F      4803          addq.w    #8,A7
00002C1A  4A80      4804          tst.l     D0
00002C1C  6708      4805          beq.s     MemoryTest_17
00002C1E  0C85 0000 4806          cmp.l     #2,D5
00002C22  0002      
00002C24  6724      4807          beq.s     MemoryTest_16
                    4808   MemoryTest_17:
00002C26  2003      4809          move.l    D3,D0
00002C28  9082      4810          sub.l     D2,D0
00002C2A  5280      4811          addq.l    #1,D0
00002C2C  2F00      4812          move.l    D0,-(A7)
00002C2E  4878 0004 4813          pea       4
00002C32  4EB9 0000 4814          jsr       LDIV
00002C36  3190      
00002C38  202F 0004 4815          move.l    4(A7),D0
00002C3C  504F      4816          addq.w    #8,A7
00002C3E  4A80      4817          tst.l     D0
00002C40  6730      4818          beq.s     MemoryTest_15
00002C42  0C85 0000 4819          cmp.l     #3,D5
00002C46  0003      
00002C48  6628      4820          bne.s     MemoryTest_15
                    4821   MemoryTest_16:
                    4822   ; end_val < start_val || ((end_val - start_val + 1) % 2 != 0 && test_config == 2) ||
                    4823   ; ((end_val - start_val + 1) % 4 != 0 && test_config == 3))
                    4824   ; { // end address must be 7 chars and within bounds
                    4825   ; printf("\r\nEnding address out of bounds.. try again");
00002C4A  4879 0000 4826          pea       @m68kde~1_147.L
00002C4E  57E6      
00002C50  4E92      4827          jsr       (A2)
00002C52  584F      4828          addq.w    #4,A7
                    4829   ; printf("\r\nEnter ending address(%X - %X inclusive): ", start_boundary, end_boundary);
00002C54  2F06      4830          move.l    D6,-(A7)
00002C56  2F07      4831          move.l    D7,-(A7)
00002C58  4879 0000 4832          pea       @m68kde~1_146.L
00002C5C  57BA      
00002C5E  4E92      4833          jsr       (A2)
00002C60  DEFC 000C 4834          add.w     #12,A7
                    4835   ; end_val = Get8HexDigits(0);
00002C64  42A7      4836          clr.l     -(A7)
00002C66  4EB8 0CA4 4837          jsr       _Get8HexDigits
00002C6A  584F      4838          addq.w    #4,A7
00002C6C  2600      4839          move.l    D0,D3
00002C6E  6000 FF6A 4840          bra       MemoryTest_13
                    4841   MemoryTest_15:
                    4842   ; }
                    4843   ; printf("\r\nWriting to SRAM ...");
00002C72  4879 0000 4844          pea       @m68kde~1_148.L
00002C76  5812      
00002C78  4E92      4845          jsr       (A2)
00002C7A  584F      4846          addq.w    #4,A7
                    4847   ; printf("\r\n............................................................................................................");
00002C7C  4879 0000 4848          pea       @m68kde~1_149.L
00002C80  5828      
00002C82  4E92      4849          jsr       (A2)
00002C84  584F      4850          addq.w    #4,A7
                    4851   ; printf("\r\n............................................................................................................");
00002C86  4879 0000 4852          pea       @m68kde~1_149.L
00002C8A  5828      
00002C8C  4E92      4853          jsr       (A2)
00002C8E  584F      4854          addq.w    #4,A7
                    4855   ; printf("\r\n............................................................................................................");
00002C90  4879 0000 4856          pea       @m68kde~1_149.L
00002C94  5828      
00002C96  4E92      4857          jsr       (A2)
00002C98  584F      4858          addq.w    #4,A7
                    4859   ; switch (test_pattern) {
00002C9A  200B      4860          move.l    A3,D0
00002C9C  5380      4861          subq.l    #1,D0
00002C9E  6500 002C 4862          blo       MemoryTest_18
00002CA2  0C80 0000 4863          cmp.l     #4,D0
00002CA6  0004      
00002CA8  6422      4864          bhs.s     MemoryTest_18
00002CAA  E380      4865          asl.l     #1,D0
00002CAC  303B 0806 4866          move.w    MemoryTest_20(PC,D0.L),D0
00002CB0  4EFB 0002 4867          jmp       MemoryTest_20(PC,D0.W)
                    4868   MemoryTest_20:
00002CB4  0008      4869          dc.w      MemoryTest_21-MemoryTest_20
00002CB6  000C      4870          dc.w      MemoryTest_22-MemoryTest_20
00002CB8  0010      4871          dc.w      MemoryTest_23-MemoryTest_20
00002CBA  0014      4872          dc.w      MemoryTest_24-MemoryTest_20
                    4873   MemoryTest_21:
                    4874   ; case 1: digit = '5';
00002CBC  7835      4875          moveq     #53,D4
                    4876   ; break;
00002CBE  600E      4877          bra.s     MemoryTest_19
                    4878   MemoryTest_22:
                    4879   ; case 2: digit = 'A';
00002CC0  7841      4880          moveq     #65,D4
                    4881   ; break;
00002CC2  600A      4882          bra.s     MemoryTest_19
                    4883   MemoryTest_23:
                    4884   ; case 3: digit = 'F';
00002CC4  7846      4885          moveq     #70,D4
                    4886   ; break;
00002CC6  6006      4887          bra.s     MemoryTest_19
                    4888   MemoryTest_24:
                    4889   ; case 4: digit = '0';
00002CC8  7830      4890          moveq     #48,D4
                    4891   ; break;
00002CCA  6002      4892          bra.s     MemoryTest_19
                    4893   MemoryTest_18:
                    4894   ; default: digit = '5';
00002CCC  7835      4895          moveq     #53,D4
                    4896   MemoryTest_19:
                    4897   ; }
                    4898   ; switch (test_config) {
00002CCE  0C85 0000 4899          cmp.l     #2,D5
00002CD2  0002      
00002CD4  6700 0044 4900          beq       MemoryTest_29
00002CD8  6E0C      4901          bgt.s     MemoryTest_32
00002CDA  0C85 0000 4902          cmp.l     #1,D5
00002CDE  0001      
00002CE0  6712      4903          beq.s     MemoryTest_28
00002CE2  6000 0084 4904          bra       MemoryTest_26
                    4905   MemoryTest_32:
00002CE6  0C85 0000 4906          cmp.l     #3,D5
00002CEA  0003      
00002CEC  6700 0054 4907          beq       MemoryTest_30
00002CF0  6000 0076 4908          bra       MemoryTest_26
                    4909   MemoryTest_28:
                    4910   ; case 1: FillMemoryForMemTest(start_val, end_val, Get2HexDigitsForMemTest(digit), 1);
00002CF4  4878 0001 4911          pea       1
00002CF8  2F00      4912          move.l    D0,-(A7)
00002CFA  4884      4913          ext.w     D4
00002CFC  48C4      4914          ext.l     D4
00002CFE  2F04      4915          move.l    D4,-(A7)
00002D00  4E95      4916          jsr       (A5)
00002D02  584F      4917          addq.w    #4,A7
00002D04  2200      4918          move.l    D0,D1
00002D06  201F      4919          move.l    (A7)+,D0
00002D08  2F01      4920          move.l    D1,-(A7)
00002D0A  2F03      4921          move.l    D3,-(A7)
00002D0C  2F02      4922          move.l    D2,-(A7)
00002D0E  4EB8 284E 4923          jsr       _FillMemoryForMemTest
00002D12  DEFC 0010 4924          add.w     #16,A7
                    4925   ; break;
00002D16  6000 0072 4926          bra       MemoryTest_27
                    4927   MemoryTest_29:
                    4928   ; case 2: FillMemoryForMemTest(start_val, end_val, Get4HexDigitsForMemTest(digit), 2);
00002D1A  4878 0002 4929          pea       2
00002D1E  2F00      4930          move.l    D0,-(A7)
00002D20  4884      4931          ext.w     D4
00002D22  48C4      4932          ext.l     D4
00002D24  2F04      4933          move.l    D4,-(A7)
00002D26  4EB8 25AE 4934          jsr       _Get4HexDigitsForMemTest
00002D2A  584F      4935          addq.w    #4,A7
00002D2C  2200      4936          move.l    D0,D1
00002D2E  201F      4937          move.l    (A7)+,D0
00002D30  2F01      4938          move.l    D1,-(A7)
00002D32  2F03      4939          move.l    D3,-(A7)
00002D34  2F02      4940          move.l    D2,-(A7)
00002D36  4EB8 284E 4941          jsr       _FillMemoryForMemTest
00002D3A  DEFC 0010 4942          add.w     #16,A7
                    4943   ; break;
00002D3E  6000 004A 4944          bra       MemoryTest_27
                    4945   MemoryTest_30:
                    4946   ; case 3: FillMemoryForMemTest(start_val, end_val, Get8HexDigitsForMemTest(digit), 3);
00002D42  4878 0003 4947          pea       3
00002D46  2F00      4948          move.l    D0,-(A7)
00002D48  4884      4949          ext.w     D4
00002D4A  48C4      4950          ext.l     D4
00002D4C  2F04      4951          move.l    D4,-(A7)
00002D4E  4EB8 2600 4952          jsr       _Get8HexDigitsForMemTest
00002D52  584F      4953          addq.w    #4,A7
00002D54  2200      4954          move.l    D0,D1
00002D56  201F      4955          move.l    (A7)+,D0
00002D58  2F01      4956          move.l    D1,-(A7)
00002D5A  2F03      4957          move.l    D3,-(A7)
00002D5C  2F02      4958          move.l    D2,-(A7)
00002D5E  4EB8 284E 4959          jsr       _FillMemoryForMemTest
00002D62  DEFC 0010 4960          add.w     #16,A7
                    4961   ; break;
00002D66  6022      4962          bra.s     MemoryTest_27
                    4963   MemoryTest_26:
                    4964   ; default: FillMemoryForMemTest(start_val, end_val, Get2HexDigitsForMemTest(digit), 1);;
00002D68  4878 0001 4965          pea       1
00002D6C  2F00      4966          move.l    D0,-(A7)
00002D6E  4884      4967          ext.w     D4
00002D70  48C4      4968          ext.l     D4
00002D72  2F04      4969          move.l    D4,-(A7)
00002D74  4E95      4970          jsr       (A5)
00002D76  584F      4971          addq.w    #4,A7
00002D78  2200      4972          move.l    D0,D1
00002D7A  201F      4973          move.l    (A7)+,D0
00002D7C  2F01      4974          move.l    D1,-(A7)
00002D7E  2F03      4975          move.l    D3,-(A7)
00002D80  2F02      4976          move.l    D2,-(A7)
00002D82  4EB8 284E 4977          jsr       _FillMemoryForMemTest
00002D86  DEFC 0010 4978          add.w     #16,A7
                    4979   MemoryTest_27:
                    4980   ; }
                    4981   ; printf("\r\nFinished writing to SRAM .");
00002D8A  4879 0000 4982          pea       @m68kde~1_150.L
00002D8E  5898      
00002D90  4E92      4983          jsr       (A2)
00002D92  584F      4984          addq.w    #4,A7
                    4985   ; printf("\r\nCheck SRAM content");
00002D94  4879 0000 4986          pea       @m68kde~1_151.L
00002D98  58B6      
00002D9A  4E92      4987          jsr       (A2)
00002D9C  584F      4988          addq.w    #4,A7
                    4989   ; printf("\r\nReading from SRAM ...");
00002D9E  4879 0000 4990          pea       @m68kde~1_152.L
00002DA2  58CC      
00002DA4  4E92      4991          jsr       (A2)
00002DA6  584F      4992          addq.w    #4,A7
                    4993   ; printf("\r\n............................................................................................................");
00002DA8  4879 0000 4994          pea       @m68kde~1_149.L
00002DAC  5828      
00002DAE  4E92      4995          jsr       (A2)
00002DB0  584F      4996          addq.w    #4,A7
                    4997   ; printf("\r\n............................................................................................................");
00002DB2  4879 0000 4998          pea       @m68kde~1_149.L
00002DB6  5828      
00002DB8  4E92      4999          jsr       (A2)
00002DBA  584F      5000          addq.w    #4,A7
                    5001   ; printf("\r\n............................................................................................................");
00002DBC  4879 0000 5002          pea       @m68kde~1_149.L
00002DC0  5828      
00002DC2  4E92      5003          jsr       (A2)
00002DC4  584F      5004          addq.w    #4,A7
                    5005   ; printf("\r\n....................... begin reading");
00002DC6  4879 0000 5006          pea       @m68kde~1_153.L
00002DCA  58E4      
00002DCC  4E92      5007          jsr       (A2)
00002DCE  584F      5008          addq.w    #4,A7
                    5009   ; switch (test_config) {
00002DD0  0C85 0000 5010          cmp.l     #2,D5
00002DD4  0002      
00002DD6  6700 0042 5011          beq       MemoryTest_36
00002DDA  6E0C      5012          bgt.s     MemoryTest_39
00002DDC  0C85 0000 5013          cmp.l     #1,D5
00002DE0  0001      
00002DE2  6712      5014          beq.s     MemoryTest_35
00002DE4  6000 007E 5015          bra       MemoryTest_33
                    5016   MemoryTest_39:
00002DE8  0C85 0000 5017          cmp.l     #3,D5
00002DEC  0003      
00002DEE  6700 0050 5018          beq       MemoryTest_37
00002DF2  6000 0070 5019          bra       MemoryTest_33
                    5020   MemoryTest_35:
                    5021   ; case 1: ReadMemoryForMemTest(start_val, end_val, Get2HexDigitsForMemTest(digit), 1);
00002DF6  4878 0001 5022          pea       1
00002DFA  2F00      5023          move.l    D0,-(A7)
00002DFC  4884      5024          ext.w     D4
00002DFE  48C4      5025          ext.l     D4
00002E00  2F04      5026          move.l    D4,-(A7)
00002E02  4E95      5027          jsr       (A5)
00002E04  584F      5028          addq.w    #4,A7
00002E06  2200      5029          move.l    D0,D1
00002E08  201F      5030          move.l    (A7)+,D0
00002E0A  2F01      5031          move.l    D1,-(A7)
00002E0C  2F03      5032          move.l    D3,-(A7)
00002E0E  2F02      5033          move.l    D2,-(A7)
00002E10  4E94      5034          jsr       (A4)
00002E12  DEFC 0010 5035          add.w     #16,A7
                    5036   ; break;
00002E16  6000 006C 5037          bra       MemoryTest_34
                    5038   MemoryTest_36:
                    5039   ; case 2: ReadMemoryForMemTest(start_val, end_val, Get4HexDigitsForMemTest(digit), 2);
00002E1A  4878 0002 5040          pea       2
00002E1E  2F00      5041          move.l    D0,-(A7)
00002E20  4884      5042          ext.w     D4
00002E22  48C4      5043          ext.l     D4
00002E24  2F04      5044          move.l    D4,-(A7)
00002E26  4EB8 25AE 5045          jsr       _Get4HexDigitsForMemTest
00002E2A  584F      5046          addq.w    #4,A7
00002E2C  2200      5047          move.l    D0,D1
00002E2E  201F      5048          move.l    (A7)+,D0
00002E30  2F01      5049          move.l    D1,-(A7)
00002E32  2F03      5050          move.l    D3,-(A7)
00002E34  2F02      5051          move.l    D2,-(A7)
00002E36  4E94      5052          jsr       (A4)
00002E38  DEFC 0010 5053          add.w     #16,A7
                    5054   ; break;
00002E3C  6000 0046 5055          bra       MemoryTest_34
                    5056   MemoryTest_37:
                    5057   ; case 3: ReadMemoryForMemTest(start_val, end_val, Get8HexDigitsForMemTest(digit), 3);
00002E40  4878 0003 5058          pea       3
00002E44  2F00      5059          move.l    D0,-(A7)
00002E46  4884      5060          ext.w     D4
00002E48  48C4      5061          ext.l     D4
00002E4A  2F04      5062          move.l    D4,-(A7)
00002E4C  4EB8 2600 5063          jsr       _Get8HexDigitsForMemTest
00002E50  584F      5064          addq.w    #4,A7
00002E52  2200      5065          move.l    D0,D1
00002E54  201F      5066          move.l    (A7)+,D0
00002E56  2F01      5067          move.l    D1,-(A7)
00002E58  2F03      5068          move.l    D3,-(A7)
00002E5A  2F02      5069          move.l    D2,-(A7)
00002E5C  4E94      5070          jsr       (A4)
00002E5E  DEFC 0010 5071          add.w     #16,A7
                    5072   ; break;
00002E62  6020      5073          bra.s     MemoryTest_34
                    5074   MemoryTest_33:
                    5075   ; default: ReadMemoryForMemTest(start_val, end_val, Get2HexDigitsForMemTest(digit), 1);;
00002E64  4878 0001 5076          pea       1
00002E68  2F00      5077          move.l    D0,-(A7)
00002E6A  4884      5078          ext.w     D4
00002E6C  48C4      5079          ext.l     D4
00002E6E  2F04      5080          move.l    D4,-(A7)
00002E70  4E95      5081          jsr       (A5)
00002E72  584F      5082          addq.w    #4,A7
00002E74  2200      5083          move.l    D0,D1
00002E76  201F      5084          move.l    (A7)+,D0
00002E78  2F01      5085          move.l    D1,-(A7)
00002E7A  2F03      5086          move.l    D3,-(A7)
00002E7C  2F02      5087          move.l    D2,-(A7)
00002E7E  4E94      5088          jsr       (A4)
00002E80  DEFC 0010 5089          add.w     #16,A7
                    5090   MemoryTest_34:
                    5091   ; }
                    5092   ; printf("\r\nFinished reading from SRAM ...");
00002E84  4879 0000 5093          pea       @m68kde~1_154.L
00002E88  590C      
00002E8A  4E92      5094          jsr       (A2)
00002E8C  584F      5095          addq.w    #4,A7
                    5096   ; printf("\r\nend of program ...");
00002E8E  4879 0000 5097          pea       @m68kde~1_155.L
00002E92  592E      
00002E94  4E92      5098          jsr       (A2)
00002E96  584F      5099          addq.w    #4,A7
                    5100   ; printf("\r\n............................................................................................................");
00002E98  4879 0000 5101          pea       @m68kde~1_149.L
00002E9C  5828      
00002E9E  4E92      5102          jsr       (A2)
00002EA0  584F      5103          addq.w    #4,A7
                    5104   ; printf("\r\n............................................................................................................");
00002EA2  4879 0000 5105          pea       @m68kde~1_149.L
00002EA6  5828      
00002EA8  4E92      5106          jsr       (A2)
00002EAA  584F      5107          addq.w    #4,A7
00002EAC  4CDF 3CFC 5108          movem.l   (A7)+,D2/D3/D4/D5/D6/D7/A2/A3/A4/A5
00002EB0  4E5E      5109          unlk      A6
00002EB2  4E75      5110          rts
                    5111   ; }
                    5112   ; void main(void)
                    5113   ; {
                    5114   _main:
00002EB4  4E56 FFF4 5115          link      A6,#-12
00002EB8  48E7 3030 5116          movem.l   D2/D3/A2/A3,-(A7)
00002EBC  45F8 0A30 5117          lea       _InstallExceptionHandler.L,A2
00002EC0  47F9 0000 5118          lea       _printf.L,A3
00002EC4  3C12      
                    5119   ; char c ;
                    5120   ; int i, j ;
                    5121   ; char *BugMessage = "DE1-68k Bug V1.77";
00002EC6  41F9 0000 5122          lea       @m68kde~1_156.L,A0
00002ECA  5944      
00002ECC  2608      5123          move.l    A0,D3
                    5124   ; char *CopyrightMessage = "Copyright (C) PJ Davies 2016";
00002ECE  41F9 0000 5125          lea       @m68kde~1_157.L,A0
00002ED2  5956      
00002ED4  2D48 FFFC 5126          move.l    A0,-4(A6)
                    5127   ; KillAllBreakPoints() ;
00002ED8  4EB8 1C1C 5128          jsr       _KillAllBreakPoints
                    5129   ; i = x = y = z = PortA_Count = 0;
00002EDC  42B9 0B00 5130          clr.l     _PortA_Count.L
00002EE0  00D4      
00002EE2  42B9 0B00 5131          clr.l     _z.L
00002EE6  00D0      
00002EE8  42B9 0B00 5132          clr.l     _y.L
00002EEC  00CC      
00002EEE  42B9 0B00 5133          clr.l     _x.L
00002EF2  00C8      
00002EF4  4282      5134          clr.l     D2
                    5135   ; Trace = GoFlag = 0;                       // used in tracing/single stepping
00002EF6  42B9 0B00 5136          clr.l     _GoFlag.L
00002EFA  00DC      
00002EFC  42B9 0B00 5137          clr.l     _Trace.L
00002F00  00D8      
                    5138   ; Echo = 1 ;
00002F02  23FC 0000 5139          move.l    #1,_Echo.L
00002F06  0001 0B00 
00002F0A  00E0      
                    5140   ; d0=d1=d2=d3=d4=d5=d6=d7=0 ;
00002F0C  42B9 0B00 5141          clr.l     _d7.L
00002F10  0100      
00002F12  42B9 0B00 5142          clr.l     _d6.L
00002F16  00FC      
00002F18  42B9 0B00 5143          clr.l     _d5.L
00002F1C  00F8      
00002F1E  42B9 0B00 5144          clr.l     _d4.L
00002F22  00F4      
00002F24  42B9 0B00 5145          clr.l     _d3.L
00002F28  00F0      
00002F2A  42B9 0B00 5146          clr.l     _d2.L
00002F2E  00EC      
00002F30  42B9 0B00 5147          clr.l     _d1.L
00002F34  00E8      
00002F36  42B9 0B00 5148          clr.l     _d0.L
00002F3A  00E4      
                    5149   ; a0=a1=a2=a3=a4=a5=a6=0 ;
00002F3C  42B9 0B00 5150          clr.l     _a6.L
00002F40  011C      
00002F42  42B9 0B00 5151          clr.l     _a5.L
00002F46  0118      
00002F48  42B9 0B00 5152          clr.l     _a4.L
00002F4C  0114      
00002F4E  42B9 0B00 5153          clr.l     _a3.L
00002F52  0110      
00002F54  42B9 0B00 5154          clr.l     _a2.L
00002F58  010C      
00002F5A  42B9 0B00 5155          clr.l     _a1.L
00002F5E  0108      
00002F60  42B9 0B00 5156          clr.l     _a0.L
00002F64  0104      
                    5157   ; PC = ProgramStart, SSP=TopOfStack, USP = TopOfStack;
00002F66  23FC 0800 5158          move.l    #134217728,_PC.L
00002F6A  0000 0B00 
00002F6E  0120      
00002F70  23FC 0C00 5159          move.l    #201326592,_SSP.L
00002F74  0000 0B00 
00002F78  0124      
00002F7A  23FC 0C00 5160          move.l    #201326592,_USP.L
00002F7E  0000 0B00 
00002F82  0128      
                    5161   ; SR = 0x2000;                            // clear interrupts enable tracing  uses IRQ6
00002F84  33FC 2000 5162          move.w    #8192,_SR.L
00002F88  0B00 012C 
                    5163   ; // Initialise Breakpoint variables
                    5164   ; for(i = 0; i < 8; i++)  {
00002F8C  4282      5165          clr.l     D2
                    5166   main_1:
00002F8E  0C82 0000 5167          cmp.l     #8,D2
00002F92  0008      
00002F94  6C00 004C 5168          bge       main_3
                    5169   ; BreakPointAddress[i] = 0;               //array of 8 breakpoint addresses
00002F98  2002      5170          move.l    D2,D0
00002F9A  E588      5171          lsl.l     #2,D0
00002F9C  41F9 0B00 5172          lea       _BreakPointAddress.L,A0
00002FA0  012E      
00002FA2  42B0 0800 5173          clr.l     0(A0,D0.L)
                    5174   ; WatchPointAddress[i] = 0 ;
00002FA6  2002      5175          move.l    D2,D0
00002FA8  E588      5176          lsl.l     #2,D0
00002FAA  41F9 0B00 5177          lea       _WatchPointAddress.L,A0
00002FAE  0182      
00002FB0  42B0 0800 5178          clr.l     0(A0,D0.L)
                    5179   ; BreakPointInstruction[i] = 0;           // to hold the instruction at the break point
00002FB4  2002      5180          move.l    D2,D0
00002FB6  E388      5181          lsl.l     #1,D0
00002FB8  41F9 0B00 5182          lea       _BreakPointInstruction.L,A0
00002FBC  014E      
00002FBE  4270 0800 5183          clr.w     0(A0,D0.L)
                    5184   ; BreakPointSetOrCleared[i] = 0;          // indicates if break point set
00002FC2  2002      5185          move.l    D2,D0
00002FC4  E588      5186          lsl.l     #2,D0
00002FC6  41F9 0B00 5187          lea       _BreakPointSetOrCleared.L,A0
00002FCA  015E      
00002FCC  42B0 0800 5188          clr.l     0(A0,D0.L)
                    5189   ; WatchPointSetOrCleared[i] = 0;
00002FD0  2002      5190          move.l    D2,D0
00002FD2  E588      5191          lsl.l     #2,D0
00002FD4  41F9 0B00 5192          lea       _WatchPointSetOrCleared.L,A0
00002FD8  01A2      
00002FDA  42B0 0800 5193          clr.l     0(A0,D0.L)
00002FDE  5282      5194          addq.l    #1,D2
00002FE0  60AC      5195          bra       main_1
                    5196   main_3:
                    5197   ; }
                    5198   ; Init_RS232() ;     // initialise the RS232 port
00002FE2  4EB8 0B12 5199          jsr       _Init_RS232
                    5200   ; Init_LCD() ;
00002FE6  4EB8 095E 5201          jsr       _Init_LCD
                    5202   ; for( i = 32; i < 48; i++)
00002FEA  7420      5203          moveq     #32,D2
                    5204   main_4:
00002FEC  0C82 0000 5205          cmp.l     #48,D2
00002FF0  0030      
00002FF2  6C0E      5206          bge.s     main_6
                    5207   ; InstallExceptionHandler(UnhandledTrap, i) ;		        // install Trap exception handler on vector 32-47
00002FF4  2F02      5208          move.l    D2,-(A7)
00002FF6  4878 2494 5209          pea       _UnhandledTrap.L
00002FFA  4E92      5210          jsr       (A2)
00002FFC  504F      5211          addq.w    #8,A7
00002FFE  5282      5212          addq.l    #1,D2
00003000  60EA      5213          bra       main_4
                    5214   main_6:
                    5215   ; InstallExceptionHandler(menu, 47) ;		                   // TRAP #15 call debug and end program
00003002  4878 002F 5216          pea       47
00003006  4878 216E 5217          pea       _menu.L
0000300A  4E92      5218          jsr       (A2)
0000300C  504F      5219          addq.w    #8,A7
                    5220   ; InstallExceptionHandler(UnhandledIRQ1, 25) ;		      // install handler for interrupts
0000300E  4878 0019 5221          pea       25
00003012  4878 243A 5222          pea       _UnhandledIRQ1.L
00003016  4E92      5223          jsr       (A2)
00003018  504F      5224          addq.w    #8,A7
                    5225   ; InstallExceptionHandler(UnhandledIRQ2, 26) ;		      // install handler for interrupts
0000301A  4878 001A 5226          pea       26
0000301E  4878 2446 5227          pea       _UnhandledIRQ2.L
00003022  4E92      5228          jsr       (A2)
00003024  504F      5229          addq.w    #8,A7
                    5230   ; InstallExceptionHandler(UnhandledIRQ3, 27) ;		      // install handler for interrupts
00003026  4878 001B 5231          pea       27
0000302A  4878 2452 5232          pea       _UnhandledIRQ3.L
0000302E  4E92      5233          jsr       (A2)
00003030  504F      5234          addq.w    #8,A7
                    5235   ; InstallExceptionHandler(UnhandledIRQ4, 28) ;		      // install handler for interrupts
00003032  4878 001C 5236          pea       28
00003036  4878 245E 5237          pea       _UnhandledIRQ4.L
0000303A  4E92      5238          jsr       (A2)
0000303C  504F      5239          addq.w    #8,A7
                    5240   ; InstallExceptionHandler(UnhandledIRQ5, 29) ;		      // install handler for interrupts
0000303E  4878 001D 5241          pea       29
00003042  4878 246A 5242          pea       _UnhandledIRQ5.L
00003046  4E92      5243          jsr       (A2)
00003048  504F      5244          addq.w    #8,A7
                    5245   ; InstallExceptionHandler(UnhandledIRQ6, 30) ;		      // install handler for interrupts
0000304A  4878 001E 5246          pea       30
0000304E  4878 2476 5247          pea       _UnhandledIRQ6.L
00003052  4E92      5248          jsr       (A2)
00003054  504F      5249          addq.w    #8,A7
                    5250   ; InstallExceptionHandler(UnhandledIRQ7, 31) ;		      // install handler for interrupts
00003056  4878 001F 5251          pea       31
0000305A  4878 2488 5252          pea       _UnhandledIRQ7.L
0000305E  4E92      5253          jsr       (A2)
00003060  504F      5254          addq.w    #8,A7
                    5255   ; InstallExceptionHandler(HandleBreakPoint, 46) ;		           // install Trap 14 Break Point exception handler on vector 46
00003062  4878 002E 5256          pea       46
00003066  4878 1EAA 5257          pea       _HandleBreakPoint.L
0000306A  4E92      5258          jsr       (A2)
0000306C  504F      5259          addq.w    #8,A7
                    5260   ; InstallExceptionHandler(DumpRegistersandPause, 29) ;		   // install TRACE handler for IRQ5 on vector 29
0000306E  4878 001D 5261          pea       29
00003072  4878 158A 5262          pea       _DumpRegistersandPause.L
00003076  4E92      5263          jsr       (A2)
00003078  504F      5264          addq.w    #8,A7
                    5265   ; InstallExceptionHandler(BusError,2) ;                          // install Bus error handler
0000307A  4878 0002 5266          pea       2
0000307E  4878 24A2 5267          pea       _BusError.L
00003082  4E92      5268          jsr       (A2)
00003084  504F      5269          addq.w    #8,A7
                    5270   ; InstallExceptionHandler(AddressError,3) ;                      // install address error handler (doesn't work on soft core 68k implementation)
00003086  4878 0003 5271          pea       3
0000308A  4878 24B0 5272          pea       _AddressError.L
0000308E  4E92      5273          jsr       (A2)
00003090  504F      5274          addq.w    #8,A7
                    5275   ; InstallExceptionHandler(IllegalInstruction,4) ;                // install illegal instruction exception handler
00003092  4878 0004 5276          pea       4
00003096  4878 24BE 5277          pea       _IllegalInstruction.L
0000309A  4E92      5278          jsr       (A2)
0000309C  504F      5279          addq.w    #8,A7
                    5280   ; InstallExceptionHandler(Dividebyzero,5) ;                      // install /0 exception handler
0000309E  4878 0005 5281          pea       5
000030A2  4878 24CC 5282          pea       _Dividebyzero.L
000030A6  4E92      5283          jsr       (A2)
000030A8  504F      5284          addq.w    #8,A7
                    5285   ; InstallExceptionHandler(Check,6) ;                             // install check instruction exception handler
000030AA  4878 0006 5286          pea       6
000030AE  4878 24DA 5287          pea       _Check.L
000030B2  4E92      5288          jsr       (A2)
000030B4  504F      5289          addq.w    #8,A7
                    5290   ; InstallExceptionHandler(Trapv,7) ;                             // install trapv instruction exception handler
000030B6  4878 0007 5291          pea       7
000030BA  4878 24E8 5292          pea       _Trapv.L
000030BE  4E92      5293          jsr       (A2)
000030C0  504F      5294          addq.w    #8,A7
                    5295   ; InstallExceptionHandler(PrivError,8) ;                         // install Priv Violation exception handler
000030C2  4878 0008 5296          pea       8
000030C6  4878 24F6 5297          pea       _PrivError.L
000030CA  4E92      5298          jsr       (A2)
000030CC  504F      5299          addq.w    #8,A7
                    5300   ; InstallExceptionHandler(UnitIRQ,15) ;                          // install uninitialised IRQ exception handler
000030CE  4878 000F 5301          pea       15
000030D2  4878 2504 5302          pea       _UnitIRQ.L
000030D6  4E92      5303          jsr       (A2)
000030D8  504F      5304          addq.w    #8,A7
                    5305   ; InstallExceptionHandler(Check,24) ;                            // install spurious IRQ exception handler
000030DA  4878 0018 5306          pea       24
000030DE  4878 24DA 5307          pea       _Check.L
000030E2  4E92      5308          jsr       (A2)
000030E4  504F      5309          addq.w    #8,A7
                    5310   ; FlushKeyboard() ;                        // dump unread characters from keyboard
000030E6  4EB8 0BA6 5311          jsr       _FlushKeyboard
                    5312   ; TraceException = 0 ;                     // clear trace exception port to remove any software generated single step/trace
000030EA  4239 0040 5313          clr.b     4194314
000030EE  000A      
                    5314   ; // test for auto flash boot and run from Flash by reading switch 9 on DE1-soc board. If set, copy program from flash into Dram and run
                    5315   ; while(((char)(PortB & 0x02)) == (char)(0x02))    {
                    5316   main_7:
000030F0  1039 0040 5317          move.b    4194306,D0
000030F4  0002      
000030F6  C03C 0002 5318          and.b     #2,D0
000030FA  0C00 0002 5319          cmp.b     #2,D0
000030FE  662A      5320          bne.s     main_9
                    5321   ; LoadFromFlashChip();
00003100  4EB8 10C6 5322          jsr       _LoadFromFlashChip
                    5323   ; printf("\r\nRunning.....") ;
00003104  4879 0000 5324          pea       @m68kde~1_158.L
00003108  5974      
0000310A  4E93      5325          jsr       (A3)
0000310C  584F      5326          addq.w    #4,A7
                    5327   ; Oline1("Running.....") ;
0000310E  4879 0000 5328          pea       @m68kde~1_159.L
00003112  5984      
00003114  4EB8 0A02 5329          jsr       _Oline1
00003118  584F      5330          addq.w    #4,A7
                    5331   ; GoFlag = 1;
0000311A  23FC 0000 5332          move.l    #1,_GoFlag.L
0000311E  0001 0B00 
00003122  00DC      
                    5333   ; go() ;
00003124  4EB8 08B8 5334          jsr       _go
00003128  60C6      5335          bra       main_7
                    5336   main_9:
                    5337   ; }
                    5338   ; // otherwise start the debug monitor
                    5339   ; Oline0(BugMessage) ;
0000312A  2F03      5340          move.l    D3,-(A7)
0000312C  4EB8 09D4 5341          jsr       _Oline0
00003130  584F      5342          addq.w    #4,A7
                    5343   ; Oline1("By: PJ Davies") ;
00003132  4879 0000 5344          pea       @m68kde~1_160.L
00003136  5992      
00003138  4EB8 0A02 5345          jsr       _Oline1
0000313C  584F      5346          addq.w    #4,A7
                    5347   ; printf("\r\n%s", BugMessage) ;
0000313E  2F03      5348          move.l    D3,-(A7)
00003140  4879 0000 5349          pea       @m68kde~1_161.L
00003144  59A0      
00003146  4E93      5350          jsr       (A3)
00003148  504F      5351          addq.w    #8,A7
                    5352   ; printf("\r\n%s", CopyrightMessage) ;
0000314A  2F2E FFFC 5353          move.l    -4(A6),-(A7)
0000314E  4879 0000 5354          pea       @m68kde~1_161.L
00003152  59A0      
00003154  4E93      5355          jsr       (A3)
00003156  504F      5356          addq.w    #8,A7
                    5357   ; printf("\r\nNancy Makar - 33464918 and Steven Chin - 40108540 - version 1");
00003158  4879 0000 5358          pea       @m68kde~1_162.L
0000315C  59A6      
0000315E  4E93      5359          jsr       (A3)
00003160  584F      5360          addq.w    #4,A7
                    5361   ; menu();
00003162  4EB8 216E 5362          jsr       _menu
00003166  4CDF 0C0C 5363          movem.l   (A7)+,D2/D3/A2/A3
0000316A  4E5E      5364          unlk      A6
0000316C  4E75      5365          rts
                    5366   ; }
                    5367   _strcpy:
0000316E  206F 0004 5368          move.l    (4,A7),A0
00003172  226F 0008 5369          move.l    (8,A7),A1
00003176  2008      5370          move.l    A0,D0
                    5371   strcpy_1:
00003178  10D9      5372          move.b    (A1)+,(A0)+
0000317A  66FC      5373          bne       strcpy_1
0000317C  4E75      5374          rts
                    5375   ULDIV:
0000317E  4E56 0000 5376          link    A6,#0
00003182  48E7 C000 5377          movem.l D0/D1,-(A7)
00003186  222E 0008 5378          move.l  8(A6),D1
0000318A  202E 000C 5379          move.l  12(A6),D0
0000318E  6036      5380          bra.s   ldiv_3
                    5381   LDIV:
00003190  4E56 0000 5382          link    A6,#0
00003194  48E7 C000 5383          movem.l D0/D1,-(A7)
00003198  222E 0008 5384          move.l  8(A6),D1
0000319C  202E 000C 5385          move.l  12(A6),D0
000031A0  4A80      5386          tst.l   D0
000031A2  6A0E      5387          bpl.s   ldiv_1
000031A4  4480      5388          neg.l   D0
000031A6  4A81      5389          tst.l   D1
000031A8  6A14      5390          bpl.s   ldiv_2
000031AA  4481      5391          neg.l   D1
000031AC  612A      5392          bsr.s   dodiv
000031AE  4481      5393          neg.l   D1
000031B0  6016      5394          bra.s   ldiv_4
                    5395   ldiv_1:
000031B2  4A81      5396          tst.l   D1
000031B4  6A10      5397          bpl.s   ldiv_3
000031B6  4481      5398          neg.l   D1
000031B8  611E      5399          bsr.s   dodiv
000031BA  4480      5400          neg.l   D0
000031BC  600A      5401          bra.s   ldiv_4
                    5402   ldiv_2:
000031BE  6118      5403          bsr.s   dodiv
000031C0  4480      5404          neg.l   D0
000031C2  4481      5405          neg.l   D1
000031C4  6002      5406          bra.s   ldiv_4
                    5407   ldiv_3:
000031C6  6110      5408          bsr.s   dodiv
                    5409   ldiv_4:
000031C8  2D40 0008 5410          move.l  D0,8(A6)
000031CC  2D41 000C 5411          move.l  D1,12(A6)
000031D0  4CDF 0003 5412          movem.l (A7)+,D0/D1
000031D4  4E5E      5413          unlk    A6
000031D6  4E75      5414          rts
                    5415   dodiv:
000031D8  0C81 0000 5416          cmpi.l  #$FFFF,D1
000031DC  FFFF      
000031DE  6236      5417          bhi.s   dodiv_2
000031E0  0C80 0000 5418          cmpi.l  #$FFFF,D0
000031E4  FFFF      
000031E6  6210      5419          bhi.s   dodiv_1
000031E8  80C1      5420          divu    D1,D0
000031EA  2200      5421          move.l  D0,D1
000031EC  4241      5422          clr.w   D1
000031EE  4841      5423          swap    D1
000031F0  0280 0000 5424          andi.l  #$FFFF,D0
000031F4  FFFF      
000031F6  4E75      5425          rts
                    5426   dodiv_1:
000031F8  48A7 A000 5427          movem.w D0/D2,-(A7)
000031FC  4240      5428          clr.w   D0
000031FE  4840      5429          swap    D0
00003200  80C1      5430          divu    D1,D0
00003202  3400      5431          move.w  D0,D2
00003204  301F      5432          move.w  (A7)+,D0
00003206  80C1      5433          divu    D1,D0
00003208  4840      5434          swap    D0
0000320A  4281      5435          clr.l   D1
0000320C  3200      5436          move.w  D0,D1
0000320E  3002      5437          move.w  D2,D0
00003210  4840      5438          swap    D0
00003212  341F      5439          move.w  (A7)+,D2
00003214  4E75      5440          rts
                    5441   dodiv_2:
00003216  48E7 3800 5442          movem.l D2/D3/D4,-(A7)
0000321A  2401      5443          move.l  D1,D2
0000321C  4242      5444          clr.w   D2
0000321E  4842      5445          swap    D2
00003220  5282      5446          addq.l  #1,D2
00003222  2600      5447          move.l  D0,D3
00003224  2801      5448          move.l  D1,D4
00003226  2202      5449          move.l  D2,D1
00003228  61CE      5450          bsr.s   dodiv_1
0000322A  2204      5451          move.l  D4,D1
0000322C  82C2      5452          divu    D2,D1
0000322E  80C1      5453          divu    D1,D0
00003230  0280 0000 5454          andi.l  #$FFFF,D0
00003234  FFFF      
                    5455   dodiv_3:
00003236  2204      5456          move.l  D4,D1
00003238  2404      5457          move.l  D4,D2
0000323A  4842      5458          swap    D2
0000323C  C2C0      5459          mulu    D0,D1
0000323E  C4C0      5460          mulu    D0,D2
00003240  4842      5461          swap    D2
00003242  D282      5462          add.l   D2,D1
00003244  9283      5463          sub.l   D3,D1
00003246  620A      5464          bhi.s   dodiv_4
00003248  4481      5465          neg.l   D1
0000324A  B881      5466          cmp.l   D1,D4
0000324C  6208      5467          bhi.s   dodiv_5
0000324E  5280      5468          addq.l  #1,D0
00003250  60E4      5469          bra.s   dodiv_3
                    5470   dodiv_4:
00003252  5380      5471          subq.l  #1,D0
00003254  60E0      5472          bra.s   dodiv_3
                    5473   dodiv_5:
00003256  4CDF 001C 5474          movem.l (A7)+,D2/D3/D4
0000325A  4E75      5475          rts
                    5476   _strlen:
0000325C  206F 0004 5477          move.l    (4,A7),A0
00003260  2248      5478          move.l    A0,A1
                    5479   strlen_1:
00003262  4A19      5480          tst.b     (A1)+
00003264  66FC      5481          bne       strlen_1
00003266  2009      5482          move.l    A1,D0
00003268  9088      5483          sub.l     A0,D0
0000326A  5380      5484          subq.l    #1,D0
0000326C  4E75      5485          rts
                    5486   _putch:
0000326E  4E56 0000 5487          link      A6,#0
00003272  48E7 2000 5488          movem.l   D2,-(A7)
00003276  242E 0008 5489          move.l    8(A6),D2
0000327A  0C82 0000 5490          cmp.l     #10,D2
0000327E  000A      
00003280  660A      5491          bne.s     putch_1
00003282  4878 000D 5492          pea       13
00003286  6100 D8B4 5493          bsr       __putch
0000328A  584F      5494          addq.w    #4,A7
                    5495   putch_1:
0000328C  2F02      5496          move.l    D2,-(A7)
0000328E  6100 D8AC 5497          bsr       __putch
00003292  584F      5498          addq.w    #4,A7
00003294  2002      5499          move.l    D2,D0
00003296  4CDF 0004 5500          movem.l   (A7)+,D2
0000329A  4E5E      5501          unlk      A6
0000329C  4E75      5502          rts
                    5503   _getch:
0000329E  48E7 2000 5504          movem.l   D2,-(A7)
000032A2  2439 0B00 5505          move.l    __ungetbuf,D2
000032A6  00C0      
000032A8  2039 0B00 5506          move.l    __ungetbuf,D0
000032AC  00C0      
000032AE  0C80 FFFF 5507          cmp.l     #-1,D0
000032B2  FFFF      
000032B4  670C      5508          beq.s     getch_1
000032B6  23FC FFFF 5509          move.l    #-1,__ungetbuf
000032BA  FFFF 0B00 
000032BE  00C0      
000032C0  6010      5510          bra.s     getch_3
                    5511   getch_1:
000032C2  6100 D8A4 5512          bsr       __getch
000032C6  2400      5513          move.l    D0,D2
000032C8  0C80 0000 5514          cmp.l     #13,D0
000032CC  000D      
000032CE  6602      5515          bne.s     getch_3
000032D0  740A      5516          moveq     #10,D2
                    5517   getch_3:
000032D2  2002      5518          move.l    D2,D0
000032D4  4CDF 0004 5519          movem.l   (A7)+,D2
000032D8  4E75      5520          rts
                    5521   _tolower:
000032DA  4E56 0000 5522          link      A6,#0
000032DE  48E7 2000 5523          movem.l   D2,-(A7)
000032E2  242E 0008 5524          move.l    8(A6),D2
000032E6  0C82 0000 5525          cmp.l     #65,D2
000032EA  0041      
000032EC  6D0E      5526          blt.s     tolower_1
000032EE  0C82 0000 5527          cmp.l     #90,D2
000032F2  005A      
000032F4  6E06      5528          bgt.s     tolower_1
000032F6  84BC 0000 5529          or.l      #32,D2
000032FA  0020      
                    5530   tolower_1:
000032FC  2002      5531          move.l    D2,D0
000032FE  4CDF 0004 5532          movem.l   (A7)+,D2
00003302  4E5E      5533          unlk      A6
00003304  4E75      5534          rts
                    5535   _sprintf:
00003306  4E56 FFFC 5536          link      A6,#-4
0000330A  48E7 2000 5537          movem.l   D2,-(A7)
0000330E  41EE 000C 5538          lea       12(A6),A0
00003312  5848      5539          addq.w    #4,A0
00003314  2408      5540          move.l    A0,D2
00003316  2F02      5541          move.l    D2,-(A7)
00003318  2F2E 000C 5542          move.l    12(A6),-(A7)
0000331C  2F2E 0008 5543          move.l    8(A6),-(A7)
00003320  6100 09D4 5544          bsr       _vsprintf
00003324  DEFC 000C 5545          add.w     #12,A7
00003328  2D40 FFFC 5546          move.l    D0,-4(A6)
0000332C  4282      5547          clr.l     D2
0000332E  202E FFFC 5548          move.l    -4(A6),D0
00003332  4CDF 0004 5549          movem.l   (A7)+,D2
00003336  4E5E      5550          unlk      A6
00003338  4E75      5551          rts
                    5552   _strcat:
0000333A  206F 0004 5553          move.l    (4,A7),A0	
0000333E  226F 0008 5554          move.l    (8,A7),A1	
00003342  2008      5555          move.l    A0,D0		
                    5556   strcat_0:
00003344  4A18      5557          tst.b     (A0)+
00003346  66FC      5558          bne       strcat_0
00003348  5348      5559          subq      #1,A0
                    5560   strcat_1:
0000334A  10D9      5561          move.b    (A1)+,(A0)+
0000334C  66FC      5562          bne       strcat_1
0000334E  4E75      5563          rts
                    5564   _toupper:
00003350  4E56 0000 5565          link      A6,#0
00003354  48E7 2000 5566          movem.l   D2,-(A7)
00003358  242E 0008 5567          move.l    8(A6),D2
0000335C  0C82 0000 5568          cmp.l     #97,D2
00003360  0061      
00003362  6D0E      5569          blt.s     toupper_1
00003364  0C82 0000 5570          cmp.l     #122,D2
00003368  007A      
0000336A  6E06      5571          bgt.s     toupper_1
0000336C  C4BC 0000 5572          and.l     #95,D2
00003370  005F      
                    5573   toupper_1:
00003372  2002      5574          move.l    D2,D0
00003374  4CDF 0004 5575          movem.l   (A7)+,D2
00003378  4E5E      5576          unlk      A6
0000337A  4E75      5577          rts
                    5578   @vsscanf_scanread:
0000337C  4E56 FFFC 5579          link      A6,#-4
00003380  48E7 0020 5580          movem.l   A2,-(A7)
00003384  45F9 0000 5581          lea       @vsscanf_bufx,A2
00003388  59E6      
0000338A  4AAE 0008 5582          tst.l     8(A6)
0000338E  6722      5583          beq.s     @vsscanf_scanread_1
00003390  206E 0008 5584          move.l    8(A6),A0
00003394  58AE 0008 5585          addq.l    #4,8(A6)
00003398  2050      5586          move.l    (A0),A0
0000339A  1010      5587          move.b    (A0),D0
0000339C  4880      5588          ext.w     D0
0000339E  48C0      5589          ext.l     D0
000033A0  2D40 FFFC 5590          move.l    D0,-4(A6)
000033A4  6706      5591          beq.s     @vsscanf_scanread_3
000033A6  202E FFFC 5592          move.l    -4(A6),D0
000033AA  6002      5593          bra.s     @vsscanf_scanread_4
                    5594   @vsscanf_scanread_3:
000033AC  70FF      5595          moveq     #-1,D0
                    5596   @vsscanf_scanread_4:
000033AE  6000 0032 5597          bra       @vsscanf_scanread_5
                    5598   @vsscanf_scanread_1:
000033B2  2052      5599          move.l    (A2),A0
000033B4  1010      5600          move.b    (A0),D0
000033B6  6620      5601          bne.s     @vsscanf_scanread_6
000033B8  4879 0B00 5602          pea       @vsscanf_buf
000033BC  0546      
000033BE  6100 1038 5603          bsr       _gets
000033C2  584F      5604          addq.w    #4,A7
000033C4  2480      5605          move.l    D0,(A2)
000033C6  4879 0000 5606          pea       @vsscanf_1
000033CA  59EA      
000033CC  4879 0B00 5607          pea       @vsscanf_buf
000033D0  0546      
000033D2  6100 FF66 5608          bsr       _strcat
000033D6  504F      5609          addq.w    #8,A7
                    5610   @vsscanf_scanread_6:
000033D8  2052      5611          move.l    (A2),A0
000033DA  5292      5612          addq.l    #1,(A2)
000033DC  1010      5613          move.b    (A0),D0
000033DE  4880      5614          ext.w     D0
000033E0  48C0      5615          ext.l     D0
                    5616   @vsscanf_scanread_5:
000033E2  4CDF 0400 5617          movem.l   (A7)+,A2
000033E6  4E5E      5618          unlk      A6
000033E8  4E75      5619          rts
                    5620   @vsscanf_scanputback:
000033EA  4E56 0000 5621          link      A6,#0
000033EE  48E7 3000 5622          movem.l   D2/D3,-(A7)
000033F2  242E 000C 5623          move.l    12(A6),D2
000033F6  262E 0008 5624          move.l    8(A6),D3
000033FA  6718      5625          beq.s     @vsscanf_scanputback_1
000033FC  0C82 FFFF 5626          cmp.l     #-1,D2
00003400  FFFF      
00003402  670A      5627          beq.s     @vsscanf_scanputback_3
00003404  5983      5628          subq.l    #4,D3
00003406  2043      5629          move.l    D3,A0
00003408  2050      5630          move.l    (A0),A0
0000340A  1082      5631          move.b    D2,(A0)
0000340C  6004      5632          bra.s     @vsscanf_scanputback_4
                    5633   @vsscanf_scanputback_3:
0000340E  2043      5634          move.l    D3,A0
00003410  5390      5635          subq.l    #1,(A0)
                    5636   @vsscanf_scanputback_4:
00003412  602E      5637          bra.s     @vsscanf_scanputback_6
                    5638   @vsscanf_scanputback_1:
00003414  41F9 0B00 5639          lea       @vsscanf_buf,A0
00003418  0546      
0000341A  2008      5640          move.l    A0,D0
0000341C  B0B9 0000 5641          cmp.l     @vsscanf_bufx,D0
00003420  59E6      
00003422  6610      5642          bne.s     @vsscanf_scanputback_5
00003424  4239 0B00 5643          clr.b     @vsscanf_buf
00003428  0546      
0000342A  2F02      5644          move.l    D2,-(A7)
0000342C  6100 103C 5645          bsr       _ungetch
00003430  584F      5646          addq.w    #4,A7
00003432  600E      5647          bra.s     @vsscanf_scanputback_6
                    5648   @vsscanf_scanputback_5:
00003434  53B9 0000 5649          subq.l    #1,@vsscanf_bufx
00003438  59E6      
0000343A  2079 0000 5650          move.l    @vsscanf_bufx,A0
0000343E  59E6      
00003440  1082      5651          move.b    D2,(A0)
                    5652   @vsscanf_scanputback_6:
00003442  2002      5653          move.l    D2,D0
00003444  4CDF 000C 5654          movem.l   (A7)+,D2/D3
00003448  4E5E      5655          unlk      A6
0000344A  4E75      5656          rts
                    5657   @vsscanf_scanspace:
0000344C  4E56 0000 5658          link      A6,#0
00003450  48E7 2000 5659          movem.l   D2,-(A7)
                    5660   @vsscanf_scanspace_1:
00003454  2F2E 0008 5661          move.l    8(A6),-(A7)
00003458  6100 FF22 5662          bsr       @vsscanf_scanread
0000345C  584F      5663          addq.w    #4,A7
0000345E  2400      5664          move.l    D0,D2
00003460  206E 000C 5665          move.l    12(A6),A0
00003464  5290      5666          addq.l    #1,(A0)
00003466  2042      5667          move.l    D2,A0
00003468  43F9 0000 5668          lea       __ctype,A1
0000346C  59EC      
0000346E  1030 9801 5669          move.b    1(A0,A1.L),D0
00003472  C03C 0010 5670          and.b     #16,D0
00003476  66DC      5671          bne       @vsscanf_scanspace_1
00003478  2002      5672          move.l    D2,D0
0000347A  4CDF 0004 5673          movem.l   (A7)+,D2
0000347E  4E5E      5674          unlk      A6
00003480  4E75      5675          rts
                    5676   @vsscanf_scanselect:
00003482  4E56 0000 5677          link      A6,#0
00003486  48E7 3F20 5678          movem.l   D2/D3/D4/D5/D6/D7/A2,-(A7)
0000348A  262E 000C 5679          move.l    12(A6),D3
0000348E  2C2E 0018 5680          move.l    24(A6),D6
00003492  2E2E 0014 5681          move.l    20(A6),D7
00003496  2043      5682          move.l    D3,A0
00003498  1010      5683          move.b    (A0),D0
0000349A  4880      5684          ext.w     D0
0000349C  48C0      5685          ext.l     D0
0000349E  0C80 0000 5686          cmp.l     #94,D0
000034A2  005E      
000034A4  6608      5687          bne.s     @vsscanf_scanselect_1
000034A6  347C 0001 5688          move.w    #1,A2
000034AA  5283      5689          addq.l    #1,D3
000034AC  6004      5690          bra.s     @vsscanf_scanselect_2
                    5691   @vsscanf_scanselect_1:
000034AE  347C 0000 5692          move.w    #0,A2
                    5693   @vsscanf_scanselect_2:
000034B2  202E 0010 5694          move.l    16(A6),D0
000034B6  53AE 0010 5695          subq.l    #1,16(A6)
000034BA  4A80      5696          tst.l     D0
000034BC  6700 0108 5697          beq       @vsscanf_scanselect_5
000034C0  2F2E 0008 5698          move.l    8(A6),-(A7)
000034C4  6100 FEB6 5699          bsr       @vsscanf_scanread
000034C8  584F      5700          addq.w    #4,A7
000034CA  2800      5701          move.l    D0,D4
000034CC  0C84 FFFF 5702          cmp.l     #-1,D4
000034D0  FFFF      
000034D2  6604      5703          bne.s     @vsscanf_scanselect_6
000034D4  6000 00F0 5704          bra       @vsscanf_scanselect_5
                    5705   @vsscanf_scanselect_6:
000034D8  206E 001C 5706          move.l    28(A6),A0
000034DC  5290      5707          addq.l    #1,(A0)
000034DE  4285      5708          clr.l     D5
000034E0  4282      5709          clr.l     D2
                    5710   @vsscanf_scanselect_8:
000034E2  2043      5711          move.l    D3,A0
000034E4  1030 2800 5712          move.b    0(A0,D2.L),D0
000034E8  4880      5713          ext.w     D0
000034EA  48C0      5714          ext.l     D0
000034EC  0C80 0000 5715          cmp.l     #93,D0
000034F0  005D      
000034F2  6700 008E 5716          beq       @vsscanf_scanselect_10
000034F6  4A82      5717          tst.l     D2
000034F8  6716      5718          beq.s     @vsscanf_scanselect_11
000034FA  2043      5719          move.l    D3,A0
000034FC  1030 2800 5720          move.b    0(A0,D2.L),D0
00003500  4880      5721          ext.w     D0
00003502  48C0      5722          ext.l     D0
00003504  0C80 0000 5723          cmp.l     #93,D0
00003508  005D      
0000350A  6604      5724          bne.s     @vsscanf_scanselect_11
0000350C  6000 0074 5725          bra       @vsscanf_scanselect_10
                    5726   @vsscanf_scanselect_11:
00003510  4A82      5727          tst.l     D2
00003512  6700 0058 5728          beq       @vsscanf_scanselect_15
00003516  2043      5729          move.l    D3,A0
00003518  1030 2800 5730          move.b    0(A0,D2.L),D0
0000351C  4880      5731          ext.w     D0
0000351E  48C0      5732          ext.l     D0
00003520  0C80 0000 5733          cmp.l     #45,D0
00003524  002D      
00003526  6600 0044 5734          bne       @vsscanf_scanselect_15
0000352A  2043      5735          move.l    D3,A0
0000352C  2002      5736          move.l    D2,D0
0000352E  5380      5737          subq.l    #1,D0
00003530  2243      5738          move.l    D3,A1
00003532  2F08      5739          move.l    A0,-(A7)
00003534  2042      5740          move.l    D2,A0
00003536  1230 0800 5741          move.b    0(A0,D0.L),D1
0000353A  B230 9801 5742          cmp.b     1(A0,A1.L),D1
0000353E  6C00 002C 5743          bge       @vsscanf_scanselect_15
00003542  205F      5744          move.l    (A7)+,A0
00003544  2043      5745          move.l    D3,A0
00003546  2002      5746          move.l    D2,D0
00003548  5380      5747          subq.l    #1,D0
0000354A  1030 0800 5748          move.b    0(A0,D0.L),D0
0000354E  4880      5749          ext.w     D0
00003550  48C0      5750          ext.l     D0
00003552  B880      5751          cmp.l     D0,D4
00003554  6D12      5752          blt.s     @vsscanf_scanselect_17
00003556  2043      5753          move.l    D3,A0
00003558  2242      5754          move.l    D2,A1
0000355A  1031 8801 5755          move.b    1(A1,A0.L),D0
0000355E  4880      5756          ext.w     D0
00003560  48C0      5757          ext.l     D0
00003562  B880      5758          cmp.l     D0,D4
00003564  6E02      5759          bgt.s     @vsscanf_scanselect_17
00003566  601A      5760          bra.s     @vsscanf_scanselect_10
                    5761   @vsscanf_scanselect_17:
00003568  5282      5762          addq.l    #1,D2
0000356A  6010      5763          bra.s     @vsscanf_scanselect_19
                    5764   @vsscanf_scanselect_15:
0000356C  2043      5765          move.l    D3,A0
0000356E  1030 2800 5766          move.b    0(A0,D2.L),D0
00003572  4880      5767          ext.w     D0
00003574  48C0      5768          ext.l     D0
00003576  B880      5769          cmp.l     D0,D4
00003578  6602      5770          bne.s     @vsscanf_scanselect_19
0000357A  6006      5771          bra.s     @vsscanf_scanselect_10
                    5772   @vsscanf_scanselect_19:
0000357C  5282      5773          addq.l    #1,D2
0000357E  6000 FF62 5774          bra       @vsscanf_scanselect_8
                    5775   @vsscanf_scanselect_10:
00003582  4A82      5776          tst.l     D2
00003584  6712      5777          beq.s     @vsscanf_scanselect_23
00003586  2043      5778          move.l    D3,A0
00003588  1030 2800 5779          move.b    0(A0,D2.L),D0
0000358C  4880      5780          ext.w     D0
0000358E  48C0      5781          ext.l     D0
00003590  0C80 0000 5782          cmp.l     #93,D0
00003594  005D      
00003596  6702      5783          beq.s     @vsscanf_scanselect_21
                    5784   @vsscanf_scanselect_23:
00003598  7A01      5785          moveq     #1,D5
                    5786   @vsscanf_scanselect_21:
0000359A  200A      5787          move.l    A2,D0
0000359C  6712      5788          beq.s     @vsscanf_scanselect_24
0000359E  4A85      5789          tst.l     D5
000035A0  660C      5790          bne.s     @vsscanf_scanselect_26
000035A2  4A87      5791          tst.l     D7
000035A4  6606      5792          bne.s     @vsscanf_scanselect_28
000035A6  2046      5793          move.l    D6,A0
000035A8  5286      5794          addq.l    #1,D6
000035AA  1084      5795          move.b    D4,(A0)
                    5796   @vsscanf_scanselect_28:
000035AC  6014      5797          bra.s     @vsscanf_scanselect_4
                    5798   @vsscanf_scanselect_26:
000035AE  6016      5799          bra.s     @vsscanf_scanselect_5
                    5800   @vsscanf_scanselect_24:
000035B0  4A85      5801          tst.l     D5
000035B2  670C      5802          beq.s     @vsscanf_scanselect_30
000035B4  4A87      5803          tst.l     D7
000035B6  6606      5804          bne.s     @vsscanf_scanselect_32
000035B8  2046      5805          move.l    D6,A0
000035BA  5286      5806          addq.l    #1,D6
000035BC  1084      5807          move.b    D4,(A0)
                    5808   @vsscanf_scanselect_32:
000035BE  6002      5809          bra.s     @vsscanf_scanselect_4
                    5810   @vsscanf_scanselect_30:
000035C0  6004      5811          bra.s     @vsscanf_scanselect_5
                    5812   @vsscanf_scanselect_4:
000035C2  6000 FEEE 5813          bra       @vsscanf_scanselect_2
                    5814   @vsscanf_scanselect_5:
000035C6  0C84 FFFF 5815          cmp.l     #-1,D4
000035CA  FFFF      
000035CC  6712      5816          beq.s     @vsscanf_scanselect_34
000035CE  2F04      5817          move.l    D4,-(A7)
000035D0  2F2E 0008 5818          move.l    8(A6),-(A7)
000035D4  6100 FE14 5819          bsr       @vsscanf_scanputback
000035D8  504F      5820          addq.w    #8,A7
000035DA  206E 001C 5821          move.l    28(A6),A0
000035DE  5390      5822          subq.l    #1,(A0)
                    5823   @vsscanf_scanselect_34:
000035E0  4A87      5824          tst.l     D7
000035E2  6604      5825          bne.s     @vsscanf_scanselect_36
000035E4  2046      5826          move.l    D6,A0
000035E6  4210      5827          clr.b     (A0)
                    5828   @vsscanf_scanselect_36:
000035E8  5283      5829          addq.l    #1,D3
000035EA  2043      5830          move.l    D3,A0
000035EC  1010      5831          move.b    (A0),D0
000035EE  4880      5832          ext.w     D0
000035F0  48C0      5833          ext.l     D0
000035F2  0C80 0000 5834          cmp.l     #93,D0
000035F6  005D      
000035F8  6702      5835          beq.s     @vsscanf_scanselect_40
000035FA  60EC      5836          bra       @vsscanf_scanselect_36
                    5837   @vsscanf_scanselect_40:
000035FC  5283      5838          addq.l    #1,D3
000035FE  2003      5839          move.l    D3,D0
00003600  4CDF 04FC 5840          movem.l   (A7)+,D2/D3/D4/D5/D6/D7/A2
00003604  4E5E      5841          unlk      A6
00003606  4E75      5842          rts
                    5843   _scanflush:
00003608  41F9 0B00 5844          lea       @vsscanf_buf,A0
0000360C  0546      
0000360E  23C8 0000 5845          move.l    A0,@vsscanf_bufx
00003612  59E6      
00003614  4239 0B00 5846          clr.b     @vsscanf_buf
00003618  0546      
0000361A  4878 FFFF 5847          pea       -1
0000361E  6100 0E4A 5848          bsr       _ungetch
00003622  584F      5849          addq.w    #4,A7
00003624  4E75      5850          rts
                    5851   _vsscanf:
00003626  4E56 FF88 5852          link      A6,#-120
0000362A  48E7 3F3C 5853          movem.l   D2/D3/D4/D5/D6/D7/A2/A3/A4/A5,-(A7)
0000362E  47F8 337C 5854          lea       @vsscanf_scanread,A3
00003632  4AAE 0008 5855          tst.l     8(A6)
00003636  6706      5856          beq.s     vsscanf_1
00003638  41EE 0008 5857          lea       8(A6),A0
0000363C  6004      5858          bra.s     vsscanf_2
                    5859   vsscanf_1:
0000363E  4280      5860          clr.l     D0
00003640  2040      5861          move.l    D0,A0
                    5862   vsscanf_2:
00003642  2A08      5863          move.l    A0,D5
00003644  42AE FFE4 5864          clr.l     -28(A6)
00003648  4284      5865          clr.l     D4
                    5866   vsscanf_3:
0000364A  206E 000C 5867          move.l    12(A6),A0
0000364E  52AE 000C 5868          addq.l    #1,12(A6)
00003652  1010      5869          move.b    (A0),D0
00003654  4880      5870          ext.w     D0
00003656  48C0      5871          ext.l     D0
00003658  2600      5872          move.l    D0,D3
0000365A  6700 05AC 5873          beq       vsscanf_5
0000365E  4286      5874          clr.l     D6
00003660  387C 0000 5875          move.w    #0,A4
00003664  0C83 0000 5876          cmp.l     #32,D3
00003668  0020      
0000366A  6712      5877          beq.s     vsscanf_8
0000366C  0C83 0000 5878          cmp.l     #9,D3
00003670  0009      
00003672  670A      5879          beq.s     vsscanf_8
00003674  0C83 0000 5880          cmp.l     #10,D3
00003678  000A      
0000367A  6600 0048 5881          bne       vsscanf_6
                    5882   vsscanf_8:
0000367E  2F05      5883          move.l    D5,-(A7)
00003680  4E93      5884          jsr       (A3)
00003682  584F      5885          addq.w    #4,A7
00003684  2400      5886          move.l    D0,D2
00003686  52AE FFE4 5887          addq.l    #1,-28(A6)
0000368A  0C82 FFFF 5888          cmp.l     #-1,D2
0000368E  FFFF      
00003690  660E      5889          bne.s     vsscanf_11
00003692  4A84      5890          tst.l     D4
00003694  6704      5891          beq.s     vsscanf_13
00003696  2004      5892          move.l    D4,D0
00003698  6002      5893          bra.s     vsscanf_14
                    5894   vsscanf_13:
0000369A  70FF      5895          moveq     #-1,D0
                    5896   vsscanf_14:
0000369C  6000 056C 5897          bra       vsscanf_15
                    5898   vsscanf_11:
000036A0  2042      5899          move.l    D2,A0
000036A2  43F9 0000 5900          lea       __ctype,A1
000036A6  59EC      
000036A8  1030 9801 5901          move.b    1(A0,A1.L),D0
000036AC  C03C 0010 5902          and.b     #16,D0
000036B0  66CC      5903          bne       vsscanf_8
000036B2  53AE FFE4 5904          subq.l    #1,-28(A6)
000036B6  2F02      5905          move.l    D2,-(A7)
000036B8  2F05      5906          move.l    D5,-(A7)
000036BA  6100 FD2E 5907          bsr       @vsscanf_scanputback
000036BE  504F      5908          addq.w    #8,A7
000036C0  6000 0542 5909          bra       vsscanf_139
                    5910   vsscanf_6:
000036C4  0C83 0000 5911          cmp.l     #37,D3
000036C8  0025      
000036CA  6600 0502 5912          bne       vsscanf_127
000036CE  206E 000C 5913          move.l    12(A6),A0
000036D2  52AE 000C 5914          addq.l    #1,12(A6)
000036D6  1010      5915          move.b    (A0),D0
000036D8  4880      5916          ext.w     D0
000036DA  48C0      5917          ext.l     D0
000036DC  2600      5918          move.l    D0,D3
000036DE  42AE FFEC 5919          clr.l     -20(A6)
000036E2  4286      5920          clr.l     D6
000036E4  42AE FFE8 5921          clr.l     -24(A6)
000036E8  347C 7FFF 5922          move.w    #32767,A2
000036EC  0C83 0000 5923          cmp.l     #42,D3
000036F0  002A      
000036F2  6612      5924          bne.s     vsscanf_18
000036F4  7C01      5925          moveq     #1,D6
000036F6  206E 000C 5926          move.l    12(A6),A0
000036FA  52AE 000C 5927          addq.l    #1,12(A6)
000036FE  1010      5928          move.b    (A0),D0
00003700  4880      5929          ext.w     D0
00003702  48C0      5930          ext.l     D0
00003704  2600      5931          move.l    D0,D3
                    5932   vsscanf_18:
00003706  2043      5933          move.l    D3,A0
00003708  43F9 0000 5934          lea       __ctype,A1
0000370C  59EC      
0000370E  1030 9801 5935          move.b    1(A0,A1.L),D0
00003712  C03C 0004 5936          and.b     #4,D0
00003716  6700 004E 5937          beq       vsscanf_24
0000371A  2003      5938          move.l    D3,D0
0000371C  0480 0000 5939          sub.l     #48,D0
00003720  0030      
00003722  2440      5940          move.l    D0,A2
                    5941   vsscanf_22:
00003724  206E 000C 5942          move.l    12(A6),A0
00003728  52AE 000C 5943          addq.l    #1,12(A6)
0000372C  1010      5944          move.b    (A0),D0
0000372E  4880      5945          ext.w     D0
00003730  48C0      5946          ext.l     D0
00003732  2600      5947          move.l    D0,D3
00003734  2040      5948          move.l    D0,A0
00003736  43F9 0000 5949          lea       __ctype,A1
0000373A  59EC      
0000373C  1030 9801 5950          move.b    1(A0,A1.L),D0
00003740  C0BC 0000 5951          and.l     #255,D0
00003744  00FF      
00003746  C0BC 0000 5952          and.l     #4,D0
0000374A  0004      
0000374C  6718      5953          beq.s     vsscanf_24
0000374E  70D0      5954          moveq     #-48,D0
00003750  2F0A      5955          move.l    A2,-(A7)
00003752  4878 000A 5956          pea       10
00003756  6100 0C12 5957          bsr       LMUL
0000375A  2217      5958          move.l    (A7),D1
0000375C  504F      5959          addq.w    #8,A7
0000375E  D283      5960          add.l     D3,D1
00003760  D081      5961          add.l     D1,D0
00003762  2440      5962          move.l    D0,A2
00003764  60BE      5963          bra       vsscanf_22
                    5964   vsscanf_24:
00003766  0C83 0000 5965          cmp.l     #108,D3
0000376A  006C      
0000376C  6708      5966          beq.s     vsscanf_27
0000376E  0C83 0000 5967          cmp.l     #76,D3
00003772  004C      
00003774  661A      5968          bne.s     vsscanf_25
                    5969   vsscanf_27:
00003776  2D7C 0000 5970          move.l    #1,-24(A6)
0000377A  0001 FFE8 
0000377E  206E 000C 5971          move.l    12(A6),A0
00003782  52AE 000C 5972          addq.l    #1,12(A6)
00003786  1010      5973          move.b    (A0),D0
00003788  4880      5974          ext.w     D0
0000378A  48C0      5975          ext.l     D0
0000378C  2600      5976          move.l    D0,D3
0000378E  6020      5977          bra.s     vsscanf_28
                    5978   vsscanf_25:
00003790  0C83 0000 5979          cmp.l     #104,D3
00003794  0068      
00003796  6618      5980          bne.s     vsscanf_28
00003798  2D7C 0000 5981          move.l    #1,-20(A6)
0000379C  0001 FFEC 
000037A0  206E 000C 5982          move.l    12(A6),A0
000037A4  52AE 000C 5983          addq.l    #1,12(A6)
000037A8  1010      5984          move.b    (A0),D0
000037AA  4880      5985          ext.w     D0
000037AC  48C0      5986          ext.l     D0
000037AE  2600      5987          move.l    D0,D3
                    5988   vsscanf_28:
000037B0  0C83 0000 5989          cmp.l     #91,D3
000037B4  005B      
000037B6  6600 0036 5990          bne       vsscanf_30
000037BA  4A86      5991          tst.l     D6
000037BC  660A      5992          bne.s     vsscanf_32
000037BE  206E 0010 5993          move.l    16(A6),A0
000037C2  58AE 0010 5994          addq.l    #4,16(A6)
000037C6  2E10      5995          move.l    (A0),D7
                    5996   vsscanf_32:
000037C8  486E FFE4 5997          pea       -28(A6)
000037CC  2F07      5998          move.l    D7,-(A7)
000037CE  2F06      5999          move.l    D6,-(A7)
000037D0  2F0A      6000          move.l    A2,-(A7)
000037D2  2F2E 000C 6001          move.l    12(A6),-(A7)
000037D6  2F05      6002          move.l    D5,-(A7)
000037D8  6100 FCA8 6003          bsr       @vsscanf_scanselect
000037DC  DEFC 0018 6004          add.w     #24,A7
000037E0  2D40 000C 6005          move.l    D0,12(A6)
000037E4  4A86      6006          tst.l     D6
000037E6  6602      6007          bne.s     vsscanf_34
000037E8  5284      6008          addq.l    #1,D4
                    6009   vsscanf_34:
000037EA  6000 0418 6010          bra       vsscanf_139
                    6011   vsscanf_30:
000037EE  0C83 0000 6012          cmp.l     #110,D3
000037F2  006E      
000037F4  661A      6013          bne.s     vsscanf_36
000037F6  4A86      6014          tst.l     D6
000037F8  6612      6015          bne.s     vsscanf_38
000037FA  206E 0010 6016          move.l    16(A6),A0
000037FE  58AE 0010 6017          addq.l    #4,16(A6)
00003802  2E10      6018          move.l    (A0),D7
00003804  2047      6019          move.l    D7,A0
00003806  20AE FFE4 6020          move.l    -28(A6),(A0)
0000380A  5284      6021          addq.l    #1,D4
                    6022   vsscanf_38:
0000380C  6000 03F6 6023          bra       vsscanf_139
                    6024   vsscanf_36:
00003810  0C83 0000 6025          cmp.l     #115,D3
00003814  0073      
00003816  6600 00AC 6026          bne       vsscanf_40
0000381A  486E FFE4 6027          pea       -28(A6)
0000381E  2F05      6028          move.l    D5,-(A7)
00003820  6100 FC2A 6029          bsr       @vsscanf_scanspace
00003824  504F      6030          addq.w    #8,A7
00003826  2400      6031          move.l    D0,D2
00003828  4A86      6032          tst.l     D6
0000382A  660A      6033          bne.s     vsscanf_42
0000382C  206E 0010 6034          move.l    16(A6),A0
00003830  58AE 0010 6035          addq.l    #4,16(A6)
00003834  2E10      6036          move.l    (A0),D7
                    6037   vsscanf_42:
00003836  52AE FFE4 6038          addq.l    #1,-28(A6)
                    6039   vsscanf_44:
0000383A  200A      6040          move.l    A2,D0
0000383C  534A      6041          subq.w    #1,A2
0000383E  4A80      6042          tst.l     D0
00003840  6700 0038 6043          beq       vsscanf_46
00003844  2042      6044          move.l    D2,A0
00003846  43F9 0000 6045          lea       __ctype,A1
0000384A  59EC      
0000384C  1030 9801 6046          move.b    1(A0,A1.L),D0
00003850  C03C 0010 6047          and.b     #16,D0
00003854  6624      6048          bne.s     vsscanf_46
00003856  0C82 FFFF 6049          cmp.l     #-1,D2
0000385A  FFFF      
0000385C  671C      6050          beq.s     vsscanf_46
0000385E  387C 0001 6051          move.w    #1,A4
00003862  4A86      6052          tst.l     D6
00003864  6606      6053          bne.s     vsscanf_47
00003866  2047      6054          move.l    D7,A0
00003868  5287      6055          addq.l    #1,D7
0000386A  1082      6056          move.b    D2,(A0)
                    6057   vsscanf_47:
0000386C  2F05      6058          move.l    D5,-(A7)
0000386E  4E93      6059          jsr       (A3)
00003870  584F      6060          addq.w    #4,A7
00003872  2400      6061          move.l    D0,D2
00003874  52AE FFE4 6062          addq.l    #1,-28(A6)
00003878  60C0      6063          bra       vsscanf_44
                    6064   vsscanf_46:
0000387A  4A86      6065          tst.l     D6
0000387C  660A      6066          bne.s     vsscanf_51
0000387E  2047      6067          move.l    D7,A0
00003880  4210      6068          clr.b     (A0)
00003882  200C      6069          move.l    A4,D0
00003884  6702      6070          beq.s     vsscanf_51
00003886  5284      6071          addq.l    #1,D4
                    6072   vsscanf_51:
00003888  0C82 FFFF 6073          cmp.l     #-1,D2
0000388C  FFFF      
0000388E  6708      6074          beq.s     vsscanf_55
00003890  4A86      6075          tst.l     D6
00003892  661E      6076          bne.s     vsscanf_53
00003894  200C      6077          move.l    A4,D0
00003896  661A      6078          bne.s     vsscanf_53
                    6079   vsscanf_55:
00003898  4A84      6080          tst.l     D4
0000389A  6704      6081          beq.s     vsscanf_56
0000389C  2004      6082          move.l    D4,D0
0000389E  600E      6083          bra.s     vsscanf_59
                    6084   vsscanf_56:
000038A0  0C82 FFFF 6085          cmp.l     #-1,D2
000038A4  FFFF      
000038A6  6604      6086          bne.s     vsscanf_58
000038A8  70FF      6087          moveq     #-1,D0
000038AA  6002      6088          bra.s     vsscanf_59
                    6089   vsscanf_58:
000038AC  2004      6090          move.l    D4,D0
                    6091   vsscanf_59:
000038AE  6000 035A 6092          bra       vsscanf_15
                    6093   vsscanf_53:
000038B2  53AE FFE4 6094          subq.l    #1,-28(A6)
000038B6  2F02      6095          move.l    D2,-(A7)
000038B8  2F05      6096          move.l    D5,-(A7)
000038BA  6100 FB2E 6097          bsr       @vsscanf_scanputback
000038BE  504F      6098          addq.w    #8,A7
000038C0  6000 0342 6099          bra       vsscanf_139
                    6100   vsscanf_40:
000038C4  0C83 0000 6101          cmp.l     #99,D3
000038C8  0063      
000038CA  6600 008E 6102          bne       vsscanf_60
000038CE  4A86      6103          tst.l     D6
000038D0  660A      6104          bne.s     vsscanf_62
000038D2  206E 0010 6105          move.l    16(A6),A0
000038D6  58AE 0010 6106          addq.l    #4,16(A6)
000038DA  2E10      6107          move.l    (A0),D7
                    6108   vsscanf_62:
000038DC  2F05      6109          move.l    D5,-(A7)
000038DE  4E93      6110          jsr       (A3)
000038E0  584F      6111          addq.w    #4,A7
000038E2  2400      6112          move.l    D0,D2
000038E4  52AE FFE4 6113          addq.l    #1,-28(A6)
000038E8  200A      6114          move.l    A2,D0
000038EA  0C80 0000 6115          cmp.l     #32767,D0
000038EE  7FFF      
000038F0  6604      6116          bne.s     vsscanf_64
000038F2  347C 0001 6117          move.w    #1,A2
                    6118   vsscanf_64:
000038F6  0C82 FFFF 6119          cmp.l     #-1,D2
000038FA  FFFF      
000038FC  6606      6120          bne.s     vsscanf_66
000038FE  4A86      6121          tst.l     D6
00003900  6602      6122          bne.s     vsscanf_66
00003902  5384      6123          subq.l    #1,D4
                    6124   vsscanf_66:
00003904  200A      6125          move.l    A2,D0
00003906  534A      6126          subq.w    #1,A2
00003908  4A80      6127          tst.l     D0
0000390A  6720      6128          beq.s     vsscanf_70
0000390C  0C82 FFFF 6129          cmp.l     #-1,D2
00003910  FFFF      
00003912  6718      6130          beq.s     vsscanf_70
00003914  4A86      6131          tst.l     D6
00003916  6606      6132          bne.s     vsscanf_71
00003918  2047      6133          move.l    D7,A0
0000391A  5287      6134          addq.l    #1,D7
0000391C  1082      6135          move.b    D2,(A0)
                    6136   vsscanf_71:
0000391E  2F05      6137          move.l    D5,-(A7)
00003920  4E93      6138          jsr       (A3)
00003922  584F      6139          addq.w    #4,A7
00003924  2400      6140          move.l    D0,D2
00003926  52AE FFE4 6141          addq.l    #1,-28(A6)
0000392A  60D8      6142          bra       vsscanf_66
                    6143   vsscanf_70:
0000392C  0C82 FFFF 6144          cmp.l     #-1,D2
00003930  FFFF      
00003932  660E      6145          bne.s     vsscanf_73
00003934  4A84      6146          tst.l     D4
00003936  6704      6147          beq.s     vsscanf_75
00003938  2004      6148          move.l    D4,D0
0000393A  6002      6149          bra.s     vsscanf_76
                    6150   vsscanf_75:
0000393C  70FF      6151          moveq     #-1,D0
                    6152   vsscanf_76:
0000393E  6000 02CA 6153          bra       vsscanf_15
                    6154   vsscanf_73:
00003942  4A86      6155          tst.l     D6
00003944  6602      6156          bne.s     vsscanf_77
00003946  5284      6157          addq.l    #1,D4
                    6158   vsscanf_77:
00003948  53AE FFE4 6159          subq.l    #1,-28(A6)
0000394C  2F02      6160          move.l    D2,-(A7)
0000394E  2F05      6161          move.l    D5,-(A7)
00003950  6100 FA98 6162          bsr       @vsscanf_scanputback
00003954  504F      6163          addq.w    #8,A7
00003956  6000 02AC 6164          bra       vsscanf_139
                    6165   vsscanf_60:
0000395A  0C83 0000 6166          cmp.l     #105,D3
0000395E  0069      
00003960  6600 0060 6167          bne       vsscanf_82
00003964  486E FFE4 6168          pea       -28(A6)
00003968  2F05      6169          move.l    D5,-(A7)
0000396A  6100 FAE0 6170          bsr       @vsscanf_scanspace
0000396E  504F      6171          addq.w    #8,A7
00003970  2400      6172          move.l    D0,D2
00003972  0C82 0000 6173          cmp.l     #48,D2
00003976  0030      
00003978  6600 0038 6174          bne       vsscanf_81
0000397C  387C 0001 6175          move.w    #1,A4
00003980  2F05      6176          move.l    D5,-(A7)
00003982  4E93      6177          jsr       (A3)
00003984  584F      6178          addq.w    #4,A7
00003986  2400      6179          move.l    D0,D2
00003988  2F02      6180          move.l    D2,-(A7)
0000398A  6100 F94E 6181          bsr       _tolower
0000398E  584F      6182          addq.w    #4,A7
00003990  0C80 0000 6183          cmp.l     #120,D0
00003994  0078      
00003996  6604      6184          bne.s     vsscanf_83
00003998  7678      6185          moveq     #120,D3
0000399A  6010      6186          bra.s     vsscanf_84
                    6187   vsscanf_83:
0000399C  53AE FFE4 6188          subq.l    #1,-28(A6)
000039A0  2F02      6189          move.l    D2,-(A7)
000039A2  2F05      6190          move.l    D5,-(A7)
000039A4  6100 FA44 6191          bsr       @vsscanf_scanputback
000039A8  504F      6192          addq.w    #8,A7
000039AA  766F      6193          moveq     #111,D3
                    6194   vsscanf_84:
000039AC  52AE FFE4 6195          addq.l    #1,-28(A6)
000039B0  6010      6196          bra.s     vsscanf_82
                    6197   vsscanf_81:
000039B2  53AE FFE4 6198          subq.l    #1,-28(A6)
000039B6  2F02      6199          move.l    D2,-(A7)
000039B8  2F05      6200          move.l    D5,-(A7)
000039BA  6100 FA2E 6201          bsr       @vsscanf_scanputback
000039BE  504F      6202          addq.w    #8,A7
000039C0  7664      6203          moveq     #100,D3
                    6204   vsscanf_82:
000039C2  0C83 0000 6205          cmp.l     #100,D3
000039C6  0064      
000039C8  671A      6206          beq.s     vsscanf_87
000039CA  0C83 0000 6207          cmp.l     #117,D3
000039CE  0075      
000039D0  6712      6208          beq.s     vsscanf_87
000039D2  0C83 0000 6209          cmp.l     #120,D3
000039D6  0078      
000039D8  670A      6210          beq.s     vsscanf_87
000039DA  0C83 0000 6211          cmp.l     #111,D3
000039DE  006F      
000039E0  6600 01A4 6212          bne       vsscanf_85
                    6213   vsscanf_87:
000039E4  486E FFE4 6214          pea       -28(A6)
000039E8  2F05      6215          move.l    D5,-(A7)
000039EA  6100 FA60 6216          bsr       @vsscanf_scanspace
000039EE  504F      6217          addq.w    #8,A7
000039F0  2400      6218          move.l    D0,D2
000039F2  2D7C 0000 6219          move.l    #10,-4(A6)
000039F6  000A FFFC 
000039FA  0C83 0000 6220          cmp.l     #120,D3
000039FE  0078      
00003A00  6608      6221          bne.s     vsscanf_88
00003A02  2D7C 0000 6222          move.l    #16,-4(A6)
00003A06  0010 FFFC 
                    6223   vsscanf_88:
00003A0A  0C83 0000 6224          cmp.l     #111,D3
00003A0E  006F      
00003A10  6608      6225          bne.s     vsscanf_90
00003A12  2D7C 0000 6226          move.l    #8,-4(A6)
00003A16  0008 FFFC 
                    6227   vsscanf_90:
00003A1A  4A86      6228          tst.l     D6
00003A1C  660A      6229          bne.s     vsscanf_92
00003A1E  206E 0010 6230          move.l    16(A6),A0
00003A22  58AE 0010 6231          addq.l    #4,16(A6)
00003A26  2E10      6232          move.l    (A0),D7
                    6233   vsscanf_92:
00003A28  42AE FFE0 6234          clr.l     -32(A6)
00003A2C  52AE FFE4 6235          addq.l    #1,-28(A6)
00003A30  0C83 0000 6236          cmp.l     #117,D3
00003A34  0075      
00003A36  6720      6237          beq.s     vsscanf_94
00003A38  0C82 0000 6238          cmp.l     #45,D2
00003A3C  002D      
00003A3E  6618      6239          bne.s     vsscanf_94
00003A40  2F05      6240          move.l    D5,-(A7)
00003A42  4E93      6241          jsr       (A3)
00003A44  584F      6242          addq.w    #4,A7
00003A46  2400      6243          move.l    D0,D2
00003A48  52AE FFE4 6244          addq.l    #1,-28(A6)
00003A4C  2D7C 0000 6245          move.l    #1,-32(A6)
00003A50  0001 FFE0 
00003A54  387C 0001 6246          move.w    #1,A4
                    6247   vsscanf_94:
00003A58  3A7C 0000 6248          move.w    #0,A5
00003A5C  0C82 FFFF 6249          cmp.l     #-1,D2
00003A60  FFFF      
00003A62  660E      6250          bne.s     vsscanf_96
00003A64  4A84      6251          tst.l     D4
00003A66  6704      6252          beq.s     vsscanf_98
00003A68  2004      6253          move.l    D4,D0
00003A6A  6002      6254          bra.s     vsscanf_99
                    6255   vsscanf_98:
00003A6C  70FF      6256          moveq     #-1,D0
                    6257   vsscanf_99:
00003A6E  6000 019A 6258          bra       vsscanf_15
                    6259   vsscanf_96:
00003A72  200A      6260          move.l    A2,D0
00003A74  534A      6261          subq.w    #1,A2
00003A76  4A80      6262          tst.l     D0
00003A78  6700 0090 6263          beq       vsscanf_102
00003A7C  0C83 0000 6264          cmp.l     #120,D3
00003A80  0078      
00003A82  6620      6265          bne.s     vsscanf_104
00003A84  2F02      6266          move.l    D2,-(A7)
00003A86  6100 F8C8 6267          bsr       _toupper
00003A8A  584F      6268          addq.w    #4,A7
00003A8C  0C80 0000 6269          cmp.l     #65,D0
00003A90  0041      
00003A92  6D10      6270          blt.s     vsscanf_104
00003A94  2F02      6271          move.l    D2,-(A7)
00003A96  6100 F8B8 6272          bsr       _toupper
00003A9A  584F      6273          addq.w    #4,A7
00003A9C  0C80 0000 6274          cmp.l     #70,D0
00003AA0  0046      
00003AA2  6F14      6275          ble.s     vsscanf_103
                    6276   vsscanf_104:
00003AA4  2042      6277          move.l    D2,A0
00003AA6  43F9 0000 6278          lea       __ctype,A1
00003AAA  59EC      
00003AAC  1030 9801 6279          move.b    1(A0,A1.L),D0
00003AB0  C03C 0004 6280          and.b     #4,D0
00003AB4  6700 0054 6281          beq       vsscanf_102
                    6282   vsscanf_103:
00003AB8  2042      6283          move.l    D2,A0
00003ABA  43F9 0000 6284          lea       __ctype,A1
00003ABE  59EC      
00003AC0  1030 9801 6285          move.b    1(A0,A1.L),D0
00003AC4  C03C 0004 6286          and.b     #4,D0
00003AC8  6614      6287          bne.s     vsscanf_105
00003ACA  70F9      6288          moveq     #-7,D0
00003ACC  2F00      6289          move.l    D0,-(A7)
00003ACE  2F02      6290          move.l    D2,-(A7)
00003AD0  6100 F87E 6291          bsr       _toupper
00003AD4  584F      6292          addq.w    #4,A7
00003AD6  2200      6293          move.l    D0,D1
00003AD8  201F      6294          move.l    (A7)+,D0
00003ADA  D081      6295          add.l     D1,D0
00003ADC  2400      6296          move.l    D0,D2
                    6297   vsscanf_105:
00003ADE  2F0D      6298          move.l    A5,-(A7)
00003AE0  2F2E FFFC 6299          move.l    -4(A6),-(A7)
00003AE4  6100 0884 6300          bsr       LMUL
00003AE8  2017      6301          move.l    (A7),D0
00003AEA  504F      6302          addq.w    #8,A7
00003AEC  D082      6303          add.l     D2,D0
00003AEE  0480 0000 6304          sub.l     #48,D0
00003AF2  0030      
00003AF4  2A40      6305          move.l    D0,A5
00003AF6  2F05      6306          move.l    D5,-(A7)
00003AF8  4E93      6307          jsr       (A3)
00003AFA  584F      6308          addq.w    #4,A7
00003AFC  2400      6309          move.l    D0,D2
00003AFE  52AE FFE4 6310          addq.l    #1,-28(A6)
00003B02  387C 0001 6311          move.w    #1,A4
00003B06  6000 FF6A 6312          bra       vsscanf_96
                    6313   vsscanf_102:
00003B0A  0C82 FFFF 6314          cmp.l     #-1,D2
00003B0E  FFFF      
00003B10  671A      6315          beq.s     vsscanf_107
00003B12  2F02      6316          move.l    D2,-(A7)
00003B14  2F05      6317          move.l    D5,-(A7)
00003B16  6100 F8D2 6318          bsr       @vsscanf_scanputback
00003B1A  504F      6319          addq.w    #8,A7
00003B1C  53AE FFE4 6320          subq.l    #1,-28(A6)
00003B20  200C      6321          move.l    A4,D0
00003B22  6606      6322          bne.s     vsscanf_109
00003B24  2004      6323          move.l    D4,D0
00003B26  6000 00E2 6324          bra       vsscanf_15
                    6325   vsscanf_109:
00003B2A  6012      6326          bra.s     vsscanf_111
                    6327   vsscanf_107:
00003B2C  200C      6328          move.l    A4,D0
00003B2E  660E      6329          bne.s     vsscanf_111
00003B30  4A84      6330          tst.l     D4
00003B32  6704      6331          beq.s     vsscanf_113
00003B34  2004      6332          move.l    D4,D0
00003B36  6002      6333          bra.s     vsscanf_114
                    6334   vsscanf_113:
00003B38  70FF      6335          moveq     #-1,D0
                    6336   vsscanf_114:
00003B3A  6000 00CE 6337          bra       vsscanf_15
                    6338   vsscanf_111:
00003B3E  4AAE FFE0 6339          tst.l     -32(A6)
00003B42  6706      6340          beq.s     vsscanf_115
00003B44  200D      6341          move.l    A5,D0
00003B46  4480      6342          neg.l     D0
00003B48  2A40      6343          move.l    D0,A5
                    6344   vsscanf_115:
00003B4A  4A86      6345          tst.l     D6
00003B4C  661E      6346          bne.s     vsscanf_117
00003B4E  4AAE FFE8 6347          tst.l     -24(A6)
00003B52  6706      6348          beq.s     vsscanf_119
00003B54  2047      6349          move.l    D7,A0
00003B56  208D      6350          move.l    A5,(A0)
00003B58  6010      6351          bra.s     vsscanf_122
                    6352   vsscanf_119:
00003B5A  4AAE FFEC 6353          tst.l     -20(A6)
00003B5E  6706      6354          beq.s     vsscanf_121
00003B60  2047      6355          move.l    D7,A0
00003B62  308D      6356          move.w    A5,(A0)
00003B64  6004      6357          bra.s     vsscanf_122
                    6358   vsscanf_121:
00003B66  2047      6359          move.l    D7,A0
00003B68  208D      6360          move.l    A5,(A0)
                    6361   vsscanf_122:
00003B6A  5284      6362          addq.l    #1,D4
                    6363   vsscanf_117:
00003B6C  0C82 FFFF 6364          cmp.l     #-1,D2
00003B70  FFFF      
00003B72  660E      6365          bne.s     vsscanf_123
00003B74  4A84      6366          tst.l     D4
00003B76  6704      6367          beq.s     vsscanf_125
00003B78  2004      6368          move.l    D4,D0
00003B7A  6002      6369          bra.s     vsscanf_126
                    6370   vsscanf_125:
00003B7C  70FF      6371          moveq     #-1,D0
                    6372   vsscanf_126:
00003B7E  6000 008A 6373          bra       vsscanf_15
                    6374   vsscanf_123:
00003B82  6000 0080 6375          bra       vsscanf_139
                    6376   vsscanf_85:
00003B86  0C83 0000 6377          cmp.l     #37,D3
00003B8A  0025      
00003B8C  6600 0040 6378          bne       vsscanf_127
00003B90  2F05      6379          move.l    D5,-(A7)
00003B92  4E93      6380          jsr       (A3)
00003B94  584F      6381          addq.w    #4,A7
00003B96  2400      6382          move.l    D0,D2
00003B98  0C82 FFFF 6383          cmp.l     #-1,D2
00003B9C  FFFF      
00003B9E  660E      6384          bne.s     vsscanf_129
00003BA0  4A84      6385          tst.l     D4
00003BA2  6704      6386          beq.s     vsscanf_131
00003BA4  2004      6387          move.l    D4,D0
00003BA6  6002      6388          bra.s     vsscanf_132
                    6389   vsscanf_131:
00003BA8  70FF      6390          moveq     #-1,D0
                    6391   vsscanf_132:
00003BAA  6000 005E 6392          bra       vsscanf_15
                    6393   vsscanf_129:
00003BAE  52AE FFE4 6394          addq.l    #1,-28(A6)
00003BB2  B483      6395          cmp.l     D3,D2
00003BB4  6714      6396          beq.s     vsscanf_133
00003BB6  2F02      6397          move.l    D2,-(A7)
00003BB8  2F05      6398          move.l    D5,-(A7)
00003BBA  6100 F82E 6399          bsr       @vsscanf_scanputback
00003BBE  504F      6400          addq.w    #8,A7
00003BC0  53AE FFE4 6401          subq.l    #1,-28(A6)
00003BC4  2004      6402          move.l    D4,D0
00003BC6  6000 0042 6403          bra       vsscanf_15
                    6404   vsscanf_133:
00003BCA  6000 0038 6405          bra       vsscanf_139
                    6406   vsscanf_127:
00003BCE  2F05      6407          move.l    D5,-(A7)
00003BD0  4E93      6408          jsr       (A3)
00003BD2  584F      6409          addq.w    #4,A7
00003BD4  2400      6410          move.l    D0,D2
00003BD6  52AE FFE4 6411          addq.l    #1,-28(A6)
00003BDA  0C82 FFFF 6412          cmp.l     #-1,D2
00003BDE  FFFF      
00003BE0  660C      6413          bne.s     vsscanf_135
00003BE2  4A84      6414          tst.l     D4
00003BE4  6704      6415          beq.s     vsscanf_137
00003BE6  2004      6416          move.l    D4,D0
00003BE8  6002      6417          bra.s     vsscanf_138
                    6418   vsscanf_137:
00003BEA  70FF      6419          moveq     #-1,D0
                    6420   vsscanf_138:
00003BEC  601C      6421          bra.s     vsscanf_15
                    6422   vsscanf_135:
00003BEE  B483      6423          cmp.l     D3,D2
00003BF0  6712      6424          beq.s     vsscanf_139
00003BF2  2F02      6425          move.l    D2,-(A7)
00003BF4  2F05      6426          move.l    D5,-(A7)
00003BF6  6100 F7F2 6427          bsr       @vsscanf_scanputback
00003BFA  504F      6428          addq.w    #8,A7
00003BFC  53AE FFE4 6429          subq.l    #1,-28(A6)
00003C00  2004      6430          move.l    D4,D0
00003C02  6006      6431          bra.s     vsscanf_15
                    6432   vsscanf_139:
00003C04  6000 FA44 6433          bra       vsscanf_3
                    6434   vsscanf_5:
00003C08  2004      6435          move.l    D4,D0
                    6436   vsscanf_15:
00003C0A  4CDF 3CFC 6437          movem.l   (A7)+,D2/D3/D4/D5/D6/D7/A2/A3/A4/A5
00003C0E  4E5E      6438          unlk      A6
00003C10  4E75      6439          rts
                    6440   _printf:
00003C12  4E56 FFFC 6441          link      A6,#-4
00003C16  48E7 2000 6442          movem.l   D2,-(A7)
00003C1A  41EE 0008 6443          lea       8(A6),A0
00003C1E  5848      6444          addq.w    #4,A0
00003C20  2408      6445          move.l    A0,D2
00003C22  2F02      6446          move.l    D2,-(A7)
00003C24  2F2E 0008 6447          move.l    8(A6),-(A7)
00003C28  42A7      6448          clr.l     -(A7)
00003C2A  6100 00CA 6449          bsr       _vsprintf
00003C2E  DEFC 000C 6450          add.w     #12,A7
00003C32  2D40 FFFC 6451          move.l    D0,-4(A6)
00003C36  4282      6452          clr.l     D2
00003C38  202E FFFC 6453          move.l    -4(A6),D0
00003C3C  4CDF 0004 6454          movem.l   (A7)+,D2
00003C40  4E5E      6455          unlk      A6
00003C42  4E75      6456          rts
                    6457   @vsprintf_copy:
00003C44  4E56 0000 6458          link      A6,#0
00003C48  206E 0008 6459          move.l    8(A6),A0
00003C4C  4A90      6460          tst.l     (A0)
00003C4E  6710      6461          beq.s     @vsprintf_copy_1
00003C50  202E 000C 6462          move.l    12(A6),D0
00003C54  206E 0008 6463          move.l    8(A6),A0
00003C58  2250      6464          move.l    (A0),A1
00003C5A  5290      6465          addq.l    #1,(A0)
00003C5C  1280      6466          move.b    D0,(A1)
00003C5E  600A      6467          bra.s     @vsprintf_copy_2
                    6468   @vsprintf_copy_1:
00003C60  2F2E 000C 6469          move.l    12(A6),-(A7)
00003C64  6100 F608 6470          bsr       _putch
00003C68  584F      6471          addq.w    #4,A7
                    6472   @vsprintf_copy_2:
00003C6A  4E5E      6473          unlk      A6
00003C6C  4E75      6474          rts
                    6475   @vsprintf_getval:
00003C6E  4E56 0000 6476          link      A6,#0
00003C72  48E7 3000 6477          movem.l   D2/D3,-(A7)
00003C76  242E 0008 6478          move.l    8(A6),D2
00003C7A  4283      6479          clr.l     D3
00003C7C  2042      6480          move.l    D2,A0
00003C7E  2050      6481          move.l    (A0),A0
00003C80  1010      6482          move.b    (A0),D0
00003C82  4880      6483          ext.w     D0
00003C84  48C0      6484          ext.l     D0
00003C86  0C80 0000 6485          cmp.l     #42,D0
00003C8A  002A      
00003C8C  6612      6486          bne.s     @vsprintf_getval_1
00003C8E  206E 000C 6487          move.l    12(A6),A0
00003C92  2250      6488          move.l    (A0),A1
00003C94  5890      6489          addq.l    #4,(A0)
00003C96  2611      6490          move.l    (A1),D3
00003C98  2042      6491          move.l    D2,A0
00003C9A  5290      6492          addq.l    #1,(A0)
00003C9C  6000 004E 6493          bra       @vsprintf_getval_5
                    6494   @vsprintf_getval_1:
00003CA0  2042      6495          move.l    D2,A0
00003CA2  2050      6496          move.l    (A0),A0
00003CA4  1010      6497          move.b    (A0),D0
00003CA6  4880      6498          ext.w     D0
00003CA8  48C0      6499          ext.l     D0
00003CAA  0C80 0000 6500          cmp.l     #48,D0
00003CAE  0030      
00003CB0  6D00 003A 6501          blt       @vsprintf_getval_5
00003CB4  2042      6502          move.l    D2,A0
00003CB6  2050      6503          move.l    (A0),A0
00003CB8  1010      6504          move.b    (A0),D0
00003CBA  4880      6505          ext.w     D0
00003CBC  48C0      6506          ext.l     D0
00003CBE  0C80 0000 6507          cmp.l     #57,D0
00003CC2  0039      
00003CC4  6E26      6508          bgt.s     @vsprintf_getval_5
00003CC6  2F03      6509          move.l    D3,-(A7)
00003CC8  4878 000A 6510          pea       10
00003CCC  6100 069C 6511          bsr       LMUL
00003CD0  2017      6512          move.l    (A7),D0
00003CD2  504F      6513          addq.w    #8,A7
00003CD4  2042      6514          move.l    D2,A0
00003CD6  2250      6515          move.l    (A0),A1
00003CD8  5290      6516          addq.l    #1,(A0)
00003CDA  1211      6517          move.b    (A1),D1
00003CDC  4881      6518          ext.w     D1
00003CDE  48C1      6519          ext.l     D1
00003CE0  D081      6520          add.l     D1,D0
00003CE2  0480 0000 6521          sub.l     #48,D0
00003CE6  0030      
00003CE8  2600      6522          move.l    D0,D3
00003CEA  60B4      6523          bra       @vsprintf_getval_1
                    6524   @vsprintf_getval_5:
00003CEC  2003      6525          move.l    D3,D0
00003CEE  4CDF 000C 6526          movem.l   (A7)+,D2/D3
00003CF2  4E5E      6527          unlk      A6
00003CF4  4E75      6528          rts
                    6529   _vsprintf:
00003CF6  4E56 FFCC 6530          link      A6,#-52
00003CFA  48E7 3F3C 6531          movem.l   D2/D3/D4/D5/D6/D7/A2/A3/A4/A5,-(A7)
00003CFE  45EE 0008 6532          lea       8(A6),A2
00003D02  47F8 3C44 6533          lea       @vsprintf_copy,A3
00003D06  49F9 0000 6534          lea       _ultoa,A4
00003D0A  4574      
00003D0C  4286      6535          clr.l     D6
                    6536   vsprintf_1:
00003D0E  206E 000C 6537          move.l    12(A6),A0
00003D12  4A10      6538          tst.b     (A0)
00003D14  6700 0624 6539          beq       vsprintf_3
00003D18  206E 000C 6540          move.l    12(A6),A0
00003D1C  1010      6541          move.b    (A0),D0
00003D1E  4880      6542          ext.w     D0
00003D20  48C0      6543          ext.l     D0
00003D22  0C80 0000 6544          cmp.l     #37,D0
00003D26  0025      
00003D28  671C      6545          beq.s     vsprintf_4
00003D2A  206E 000C 6546          move.l    12(A6),A0
00003D2E  52AE 000C 6547          addq.l    #1,12(A6)
00003D32  1210      6548          move.b    (A0),D1
00003D34  4881      6549          ext.w     D1
00003D36  48C1      6550          ext.l     D1
00003D38  2F01      6551          move.l    D1,-(A7)
00003D3A  2F0A      6552          move.l    A2,-(A7)
00003D3C  4E93      6553          jsr       (A3)
00003D3E  504F      6554          addq.w    #8,A7
00003D40  5286      6555          addq.l    #1,D6
00003D42  6000 05F2 6556          bra       vsprintf_2
                    6557   vsprintf_4:
00003D46  52AE 000C 6558          addq.l    #1,12(A6)
00003D4A  422E FFD3 6559          clr.b     -45(A6)
00003D4E  422E FFD2 6560          clr.b     -46(A6)
00003D52  422E FFD0 6561          clr.b     -48(A6)
00003D56  422E FFCF 6562          clr.b     -49(A6)
00003D5A  422E FFCE 6563          clr.b     -50(A6)
00003D5E  422E FFCD 6564          clr.b     -51(A6)
00003D62  42AE FFFC 6565          clr.l     -4(A6)
00003D66  7AFF      6566          moveq     #-1,D5
00003D68  41EE FFDC 6567          lea       -36(A6),A0
00003D6C  2608      6568          move.l    A0,D3
00003D6E  2408      6569          move.l    A0,D2
                    6570   vsprintf_6:
00003D70  206E 000C 6571          move.l    12(A6),A0
00003D74  1010      6572          move.b    (A0),D0
00003D76  4880      6573          ext.w     D0
00003D78  48C0      6574          ext.l     D0
00003D7A  0C80 0000 6575          cmp.l     #43,D0
00003D7E  002B      
00003D80  6730      6576          beq.s     vsprintf_12
00003D82  6E18      6577          bgt.s     vsprintf_15
00003D84  0C80 0000 6578          cmp.l     #35,D0
00003D88  0023      
00003D8A  6700 003E 6579          beq       vsprintf_14
00003D8E  6E00 0046 6580          bgt       vsprintf_9
00003D92  0C80 0000 6581          cmp.l     #32,D0
00003D96  0020      
00003D98  6724      6582          beq.s     vsprintf_13
00003D9A  603A      6583          bra.s     vsprintf_9
                    6584   vsprintf_15:
00003D9C  0C80 0000 6585          cmp.l     #45,D0
00003DA0  002D      
00003DA2  6702      6586          beq.s     vsprintf_11
00003DA4  6030      6587          bra.s     vsprintf_9
                    6588   vsprintf_11:
00003DA6  1D7C 0001 6589          move.b    #1,-51(A6)
00003DAA  FFCD      
00003DAC  52AE 000C 6590          addq.l    #1,12(A6)
00003DB0  6026      6591          bra.s     vsprintf_7
                    6592   vsprintf_12:
00003DB2  1D7C 0001 6593          move.b    #1,-50(A6)
00003DB6  FFCE      
00003DB8  52AE 000C 6594          addq.l    #1,12(A6)
00003DBC  601A      6595          bra.s     vsprintf_7
                    6596   vsprintf_13:
00003DBE  1D7C 0001 6597          move.b    #1,-49(A6)
00003DC2  FFCF      
00003DC4  52AE 000C 6598          addq.l    #1,12(A6)
00003DC8  600E      6599          bra.s     vsprintf_7
                    6600   vsprintf_14:
00003DCA  1D7C 0001 6601          move.b    #1,-48(A6)
00003DCE  FFD0      
00003DD0  52AE 000C 6602          addq.l    #1,12(A6)
00003DD4  6002      6603          bra.s     vsprintf_7
                    6604   vsprintf_9:
00003DD6  6002      6605          bra.s     vsprintf_8
                    6606   vsprintf_7:
00003DD8  6096      6607          bra       vsprintf_6
                    6608   vsprintf_8:
00003DDA  206E 000C 6609          move.l    12(A6),A0
00003DDE  1010      6610          move.b    (A0),D0
00003DE0  4880      6611          ext.w     D0
00003DE2  48C0      6612          ext.l     D0
00003DE4  0C80 0000 6613          cmp.l     #48,D0
00003DE8  0030      
00003DEA  660A      6614          bne.s     vsprintf_16
00003DEC  52AE 000C 6615          addq.l    #1,12(A6)
00003DF0  1D7C 0001 6616          move.b    #1,-46(A6)
00003DF4  FFD2      
                    6617   vsprintf_16:
00003DF6  486E 0010 6618          pea       16(A6)
00003DFA  486E 000C 6619          pea       12(A6)
00003DFE  6100 FE6E 6620          bsr       @vsprintf_getval
00003E02  504F      6621          addq.w    #8,A7
00003E04  2A40      6622          move.l    D0,A5
00003E06  206E 000C 6623          move.l    12(A6),A0
00003E0A  1010      6624          move.b    (A0),D0
00003E0C  4880      6625          ext.w     D0
00003E0E  48C0      6626          ext.l     D0
00003E10  0C80 0000 6627          cmp.l     #46,D0
00003E14  002E      
00003E16  6614      6628          bne.s     vsprintf_18
00003E18  52AE 000C 6629          addq.l    #1,12(A6)
00003E1C  486E 0010 6630          pea       16(A6)
00003E20  486E 000C 6631          pea       12(A6)
00003E24  6100 FE48 6632          bsr       @vsprintf_getval
00003E28  504F      6633          addq.w    #8,A7
00003E2A  2A00      6634          move.l    D0,D5
                    6635   vsprintf_18:
00003E2C  206E 000C 6636          move.l    12(A6),A0
00003E30  1010      6637          move.b    (A0),D0
00003E32  4880      6638          ext.w     D0
00003E34  48C0      6639          ext.l     D0
00003E36  0C80 0000 6640          cmp.l     #108,D0
00003E3A  006C      
00003E3C  660A      6641          bne.s     vsprintf_20
00003E3E  52AE 000C 6642          addq.l    #1,12(A6)
00003E42  1D7C 0001 6643          move.b    #1,-45(A6)
00003E46  FFD3      
                    6644   vsprintf_20:
00003E48  206E 000C 6645          move.l    12(A6),A0
00003E4C  1010      6646          move.b    (A0),D0
00003E4E  4880      6647          ext.w     D0
00003E50  48C0      6648          ext.l     D0
00003E52  0C80 0000 6649          cmp.l     #111,D0
00003E56  006F      
00003E58  6700 00D4 6650          beq       vsprintf_27
00003E5C  6E34      6651          bgt.s     vsprintf_33
00003E5E  0C80 0000 6652          cmp.l     #100,D0
00003E62  0064      
00003E64  6700 0054 6653          beq       vsprintf_24
00003E68  6E1C      6654          bgt.s     vsprintf_34
00003E6A  0C80 0000 6655          cmp.l     #99,D0
00003E6E  0063      
00003E70  6700 012C 6656          beq       vsprintf_30
00003E74  6E00 016A 6657          bgt       vsprintf_22
00003E78  0C80 0000 6658          cmp.l     #88,D0
00003E7C  0058      
00003E7E  6700 00E6 6659          beq       vsprintf_28
00003E82  6000 015C 6660          bra       vsprintf_22
                    6661   vsprintf_34:
00003E86  0C80 0000 6662          cmp.l     #105,D0
00003E8A  0069      
00003E8C  672C      6663          beq.s     vsprintf_24
00003E8E  6000 0150 6664          bra       vsprintf_22
                    6665   vsprintf_33:
00003E92  0C80 0000 6666          cmp.l     #117,D0
00003E96  0075      
00003E98  6700 005C 6667          beq       vsprintf_26
00003E9C  6E0E      6668          bgt.s     vsprintf_35
00003E9E  0C80 0000 6669          cmp.l     #115,D0
00003EA2  0073      
00003EA4  6700 011C 6670          beq       vsprintf_31
00003EA8  6000 0136 6671          bra       vsprintf_22
                    6672   vsprintf_35:
00003EAC  0C80 0000 6673          cmp.l     #120,D0
00003EB0  0078      
00003EB2  6700 00B2 6674          beq       vsprintf_28
00003EB6  6000 0128 6675          bra       vsprintf_22
                    6676   vsprintf_24:
00003EBA  4A2E FFD3 6677          tst.b     -45(A6)
00003EBE  671A      6678          beq.s     vsprintf_36
00003EC0  4878 000A 6679          pea       10
00003EC4  2F03      6680          move.l    D3,-(A7)
00003EC6  206E 0010 6681          move.l    16(A6),A0
00003ECA  58AE 0010 6682          addq.l    #4,16(A6)
00003ECE  2F10      6683          move.l    (A0),-(A7)
00003ED0  6100 061E 6684          bsr       _ltoa
00003ED4  DEFC 000C 6685          add.w     #12,A7
00003ED8  6018      6686          bra.s     vsprintf_37
                    6687   vsprintf_36:
00003EDA  4878 000A 6688          pea       10
00003EDE  2F03      6689          move.l    D3,-(A7)
00003EE0  206E 0010 6690          move.l    16(A6),A0
00003EE4  58AE 0010 6691          addq.l    #4,16(A6)
00003EE8  2F10      6692          move.l    (A0),-(A7)
00003EEA  6100 0604 6693          bsr       _ltoa
00003EEE  DEFC 000C 6694          add.w     #12,A7
                    6695   vsprintf_37:
00003EF2  6000 00FA 6696          bra       vsprintf_23
                    6697   vsprintf_26:
00003EF6  4A2E FFD3 6698          tst.b     -45(A6)
00003EFA  6718      6699          beq.s     vsprintf_38
00003EFC  4878 000A 6700          pea       10
00003F00  2F03      6701          move.l    D3,-(A7)
00003F02  206E 0010 6702          move.l    16(A6),A0
00003F06  58AE 0010 6703          addq.l    #4,16(A6)
00003F0A  2F10      6704          move.l    (A0),-(A7)
00003F0C  4E94      6705          jsr       (A4)
00003F0E  DEFC 000C 6706          add.w     #12,A7
00003F12  6016      6707          bra.s     vsprintf_39
                    6708   vsprintf_38:
00003F14  4878 000A 6709          pea       10
00003F18  2F03      6710          move.l    D3,-(A7)
00003F1A  206E 0010 6711          move.l    16(A6),A0
00003F1E  58AE 0010 6712          addq.l    #4,16(A6)
00003F22  2F10      6713          move.l    (A0),-(A7)
00003F24  4E94      6714          jsr       (A4)
00003F26  DEFC 000C 6715          add.w     #12,A7
                    6716   vsprintf_39:
00003F2A  6000 00C2 6717          bra       vsprintf_23
                    6718   vsprintf_27:
00003F2E  4A2E FFD3 6719          tst.b     -45(A6)
00003F32  6718      6720          beq.s     vsprintf_40
00003F34  4878 0008 6721          pea       8
00003F38  2F03      6722          move.l    D3,-(A7)
00003F3A  206E 0010 6723          move.l    16(A6),A0
00003F3E  58AE 0010 6724          addq.l    #4,16(A6)
00003F42  2F10      6725          move.l    (A0),-(A7)
00003F44  4E94      6726          jsr       (A4)
00003F46  DEFC 000C 6727          add.w     #12,A7
00003F4A  6016      6728          bra.s     vsprintf_41
                    6729   vsprintf_40:
00003F4C  4878 0008 6730          pea       8
00003F50  2F03      6731          move.l    D3,-(A7)
00003F52  206E 0010 6732          move.l    16(A6),A0
00003F56  58AE 0010 6733          addq.l    #4,16(A6)
00003F5A  2F10      6734          move.l    (A0),-(A7)
00003F5C  4E94      6735          jsr       (A4)
00003F5E  DEFC 000C 6736          add.w     #12,A7
                    6737   vsprintf_41:
00003F62  6000 008A 6738          bra       vsprintf_23
                    6739   vsprintf_28:
00003F66  4A2E FFD3 6740          tst.b     -45(A6)
00003F6A  6718      6741          beq.s     vsprintf_42
00003F6C  4878 0010 6742          pea       16
00003F70  2F03      6743          move.l    D3,-(A7)
00003F72  206E 0010 6744          move.l    16(A6),A0
00003F76  58AE 0010 6745          addq.l    #4,16(A6)
00003F7A  2F10      6746          move.l    (A0),-(A7)
00003F7C  4E94      6747          jsr       (A4)
00003F7E  DEFC 000C 6748          add.w     #12,A7
00003F82  6016      6749          bra.s     vsprintf_43
                    6750   vsprintf_42:
00003F84  4878 0010 6751          pea       16
00003F88  2F03      6752          move.l    D3,-(A7)
00003F8A  206E 0010 6753          move.l    16(A6),A0
00003F8E  58AE 0010 6754          addq.l    #4,16(A6)
00003F92  2F10      6755          move.l    (A0),-(A7)
00003F94  4E94      6756          jsr       (A4)
00003F96  DEFC 000C 6757          add.w     #12,A7
                    6758   vsprintf_43:
00003F9A  6000 0052 6759          bra       vsprintf_23
                    6760   vsprintf_30:
00003F9E  206E 0010 6761          move.l    16(A6),A0
00003FA2  58AE 0010 6762          addq.l    #4,16(A6)
00003FA6  2010      6763          move.l    (A0),D0
00003FA8  2042      6764          move.l    D2,A0
00003FAA  5282      6765          addq.l    #1,D2
00003FAC  1080      6766          move.b    D0,(A0)
00003FAE  2042      6767          move.l    D2,A0
00003FB0  4210      6768          clr.b     (A0)
00003FB2  200D      6769          move.l    A5,D0
00003FB4  6704      6770          beq.s     vsprintf_44
00003FB6  200D      6771          move.l    A5,D0
00003FB8  6002      6772          bra.s     vsprintf_45
                    6773   vsprintf_44:
00003FBA  7001      6774          moveq     #1,D0
                    6775   vsprintf_45:
00003FBC  2A00      6776          move.l    D0,D5
00003FBE  6000 002E 6777          bra       vsprintf_23
                    6778   vsprintf_31:
00003FC2  206E 0010 6779          move.l    16(A6),A0
00003FC6  58AE 0010 6780          addq.l    #4,16(A6)
00003FCA  2610      6781          move.l    (A0),D3
00003FCC  0C85 FFFF 6782          cmp.l     #-1,D5
00003FD0  FFFF      
00003FD2  660A      6783          bne.s     vsprintf_46
00003FD4  2F03      6784          move.l    D3,-(A7)
00003FD6  6100 F284 6785          bsr       _strlen
00003FDA  584F      6786          addq.w    #4,A7
00003FDC  2A00      6787          move.l    D0,D5
                    6788   vsprintf_46:
00003FDE  600E      6789          bra.s     vsprintf_23
                    6790   vsprintf_22:
00003FE0  206E 000C 6791          move.l    12(A6),A0
00003FE4  2242      6792          move.l    D2,A1
00003FE6  5282      6793          addq.l    #1,D2
00003FE8  1290      6794          move.b    (A0),(A1)
00003FEA  2042      6795          move.l    D2,A0
00003FEC  4210      6796          clr.b     (A0)
                    6797   vsprintf_23:
00003FEE  2F03      6798          move.l    D3,-(A7)
00003FF0  6100 F26A 6799          bsr       _strlen
00003FF4  584F      6800          addq.w    #4,A7
00003FF6  1800      6801          move.b    D0,D4
00003FF8  206E 000C 6802          move.l    12(A6),A0
00003FFC  1010      6803          move.b    (A0),D0
00003FFE  4880      6804          ext.w     D0
00004000  48C0      6805          ext.l     D0
00004002  0C80 0000 6806          cmp.l     #115,D0
00004006  0073      
00004008  6618      6807          bne.s     vsprintf_48
0000400A  0C85 0000 6808          cmp.l     #0,D5
0000400E  0000      
00004010  6D10      6809          blt.s     vsprintf_48
00004012  4884      6810          ext.w     D4
00004014  48C4      6811          ext.l     D4
00004016  B885      6812          cmp.l     D5,D4
00004018  6F04      6813          ble.s     vsprintf_50
0000401A  1005      6814          move.b    D5,D0
0000401C  6002      6815          bra.s     vsprintf_51
                    6816   vsprintf_50:
0000401E  1004      6817          move.b    D4,D0
                    6818   vsprintf_51:
00004020  1800      6819          move.b    D0,D4
                    6820   vsprintf_48:
00004022  206E 000C 6821          move.l    12(A6),A0
00004026  1010      6822          move.b    (A0),D0
00004028  4880      6823          ext.w     D0
0000402A  48C0      6824          ext.l     D0
0000402C  0C80 0000 6825          cmp.l     #88,D0
00004030  0058      
00004032  6600 0026 6826          bne       vsprintf_56
00004036  41EE FFDC 6827          lea       -36(A6),A0
0000403A  2408      6828          move.l    A0,D2
                    6829   vsprintf_54:
0000403C  2042      6830          move.l    D2,A0
0000403E  4A10      6831          tst.b     (A0)
00004040  6718      6832          beq.s     vsprintf_56
00004042  2042      6833          move.l    D2,A0
00004044  1210      6834          move.b    (A0),D1
00004046  4881      6835          ext.w     D1
00004048  48C1      6836          ext.l     D1
0000404A  2F01      6837          move.l    D1,-(A7)
0000404C  6100 F302 6838          bsr       _toupper
00004050  584F      6839          addq.w    #4,A7
00004052  2042      6840          move.l    D2,A0
00004054  1080      6841          move.b    D0,(A0)
00004056  5282      6842          addq.l    #1,D2
00004058  60E2      6843          bra       vsprintf_54
                    6844   vsprintf_56:
0000405A  7E00      6845          moveq     #0,D7
0000405C  41EE FFD4 6846          lea       -44(A6),A0
00004060  2408      6847          move.l    A0,D2
00004062  206E 000C 6848          move.l    12(A6),A0
00004066  1010      6849          move.b    (A0),D0
00004068  4880      6850          ext.w     D0
0000406A  48C0      6851          ext.l     D0
0000406C  0C80 0000 6852          cmp.l     #100,D0
00004070  0064      
00004072  6714      6853          beq.s     vsprintf_59
00004074  206E 000C 6854          move.l    12(A6),A0
00004078  1010      6855          move.b    (A0),D0
0000407A  4880      6856          ext.w     D0
0000407C  48C0      6857          ext.l     D0
0000407E  0C80 0000 6858          cmp.l     #105,D0
00004082  0069      
00004084  6600 0076 6859          bne       vsprintf_65
                    6860   vsprintf_59:
00004088  4A2E FFCE 6861          tst.b     -50(A6)
0000408C  6612      6862          bne.s     vsprintf_62
0000408E  2043      6863          move.l    D3,A0
00004090  1010      6864          move.b    (A0),D0
00004092  4880      6865          ext.w     D0
00004094  48C0      6866          ext.l     D0
00004096  0C80 0000 6867          cmp.l     #45,D0
0000409A  002D      
0000409C  6600 002E 6868          bne       vsprintf_60
                    6869   vsprintf_62:
000040A0  2043      6870          move.l    D3,A0
000040A2  1010      6871          move.b    (A0),D0
000040A4  4880      6872          ext.w     D0
000040A6  48C0      6873          ext.l     D0
000040A8  0C80 0000 6874          cmp.l     #45,D0
000040AC  002D      
000040AE  660E      6875          bne.s     vsprintf_63
000040B0  2043      6876          move.l    D3,A0
000040B2  5283      6877          addq.l    #1,D3
000040B4  2242      6878          move.l    D2,A1
000040B6  5282      6879          addq.l    #1,D2
000040B8  1290      6880          move.b    (A0),(A1)
000040BA  5304      6881          subq.b    #1,D4
000040BC  6008      6882          bra.s     vsprintf_64
                    6883   vsprintf_63:
000040BE  2042      6884          move.l    D2,A0
000040C0  5282      6885          addq.l    #1,D2
000040C2  10BC 002B 6886          move.b    #43,(A0)
                    6887   vsprintf_64:
000040C6  5287      6888          addq.l    #1,D7
000040C8  6000 0032 6889          bra       vsprintf_65
                    6890   vsprintf_60:
000040CC  4A2E FFCF 6891          tst.b     -49(A6)
000040D0  6700 002A 6892          beq       vsprintf_65
000040D4  2043      6893          move.l    D3,A0
000040D6  1010      6894          move.b    (A0),D0
000040D8  4880      6895          ext.w     D0
000040DA  48C0      6896          ext.l     D0
000040DC  0C80 0000 6897          cmp.l     #45,D0
000040E0  002D      
000040E2  660E      6898          bne.s     vsprintf_67
000040E4  2043      6899          move.l    D3,A0
000040E6  5283      6900          addq.l    #1,D3
000040E8  2242      6901          move.l    D2,A1
000040EA  5282      6902          addq.l    #1,D2
000040EC  1290      6903          move.b    (A0),(A1)
000040EE  5304      6904          subq.b    #1,D4
000040F0  6008      6905          bra.s     vsprintf_68
                    6906   vsprintf_67:
000040F2  2042      6907          move.l    D2,A0
000040F4  5282      6908          addq.l    #1,D2
000040F6  10BC 0020 6909          move.b    #32,(A0)
                    6910   vsprintf_68:
000040FA  5287      6911          addq.l    #1,D7
                    6912   vsprintf_65:
000040FC  4A2E FFD0 6913          tst.b     -48(A6)
00004100  6700 0066 6914          beq       vsprintf_77
00004104  206E 000C 6915          move.l    12(A6),A0
00004108  1010      6916          move.b    (A0),D0
0000410A  4880      6917          ext.w     D0
0000410C  48C0      6918          ext.l     D0
0000410E  0C80 0000 6919          cmp.l     #111,D0
00004112  006F      
00004114  671A      6920          beq.s     vsprintf_73
00004116  6E0C      6921          bgt.s     vsprintf_76
00004118  0C80 0000 6922          cmp.l     #88,D0
0000411C  0058      
0000411E  6710      6923          beq.s     vsprintf_73
00004120  6000 0046 6924          bra       vsprintf_77
                    6925   vsprintf_76:
00004124  0C80 0000 6926          cmp.l     #120,D0
00004128  0078      
0000412A  6704      6927          beq.s     vsprintf_73
0000412C  6000 003A 6928          bra       vsprintf_77
                    6929   vsprintf_73:
00004130  2042      6930          move.l    D2,A0
00004132  5282      6931          addq.l    #1,D2
00004134  10BC 0030 6932          move.b    #48,(A0)
00004138  5287      6933          addq.l    #1,D7
0000413A  206E 000C 6934          move.l    12(A6),A0
0000413E  1010      6935          move.b    (A0),D0
00004140  4880      6936          ext.w     D0
00004142  48C0      6937          ext.l     D0
00004144  0C80 0000 6938          cmp.l     #120,D0
00004148  0078      
0000414A  6712      6939          beq.s     vsprintf_79
0000414C  206E 000C 6940          move.l    12(A6),A0
00004150  1010      6941          move.b    (A0),D0
00004152  4880      6942          ext.w     D0
00004154  48C0      6943          ext.l     D0
00004156  0C80 0000 6944          cmp.l     #88,D0
0000415A  0058      
0000415C  660A      6945          bne.s     vsprintf_77
                    6946   vsprintf_79:
0000415E  2042      6947          move.l    D2,A0
00004160  5282      6948          addq.l    #1,D2
00004162  10BC 0078 6949          move.b    #120,(A0)
00004166  5287      6950          addq.l    #1,D7
                    6951   vsprintf_77:
00004168  2042      6952          move.l    D2,A0
0000416A  4210      6953          clr.b     (A0)
0000416C  206E 000C 6954          move.l    12(A6),A0
00004170  1010      6955          move.b    (A0),D0
00004172  4880      6956          ext.w     D0
00004174  48C0      6957          ext.l     D0
00004176  0C80 0000 6958          cmp.l     #105,D0
0000417A  0069      
0000417C  6700 0076 6959          beq       vsprintf_82
00004180  6E42      6960          bgt.s     vsprintf_93
00004182  0C80 0000 6961          cmp.l     #99,D0
00004186  0063      
00004188  6700 0084 6962          beq       vsprintf_96
0000418C  6E1C      6963          bgt.s     vsprintf_94
0000418E  0C80 0000 6964          cmp.l     #88,D0
00004192  0058      
00004194  6700 005E 6965          beq       vsprintf_82
00004198  6E00 0184 6966          bgt       vsprintf_80
0000419C  0C80 0000 6967          cmp.l     #69,D0
000041A0  0045      
000041A2  6700 0050 6968          beq       vsprintf_82
000041A6  6000 0176 6969          bra       vsprintf_80
                    6970   vsprintf_94:
000041AA  0C80 0000 6971          cmp.l     #101,D0
000041AE  0065      
000041B0  6700 0042 6972          beq       vsprintf_82
000041B4  6E00 0168 6973          bgt       vsprintf_80
000041B8  0C80 0000 6974          cmp.l     #100,D0
000041BC  0064      
000041BE  6734      6975          beq.s     vsprintf_82
000041C0  6000 015C 6976          bra       vsprintf_80
                    6977   vsprintf_93:
000041C4  0C80 0000 6978          cmp.l     #117,D0
000041C8  0075      
000041CA  6728      6979          beq.s     vsprintf_82
000041CC  6E1A      6980          bgt.s     vsprintf_95
000041CE  0C80 0000 6981          cmp.l     #115,D0
000041D2  0073      
000041D4  6700 0038 6982          beq       vsprintf_96
000041D8  6E00 0144 6983          bgt       vsprintf_80
000041DC  0C80 0000 6984          cmp.l     #111,D0
000041E0  006F      
000041E2  6710      6985          beq.s     vsprintf_82
000041E4  6000 0138 6986          bra       vsprintf_80
                    6987   vsprintf_95:
000041E8  0C80 0000 6988          cmp.l     #120,D0
000041EC  0078      
000041EE  6704      6989          beq.s     vsprintf_82
000041F0  6000 012C 6990          bra       vsprintf_80
                    6991   vsprintf_82:
000041F4  4A2E FFD2 6992          tst.b     -46(A6)
000041F8  6714      6993          beq.s     vsprintf_96
000041FA  4A2E FFCD 6994          tst.b     -51(A6)
000041FE  660E      6995          bne.s     vsprintf_96
00004200  200D      6996          move.l    A5,D0
00004202  9087      6997          sub.l     D7,D0
00004204  4884      6998          ext.w     D4
00004206  48C4      6999          ext.l     D4
00004208  9084      7000          sub.l     D4,D0
0000420A  2D40 FFFC 7001          move.l    D0,-4(A6)
                    7002   vsprintf_96:
0000420E  202E FFFC 7003          move.l    -4(A6),D0
00004212  0C80 0000 7004          cmp.l     #0,D0
00004216  0000      
00004218  6C04      7005          bge.s     vsprintf_98
0000421A  42AE FFFC 7006          clr.l     -4(A6)
                    7007   vsprintf_98:
0000421E  4A2E FFCD 7008          tst.b     -51(A6)
00004222  6600 0030 7009          bne       vsprintf_104
00004226  4884      7010          ext.w     D4
00004228  48C4      7011          ext.l     D4
0000422A  2004      7012          move.l    D4,D0
0000422C  D0AE FFFC 7013          add.l     -4(A6),D0
00004230  D087      7014          add.l     D7,D0
00004232  1D40 FFD1 7015          move.b    D0,-47(A6)
                    7016   vsprintf_102:
00004236  102E FFD1 7017          move.b    -47(A6),D0
0000423A  4880      7018          ext.w     D0
0000423C  48C0      7019          ext.l     D0
0000423E  220D      7020          move.l    A5,D1
00004240  534D      7021          subq.w    #1,A5
00004242  B081      7022          cmp.l     D1,D0
00004244  6C0E      7023          bge.s     vsprintf_104
00004246  4878 0020 7024          pea       32
0000424A  2F0A      7025          move.l    A2,-(A7)
0000424C  4E93      7026          jsr       (A3)
0000424E  504F      7027          addq.w    #8,A7
00004250  5286      7028          addq.l    #1,D6
00004252  60E2      7029          bra       vsprintf_102
                    7030   vsprintf_104:
00004254  41EE FFD4 7031          lea       -44(A6),A0
00004258  2408      7032          move.l    A0,D2
                    7033   vsprintf_105:
0000425A  2042      7034          move.l    D2,A0
0000425C  4A10      7035          tst.b     (A0)
0000425E  6716      7036          beq.s     vsprintf_107
00004260  2042      7037          move.l    D2,A0
00004262  5282      7038          addq.l    #1,D2
00004264  1210      7039          move.b    (A0),D1
00004266  4881      7040          ext.w     D1
00004268  48C1      7041          ext.l     D1
0000426A  2F01      7042          move.l    D1,-(A7)
0000426C  2F0A      7043          move.l    A2,-(A7)
0000426E  4E93      7044          jsr       (A3)
00004270  504F      7045          addq.w    #8,A7
00004272  5286      7046          addq.l    #1,D6
00004274  60E4      7047          bra       vsprintf_105
                    7048   vsprintf_107:
00004276  202E FFFC 7049          move.l    -4(A6),D0
0000427A  1D40 FFD1 7050          move.b    D0,-47(A6)
                    7051   vsprintf_108:
0000427E  102E FFD1 7052          move.b    -47(A6),D0
00004282  532E FFD1 7053          subq.b    #1,-47(A6)
00004286  4A00      7054          tst.b     D0
00004288  670E      7055          beq.s     vsprintf_110
0000428A  4878 0030 7056          pea       48
0000428E  2F0A      7057          move.l    A2,-(A7)
00004290  4E93      7058          jsr       (A3)
00004292  504F      7059          addq.w    #8,A7
00004294  5286      7060          addq.l    #1,D6
00004296  60E6      7061          bra       vsprintf_108
                    7062   vsprintf_110:
00004298  2043      7063          move.l    D3,A0
0000429A  4A10      7064          tst.b     (A0)
0000429C  6700 0048 7065          beq       vsprintf_113
000042A0  206E 000C 7066          move.l    12(A6),A0
000042A4  1010      7067          move.b    (A0),D0
000042A6  4880      7068          ext.w     D0
000042A8  48C0      7069          ext.l     D0
000042AA  0C80 0000 7070          cmp.l     #115,D0
000042AE  0073      
000042B0  670C      7071          beq.s     vsprintf_116
000042B2  6E18      7072          bgt.s     vsprintf_119
000042B4  0C80 0000 7073          cmp.l     #99,D0
000042B8  0063      
000042BA  6702      7074          beq.s     vsprintf_116
000042BC  600E      7075          bra.s     vsprintf_119
                    7076   vsprintf_116:
000042BE  2005      7077          move.l    D5,D0
000042C0  5385      7078          subq.l    #1,D5
000042C2  0C80 0000 7079          cmp.l     #0,D0
000042C6  0000      
000042C8  6E02      7080          bgt.s     vsprintf_119
000042CA  6016      7081          bra.s     vsprintf_115
                    7082   vsprintf_119:
000042CC  2043      7083          move.l    D3,A0
000042CE  5283      7084          addq.l    #1,D3
000042D0  1210      7085          move.b    (A0),D1
000042D2  4881      7086          ext.w     D1
000042D4  48C1      7087          ext.l     D1
000042D6  2F01      7088          move.l    D1,-(A7)
000042D8  2F0A      7089          move.l    A2,-(A7)
000042DA  4E93      7090          jsr       (A3)
000042DC  504F      7091          addq.w    #8,A7
000042DE  5286      7092          addq.l    #1,D6
000042E0  6002      7093          bra.s     vsprintf_112
                    7094   vsprintf_115:
000042E2  6002      7095          bra.s     vsprintf_113
                    7096   vsprintf_112:
000042E4  60B2      7097          bra       vsprintf_110
                    7098   vsprintf_113:
000042E6  4A2E FFCD 7099          tst.b     -51(A6)
000042EA  6700 0030 7100          beq       vsprintf_125
000042EE  4884      7101          ext.w     D4
000042F0  48C4      7102          ext.l     D4
000042F2  2004      7103          move.l    D4,D0
000042F4  D0AE FFFC 7104          add.l     -4(A6),D0
000042F8  D087      7105          add.l     D7,D0
000042FA  1D40 FFD1 7106          move.b    D0,-47(A6)
                    7107   vsprintf_123:
000042FE  102E FFD1 7108          move.b    -47(A6),D0
00004302  4880      7109          ext.w     D0
00004304  48C0      7110          ext.l     D0
00004306  220D      7111          move.l    A5,D1
00004308  534D      7112          subq.w    #1,A5
0000430A  B081      7113          cmp.l     D1,D0
0000430C  6C0E      7114          bge.s     vsprintf_125
0000430E  4878 0020 7115          pea       32
00004312  2F0A      7116          move.l    A2,-(A7)
00004314  4E93      7117          jsr       (A3)
00004316  504F      7118          addq.w    #8,A7
00004318  5386      7119          subq.l    #1,D6
0000431A  60E2      7120          bra       vsprintf_123
                    7121   vsprintf_125:
0000431C  6014      7122          bra.s     vsprintf_81
                    7123   vsprintf_80:
0000431E  206E 000C 7124          move.l    12(A6),A0
00004322  1210      7125          move.b    (A0),D1
00004324  4881      7126          ext.w     D1
00004326  48C1      7127          ext.l     D1
00004328  2F01      7128          move.l    D1,-(A7)
0000432A  2F0A      7129          move.l    A2,-(A7)
0000432C  4E93      7130          jsr       (A3)
0000432E  504F      7131          addq.w    #8,A7
00004330  5286      7132          addq.l    #1,D6
                    7133   vsprintf_81:
00004332  52AE 000C 7134          addq.l    #1,12(A6)
                    7135   vsprintf_2:
00004336  6000 F9D6 7136          bra       vsprintf_1
                    7137   vsprintf_3:
0000433A  4A92      7138          tst.l     (A2)
0000433C  6710      7139          beq.s     vsprintf_126
0000433E  4201      7140          clr.b     D1
00004340  C2BC 0000 7141          and.l     #255,D1
00004344  00FF      
00004346  2F01      7142          move.l    D1,-(A7)
00004348  2F0A      7143          move.l    A2,-(A7)
0000434A  4E93      7144          jsr       (A3)
0000434C  504F      7145          addq.w    #8,A7
                    7146   vsprintf_126:
0000434E  2006      7147          move.l    D6,D0
00004350  4CDF 3CFC 7148          movem.l   (A7)+,D2/D3/D4/D5/D6/D7/A2/A3/A4/A5
00004354  4E5E      7149          unlk      A6
00004356  4E75      7150          rts
                    7151   ULMUL:
00004358  4E56 0000 7152          link    A6,#0
0000435C  48E7 C000 7153          movem.l D0/D1,-(A7)
00004360  222E 0008 7154          move.l  8(A6),D1
00004364  202E 000C 7155          move.l  12(A6),D0
00004368  602C      7156          bra.s   lmul_3
                    7157   LMUL:
0000436A  4E56 0000 7158          link    A6,#0
0000436E  48E7 C000 7159          movem.l D0/D1,-(A7)
00004372  222E 0008 7160          move.l  8(A6),D1
00004376  202E 000C 7161          move.l  12(A6),D0
0000437A  4A80      7162          tst.l   D0
0000437C  6A0A      7163          bpl.s   lmul_1
0000437E  4480      7164          neg.l   D0
00004380  4A81      7165          tst.l   D1
00004382  6A0A      7166          bpl.s   lmul_2
00004384  4481      7167          neg.l   D1
00004386  600E      7168          bra.s   lmul_3
                    7169   lmul_1:
00004388  4A81      7170          tst.l   D1
0000438A  6A0A      7171          bpl.s   lmul_3
0000438C  4481      7172          neg.l   D1
                    7173   lmul_2:
0000438E  6114      7174          bsr.s   domul
00004390  4481      7175          neg.l   D1
00004392  4080      7176          negx.l  D0
00004394  6002      7177          bra.s   lmul_4
                    7178   lmul_3:
00004396  610C      7179          bsr.s   domul
                    7180   lmul_4:
00004398  2D41 0008 7181          move.l  D1,8(A6)
0000439C  4CDF 0003 7182          movem.l (A7)+,D0/D1
000043A0  4E5E      7183          unlk    A6
000043A2  4E75      7184          rts
                    7185   domul:
000043A4  0C81 0000 7186          cmpi.l  #$FFFF,D1
000043A8  FFFF      
000043AA  620C      7187          bhi.s   domul_1
000043AC  0C80 0000 7188          cmpi.l  #$FFFF,D0
000043B0  FFFF      
000043B2  620E      7189          bhi.s   domul_2
000043B4  C2C0      7190          mulu    D0,D1
000043B6  4E75      7191          rts
                    7192   domul_1:
000043B8  0C80 0000 7193          cmpi.l  #$FFFF,D0
000043BC  FFFF      
000043BE  6218      7194          bhi.s   domul_4
000043C0  6002      7195          bra.s   domul_3
                    7196   domul_2
000043C2  C141      7197          exg     D0,D1
                    7198   domul_3:
000043C4  2F02      7199          move.l  D2,-(A7)
000043C6  2401      7200          move.l  D1,D2
000043C8  4842      7201          swap    D2
000043CA  C2C0      7202          mulu    D0,D1
000043CC  C4C0      7203          mulu    D0,D2
000043CE  4842      7204          swap    D2
000043D0  4242      7205          clr.w   D2
000043D2  D282      7206          add.l   D2,D1
000043D4  241F      7207          move.l  (A7)+,D2
000043D6  4E75      7208          rts
                    7209   domul_4:
000043D8  48E7 3000 7210          movem.l D2/D3,-(A7)
000043DC  2401      7211          move.l  D1,D2
000043DE  2601      7212          move.l  D1,D3
000043E0  C2C0      7213          mulu    D0,D1
000043E2  4842      7214          swap    D2
000043E4  C4C0      7215          mulu    D0,D2
000043E6  4840      7216          swap    D0
000043E8  C6C0      7217          mulu    D0,D3
000043EA  D483      7218          add.l   D3,D2
000043EC  4842      7219          swap    D2
000043EE  4242      7220          clr.w   D2
000043F0  D282      7221          add.l   D2,D1
000043F2  4CDF 000C 7222          movem.l (A7)+,D2/D3
000043F6  4E75      7223          rts
                    7224   _gets:
000043F8  4E56 0000 7225          link      A6,#0
000043FC  48E7 3820 7226          movem.l   D2/D3/D4/A2,-(A7)
00004400  45F8 326E 7227          lea       _putch,A2
00004404  282E 0008 7228          move.l    8(A6),D4
00004408  2404      7229          move.l    D4,D2
                    7230   gets_1:
0000440A  6100 EE92 7231          bsr       _getch
0000440E  2600      7232          move.l    D0,D3
00004410  0C80 0000 7233          cmp.l     #10,D0
00004414  000A      
00004416  6700 003C 7234          beq       gets_3
0000441A  0C83 0000 7235          cmp.l     #8,D3
0000441E  0008      
00004420  6712      7236          beq.s     gets_4
00004422  2042      7237          move.l    D2,A0
00004424  5282      7238          addq.l    #1,D2
00004426  1083      7239          move.b    D3,(A0)
00004428  4883      7240          ext.w     D3
0000442A  48C3      7241          ext.l     D3
0000442C  2F03      7242          move.l    D3,-(A7)
0000442E  4E92      7243          jsr       (A2)
00004430  584F      7244          addq.w    #4,A7
00004432  601E      7245          bra.s     gets_6
                    7246   gets_4:
00004434  B484      7247          cmp.l     D4,D2
00004436  631A      7248          bls.s     gets_6
00004438  4878 0008 7249          pea       8
0000443C  4E92      7250          jsr       (A2)
0000443E  584F      7251          addq.w    #4,A7
00004440  4878 0020 7252          pea       32
00004444  4E92      7253          jsr       (A2)
00004446  584F      7254          addq.w    #4,A7
00004448  4878 0008 7255          pea       8
0000444C  4E92      7256          jsr       (A2)
0000444E  584F      7257          addq.w    #4,A7
00004450  5382      7258          subq.l    #1,D2
                    7259   gets_6:
00004452  60B6      7260          bra       gets_1
                    7261   gets_3:
00004454  4878 000A 7262          pea       10
00004458  4E92      7263          jsr       (A2)
0000445A  584F      7264          addq.w    #4,A7
0000445C  2042      7265          move.l    D2,A0
0000445E  4210      7266          clr.b     (A0)
00004460  2004      7267          move.l    D4,D0
00004462  4CDF 041C 7268          movem.l   (A7)+,D2/D3/D4/A2
00004466  4E5E      7269          unlk      A6
00004468  4E75      7270          rts
                    7271   _ungetch:
0000446A  4E56 0000 7272          link      A6,#0
0000446E  23EE 0008 7273          move.l    8(A6),__ungetbuf
00004472  0B00 00C0 
00004476  202E 0008 7274          move.l    8(A6),D0
0000447A  4E5E      7275          unlk      A6
0000447C  4E75      7276          rts
                    7277   @itoa_convert:
0000447E  4E56 0000 7278          link      A6,#0
00004482  48E7 3C00 7279          movem.l   D2/D3/D4/D5,-(A7)
00004486  242E 0008 7280          move.l    8(A6),D2
0000448A  262E 0010 7281          move.l    16(A6),D3
0000448E  2A2E 000C 7282          move.l    12(A6),D5
00004492  2F05      7283          move.l    D5,-(A7)
00004494  2F03      7284          move.l    D3,-(A7)
00004496  6100 ECE6 7285          bsr       ULDIV
0000449A  202F 0004 7286          move.l    4(A7),D0
0000449E  504F      7287          addq.w    #8,A7
000044A0  2800      7288          move.l    D0,D4
000044A2  BA83      7289          cmp.l     D3,D5
000044A4  651A      7290          blo.s     @itoa_convert_1
000044A6  2F03      7291          move.l    D3,-(A7)
000044A8  2F05      7292          move.l    D5,-(A7)
000044AA  2F03      7293          move.l    D3,-(A7)
000044AC  6100 ECD0 7294          bsr       ULDIV
000044B0  2217      7295          move.l    (A7),D1
000044B2  504F      7296          addq.w    #8,A7
000044B4  2F01      7297          move.l    D1,-(A7)
000044B6  2F02      7298          move.l    D2,-(A7)
000044B8  61C4      7299          bsr       @itoa_convert
000044BA  DEFC 000C 7300          add.w     #12,A7
000044BE  2400      7301          move.l    D0,D2
                    7302   @itoa_convert_1:
000044C0  0C84 0000 7303          cmp.l     #9,D4
000044C4  0009      
000044C6  6E0A      7304          bgt.s     @itoa_convert_3
000044C8  2004      7305          move.l    D4,D0
000044CA  0680 0000 7306          add.l     #48,D0
000044CE  0030      
000044D0  600E      7307          bra.s     @itoa_convert_4
                    7308   @itoa_convert_3:
000044D2  2004      7309          move.l    D4,D0
000044D4  0680 0000 7310          add.l     #97,D0
000044D8  0061      
000044DA  0480 0000 7311          sub.l     #10,D0
000044DE  000A      
                    7312   @itoa_convert_4:
000044E0  2042      7313          move.l    D2,A0
000044E2  1080      7314          move.b    D0,(A0)
000044E4  2002      7315          move.l    D2,D0
000044E6  5280      7316          addq.l    #1,D0
000044E8  4CDF 003C 7317          movem.l   (A7)+,D2/D3/D4/D5
000044EC  4E5E      7318          unlk      A6
000044EE  4E75      7319          rts
                    7320   _ltoa:
000044F0  4E56 0000 7321          link      A6,#0
000044F4  48E7 3C00 7322          movem.l   D2/D3/D4/D5,-(A7)
000044F8  242E 0008 7323          move.l    8(A6),D2
000044FC  262E 000C 7324          move.l    12(A6),D3
00004500  2A2E 0010 7325          move.l    16(A6),D5
00004504  2803      7326          move.l    D3,D4
00004506  0C85 0000 7327          cmp.l     #2,D5
0000450A  0002      
0000450C  6D08      7328          blt.s     ltoa_3
0000450E  0C85 0000 7329          cmp.l     #36,D5
00004512  0024      
00004514  6F06      7330          ble.s     ltoa_1
                    7331   ltoa_3:
00004516  2003      7332          move.l    D3,D0
00004518  6000 0052 7333          bra       ltoa_4
                    7334   ltoa_1:
0000451C  0C85 0000 7335          cmp.l     #10,D5
00004520  000A      
00004522  6600 0032 7336          bne       ltoa_5
00004526  0C82 0000 7337          cmp.l     #0,D2
0000452A  0000      
0000452C  6C28      7338          bge.s     ltoa_5
0000452E  2002      7339          move.l    D2,D0
00004530  4480      7340          neg.l     D0
00004532  2400      7341          move.l    D0,D2
00004534  0C82 0000 7342          cmp.l     #0,D2
00004538  0000      
0000453A  6C12      7343          bge.s     ltoa_7
0000453C  4879 0000 7344          pea       @itoa_1
00004540  5AEE      
00004542  2F03      7345          move.l    D3,-(A7)
00004544  6100 EC28 7346          bsr       _strcpy
00004548  504F      7347          addq.w    #8,A7
0000454A  2003      7348          move.l    D3,D0
0000454C  601E      7349          bra.s     ltoa_4
                    7350   ltoa_7:
0000454E  2044      7351          move.l    D4,A0
00004550  5284      7352          addq.l    #1,D4
00004552  10BC 002D 7353          move.b    #45,(A0)
                    7354   ltoa_5:
00004556  2F05      7355          move.l    D5,-(A7)
00004558  2F02      7356          move.l    D2,-(A7)
0000455A  2F04      7357          move.l    D4,-(A7)
0000455C  6100 FF20 7358          bsr       @itoa_convert
00004560  DEFC 000C 7359          add.w     #12,A7
00004564  2800      7360          move.l    D0,D4
00004566  2044      7361          move.l    D4,A0
00004568  4210      7362          clr.b     (A0)
0000456A  2003      7363          move.l    D3,D0
                    7364   ltoa_4:
0000456C  4CDF 003C 7365          movem.l   (A7)+,D2/D3/D4/D5
00004570  4E5E      7366          unlk      A6
00004572  4E75      7367          rts
                    7368   _ultoa:
00004574  4E56 0000 7369          link      A6,#0
00004578  48E7 3800 7370          movem.l   D2/D3/D4,-(A7)
0000457C  262E 0010 7371          move.l    16(A6),D3
00004580  282E 000C 7372          move.l    12(A6),D4
00004584  2404      7373          move.l    D4,D2
00004586  0C83 0000 7374          cmp.l     #2,D3
0000458A  0002      
0000458C  6D08      7375          blt.s     ultoa_3
0000458E  0C83 0000 7376          cmp.l     #36,D3
00004592  0024      
00004594  6F04      7377          ble.s     ultoa_1
                    7378   ultoa_3:
00004596  2004      7379          move.l    D4,D0
00004598  6018      7380          bra.s     ultoa_4
                    7381   ultoa_1:
0000459A  2F03      7382          move.l    D3,-(A7)
0000459C  2F2E 0008 7383          move.l    8(A6),-(A7)
000045A0  2F02      7384          move.l    D2,-(A7)
000045A2  6100 FEDA 7385          bsr       @itoa_convert
000045A6  DEFC 000C 7386          add.w     #12,A7
000045AA  2400      7387          move.l    D0,D2
000045AC  2042      7388          move.l    D2,A0
000045AE  4210      7389          clr.b     (A0)
000045B0  2004      7390          move.l    D4,D0
                    7391   ultoa_4:
000045B2  4CDF 001C 7392          movem.l   (A7)+,D2/D3/D4
000045B6  4E5E      7393          unlk      A6
000045B8  4E75      7394          rts
                    7395   _itoa:
000045BA  4E56 0000 7396          link      A6,#0
000045BE  2F2E 0010 7397          move.l    16(A6),-(A7)
000045C2  2F2E 000C 7398          move.l    12(A6),-(A7)
000045C6  2F2E 0008 7399          move.l    8(A6),-(A7)
000045CA  6100 FF24 7400          bsr       _ltoa
000045CE  DEFC 000C 7401          add.w     #12,A7
000045D2  4E5E      7402          unlk      A6
000045D4  4E75      7403          rts
                    7404          section   const
                    7405   
                    7406   @m68kde~1_1:
000045D6  0D0A 00   7407          dc.b      13,10,0
                    7408   @m68kde~1_2:
000045DA  0D53 7769 7409          dc.b      13,83,119,105,116,99,104,101,115,32,83,87,91
000045DE  7463 6865 
000045E2  7320 5357 
000045E6  5B        
000045E7  372D 305D 7410          dc.b      55,45,48,93,32,61,32,0
000045EB  203D 2000 
                    7411   @m68kde~1_3:
000045F0  3000      7412          dc.b      48,0
                    7413   @m68kde~1_4:
000045F2  3100      7414          dc.b      49,0
                    7415   @m68kde~1_5:
000045F4  0D0A 4475 7416          dc.b      13,10,68,117,109,112,32,77,101,109,111,114,121
000045F8  6D70 204D 
000045FC  656D 6F72 
00004600  79        
00004601  2042 6C6F 7417          dc.b      32,66,108,111,99,107,58,32,60,69,83,67,62,32
00004605  636B 3A20 
00004609  3C45 5343 
0000460D  3E20      
0000460F  746F 2041 7418          dc.b      116,111,32,65,98,111,114,116,44,32,60,83,80
00004613  626F 7274 
00004617  2C20 3C53 
0000461B  50        
0000461C  4143 453E 7419          dc.b      65,67,69,62,32,116,111,32,67,111,110,116,105
00004620  2074 6F20 
00004624  436F 6E74 
00004628  69        
00004629  6E75 6500 7420          dc.b      110,117,101,0
                    7421   @m68kde~1_6:
0000462E  0D0A 456E 7422          dc.b      13,10,69,110,116,101,114,32,83,116,97,114,116
00004632  7465 7220 
00004636  5374 6172 
0000463A  74        
0000463B  2041 6464 7423          dc.b      32,65,100,100,114,101,115,115,58,32,0
0000463F  7265 7373 
00004643  3A20 00   
                    7424   @m68kde~1_7:
00004646  0D0A 2530 7425          dc.b      13,10,37,48,56,120,32,0
0000464A  3878 2000 
                    7426   @m68kde~1_8:
0000464E  2530 3258 7427          dc.b      37,48,50,88,0
00004652  00        
                    7428   @m68kde~1_9:
00004654  2020 00   7429          dc.b      32,32,0
                    7430   @m68kde~1_10:
00004658  0D0A 4669 7431          dc.b      13,10,70,105,108,108,32,77,101,109,111,114,121
0000465C  6C6C 204D 
00004660  656D 6F72 
00004664  79        
00004665  2042 6C6F 7432          dc.b      32,66,108,111,99,107,0
00004669  636B 00   
                    7433   @m68kde~1_11:
0000466C  0D0A 456E 7434          dc.b      13,10,69,110,116,101,114,32,69,110,100,32,65
00004670  7465 7220 
00004674  456E 6420 
00004678  41        
00004679  6464 7265 7435          dc.b      100,100,114,101,115,115,58,32,0
0000467D  7373 3A20 
00004681  00        
                    7436   @m68kde~1_12:
00004682  0D0A 456E 7437          dc.b      13,10,69,110,116,101,114,32,70,105,108,108,32
00004686  7465 7220 
0000468A  4669 6C6C 
0000468E  20        
0000468F  4461 7461 7438          dc.b      68,97,116,97,58,32,0
00004693  3A20 00   
                    7439   @m68kde~1_13:
00004696  0D0A 4669 7440          dc.b      13,10,70,105,108,108,105,110,103,32,65,100,100
0000469A  6C6C 696E 
0000469E  6720 4164 
000046A2  64        
000046A3  7265 7373 7441          dc.b      114,101,115,115,101,115,32,91,36,37,48,56,88
000046A7  6573 205B 
000046AB  2425 3038 
000046AF  58        
000046B0  202D 2024 7442          dc.b      32,45,32,36,37,48,56,88,93,32,119,105,116,104
000046B4  2530 3858 
000046B8  5D20 7769 
000046BC  7468      
000046BE  2024 2530 7443          dc.b      32,36,37,48,50,88,0
000046C2  3258 00   
                    7444   @m68kde~1_14:
000046C6  0D0A 5573 7445          dc.b      13,10,85,115,101,32,72,121,112,101,114,84,101
000046CA  6520 4879 
000046CE  7065 7254 
000046D2  65        
000046D3  726D 696E 7446          dc.b      114,109,105,110,97,108,32,116,111,32,83,101
000046D7  616C 2074 
000046DB  6F20 5365 
000046DF  6E64 2054 7447          dc.b      110,100,32,84,101,120,116,32,70,105,108,101
000046E3  6578 7420 
000046E7  4669 6C65 
000046EB  2028 2E68 7448          dc.b      32,40,46,104,101,120,41,13,10,0
000046EF  6578 290D 
000046F3  0A00      
                    7449   @m68kde~1_15:
000046F6  0D0A 4C6F 7450          dc.b      13,10,76,111,97,100,32,70,97,105,108,101,100
000046FA  6164 2046 
000046FE  6169 6C65 
00004702  64        
00004703  2061 7420 7451          dc.b      32,97,116,32,65,100,100,114,101,115,115,32,61
00004707  4164 6472 
0000470B  6573 7320 
0000470F  3D        
00004710  205B 2425 7452          dc.b      32,91,36,37,48,56,88,93,13,10,0
00004714  3038 585D 
00004718  0D0A 00   
                    7453   @m68kde~1_16:
0000471C  0D0A 5375 7454          dc.b      13,10,83,117,99,99,101,115,115,58,32,68,111
00004720  6363 6573 
00004724  733A 2044 
00004728  6F        
00004729  776E 6C6F 7455          dc.b      119,110,108,111,97,100,101,100,32,37,100,32
0000472D  6164 6564 
00004731  2025 6420 
00004735  6279 7465 7456          dc.b      98,121,116,101,115,13,10,0
00004739  730D 0A00 
                    7457   @m68kde~1_17:
0000473E  0D0A 4578 7458          dc.b      13,10,69,120,97,109,105,110,101,32,97,110,100
00004742  616D 696E 
00004746  6520 616E 
0000474A  64        
0000474B  2043 6861 7459          dc.b      32,67,104,97,110,103,101,32,77,101,109,111,114
0000474F  6E67 6520 
00004753  4D65 6D6F 
00004757  72        
00004758  7900      7460          dc.b      121,0
                    7461   @m68kde~1_18:
0000475A  0D0A 3C45 7462          dc.b      13,10,60,69,83,67,62,32,116,111,32,83,116,111
0000475E  5343 3E20 
00004762  746F 2053 
00004766  746F      
00004768  702C 203C 7463          dc.b      112,44,32,60,83,80,65,67,69,62,32,116,111,32
0000476C  5350 4143 
00004770  453E 2074 
00004774  6F20      
00004776  4164 7661 7464          dc.b      65,100,118,97,110,99,101,44,32,39,45,39,32,116
0000477A  6E63 652C 
0000477E  2027 2D27 
00004782  2074      
00004784  6F20 476F 7465          dc.b      111,32,71,111,32,66,97,99,107,44,32,60,68,65
00004788  2042 6163 
0000478C  6B2C 203C 
00004790  4441      
00004792  5441 3E20 7466          dc.b      84,65,62,32,116,111,32,99,104,97,110,103,101
00004796  746F 2063 
0000479A  6861 6E67 
0000479E  65        
0000479F  00        7467          dc.b      0
                    7468   @m68kde~1_19:
000047A0  0D0A 456E 7469          dc.b      13,10,69,110,116,101,114,32,65,100,100,114,101
000047A4  7465 7220 
000047A8  4164 6472 
000047AC  65        
000047AD  7373 3A20 7470          dc.b      115,115,58,32,0
000047B1  00        
                    7471   @m68kde~1_20:
000047B2  0D0A 5B25 7472          dc.b      13,10,91,37,48,56,120,93,32,58,32,37,48,50,120
000047B6  3038 785D 
000047BA  203A 2025 
000047BE  3032 78   
000047C1  2020 00   7473          dc.b      32,32,0
                    7474   @m68kde~1_21:
000047C4  0D0A 5761 7475          dc.b      13,10,87,97,114,110,105,110,103,32,67,104,97
000047C8  726E 696E 
000047CC  6720 4368 
000047D0  61        
000047D1  6E67 6520 7476          dc.b      110,103,101,32,70,97,105,108,101,100,58,32,87
000047D5  4661 696C 
000047D9  6564 3A20 
000047DD  57        
000047DE  726F 7465 7477          dc.b      114,111,116,101,32,91,37,48,50,120,93,44,32
000047E2  205B 2530 
000047E6  3278 5D2C 
000047EA  20        
000047EB  5265 6164 7478          dc.b      82,101,97,100,32,91,37,48,50,120,93,0
000047EF  205B 2530 
000047F3  3278 5D00 
                    7479   @m68kde~1_22:
000047F8  0D0A 4C6F 7480          dc.b      13,10,76,111,97,100,105,110,103,32,80,114,111
000047FC  6164 696E 
00004800  6720 5072 
00004804  6F        
00004805  6772 616D 7481          dc.b      103,114,97,109,32,70,114,111,109,32,83,80,73
00004809  2046 726F 
0000480D  6D20 5350 
00004811  49        
00004812  2046 6C61 7482          dc.b      32,70,108,97,115,104,46,46,46,46,0
00004816  7368 2E2E 
0000481A  2E2E 00   
                    7483   @m68kde~1_23:
0000481E  2425 3038 7484          dc.b      36,37,48,56,88,32,32,0
00004822  5820 2000 
                    7485   @m68kde~1_24:
00004826  2000      7486          dc.b      32,0
                    7487   @m68kde~1_25:
00004828  2E00      7488          dc.b      46,0
                    7489   @m68kde~1_26:
0000482A  2563 00   7490          dc.b      37,99,0
                    7491   @m68kde~1_27:
0000482E  00        7492          dc.b      0
                    7493   @m68kde~1_28:
00004830  0D0A 0D0A 7494          dc.b      13,10,13,10,32,68,48,32,61,32,36,37,48,56,88
00004834  2044 3020 
00004838  3D20 2425 
0000483C  3038 58   
0000483F  2020 4130 7495          dc.b      32,32,65,48,32,61,32,36,37,48,56,88,0
00004843  203D 2024 
00004847  2530 3858 
0000484B  00        
                    7496   @m68kde~1_29:
0000484C  0D0A 2044 7497          dc.b      13,10,32,68,49,32,61,32,36,37,48,56,88,32,32
00004850  3120 3D20 
00004854  2425 3038 
00004858  5820 20   
0000485B  4131 203D 7498          dc.b      65,49,32,61,32,36,37,48,56,88,0
0000485F  2024 2530 
00004863  3858 00   
                    7499   @m68kde~1_30:
00004866  0D0A 2044 7500          dc.b      13,10,32,68,50,32,61,32,36,37,48,56,88,32,32
0000486A  3220 3D20 
0000486E  2425 3038 
00004872  5820 20   
00004875  4132 203D 7501          dc.b      65,50,32,61,32,36,37,48,56,88,0
00004879  2024 2530 
0000487D  3858 00   
                    7502   @m68kde~1_31:
00004880  0D0A 2044 7503          dc.b      13,10,32,68,51,32,61,32,36,37,48,56,88,32,32
00004884  3320 3D20 
00004888  2425 3038 
0000488C  5820 20   
0000488F  4133 203D 7504          dc.b      65,51,32,61,32,36,37,48,56,88,0
00004893  2024 2530 
00004897  3858 00   
                    7505   @m68kde~1_32:
0000489A  0D0A 2044 7506          dc.b      13,10,32,68,52,32,61,32,36,37,48,56,88,32,32
0000489E  3420 3D20 
000048A2  2425 3038 
000048A6  5820 20   
000048A9  4134 203D 7507          dc.b      65,52,32,61,32,36,37,48,56,88,0
000048AD  2024 2530 
000048B1  3858 00   
                    7508   @m68kde~1_33:
000048B4  0D0A 2044 7509          dc.b      13,10,32,68,53,32,61,32,36,37,48,56,88,32,32
000048B8  3520 3D20 
000048BC  2425 3038 
000048C0  5820 20   
000048C3  4135 203D 7510          dc.b      65,53,32,61,32,36,37,48,56,88,0
000048C7  2024 2530 
000048CB  3858 00   
                    7511   @m68kde~1_34:
000048CE  0D0A 2044 7512          dc.b      13,10,32,68,54,32,61,32,36,37,48,56,88,32,32
000048D2  3620 3D20 
000048D6  2425 3038 
000048DA  5820 20   
000048DD  4136 203D 7513          dc.b      65,54,32,61,32,36,37,48,56,88,0
000048E1  2024 2530 
000048E5  3858 00   
                    7514   @m68kde~1_35:
000048E8  0D0A 2044 7515          dc.b      13,10,32,68,55,32,61,32,36,37,48,56,88,32,32
000048EC  3720 3D20 
000048F0  2425 3038 
000048F4  5820 20   
000048F7  4137 203D 7516          dc.b      65,55,32,61,32,36,37,48,56,88,0
000048FB  2024 2530 
000048FF  3858 00   
                    7517   @m68kde~1_36:
00004902  0D0A 0D0A 7518          dc.b      13,10,13,10,85,83,80,32,61,32,36,37,48,56,88
00004906  5553 5020 
0000490A  3D20 2425 
0000490E  3038 58   
00004911  2020 2841 7519          dc.b      32,32,40,65,55,41,32,85,115,101,114,32,83,80
00004915  3729 2055 
00004919  7365 7220 
0000491D  5350      
0000491F  00        7520          dc.b      0
                    7521   @m68kde~1_37:
00004920  0D0A 5353 7522          dc.b      13,10,83,83,80,32,61,32,36,37,48,56,88,32,32
00004924  5020 3D20 
00004928  2425 3038 
0000492C  5820 20   
0000492F  2841 3729 7523          dc.b      40,65,55,41,32,83,117,112,101,114,118,105,115
00004933  2053 7570 
00004937  6572 7669 
0000493B  73        
0000493C  6F72 2053 7524          dc.b      111,114,32,83,80,0
00004940  5000      
                    7525   @m68kde~1_38:
00004942  0D0A 2053 7526          dc.b      13,10,32,83,82,32,61,32,36,37,48,52,88,32,32
00004946  5220 3D20 
0000494A  2425 3034 
0000494E  5820 20   
00004951  2000      7527          dc.b      32,0
                    7528   @m68kde~1_39:
00004954  2020 205B 7529          dc.b      32,32,32,91,0
00004958  00        
                    7530   @m68kde~1_40:
0000495A  0D0A 2050 7531          dc.b      13,10,32,80,67,32,61,32,36,37,48,56,88,32,32
0000495E  4320 3D20 
00004962  2425 3038 
00004966  5820 20   
00004969  00        7532          dc.b      0
                    7533   @m68kde~1_41:
0000496A  5B40 2042 7534          dc.b      91,64,32,66,82,69,65,75,80,79,73,78,84,93,0
0000496E  5245 414B 
00004972  504F 494E 
00004976  545D 00   
                    7535   @m68kde~1_42:
0000497A  0D0A 5750 7536          dc.b      13,10,87,80,37,100,32,61,32,37,115,0
0000497E  2564 203D 
00004982  2025 7300 
                    7537   @m68kde~1_43:
00004986  0D0A 0D0A 7538          dc.b      13,10,13,10,13,10,13,10,13,10,13,10,83,105,110
0000498A  0D0A 0D0A 
0000498E  0D0A 0D0A 
00004992  5369 6E   
00004995  676C 6520 7539          dc.b      103,108,101,32,83,116,101,112,32,32,58,91,79
00004999  5374 6570 
0000499D  2020 3A5B 
000049A1  4F        
000049A2  4E5D 00   7540          dc.b      78,93,0
                    7541   @m68kde~1_44:
000049A6  0D0A 4272 7542          dc.b      13,10,66,114,101,97,107,32,80,111,105,110,116
000049AA  6561 6B20 
000049AE  506F 696E 
000049B2  74        
000049B3  7320 3A5B 7543          dc.b      115,32,58,91,68,105,115,97,98,108,101,100,93
000049B7  4469 7361 
000049BB  626C 6564 
000049BF  5D        
000049C0  00        7544          dc.b      0
                    7545   @m68kde~1_45:
000049C2  0D0A 5072 7546          dc.b      13,10,80,114,101,115,115,32,60,83,80,65,67,69
000049C6  6573 7320 
000049CA  3C53 5041 
000049CE  4345      
000049D0  3E20 746F 7547          dc.b      62,32,116,111,32,69,120,101,99,117,116,101,32
000049D4  2045 7865 
000049D8  6375 7465 
000049DC  20        
000049DD  4E65 7874 7548          dc.b      78,101,120,116,32,73,110,115,116,114,117,99
000049E1  2049 6E73 
000049E5  7472 7563 
000049E9  7469 6F6E 7549          dc.b      116,105,111,110,0
000049ED  00        
                    7550   @m68kde~1_46:
000049EE  0D0A 5072 7551          dc.b      13,10,80,114,101,115,115,32,60,69,83,67,62,32
000049F2  6573 7320 
000049F6  3C45 5343 
000049FA  3E20      
000049FC  746F 2052 7552          dc.b      116,111,32,82,101,115,117,109,101,32,80,114
00004A00  6573 756D 
00004A04  6520 5072 
00004A08  6F67 7261 7553          dc.b      111,103,114,97,109,0
00004A0C  6D00      
                    7554   @m68kde~1_47:
00004A0E  0D0A 496C 7555          dc.b      13,10,73,108,108,101,103,97,108,32,68,97,116
00004A12  6C65 6761 
00004A16  6C20 4461 
00004A1A  74        
00004A1B  6120 5265 7556          dc.b      97,32,82,101,103,105,115,116,101,114,32,58,32
00004A1F  6769 7374 
00004A23  6572 203A 
00004A27  20        
00004A28  5573 6520 7557          dc.b      85,115,101,32,68,48,45,68,55,46,46,46,46,46
00004A2C  4430 2D44 
00004A30  372E 2E2E 
00004A34  2E2E      
00004A36  0D0A 00   7558          dc.b      13,10,0
                    7559   @m68kde~1_48:
00004A3A  0D0A 4425 7560          dc.b      13,10,68,37,99,32,61,32,0
00004A3E  6320 3D20 
00004A42  00        
                    7561   @m68kde~1_49:
00004A44  0D0A 496C 7562          dc.b      13,10,73,108,108,101,103,97,108,32,65,100,100
00004A48  6C65 6761 
00004A4C  6C20 4164 
00004A50  64        
00004A51  7265 7373 7563          dc.b      114,101,115,115,32,82,101,103,105,115,116,101
00004A55  2052 6567 
00004A59  6973 7465 
00004A5D  7220 3A20 7564          dc.b      114,32,58,32,85,115,101,32,65,48,45,65,55,46
00004A61  5573 6520 
00004A65  4130 2D41 
00004A69  372E      
00004A6B  2E2E 2E2E 7565          dc.b      46,46,46,46,13,10,0
00004A6F  0D0A 00   
                    7566   @m68kde~1_50:
00004A72  0D0A 4125 7567          dc.b      13,10,65,37,99,32,61,32,0
00004A76  6320 3D20 
00004A7A  00        
                    7568   @m68kde~1_51:
00004A7C  0D0A 5573 7569          dc.b      13,10,85,115,101,114,32,83,80,32,61,32,0
00004A80  6572 2053 
00004A84  5020 3D20 
00004A88  00        
                    7570   @m68kde~1_52:
00004A8A  0D0A 496C 7571          dc.b      13,10,73,108,108,101,103,97,108,32,82,101,103
00004A8E  6C65 6761 
00004A92  6C20 5265 
00004A96  67        
00004A97  6973 7465 7572          dc.b      105,115,116,101,114,46,46,46,46,0
00004A9B  722E 2E2E 
00004A9F  2E00      
                    7573   @m68kde~1_53:
00004AA2  0D0A 5379 7574          dc.b      13,10,83,121,115,116,101,109,32,83,80,32,61
00004AA6  7374 656D 
00004AAA  2053 5020 
00004AAE  3D        
00004AAF  2000      7575          dc.b      32,0
                    7576   @m68kde~1_54:
00004AB2  0D0A 5043 7577          dc.b      13,10,80,67,32,61,32,0
00004AB6  203D 2000 
                    7578   @m68kde~1_55:
00004ABA  0D0A 5352 7579          dc.b      13,10,83,82,32,61,32,0
00004ABE  203D 2000 
                    7580   @m68kde~1_56:
00004AC2  0D0A 496C 7581          dc.b      13,10,73,108,108,101,103,97,108,32,82,101,103
00004AC6  6C65 6761 
00004ACA  6C20 5265 
00004ACE  67        
00004ACF  6973 7465 7582          dc.b      105,115,116,101,114,58,32,85,115,101,32,65,48
00004AD3  723A 2055 
00004AD7  7365 2041 
00004ADB  30        
00004ADC  2D41 372C 7583          dc.b      45,65,55,44,32,68,48,45,68,55,44,32,83,83,80
00004AE0  2044 302D 
00004AE4  4437 2C20 
00004AE8  5353 50   
00004AEB  2C20 5553 7584          dc.b      44,32,85,83,80,44,32,80,67,32,111,114,32,83
00004AEF  502C 2050 
00004AF3  4320 6F72 
00004AF7  2053      
00004AF9  520D 0A00 7585          dc.b      82,13,10,0
                    7586   @m68kde~1_57:
00004AFE  0D0A 0D0A 7587          dc.b      13,10,13,10,78,117,109,32,32,32,32,32,65,100
00004B02  4E75 6D20 
00004B06  2020 2020 
00004B0A  4164      
00004B0C  6472 6573 7588          dc.b      100,114,101,115,115,32,32,32,32,32,32,73,110
00004B10  7320 2020 
00004B14  2020 2049 
00004B18  6E        
00004B19  7374 7275 7589          dc.b      115,116,114,117,99,116,105,111,110,0
00004B1D  6374 696F 
00004B21  6E00      
                    7590   @m68kde~1_58:
00004B24  0D0A 2D2D 7591          dc.b      13,10,45,45,45,32,32,32,32,32,45,45,45,45,45
00004B28  2D20 2020 
00004B2C  2020 2D2D 
00004B30  2D2D 2D   
00004B33  2D2D 2D2D 7592          dc.b      45,45,45,45,32,32,32,32,45,45,45,45,45,45,45
00004B37  2020 2020 
00004B3B  2D2D 2D2D 
00004B3F  2D2D 2D   
00004B42  2D2D 2D2D 7593          dc.b      45,45,45,45,0
00004B46  00        
                    7594   @m68kde~1_59:
00004B48  0D0A 4E6F 7595          dc.b      13,10,78,111,32,66,114,101,97,107,80,111,105
00004B4C  2042 7265 
00004B50  616B 506F 
00004B54  69        
00004B55  6E74 7320 7596          dc.b      110,116,115,32,83,101,116,0
00004B59  5365 7400 
                    7597   @m68kde~1_60:
00004B5E  0D0A 2533 7598          dc.b      13,10,37,51,100,32,32,32,32,32,36,37,48,56,120
00004B62  6420 2020 
00004B66  2020 2425 
00004B6A  3038 78   
00004B6D  00        7599          dc.b      0
                    7600   @m68kde~1_61:
00004B6E  0D0A 4E75 7601          dc.b      13,10,78,117,109,32,32,32,32,32,65,100,100,114
00004B72  6D20 2020 
00004B76  2020 4164 
00004B7A  6472      
00004B7C  6573 7300 7602          dc.b      101,115,115,0
                    7603   @m68kde~1_62:
00004B80  0D0A 2D2D 7604          dc.b      13,10,45,45,45,32,32,32,32,32,45,45,45,45,45
00004B84  2D20 2020 
00004B88  2020 2D2D 
00004B8C  2D2D 2D   
00004B8F  2D2D 2D2D 7605          dc.b      45,45,45,45,0
00004B93  00        
                    7606   @m68kde~1_63:
00004B94  0D0A 4E6F 7607          dc.b      13,10,78,111,32,87,97,116,99,104,80,111,105
00004B98  2057 6174 
00004B9C  6368 506F 
00004BA0  69        
00004BA1  6E74 7320 7608          dc.b      110,116,115,32,83,101,116,0
00004BA5  5365 7400 
                    7609   @m68kde~1_64:
00004BAA  0D0A 456E 7610          dc.b      13,10,69,110,116,101,114,32,66,114,101,97,107
00004BAE  7465 7220 
00004BB2  4272 6561 
00004BB6  6B        
00004BB7  2050 6F69 7611          dc.b      32,80,111,105,110,116,32,78,117,109,98,101,114
00004BBB  6E74 204E 
00004BBF  756D 6265 
00004BC3  72        
00004BC4  3A20 00   7612          dc.b      58,32,0
                    7613   @m68kde~1_65:
00004BC8  0D0A 496C 7614          dc.b      13,10,73,108,108,101,103,97,108,32,82,97,110
00004BCC  6C65 6761 
00004BD0  6C20 5261 
00004BD4  6E        
00004BD5  6765 203A 7615          dc.b      103,101,32,58,32,85,115,101,32,48,32,45,32,55
00004BD9  2055 7365 
00004BDD  2030 202D 
00004BE1  2037      
00004BE3  00        7616          dc.b      0
                    7617   @m68kde~1_66:
00004BE4  0D0A 4272 7618          dc.b      13,10,66,114,101,97,107,32,80,111,105,110,116
00004BE8  6561 6B20 
00004BEC  506F 696E 
00004BF0  74        
00004BF1  2043 6C65 7619          dc.b      32,67,108,101,97,114,101,100,46,46,46,46,46
00004BF5  6172 6564 
00004BF9  2E2E 2E2E 
00004BFD  2E        
00004BFE  0D0A 00   7620          dc.b      13,10,0
                    7621   @m68kde~1_67:
00004C02  0D0A 4272 7622          dc.b      13,10,66,114,101,97,107,32,80,111,105,110,116
00004C06  6561 6B20 
00004C0A  506F 696E 
00004C0E  74        
00004C0F  2077 6173 7623          dc.b      32,119,97,115,110,39,116,32,83,101,116,46,46
00004C13  6E27 7420 
00004C17  5365 742E 
00004C1B  2E        
00004C1C  2E2E 2E00 7624          dc.b      46,46,46,0
                    7625   @m68kde~1_68:
00004C20  0D0A 456E 7626          dc.b      13,10,69,110,116,101,114,32,87,97,116,99,104
00004C24  7465 7220 
00004C28  5761 7463 
00004C2C  68        
00004C2D  2050 6F69 7627          dc.b      32,80,111,105,110,116,32,78,117,109,98,101,114
00004C31  6E74 204E 
00004C35  756D 6265 
00004C39  72        
00004C3A  3A20 00   7628          dc.b      58,32,0
                    7629   @m68kde~1_69:
00004C3E  0D0A 5761 7630          dc.b      13,10,87,97,116,99,104,32,80,111,105,110,116
00004C42  7463 6820 
00004C46  506F 696E 
00004C4A  74        
00004C4B  2043 6C65 7631          dc.b      32,67,108,101,97,114,101,100,46,46,46,46,46
00004C4F  6172 6564 
00004C53  2E2E 2E2E 
00004C57  2E        
00004C58  0D0A 00   7632          dc.b      13,10,0
                    7633   @m68kde~1_70:
00004C5C  0D0A 5761 7634          dc.b      13,10,87,97,116,99,104,32,80,111,105,110,116
00004C60  7463 6820 
00004C64  506F 696E 
00004C68  74        
00004C69  2057 6173 7635          dc.b      32,87,97,115,32,110,111,116,32,83,101,116,46
00004C6D  206E 6F74 
00004C71  2053 6574 
00004C75  2E        
00004C76  2E2E 2E2E 7636          dc.b      46,46,46,46,0
00004C7A  00        
                    7637   @m68kde~1_71:
00004C7C  0D0A 4E6F 7638          dc.b      13,10,78,111,32,70,82,69,69,32,66,114,101,97
00004C80  2046 5245 
00004C84  4520 4272 
00004C88  6561      
00004C8A  6B20 506F 7639          dc.b      107,32,80,111,105,110,116,115,46,46,46,46,46
00004C8E  696E 7473 
00004C92  2E2E 2E2E 
00004C96  2E        
00004C97  00        7640          dc.b      0
                    7641   @m68kde~1_72:
00004C98  0D0A 4272 7642          dc.b      13,10,66,114,101,97,107,32,80,111,105,110,116
00004C9C  6561 6B20 
00004CA0  506F 696E 
00004CA4  74        
00004CA5  2041 6464 7643          dc.b      32,65,100,100,114,101,115,115,58,32,0
00004CA9  7265 7373 
00004CAD  3A20 00   
                    7644   @m68kde~1_73:
00004CB0  0D0A 4572 7645          dc.b      13,10,69,114,114,111,114,32,58,32,66,114,101
00004CB4  726F 7220 
00004CB8  3A20 4272 
00004CBC  65        
00004CBD  616B 2050 7646          dc.b      97,107,32,80,111,105,110,116,115,32,67,65,78
00004CC1  6F69 6E74 
00004CC5  7320 4341 
00004CC9  4E        
00004CCA  4E4F 5420 7647          dc.b      78,79,84,32,98,101,32,115,101,116,32,97,116
00004CCE  6265 2073 
00004CD2  6574 2061 
00004CD6  74        
00004CD7  204F 4444 7648          dc.b      32,79,68,68,32,97,100,100,114,101,115,115,101
00004CDB  2061 6464 
00004CDF  7265 7373 
00004CE3  65        
00004CE4  7300      7649          dc.b      115,0
                    7650   @m68kde~1_74:
00004CE6  0D0A 4572 7651          dc.b      13,10,69,114,114,111,114,32,58,32,66,114,101
00004CEA  726F 7220 
00004CEE  3A20 4272 
00004CF2  65        
00004CF3  616B 2050 7652          dc.b      97,107,32,80,111,105,110,116,115,32,67,65,78
00004CF7  6F69 6E74 
00004CFB  7320 4341 
00004CFF  4E        
00004D00  4E4F 5420 7653          dc.b      78,79,84,32,98,101,32,115,101,116,32,102,111
00004D04  6265 2073 
00004D08  6574 2066 
00004D0C  6F        
00004D0D  7220 524F 7654          dc.b      114,32,82,79,77,32,105,110,32,82,97,110,103
00004D11  4D20 696E 
00004D15  2052 616E 
00004D19  67        
00004D1A  6520 3A20 7655          dc.b      101,32,58,32,91,36,48,45,36,48,48,48,48,55,70
00004D1E  5B24 302D 
00004D22  2430 3030 
00004D26  3037 46   
00004D29  4646 5D00 7656          dc.b      70,70,93,0
                    7657   @m68kde~1_75:
00004D2E  0D0A 4572 7658          dc.b      13,10,69,114,114,111,114,58,32,66,114,101,97
00004D32  726F 723A 
00004D36  2042 7265 
00004D3A  61        
00004D3B  6B20 506F 7659          dc.b      107,32,80,111,105,110,116,32,65,108,114,101
00004D3F  696E 7420 
00004D43  416C 7265 
00004D47  6164 7920 7660          dc.b      97,100,121,32,69,120,105,115,116,115,32,97,116
00004D4B  4578 6973 
00004D4F  7473 2061 
00004D53  74        
00004D54  2041 6464 7661          dc.b      32,65,100,100,114,101,115,115,32,58,32,37,48
00004D58  7265 7373 
00004D5C  203A 2025 
00004D60  30        
00004D61  3878 0D0A 7662          dc.b      56,120,13,10,0
00004D65  00        
                    7663   @m68kde~1_76:
00004D66  0D0A 4272 7664          dc.b      13,10,66,114,101,97,107,32,80,111,105,110,116
00004D6A  6561 6B20 
00004D6E  506F 696E 
00004D72  74        
00004D73  2053 6574 7665          dc.b      32,83,101,116,32,97,116,32,65,100,100,114,101
00004D77  2061 7420 
00004D7B  4164 6472 
00004D7F  65        
00004D80  7373 3A20 7666          dc.b      115,115,58,32,91,36,37,48,56,120,93,0
00004D84  5B24 2530 
00004D88  3878 5D00 
                    7667   @m68kde~1_77:
00004D8C  0D0A 4E6F 7668          dc.b      13,10,78,111,32,70,82,69,69,32,87,97,116,99
00004D90  2046 5245 
00004D94  4520 5761 
00004D98  7463      
00004D9A  6820 506F 7669          dc.b      104,32,80,111,105,110,116,115,46,46,46,46,46
00004D9E  696E 7473 
00004DA2  2E2E 2E2E 
00004DA6  2E        
00004DA7  00        7670          dc.b      0
                    7671   @m68kde~1_78:
00004DA8  0D0A 5761 7672          dc.b      13,10,87,97,116,99,104,32,80,111,105,110,116
00004DAC  7463 6820 
00004DB0  506F 696E 
00004DB4  74        
00004DB5  2041 6464 7673          dc.b      32,65,100,100,114,101,115,115,58,32,0
00004DB9  7265 7373 
00004DBD  3A20 00   
                    7674   @m68kde~1_79:
00004DC0  0D0A 4572 7675          dc.b      13,10,69,114,114,111,114,58,32,87,97,116,99
00004DC4  726F 723A 
00004DC8  2057 6174 
00004DCC  63        
00004DCD  6820 506F 7676          dc.b      104,32,80,111,105,110,116,32,65,108,114,101
00004DD1  696E 7420 
00004DD5  416C 7265 
00004DD9  6164 7920 7677          dc.b      97,100,121,32,83,101,116,32,97,116,32,65,100
00004DDD  5365 7420 
00004DE1  6174 2041 
00004DE5  64        
00004DE6  6472 6573 7678          dc.b      100,114,101,115,115,32,58,32,37,48,56,120,13
00004DEA  7320 3A20 
00004DEE  2530 3878 
00004DF2  0D        
00004DF3  0A00      7679          dc.b      10,0
                    7680   @m68kde~1_80:
00004DF6  0D0A 5761 7681          dc.b      13,10,87,97,116,99,104,32,80,111,105,110,116
00004DFA  7463 6820 
00004DFE  506F 696E 
00004E02  74        
00004E03  2053 6574 7682          dc.b      32,83,101,116,32,97,116,32,65,100,100,114,101
00004E07  2061 7420 
00004E0B  4164 6472 
00004E0F  65        
00004E10  7373 3A20 7683          dc.b      115,115,58,32,91,36,37,48,56,120,93,0
00004E14  5B24 2530 
00004E18  3878 5D00 
                    7684   @m68kde~1_81:
00004E1C  0D0A 0D0A 7685          dc.b      13,10,13,10,13,10,13,10,64,66,82,69,65,75,80
00004E20  0D0A 0D0A 
00004E24  4042 5245 
00004E28  414B 50   
00004E2B  4F49 4E54 7686          dc.b      79,73,78,84,0
00004E2F  00        
                    7687   @m68kde~1_82:
00004E30  0D0A 5369 7688          dc.b      13,10,83,105,110,103,108,101,32,83,116,101,112
00004E34  6E67 6C65 
00004E38  2053 7465 
00004E3C  70        
00004E3D  203A 205B 7689          dc.b      32,58,32,91,79,78,93,0
00004E41  4F4E 5D00 
                    7690   @m68kde~1_83:
00004E46  0D0A 4272 7691          dc.b      13,10,66,114,101,97,107,80,111,105,110,116,115
00004E4A  6561 6B50 
00004E4E  6F69 6E74 
00004E52  73        
00004E53  203A 205B 7692          dc.b      32,58,32,91,69,110,97,98,108,101,100,93,0
00004E57  456E 6162 
00004E5B  6C65 645D 
00004E5F  00        
                    7693   @m68kde~1_84:
00004E60  0D0A 5072 7694          dc.b      13,10,80,114,101,115,115,32,60,69,83,67,62,32
00004E64  6573 7320 
00004E68  3C45 5343 
00004E6C  3E20      
00004E6E  746F 2052 7695          dc.b      116,111,32,82,101,115,117,109,101,32,85,115
00004E72  6573 756D 
00004E76  6520 5573 
00004E7A  6572 2050 7696          dc.b      101,114,32,80,114,111,103,114,97,109,13,10,0
00004E7E  726F 6772 
00004E82  616D 0D0A 
00004E86  00        
                    7697   @m68kde~1_85:
00004E88  0D0A 556E 7698          dc.b      13,10,85,110,107,110,111,119,110,32,67,111,109
00004E8C  6B6E 6F77 
00004E90  6E20 436F 
00004E94  6D        
00004E95  6D61 6E64 7699          dc.b      109,97,110,100,46,46,46,46,46,13,10,0
00004E99  2E2E 2E2E 
00004E9D  2E0D 0A00 
                    7700   @m68kde~1_86:
00004EA2  0D0A 5072 7701          dc.b      13,10,80,114,111,103,114,97,109,32,69,110,100
00004EA6  6F67 7261 
00004EAA  6D20 456E 
00004EAE  64        
00004EAF  6564 2028 7702          dc.b      101,100,32,40,84,82,65,80,32,35,49,53,41,46
00004EB3  5452 4150 
00004EB7  2023 3135 
00004EBB  292E      
00004EBD  2E2E 2E00 7703          dc.b      46,46,46,0
                    7704   @m68kde~1_87:
00004EC2  0D0A 4B69 7705          dc.b      13,10,75,105,108,108,32,65,108,108,32,66,114
00004EC6  6C6C 2041 
00004ECA  6C6C 2042 
00004ECE  72        
00004ECF  6561 6B20 7706          dc.b      101,97,107,32,80,111,105,110,116,115,46,46,46
00004ED3  506F 696E 
00004ED7  7473 2E2E 
00004EDB  2E        
00004EDC  2879 2F6E 7707          dc.b      40,121,47,110,41,63,0
00004EE0  293F 00   
                    7708   @m68kde~1_88:
00004EE4  0D0A 4B69 7709          dc.b      13,10,75,105,108,108,32,65,108,108,32,87,97
00004EE8  6C6C 2041 
00004EEC  6C6C 2057 
00004EF0  61        
00004EF1  7463 6820 7710          dc.b      116,99,104,32,80,111,105,110,116,115,46,46,46
00004EF5  506F 696E 
00004EF9  7473 2E2E 
00004EFD  2E        
00004EFE  2879 2F6E 7711          dc.b      40,121,47,110,41,63,0
00004F02  293F 00   
                    7712   @m68kde~1_89:
00004F06  0D0A 2D2D 7713          dc.b      13,10,45,45,45,45,45,45,45,45,45,45,45,45,45
00004F0A  2D2D 2D2D 
00004F0E  2D2D 2D2D 
00004F12  2D2D 2D   
00004F15  2D2D 2D2D 7714          dc.b      45,45,45,45,45,45,45,45,45,45,45,45,45,45,45
00004F19  2D2D 2D2D 
00004F1D  2D2D 2D2D 
00004F21  2D2D 2D   
00004F24  2D2D 2D2D 7715          dc.b      45,45,45,45,45,45,45,45,45,45,45,45,45,45,45
00004F28  2D2D 2D2D 
00004F2C  2D2D 2D2D 
00004F30  2D2D 2D   
00004F33  2D2D 2D2D 7716          dc.b      45,45,45,45,45,45,45,45,45,45,45,45,45,45,45
00004F37  2D2D 2D2D 
00004F3B  2D2D 2D2D 
00004F3F  2D2D 2D   
00004F42  2D2D 2D2D 7717          dc.b      45,45,45,45,45,45,0
00004F46  2D2D 00   
                    7718   @m68kde~1_90:
00004F4A  0D0A 2020 7719          dc.b      13,10,32,32,68,101,98,117,103,103,101,114,32
00004F4E  4465 6275 
00004F52  6767 6572 
00004F56  20        
00004F57  436F 6D6D 7720          dc.b      67,111,109,109,97,110,100,32,83,117,109,109
00004F5B  616E 6420 
00004F5F  5375 6D6D 
00004F63  6172 7900 7721          dc.b      97,114,121,0
                    7722   @m68kde~1_91:
00004F68  0D0A 2020 7723          dc.b      13,10,32,32,46,40,114,101,103,41,32,32,32,32
00004F6C  2E28 7265 
00004F70  6729 2020 
00004F74  2020      
00004F76  2020 202D 7724          dc.b      32,32,32,45,32,67,104,97,110,103,101,32,82,101
00004F7A  2043 6861 
00004F7E  6E67 6520 
00004F82  5265      
00004F84  6769 7374 7725          dc.b      103,105,115,116,101,114,115,58,32,101,46,103
00004F88  6572 733A 
00004F8C  2065 2E67 
00004F90  2041 302D 7726          dc.b      32,65,48,45,65,55,44,68,48,45,68,55,44,80,67
00004F94  4137 2C44 
00004F98  302D 4437 
00004F9C  2C50 43   
00004F9F  2C53 5350 7727          dc.b      44,83,83,80,44,85,83,80,44,83,82,0
00004FA3  2C55 5350 
00004FA7  2C53 5200 
                    7728   @m68kde~1_92:
00004FAC  0D0A 2020 7729          dc.b      13,10,32,32,66,68,47,66,83,47,66,67,47,66,75
00004FB0  4244 2F42 
00004FB4  532F 4243 
00004FB8  2F42 4B   
00004FBB  2020 2D20 7730          dc.b      32,32,45,32,66,114,101,97,107,32,80,111,105
00004FBF  4272 6561 
00004FC3  6B20 506F 
00004FC7  69        
00004FC8  6E74 3A20 7731          dc.b      110,116,58,32,68,105,115,112,108,97,121,47,83
00004FCC  4469 7370 
00004FD0  6C61 792F 
00004FD4  53        
00004FD5  6574 2F43 7732          dc.b      101,116,47,67,108,101,97,114,47,75,105,108,108
00004FD9  6C65 6172 
00004FDD  2F4B 696C 
00004FE1  6C        
00004FE2  00        7733          dc.b      0
                    7734   @m68kde~1_93:
00004FE4  0D0A 2020 7735          dc.b      13,10,32,32,67,32,32,32,32,32,32,32,32,32,32
00004FE8  4320 2020 
00004FEC  2020 2020 
00004FF0  2020 20   
00004FF3  2020 2D20 7736          dc.b      32,32,45,32,67,111,112,121,32,80,114,111,103
00004FF7  436F 7079 
00004FFB  2050 726F 
00004FFF  67        
00005000  7261 6D20 7737          dc.b      114,97,109,32,102,114,111,109,32,70,108,97,115
00005004  6672 6F6D 
00005008  2046 6C61 
0000500C  73        
0000500D  6820 746F 7738          dc.b      104,32,116,111,32,77,97,105,110,32,77,101,109
00005011  204D 6169 
00005015  6E20 4D65 
00005019  6D        
0000501A  6F72 7900 7739          dc.b      111,114,121,0
                    7740   @m68kde~1_94:
0000501E  0D0A 2020 7741          dc.b      13,10,32,32,68,32,32,32,32,32,32,32,32,32,32
00005022  4420 2020 
00005026  2020 2020 
0000502A  2020 20   
0000502D  2020 2D20 7742          dc.b      32,32,45,32,68,117,109,112,32,77,101,109,111
00005031  4475 6D70 
00005035  204D 656D 
00005039  6F        
0000503A  7279 2043 7743          dc.b      114,121,32,67,111,110,116,101,110,116,115,32
0000503E  6F6E 7465 
00005042  6E74 7320 
00005046  746F 2053 7744          dc.b      116,111,32,83,99,114,101,101,110,0
0000504A  6372 6565 
0000504E  6E00      
                    7745   @m68kde~1_95:
00005050  0D0A 2020 7746          dc.b      13,10,32,32,69,32,32,32,32,32,32,32,32,32,32
00005054  4520 2020 
00005058  2020 2020 
0000505C  2020 20   
0000505F  2020 2D20 7747          dc.b      32,32,45,32,69,110,116,101,114,32,83,116,114
00005063  456E 7465 
00005067  7220 5374 
0000506B  72        
0000506C  696E 6720 7748          dc.b      105,110,103,32,105,110,116,111,32,77,101,109
00005070  696E 746F 
00005074  204D 656D 
00005078  6F72 7900 7749          dc.b      111,114,121,0
                    7750   @m68kde~1_96:
0000507C  0D0A 2020 7751          dc.b      13,10,32,32,70,32,32,32,32,32,32,32,32,32,32
00005080  4620 2020 
00005084  2020 2020 
00005088  2020 20   
0000508B  2020 2D20 7752          dc.b      32,32,45,32,70,105,108,108,32,77,101,109,111
0000508F  4669 6C6C 
00005093  204D 656D 
00005097  6F        
00005098  7279 2077 7753          dc.b      114,121,32,119,105,116,104,32,68,97,116,97,0
0000509C  6974 6820 
000050A0  4461 7461 
000050A4  00        
                    7754   @m68kde~1_97:
000050A6  0D0A 2020 7755          dc.b      13,10,32,32,71,32,32,32,32,32,32,32,32,32,32
000050AA  4720 2020 
000050AE  2020 2020 
000050B2  2020 20   
000050B5  2020 2D20 7756          dc.b      32,32,45,32,71,111,32,80,114,111,103,114,97
000050B9  476F 2050 
000050BD  726F 6772 
000050C1  61        
000050C2  6D20 5374 7757          dc.b      109,32,83,116,97,114,116,105,110,103,32,97,116
000050C6  6172 7469 
000050CA  6E67 2061 
000050CE  74        
000050CF  2041 6464 7758          dc.b      32,65,100,100,114,101,115,115,58,32,36,37,48
000050D3  7265 7373 
000050D7  3A20 2425 
000050DB  30        
000050DC  3858 00   7759          dc.b      56,88,0
                    7760   @m68kde~1_98:
000050E0  0D0A 2020 7761          dc.b      13,10,32,32,76,32,32,32,32,32,32,32,32,32,32
000050E4  4C20 2020 
000050E8  2020 2020 
000050EC  2020 20   
000050EF  2020 2D20 7762          dc.b      32,32,45,32,76,111,97,100,32,80,114,111,103
000050F3  4C6F 6164 
000050F7  2050 726F 
000050FB  67        
000050FC  7261 6D20 7763          dc.b      114,97,109,32,40,46,72,69,88,32,102,105,108
00005100  282E 4845 
00005104  5820 6669 
00005108  6C        
00005109  6529 2066 7764          dc.b      101,41,32,102,114,111,109,32,76,97,112,116,111
0000510D  726F 6D20 
00005111  4C61 7074 
00005115  6F        
00005116  7000      7765          dc.b      112,0
                    7766   @m68kde~1_99:
00005118  0D0A 2020 7767          dc.b      13,10,32,32,77,32,32,32,32,32,32,32,32,32,32
0000511C  4D20 2020 
00005120  2020 2020 
00005124  2020 20   
00005127  2020 2D20 7768          dc.b      32,32,45,32,77,101,109,111,114,121,32,69,120
0000512B  4D65 6D6F 
0000512F  7279 2045 
00005133  78        
00005134  616D 696E 7769          dc.b      97,109,105,110,101,32,97,110,100,32,67,104,97
00005138  6520 616E 
0000513C  6420 4368 
00005140  61        
00005141  6E67 6500 7770          dc.b      110,103,101,0
                    7771   @m68kde~1_100:
00005146  0D0A 2020 7772          dc.b      13,10,32,32,80,32,32,32,32,32,32,32,32,32,32
0000514A  5020 2020 
0000514E  2020 2020 
00005152  2020 20   
00005155  2020 2D20 7773          dc.b      32,32,45,32,80,114,111,103,114,97,109,32,70
00005159  5072 6F67 
0000515D  7261 6D20 
00005161  46        
00005162  6C61 7368 7774          dc.b      108,97,115,104,32,77,101,109,111,114,121,32
00005166  204D 656D 
0000516A  6F72 7920 
0000516E  7769 7468 7775          dc.b      119,105,116,104,32,85,115,101,114,32,80,114
00005172  2055 7365 
00005176  7220 5072 
0000517A  6F67 7261 7776          dc.b      111,103,114,97,109,0
0000517E  6D00      
                    7777   @m68kde~1_101:
00005180  0D0A 2020 7778          dc.b      13,10,32,32,82,32,32,32,32,32,32,32,32,32,32
00005184  5220 2020 
00005188  2020 2020 
0000518C  2020 20   
0000518F  2020 2D20 7779          dc.b      32,32,45,32,68,105,115,112,108,97,121,32,54
00005193  4469 7370 
00005197  6C61 7920 
0000519B  36        
0000519C  3830 3030 7780          dc.b      56,48,48,48,32,82,101,103,105,115,116,101,114
000051A0  2052 6567 
000051A4  6973 7465 
000051A8  72        
000051A9  7300      7781          dc.b      115,0
                    7782   @m68kde~1_102:
000051AC  0D0A 2020 7783          dc.b      13,10,32,32,83,32,32,32,32,32,32,32,32,32,32
000051B0  5320 2020 
000051B4  2020 2020 
000051B8  2020 20   
000051BB  2020 2D20 7784          dc.b      32,32,45,32,84,111,103,103,108,101,32,79,78
000051BF  546F 6767 
000051C3  6C65 204F 
000051C7  4E        
000051C8  2F4F 4646 7785          dc.b      47,79,70,70,32,83,105,110,103,108,101,32,83
000051CC  2053 696E 
000051D0  676C 6520 
000051D4  53        
000051D5  7465 7020 7786          dc.b      116,101,112,32,77,111,100,101,0
000051D9  4D6F 6465 
000051DD  00        
                    7787   @m68kde~1_103:
000051DE  0D0A 2020 7788          dc.b      13,10,32,32,84,77,32,32,32,32,32,32,32,32,32
000051E2  544D 2020 
000051E6  2020 2020 
000051EA  2020 20   
000051ED  2020 2D20 7789          dc.b      32,32,45,32,84,101,115,116,32,77,101,109,111
000051F1  5465 7374 
000051F5  204D 656D 
000051F9  6F        
000051FA  7279 00   7790          dc.b      114,121,0
                    7791   @m68kde~1_104:
000051FE  0D0A 2020 7792          dc.b      13,10,32,32,84,83,32,32,32,32,32,32,32,32,32
00005202  5453 2020 
00005206  2020 2020 
0000520A  2020 20   
0000520D  2020 2D20 7793          dc.b      32,32,45,32,84,101,115,116,32,83,119,105,116
00005211  5465 7374 
00005215  2053 7769 
00005219  74        
0000521A  6368 6573 7794          dc.b      99,104,101,115,58,32,83,87,55,45,48,0
0000521E  3A20 5357 
00005222  372D 3000 
                    7795   @m68kde~1_105:
00005226  0D0A 2020 7796          dc.b      13,10,32,32,84,68,32,32,32,32,32,32,32,32,32
0000522A  5444 2020 
0000522E  2020 2020 
00005232  2020 20   
00005235  2020 2D20 7797          dc.b      32,32,45,32,84,101,115,116,32,68,105,115,112
00005239  5465 7374 
0000523D  2044 6973 
00005241  70        
00005242  6C61 7973 7798          dc.b      108,97,121,115,58,32,76,69,68,115,32,97,110
00005246  3A20 4C45 
0000524A  4473 2061 
0000524E  6E        
0000524F  6420 372D 7799          dc.b      100,32,55,45,83,101,103,109,101,110,116,0
00005253  5365 676D 
00005257  656E 7400 
                    7800   @m68kde~1_106:
0000525C  0D0A 2020 7801          dc.b      13,10,32,32,87,68,47,87,83,47,87,67,47,87,75
00005260  5744 2F57 
00005264  532F 5743 
00005268  2F57 4B   
0000526B  2020 2D20 7802          dc.b      32,32,45,32,87,97,116,99,104,32,80,111,105,110
0000526F  5761 7463 
00005273  6820 506F 
00005277  696E      
00005279  743A 2044 7803          dc.b      116,58,32,68,105,115,112,108,97,121,47,83,101
0000527D  6973 706C 
00005281  6179 2F53 
00005285  65        
00005286  742F 436C 7804          dc.b      116,47,67,108,101,97,114,47,75,105,108,108,0
0000528A  6561 722F 
0000528E  4B69 6C6C 
00005292  00        
                    7805   @m68kde~1_107:
00005294  0D0A 2300 7806          dc.b      13,10,35,0
                    7807   @m68kde~1_108:
00005298  0D0A 5072 7808          dc.b      13,10,80,114,111,103,114,97,109,32,82,117,110
0000529C  6F67 7261 
000052A0  6D20 5275 
000052A4  6E        
000052A5  6E69 6E67 7809          dc.b      110,105,110,103,46,46,46,46,46,0
000052A9  2E2E 2E2E 
000052AD  2E00      
                    7810   @m68kde~1_109:
000052B0  0D0A 5072 7811          dc.b      13,10,80,114,101,115,115,32,60,82,69,83,69,84
000052B4  6573 7320 
000052B8  3C52 4553 
000052BC  4554      
000052BE  3E20 6275 7812          dc.b      62,32,98,117,116,116,111,110,32,60,75,101,121
000052C2  7474 6F6E 
000052C6  203C 4B65 
000052CA  79        
000052CB  303E 206F 7813          dc.b      48,62,32,111,110,32,68,69,49,32,116,111,32,115
000052CF  6E20 4445 
000052D3  3120 746F 
000052D7  2073      
000052D9  746F 7000 7814          dc.b      116,111,112,0
                    7815   @m68kde~1_110:
000052DE  0D0A 4572 7816          dc.b      13,10,69,114,114,111,114,58,32,80,114,101,115
000052E2  726F 723A 
000052E6  2050 7265 
000052EA  73        
000052EB  7320 2747 7817          dc.b      115,32,39,71,39,32,102,105,114,115,116,32,116
000052EF  2720 6669 
000052F3  7273 7420 
000052F7  74        
000052F8  6F20 7374 7818          dc.b      111,32,115,116,97,114,116,32,112,114,111,103
000052FC  6172 7420 
00005300  7072 6F67 
00005304  7261 6D00 7819          dc.b      114,97,109,0
                    7820   @m68kde~1_111:
00005308  0D0A 5369 7821          dc.b      13,10,83,105,110,103,108,101,32,83,116,101,112
0000530C  6E67 6C65 
00005310  2053 7465 
00005314  70        
00005315  2020 3A5B 7822          dc.b      32,32,58,91,79,78,93,0
00005319  4F4E 5D00 
                    7823   @m68kde~1_112:
0000531E  0D0A 5072 7824          dc.b      13,10,80,114,101,115,115,32,39,71,39,32,116
00005322  6573 7320 
00005326  2747 2720 
0000532A  74        
0000532B  6F20 5472 7825          dc.b      111,32,84,114,97,99,101,32,80,114,111,103,114
0000532F  6163 6520 
00005333  5072 6F67 
00005337  72        
00005338  616D 2066 7826          dc.b      97,109,32,102,114,111,109,32,97,100,100,114
0000533C  726F 6D20 
00005340  6164 6472 
00005344  6573 7320 7827          dc.b      101,115,115,32,36,37,48,56,120,46,46,46,46,46
00005348  2425 3038 
0000534C  782E 2E2E 
00005350  2E2E      
00005352  00        7828          dc.b      0
                    7829   @m68kde~1_113:
00005354  0D0A 5075 7830          dc.b      13,10,80,117,115,104,32,60,82,69,83,69,84,32
00005358  7368 203C 
0000535C  5245 5345 
00005360  5420      
00005362  4275 7474 7831          dc.b      66,117,116,116,111,110,62,32,116,111,32,83,116
00005366  6F6E 3E20 
0000536A  746F 2053 
0000536E  74        
0000536F  6F70 2E2E 7832          dc.b      111,112,46,46,46,46,46,0
00005373  2E2E 2E00 
                    7833   @m68kde~1_114:
00005378  0D0A 5369 7834          dc.b      13,10,83,105,110,103,108,101,32,83,116,101,112
0000537C  6E67 6C65 
00005380  2053 7465 
00005384  70        
00005385  203A 205B 7835          dc.b      32,58,32,91,79,70,70,93,0
00005389  4F46 465D 
0000538D  00        
                    7836   @m68kde~1_115:
0000538E  0D0A 4272 7837          dc.b      13,10,66,114,101,97,107,32,80,111,105,110,116
00005392  6561 6B20 
00005396  506F 696E 
0000539A  74        
0000539B  7320 3A5B 7838          dc.b      115,32,58,91,69,110,97,98,108,101,100,93,0
0000539F  456E 6162 
000053A3  6C65 645D 
000053A7  00        
                    7839   @m68kde~1_116:
000053A8  0D0A 5072 7840          dc.b      13,10,80,114,101,115,115,32,60,69,83,67,62,32
000053AC  6573 7320 
000053B0  3C45 5343 
000053B4  3E20      
000053B6  746F 2052 7841          dc.b      116,111,32,82,101,115,117,109,101,32,85,115
000053BA  6573 756D 
000053BE  6520 5573 
000053C2  6572 2050 7842          dc.b      101,114,32,80,114,111,103,114,97,109,46,46,46
000053C6  726F 6772 
000053CA  616D 2E2E 
000053CE  2E        
000053CF  2E2E 00   7843          dc.b      46,46,0
                    7844   @m68kde~1_117:
000053D2  0D0A 5369 7845          dc.b      13,10,83,105,110,103,108,101,32,83,116,101,112
000053D6  6E67 6C65 
000053DA  2053 7465 
000053DE  70        
000053DF  2020 3A5B 7846          dc.b      32,32,58,91,79,70,70,93,0
000053E3  4F46 465D 
000053E7  00        
                    7847   @m68kde~1_118:
000053E8  0D0A 0D0A 7848          dc.b      13,10,13,10,80,114,111,103,114,97,109,32,65
000053EC  5072 6F67 
000053F0  7261 6D20 
000053F4  41        
000053F5  424F 5254 7849          dc.b      66,79,82,84,32,33,33,33,33,33,33,13,10,0
000053F9  2021 2121 
000053FD  2121 210D 
00005401  0A00      
                    7850   @m68kde~1_119:
00005404  2573 0D0A 7851          dc.b      37,115,13,10,0
00005408  00        
                    7852   @m68kde~1_120:
0000540A  0D0A 0D0A 7853          dc.b      13,10,13,10,80,114,111,103,114,97,109,32,65
0000540E  5072 6F67 
00005412  7261 6D20 
00005416  41        
00005417  424F 5254 7854          dc.b      66,79,82,84,32,33,33,33,33,33,0
0000541B  2021 2121 
0000541F  2121 00   
                    7855   @m68kde~1_121:
00005422  0D0A 556E 7856          dc.b      13,10,85,110,104,97,110,100,108,101,100,32,73
00005426  6861 6E64 
0000542A  6C65 6420 
0000542E  49        
0000542F  6E74 6572 7857          dc.b      110,116,101,114,114,117,112,116,58,32,73,82
00005433  7275 7074 
00005437  3A20 4952 
0000543B  5125 6420 7858          dc.b      81,37,100,32,33,33,33,33,33,0
0000543F  2121 2121 
00005443  2100      
                    7859   @m68kde~1_122:
00005446  4144 4452 7860          dc.b      65,68,68,82,69,83,83,32,69,82,82,79,82,58,32
0000544A  4553 5320 
0000544E  4552 524F 
00005452  523A 20   
00005455  3136 206F 7861          dc.b      49,54,32,111,114,32,51,50,32,66,105,116,32,84
00005459  7220 3332 
0000545D  2042 6974 
00005461  2054      
00005463  7261 6E73 7862          dc.b      114,97,110,115,102,101,114,32,116,111,47,102
00005467  6665 7220 
0000546B  746F 2F66 
0000546F  726F 6D20 7863          dc.b      114,111,109,32,97,110,32,79,68,68,32,65,100
00005473  616E 204F 
00005477  4444 2041 
0000547B  64        
0000547C  6472 6573 7864          dc.b      100,114,101,115,115,46,46,46,46,0
00005480  732E 2E2E 
00005484  2E00      
                    7865   @m68kde~1_123:
00005486  556E 6861 7866          dc.b      85,110,104,97,110,100,108,101,100,32,84,114
0000548A  6E64 6C65 
0000548E  6420 5472 
00005492  6170 2021 7867          dc.b      97,112,32,33,33,33,33,33,0
00005496  2121 2121 
0000549A  00        
                    7868   @m68kde~1_124:
0000549C  4255 5320 7869          dc.b      66,85,83,32,69,114,114,111,114,33,0
000054A0  4572 726F 
000054A4  7221 00   
                    7870   @m68kde~1_125:
000054A8  4144 4452 7871          dc.b      65,68,68,82,69,83,83,32,69,114,114,111,114,33
000054AC  4553 5320 
000054B0  4572 726F 
000054B4  7221      
000054B6  00        7872          dc.b      0
                    7873   @m68kde~1_126:
000054B8  494C 4C45 7874          dc.b      73,76,76,69,71,65,76,32,73,78,83,84,82,85,67
000054BC  4741 4C20 
000054C0  494E 5354 
000054C4  5255 43   
000054C7  5449 4F4E 7875          dc.b      84,73,79,78,0
000054CB  00        
                    7876   @m68kde~1_127:
000054CC  4449 5649 7877          dc.b      68,73,86,73,68,69,32,66,89,32,90,69,82,79,0
000054D0  4445 2042 
000054D4  5920 5A45 
000054D8  524F 00   
                    7878   @m68kde~1_128:
000054DC  2743 484B 7879          dc.b      39,67,72,75,39,32,73,78,83,84,82,85,67,84,73
000054E0  2720 494E 
000054E4  5354 5255 
000054E8  4354 49   
000054EB  4F4E 00   7880          dc.b      79,78,0
                    7881   @m68kde~1_129:
000054EE  5452 4150 7882          dc.b      84,82,65,80,86,32,73,78,83,84,82,85,67,84,73
000054F2  5620 494E 
000054F6  5354 5255 
000054FA  4354 49   
000054FD  4F4E 00   7883          dc.b      79,78,0
                    7884   @m68kde~1_130:
00005500  5052 4956 7885          dc.b      80,82,73,86,73,76,69,71,69,32,86,73,79,76,65
00005504  494C 4547 
00005508  4520 5649 
0000550C  4F4C 41   
0000550F  5449 4F4E 7886          dc.b      84,73,79,78,0
00005513  00        
                    7887   @m68kde~1_131:
00005514  554E 494E 7888          dc.b      85,78,73,78,73,84,73,65,76,73,83,69,68,32,73
00005518  4954 4941 
0000551C  4C49 5345 
00005520  4420 49   
00005523  5251 00   7889          dc.b      82,81,0
                    7890   @m68kde~1_132:
00005526  5350 5552 7891          dc.b      83,80,85,82,73,79,85,83,32,73,82,81,0
0000552A  494F 5553 
0000552E  2049 5251 
00005532  00        
                    7892   @m68kde~1_133:
00005534  0D0A 5374 7893          dc.b      13,10,83,116,97,114,116,32,65,100,100,114,101
00005538  6172 7420 
0000553C  4164 6472 
00005540  65        
00005541  7373 2069 7894          dc.b      115,115,32,105,110,32,77,101,109,111,114,121
00005545  6E20 4D65 
00005549  6D6F 7279 
0000554D  3A20 00   7895          dc.b      58,32,0
                    7896   @m68kde~1_134:
00005550  0D0A 456E 7897          dc.b      13,10,69,110,116,101,114,32,83,116,114,105,110
00005554  7465 7220 
00005558  5374 7269 
0000555C  6E        
0000555D  6720 2845 7898          dc.b      103,32,40,69,83,67,32,116,111,32,101,110,100
00005561  5343 2074 
00005565  6F20 656E 
00005569  64        
0000556A  2920 3A00 7899          dc.b      41,32,58,0
                    7900   @m68kde~1_135:
0000556E  0D0A 5265 7901          dc.b      13,10,82,101,97,100,105,110,103,32,65,100,100
00005572  6164 696E 
00005576  6720 4164 
0000557A  64        
0000557B  7265 7373 7902          dc.b      114,101,115,115,101,115,32,91,36,37,48,56,88
0000557F  6573 205B 
00005583  2425 3038 
00005587  58        
00005588  202D 2024 7903          dc.b      32,45,32,36,37,48,56,88,93,32,102,111,114,32
0000558C  2530 3858 
00005590  5D20 666F 
00005594  7220      
00005596  2425 3032 7904          dc.b      36,37,48,50,88,0
0000559A  5800      
                    7905   @m68kde~1_136:
0000559C  0D0A 5661 7906          dc.b      13,10,86,97,108,117,101,32,105,110,99,111,114
000055A0  6C75 6520 
000055A4  696E 636F 
000055A8  72        
000055A9  7265 6374 7907          dc.b      114,101,99,116,32,97,116,32,97,100,100,114,101
000055AD  2061 7420 
000055B1  6164 6472 
000055B5  65        
000055B6  7373 6573 7908          dc.b      115,115,101,115,32,36,37,48,56,88,32,46,46,46
000055BA  2024 2530 
000055BE  3858 202E 
000055C2  2E2E      
000055C4  2073 686F 7909          dc.b      32,115,104,111,117,108,100,32,98,101,32,36,37
000055C8  756C 6420 
000055CC  6265 2024 
000055D0  25        
000055D1  3032 5820 7910          dc.b      48,50,88,32,98,117,116,32,102,111,117,110,100
000055D5  6275 7420 
000055D9  666F 756E 
000055DD  64        
000055DE  2024 2530 7911          dc.b      32,36,37,48,50,88,0
000055E2  3258 00   
                    7912   @m68kde~1_137:
000055E6  0D0A 5661 7913          dc.b      13,10,86,97,108,117,101,58,32,36,37,48,50,88
000055EA  6C75 653A 
000055EE  2024 2530 
000055F2  3258      
000055F4  2066 6F75 7914          dc.b      32,102,111,117,110,100,32,97,116,32,65,100,100
000055F8  6E64 2061 
000055FC  7420 4164 
00005600  64        
00005601  7265 7373 7915          dc.b      114,101,115,115,58,32,36,37,48,56,88,0
00005605  3A20 2425 
00005609  3038 5800 
                    7916   @m68kde~1_138:
0000560E  0D0A 5661 7917          dc.b      13,10,86,97,108,117,101,58,32,36,37,48,50,88
00005612  6C75 653A 
00005616  2024 2530 
0000561A  3258      
0000561C  2024 2530 7918          dc.b      32,36,37,48,50,88,32,102,111,117,110,100,32
00005620  3258 2066 
00005624  6F75 6E64 
00005628  20        
00005629  6174 2041 7919          dc.b      97,116,32,65,100,100,114,101,115,115,58,32,36
0000562D  6464 7265 
00005631  7373 3A20 
00005635  24        
00005636  2530 3858 7920          dc.b      37,48,56,88,32,97,110,100,32,36,37,48,56,88
0000563A  2061 6E64 
0000563E  2024 2530 
00005642  3858      
00005644  00        7921          dc.b      0
                    7922   @m68kde~1_139:
00005646  0D0A 5661 7923          dc.b      13,10,86,97,108,117,101,58,32,36,37,48,50,88
0000564A  6C75 653A 
0000564E  2024 2530 
00005652  3258      
00005654  2024 2530 7924          dc.b      32,36,37,48,50,88,32,36,37,48,50,88,32,36,37
00005658  3258 2024 
0000565C  2530 3258 
00005660  2024 25   
00005663  3032 5820 7925          dc.b      48,50,88,32,102,111,117,110,100,32,97,116,32
00005667  666F 756E 
0000566B  6420 6174 
0000566F  20        
00005670  4164 6472 7926          dc.b      65,100,100,114,101,115,115,58,32,36,37,48,56
00005674  6573 733A 
00005678  2024 2530 
0000567C  38        
0000567D  5820 2D20 7927          dc.b      88,32,45,32,36,37,48,56,88,0
00005681  2425 3038 
00005685  5800      
                    7928   @m68kde~1_140:
00005688  0D0A 456E 7929          dc.b      13,10,69,110,116,101,114,32,109,101,109,111
0000568C  7465 7220 
00005690  6D65 6D6F 
00005694  7279 2074 7930          dc.b      114,121,32,116,101,115,116,32,99,111,110,102
00005698  6573 7420 
0000569C  636F 6E66 
000056A0  6967 7572 7931          dc.b      105,103,117,114,97,116,105,111,110,40,49,32
000056A4  6174 696F 
000056A8  6E28 3120 
000056AC  2D20 6279 7932          dc.b      45,32,98,121,116,101,115,44,32,50,32,45,32,119
000056B0  7465 732C 
000056B4  2032 202D 
000056B8  2077      
000056BA  6F72 6473 7933          dc.b      111,114,100,115,44,32,51,32,45,32,108,111,110
000056BE  2C20 3320 
000056C2  2D20 6C6F 
000056C6  6E        
000056C7  6720 776F 7934          dc.b      103,32,119,111,114,100,115,41,58,32,0
000056CB  7264 7329 
000056CF  3A20 00   
                    7935   @m68kde~1_141:
000056D2  0D0A 436F 7936          dc.b      13,10,67,111,110,102,105,103,117,114,97,116
000056D6  6E66 6967 
000056DA  7572 6174 
000056DE  696F 6E20 7937          dc.b      105,111,110,32,105,110,118,97,108,105,100,32
000056E2  696E 7661 
000056E6  6C69 6420 
000056EA  2564 2C20 7938          dc.b      37,100,44,32,116,114,121,32,97,103,97,105,110
000056EE  7472 7920 
000056F2  6167 6169 
000056F6  6E        
000056F7  00        7939          dc.b      0
                    7940   @m68kde~1_142:
000056F8  0D0A 4368 7941          dc.b      13,10,67,104,111,111,115,101,32,98,101,116,119
000056FC  6F6F 7365 
00005700  2062 6574 
00005704  77        
00005705  6565 6E20 7942          dc.b      101,101,110,32,100,105,102,102,101,114,101,110
00005709  6469 6666 
0000570D  6572 656E 
00005711  7420 6D65 7943          dc.b      116,32,109,101,109,111,114,121,32,116,101,115
00005715  6D6F 7279 
00005719  2074 6573 
0000571D  7420 7061 7944          dc.b      116,32,112,97,116,116,101,114,110,115,40,49
00005721  7474 6572 
00005725  6E73 2831 
00005729  202D 2035 7945          dc.b      32,45,32,53,44,32,50,32,45,32,65,44,32,51,32
0000572D  2C20 3220 
00005731  2D20 412C 
00005735  2033 20   
00005738  2D20 462C 7946          dc.b      45,32,70,44,32,52,32,45,32,48,41,58,32,0
0000573C  2034 202D 
00005740  2030 293A 
00005744  2000      
                    7947   @m68kde~1_143:
00005746  0D0A 5061 7948          dc.b      13,10,80,97,116,116,101,114,110,32,105,110,118
0000574A  7474 6572 
0000574E  6E20 696E 
00005752  76        
00005753  616C 6964 7949          dc.b      97,108,105,100,44,32,116,114,121,32,97,103,97
00005757  2C20 7472 
0000575B  7920 6167 
0000575F  61        
00005760  696E 00   7950          dc.b      105,110,0
                    7951   @m68kde~1_144:
00005764  0D0A 456E 7952          dc.b      13,10,69,110,116,101,114,32,115,116,97,114,116
00005768  7465 7220 
0000576C  7374 6172 
00005770  74        
00005771  696E 6720 7953          dc.b      105,110,103,32,97,100,100,114,101,115,115,40
00005775  6164 6472 
00005779  6573 7328 
0000577D  2558 202D 7954          dc.b      37,88,32,45,32,37,88,32,105,110,99,108,117,115
00005781  2025 5820 
00005785  696E 636C 
00005789  7573      
0000578B  6976 6529 7955          dc.b      105,118,101,41,58,32,0
0000578F  3A20 00   
                    7956   @m68kde~1_145:
00005792  0D0A 496E 7957          dc.b      13,10,73,110,118,97,108,105,100,32,115,116,97
00005796  7661 6C69 
0000579A  6420 7374 
0000579E  61        
0000579F  7274 696E 7958          dc.b      114,116,105,110,103,32,97,100,100,114,101,115
000057A3  6720 6164 
000057A7  6472 6573 
000057AB  732E 2E20 7959          dc.b      115,46,46,32,116,114,121,32,97,103,97,105,110
000057AF  7472 7920 
000057B3  6167 6169 
000057B7  6E        
000057B8  00        7960          dc.b      0
                    7961   @m68kde~1_146:
000057BA  0D0A 456E 7962          dc.b      13,10,69,110,116,101,114,32,101,110,100,105
000057BE  7465 7220 
000057C2  656E 6469 
000057C6  6E67 2061 7963          dc.b      110,103,32,97,100,100,114,101,115,115,40,37
000057CA  6464 7265 
000057CE  7373 2825 
000057D2  5820 2D20 7964          dc.b      88,32,45,32,37,88,32,105,110,99,108,117,115
000057D6  2558 2069 
000057DA  6E63 6C75 
000057DE  73        
000057DF  6976 6529 7965          dc.b      105,118,101,41,58,32,0
000057E3  3A20 00   
                    7966   @m68kde~1_147:
000057E6  0D0A 456E 7967          dc.b      13,10,69,110,100,105,110,103,32,97,100,100,114
000057EA  6469 6E67 
000057EE  2061 6464 
000057F2  72        
000057F3  6573 7320 7968          dc.b      101,115,115,32,111,117,116,32,111,102,32,98
000057F7  6F75 7420 
000057FB  6F66 2062 
000057FF  6F75 6E64 7969          dc.b      111,117,110,100,115,46,46,32,116,114,121,32
00005803  732E 2E20 
00005807  7472 7920 
0000580B  6167 6169 7970          dc.b      97,103,97,105,110,0
0000580F  6E00      
                    7971   @m68kde~1_148:
00005812  0D0A 5772 7972          dc.b      13,10,87,114,105,116,105,110,103,32,116,111
00005816  6974 696E 
0000581A  6720 746F 
0000581E  2053 5241 7973          dc.b      32,83,82,65,77,32,46,46,46,0
00005822  4D20 2E2E 
00005826  2E00      
                    7974   @m68kde~1_149:
00005828  0D0A 2E2E 7975          dc.b      13,10,46,46,46,46,46,46,46,46,46,46,46,46,46
0000582C  2E2E 2E2E 
00005830  2E2E 2E2E 
00005834  2E2E 2E   
00005837  2E2E 2E2E 7976          dc.b      46,46,46,46,46,46,46,46,46,46,46,46,46,46,46
0000583B  2E2E 2E2E 
0000583F  2E2E 2E2E 
00005843  2E2E 2E   
00005846  2E2E 2E2E 7977          dc.b      46,46,46,46,46,46,46,46,46,46,46,46,46,46,46
0000584A  2E2E 2E2E 
0000584E  2E2E 2E2E 
00005852  2E2E 2E   
00005855  2E2E 2E2E 7978          dc.b      46,46,46,46,46,46,46,46,46,46,46,46,46,46,46
00005859  2E2E 2E2E 
0000585D  2E2E 2E2E 
00005861  2E2E 2E   
00005864  2E2E 2E2E 7979          dc.b      46,46,46,46,46,46,46,46,46,46,46,46,46,46,46
00005868  2E2E 2E2E 
0000586C  2E2E 2E2E 
00005870  2E2E 2E   
00005873  2E2E 2E2E 7980          dc.b      46,46,46,46,46,46,46,46,46,46,46,46,46,46,46
00005877  2E2E 2E2E 
0000587B  2E2E 2E2E 
0000587F  2E2E 2E   
00005882  2E2E 2E2E 7981          dc.b      46,46,46,46,46,46,46,46,46,46,46,46,46,46,46
00005886  2E2E 2E2E 
0000588A  2E2E 2E2E 
0000588E  2E2E 2E   
00005891  2E2E 2E2E 7982          dc.b      46,46,46,46,46,0
00005895  2E00      
                    7983   @m68kde~1_150:
00005898  0D0A 4669 7984          dc.b      13,10,70,105,110,105,115,104,101,100,32,119
0000589C  6E69 7368 
000058A0  6564 2077 
000058A4  7269 7469 7985          dc.b      114,105,116,105,110,103,32,116,111,32,83,82
000058A8  6E67 2074 
000058AC  6F20 5352 
000058B0  414D 202E 7986          dc.b      65,77,32,46,0
000058B4  00        
                    7987   @m68kde~1_151:
000058B6  0D0A 4368 7988          dc.b      13,10,67,104,101,99,107,32,83,82,65,77,32,99
000058BA  6563 6B20 
000058BE  5352 414D 
000058C2  2063      
000058C4  6F6E 7465 7989          dc.b      111,110,116,101,110,116,0
000058C8  6E74 00   
                    7990   @m68kde~1_152:
000058CC  0D0A 5265 7991          dc.b      13,10,82,101,97,100,105,110,103,32,102,114,111
000058D0  6164 696E 
000058D4  6720 6672 
000058D8  6F        
000058D9  6D20 5352 7992          dc.b      109,32,83,82,65,77,32,46,46,46,0
000058DD  414D 202E 
000058E1  2E2E 00   
                    7993   @m68kde~1_153:
000058E4  0D0A 2E2E 7994          dc.b      13,10,46,46,46,46,46,46,46,46,46,46,46,46,46
000058E8  2E2E 2E2E 
000058EC  2E2E 2E2E 
000058F0  2E2E 2E   
000058F3  2E2E 2E2E 7995          dc.b      46,46,46,46,46,46,46,46,46,46,32,98,101,103
000058F7  2E2E 2E2E 
000058FB  2E2E 2062 
000058FF  6567      
00005901  696E 2072 7996          dc.b      105,110,32,114,101,97,100,105,110,103,0
00005905  6561 6469 
00005909  6E67 00   
                    7997   @m68kde~1_154:
0000590C  0D0A 4669 7998          dc.b      13,10,70,105,110,105,115,104,101,100,32,114
00005910  6E69 7368 
00005914  6564 2072 
00005918  6561 6469 7999          dc.b      101,97,100,105,110,103,32,102,114,111,109,32
0000591C  6E67 2066 
00005920  726F 6D20 
00005924  5352 414D 8000          dc.b      83,82,65,77,32,46,46,46,0
00005928  202E 2E2E 
0000592C  00        
                    8001   @m68kde~1_155:
0000592E  0D0A 656E 8002          dc.b      13,10,101,110,100,32,111,102,32,112,114,111
00005932  6420 6F66 
00005936  2070 726F 
0000593A  6772 616D 8003          dc.b      103,114,97,109,32,46,46,46,0
0000593E  202E 2E2E 
00005942  00        
                    8004   @m68kde~1_156:
00005944  4445 312D 8005          dc.b      68,69,49,45,54,56,107,32,66,117,103,32,86,49
00005948  3638 6B20 
0000594C  4275 6720 
00005950  5631      
00005952  2E37 3700 8006          dc.b      46,55,55,0
                    8007   @m68kde~1_157:
00005956  436F 7079 8008          dc.b      67,111,112,121,114,105,103,104,116,32,40,67
0000595A  7269 6768 
0000595E  7420 2843 
00005962  2920 504A 8009          dc.b      41,32,80,74,32,68,97,118,105,101,115,32,50,48
00005966  2044 6176 
0000596A  6965 7320 
0000596E  3230      
00005970  3136 00   8010          dc.b      49,54,0
                    8011   @m68kde~1_158:
00005974  0D0A 5275 8012          dc.b      13,10,82,117,110,110,105,110,103,46,46,46,46
00005978  6E6E 696E 
0000597C  672E 2E2E 
00005980  2E        
00005981  2E00      8013          dc.b      46,0
                    8014   @m68kde~1_159:
00005984  5275 6E6E 8015          dc.b      82,117,110,110,105,110,103,46,46,46,46,46,0
00005988  696E 672E 
0000598C  2E2E 2E2E 
00005990  00        
                    8016   @m68kde~1_160:
00005992  4279 3A20 8017          dc.b      66,121,58,32,80,74,32,68,97,118,105,101,115
00005996  504A 2044 
0000599A  6176 6965 
0000599E  73        
0000599F  00        8018          dc.b      0
                    8019   @m68kde~1_161:
000059A0  0D0A 2573 8020          dc.b      13,10,37,115,0
000059A4  00        
                    8021   @m68kde~1_162:
000059A6  0D0A 4E61 8022          dc.b      13,10,78,97,110,99,121,32,77,97,107,97,114,32
000059AA  6E63 7920 
000059AE  4D61 6B61 
000059B2  7220      
000059B4  2D20 3333 8023          dc.b      45,32,51,51,52,54,52,57,49,56,32,97,110,100
000059B8  3436 3439 
000059BC  3138 2061 
000059C0  6E64      
000059C2  2053 7465 8024          dc.b      32,83,116,101,118,101,110,32,67,104,105,110
000059C6  7665 6E20 
000059CA  4368 696E 
000059CE  202D 2034 8025          dc.b      32,45,32,52,48,49,48,56,53,52,48,32,45,32,118
000059D2  3031 3038 
000059D6  3534 3020 
000059DA  2D20 76   
000059DD  6572 7369 8026          dc.b      101,114,115,105,111,110,32,49,0
000059E1  6F6E 2031 
000059E5  00        
                    8027          section   data
000059E6            8028                   align
          0000 59E6 8029   DataStart       equ       *
                    8030   
                    8031   *********************************************************************************************************
                    8032   * Data Section for Initialised Data - these will be placed in rom as constants and have to be copied
                    8033   * to ram as part of the CStart routine in this file
                    8034   *********************************************************************************************************
                    8035   
                    8036   @vsscanf_bufx:
000059E6  0B00 0546 8037          dc.l      @vsscanf_buf
                    8038   @vsscanf_1:
000059EA  0A00      8039          dc.b      10,0
                    8040   __ctype:
000059EC  0040 4040 8041          dc.b      0,64,64,64,64,64,64,64,64,64,80,80,80,80,80
000059F0  4040 4040 
000059F4  4040 5050 
000059F8  5050 50   
000059FB  4040 4040 8042          dc.b      64,64,64,64,64,64,64,64,64,64,64,64,64,64,64
000059FF  4040 4040 
00005A03  4040 4040 
00005A07  4040 40   
00005A0A  4040 40D0 8043          dc.b      64,64,64,208,160,160,160,160,160,160,160,160
00005A0E  A0A0 A0A0 
00005A12  A0A0 A0A0 
00005A16  A0A0 A0A0 8044          dc.b      160,160,160,160,160,160,160,140,140,140,140
00005A1A  A0A0 A08C 
00005A1E  8C8C 8C   
00005A21  8C8C 8C8C 8045          dc.b      140,140,140,140,140,140,160,160,160,160,160
00005A25  8C8C A0A0 
00005A29  A0A0 A0   
00005A2C  A0A0 8A8A 8046          dc.b      160,160,138,138,138,138,138,138,130,130,130
00005A30  8A8A 8A8A 
00005A34  8282 82   
00005A37  8282 8282 8047          dc.b      130,130,130,130,130,130,130,130,130,130,130
00005A3B  8282 8282 
00005A3F  8282 82   
00005A42  8282 8282 8048          dc.b      130,130,130,130,130,130,160,160,160,160,160
00005A46  8282 A0A0 
00005A4A  A0A0 A0   
00005A4D  A089 8989 8049          dc.b      160,137,137,137,137,137,137,129,129,129,129
00005A51  8989 8981 
00005A55  8181 81   
00005A58  8181 8181 8050          dc.b      129,129,129,129,129,129,129,129,129,129,129
00005A5C  8181 8181 
00005A60  8181 81   
00005A63  8181 8181 8051          dc.b      129,129,129,129,129,160,160,160,160,64,0,0,0
00005A67  81A0 A0A0 
00005A6B  A040 0000 
00005A6F  00        
00005A70  0000 0000 8052          dc.b      0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
00005A74  0000 0000 
00005A78  0000 0000 
00005A7C  0000 0000 
00005A80  0000 0000 
00005A84  0000      
00005A86  0000 0000 8053          dc.b      0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
00005A8A  0000 0000 
00005A8E  0000 0000 
00005A92  0000 0000 
00005A96  0000 0000 
00005A9A  0000      
00005A9C  0000 0000 8054          dc.b      0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
00005AA0  0000 0000 
00005AA4  0000 0000 
00005AA8  0000 0000 
00005AAC  0000 0000 
00005AB0  0000      
00005AB2  0000 0000 8055          dc.b      0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
00005AB6  0000 0000 
00005ABA  0000 0000 
00005ABE  0000 0000 
00005AC2  0000 0000 
00005AC6  0000      
00005AC8  0000 0000 8056          dc.b      0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
00005ACC  0000 0000 
00005AD0  0000 0000 
00005AD4  0000 0000 
00005AD8  0000 0000 
00005ADC  0000      
00005ADE  0000 0000 8057          dc.b      0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
00005AE2  0000 0000 
00005AE6  0000 0000 
00005AEA  0000 00   
                    8058   @itoa_1:
00005AEE  2D32 3134 8059          dc.b      45,50,49,52,55,52,56,51,54,52,56,0
00005AF2  3734 3833 
00005AF6  3634 3800 
                    8060          section   bss
00005AFA            8061                   align
          0000 5AFA 8062   DataEnd         equ     *                       this label will equate to the address of the last byte of global variable in it
                    8063   
                    8064   *********************************************************************************************************
                    8065   * Section for Uninitialised Data held in ROM as constants
                    8066   *********************************************************************************************************
                    8067   
0B000000            8068                   org     RamVectorTable          Ram based vector table must be stored here otherwise InstallException Handler will not work
          0000 0114 8069   DataLength      equ     DataEnd-DataStart       length of data needed to copy to Ram on bootup
                    8070   
                    8071   
0B000000            8072   bss             org       bss
                    8073   
                    8074   *********************************************************************************************************
                    8075   * Build a ram based vector table for interrupts so we can install our own Exception Handlers in C code at run time
                    8076   * install the exception handler using the C function InstallExceptionHandler()
                    8077   *********************************************************************************************************
                    8078   
                    8079   
                    8080   
0B000000            8081   VInitialSP       ds.l    1      dummy as we can't really install a handler for this
0B000004            8082   VInitialPC       ds.l    1      dummy as we can't reallin install a handler for this
0B000008            8083   VBusError        ds.l    1      storage for address of Bus Error Handler
0B00000C            8084   VAddressError    ds.l    1      storage for address of Address Error Handler
0B000010            8085   VIllegalInstr    ds.l    1      storage for address of Illegal Instruction handler
0B000014            8086   VDividebyZero    ds.l    1      storage for address of divide by zero handler
0B000018            8087   VCheck           ds.l    1      ditto
0B00001C            8088   VTrapV           ds.l    1      ditto
0B000020            8089   VPrivilege       ds.l    1      ditto
0B000024            8090   VTrace           ds.l    1
0B000028            8091   VLine1010emul    ds.l    1
0B00002C            8092   VLine1111emul    ds.l    1
0B000030            8093   VUnassigned1     ds.l    1
0B000034            8094   VUnassigned2     ds.l    1
0B000038            8095   VUnassigned3     ds.l    1
0B00003C            8096   VUninit_IRQ      ds.l    1
0B000040            8097   VUnassigned4     ds.l    1
0B000044            8098   VUnassigned5     ds.l    1
0B000048            8099   VUnassigned6     ds.l    1
0B00004C            8100   VUnassigned7     ds.l    1
0B000050            8101   VUnassigned8     ds.l    1
0B000054            8102   VUnassigned9     ds.l    1
0B000058            8103   VUnassigned10    ds.l    1
0B00005C            8104   VUnassigned11    ds.l    1
0B000060            8105   VSpuriousIRQ     ds.l    1
                    8106   
                    8107   * Interrupt handlers Vector 25-31
0B000064            8108   VL1IRQ           ds.l    1       storage for 4 byte address of IRQ handler in your C program - install the handler using the C function InstallExceptionHandler()
0B000068            8109   VL2IRQ           ds.l    1       storage for 4 byte address of IRQ handler in your C program - install the handler using the C function InstallExceptionHandler()
0B00006C            8110   VL3IRQ           ds.l    1       storage for 4 byte address of IRQ handler in your C program - install the handler using the C function InstallExceptionHandler()
0B000070            8111   VL4IRQ           ds.l    1       storage for 4 byte address of IRQ handler in your C program - install the handler using the C function InstallExceptionHandler()
0B000074            8112   VL5IRQ           ds.l    1       storage for 4 byte address of IRQ handler in your C program - install the handler using the C function InstallExceptionHandler()
0B000078            8113   VL6IRQ           ds.l    1       storage for 4 byte address of IRQ handler in your C program - install the handler using the C function InstallExceptionHandler()
0B00007C            8114   VL7IRQ           ds.l    1       storage for 4 byte address of IRQ handler in your C program - install the handler using the C function InstallExceptionHandler()
                    8115   
                    8116   * Trap Handler vectors 32-47
0B000080            8117   VTrap0           ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
0B000084            8118   VTrap1           ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
0B000088            8119   VTrap2           ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
0B00008C            8120   VTrap3           ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
0B000090            8121   VTrap4           ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
0B000094            8122   VTrap5           ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
0B000098            8123   VTrap6           ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
0B00009C            8124   VTrap7           ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
0B0000A0            8125   VTrap8           ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
0B0000A4            8126   VTrap9           ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
0B0000A8            8127   VTrap10          ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
0B0000AC            8128   VTrap11          ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
0B0000B0            8129   VTrap12          ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
0B0000B4            8130   VTrap13          ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
0B0000B8            8131   VTrap14          ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
0B0000BC            8132   VTrap15          ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
                    8133   
                    8134   * the remaining exceptions are unassigned in the 68000 so no need to allocate storage for them here
                    8135   
                    8136   ***********************************************************************************************************
                    8137   * Other Variables
                    8138   ***********************************************************************************************************
                    8139   *__DebugA5       ds.l    1
                    8140   *__UserA5        ds.l    1
                    8141   
                    8142   ***********************************************************************************************************
0B0000C0            8143   __ungetbuf:     ds.l    1       ; ungetbuffer for stdio functions
0B0000C4            8144   __allocp:       ds.l    0       ; start of allocation units
0B0000C4            8145   __heap:         ds.l    0       ; pointers for malloc functions
                    8146   
                    8147   *__himem:       ds.l    himem            ; highest memory location + 1
                    8148   *__stklen:      ds.l    stklen           ; default stack size
                    8149   
                    8150   *********************************************************************************************************
                    8151   * Section for Heap
                    8152   *********************************************************************************************************
                    8153   
                    8154   _i:
0B0000C4            8155          ds.b      4
                    8156   _x:
0B0000C8            8157          ds.b      4
                    8158   _y:
0B0000CC            8159          ds.b      4
                    8160   _z:
0B0000D0            8161          ds.b      4
                    8162   _PortA_Count:
0B0000D4            8163          ds.b      4
                    8164   _Trace:
0B0000D8            8165          ds.b      4
                    8166   _GoFlag:
0B0000DC            8167          ds.b      4
                    8168   _Echo:
0B0000E0            8169          ds.b      4
                    8170   _d0:
0B0000E4            8171          ds.b      4
                    8172   _d1:
0B0000E8            8173          ds.b      4
                    8174   _d2:
0B0000EC            8175          ds.b      4
                    8176   _d3:
0B0000F0            8177          ds.b      4
                    8178   _d4:
0B0000F4            8179          ds.b      4
                    8180   _d5:
0B0000F8            8181          ds.b      4
                    8182   _d6:
0B0000FC            8183          ds.b      4
                    8184   _d7:
0B000100            8185          ds.b      4
                    8186   _a0:
0B000104            8187          ds.b      4
                    8188   _a1:
0B000108            8189          ds.b      4
                    8190   _a2:
0B00010C            8191          ds.b      4
                    8192   _a3:
0B000110            8193          ds.b      4
                    8194   _a4:
0B000114            8195          ds.b      4
                    8196   _a5:
0B000118            8197          ds.b      4
                    8198   _a6:
0B00011C            8199          ds.b      4
                    8200   _PC:
0B000120            8201          ds.b      4
                    8202   _SSP:
0B000124            8203          ds.b      4
                    8204   _USP:
0B000128            8205          ds.b      4
                    8206   _SR:
0B00012C            8207          ds.b      2
                    8208   _BreakPointAddress:
0B00012E            8209          ds.b      32
                    8210   _BreakPointInstruction:
0B00014E            8211          ds.b      16
                    8212   _BreakPointSetOrCleared:
0B00015E            8213          ds.b      32
                    8214   _InstructionSize:
0B00017E            8215          ds.b      4
                    8216   _WatchPointAddress:
0B000182            8217          ds.b      32
                    8218   _WatchPointSetOrCleared:
0B0001A2            8219          ds.b      32
                    8220   _WatchPointString:
0B0001C2            8221          ds.b      800
                    8222   _TempString:
0B0004E2            8223          ds.b      100
                    8224   @vsscanf_buf:
0B000546            8225          ds.b      80
                    8226          section   heap
0B000596            8227                   align
          0B00 0596 8228   bssEnd          equ *                   end of storage space for unitialised variables
                    8229   *                                       we have to copy all initialised variable from rom to here at startup
          0B00 0596 8230   heap   equ       *
0B000596            8231                    align
          0000 0000

Assembly errors: 0
