680x0 MACRO ASSEMBLER   Version 5.00   (c) 1992-2005 Peter J. Fondse

Date: 15 Jan 2019      Time: 11:24:57          Source: G:\COURSES\ELEC 465\M68K SYSTEMS\DE1\VERILOG\M68KV6.0 - 800BY480 - (VERILOG) FOR STUDENTS\PROGRAMS\DEBUGMONITORCODE\M68KDEBUGMONITOR.SRC

                       1          section   code
                       2   ; for initial stack use $08040000 if your system uses SRAM for main memory (top of 256kbyte SRAM space)
                       3   ; When your system is converted to use DRAM for main memory set this constant to $0C000000 (top of 64MByte DRAM space
                       4   
          0804 0000    5   StackPointerVal     equ $08040000      when using sram
                       6   ;StackPointerVal     equ $0C000000      when using dram
                       7   
                       8   ; define RamVectorTable as $0803000 if your system uses SRAM for main memory
                       9   ; When your system is converted to use DRAM for main memory define RamVectorTable constant as $0B000000 (top of 64MByte DRAM space)
                      10   
          0803 0000   11   RamVectorTable      equ $08030000      when using sram
                      12   ;RamVectorTable      equ $0B000000      when using dram
                      13   
                      14   
                      15   
                      16   ; CSTART.ASM  -  C startup-code for Debug Monitor
00000000              17                   align
                      18   
00000000              19                   org $00000000          ;start of rom based vector table, 68k hard wired to expect this at $0
                      20   
00000000  0804 0000   21   InitialSP       dc.l StackPointerVal   ;initial supervisor state stack pointer(stack decrements first before being used)
00000004  0000 0400   22   InitialPC       dc.l start             ;address of 1st instruction of program after a reset
00000008  0000 0802   23   BusError        dc.l E_BErro           ;bus error - stop program
0000000C  0000 0814   24   AddressError    dc.l E_AErro           ;address error - stop program
00000010  0000 0826   25   IllegalInstr    dc.l E_IInst           ;illegal instruction - stop program
00000014  0000 0838   26   DividebyZero    dc.l E_DZero           ;divide by zero error - stop program
00000018  0000 084A   27   Check           dc.l E_Check           ;Check instruction - stop program
0000001C  0000 085C   28   TrapV           dc.l E_Trapv           ;Trapv instruction - stop program
00000020  0000 086E   29   Privilege       dc.l E_Priv            ;privilige violation - stop program
00000024  0000 0880   30   Trace           dc.l E_Trace           ;stop on trace
00000028  0000 0892   31   Line1010emul    dc.l E_1010            ;1010 instructions stop
0000002C  0000 08A4   32   Line1111emul    dc.l E_1111            ;1111 instructions stop
00000030  0000 08B6   33   Unassigned1     dc.l E_Unnas1           ;unassigned vector
00000034  0000 08B6   34   Unassigned2     dc.l E_Unnas2           ;unassigned vector
00000038  0000 08B6   35   Unassigned3     dc.l E_Unnas3           ;unassigned vector
0000003C  0000 08B6   36   Uninit_IRQ      dc.l E_UnitI           ;uninitialised interrupt
00000040  0000 08B6   37   Unassigned4     dc.l E_Unnas4           ;unassigned vector
00000044  0000 08B6   38   Unassigned5     dc.l E_Unnas5           ;unassigned vector
00000048  0000 08B6   39   Unassigned6     dc.l E_Unnas6           ;unassigned vector
0000004C  0000 08B6   40   Unassigned7     dc.l E_Unnas7           ;unassigned vector
00000050  0000 08B6   41   Unassigned8     dc.l E_Unnas8           ;unassigned vector
00000054  0000 08B6   42   Unassigned9     dc.l E_Unnas9           ;unassigned vector
00000058  0000 08B6   43   Unassigned10    dc.l E_Unnas10           ;unassigned vector
0000005C  0000 08B6   44   Unassigned11    dc.l E_Unnas11           ;unassigned vector
00000060  0000 08B6   45   SpuriousIRQ     dc.l E_Spuri           ;stop on spurious irq
                      46   *
                      47   *
00000064  0000 049A   48   Level1IRQ       dc.l Level1RamISR
00000068  0000 04AC   49   Level2IRQ       dc.l Level2RamISR
0000006C  0000 04BE   50   Level3IRQ       dc.l Level3RamISR
00000070  0000 04D0   51   Level4IRQ       dc.l Level4RamISR
00000074  0000 04E2   52   Level5IRQ       dc.l Level5RamISR
00000078  0000 05EC   53   Level6IRQ       dc.l Level6RamISR
0000007C  0000 05FE   54   Level7IRQ       dc.l Level7RamISR
                      55   *
                      56   *
00000080  0000 0610   57   Trap0           dc.l Trap0RamISR        ; User installed trap handler
00000084  0000 0622   58   Trap1           dc.l Trap1RamISR        ; User installed trap handler
00000088  0000 0634   59   Trap2           dc.l Trap2RamISR        ; User installed trap handler
0000008C  0000 0646   60   Trap3           dc.l Trap3RamISR        ; User installed trap handler
00000090  0000 0658   61   Trap4           dc.l Trap4RamISR        ; User installed trap handler
00000094  0000 066A   62   Trap5           dc.l Trap5RamISR        ; User installed trap handler
00000098  0000 067C   63   Trap6           dc.l Trap6RamISR        ; User installed trap handler
0000009C  0000 068E   64   Trap7           dc.l Trap7RamISR        ; User installed trap handler
000000A0  0000 06A0   65   Trap8           dc.l Trap8RamISR        ; User installed trap handler
000000A4  0000 06B2   66   Trap9           dc.l Trap9RamISR        ; User installed trap handler
000000A8  0000 06C4   67   Trap10          dc.l Trap10RamISR       ; User installed trap handler
000000AC  0000 06D6   68   Trap11          dc.l Trap11RamISR       ; User installed trap handler
000000B0  0000 06E8   69   Trap12          dc.l Trap12RamISR       ; User installed trap handler
000000B4  0000 06FA   70   Trap13          dc.l Trap13RamISR       ; User installed trap handler
000000B8  0000 070C   71   Trap14          dc.l Trap14RamISR       ; User installed trap handler
000000BC  0000 07FC   72   Trap15          dc.l Trap15RamISR       ; User installed trap handler
                      73   
                      74   *
                      75   * Other vectors 64-255 are users vectors for autovectored IO device (not implemented in TG68)
                      76   *
                      77   
00000400              78                   org       $00000400
                      79   
00000400  46FC 2700   80   start:          move.w     #$2700,SR             set interrupts to disable until later
                      81   
                      82   *************************************************************************************
                      83   ** add some 68000 instruction to read and write to memory, IO etc. This doesn't do anything
                      84   ** important, it just creates read and write bus cycles to specific addresses which
                      85   ** help with debugging hardware in Quartus simulations
                      86   **************************************************************************************
                      87   
                      88                   ; perform some dummy read/write of 32 bit values to memory to see waveforms during a simulation
                      89   
00000404  23FC 1122   90                   move.l     #$11223344,$08060000 write 32 bits, to memory
00000408  3344 0806 
0000040C  0000      
0000040E  2039 0806   91                   move.l     $08060000,d0         read 32 bits back
00000412  0000      
00000414  13FC 0000   92                   move.b     #$00,$00400000         write to the output ports
00000418  0040 0000 
0000041C  13FC 0000   93                   move.b     #$00,$00400002         write to the output ports
00000420  0040 0002 
00000424  13FC 0000   94                   move.b     #$00,$00400004         write to the output ports
00000428  0040 0004 
0000042C  13FC 0000   95                   move.b     #$00,$00400006         write to the output ports
00000430  0040 0006 
00000434  13FC 0000   96                   move.b     #$00,$00400008         write to the output ports
00000438  0040 0008 
0000043C  13FC 0000   97                   move.b     #$00,$00400010         write to the hex display ports
00000440  0040 0010 
00000444  13FC 0000   98                   move.b     #$00,$00400012         write to the hex display ports
00000448  0040 0012 
0000044C  13FC 0000   99                   move.b     #$00,$00400014         write to the hex display ports
00000450  0040 0014 
00000454  13FC 0000  100                   move.b     #0,$00400020         write to the LCD
00000458  0040 0020 
0000045C  13FC 0000  101                   move.b     #0,$00400022         write to the LCD
00000460  0040 0022 
00000464  13FC 0000  102                   move.b     #0,$00400030         write to the Timer1 Data
00000468  0040 0030 
0000046C  13FC 0000  103                   move.b     #0,$00400032         write to the Timer1 Control
00000470  0040 0032 
                     104   
                     105                   ; some important initialisation do not modify
00000474  23FC FFFF  106                   move.l    #-1,__ungetbuf  ; unget-buffer for keyboard input
00000478  FFFF 0803 
0000047C  00C0      
0000047E  23FC 0000  107                   move.l    #0,__allocp     ; pointer to allocated memory for malloc-function
00000482  0000 0803 
00000486  00C4      
00000488  23FC 0803  108                   move.l    #heap,__heap    ; pointer to free memory
0000048C  05AA 0803 
00000490  00C4      
                     109   
                     110   
00000492  4EB9 0000  111   mainloop        jsr       _main
00000496  28E6      
00000498  60F8       112                   bra       mainloop
                     113   
                     114   *********************************************************************************************************
                     115   * Code to call Ram Based Interrupt handler and other exeception handler code
                     116   *********************************************************************************************************
0000049A  48E7 FFFE  117   Level1RamISR    movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
0000049E  2079 0803  118                   move.l    VL1IRQ,a0               get ram based address into a0
000004A2  0064      
000004A4  4E90       119                   jsr       0(a0)                   jump to the subroutine that is the interrupt handler, using ram based address
000004A6  4CDF 7FFF  120                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
000004AA  4E73       121                   rte
000004AC  48E7 FFFE  122   Level2RamISR    movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
000004B0  2079 0803  123                   move.l    VL2IRQ,a0               get ram based address into a0
000004B4  0068      
000004B6  4E90       124                   jsr       0(a0)                   jump to the subroutine that is the interrupt handler, using ram based address
000004B8  4CDF 7FFF  125                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
000004BC  4E73       126                   rte
000004BE  48E7 FFFE  127   Level3RamISR    movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
000004C2  2079 0803  128                   move.l    VL3IRQ,a0               get ram based address into a0
000004C6  006C      
000004C8  4E90       129                   jsr       0(a0)                   jump to the subroutine that is the interrupt handler, using ram based address
000004CA  4CDF 7FFF  130                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
000004CE  4E73       131                   rte
000004D0  48E7 FFFE  132   Level4RamISR    movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
000004D4  2079 0803  133                   move.l    VL4IRQ,a0               get ram based address into a0
000004D8  0070      
000004DA  4E90       134                   jsr       0(a0)                   jump to the subroutine that is the interrupt handler, using ram based address
000004DC  4CDF 7FFF  135                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
000004E0  4E73       136                   rte
                     137   
                     138   * Trace trap Handler
                     139   
                     140   Level5RamISR
                     141   *
                     142   **         Copy 68000 registers from debug monitor Variables,
                     143   *
                     144   *
000004E2  23FC 0000  145                   move.l    #1,_Trace              switch on Trace Mode
000004E6  0001 0803 
000004EA  00D8      
000004EC  13FC 0000  146                   move.b    #$0,$0040000A          turn off a trace exception so we don't when generate a trace when disassembling instruction in the register dump (disassembling causes access to use program)
000004F0  0040 000A 
000004F4  33DF 0803  147                   move.w    (sp)+,_SR              get at the users status register pointed to by stack pointer and copy
000004F8  012C      
000004FA  23DF 0803  148                   move.l    (sp)+,_PC              get at the users program counter and copy
000004FE  0120      
                     149   *
00000500  23CF 0803  150                   move.l    SP,_SSP                copy system stack pointer to debug monitor variable
00000504  0124      
00000506  23C0 0803  151                   move.l    d0,_d0
0000050A  00E4      
0000050C  23C1 0803  152                   move.l    d1,_d1
00000510  00E8      
00000512  23C2 0803  153                   move.l    d2,_d2
00000516  00EC      
00000518  23C3 0803  154                   move.l    d3,_d3
0000051C  00F0      
0000051E  23C4 0803  155                   move.l    d4,_d4
00000522  00F4      
00000524  23C5 0803  156                   move.l    d5,_d5
00000528  00F8      
0000052A  23C6 0803  157                   move.l    d6,_d6
0000052E  00FC      
00000530  23C7 0803  158                   move.l    d7,_d7
00000534  0100      
                     159   *
00000536  23C8 0803  160                   move.l    a0,_a0
0000053A  0104      
0000053C  23C9 0803  161                   move.l    a1,_a1
00000540  0108      
00000542  23CA 0803  162                   move.l    a2,_a2
00000546  010C      
00000548  23CB 0803  163                   move.l    a3,_a3
0000054C  0110      
0000054E  23CC 0803  164                   move.l    a4,_a4
00000552  0114      
00000554  23CD 0803  165                   move.l    a5,_a5
00000558  0118      
0000055A  23CE 0803  166                   move.l    a6,_a6
0000055E  011C      
00000560  4E68       167                   move.l    usp,a0
00000562  23C8 0803  168                   move.l    a0,_USP
00000566  0128      
                     169   *
00000568  2079 0803  170                   move.l    VL5IRQ,a0              get ram based address into a0, trace exception for next instruction will be generated in Menu SPACE command
0000056C  0074      
0000056E  4E90       171                   jsr       0(a0)                  jump to the subroutine that is the trap handler, using ram based address
                     172   
                     173   ** After trace, reload 68000 registers with new values before continuing
                     174   
00000570  2039 0803  175                   move.l   _d0,d0
00000574  00E4      
00000576  2239 0803  176                   move.l   _d1,d1
0000057A  00E8      
0000057C  2439 0803  177                   move.l   _d2,d2
00000580  00EC      
00000582  2639 0803  178                   move.l   _d3,d3
00000586  00F0      
00000588  2839 0803  179                   move.l   _d4,d4
0000058C  00F4      
0000058E  2A39 0803  180                   move.l   _d5,d5
00000592  00F8      
00000594  2C39 0803  181                   move.l   _d6,d6
00000598  00FC      
0000059A  2E39 0803  182                   move.l   _d7,d7
0000059E  0100      
                     183   
000005A0  2079 0803  184                   move.l   _USP,a0
000005A4  0128      
000005A6  4E60       185                   move.l   a0,USP                     load user stack pointer
000005A8  2079 0803  186                   move.l   _a0,a0
000005AC  0104      
000005AE  2279 0803  187                   move.l   _a1,a1
000005B2  0108      
000005B4  2479 0803  188                   move.l   _a2,a2
000005B8  010C      
000005BA  2679 0803  189                   move.l   _a3,a3
000005BE  0110      
000005C0  2879 0803  190                   move.l   _a4,a4
000005C4  0114      
000005C6  2A79 0803  191                   move.l   _a5,a5
000005CA  0118      
000005CC  2C79 0803  192                   move.l   _a6,a6
000005D0  011C      
                     193   
000005D2  2E79 0803  194                   move.l   _SSP,sp
000005D6  0124      
000005D8  2F39 0803  195                   move.l   _PC,-(sp)
000005DC  0120      
000005DE  3F39 0803  196                   move.w   _SR,-(sp)
000005E2  012C      
000005E4  11F8 0074  197                   move.b    $00000074,$0	          read trace exception vector after accessing disassembly to reset the trace request causes by disassembling program above
000005E8  0000      
000005EA  4E73       198                   rte
                     199   
                     200   * address trap handler
                     201   
000005EC  48E7 FFFE  202   Level6RamISR    movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
000005F0  2079 0803  203                   move.l    VL6IRQ,a0               get ram based address into a0
000005F4  0078      
000005F6  4E90       204                   jsr       0(a0)                   jump to the subroutine that is the interrupt handler, using ram based address
000005F8  4CDF 7FFF  205                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
000005FC  4E73       206                   rte
                     207   
000005FE  48E7 FFFE  208   Level7RamISR    movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000602  2079 0803  209                   move.l    VL7IRQ,a0               get ram based address into a0
00000606  007C      
00000608  4E90       210                   jsr       0(a0)                   jump to the subroutine that is the interrupt handler, using ram based address
0000060A  4CDF 7FFF  211                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
0000060E  4E73       212                   rte
                     213   
                     214   
                     215   ********************************************************************************************************
                     216   * Ram based Trap handler and other exeception handler code
                     217   *********************************************************************************************************
                     218   
00000610  48E7 FFFE  219   Trap0RamISR     movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000614  2079 0803  220                   move.l    VTrap0,a0                get ram based address into a0
00000618  0080      
0000061A  4E90       221                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
0000061C  4CDF 7FFF  222                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
00000620  4E73       223                   rte
                     224   
00000622  48E7 FFFE  225   Trap1RamISR     movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000626  2079 0803  226                   move.l    VTrap1,a0                get ram based address into a0
0000062A  0084      
0000062C  4E90       227                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
0000062E  4CDF 7FFF  228                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
00000632  4E73       229                   rte
                     230   
00000634  48E7 FFFE  231   Trap2RamISR     movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000638  2079 0803  232                   move.l    VTrap2,a0                get ram based address into a0
0000063C  0088      
0000063E  4E90       233                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
00000640  4CDF 7FFF  234                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
00000644  4E73       235                   rte
                     236   
00000646  48E7 FFFE  237   Trap3RamISR     movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
0000064A  2079 0803  238                   move.l    VTrap3,a0                get ram based address into a0
0000064E  008C      
00000650  4E90       239                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
00000652  4CDF 7FFF  240                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
00000656  4E73       241                   rte
                     242   
00000658  48E7 FFFE  243   Trap4RamISR     movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
0000065C  2079 0803  244                   move.l    VTrap4,a0                get ram based address into a0
00000660  0090      
00000662  4E90       245                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
00000664  4CDF 7FFF  246                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
00000668  4E73       247                   rte
                     248   
0000066A  48E7 FFFE  249   Trap5RamISR     movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
0000066E  2079 0803  250                   move.l    VTrap5,a0                get ram based address into a0
00000672  0094      
00000674  4E90       251                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
00000676  4CDF 7FFF  252                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
0000067A  4E73       253                   rte
                     254   
0000067C  48E7 FFFE  255   Trap6RamISR     movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000680  2079 0803  256                   move.l    VTrap6,a0                get ram based address into a0
00000684  0098      
00000686  4E90       257                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
00000688  4CDF 7FFF  258                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
0000068C  4E73       259                   rte
                     260   
0000068E  48E7 FFFE  261   Trap7RamISR     movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000692  2079 0803  262                   move.l    VTrap7,a0                get ram based address into a0
00000696  009C      
00000698  4E90       263                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
0000069A  4CDF 7FFF  264                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
0000069E  4E73       265                   rte
                     266   
000006A0  48E7 FFFE  267   Trap8RamISR     movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
000006A4  2079 0803  268                   move.l    VTrap8,a0                get ram based address into a0
000006A8  00A0      
000006AA  4E90       269                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
000006AC  4CDF 7FFF  270                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
000006B0  4E73       271                   rte
                     272   
000006B2  48E7 FFFE  273   Trap9RamISR     movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
000006B6  2079 0803  274                   move.l    VTrap9,a0                get ram based address into a0
000006BA  00A4      
000006BC  4E90       275                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
000006BE  4CDF 7FFF  276                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
000006C2  4E73       277                   rte
                     278   
000006C4  48E7 FFFE  279   Trap10RamISR    movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
000006C8  2079 0803  280                   move.l    VTrap10,a0                get ram based address into a0
000006CC  00A8      
000006CE  4E90       281                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
000006D0  4CDF 7FFF  282                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
000006D4  4E73       283                   rte
                     284   
000006D6  48E7 FFFE  285   Trap11RamISR    movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
000006DA  2079 0803  286                   move.l    VTrap11,a0                get ram based address into a0
000006DE  00AC      
000006E0  4E90       287                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
000006E2  4CDF 7FFF  288                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
000006E6  4E73       289                   rte
                     290   
000006E8  48E7 FFFE  291   Trap12RamISR    movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
000006EC  2079 0803  292                   move.l    VTrap12,a0                get ram based address into a0
000006F0  00B0      
000006F2  4E90       293                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
000006F4  4CDF 7FFF  294                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
000006F8  4E73       295                   rte
                     296   
000006FA  48E7 FFFE  297   Trap13RamISR    movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
000006FE  2079 0803  298                   move.l    VTrap13,a0                get ram based address into a0
00000702  00B4      
00000704  4E90       299                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
00000706  4CDF 7FFF  300                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
0000070A  4E73       301                   rte
                     302   
                     303   Trap14RamISR    ;Break Point Handler
                     304   *
                     305   **         Copy 68000 registers from debug monitor Variables
                     306   *
0000070C  23FC 0000  307                   move.l    #1,_Trace      switch on Trace Mode
00000710  0001 0803 
00000714  00D8      
00000716  33DF 0803  308                   move.w    (sp)+,_SR       get at the users status register pointed to by stack pointer and copy
0000071A  012C      
0000071C  23DF 0803  309                   move.l    (sp)+,_PC      get at the users program counter and copy
00000720  0120      
                     310   *
00000722  23C0 0803  311                   move.l    d0,_d0
00000726  00E4      
00000728  23C1 0803  312                   move.l    d1,_d1
0000072C  00E8      
0000072E  23C2 0803  313                   move.l    d2,_d2
00000732  00EC      
00000734  23C3 0803  314                   move.l    d3,_d3
00000738  00F0      
0000073A  23C4 0803  315                   move.l    d4,_d4
0000073E  00F4      
00000740  23C5 0803  316                   move.l    d5,_d5
00000744  00F8      
00000746  23C6 0803  317                   move.l    d6,_d6
0000074A  00FC      
0000074C  23C7 0803  318                   move.l    d7,_d7
00000750  0100      
                     319   *
00000752  23C8 0803  320                   move.l    a0,_a0
00000756  0104      
00000758  23C9 0803  321                   move.l    a1,_a1
0000075C  0108      
0000075E  23CA 0803  322                   move.l    a2,_a2
00000762  010C      
00000764  23CB 0803  323                   move.l    a3,_a3
00000768  0110      
0000076A  23CC 0803  324                   move.l    a4,_a4
0000076E  0114      
00000770  23CD 0803  325                   move.l    a5,_a5
00000774  0118      
00000776  23CE 0803  326                   move.l    a6,_a6
0000077A  011C      
0000077C  4E68       327                   move.l    USP,a0
0000077E  23C8 0803  328                   move.l    a0,_USP
00000782  0128      
                     329   *
00000784  2079 0803  330                   move.l    VTrap14,a0             get ram based address into a0
00000788  00B8      
0000078A  4E90       331                   jsr       0(a0)                  jump to the subroutine that is the trap handler, using ram based address
                     332   
                     333   ** After breakpoint reload 68000 registers with new values before continuing
                     334   
                     335   *                move.b    #$ff,$0040000A     generate a trace exception for the next instruction
0000078C  2039 0803  336                   move.l   _d0,d0
00000790  00E4      
00000792  2239 0803  337                   move.l   _d1,d1
00000796  00E8      
00000798  2439 0803  338                   move.l   _d2,d2
0000079C  00EC      
0000079E  2639 0803  339                   move.l   _d3,d3
000007A2  00F0      
000007A4  2839 0803  340                   move.l   _d4,d4
000007A8  00F4      
000007AA  2A39 0803  341                   move.l   _d5,d5
000007AE  00F8      
000007B0  2C39 0803  342                   move.l   _d6,d6
000007B4  00FC      
000007B6  2E39 0803  343                   move.l   _d7,d7
000007BA  0100      
                     344   
000007BC  2079 0803  345                   move.l   _USP,a0
000007C0  0128      
000007C2  4E60       346                   move.l   a0,USP        load user stack pointer A7
000007C4  2079 0803  347                   move.l   _a0,a0
000007C8  0104      
000007CA  2279 0803  348                   move.l   _a1,a1
000007CE  0108      
000007D0  2479 0803  349                   move.l   _a2,a2
000007D4  010C      
000007D6  2679 0803  350                   move.l   _a3,a3
000007DA  0110      
000007DC  2879 0803  351                   move.l   _a4,a4
000007E0  0114      
000007E2  2A79 0803  352                   move.l   _a5,a5
000007E6  0118      
000007E8  2C79 0803  353                   move.l   _a6,a6
000007EC  011C      
                     354   
000007EE  2F39 0803  355                   move.l   _PC,-(sp)
000007F2  0120      
000007F4  3F39 0803  356                   move.w   _SR,-(sp)
000007F8  012C      
000007FA  4E73       357                   rte
                     358   
000007FC  4EF9 0000  359   Trap15RamISR    jmp     _CallDebugMonitor
00000800  226E      
                     360   *                movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
                     361   *                move.l    VTrap15,a0                get ram based address into a0
                     362   *                jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
                     363   *                movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
                     364   *                rte
                     365   
                     366   *********************************************************************************************************
                     367   *Default exception handler for everything without a specific handler
                     368   *********************************************************************************************************
                     369   
                     370   *
                     371   **              Jump here for each unhandled exception
                     372   **              If you need to, MAKE SURE YOU SAVE ALL IMPORTANT REGISTERS AND RESTORE THEM BEFORE RETURNING (IF APPROPRIATE)
                     373   *
                     374   
00000802  48E7 FFFE  375   E_BErro         movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000806  2079 0803  376                   move.l    VBusError,a0            get ram based address into a0
0000080A  0008      
0000080C  4E90       377                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
0000080E  4CDF 7FFF  378                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
00000812  4E73       379                   rte
00000814  48E7 FFFE  380   E_AErro         movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000818  2079 0803  381                   move.l    VAddressError,a0        get ram based address into a0
0000081C  000C      
0000081E  4E90       382                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
00000820  4CDF 7FFF  383                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
00000824  4E73       384                   rte
00000826  48E7 FFFE  385   E_IInst         movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
0000082A  2079 0803  386                   move.l    VIllegalInstr,a0        get ram based address into a0
0000082E  0010      
00000830  4E90       387                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
00000832  4CDF 7FFF  388                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
00000836  4E73       389                   rte
00000838  48E7 FFFE  390   E_DZero         movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
0000083C  2079 0803  391                   move.l    VDividebyZero,a0        get ram based address into a0
00000840  0014      
00000842  4E90       392                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
00000844  4CDF 7FFF  393                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
00000848  4E73       394                   rte
0000084A  48E7 FFFE  395   E_Check         movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
0000084E  2079 0803  396                   move.l    VCheck,a0               get ram based address into a0
00000852  0018      
00000854  4E90       397                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
00000856  4CDF 7FFF  398                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
0000085A  4E73       399                   rte
0000085C  48E7 FFFE  400   E_Trapv         movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000860  2079 0803  401                   move.l    VTrapV,a0               get ram based address into a0
00000864  001C      
00000866  4E90       402                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
00000868  4CDF 7FFF  403                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
0000086C  4E73       404                   rte
0000086E  48E7 FFFE  405   E_Priv          movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000872  2079 0803  406                   move.l    VPrivilege,a0           get ram based address into a0
00000876  0020      
00000878  4E90       407                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
0000087A  4CDF 7FFF  408                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
0000087E  4E73       409                   rte
00000880  48E7 FFFE  410   E_Trace         movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000884  2079 0803  411                   move.l    VTrace,a0               get ram based address into a0
00000888  0024      
0000088A  4E90       412                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
0000088C  4CDF 7FFF  413                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
00000890  4E73       414                   rte
00000892  48E7 FFFE  415   E_1010          movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000896  2079 0803  416                   move.l    VLine1010emul,a0        get ram based address into a0
0000089A  0028      
0000089C  4E90       417                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
0000089E  4CDF 7FFF  418                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
000008A2  4E73       419                   rte
000008A4  48E7 FFFE  420   E_1111          movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
000008A8  2079 0803  421                   move.l    VLine1111emul,a0        get ram based address into a0
000008AC  002C      
000008AE  4E90       422                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
000008B0  4CDF 7FFF  423                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
000008B4  4E73       424                   rte
                     425   E_Unnas1
                     426   E_Unnas2
                     427   E_Unnas3
                     428   E_UnitI
                     429   E_Unnas4
                     430   E_Unnas5
                     431   E_Unnas6
                     432   E_Unnas7
                     433   E_Unnas8
                     434   E_Unnas9
                     435   E_Unnas10
                     436   E_Unnas11
                     437   E_Spuri
000008B6  60FE       438   _stop            bra _stop                         stop
                     439   ***************************************************************************************************
                     440   * Go() function in debug monitor
                     441   ***************************************************************************************************
                     442   _go
000008B8  2E79 0803  443                   move.l   _SSP,a7        load system stack pointer (remember we are in supervisor mode when running this so a7 is the System stack pointer)
000008BC  0124      
000008BE  2F39 0803  444                   move.l   _PC,-(sp)      copy debug monitor PC variable to the stack
000008C2  0120      
000008C4  3F39 0803  445                   move.w   _SR,-(sp)      copy debug monitor status reg to the stack
000008C8  012C      
                     446   
000008CA  1038 0078  447                   move.b   $00000078,d0  remove any spurious address exception arising after power on
000008CE  2039 0803  448                   move.l   _d0,d0
000008D2  00E4      
000008D4  2239 0803  449                   move.l   _d1,d1
000008D8  00E8      
000008DA  2439 0803  450                   move.l   _d2,d2
000008DE  00EC      
000008E0  2639 0803  451                   move.l   _d3,d3
000008E4  00F0      
000008E6  2839 0803  452                   move.l   _d4,d4
000008EA  00F4      
000008EC  2A39 0803  453                   move.l   _d5,d5
000008F0  00F8      
000008F2  2C39 0803  454                   move.l   _d6,d6
000008F6  00FC      
000008F8  2E39 0803  455                   move.l   _d7,d7
000008FC  0100      
                     456   
000008FE  2079 0803  457                   move.l   _USP,a0
00000902  0128      
00000904  4E60       458                   move.l   a0,USP        load user stack pointer (remember we are in supervisor mode when running this, so a7 is the System stack pointer)
00000906  2079 0803  459                   move.l   _a0,a0
0000090A  0104      
0000090C  2279 0803  460                   move.l   _a1,a1
00000910  0108      
00000912  2479 0803  461                   move.l   _a2,a2
00000916  010C      
00000918  2679 0803  462                   move.l   _a3,a3
0000091C  0110      
0000091E  2879 0803  463                   move.l   _a4,a4
00000922  0114      
00000924  2A79 0803  464                   move.l   _a5,a5
00000928  0118      
0000092A  2C79 0803  465                   move.l   _a6,a6
0000092E  011C      
00000930  4E73       466                   rte                    load the status reg and PC from the stack and commence running
                     467                                          *used to be rte but this didn't load the status byte
                     468   
                     469   ; G:\COURSES\ELEC 465\M68K SYSTEMS\DE1\VERILOG\M68KV6.0 - 800BY480 - (VERILOG) FOR STUDENTS\PROGRAMS\DEBUGMONITORCODE\M68KDEBUG.C - Compiled by CC68K  Version 5.00 (c) 1991-2005  Peter J. Fondse
                     470   ; #include "DebugMonitor.h"
                     471   ; // use 08030000 for a system running from sram or 0B000000 for system running from dram
                     472   ; #define StartOfExceptionVectorTable 0x08030000
                     473   ; //#define StartOfExceptionVectorTable 0x0B000000
                     474   ; // use 0C000000 for dram or hex 08040000 for sram
                     475   ; #define TopOfStack 0x08040000
                     476   ; //#define TopOfStack 0x0C000000
                     477   ; /* DO NOT INITIALISE GLOBAL VARIABLES - DO IT in MAIN() */
                     478   ; unsigned int i, x, y, z, PortA_Count;
                     479   ; int     Trace, GoFlag, Echo;                       // used in tracing/single stepping
                     480   ; // 68000 register dump and preintialise value (these can be changed by the user program when it is running, e.g. stack pointer, registers etc
                     481   ; unsigned int d0,d1,d2,d3,d4,d5,d6,d7 ;
                     482   ; unsigned int a0,a1,a2,a3,a4,a5,a6 ;
                     483   ; unsigned int PC, SSP, USP ;
                     484   ; unsigned short int SR;
                     485   ; // Breakpoint variables
                     486   ; unsigned int BreakPointAddress[8];                      //array of 8 breakpoint addresses
                     487   ; unsigned short int BreakPointInstruction[8] ;           // to hold the instruction opcode at the breakpoint
                     488   ; unsigned int BreakPointSetOrCleared[8] ;
                     489   ; unsigned int InstructionSize ;
                     490   ; // watchpoint variables
                     491   ; unsigned int WatchPointAddress[8];                      //array of 8 breakpoint addresses
                     492   ; unsigned int WatchPointSetOrCleared[8] ;
                     493   ; char WatchPointString[8][100] ;
                     494   ; // for disassembly of program
                     495   ; char    Instruction[100] ;
                     496   ; char    TempString[100] ;
                     497   ; /************************************************************************************
                     498   ; *Subroutine to give the 68000 something useless to do to waste 1 mSec
                     499   ; ************************************************************************************/
                     500   ; void Wait1ms(void)
                     501   ; {
                     502   _Wait1ms:
00000932  2F02       503          move.l    D2,-(A7)
                     504   ; long int  i ;
                     505   ; for(i = 0; i < 1000; i ++)
00000934  4282       506          clr.l     D2
                     507   Wait1ms_1:
00000936  0C82 0000  508          cmp.l     #1000,D2
0000093A  03E8      
0000093C  6C04       509          bge.s     Wait1ms_3
0000093E  5282       510          addq.l    #1,D2
00000940  60F4       511          bra       Wait1ms_1
                     512   Wait1ms_3:
00000942  241F       513          move.l    (A7)+,D2
00000944  4E75       514          rts
                     515   ; ;
                     516   ; }
                     517   ; /************************************************************************************
                     518   ; *Subroutine to give the 68000 something useless to do to waste 3 mSec
                     519   ; **************************************************************************************/
                     520   ; void Wait3ms(void)
                     521   ; {
                     522   _Wait3ms:
00000946  2F02       523          move.l    D2,-(A7)
                     524   ; int i ;
                     525   ; for(i = 0; i < 3; i++)
00000948  4282       526          clr.l     D2
                     527   Wait3ms_1:
0000094A  0C82 0000  528          cmp.l     #3,D2
0000094E  0003      
00000950  6C08       529          bge.s     Wait3ms_3
                     530   ; Wait1ms() ;
00000952  4EB8 0932  531          jsr       _Wait1ms
00000956  5282       532          addq.l    #1,D2
00000958  60F0       533          bra       Wait3ms_1
                     534   Wait3ms_3:
0000095A  241F       535          move.l    (A7)+,D2
0000095C  4E75       536          rts
                     537   ; }
                     538   ; /*********************************************************************************************
                     539   ; *Subroutine to initialise the display by writing some commands to the LCD internal registers
                     540   ; *********************************************************************************************/
                     541   ; void Init_LCD(void)
                     542   ; {
                     543   _Init_LCD:
                     544   ; LCDcommand = (char)(0x0c) ;
0000095E  13FC 000C  545          move.b    #12,4194336
00000962  0040 0020 
                     546   ; Wait3ms() ;
00000966  4EB8 0946  547          jsr       _Wait3ms
                     548   ; LCDcommand = (char)(0x38) ;
0000096A  13FC 0038  549          move.b    #56,4194336
0000096E  0040 0020 
                     550   ; Wait3ms() ;
00000972  4EB8 0946  551          jsr       _Wait3ms
00000976  4E75       552          rts
                     553   ; }
                     554   ; /******************************************************************************
                     555   ; *subroutine to output a single character held in d1 to the LCD display
                     556   ; *it is assumed the character is an ASCII code and it will be displayed at the
                     557   ; *current cursor position
                     558   ; *******************************************************************************/
                     559   ; void Outchar(int c)
                     560   ; {
                     561   _Outchar:
00000978  4E56 0000  562          link      A6,#0
                     563   ; LCDdata = (char)(c);
0000097C  202E 0008  564          move.l    8(A6),D0
00000980  13C0 0040  565          move.b    D0,4194338
00000984  0022      
                     566   ; Wait1ms() ;
00000986  4EB8 0932  567          jsr       _Wait1ms
0000098A  4E5E       568          unlk      A6
0000098C  4E75       569          rts
                     570   ; }
                     571   ; /**********************************************************************************
                     572   ; *subroutine to output a message at the current cursor position of the LCD display
                     573   ; ************************************************************************************/
                     574   ; void OutMess(char *theMessage)
                     575   ; {
                     576   _OutMess:
0000098E  4E56 FFFC  577          link      A6,#-4
                     578   ; char c ;
                     579   ; while((c = *theMessage++) != (char)(0))
                     580   OutMess_1:
00000992  206E 0008  581          move.l    8(A6),A0
00000996  52AE 0008  582          addq.l    #1,8(A6)
0000099A  1D50 FFFF  583          move.b    (A0),-1(A6)
0000099E  1010       584          move.b    (A0),D0
000009A0  6712       585          beq.s     OutMess_3
                     586   ; Outchar(c) ;
000009A2  122E FFFF  587          move.b    -1(A6),D1
000009A6  4881       588          ext.w     D1
000009A8  48C1       589          ext.l     D1
000009AA  2F01       590          move.l    D1,-(A7)
000009AC  4EB8 0978  591          jsr       _Outchar
000009B0  584F       592          addq.w    #4,A7
000009B2  60DE       593          bra       OutMess_1
                     594   OutMess_3:
000009B4  4E5E       595          unlk      A6
000009B6  4E75       596          rts
                     597   ; }
                     598   ; /******************************************************************************
                     599   ; *subroutine to clear the line by issuing 24 space characters
                     600   ; *******************************************************************************/
                     601   ; void Clearln(void)
                     602   ; {
                     603   _Clearln:
000009B8  2F02       604          move.l    D2,-(A7)
                     605   ; unsigned char i ;
                     606   ; for(i = 0; i < 24; i ++)
000009BA  4202       607          clr.b     D2
                     608   Clearln_1:
000009BC  0C02 0018  609          cmp.b     #24,D2
000009C0  640E       610          bhs.s     Clearln_3
                     611   ; Outchar(' ') ;  /* write a space char to the LCD display */
000009C2  4878 0020  612          pea       32
000009C6  4EB8 0978  613          jsr       _Outchar
000009CA  584F       614          addq.w    #4,A7
000009CC  5202       615          addq.b    #1,D2
000009CE  60EC       616          bra       Clearln_1
                     617   Clearln_3:
000009D0  241F       618          move.l    (A7)+,D2
000009D2  4E75       619          rts
                     620   ; }
                     621   ; /******************************************************************************
                     622   ; *subroutine to move the cursor to the start of line 1 and clear that line
                     623   ; *******************************************************************************/
                     624   ; void Oline0(char *theMessage)
                     625   ; {
                     626   _Oline0:
000009D4  4E56 0000  627          link      A6,#0
                     628   ; LCDcommand = (char)(0x80) ;
000009D8  13FC 0080  629          move.b    #128,4194336
000009DC  0040 0020 
                     630   ; Wait3ms();
000009E0  4EB8 0946  631          jsr       _Wait3ms
                     632   ; Clearln() ;
000009E4  4EB8 09B8  633          jsr       _Clearln
                     634   ; LCDcommand = (char)(0x80) ;
000009E8  13FC 0080  635          move.b    #128,4194336
000009EC  0040 0020 
                     636   ; Wait3ms() ;
000009F0  4EB8 0946  637          jsr       _Wait3ms
                     638   ; OutMess(theMessage) ;
000009F4  2F2E 0008  639          move.l    8(A6),-(A7)
000009F8  4EB8 098E  640          jsr       _OutMess
000009FC  584F       641          addq.w    #4,A7
000009FE  4E5E       642          unlk      A6
00000A00  4E75       643          rts
                     644   ; }
                     645   ; /******************************************************************************
                     646   ; *subroutine to move the cursor to the start of line 2 and clear that line
                     647   ; *******************************************************************************/
                     648   ; void Oline1(char *theMessage)
                     649   ; {
                     650   _Oline1:
00000A02  4E56 0000  651          link      A6,#0
                     652   ; LCDcommand = (char)(0xC0) ;
00000A06  13FC 00C0  653          move.b    #192,4194336
00000A0A  0040 0020 
                     654   ; Wait3ms();
00000A0E  4EB8 0946  655          jsr       _Wait3ms
                     656   ; Clearln() ;
00000A12  4EB8 09B8  657          jsr       _Clearln
                     658   ; LCDcommand = (char)(0xC0) ;
00000A16  13FC 00C0  659          move.b    #192,4194336
00000A1A  0040 0020 
                     660   ; Wait3ms() ;
00000A1E  4EB8 0946  661          jsr       _Wait3ms
                     662   ; OutMess(theMessage) ;
00000A22  2F2E 0008  663          move.l    8(A6),-(A7)
00000A26  4EB8 098E  664          jsr       _OutMess
00000A2A  584F       665          addq.w    #4,A7
00000A2C  4E5E       666          unlk      A6
00000A2E  4E75       667          rts
                     668   ; }
                     669   ; void InstallExceptionHandler( void (*function_ptr)(), int level)
                     670   ; {
                     671   _InstallExceptionHandler:
00000A30  4E56 FFFC  672          link      A6,#-4
                     673   ; volatile long int *RamVectorAddress = (volatile long int *)(StartOfExceptionVectorTable) ;   // pointer to the Ram based interrupt vector table created in Cstart in debug monitor
00000A34  2D7C 0803  674          move.l    #134414336,-4(A6)
00000A38  0000 FFFC 
                     675   ; RamVectorAddress[level] = (long int *)(function_ptr);
00000A3C  206E FFFC  676          move.l    -4(A6),A0
00000A40  202E 000C  677          move.l    12(A6),D0
00000A44  E588       678          lsl.l     #2,D0
00000A46  21AE 0008  679          move.l    8(A6),0(A0,D0.L)
00000A4A  0800      
00000A4C  4E5E       680          unlk      A6
00000A4E  4E75       681          rts
                     682   ; }
                     683   ; void TestLEDS(void)
                     684   ; {
                     685   _TestLEDS:
00000A50  48E7 3000  686          movem.l   D2/D3,-(A7)
                     687   ; int delay ;
                     688   ; unsigned char count = 0 ;
00000A54  4202       689          clr.b     D2
                     690   ; while(1)    {
                     691   TestLEDS_1:
                     692   ; PortA = PortB = PortC = PortD = HEX_A = HEX_B = HEX_C = HEX_D = ((count << 4) + (count & 0x0f)) ;
00000A56  1002       693          move.b    D2,D0
00000A58  E908       694          lsl.b     #4,D0
00000A5A  1202       695          move.b    D2,D1
00000A5C  C23C 000F  696          and.b     #15,D1
00000A60  D001       697          add.b     D1,D0
00000A62  13C0 0040  698          move.b    D0,4194326
00000A66  0016      
00000A68  13C0 0040  699          move.b    D0,4194324
00000A6C  0014      
00000A6E  13C0 0040  700          move.b    D0,4194322
00000A72  0012      
00000A74  13C0 0040  701          move.b    D0,4194320
00000A78  0010      
00000A7A  13C0 0040  702          move.b    D0,4194310
00000A7E  0006      
00000A80  13C0 0040  703          move.b    D0,4194308
00000A84  0004      
00000A86  13C0 0040  704          move.b    D0,4194306
00000A8A  0002      
00000A8C  13C0 0040  705          move.b    D0,4194304
00000A90  0000      
                     706   ; for(delay = 0; delay < 200000; delay ++)
00000A92  4283       707          clr.l     D3
                     708   TestLEDS_4:
00000A94  0C83 0003  709          cmp.l     #200000,D3
00000A98  0D40      
00000A9A  6C04       710          bge.s     TestLEDS_6
00000A9C  5283       711          addq.l    #1,D3
00000A9E  60F4       712          bra       TestLEDS_4
                     713   TestLEDS_6:
                     714   ; ;
                     715   ; count ++;
00000AA0  5202       716          addq.b    #1,D2
00000AA2  60B2       717          bra       TestLEDS_1
                     718   ; }
                     719   ; }
                     720   ; void SwitchTest(void)
                     721   ; {
                     722   _SwitchTest:
00000AA4  48E7 3020  723          movem.l   D2/D3/A2,-(A7)
00000AA8  45F9 0000  724          lea       _printf.L,A2
00000AAC  556E      
                     725   ; int i, switches = 0 ;
00000AAE  4283       726          clr.l     D3
                     727   ; printf("\r\n") ;
00000AB0  4879 0000  728          pea       @m68kde~1_1.L
00000AB4  5EBE      
00000AB6  4E92       729          jsr       (A2)
00000AB8  584F       730          addq.w    #4,A7
                     731   ; while(1)    {
                     732   SwitchTest_1:
                     733   ; switches = (PortB << 8) | (PortA) ;
00000ABA  1039 0040  734          move.b    4194306,D0
00000ABE  0002      
00000AC0  C0BC 0000  735          and.l     #255,D0
00000AC4  00FF      
00000AC6  E188       736          lsl.l     #8,D0
00000AC8  1239 0040  737          move.b    4194304,D1
00000ACC  0000      
00000ACE  C2BC 0000  738          and.l     #255,D1
00000AD2  00FF      
00000AD4  8081       739          or.l      D1,D0
00000AD6  2600       740          move.l    D0,D3
                     741   ; printf("\rSwitches SW[7-0] = ") ;
00000AD8  4879 0000  742          pea       @m68kde~1_2.L
00000ADC  5EC2      
00000ADE  4E92       743          jsr       (A2)
00000AE0  584F       744          addq.w    #4,A7
                     745   ; for( i = (int)(0x00000080); i > 0; i = i >> 1)  {
00000AE2  243C 0000  746          move.l    #128,D2
00000AE6  0080      
                     747   SwitchTest_4:
00000AE8  0C82 0000  748          cmp.l     #0,D2
00000AEC  0000      
00000AEE  6F20       749          ble.s     SwitchTest_6
                     750   ; if((switches & i) == 0)
00000AF0  2003       751          move.l    D3,D0
00000AF2  C082       752          and.l     D2,D0
00000AF4  660C       753          bne.s     SwitchTest_7
                     754   ; printf("0") ;
00000AF6  4879 0000  755          pea       @m68kde~1_3.L
00000AFA  5ED8      
00000AFC  4E92       756          jsr       (A2)
00000AFE  584F       757          addq.w    #4,A7
00000B00  600A       758          bra.s     SwitchTest_8
                     759   SwitchTest_7:
                     760   ; else
                     761   ; printf("1") ;
00000B02  4879 0000  762          pea       @m68kde~1_4.L
00000B06  5EDA      
00000B08  4E92       763          jsr       (A2)
00000B0A  584F       764          addq.w    #4,A7
                     765   SwitchTest_8:
00000B0C  E282       766          asr.l     #1,D2
00000B0E  60D8       767          bra       SwitchTest_4
                     768   SwitchTest_6:
00000B10  60A8       769          bra       SwitchTest_1
                     770   ; }
                     771   ; }
                     772   ; }
                     773   ; /*********************************************************************************************
                     774   ; *Subroutine to initialise the RS232 Port by writing some commands to the internal registers
                     775   ; *********************************************************************************************/
                     776   ; void Init_RS232(void)
                     777   ; {
                     778   _Init_RS232:
                     779   ; RS232_Control = (char)(0x15) ; //  %00010101    divide by 16 clock, set rts low, 8 bits no parity, 1 stop bit transmitter interrupt disabled
00000B12  13FC 0015  780          move.b    #21,4194368
00000B16  0040 0040 
                     781   ; RS232_Baud = (char)(0x1) ;      // program baud rate generator 000 = 230k, 001 = 115k, 010 = 57.6k, 011 = 38.4k, 100 = 19.2, all others = 9600
00000B1A  13FC 0001  782          move.b    #1,4194372
00000B1E  0040 0044 
00000B22  4E75       783          rts
                     784   ; }
                     785   ; int kbhit(void)
                     786   ; {
                     787   _kbhit:
                     788   ; if(((char)(RS232_Status) & (char)(0x01)) == (char)(0x01))    // wait for Rx bit in status register to be '1'
00000B24  1039 0040  789          move.b    4194368,D0
00000B28  0040      
00000B2A  C03C 0001  790          and.b     #1,D0
00000B2E  0C00 0001  791          cmp.b     #1,D0
00000B32  6604       792          bne.s     kbhit_1
                     793   ; return 1 ;
00000B34  7001       794          moveq     #1,D0
00000B36  6002       795          bra.s     kbhit_3
                     796   kbhit_1:
                     797   ; else
                     798   ; return 0 ;
00000B38  4280       799          clr.l     D0
                     800   kbhit_3:
00000B3A  4E75       801          rts
                     802   ; }
                     803   ; /*********************************************************************************************************
                     804   ; **  Subroutine to provide a low level output function to 6850 ACIA
                     805   ; **  This routine provides the basic functionality to output a single character to the serial Port
                     806   ; **  to allow the board to communicate with HyperTerminal Program
                     807   ; **
                     808   ; **  NOTE you do not call this function directly, instead you call the normal putchar() function
                     809   ; **  which in turn calls _putch() below). Other functions like puts(), printf() call putchar() so will
                     810   ; **  call _putch() also
                     811   ; *********************************************************************************************************/
                     812   ; int _putch( int c)
                     813   ; {
                     814   __putch:
00000B3C  4E56 0000  815          link      A6,#0
                     816   ; while(((char)(RS232_Status) & (char)(0x02)) != (char)(0x02))    // wait for Tx bit in status register or 6850 serial comms chip to be '1'
                     817   _putch_1:
00000B40  1039 0040  818          move.b    4194368,D0
00000B44  0040      
00000B46  C03C 0002  819          and.b     #2,D0
00000B4A  0C00 0002  820          cmp.b     #2,D0
00000B4E  6702       821          beq.s     _putch_3
00000B50  60EE       822          bra       _putch_1
                     823   _putch_3:
                     824   ; ;
                     825   ; (char)(RS232_TxData) = ((char)(c) & (char)(0x7f));                      // write to the data register to output the character (mask off bit 8 to keep it 7 bit ASCII)
00000B52  202E 0008  826          move.l    8(A6),D0
00000B56  C03C 007F  827          and.b     #127,D0
00000B5A  13C0 0040  828          move.b    D0,4194370
00000B5E  0042      
                     829   ; return c ;                                              // putchar() expects the character to be returned
00000B60  202E 0008  830          move.l    8(A6),D0
00000B64  4E5E       831          unlk      A6
00000B66  4E75       832          rts
                     833   ; }
                     834   ; /*********************************************************************************************************
                     835   ; **  Subroutine to provide a low level input function to 6850 ACIA
                     836   ; **  This routine provides the basic functionality to input a single character from the serial Port
                     837   ; **  to allow the board to communicate with HyperTerminal Program Keyboard (your PC)
                     838   ; **
                     839   ; **  NOTE you do not call this function directly, instead you call the normal _getch() function
                     840   ; **  which in turn calls _getch() below). Other functions like gets(), scanf() call _getch() so will
                     841   ; **  call _getch() also
                     842   ; *********************************************************************************************************/
                     843   ; int _getch( void )
                     844   ; {
                     845   __getch:
00000B68  2F02       846          move.l    D2,-(A7)
                     847   ; int c ;
                     848   ; while(((char)(RS232_Status) & (char)(0x01)) != (char)(0x01))    // wait for Rx bit in 6850 serial comms chip status register to be '1'
                     849   _getch_1:
00000B6A  1039 0040  850          move.b    4194368,D0
00000B6E  0040      
00000B70  C03C 0001  851          and.b     #1,D0
00000B74  0C00 0001  852          cmp.b     #1,D0
00000B78  6702       853          beq.s     _getch_3
00000B7A  60EE       854          bra       _getch_1
                     855   _getch_3:
                     856   ; ;
                     857   ; c = (RS232_RxData & (char)(0x7f));                   // read received character, mask off top bit and return as 7 bit ASCII character
00000B7C  1039 0040  858          move.b    4194370,D0
00000B80  0042      
00000B82  C0BC 0000  859          and.l     #255,D0
00000B86  00FF      
00000B88  C0BC 0000  860          and.l     #127,D0
00000B8C  007F      
00000B8E  2400       861          move.l    D0,D2
                     862   ; // shall we echo the character? Echo is set to TRUE at reset, but for speed we don't want to echo when downloading code with the 'L' debugger command
                     863   ; if(Echo)
00000B90  4AB9 0803  864          tst.l     _Echo.L
00000B94  00E0      
00000B96  6708       865          beq.s     _getch_4
                     866   ; _putch(c);
00000B98  2F02       867          move.l    D2,-(A7)
00000B9A  4EB8 0B3C  868          jsr       __putch
00000B9E  584F       869          addq.w    #4,A7
                     870   _getch_4:
                     871   ; return c ;
00000BA0  2002       872          move.l    D2,D0
00000BA2  241F       873          move.l    (A7)+,D2
00000BA4  4E75       874          rts
                     875   ; }
                     876   ; // flush the input stream for any unread characters
                     877   ; void FlushKeyboard(void)
                     878   ; {
                     879   _FlushKeyboard:
00000BA6  4E56 FFFC  880          link      A6,#-4
                     881   ; char c ;
                     882   ; while(1)    {
                     883   FlushKeyboard_1:
                     884   ; if(((char)(RS232_Status) & (char)(0x01)) == (char)(0x01))    // if Rx bit in status register is '1'
00000BAA  1039 0040  885          move.b    4194368,D0
00000BAE  0040      
00000BB0  C03C 0001  886          and.b     #1,D0
00000BB4  0C00 0001  887          cmp.b     #1,D0
00000BB8  6610       888          bne.s     FlushKeyboard_4
                     889   ; c = ((char)(RS232_RxData) & (char)(0x7f)) ;
00000BBA  1039 0040  890          move.b    4194370,D0
00000BBE  0042      
00000BC0  C03C 007F  891          and.b     #127,D0
00000BC4  1D40 FFFF  892          move.b    D0,-1(A6)
00000BC8  6002       893          bra.s     FlushKeyboard_5
                     894   FlushKeyboard_4:
                     895   ; else
                     896   ; return ;
00000BCA  6002       897          bra.s     FlushKeyboard_6
                     898   FlushKeyboard_5:
00000BCC  60DC       899          bra       FlushKeyboard_1
                     900   FlushKeyboard_6:
00000BCE  4E5E       901          unlk      A6
00000BD0  4E75       902          rts
                     903   ; }
                     904   ; }
                     905   ; // converts hex char to 4 bit binary equiv in range 0000-1111 (0-F)
                     906   ; // char assumed to be a valid hex char 0-9, a-f, A-F
                     907   ; char xtod(int c)
                     908   ; {
                     909   _xtod:
00000BD2  4E56 0000  910          link      A6,#0
00000BD6  2F02       911          move.l    D2,-(A7)
00000BD8  242E 0008  912          move.l    8(A6),D2
                     913   ; if ((char)(c) <= (char)('9'))
00000BDC  0C02 0039  914          cmp.b     #57,D2
00000BE0  6E08       915          bgt.s     xtod_1
                     916   ; return c - (char)(0x30);    // 0 - 9 = 0x30 - 0x39 so convert to number by sutracting 0x30
00000BE2  1002       917          move.b    D2,D0
00000BE4  0400 0030  918          sub.b     #48,D0
00000BE8  6014       919          bra.s     xtod_3
                     920   xtod_1:
                     921   ; else if((char)(c) > (char)('F'))    // assume lower case
00000BEA  0C02 0046  922          cmp.b     #70,D2
00000BEE  6F08       923          ble.s     xtod_4
                     924   ; return c - (char)(0x57);    // a-f = 0x61-66 so needs to be converted to 0x0A - 0x0F so subtract 0x57
00000BF0  1002       925          move.b    D2,D0
00000BF2  0400 0057  926          sub.b     #87,D0
00000BF6  6006       927          bra.s     xtod_3
                     928   xtod_4:
                     929   ; else
                     930   ; return c - (char)(0x37);    // A-F = 0x41-46 so needs to be converted to 0x0A - 0x0F so subtract 0x37
00000BF8  1002       931          move.b    D2,D0
00000BFA  0400 0037  932          sub.b     #55,D0
                     933   xtod_3:
00000BFE  241F       934          move.l    (A7)+,D2
00000C00  4E5E       935          unlk      A6
00000C02  4E75       936          rts
                     937   ; }
                     938   ; int Get2HexDigits(char *CheckSumPtr)
                     939   ; {
                     940   _Get2HexDigits:
00000C04  4E56 0000  941          link      A6,#0
00000C08  2F02       942          move.l    D2,-(A7)
                     943   ; register int i = (xtod(_getch()) << 4) | (xtod(_getch()));
00000C0A  2F00       944          move.l    D0,-(A7)
00000C0C  4EB8 0B68  945          jsr       __getch
00000C10  2200       946          move.l    D0,D1
00000C12  201F       947          move.l    (A7)+,D0
00000C14  2F01       948          move.l    D1,-(A7)
00000C16  4EB8 0BD2  949          jsr       _xtod
00000C1A  584F       950          addq.w    #4,A7
00000C1C  C0BC 0000  951          and.l     #255,D0
00000C20  00FF      
00000C22  E980       952          asl.l     #4,D0
00000C24  2F00       953          move.l    D0,-(A7)
00000C26  2F01       954          move.l    D1,-(A7)
00000C28  4EB8 0B68  955          jsr       __getch
00000C2C  221F       956          move.l    (A7)+,D1
00000C2E  2F00       957          move.l    D0,-(A7)
00000C30  4EB8 0BD2  958          jsr       _xtod
00000C34  584F       959          addq.w    #4,A7
00000C36  2200       960          move.l    D0,D1
00000C38  201F       961          move.l    (A7)+,D0
00000C3A  C2BC 0000  962          and.l     #255,D1
00000C3E  00FF      
00000C40  8081       963          or.l      D1,D0
00000C42  2400       964          move.l    D0,D2
                     965   ; if(CheckSumPtr)
00000C44  4AAE 0008  966          tst.l     8(A6)
00000C48  6706       967          beq.s     Get2HexDigits_1
                     968   ; *CheckSumPtr += i ;
00000C4A  206E 0008  969          move.l    8(A6),A0
00000C4E  D510       970          add.b     D2,(A0)
                     971   Get2HexDigits_1:
                     972   ; return i ;
00000C50  2002       973          move.l    D2,D0
00000C52  241F       974          move.l    (A7)+,D2
00000C54  4E5E       975          unlk      A6
00000C56  4E75       976          rts
                     977   ; }
                     978   ; int Get4HexDigits(char *CheckSumPtr)
                     979   ; {
                     980   _Get4HexDigits:
00000C58  4E56 0000  981          link      A6,#0
                     982   ; return (Get2HexDigits(CheckSumPtr) << 8) | (Get2HexDigits(CheckSumPtr));
00000C5C  2F2E 0008  983          move.l    8(A6),-(A7)
00000C60  4EB8 0C04  984          jsr       _Get2HexDigits
00000C64  584F       985          addq.w    #4,A7
00000C66  E180       986          asl.l     #8,D0
00000C68  2F00       987          move.l    D0,-(A7)
00000C6A  2F2E 0008  988          move.l    8(A6),-(A7)
00000C6E  4EB8 0C04  989          jsr       _Get2HexDigits
00000C72  584F       990          addq.w    #4,A7
00000C74  2200       991          move.l    D0,D1
00000C76  201F       992          move.l    (A7)+,D0
00000C78  8081       993          or.l      D1,D0
00000C7A  4E5E       994          unlk      A6
00000C7C  4E75       995          rts
                     996   ; }
                     997   ; int Get6HexDigits(char *CheckSumPtr)
                     998   ; {
                     999   _Get6HexDigits:
00000C7E  4E56 0000 1000          link      A6,#0
                    1001   ; return (Get4HexDigits(CheckSumPtr) << 8) | (Get2HexDigits(CheckSumPtr));
00000C82  2F2E 0008 1002          move.l    8(A6),-(A7)
00000C86  4EB8 0C58 1003          jsr       _Get4HexDigits
00000C8A  584F      1004          addq.w    #4,A7
00000C8C  E180      1005          asl.l     #8,D0
00000C8E  2F00      1006          move.l    D0,-(A7)
00000C90  2F2E 0008 1007          move.l    8(A6),-(A7)
00000C94  4EB8 0C04 1008          jsr       _Get2HexDigits
00000C98  584F      1009          addq.w    #4,A7
00000C9A  2200      1010          move.l    D0,D1
00000C9C  201F      1011          move.l    (A7)+,D0
00000C9E  8081      1012          or.l      D1,D0
00000CA0  4E5E      1013          unlk      A6
00000CA2  4E75      1014          rts
                    1015   ; }
                    1016   ; int Get8HexDigits(char *CheckSumPtr)
                    1017   ; {
                    1018   _Get8HexDigits:
00000CA4  4E56 0000 1019          link      A6,#0
                    1020   ; return (Get4HexDigits(CheckSumPtr) << 16) | (Get4HexDigits(CheckSumPtr));
00000CA8  2F2E 0008 1021          move.l    8(A6),-(A7)
00000CAC  4EB8 0C58 1022          jsr       _Get4HexDigits
00000CB0  584F      1023          addq.w    #4,A7
00000CB2  E180      1024          asl.l     #8,D0
00000CB4  E180      1025          asl.l     #8,D0
00000CB6  2F00      1026          move.l    D0,-(A7)
00000CB8  2F2E 0008 1027          move.l    8(A6),-(A7)
00000CBC  4EB8 0C58 1028          jsr       _Get4HexDigits
00000CC0  584F      1029          addq.w    #4,A7
00000CC2  2200      1030          move.l    D0,D1
00000CC4  201F      1031          move.l    (A7)+,D0
00000CC6  8081      1032          or.l      D1,D0
00000CC8  4E5E      1033          unlk      A6
00000CCA  4E75      1034          rts
                    1035   ; }
                    1036   ; char *strcatInstruction(char *s) {    return strcat(Instruction,s) ; }
                    1037   _strcatInstruction:
00000CCC  4E56 0000 1038          link      A6,#0
00000CD0  2F2E 0008 1039          move.l    8(A6),-(A7)
00000CD4  4879 0803 1040          pea       _Instruction.L
00000CD8  04E2      
00000CDA  4EB9 0000 1041          jsr       _strcat
00000CDE  552C      
00000CE0  504F      1042          addq.w    #8,A7
00000CE2  4E5E      1043          unlk      A6
00000CE4  4E75      1044          rts
                    1045   ; char *strcpyInstruction(char *s) {    return strcpy(Instruction,s) ; }
                    1046   _strcpyInstruction:
00000CE6  4E56 0000 1047          link      A6,#0
00000CEA  2F2E 0008 1048          move.l    8(A6),-(A7)
00000CEE  4879 0803 1049          pea       _Instruction.L
00000CF2  04E2      
00000CF4  4EB9 0000 1050          jsr       _strcpy
00000CF8  5372      
00000CFA  504F      1051          addq.w    #8,A7
00000CFC  4E5E      1052          unlk      A6
00000CFE  4E75      1053          rts
                    1054   ; void DisassembleProgram(void )
                    1055   ; {
                    1056   _DisassembleProgram:
00000D00  4E56 FFF8 1057          link      A6,#-8
00000D04  48E7 3038 1058          movem.l   D2/D3/A2/A3/A4,-(A7)
00000D08  45F9 0803 1059          lea       _InstructionSize.L,A2
00000D0C  017E      
00000D0E  47F9 0000 1060          lea       _printf.L,A3
00000D12  556E      
00000D14  49F9 0803 1061          lea       _Instruction.L,A4
00000D18  04E2      
                    1062   ; char c ;
                    1063   ; int i, j ;
                    1064   ; unsigned short int *ProgramPtr ; // pointer to where the program is stored
                    1065   ; printf("\r\nEnter Start Address: ") ;
00000D1A  4879 0000 1066          pea       @m68kde~1_5.L
00000D1E  5EDC      
00000D20  4E93      1067          jsr       (A3)
00000D22  584F      1068          addq.w    #4,A7
                    1069   ; ProgramPtr = Get8HexDigits(0) ;
00000D24  42A7      1070          clr.l     -(A7)
00000D26  4EB8 0CA4 1071          jsr       _Get8HexDigits
00000D2A  584F      1072          addq.w    #4,A7
00000D2C  2400      1073          move.l    D0,D2
                    1074   ; printf("\r\n<ESC> = Abort, SPACE to Continue") ;
00000D2E  4879 0000 1075          pea       @m68kde~1_6.L
00000D32  5EF4      
00000D34  4E93      1076          jsr       (A3)
00000D36  584F      1077          addq.w    #4,A7
                    1078   ; while(1)    {
                    1079   DisassembleProgram_1:
                    1080   ; for(i = 0; i < 20; i ++)
00000D38  4283      1081          clr.l     D3
                    1082   DisassembleProgram_4:
00000D3A  0C83 0000 1083          cmp.l     #20,D3
00000D3E  0014      
00000D40  6C00 017E 1084          bge       DisassembleProgram_6
                    1085   ; {
                    1086   ; InstructionSize = 1 ;                   // assume all instruction are at least 1 word
00000D44  24BC 0000 1087          move.l    #1,(A2)
00000D48  0001      
                    1088   ; DisassembleInstruction(ProgramPtr) ;    // build up string for disassembled instruction at address in programptr
00000D4A  2F02      1089          move.l    D2,-(A7)
00000D4C  4EB9 0000 1090          jsr       _DisassembleInstruction
00000D50  34D0      
00000D52  584F      1091          addq.w    #4,A7
                    1092   ; if(InstructionSize == 1)
00000D54  2012      1093          move.l    (A2),D0
00000D56  0C80 0000 1094          cmp.l     #1,D0
00000D5A  0001      
00000D5C  6620      1095          bne.s     DisassembleProgram_7
                    1096   ; printf("\r\n%08X  %04X                        %s", ProgramPtr, ProgramPtr[0], Instruction) ;
00000D5E  2F0C      1097          move.l    A4,-(A7)
00000D60  2042      1098          move.l    D2,A0
00000D62  3210      1099          move.w    (A0),D1
00000D64  C2BC 0000 1100          and.l     #65535,D1
00000D68  FFFF      
00000D6A  2F01      1101          move.l    D1,-(A7)
00000D6C  2F02      1102          move.l    D2,-(A7)
00000D6E  4879 0000 1103          pea       @m68kde~1_7.L
00000D72  5F18      
00000D74  4E93      1104          jsr       (A3)
00000D76  DEFC 0010 1105          add.w     #16,A7
00000D7A  6000 0138 1106          bra       DisassembleProgram_15
                    1107   DisassembleProgram_7:
                    1108   ; else if(InstructionSize == 2)
00000D7E  2012      1109          move.l    (A2),D0
00000D80  0C80 0000 1110          cmp.l     #2,D0
00000D84  0002      
00000D86  662E      1111          bne.s     DisassembleProgram_9
                    1112   ; printf("\r\n%08X  %04X %04X                   %s", ProgramPtr, ProgramPtr[0], ProgramPtr[1], Instruction) ;
00000D88  2F0C      1113          move.l    A4,-(A7)
00000D8A  2042      1114          move.l    D2,A0
00000D8C  3228 0002 1115          move.w    2(A0),D1
00000D90  C2BC 0000 1116          and.l     #65535,D1
00000D94  FFFF      
00000D96  2F01      1117          move.l    D1,-(A7)
00000D98  2042      1118          move.l    D2,A0
00000D9A  3210      1119          move.w    (A0),D1
00000D9C  C2BC 0000 1120          and.l     #65535,D1
00000DA0  FFFF      
00000DA2  2F01      1121          move.l    D1,-(A7)
00000DA4  2F02      1122          move.l    D2,-(A7)
00000DA6  4879 0000 1123          pea       @m68kde~1_8.L
00000DAA  5F40      
00000DAC  4E93      1124          jsr       (A3)
00000DAE  DEFC 0014 1125          add.w     #20,A7
00000DB2  6000 0100 1126          bra       DisassembleProgram_15
                    1127   DisassembleProgram_9:
                    1128   ; else if(InstructionSize == 3)
00000DB6  2012      1129          move.l    (A2),D0
00000DB8  0C80 0000 1130          cmp.l     #3,D0
00000DBC  0003      
00000DBE  6600 003E 1131          bne       DisassembleProgram_11
                    1132   ; printf("\r\n%08X  %04X %04X %04X              %s", ProgramPtr, ProgramPtr[0], ProgramPtr[1], ProgramPtr[2], Instruction) ;
00000DC2  2F0C      1133          move.l    A4,-(A7)
00000DC4  2042      1134          move.l    D2,A0
00000DC6  3228 0004 1135          move.w    4(A0),D1
00000DCA  C2BC 0000 1136          and.l     #65535,D1
00000DCE  FFFF      
00000DD0  2F01      1137          move.l    D1,-(A7)
00000DD2  2042      1138          move.l    D2,A0
00000DD4  3228 0002 1139          move.w    2(A0),D1
00000DD8  C2BC 0000 1140          and.l     #65535,D1
00000DDC  FFFF      
00000DDE  2F01      1141          move.l    D1,-(A7)
00000DE0  2042      1142          move.l    D2,A0
00000DE2  3210      1143          move.w    (A0),D1
00000DE4  C2BC 0000 1144          and.l     #65535,D1
00000DE8  FFFF      
00000DEA  2F01      1145          move.l    D1,-(A7)
00000DEC  2F02      1146          move.l    D2,-(A7)
00000DEE  4879 0000 1147          pea       @m68kde~1_9.L
00000DF2  5F68      
00000DF4  4E93      1148          jsr       (A3)
00000DF6  DEFC 0018 1149          add.w     #24,A7
00000DFA  6000 00B8 1150          bra       DisassembleProgram_15
                    1151   DisassembleProgram_11:
                    1152   ; else if(InstructionSize == 4)
00000DFE  2012      1153          move.l    (A2),D0
00000E00  0C80 0000 1154          cmp.l     #4,D0
00000E04  0004      
00000E06  6600 004C 1155          bne       DisassembleProgram_13
                    1156   ; printf("\r\n%08X  %04X %04X %04X %04X         %s", ProgramPtr, ProgramPtr[0], ProgramPtr[1], ProgramPtr[2], ProgramPtr[3], Instruction) ;
00000E0A  2F0C      1157          move.l    A4,-(A7)
00000E0C  2042      1158          move.l    D2,A0
00000E0E  3228 0006 1159          move.w    6(A0),D1
00000E12  C2BC 0000 1160          and.l     #65535,D1
00000E16  FFFF      
00000E18  2F01      1161          move.l    D1,-(A7)
00000E1A  2042      1162          move.l    D2,A0
00000E1C  3228 0004 1163          move.w    4(A0),D1
00000E20  C2BC 0000 1164          and.l     #65535,D1
00000E24  FFFF      
00000E26  2F01      1165          move.l    D1,-(A7)
00000E28  2042      1166          move.l    D2,A0
00000E2A  3228 0002 1167          move.w    2(A0),D1
00000E2E  C2BC 0000 1168          and.l     #65535,D1
00000E32  FFFF      
00000E34  2F01      1169          move.l    D1,-(A7)
00000E36  2042      1170          move.l    D2,A0
00000E38  3210      1171          move.w    (A0),D1
00000E3A  C2BC 0000 1172          and.l     #65535,D1
00000E3E  FFFF      
00000E40  2F01      1173          move.l    D1,-(A7)
00000E42  2F02      1174          move.l    D2,-(A7)
00000E44  4879 0000 1175          pea       @m68kde~1_10.L
00000E48  5F90      
00000E4A  4E93      1176          jsr       (A3)
00000E4C  DEFC 001C 1177          add.w     #28,A7
00000E50  6000 0062 1178          bra       DisassembleProgram_15
                    1179   DisassembleProgram_13:
                    1180   ; else if(InstructionSize == 5)
00000E54  2012      1181          move.l    (A2),D0
00000E56  0C80 0000 1182          cmp.l     #5,D0
00000E5A  0005      
00000E5C  6600 0056 1183          bne       DisassembleProgram_15
                    1184   ; printf("\r\n%08X  %04X %04X %04X %04X %04X    %s", ProgramPtr, ProgramPtr[0], ProgramPtr[1], ProgramPtr[2], ProgramPtr[3], ProgramPtr[4], Instruction) ;
00000E60  2F0C      1185          move.l    A4,-(A7)
00000E62  2042      1186          move.l    D2,A0
00000E64  3228 0008 1187          move.w    8(A0),D1
00000E68  C2BC 0000 1188          and.l     #65535,D1
00000E6C  FFFF      
00000E6E  2F01      1189          move.l    D1,-(A7)
00000E70  2042      1190          move.l    D2,A0
00000E72  3228 0006 1191          move.w    6(A0),D1
00000E76  C2BC 0000 1192          and.l     #65535,D1
00000E7A  FFFF      
00000E7C  2F01      1193          move.l    D1,-(A7)
00000E7E  2042      1194          move.l    D2,A0
00000E80  3228 0004 1195          move.w    4(A0),D1
00000E84  C2BC 0000 1196          and.l     #65535,D1
00000E88  FFFF      
00000E8A  2F01      1197          move.l    D1,-(A7)
00000E8C  2042      1198          move.l    D2,A0
00000E8E  3228 0002 1199          move.w    2(A0),D1
00000E92  C2BC 0000 1200          and.l     #65535,D1
00000E96  FFFF      
00000E98  2F01      1201          move.l    D1,-(A7)
00000E9A  2042      1202          move.l    D2,A0
00000E9C  3210      1203          move.w    (A0),D1
00000E9E  C2BC 0000 1204          and.l     #65535,D1
00000EA2  FFFF      
00000EA4  2F01      1205          move.l    D1,-(A7)
00000EA6  2F02      1206          move.l    D2,-(A7)
00000EA8  4879 0000 1207          pea       @m68kde~1_11.L
00000EAC  5FB8      
00000EAE  4E93      1208          jsr       (A3)
00000EB0  DEFC 0020 1209          add.w     #32,A7
                    1210   DisassembleProgram_15:
                    1211   ; ProgramPtr += InstructionSize ;
00000EB4  2012      1212          move.l    (A2),D0
00000EB6  E388      1213          lsl.l     #1,D0
00000EB8  D480      1214          add.l     D0,D2
00000EBA  5283      1215          addq.l    #1,D3
00000EBC  6000 FE7C 1216          bra       DisassembleProgram_4
                    1217   DisassembleProgram_6:
                    1218   ; }
                    1219   ; c = _getch() ;
00000EC0  4EB8 0B68 1220          jsr       __getch
00000EC4  1D40 FFFB 1221          move.b    D0,-5(A6)
                    1222   ; if(c == 0x1b)          // break on ESC
00000EC8  102E FFFB 1223          move.b    -5(A6),D0
00000ECC  0C00 001B 1224          cmp.b     #27,D0
00000ED0  6602      1225          bne.s     DisassembleProgram_17
                    1226   ; return ;
00000ED2  6004      1227          bra.s     DisassembleProgram_19
                    1228   DisassembleProgram_17:
00000ED4  6000 FE62 1229          bra       DisassembleProgram_1
                    1230   DisassembleProgram_19:
00000ED8  4CDF 1C0C 1231          movem.l   (A7)+,D2/D3/A2/A3/A4
00000EDC  4E5E      1232          unlk      A6
00000EDE  4E75      1233          rts
                    1234   ; }
                    1235   ; }
                    1236   ; void DumpMemory(void)   // simple dump memory fn
                    1237   ; {
                    1238   _DumpMemory:
00000EE0  48E7 3C30 1239          movem.l   D2/D3/D4/D5/A2/A3,-(A7)
00000EE4  45F9 0000 1240          lea       _printf.L,A2
00000EE8  556E      
00000EEA  47F9 0000 1241          lea       _putch.L,A3
00000EEE  5460      
                    1242   ; int i, j ;
                    1243   ; unsigned char *RamPtr,c ; // pointer to where the program is download (assumed)
                    1244   ; printf("\r\nDump Memory Block: <ESC> to Abort, <SPACE> to Continue") ;
00000EF0  4879 0000 1245          pea       @m68kde~1_12.L
00000EF4  5FE0      
00000EF6  4E92      1246          jsr       (A2)
00000EF8  584F      1247          addq.w    #4,A7
                    1248   ; printf("\r\nEnter Start Address: ") ;
00000EFA  4879 0000 1249          pea       @m68kde~1_13.L
00000EFE  601A      
00000F00  4E92      1250          jsr       (A2)
00000F02  584F      1251          addq.w    #4,A7
                    1252   ; RamPtr = Get8HexDigits(0) ;
00000F04  42A7      1253          clr.l     -(A7)
00000F06  4EB8 0CA4 1254          jsr       _Get8HexDigits
00000F0A  584F      1255          addq.w    #4,A7
00000F0C  2600      1256          move.l    D0,D3
                    1257   ; while(1)    {
                    1258   DumpMemory_1:
                    1259   ; for(i = 0; i < 16; i ++)    {
00000F0E  4285      1260          clr.l     D5
                    1261   DumpMemory_4:
00000F10  0C85 0000 1262          cmp.l     #16,D5
00000F14  0010      
00000F16  6C00 0096 1263          bge       DumpMemory_6
                    1264   ; printf("\r\n%08x ", RamPtr) ;
00000F1A  2F03      1265          move.l    D3,-(A7)
00000F1C  4879 0000 1266          pea       @m68kde~1_14.L
00000F20  6032      
00000F22  4E92      1267          jsr       (A2)
00000F24  504F      1268          addq.w    #8,A7
                    1269   ; for(j=0; j < 16; j ++)  {
00000F26  4282      1270          clr.l     D2
                    1271   DumpMemory_7:
00000F28  0C82 0000 1272          cmp.l     #16,D2
00000F2C  0010      
00000F2E  6C24      1273          bge.s     DumpMemory_9
                    1274   ; printf("%02X",RamPtr[j]) ;
00000F30  2043      1275          move.l    D3,A0
00000F32  1230 2800 1276          move.b    0(A0,D2.L),D1
00000F36  C2BC 0000 1277          and.l     #255,D1
00000F3A  00FF      
00000F3C  2F01      1278          move.l    D1,-(A7)
00000F3E  4879 0000 1279          pea       @m68kde~1_15.L
00000F42  603A      
00000F44  4E92      1280          jsr       (A2)
00000F46  504F      1281          addq.w    #8,A7
                    1282   ; putchar(' ') ;
00000F48  4878 0020 1283          pea       32
00000F4C  4E93      1284          jsr       (A3)
00000F4E  584F      1285          addq.w    #4,A7
00000F50  5282      1286          addq.l    #1,D2
00000F52  60D4      1287          bra       DumpMemory_7
                    1288   DumpMemory_9:
                    1289   ; }
                    1290   ; // now display the data as ASCII at the end
                    1291   ; printf("  ") ;
00000F54  4879 0000 1292          pea       @m68kde~1_16.L
00000F58  6040      
00000F5A  4E92      1293          jsr       (A2)
00000F5C  584F      1294          addq.w    #4,A7
                    1295   ; for(j = 0; j < 16; j++) {
00000F5E  4282      1296          clr.l     D2
                    1297   DumpMemory_10:
00000F60  0C82 0000 1298          cmp.l     #16,D2
00000F64  0010      
00000F66  6C00 003A 1299          bge       DumpMemory_12
                    1300   ; c = ((char)(RamPtr[j]) & 0x7f) ;
00000F6A  2043      1301          move.l    D3,A0
00000F6C  1030 2800 1302          move.b    0(A0,D2.L),D0
00000F70  C03C 007F 1303          and.b     #127,D0
00000F74  1800      1304          move.b    D0,D4
                    1305   ; if((c > (char)(0x7f)) || (c < ' '))
00000F76  0C04 007F 1306          cmp.b     #127,D4
00000F7A  6206      1307          bhi.s     DumpMemory_15
00000F7C  0C04 0020 1308          cmp.b     #32,D4
00000F80  640A      1309          bhs.s     DumpMemory_13
                    1310   DumpMemory_15:
                    1311   ; putchar('.') ;
00000F82  4878 002E 1312          pea       46
00000F86  4E93      1313          jsr       (A3)
00000F88  584F      1314          addq.w    #4,A7
00000F8A  6012      1315          bra.s     DumpMemory_14
                    1316   DumpMemory_13:
                    1317   ; else
                    1318   ; putchar(RamPtr[j]) ;
00000F8C  2043      1319          move.l    D3,A0
00000F8E  1230 2800 1320          move.b    0(A0,D2.L),D1
00000F92  C2BC 0000 1321          and.l     #255,D1
00000F96  00FF      
00000F98  2F01      1322          move.l    D1,-(A7)
00000F9A  4E93      1323          jsr       (A3)
00000F9C  584F      1324          addq.w    #4,A7
                    1325   DumpMemory_14:
00000F9E  5282      1326          addq.l    #1,D2
00000FA0  60BE      1327          bra       DumpMemory_10
                    1328   DumpMemory_12:
                    1329   ; }
                    1330   ; RamPtr = RamPtr + 16 ;
00000FA2  0683 0000 1331          add.l     #16,D3
00000FA6  0010      
00000FA8  5285      1332          addq.l    #1,D5
00000FAA  6000 FF64 1333          bra       DumpMemory_4
                    1334   DumpMemory_6:
                    1335   ; }
                    1336   ; printf("\r\n") ;
00000FAE  4879 0000 1337          pea       @m68kde~1_17.L
00000FB2  6044      
00000FB4  4E92      1338          jsr       (A2)
00000FB6  584F      1339          addq.w    #4,A7
                    1340   ; c = _getch() ;
00000FB8  4EB8 0B68 1341          jsr       __getch
00000FBC  1800      1342          move.b    D0,D4
                    1343   ; if(c == 0x1b)          // break on ESC
00000FBE  0C04 001B 1344          cmp.b     #27,D4
00000FC2  6602      1345          bne.s     DumpMemory_16
                    1346   ; break ;
00000FC4  6004      1347          bra.s     DumpMemory_3
                    1348   DumpMemory_16:
00000FC6  6000 FF46 1349          bra       DumpMemory_1
                    1350   DumpMemory_3:
00000FCA  4CDF 0C3C 1351          movem.l   (A7)+,D2/D3/D4/D5/A2/A3
00000FCE  4E75      1352          rts
                    1353   ; }
                    1354   ; }
                    1355   ; void FillMemory()
                    1356   ; {
                    1357   _FillMemory:
00000FD0  48E7 3820 1358          movem.l   D2/D3/D4/A2,-(A7)
00000FD4  45F9 0000 1359          lea       _printf.L,A2
00000FD8  556E      
                    1360   ; char *StartRamPtr, *EndRamPtr ;
                    1361   ; unsigned char FillData ;
                    1362   ; printf("\r\nFill Memory Block") ;
00000FDA  4879 0000 1363          pea       @m68kde~1_18.L
00000FDE  6048      
00000FE0  4E92      1364          jsr       (A2)
00000FE2  584F      1365          addq.w    #4,A7
                    1366   ; printf("\r\nEnter Start Address: ") ;
00000FE4  4879 0000 1367          pea       @m68kde~1_19.L
00000FE8  605C      
00000FEA  4E92      1368          jsr       (A2)
00000FEC  584F      1369          addq.w    #4,A7
                    1370   ; StartRamPtr = Get8HexDigits(0) ;
00000FEE  42A7      1371          clr.l     -(A7)
00000FF0  4EB8 0CA4 1372          jsr       _Get8HexDigits
00000FF4  584F      1373          addq.w    #4,A7
00000FF6  2400      1374          move.l    D0,D2
                    1375   ; printf("\r\nEnter End Address: ") ;
00000FF8  4879 0000 1376          pea       @m68kde~1_20.L
00000FFC  6074      
00000FFE  4E92      1377          jsr       (A2)
00001000  584F      1378          addq.w    #4,A7
                    1379   ; EndRamPtr = Get8HexDigits(0) ;
00001002  42A7      1380          clr.l     -(A7)
00001004  4EB8 0CA4 1381          jsr       _Get8HexDigits
00001008  584F      1382          addq.w    #4,A7
0000100A  2800      1383          move.l    D0,D4
                    1384   ; printf("\r\nEnter Fill Data: ") ;
0000100C  4879 0000 1385          pea       @m68kde~1_21.L
00001010  608A      
00001012  4E92      1386          jsr       (A2)
00001014  584F      1387          addq.w    #4,A7
                    1388   ; FillData = Get2HexDigits(0) ;
00001016  42A7      1389          clr.l     -(A7)
00001018  4EB8 0C04 1390          jsr       _Get2HexDigits
0000101C  584F      1391          addq.w    #4,A7
0000101E  1600      1392          move.b    D0,D3
                    1393   ; printf("\r\nFilling Addresses [$%08X - $%08X] with $%02X", StartRamPtr, EndRamPtr, FillData) ;
00001020  C6BC 0000 1394          and.l     #255,D3
00001024  00FF      
00001026  2F03      1395          move.l    D3,-(A7)
00001028  2F04      1396          move.l    D4,-(A7)
0000102A  2F02      1397          move.l    D2,-(A7)
0000102C  4879 0000 1398          pea       @m68kde~1_22.L
00001030  609E      
00001032  4E92      1399          jsr       (A2)
00001034  DEFC 0010 1400          add.w     #16,A7
                    1401   ; while(StartRamPtr < EndRamPtr)
                    1402   FillMemory_1:
00001038  B484      1403          cmp.l     D4,D2
0000103A  6408      1404          bhs.s     FillMemory_3
                    1405   ; *StartRamPtr++ = FillData ;
0000103C  2042      1406          move.l    D2,A0
0000103E  5282      1407          addq.l    #1,D2
00001040  1083      1408          move.b    D3,(A0)
00001042  60F4      1409          bra       FillMemory_1
                    1410   FillMemory_3:
00001044  4CDF 041C 1411          movem.l   (A7)+,D2/D3/D4/A2
00001048  4E75      1412          rts
                    1413   ; }
                    1414   ; void Load_SRecordFile()
                    1415   ; {
                    1416   _Load_SRecordFile:
0000104A  4E56 FFDC 1417          link      A6,#-36
0000104E  48E7 3F3C 1418          movem.l   D2/D3/D4/D5/D6/D7/A2/A3/A4/A5,-(A7)
00001052  45EE FFFA 1419          lea       -6(A6),A2
00001056  47F8 0C04 1420          lea       _Get2HexDigits.L,A3
0000105A  49F9 0000 1421          lea       _printf.L,A4
0000105E  556E      
                    1422   ; int i, Address, AddressSize, DataByte, NumDataBytesToRead, LoadFailed, FailedAddress, AddressFail, SRecordCount = 0, ByteTotal = 0 ;
00001060  42AE FFEE 1423          clr.l     -18(A6)
00001064  3A7C 0000 1424          move.w    #0,A5
                    1425   ; int result, ByteCount ;
                    1426   ; char c, CheckSum, ReadCheckSum, HeaderType ;
                    1427   ; char *RamPtr ;                          // pointer to Memory where downloaded program will be stored
                    1428   ; LoadFailed = 0 ;                        //assume LOAD operation will pass
00001068  7E00      1429          moveq     #0,D7
                    1430   ; AddressFail = 0 ;
0000106A  42AE FFEA 1431          clr.l     -22(A6)
                    1432   ; Echo = 0 ;                              // don't echo S records during download
0000106E  42B9 0803 1433          clr.l     _Echo.L
00001072  00E0      
                    1434   ; printf("\r\nUse HyperTerminal to Send Text File (.hex)\r\n") ;
00001074  4879 0000 1435          pea       @m68kde~1_23.L
00001078  60CE      
0000107A  4E94      1436          jsr       (A4)
0000107C  584F      1437          addq.w    #4,A7
                    1438   ; while(1)    {
                    1439   Load_SRecordFile_1:
                    1440   ; CheckSum = 0 ;
0000107E  4212      1441          clr.b     (A2)
                    1442   ; do {
                    1443   Load_SRecordFile_4:
                    1444   ; c = toupper(_getch()) ;
00001080  2F00      1445          move.l    D0,-(A7)
00001082  4EB8 0B68 1446          jsr       __getch
00001086  2200      1447          move.l    D0,D1
00001088  201F      1448          move.l    (A7)+,D0
0000108A  2F01      1449          move.l    D1,-(A7)
0000108C  4EB9 0000 1450          jsr       _toupper
00001090  5542      
00001092  584F      1451          addq.w    #4,A7
00001094  1C00      1452          move.b    D0,D6
                    1453   ; if(c == 0x1b )      // if break
00001096  0C06 001B 1454          cmp.b     #27,D6
0000109A  6604      1455          bne.s     Load_SRecordFile_6
                    1456   ; return;
0000109C  6000 0132 1457          bra       Load_SRecordFile_8
                    1458   Load_SRecordFile_6:
000010A0  0C06 0053 1459          cmp.b     #83,D6
000010A4  66DA      1460          bne       Load_SRecordFile_4
                    1461   ; }while(c != (char)('S'));   // wait for S start of header
                    1462   ; HeaderType = _getch() ;
000010A6  4EB8 0B68 1463          jsr       __getch
000010AA  1600      1464          move.b    D0,D3
                    1465   ; if(HeaderType == (char)('0') || HeaderType == (char)('5'))       // ignore s0, s5 records
000010AC  0C03 0030 1466          cmp.b     #48,D3
000010B0  6706      1467          beq.s     Load_SRecordFile_11
000010B2  0C03 0035 1468          cmp.b     #53,D3
000010B6  6604      1469          bne.s     Load_SRecordFile_9
                    1470   Load_SRecordFile_11:
                    1471   ; continue ;
000010B8  6000 00D2 1472          bra       Load_SRecordFile_23
                    1473   Load_SRecordFile_9:
                    1474   ; if(HeaderType >= (char)('7'))
000010BC  0C03 0037 1475          cmp.b     #55,D3
000010C0  6D04      1476          blt.s     Load_SRecordFile_12
                    1477   ; break ;                 // end load on s7,s8,s9 records
000010C2  6000 00CC 1478          bra       Load_SRecordFile_3
                    1479   Load_SRecordFile_12:
                    1480   ; // get the bytecount
                    1481   ; ByteCount = Get2HexDigits(&CheckSum) ;
000010C6  2F0A      1482          move.l    A2,-(A7)
000010C8  4E93      1483          jsr       (A3)
000010CA  584F      1484          addq.w    #4,A7
000010CC  2D40 FFF6 1485          move.l    D0,-10(A6)
                    1486   ; // get the address, 4 digits for s1, 6 digits for s2, and 8 digits for s3 record
                    1487   ; if(HeaderType == (char)('1')) {
000010D0  0C03 0031 1488          cmp.b     #49,D3
000010D4  660E      1489          bne.s     Load_SRecordFile_14
                    1490   ; AddressSize = 2 ;       // 2 byte address
000010D6  7A02      1491          moveq     #2,D5
                    1492   ; Address = Get4HexDigits(&CheckSum);
000010D8  2F0A      1493          move.l    A2,-(A7)
000010DA  4EB8 0C58 1494          jsr       _Get4HexDigits
000010DE  584F      1495          addq.w    #4,A7
000010E0  2800      1496          move.l    D0,D4
000010E2  6020      1497          bra.s     Load_SRecordFile_17
                    1498   Load_SRecordFile_14:
                    1499   ; }
                    1500   ; else if (HeaderType == (char)('2')) {
000010E4  0C03 0032 1501          cmp.b     #50,D3
000010E8  660E      1502          bne.s     Load_SRecordFile_16
                    1503   ; AddressSize = 3 ;       // 3 byte address
000010EA  7A03      1504          moveq     #3,D5
                    1505   ; Address = Get6HexDigits(&CheckSum) ;
000010EC  2F0A      1506          move.l    A2,-(A7)
000010EE  4EB8 0C7E 1507          jsr       _Get6HexDigits
000010F2  584F      1508          addq.w    #4,A7
000010F4  2800      1509          move.l    D0,D4
000010F6  600C      1510          bra.s     Load_SRecordFile_17
                    1511   Load_SRecordFile_16:
                    1512   ; }
                    1513   ; else    {
                    1514   ; AddressSize = 4 ;       // 4 byte address
000010F8  7A04      1515          moveq     #4,D5
                    1516   ; Address = Get8HexDigits(&CheckSum) ;
000010FA  2F0A      1517          move.l    A2,-(A7)
000010FC  4EB8 0CA4 1518          jsr       _Get8HexDigits
00001100  584F      1519          addq.w    #4,A7
00001102  2800      1520          move.l    D0,D4
                    1521   Load_SRecordFile_17:
                    1522   ; }
                    1523   ; RamPtr = (char *)(Address) ;                            // point to download area
00001104  2D44 FFFC 1524          move.l    D4,-4(A6)
                    1525   ; NumDataBytesToRead = ByteCount - AddressSize - 1 ;
00001108  202E FFF6 1526          move.l    -10(A6),D0
0000110C  9085      1527          sub.l     D5,D0
0000110E  5380      1528          subq.l    #1,D0
00001110  2D40 FFE2 1529          move.l    D0,-30(A6)
                    1530   ; for(i = 0; i < NumDataBytesToRead; i ++) {     // read in remaining data bytes (ignore address and checksum at the end
00001114  4282      1531          clr.l     D2
                    1532   Load_SRecordFile_18:
00001116  B4AE FFE2 1533          cmp.l     -30(A6),D2
0000111A  6C1E      1534          bge.s     Load_SRecordFile_20
                    1535   ; DataByte = Get2HexDigits(&CheckSum) ;
0000111C  2F0A      1536          move.l    A2,-(A7)
0000111E  4E93      1537          jsr       (A3)
00001120  584F      1538          addq.w    #4,A7
00001122  2D40 FFDE 1539          move.l    D0,-34(A6)
                    1540   ; *RamPtr++ = DataByte ;                      // store downloaded byte in Ram at specified address
00001126  202E FFDE 1541          move.l    -34(A6),D0
0000112A  206E FFFC 1542          move.l    -4(A6),A0
0000112E  52AE FFFC 1543          addq.l    #1,-4(A6)
00001132  1080      1544          move.b    D0,(A0)
                    1545   ; ByteTotal++;
00001134  524D      1546          addq.w    #1,A5
00001136  5282      1547          addq.l    #1,D2
00001138  60DC      1548          bra       Load_SRecordFile_18
                    1549   Load_SRecordFile_20:
                    1550   ; }
                    1551   ; // checksum is the 1's complement of the sum of all data pairs following the bytecount, i.e. it includes the address and the data itself
                    1552   ; ReadCheckSum = Get2HexDigits(0) ;
0000113A  42A7      1553          clr.l     -(A7)
0000113C  4E93      1554          jsr       (A3)
0000113E  584F      1555          addq.w    #4,A7
00001140  1D40 FFFB 1556          move.b    D0,-5(A6)
                    1557   ; if((~CheckSum&0Xff) != (ReadCheckSum&0Xff))   {
00001144  1012      1558          move.b    (A2),D0
00001146  4600      1559          not.b     D0
00001148  4880      1560          ext.w     D0
0000114A  C07C 00FF 1561          and.w     #255,D0
0000114E  122E FFFB 1562          move.b    -5(A6),D1
00001152  4881      1563          ext.w     D1
00001154  C27C 00FF 1564          and.w     #255,D1
00001158  B041      1565          cmp.w     D1,D0
0000115A  6708      1566          beq.s     Load_SRecordFile_21
                    1567   ; LoadFailed = 1 ;
0000115C  7E01      1568          moveq     #1,D7
                    1569   ; FailedAddress = Address ;
0000115E  2D44 FFE6 1570          move.l    D4,-26(A6)
                    1571   ; break;
00001162  602C      1572          bra.s     Load_SRecordFile_3
                    1573   Load_SRecordFile_21:
                    1574   ; }
                    1575   ; SRecordCount++ ;
00001164  52AE FFEE 1576          addq.l    #1,-18(A6)
                    1577   ; // display feedback on progress
                    1578   ; if(SRecordCount % 25 == 0)
00001168  2F2E FFEE 1579          move.l    -18(A6),-(A7)
0000116C  4878 0019 1580          pea       25
00001170  4EB9 0000 1581          jsr       LDIV
00001174  5394      
00001176  202F 0004 1582          move.l    4(A7),D0
0000117A  504F      1583          addq.w    #8,A7
0000117C  4A80      1584          tst.l     D0
0000117E  660C      1585          bne.s     Load_SRecordFile_23
                    1586   ; putchar('.') ;
00001180  4878 002E 1587          pea       46
00001184  4EB9 0000 1588          jsr       _putch
00001188  5460      
0000118A  584F      1589          addq.w    #4,A7
                    1590   Load_SRecordFile_23:
0000118C  6000 FEF0 1591          bra       Load_SRecordFile_1
                    1592   Load_SRecordFile_3:
                    1593   ; }
                    1594   ; if(LoadFailed == 1) {
00001190  0C87 0000 1595          cmp.l     #1,D7
00001194  0001      
00001196  6610      1596          bne.s     Load_SRecordFile_25
                    1597   ; printf("\r\nLoad Failed at Address = [$%08X]\r\n", FailedAddress) ;
00001198  2F2E FFE6 1598          move.l    -26(A6),-(A7)
0000119C  4879 0000 1599          pea       @m68kde~1_24.L
000011A0  60FE      
000011A2  4E94      1600          jsr       (A4)
000011A4  504F      1601          addq.w    #8,A7
000011A6  600C      1602          bra.s     Load_SRecordFile_26
                    1603   Load_SRecordFile_25:
                    1604   ; }
                    1605   ; else
                    1606   ; printf("\r\nSuccess: Downloaded %d bytes\r\n", ByteTotal) ;
000011A8  2F0D      1607          move.l    A5,-(A7)
000011AA  4879 0000 1608          pea       @m68kde~1_25.L
000011AE  6124      
000011B0  4E94      1609          jsr       (A4)
000011B2  504F      1610          addq.w    #8,A7
                    1611   Load_SRecordFile_26:
                    1612   ; // pause at the end to wait for download to finish transmitting at the end of S8 etc
                    1613   ; for(i = 0; i < 400000; i ++)
000011B4  4282      1614          clr.l     D2
                    1615   Load_SRecordFile_27:
000011B6  0C82 0006 1616          cmp.l     #400000,D2
000011BA  1A80      
000011BC  6C04      1617          bge.s     Load_SRecordFile_29
000011BE  5282      1618          addq.l    #1,D2
000011C0  60F4      1619          bra       Load_SRecordFile_27
                    1620   Load_SRecordFile_29:
                    1621   ; ;
                    1622   ; FlushKeyboard() ;
000011C2  4EB8 0BA6 1623          jsr       _FlushKeyboard
                    1624   ; Echo = 1;
000011C6  23FC 0000 1625          move.l    #1,_Echo.L
000011CA  0001 0803 
000011CE  00E0      
                    1626   Load_SRecordFile_8:
000011D0  4CDF 3CFC 1627          movem.l   (A7)+,D2/D3/D4/D5/D6/D7/A2/A3/A4/A5
000011D4  4E5E      1628          unlk      A6
000011D6  4E75      1629          rts
                    1630   ; }
                    1631   ; void MemoryChange(void)
                    1632   ; {
                    1633   _MemoryChange:
000011D8  48E7 3820 1634          movem.l   D2/D3/D4/A2,-(A7)
000011DC  45F9 0000 1635          lea       _printf.L,A2
000011E0  556E      
                    1636   ; unsigned char *RamPtr,c ; // pointer to memory
                    1637   ; int Data ;
                    1638   ; printf("\r\nExamine and Change Memory") ;
000011E2  4879 0000 1639          pea       @m68kde~1_26.L
000011E6  6146      
000011E8  4E92      1640          jsr       (A2)
000011EA  584F      1641          addq.w    #4,A7
                    1642   ; printf("\r\n<ESC> to Stop, <SPACE> to Advance, '-' to Go Back, <DATA> to change") ;
000011EC  4879 0000 1643          pea       @m68kde~1_27.L
000011F0  6162      
000011F2  4E92      1644          jsr       (A2)
000011F4  584F      1645          addq.w    #4,A7
                    1646   ; printf("\r\nEnter Address: ") ;
000011F6  4879 0000 1647          pea       @m68kde~1_28.L
000011FA  61A8      
000011FC  4E92      1648          jsr       (A2)
000011FE  584F      1649          addq.w    #4,A7
                    1650   ; RamPtr = Get8HexDigits(0) ;
00001200  42A7      1651          clr.l     -(A7)
00001202  4EB8 0CA4 1652          jsr       _Get8HexDigits
00001206  584F      1653          addq.w    #4,A7
00001208  2600      1654          move.l    D0,D3
                    1655   ; while(1)    {
                    1656   MemoryChange_1:
                    1657   ; printf("\r\n[%08x] : %02x  ", RamPtr, *RamPtr) ;
0000120A  2043      1658          move.l    D3,A0
0000120C  1210      1659          move.b    (A0),D1
0000120E  C2BC 0000 1660          and.l     #255,D1
00001212  00FF      
00001214  2F01      1661          move.l    D1,-(A7)
00001216  2F03      1662          move.l    D3,-(A7)
00001218  4879 0000 1663          pea       @m68kde~1_29.L
0000121C  61BA      
0000121E  4E92      1664          jsr       (A2)
00001220  DEFC 000C 1665          add.w     #12,A7
                    1666   ; c = tolower(_getch()) ;
00001224  2F00      1667          move.l    D0,-(A7)
00001226  4EB8 0B68 1668          jsr       __getch
0000122A  2200      1669          move.l    D0,D1
0000122C  201F      1670          move.l    (A7)+,D0
0000122E  2F01      1671          move.l    D1,-(A7)
00001230  4EB9 0000 1672          jsr       _tolower
00001234  54CC      
00001236  584F      1673          addq.w    #4,A7
00001238  1400      1674          move.b    D0,D2
                    1675   ; if(c == (char)(0x1b))
0000123A  0C02 001B 1676          cmp.b     #27,D2
0000123E  6604      1677          bne.s     MemoryChange_4
                    1678   ; return ;                                // abort on escape
00001240  6000 0090 1679          bra       MemoryChange_6
                    1680   MemoryChange_4:
                    1681   ; else if((c >= '0' && c <= '9') || (c >= 'a' && c <= 'f')) {  // are we trying to change data at this location by entering a hex char
00001244  0C02 0030 1682          cmp.b     #48,D2
00001248  6506      1683          blo.s     MemoryChange_10
0000124A  0C02 0039 1684          cmp.b     #57,D2
0000124E  6310      1685          bls.s     MemoryChange_9
                    1686   MemoryChange_10:
00001250  0C02 0061 1687          cmp.b     #97,D2
00001254  6500 006E 1688          blo       MemoryChange_7
00001258  0C02 0066 1689          cmp.b     #102,D2
0000125C  6200 0066 1690          bhi       MemoryChange_7
                    1691   MemoryChange_9:
                    1692   ; Data = (xtod(c) << 4) | (xtod(_getch()));
00001260  C4BC 0000 1693          and.l     #255,D2
00001264  00FF      
00001266  2F02      1694          move.l    D2,-(A7)
00001268  4EB8 0BD2 1695          jsr       _xtod
0000126C  584F      1696          addq.w    #4,A7
0000126E  C0BC 0000 1697          and.l     #255,D0
00001272  00FF      
00001274  E980      1698          asl.l     #4,D0
00001276  2F00      1699          move.l    D0,-(A7)
00001278  2F01      1700          move.l    D1,-(A7)
0000127A  4EB8 0B68 1701          jsr       __getch
0000127E  221F      1702          move.l    (A7)+,D1
00001280  2F00      1703          move.l    D0,-(A7)
00001282  4EB8 0BD2 1704          jsr       _xtod
00001286  584F      1705          addq.w    #4,A7
00001288  2200      1706          move.l    D0,D1
0000128A  201F      1707          move.l    (A7)+,D0
0000128C  C2BC 0000 1708          and.l     #255,D1
00001290  00FF      
00001292  8081      1709          or.l      D1,D0
00001294  2800      1710          move.l    D0,D4
                    1711   ; *RamPtr = (char)(Data) ;
00001296  2043      1712          move.l    D3,A0
00001298  1084      1713          move.b    D4,(A0)
                    1714   ; if(*RamPtr != Data) {
0000129A  2043      1715          move.l    D3,A0
0000129C  1010      1716          move.b    (A0),D0
0000129E  C0BC 0000 1717          and.l     #255,D0
000012A2  00FF      
000012A4  B084      1718          cmp.l     D4,D0
000012A6  671A      1719          beq.s     MemoryChange_11
                    1720   ; printf("\r\nWarning Change Failed: Wrote [%02x], Read [%02x]", Data, *RamPtr) ;
000012A8  2043      1721          move.l    D3,A0
000012AA  1210      1722          move.b    (A0),D1
000012AC  C2BC 0000 1723          and.l     #255,D1
000012B0  00FF      
000012B2  2F01      1724          move.l    D1,-(A7)
000012B4  2F04      1725          move.l    D4,-(A7)
000012B6  4879 0000 1726          pea       @m68kde~1_30.L
000012BA  61CC      
000012BC  4E92      1727          jsr       (A2)
000012BE  DEFC 000C 1728          add.w     #12,A7
                    1729   MemoryChange_11:
000012C2  6008      1730          bra.s     MemoryChange_13
                    1731   MemoryChange_7:
                    1732   ; }
                    1733   ; }
                    1734   ; else if(c == (char)('-'))
000012C4  0C02 002D 1735          cmp.b     #45,D2
000012C8  6602      1736          bne.s     MemoryChange_13
                    1737   ; RamPtr -= 2 ; ;
000012CA  5583      1738          subq.l    #2,D3
                    1739   MemoryChange_13:
                    1740   ; RamPtr ++ ;
000012CC  5283      1741          addq.l    #1,D3
000012CE  6000 FF3A 1742          bra       MemoryChange_1
                    1743   MemoryChange_6:
000012D2  4CDF 041C 1744          movem.l   (A7)+,D2/D3/D4/A2
000012D6  4E75      1745          rts
                    1746   ; }
                    1747   ; }
                    1748   ; /*******************************************************************
                    1749   ; ** Write a program to SPI Flash Chip from memory and verify by reading back
                    1750   ; ********************************************************************/
                    1751   ; void ProgramFlashChip(void)
                    1752   ; {
                    1753   _ProgramFlashChip:
000012D8  4E75      1754          rts
                    1755   ; //
                    1756   ; // TODO : put your code here to program the 1st 256k of ram (where user program is held at hex 08000000) to SPI flash chip
                    1757   ; // TODO : then verify by reading it back and comparing to memory
                    1758   ; //
                    1759   ; }
                    1760   ; /*************************************************************************
                    1761   ; ** Load a program from SPI Flash Chip and copy to Dram
                    1762   ; **************************************************************************/
                    1763   ; void LoadFromFlashChip(void)
                    1764   ; {
                    1765   _LoadFromFlashChip:
                    1766   ; printf("\r\nLoading Program From SPI Flash....") ;
000012DA  4879 0000 1767          pea       @m68kde~1_31.L
000012DE  6200      
000012E0  4EB9 0000 1768          jsr       _printf
000012E4  556E      
000012E6  584F      1769          addq.w    #4,A7
000012E8  4E75      1770          rts
                    1771   ; //
                    1772   ; // TODO : put your code here to read 256k of data from SPI flash chip and store in user ram starting at hex 08000000
                    1773   ; //
                    1774   ; }
                    1775   ; // get rid of excess spaces
                    1776   ; void FormatInstructionForTrace(void)
                    1777   ; {
                    1778   _FormatInstructionForTrace:
000012EA  4E56 FF9C 1779          link      A6,#-100
000012EE  48E7 3C20 1780          movem.l   D2/D3/D4/D5/A2,-(A7)
000012F2  45EE FF9C 1781          lea       -100(A6),A2
                    1782   ; unsigned short int i ;
                    1783   ; char c, temp[100], *iptr, *tempptr ;
                    1784   ; for(i=0; i < 100; i++)
000012F6  4244      1785          clr.w     D4
                    1786   FormatInstructionForTrace_1:
000012F8  0C44 0064 1787          cmp.w     #100,D4
000012FC  640E      1788          bhs.s     FormatInstructionForTrace_3
                    1789   ; temp[i] = 0 ;
000012FE  C8BC 0000 1790          and.l     #65535,D4
00001302  FFFF      
00001304  4232 4800 1791          clr.b     0(A2,D4.L)
00001308  5244      1792          addq.w    #1,D4
0000130A  60EC      1793          bra       FormatInstructionForTrace_1
                    1794   FormatInstructionForTrace_3:
                    1795   ; iptr = Instruction ;
0000130C  41F9 0803 1796          lea       _Instruction.L,A0
00001310  04E2      
00001312  2408      1797          move.l    A0,D2
                    1798   ; tempptr = temp ;
00001314  2A0A      1799          move.l    A2,D5
                    1800   ; do{
                    1801   FormatInstructionForTrace_4:
                    1802   ; c = *iptr++ ;
00001316  2042      1803          move.l    D2,A0
00001318  5282      1804          addq.l    #1,D2
0000131A  1610      1805          move.b    (A0),D3
                    1806   ; *tempptr++ = c ;  // copy chars over
0000131C  2045      1807          move.l    D5,A0
0000131E  5285      1808          addq.l    #1,D5
00001320  1083      1809          move.b    D3,(A0)
                    1810   ; if(c == ' ')  {   // if copied space
00001322  0C03 0020 1811          cmp.b     #32,D3
00001326  6622      1812          bne.s     FormatInstructionForTrace_6
                    1813   ; while(*iptr == ' ') {
                    1814   FormatInstructionForTrace_8:
00001328  2042      1815          move.l    D2,A0
0000132A  1010      1816          move.b    (A0),D0
0000132C  0C00 0020 1817          cmp.b     #32,D0
00001330  660C      1818          bne.s     FormatInstructionForTrace_10
                    1819   ; if(*iptr == 0)  // if end of string then done
00001332  2042      1820          move.l    D2,A0
00001334  1010      1821          move.b    (A0),D0
00001336  6602      1822          bne.s     FormatInstructionForTrace_11
                    1823   ; break ;
00001338  6004      1824          bra.s     FormatInstructionForTrace_10
                    1825   FormatInstructionForTrace_11:
                    1826   ; iptr++ ; // skip over remaining spaces
0000133A  5282      1827          addq.l    #1,D2
0000133C  60EA      1828          bra       FormatInstructionForTrace_8
                    1829   FormatInstructionForTrace_10:
                    1830   ; }
                    1831   ; strcat(tempptr,iptr) ;
0000133E  2F02      1832          move.l    D2,-(A7)
00001340  2F05      1833          move.l    D5,-(A7)
00001342  4EB9 0000 1834          jsr       _strcat
00001346  552C      
00001348  504F      1835          addq.w    #8,A7
                    1836   FormatInstructionForTrace_6:
0000134A  4A03      1837          tst.b     D3
0000134C  66C8      1838          bne       FormatInstructionForTrace_4
                    1839   ; }
                    1840   ; }while(c != 0) ;
                    1841   ; strcpyInstruction(temp) ;
0000134E  2F0A      1842          move.l    A2,-(A7)
00001350  4EB8 0CE6 1843          jsr       _strcpyInstruction
00001354  584F      1844          addq.w    #4,A7
00001356  4CDF 043C 1845          movem.l   (A7)+,D2/D3/D4/D5/A2
0000135A  4E5E      1846          unlk      A6
0000135C  4E75      1847          rts
                    1848   ; }
                    1849   ; //////////////////////////////////////////////////////////////////////////////////////////////////
                    1850   ; // IMPORTANT
                    1851   ; // TG68 does not support the Native Trace mode of the original 68000 so tracing
                    1852   ; // has to be done with an interrupt (IRQ Level 6)
                    1853   ; //
                    1854   ; // To allow the 68000 to execute one more instruction after each pseudo trace (IRQ6)
                    1855   ; // the IRQ is removed in hardware once the TG68 reads the IRQ autovector (i.e. acknowledges the IRQ)
                    1856   ; //
                    1857   ; // on return from the IRQ service handler, the first access to the user memory program space
                    1858   ; // generates a fresh IRQ (in hardware) to generate a new trace, this allows the tg68 to
                    1859   ; // execute one more new instruction (without it the TG68 would trace on the same instruction
                    1860   ; // each time and not after the next one). It also means it doesn't simgle step outside the user
                    1861   ; // program area
                    1862   ; //
                    1863   ; // The bottom line is the Trace handler, which includes the Dump registers below
                    1864   ; // cannot access the user memory to display for example the Instruction Opcode or to disassemble etc
                    1865   ; // as this would lead to a new IRQ being reset and the TG68 would trace on same instruction
                    1866   ; // NOT SURE THIS IS TRUE NOW THAT TRACE HANDLER HAS BEEN MODIVIED TO NOT AUTOMATICALLY GENERATE A TRACE EXCEPTION
                    1867   ; // INSTEAD IT IS DONE IN THE 'N' COMMAND FOR NEXT
                    1868   ; /////////////////////////////////////////////////////////////////////////////////////////////////////
                    1869   ; void DumpRegisters()
                    1870   ; {
                    1871   _DumpRegisters:
0000135E  48E7 3F3C 1872          movem.l   D2/D3/D4/D5/D6/D7/A2/A3/A4/A5,-(A7)
00001362  45F9 0000 1873          lea       _putch.L,A2
00001366  5460      
00001368  47F9 0000 1874          lea       _printf.L,A3
0000136C  556E      
0000136E  49F9 0803 1875          lea       _SR.L,A4
00001372  012C      
00001374  4BF9 0803 1876          lea       _WatchPointString.L,A5
00001378  01C2      
                    1877   ; short i, x, j, k ;
                    1878   ; unsigned char c, *BytePointer;
                    1879   ; // buld up strings for displaying watchpoints
                    1880   ; for(x = 0; x < (short)(8); x++)
0000137A  4242      1881          clr.w     D2
                    1882   DumpRegisters_1:
0000137C  0C42 0008 1883          cmp.w     #8,D2
00001380  6C00 01C6 1884          bge       DumpRegisters_3
                    1885   ; {
                    1886   ; if(WatchPointSetOrCleared[x] == 1)
00001384  48C2      1887          ext.l     D2
00001386  2002      1888          move.l    D2,D0
00001388  E588      1889          lsl.l     #2,D0
0000138A  41F9 0803 1890          lea       _WatchPointSetOrCleared.L,A0
0000138E  01A2      
00001390  2030 0800 1891          move.l    0(A0,D0.L),D0
00001394  0C80 0000 1892          cmp.l     #1,D0
00001398  0001      
0000139A  6600 0186 1893          bne       DumpRegisters_4
                    1894   ; {
                    1895   ; sprintf(WatchPointString[x], "$%08X  ", WatchPointAddress[x]) ;
0000139E  48C2      1896          ext.l     D2
000013A0  2202      1897          move.l    D2,D1
000013A2  E589      1898          lsl.l     #2,D1
000013A4  41F9 0803 1899          lea       _WatchPointAddress.L,A0
000013A8  0182      
000013AA  2F30 1800 1900          move.l    0(A0,D1.L),-(A7)
000013AE  4879 0000 1901          pea       @m68kde~1_32.L
000013B2  6226      
000013B4  220D      1902          move.l    A5,D1
000013B6  48C2      1903          ext.l     D2
000013B8  2F00      1904          move.l    D0,-(A7)
000013BA  2002      1905          move.l    D2,D0
000013BC  C1FC 0064 1906          muls      #100,D0
000013C0  D280      1907          add.l     D0,D1
000013C2  201F      1908          move.l    (A7)+,D0
000013C4  2F01      1909          move.l    D1,-(A7)
000013C6  4EB9 0000 1910          jsr       _sprintf
000013CA  54F8      
000013CC  DEFC 000C 1911          add.w     #12,A7
                    1912   ; BytePointer = (char *)(WatchPointAddress[x]) ;
000013D0  48C2      1913          ext.l     D2
000013D2  2002      1914          move.l    D2,D0
000013D4  E588      1915          lsl.l     #2,D0
000013D6  41F9 0803 1916          lea       _WatchPointAddress.L,A0
000013DA  0182      
000013DC  2A30 0800 1917          move.l    0(A0,D0.L),D5
                    1918   ; for(j = 0; j < (short)(16); j+=2)
000013E0  4243      1919          clr.w     D3
                    1920   DumpRegisters_6:
000013E2  0C43 0010 1921          cmp.w     #16,D3
000013E6  6C00 0082 1922          bge       DumpRegisters_8
                    1923   ; {
                    1924   ; for(k = 0; k < (short)(2); k++)
000013EA  4246      1925          clr.w     D6
                    1926   DumpRegisters_9:
000013EC  0C46 0002 1927          cmp.w     #2,D6
000013F0  6C00 0052 1928          bge       DumpRegisters_11
                    1929   ; {
                    1930   ; sprintf(TempString, "%02X", BytePointer[j+k]) ;
000013F4  2045      1931          move.l    D5,A0
000013F6  48C3      1932          ext.l     D3
000013F8  2203      1933          move.l    D3,D1
000013FA  48C6      1934          ext.l     D6
000013FC  D286      1935          add.l     D6,D1
000013FE  1230 1800 1936          move.b    0(A0,D1.L),D1
00001402  C2BC 0000 1937          and.l     #255,D1
00001406  00FF      
00001408  2F01      1938          move.l    D1,-(A7)
0000140A  4879 0000 1939          pea       @m68kde~1_33.L
0000140E  622E      
00001410  4879 0803 1940          pea       _TempString.L
00001414  0546      
00001416  4EB9 0000 1941          jsr       _sprintf
0000141A  54F8      
0000141C  DEFC 000C 1942          add.w     #12,A7
                    1943   ; strcat(WatchPointString[x], TempString) ;
00001420  4879 0803 1944          pea       _TempString.L
00001424  0546      
00001426  220D      1945          move.l    A5,D1
00001428  48C2      1946          ext.l     D2
0000142A  2F00      1947          move.l    D0,-(A7)
0000142C  2002      1948          move.l    D2,D0
0000142E  C1FC 0064 1949          muls      #100,D0
00001432  D280      1950          add.l     D0,D1
00001434  201F      1951          move.l    (A7)+,D0
00001436  2F01      1952          move.l    D1,-(A7)
00001438  4EB9 0000 1953          jsr       _strcat
0000143C  552C      
0000143E  504F      1954          addq.w    #8,A7
00001440  5246      1955          addq.w    #1,D6
00001442  60A8      1956          bra       DumpRegisters_9
                    1957   DumpRegisters_11:
                    1958   ; }
                    1959   ; strcat(WatchPointString[x]," ") ;
00001444  4879 0000 1960          pea       @m68kde~1_34.L
00001448  6234      
0000144A  220D      1961          move.l    A5,D1
0000144C  48C2      1962          ext.l     D2
0000144E  2F00      1963          move.l    D0,-(A7)
00001450  2002      1964          move.l    D2,D0
00001452  C1FC 0064 1965          muls      #100,D0
00001456  D280      1966          add.l     D0,D1
00001458  201F      1967          move.l    (A7)+,D0
0000145A  2F01      1968          move.l    D1,-(A7)
0000145C  4EB9 0000 1969          jsr       _strcat
00001460  552C      
00001462  504F      1970          addq.w    #8,A7
00001464  5443      1971          addq.w    #2,D3
00001466  6000 FF7A 1972          bra       DumpRegisters_6
                    1973   DumpRegisters_8:
                    1974   ; }
                    1975   ; strcat(WatchPointString[x], "  ") ;
0000146A  4879 0000 1976          pea       @m68kde~1_35.L
0000146E  6236      
00001470  220D      1977          move.l    A5,D1
00001472  48C2      1978          ext.l     D2
00001474  2F00      1979          move.l    D0,-(A7)
00001476  2002      1980          move.l    D2,D0
00001478  C1FC 0064 1981          muls      #100,D0
0000147C  D280      1982          add.l     D0,D1
0000147E  201F      1983          move.l    (A7)+,D0
00001480  2F01      1984          move.l    D1,-(A7)
00001482  4EB9 0000 1985          jsr       _strcat
00001486  552C      
00001488  504F      1986          addq.w    #8,A7
                    1987   ; BytePointer = (char *)(WatchPointAddress[x]) ;
0000148A  48C2      1988          ext.l     D2
0000148C  2002      1989          move.l    D2,D0
0000148E  E588      1990          lsl.l     #2,D0
00001490  41F9 0803 1991          lea       _WatchPointAddress.L,A0
00001494  0182      
00001496  2A30 0800 1992          move.l    0(A0,D0.L),D5
                    1993   ; for(j = 0; j < (short)(16); j++)
0000149A  4243      1994          clr.w     D3
                    1995   DumpRegisters_12:
0000149C  0C43 0010 1996          cmp.w     #16,D3
000014A0  6C00 007E 1997          bge       DumpRegisters_14
                    1998   ; {
                    1999   ; c = ((char)(BytePointer[j]) & 0x7f) ;
000014A4  2045      2000          move.l    D5,A0
000014A6  48C3      2001          ext.l     D3
000014A8  1030 3800 2002          move.b    0(A0,D3.L),D0
000014AC  C03C 007F 2003          and.b     #127,D0
000014B0  1E00      2004          move.b    D0,D7
                    2005   ; if((c > (char)(0x7f)) || (c < (char)(' ')))
000014B2  0C07 007F 2006          cmp.b     #127,D7
000014B6  6206      2007          bhi.s     DumpRegisters_17
000014B8  0C07 0020 2008          cmp.b     #32,D7
000014BC  6416      2009          bhs.s     DumpRegisters_15
                    2010   DumpRegisters_17:
                    2011   ; sprintf(TempString, ".") ;
000014BE  4879 0000 2012          pea       @m68kde~1_36.L
000014C2  623A      
000014C4  4879 0803 2013          pea       _TempString.L
000014C8  0546      
000014CA  4EB9 0000 2014          jsr       _sprintf
000014CE  54F8      
000014D0  504F      2015          addq.w    #8,A7
000014D2  6026      2016          bra.s     DumpRegisters_16
                    2017   DumpRegisters_15:
                    2018   ; else
                    2019   ; sprintf(TempString, "%c", BytePointer[j]) ;
000014D4  2045      2020          move.l    D5,A0
000014D6  48C3      2021          ext.l     D3
000014D8  1230 3800 2022          move.b    0(A0,D3.L),D1
000014DC  C2BC 0000 2023          and.l     #255,D1
000014E0  00FF      
000014E2  2F01      2024          move.l    D1,-(A7)
000014E4  4879 0000 2025          pea       @m68kde~1_37.L
000014E8  623C      
000014EA  4879 0803 2026          pea       _TempString.L
000014EE  0546      
000014F0  4EB9 0000 2027          jsr       _sprintf
000014F4  54F8      
000014F6  DEFC 000C 2028          add.w     #12,A7
                    2029   DumpRegisters_16:
                    2030   ; strcat(WatchPointString[x], TempString) ;
000014FA  4879 0803 2031          pea       _TempString.L
000014FE  0546      
00001500  220D      2032          move.l    A5,D1
00001502  48C2      2033          ext.l     D2
00001504  2F00      2034          move.l    D0,-(A7)
00001506  2002      2035          move.l    D2,D0
00001508  C1FC 0064 2036          muls      #100,D0
0000150C  D280      2037          add.l     D0,D1
0000150E  201F      2038          move.l    (A7)+,D0
00001510  2F01      2039          move.l    D1,-(A7)
00001512  4EB9 0000 2040          jsr       _strcat
00001516  552C      
00001518  504F      2041          addq.w    #8,A7
0000151A  5243      2042          addq.w    #1,D3
0000151C  6000 FF7E 2043          bra       DumpRegisters_12
                    2044   DumpRegisters_14:
00001520  6020      2045          bra.s     DumpRegisters_5
                    2046   DumpRegisters_4:
                    2047   ; }
                    2048   ; }
                    2049   ; else
                    2050   ; strcpy(WatchPointString[x], "") ;
00001522  4879 0000 2051          pea       @m68kde~1_38.L
00001526  6240      
00001528  220D      2052          move.l    A5,D1
0000152A  48C2      2053          ext.l     D2
0000152C  2F00      2054          move.l    D0,-(A7)
0000152E  2002      2055          move.l    D2,D0
00001530  C1FC 0064 2056          muls      #100,D0
00001534  D280      2057          add.l     D0,D1
00001536  201F      2058          move.l    (A7)+,D0
00001538  2F01      2059          move.l    D1,-(A7)
0000153A  4EB9 0000 2060          jsr       _strcpy
0000153E  5372      
00001540  504F      2061          addq.w    #8,A7
                    2062   DumpRegisters_5:
00001542  5242      2063          addq.w    #1,D2
00001544  6000 FE36 2064          bra       DumpRegisters_1
                    2065   DumpRegisters_3:
                    2066   ; }
                    2067   ; printf("\r\n\r\n D0 = $%08X  A0 = $%08X",d0,a0) ;
00001548  2F39 0803 2068          move.l    _a0.L,-(A7)
0000154C  0104      
0000154E  2F39 0803 2069          move.l    _d0.L,-(A7)
00001552  00E4      
00001554  4879 0000 2070          pea       @m68kde~1_39.L
00001558  6242      
0000155A  4E93      2071          jsr       (A3)
0000155C  DEFC 000C 2072          add.w     #12,A7
                    2073   ; printf("\r\n D1 = $%08X  A1 = $%08X",d1,a1) ;
00001560  2F39 0803 2074          move.l    _a1.L,-(A7)
00001564  0108      
00001566  2F39 0803 2075          move.l    _d1.L,-(A7)
0000156A  00E8      
0000156C  4879 0000 2076          pea       @m68kde~1_40.L
00001570  625E      
00001572  4E93      2077          jsr       (A3)
00001574  DEFC 000C 2078          add.w     #12,A7
                    2079   ; printf("\r\n D2 = $%08X  A2 = $%08X",d2,a2) ;
00001578  2F39 0803 2080          move.l    _a2.L,-(A7)
0000157C  010C      
0000157E  2F39 0803 2081          move.l    _d2.L,-(A7)
00001582  00EC      
00001584  4879 0000 2082          pea       @m68kde~1_41.L
00001588  6278      
0000158A  4E93      2083          jsr       (A3)
0000158C  DEFC 000C 2084          add.w     #12,A7
                    2085   ; printf("\r\n D3 = $%08X  A3 = $%08X",d3,a3) ;
00001590  2F39 0803 2086          move.l    _a3.L,-(A7)
00001594  0110      
00001596  2F39 0803 2087          move.l    _d3.L,-(A7)
0000159A  00F0      
0000159C  4879 0000 2088          pea       @m68kde~1_42.L
000015A0  6292      
000015A2  4E93      2089          jsr       (A3)
000015A4  DEFC 000C 2090          add.w     #12,A7
                    2091   ; printf("\r\n D4 = $%08X  A4 = $%08X",d4,a4) ;
000015A8  2F39 0803 2092          move.l    _a4.L,-(A7)
000015AC  0114      
000015AE  2F39 0803 2093          move.l    _d4.L,-(A7)
000015B2  00F4      
000015B4  4879 0000 2094          pea       @m68kde~1_43.L
000015B8  62AC      
000015BA  4E93      2095          jsr       (A3)
000015BC  DEFC 000C 2096          add.w     #12,A7
                    2097   ; printf("\r\n D5 = $%08X  A5 = $%08X",d5,a5) ;
000015C0  2F39 0803 2098          move.l    _a5.L,-(A7)
000015C4  0118      
000015C6  2F39 0803 2099          move.l    _d5.L,-(A7)
000015CA  00F8      
000015CC  4879 0000 2100          pea       @m68kde~1_44.L
000015D0  62C6      
000015D2  4E93      2101          jsr       (A3)
000015D4  DEFC 000C 2102          add.w     #12,A7
                    2103   ; printf("\r\n D6 = $%08X  A6 = $%08X",d6,a6) ;
000015D8  2F39 0803 2104          move.l    _a6.L,-(A7)
000015DC  011C      
000015DE  2F39 0803 2105          move.l    _d6.L,-(A7)
000015E2  00FC      
000015E4  4879 0000 2106          pea       @m68kde~1_45.L
000015E8  62E0      
000015EA  4E93      2107          jsr       (A3)
000015EC  DEFC 000C 2108          add.w     #12,A7
                    2109   ; printf("\r\n D7 = $%08X  A7 = $%08X",d7,((SR & (unsigned short int)(0x2000)) == ((unsigned short int)(0x2000))) ? SSP : USP) ;
000015F0  3214      2110          move.w    (A4),D1
000015F2  C27C 2000 2111          and.w     #8192,D1
000015F6  0C41 2000 2112          cmp.w     #8192,D1
000015FA  6608      2113          bne.s     DumpRegisters_18
000015FC  2239 0803 2114          move.l    _SSP.L,D1
00001600  0124      
00001602  6006      2115          bra.s     DumpRegisters_19
                    2116   DumpRegisters_18:
00001604  2239 0803 2117          move.l    _USP.L,D1
00001608  0128      
                    2118   DumpRegisters_19:
0000160A  2F01      2119          move.l    D1,-(A7)
0000160C  2F39 0803 2120          move.l    _d7.L,-(A7)
00001610  0100      
00001612  4879 0000 2121          pea       @m68kde~1_46.L
00001616  62FA      
00001618  4E93      2122          jsr       (A3)
0000161A  DEFC 000C 2123          add.w     #12,A7
                    2124   ; printf("\r\n\r\nUSP = $%08X  (A7) User SP", USP ) ;
0000161E  2F39 0803 2125          move.l    _USP.L,-(A7)
00001622  0128      
00001624  4879 0000 2126          pea       @m68kde~1_47.L
00001628  6314      
0000162A  4E93      2127          jsr       (A3)
0000162C  504F      2128          addq.w    #8,A7
                    2129   ; printf("\r\nSSP = $%08X  (A7) Supervisor SP", SSP) ;
0000162E  2F39 0803 2130          move.l    _SSP.L,-(A7)
00001632  0124      
00001634  4879 0000 2131          pea       @m68kde~1_48.L
00001638  6332      
0000163A  4E93      2132          jsr       (A3)
0000163C  504F      2133          addq.w    #8,A7
                    2134   ; printf("\r\n SR = $%04X   ",SR) ;
0000163E  3214      2135          move.w    (A4),D1
00001640  C2BC 0000 2136          and.l     #65535,D1
00001644  FFFF      
00001646  2F01      2137          move.l    D1,-(A7)
00001648  4879 0000 2138          pea       @m68kde~1_49.L
0000164C  6354      
0000164E  4E93      2139          jsr       (A3)
00001650  504F      2140          addq.w    #8,A7
                    2141   ; // display the status word in characters etc.
                    2142   ; printf("   [") ;
00001652  4879 0000 2143          pea       @m68kde~1_50.L
00001656  6366      
00001658  4E93      2144          jsr       (A3)
0000165A  584F      2145          addq.w    #4,A7
                    2146   ; if((SR & (unsigned short int)(0x8000)) == (unsigned short int)(0x8000)) putchar('T') ; else putchar('-') ;      // Trace bit(bit 15)
0000165C  3014      2147          move.w    (A4),D0
0000165E  C07C 8000 2148          and.w     #32768,D0
00001662  0C40 8000 2149          cmp.w     #32768,D0
00001666  660A      2150          bne.s     DumpRegisters_20
00001668  4878 0054 2151          pea       84
0000166C  4E92      2152          jsr       (A2)
0000166E  584F      2153          addq.w    #4,A7
00001670  6008      2154          bra.s     DumpRegisters_21
                    2155   DumpRegisters_20:
00001672  4878 002D 2156          pea       45
00001676  4E92      2157          jsr       (A2)
00001678  584F      2158          addq.w    #4,A7
                    2159   DumpRegisters_21:
                    2160   ; if((SR & (unsigned short int)(0x2000)) == (unsigned short int)(0x2000)) putchar('S') ; else putchar('U') ;      // supervisor bit  (bit 13)
0000167A  3014      2161          move.w    (A4),D0
0000167C  C07C 2000 2162          and.w     #8192,D0
00001680  0C40 2000 2163          cmp.w     #8192,D0
00001684  660A      2164          bne.s     DumpRegisters_22
00001686  4878 0053 2165          pea       83
0000168A  4E92      2166          jsr       (A2)
0000168C  584F      2167          addq.w    #4,A7
0000168E  6008      2168          bra.s     DumpRegisters_23
                    2169   DumpRegisters_22:
00001690  4878 0055 2170          pea       85
00001694  4E92      2171          jsr       (A2)
00001696  584F      2172          addq.w    #4,A7
                    2173   DumpRegisters_23:
                    2174   ; if((SR & (unsigned short int)(0x0400)) == (unsigned short int)(0x0400)) putchar('1') ; else putchar('0') ;      // IRQ2 Bit (bit 10)
00001698  3014      2175          move.w    (A4),D0
0000169A  C07C 0400 2176          and.w     #1024,D0
0000169E  0C40 0400 2177          cmp.w     #1024,D0
000016A2  660A      2178          bne.s     DumpRegisters_24
000016A4  4878 0031 2179          pea       49
000016A8  4E92      2180          jsr       (A2)
000016AA  584F      2181          addq.w    #4,A7
000016AC  6008      2182          bra.s     DumpRegisters_25
                    2183   DumpRegisters_24:
000016AE  4878 0030 2184          pea       48
000016B2  4E92      2185          jsr       (A2)
000016B4  584F      2186          addq.w    #4,A7
                    2187   DumpRegisters_25:
                    2188   ; if((SR & (unsigned short int)(0x0200)) == (unsigned short int)(0x0200)) putchar('1') ; else putchar('0') ;      // IRQ1 Bit (bit 9)
000016B6  3014      2189          move.w    (A4),D0
000016B8  C07C 0200 2190          and.w     #512,D0
000016BC  0C40 0200 2191          cmp.w     #512,D0
000016C0  660A      2192          bne.s     DumpRegisters_26
000016C2  4878 0031 2193          pea       49
000016C6  4E92      2194          jsr       (A2)
000016C8  584F      2195          addq.w    #4,A7
000016CA  6008      2196          bra.s     DumpRegisters_27
                    2197   DumpRegisters_26:
000016CC  4878 0030 2198          pea       48
000016D0  4E92      2199          jsr       (A2)
000016D2  584F      2200          addq.w    #4,A7
                    2201   DumpRegisters_27:
                    2202   ; if((SR & (unsigned short int)(0x0100)) == (unsigned short int)(0x0100)) putchar('1') ; else putchar('0') ;      // IRQ0 Bit (bit 8)
000016D4  3014      2203          move.w    (A4),D0
000016D6  C07C 0100 2204          and.w     #256,D0
000016DA  0C40 0100 2205          cmp.w     #256,D0
000016DE  660A      2206          bne.s     DumpRegisters_28
000016E0  4878 0031 2207          pea       49
000016E4  4E92      2208          jsr       (A2)
000016E6  584F      2209          addq.w    #4,A7
000016E8  6008      2210          bra.s     DumpRegisters_29
                    2211   DumpRegisters_28:
000016EA  4878 0030 2212          pea       48
000016EE  4E92      2213          jsr       (A2)
000016F0  584F      2214          addq.w    #4,A7
                    2215   DumpRegisters_29:
                    2216   ; if((SR & (unsigned short int)(0x0010)) == (unsigned short int)(0x0010)) putchar('X') ; else putchar('-') ;      // X Bit (bit 4)
000016F2  3014      2217          move.w    (A4),D0
000016F4  C07C 0010 2218          and.w     #16,D0
000016F8  0C40 0010 2219          cmp.w     #16,D0
000016FC  660A      2220          bne.s     DumpRegisters_30
000016FE  4878 0058 2221          pea       88
00001702  4E92      2222          jsr       (A2)
00001704  584F      2223          addq.w    #4,A7
00001706  6008      2224          bra.s     DumpRegisters_31
                    2225   DumpRegisters_30:
00001708  4878 002D 2226          pea       45
0000170C  4E92      2227          jsr       (A2)
0000170E  584F      2228          addq.w    #4,A7
                    2229   DumpRegisters_31:
                    2230   ; if((SR & (unsigned short int)(0x0008)) == (unsigned short int)(0x0008)) putchar('N') ; else putchar('-') ;      // N Bit (bit 3)
00001710  3014      2231          move.w    (A4),D0
00001712  C07C 0008 2232          and.w     #8,D0
00001716  0C40 0008 2233          cmp.w     #8,D0
0000171A  660A      2234          bne.s     DumpRegisters_32
0000171C  4878 004E 2235          pea       78
00001720  4E92      2236          jsr       (A2)
00001722  584F      2237          addq.w    #4,A7
00001724  6008      2238          bra.s     DumpRegisters_33
                    2239   DumpRegisters_32:
00001726  4878 002D 2240          pea       45
0000172A  4E92      2241          jsr       (A2)
0000172C  584F      2242          addq.w    #4,A7
                    2243   DumpRegisters_33:
                    2244   ; if((SR & (unsigned short int)(0x0004)) == (unsigned short int)(0x0004)) putchar('Z') ; else putchar('-') ;      // Z Bit (bit 2)
0000172E  3014      2245          move.w    (A4),D0
00001730  C07C 0004 2246          and.w     #4,D0
00001734  0C40 0004 2247          cmp.w     #4,D0
00001738  660A      2248          bne.s     DumpRegisters_34
0000173A  4878 005A 2249          pea       90
0000173E  4E92      2250          jsr       (A2)
00001740  584F      2251          addq.w    #4,A7
00001742  6008      2252          bra.s     DumpRegisters_35
                    2253   DumpRegisters_34:
00001744  4878 002D 2254          pea       45
00001748  4E92      2255          jsr       (A2)
0000174A  584F      2256          addq.w    #4,A7
                    2257   DumpRegisters_35:
                    2258   ; if((SR & (unsigned short int)(0x0002)) == (unsigned short int)(0x0002)) putchar('V') ; else putchar('-') ;      // V Bit (bit 1)
0000174C  3014      2259          move.w    (A4),D0
0000174E  C07C 0002 2260          and.w     #2,D0
00001752  0C40 0002 2261          cmp.w     #2,D0
00001756  660A      2262          bne.s     DumpRegisters_36
00001758  4878 0056 2263          pea       86
0000175C  4E92      2264          jsr       (A2)
0000175E  584F      2265          addq.w    #4,A7
00001760  6008      2266          bra.s     DumpRegisters_37
                    2267   DumpRegisters_36:
00001762  4878 002D 2268          pea       45
00001766  4E92      2269          jsr       (A2)
00001768  584F      2270          addq.w    #4,A7
                    2271   DumpRegisters_37:
                    2272   ; if((SR & (unsigned short int)(0x0001)) == (unsigned short int)(0x0001)) putchar('C') ; else putchar('-') ;      // C Bit (bit 0)
0000176A  3014      2273          move.w    (A4),D0
0000176C  C07C 0001 2274          and.w     #1,D0
00001770  0C40 0001 2275          cmp.w     #1,D0
00001774  660A      2276          bne.s     DumpRegisters_38
00001776  4878 0043 2277          pea       67
0000177A  4E92      2278          jsr       (A2)
0000177C  584F      2279          addq.w    #4,A7
0000177E  6008      2280          bra.s     DumpRegisters_39
                    2281   DumpRegisters_38:
00001780  4878 002D 2282          pea       45
00001784  4E92      2283          jsr       (A2)
00001786  584F      2284          addq.w    #4,A7
                    2285   DumpRegisters_39:
                    2286   ; putchar(']') ;
00001788  4878 005D 2287          pea       93
0000178C  4E92      2288          jsr       (A2)
0000178E  584F      2289          addq.w    #4,A7
                    2290   ; printf("\r\n PC = $%08X  ", PC) ;
00001790  2F39 0803 2291          move.l    _PC.L,-(A7)
00001794  0120      
00001796  4879 0000 2292          pea       @m68kde~1_51.L
0000179A  636C      
0000179C  4E93      2293          jsr       (A3)
0000179E  504F      2294          addq.w    #8,A7
                    2295   ; if(*(unsigned short int *)(PC) != 0x4e4e)   {
000017A0  2039 0803 2296          move.l    _PC.L,D0
000017A4  0120      
000017A6  2040      2297          move.l    D0,A0
000017A8  3010      2298          move.w    (A0),D0
000017AA  0C40 4E4E 2299          cmp.w     #20046,D0
000017AE  6724      2300          beq.s     DumpRegisters_40
                    2301   ; DisassembleInstruction(PC) ;
000017B0  2F39 0803 2302          move.l    _PC.L,-(A7)
000017B4  0120      
000017B6  4EB9 0000 2303          jsr       _DisassembleInstruction
000017BA  34D0      
000017BC  584F      2304          addq.w    #4,A7
                    2305   ; FormatInstructionForTrace() ;
000017BE  4EB8 12EA 2306          jsr       _FormatInstructionForTrace
                    2307   ; printf("%s", Instruction) ;
000017C2  4879 0803 2308          pea       _Instruction.L
000017C6  04E2      
000017C8  4879 0000 2309          pea       @m68kde~1_52.L
000017CC  637C      
000017CE  4E93      2310          jsr       (A3)
000017D0  504F      2311          addq.w    #8,A7
000017D2  600A      2312          bra.s     DumpRegisters_41
                    2313   DumpRegisters_40:
                    2314   ; }
                    2315   ; else
                    2316   ; printf("[BREAKPOINT]") ;
000017D4  4879 0000 2317          pea       @m68kde~1_53.L
000017D8  6380      
000017DA  4E93      2318          jsr       (A3)
000017DC  584F      2319          addq.w    #4,A7
                    2320   DumpRegisters_41:
                    2321   ; printf("\r\n") ;
000017DE  4879 0000 2322          pea       @m68kde~1_54.L
000017E2  638E      
000017E4  4E93      2323          jsr       (A3)
000017E6  584F      2324          addq.w    #4,A7
                    2325   ; for(i=0; i < 8; i++)    {
000017E8  4244      2326          clr.w     D4
                    2327   DumpRegisters_42:
000017EA  0C44 0008 2328          cmp.w     #8,D4
000017EE  6C00 0040 2329          bge       DumpRegisters_44
                    2330   ; if(WatchPointSetOrCleared[i] == 1)
000017F2  48C4      2331          ext.l     D4
000017F4  2004      2332          move.l    D4,D0
000017F6  E588      2333          lsl.l     #2,D0
000017F8  41F9 0803 2334          lea       _WatchPointSetOrCleared.L,A0
000017FC  01A2      
000017FE  2030 0800 2335          move.l    0(A0,D0.L),D0
00001802  0C80 0000 2336          cmp.l     #1,D0
00001806  0001      
00001808  6622      2337          bne.s     DumpRegisters_45
                    2338   ; printf("\r\nWP%d = %s", i, WatchPointString[i]) ;
0000180A  220D      2339          move.l    A5,D1
0000180C  48C4      2340          ext.l     D4
0000180E  2F00      2341          move.l    D0,-(A7)
00001810  2004      2342          move.l    D4,D0
00001812  C1FC 0064 2343          muls      #100,D0
00001816  D280      2344          add.l     D0,D1
00001818  201F      2345          move.l    (A7)+,D0
0000181A  2F01      2346          move.l    D1,-(A7)
0000181C  48C4      2347          ext.l     D4
0000181E  2F04      2348          move.l    D4,-(A7)
00001820  4879 0000 2349          pea       @m68kde~1_55.L
00001824  6392      
00001826  4E93      2350          jsr       (A3)
00001828  DEFC 000C 2351          add.w     #12,A7
                    2352   DumpRegisters_45:
0000182C  5244      2353          addq.w    #1,D4
0000182E  60BA      2354          bra       DumpRegisters_42
                    2355   DumpRegisters_44:
00001830  4CDF 3CFC 2356          movem.l   (A7)+,D2/D3/D4/D5/D6/D7/A2/A3/A4/A5
00001834  4E75      2357          rts
                    2358   ; }
                    2359   ; }
                    2360   ; // Trace Exception Handler
                    2361   ; void DumpRegistersandPause(void)
                    2362   ; {
                    2363   _DumpRegistersandPause:
00001836  2F0A      2364          move.l    A2,-(A7)
00001838  45F9 0000 2365          lea       _printf.L,A2
0000183C  556E      
                    2366   ; printf("\r\n\r\n\r\n\r\n\r\n\r\nSingle Step  :[ON]") ;
0000183E  4879 0000 2367          pea       @m68kde~1_56.L
00001842  639E      
00001844  4E92      2368          jsr       (A2)
00001846  584F      2369          addq.w    #4,A7
                    2370   ; printf("\r\nBreak Points :[Disabled]") ;
00001848  4879 0000 2371          pea       @m68kde~1_57.L
0000184C  63BE      
0000184E  4E92      2372          jsr       (A2)
00001850  584F      2373          addq.w    #4,A7
                    2374   ; DumpRegisters() ;
00001852  4EB8 135E 2375          jsr       _DumpRegisters
                    2376   ; printf("\r\nPress <SPACE> to Execute Next Instruction");
00001856  4879 0000 2377          pea       @m68kde~1_58.L
0000185A  63DA      
0000185C  4E92      2378          jsr       (A2)
0000185E  584F      2379          addq.w    #4,A7
                    2380   ; printf("\r\nPress <ESC> to Resume Program") ;
00001860  4879 0000 2381          pea       @m68kde~1_59.L
00001864  6406      
00001866  4E92      2382          jsr       (A2)
00001868  584F      2383          addq.w    #4,A7
                    2384   ; menu() ;
0000186A  4EB9 0000 2385          jsr       _menu
0000186E  24A0      
00001870  245F      2386          move.l    (A7)+,A2
00001872  4E75      2387          rts
                    2388   ; }
                    2389   ; void ChangeRegisters(void)
                    2390   ; {
                    2391   _ChangeRegisters:
00001874  4E56 FFFC 2392          link      A6,#-4
00001878  48E7 303C 2393          movem.l   D2/D3/A2/A3/A4/A5,-(A7)
0000187C  45F9 0000 2394          lea       _printf.L,A2
00001880  556E      
00001882  47EE FFFC 2395          lea       -4(A6),A3
00001886  49F8 0CA4 2396          lea       _Get8HexDigits.L,A4
0000188A  4BF8 0B68 2397          lea       __getch.L,A5
                    2398   ; // get register name d0-d7, a0-a7, up, sp, sr, pc
                    2399   ; int reg_val ;
                    2400   ; char c, reg[3] ;
                    2401   ; reg[0] = tolower(_getch()) ;
0000188E  2F00      2402          move.l    D0,-(A7)
00001890  4E95      2403          jsr       (A5)
00001892  2200      2404          move.l    D0,D1
00001894  201F      2405          move.l    (A7)+,D0
00001896  2F01      2406          move.l    D1,-(A7)
00001898  4EB9 0000 2407          jsr       _tolower
0000189C  54CC      
0000189E  584F      2408          addq.w    #4,A7
000018A0  1680      2409          move.b    D0,(A3)
                    2410   ; reg[1] = c = tolower(_getch()) ;
000018A2  2F00      2411          move.l    D0,-(A7)
000018A4  4E95      2412          jsr       (A5)
000018A6  2200      2413          move.l    D0,D1
000018A8  201F      2414          move.l    (A7)+,D0
000018AA  2F01      2415          move.l    D1,-(A7)
000018AC  4EB9 0000 2416          jsr       _tolower
000018B0  54CC      
000018B2  584F      2417          addq.w    #4,A7
000018B4  1400      2418          move.b    D0,D2
000018B6  1740 0001 2419          move.b    D0,1(A3)
                    2420   ; if(reg[0] == (char)('d'))  {    // change data register
000018BA  1013      2421          move.b    (A3),D0
000018BC  0C00 0064 2422          cmp.b     #100,D0
000018C0  6600 00AE 2423          bne       ChangeRegisters_1
                    2424   ; if((reg[1] > (char)('7')) || (reg[1] < (char)('0'))) {
000018C4  102B 0001 2425          move.b    1(A3),D0
000018C8  0C00 0037 2426          cmp.b     #55,D0
000018CC  6E0A      2427          bgt.s     ChangeRegisters_5
000018CE  102B 0001 2428          move.b    1(A3),D0
000018D2  0C00 0030 2429          cmp.b     #48,D0
000018D6  6C0E      2430          bge.s     ChangeRegisters_3
                    2431   ChangeRegisters_5:
                    2432   ; printf("\r\nIllegal Data Register : Use D0-D7.....\r\n") ;
000018D8  4879 0000 2433          pea       @m68kde~1_60.L
000018DC  6426      
000018DE  4E92      2434          jsr       (A2)
000018E0  584F      2435          addq.w    #4,A7
                    2436   ; return ;
000018E2  6000 0244 2437          bra       ChangeRegisters_6
                    2438   ChangeRegisters_3:
                    2439   ; }
                    2440   ; else {
                    2441   ; printf("\r\nD%c = ", c) ;
000018E6  4882      2442          ext.w     D2
000018E8  48C2      2443          ext.l     D2
000018EA  2F02      2444          move.l    D2,-(A7)
000018EC  4879 0000 2445          pea       @m68kde~1_61.L
000018F0  6452      
000018F2  4E92      2446          jsr       (A2)
000018F4  504F      2447          addq.w    #8,A7
                    2448   ; reg_val = Get8HexDigits(0) ;    // read 32 bit value from user keyboard
000018F6  42A7      2449          clr.l     -(A7)
000018F8  4E94      2450          jsr       (A4)
000018FA  584F      2451          addq.w    #4,A7
000018FC  2600      2452          move.l    D0,D3
                    2453   ; }
                    2454   ; // bit cludgy but d0-d7 not stored as an array for good reason
                    2455   ; if(c == (char)('0'))
000018FE  0C02 0030 2456          cmp.b     #48,D2
00001902  660A      2457          bne.s     ChangeRegisters_7
                    2458   ; d0 = reg_val ;
00001904  23C3 0803 2459          move.l    D3,_d0.L
00001908  00E4      
0000190A  6000 0060 2460          bra       ChangeRegisters_20
                    2461   ChangeRegisters_7:
                    2462   ; else if(c == (char)('1'))
0000190E  0C02 0031 2463          cmp.b     #49,D2
00001912  660A      2464          bne.s     ChangeRegisters_9
                    2465   ; d1 = reg_val ;
00001914  23C3 0803 2466          move.l    D3,_d1.L
00001918  00E8      
0000191A  6000 0050 2467          bra       ChangeRegisters_20
                    2468   ChangeRegisters_9:
                    2469   ; else if(c == (char)('2'))
0000191E  0C02 0032 2470          cmp.b     #50,D2
00001922  660A      2471          bne.s     ChangeRegisters_11
                    2472   ; d2 = reg_val ;
00001924  23C3 0803 2473          move.l    D3,_d2.L
00001928  00EC      
0000192A  6000 0040 2474          bra       ChangeRegisters_20
                    2475   ChangeRegisters_11:
                    2476   ; else if(c == (char)('3'))
0000192E  0C02 0033 2477          cmp.b     #51,D2
00001932  6608      2478          bne.s     ChangeRegisters_13
                    2479   ; d3 = reg_val ;
00001934  23C3 0803 2480          move.l    D3,_d3.L
00001938  00F0      
0000193A  6030      2481          bra.s     ChangeRegisters_20
                    2482   ChangeRegisters_13:
                    2483   ; else if(c == (char)('4'))
0000193C  0C02 0034 2484          cmp.b     #52,D2
00001940  6608      2485          bne.s     ChangeRegisters_15
                    2486   ; d4 = reg_val ;
00001942  23C3 0803 2487          move.l    D3,_d4.L
00001946  00F4      
00001948  6022      2488          bra.s     ChangeRegisters_20
                    2489   ChangeRegisters_15:
                    2490   ; else if(c == (char)('5'))
0000194A  0C02 0035 2491          cmp.b     #53,D2
0000194E  6608      2492          bne.s     ChangeRegisters_17
                    2493   ; d5 = reg_val ;
00001950  23C3 0803 2494          move.l    D3,_d5.L
00001954  00F8      
00001956  6014      2495          bra.s     ChangeRegisters_20
                    2496   ChangeRegisters_17:
                    2497   ; else if(c == (char)('6'))
00001958  0C02 0036 2498          cmp.b     #54,D2
0000195C  6608      2499          bne.s     ChangeRegisters_19
                    2500   ; d6 = reg_val ;
0000195E  23C3 0803 2501          move.l    D3,_d6.L
00001962  00FC      
00001964  6006      2502          bra.s     ChangeRegisters_20
                    2503   ChangeRegisters_19:
                    2504   ; else
                    2505   ; d7 = reg_val ;
00001966  23C3 0803 2506          move.l    D3,_d7.L
0000196A  0100      
                    2507   ChangeRegisters_20:
0000196C  6000 01B6 2508          bra       ChangeRegisters_51
                    2509   ChangeRegisters_1:
                    2510   ; }
                    2511   ; else if(reg[0] == (char)('a'))  {    // change address register, a7 is the user stack pointer, sp is the system stack pointer
00001970  1013      2512          move.b    (A3),D0
00001972  0C00 0061 2513          cmp.b     #97,D0
00001976  6600 00A6 2514          bne       ChangeRegisters_21
                    2515   ; if((c > (char)('7')) || (c < (char)('0'))) {
0000197A  0C02 0037 2516          cmp.b     #55,D2
0000197E  6E06      2517          bgt.s     ChangeRegisters_25
00001980  0C02 0030 2518          cmp.b     #48,D2
00001984  6C0E      2519          bge.s     ChangeRegisters_23
                    2520   ChangeRegisters_25:
                    2521   ; printf("\r\nIllegal Address Register : Use A0-A7.....\r\n") ;
00001986  4879 0000 2522          pea       @m68kde~1_62.L
0000198A  645C      
0000198C  4E92      2523          jsr       (A2)
0000198E  584F      2524          addq.w    #4,A7
                    2525   ; return ;
00001990  6000 0196 2526          bra       ChangeRegisters_6
                    2527   ChangeRegisters_23:
                    2528   ; }
                    2529   ; else {
                    2530   ; printf("\r\nA%c = ", c) ;
00001994  4882      2531          ext.w     D2
00001996  48C2      2532          ext.l     D2
00001998  2F02      2533          move.l    D2,-(A7)
0000199A  4879 0000 2534          pea       @m68kde~1_63.L
0000199E  648A      
000019A0  4E92      2535          jsr       (A2)
000019A2  504F      2536          addq.w    #8,A7
                    2537   ; reg_val = Get8HexDigits(0) ;    // read 32 bit value from user keyboard
000019A4  42A7      2538          clr.l     -(A7)
000019A6  4E94      2539          jsr       (A4)
000019A8  584F      2540          addq.w    #4,A7
000019AA  2600      2541          move.l    D0,D3
                    2542   ; }
                    2543   ; // bit cludgy but a0-a7 not stored as an array for good reason
                    2544   ; if(c == (char)('0'))
000019AC  0C02 0030 2545          cmp.b     #48,D2
000019B0  660A      2546          bne.s     ChangeRegisters_26
                    2547   ; a0 = reg_val ;
000019B2  23C3 0803 2548          move.l    D3,_a0.L
000019B6  0104      
000019B8  6000 0060 2549          bra       ChangeRegisters_39
                    2550   ChangeRegisters_26:
                    2551   ; else if(c == (char)('1'))
000019BC  0C02 0031 2552          cmp.b     #49,D2
000019C0  660A      2553          bne.s     ChangeRegisters_28
                    2554   ; a1 = reg_val ;
000019C2  23C3 0803 2555          move.l    D3,_a1.L
000019C6  0108      
000019C8  6000 0050 2556          bra       ChangeRegisters_39
                    2557   ChangeRegisters_28:
                    2558   ; else if(c == (char)('2'))
000019CC  0C02 0032 2559          cmp.b     #50,D2
000019D0  660A      2560          bne.s     ChangeRegisters_30
                    2561   ; a2 = reg_val ;
000019D2  23C3 0803 2562          move.l    D3,_a2.L
000019D6  010C      
000019D8  6000 0040 2563          bra       ChangeRegisters_39
                    2564   ChangeRegisters_30:
                    2565   ; else if(c == (char)('3'))
000019DC  0C02 0033 2566          cmp.b     #51,D2
000019E0  6608      2567          bne.s     ChangeRegisters_32
                    2568   ; a3 = reg_val ;
000019E2  23C3 0803 2569          move.l    D3,_a3.L
000019E6  0110      
000019E8  6030      2570          bra.s     ChangeRegisters_39
                    2571   ChangeRegisters_32:
                    2572   ; else if(c == (char)('4'))
000019EA  0C02 0034 2573          cmp.b     #52,D2
000019EE  6608      2574          bne.s     ChangeRegisters_34
                    2575   ; a4 = reg_val ;
000019F0  23C3 0803 2576          move.l    D3,_a4.L
000019F4  0114      
000019F6  6022      2577          bra.s     ChangeRegisters_39
                    2578   ChangeRegisters_34:
                    2579   ; else if(c == (char)('5'))
000019F8  0C02 0035 2580          cmp.b     #53,D2
000019FC  6608      2581          bne.s     ChangeRegisters_36
                    2582   ; a5 = reg_val ;
000019FE  23C3 0803 2583          move.l    D3,_a5.L
00001A02  0118      
00001A04  6014      2584          bra.s     ChangeRegisters_39
                    2585   ChangeRegisters_36:
                    2586   ; else if(c == (char)('6'))
00001A06  0C02 0036 2587          cmp.b     #54,D2
00001A0A  6608      2588          bne.s     ChangeRegisters_38
                    2589   ; a6 = reg_val ;
00001A0C  23C3 0803 2590          move.l    D3,_a6.L
00001A10  011C      
00001A12  6006      2591          bra.s     ChangeRegisters_39
                    2592   ChangeRegisters_38:
                    2593   ; else
                    2594   ; USP = reg_val ;
00001A14  23C3 0803 2595          move.l    D3,_USP.L
00001A18  0128      
                    2596   ChangeRegisters_39:
00001A1A  6000 0108 2597          bra       ChangeRegisters_51
                    2598   ChangeRegisters_21:
                    2599   ; }
                    2600   ; else if((reg[0] == (char)('u')) && (c == (char)('s')))  {
00001A1E  1013      2601          move.b    (A3),D0
00001A20  0C00 0075 2602          cmp.b     #117,D0
00001A24  6600 004E 2603          bne       ChangeRegisters_40
00001A28  0C02 0073 2604          cmp.b     #115,D2
00001A2C  6600 0046 2605          bne       ChangeRegisters_40
                    2606   ; if(tolower(_getch()) == 'p')  {    // change user stack pointer
00001A30  2F00      2607          move.l    D0,-(A7)
00001A32  4E95      2608          jsr       (A5)
00001A34  2200      2609          move.l    D0,D1
00001A36  201F      2610          move.l    (A7)+,D0
00001A38  2F01      2611          move.l    D1,-(A7)
00001A3A  4EB9 0000 2612          jsr       _tolower
00001A3E  54CC      
00001A40  584F      2613          addq.w    #4,A7
00001A42  0C80 0000 2614          cmp.l     #112,D0
00001A46  0070      
00001A48  6618      2615          bne.s     ChangeRegisters_42
                    2616   ; printf("\r\nUser SP = ") ;
00001A4A  4879 0000 2617          pea       @m68kde~1_64.L
00001A4E  6494      
00001A50  4E92      2618          jsr       (A2)
00001A52  584F      2619          addq.w    #4,A7
                    2620   ; USP = Get8HexDigits(0) ;    // read 32 bit value from user keyboard
00001A54  42A7      2621          clr.l     -(A7)
00001A56  4E94      2622          jsr       (A4)
00001A58  584F      2623          addq.w    #4,A7
00001A5A  23C0 0803 2624          move.l    D0,_USP.L
00001A5E  0128      
00001A60  600E      2625          bra.s     ChangeRegisters_43
                    2626   ChangeRegisters_42:
                    2627   ; }
                    2628   ; else {
                    2629   ; printf("\r\nIllegal Register....") ;
00001A62  4879 0000 2630          pea       @m68kde~1_65.L
00001A66  64A2      
00001A68  4E92      2631          jsr       (A2)
00001A6A  584F      2632          addq.w    #4,A7
                    2633   ; return ;
00001A6C  6000 00BA 2634          bra       ChangeRegisters_6
                    2635   ChangeRegisters_43:
00001A70  6000 00B2 2636          bra       ChangeRegisters_51
                    2637   ChangeRegisters_40:
                    2638   ; }
                    2639   ; }
                    2640   ; else if((reg[0] == (char)('s')) && (c == (char)('s')))  {
00001A74  1013      2641          move.b    (A3),D0
00001A76  0C00 0073 2642          cmp.b     #115,D0
00001A7A  6600 004E 2643          bne       ChangeRegisters_44
00001A7E  0C02 0073 2644          cmp.b     #115,D2
00001A82  6600 0046 2645          bne       ChangeRegisters_44
                    2646   ; if(tolower(_getch()) == 'p')  {    // change system stack pointer
00001A86  2F00      2647          move.l    D0,-(A7)
00001A88  4E95      2648          jsr       (A5)
00001A8A  2200      2649          move.l    D0,D1
00001A8C  201F      2650          move.l    (A7)+,D0
00001A8E  2F01      2651          move.l    D1,-(A7)
00001A90  4EB9 0000 2652          jsr       _tolower
00001A94  54CC      
00001A96  584F      2653          addq.w    #4,A7
00001A98  0C80 0000 2654          cmp.l     #112,D0
00001A9C  0070      
00001A9E  6618      2655          bne.s     ChangeRegisters_46
                    2656   ; printf("\r\nSystem SP = ") ;
00001AA0  4879 0000 2657          pea       @m68kde~1_66.L
00001AA4  64BA      
00001AA6  4E92      2658          jsr       (A2)
00001AA8  584F      2659          addq.w    #4,A7
                    2660   ; SSP = Get8HexDigits(0) ;    // read 32 bit value from user keyboard
00001AAA  42A7      2661          clr.l     -(A7)
00001AAC  4E94      2662          jsr       (A4)
00001AAE  584F      2663          addq.w    #4,A7
00001AB0  23C0 0803 2664          move.l    D0,_SSP.L
00001AB4  0124      
00001AB6  600E      2665          bra.s     ChangeRegisters_47
                    2666   ChangeRegisters_46:
                    2667   ; }
                    2668   ; else {
                    2669   ; printf("\r\nIllegal Register....") ;
00001AB8  4879 0000 2670          pea       @m68kde~1_67.L
00001ABC  64CA      
00001ABE  4E92      2671          jsr       (A2)
00001AC0  584F      2672          addq.w    #4,A7
                    2673   ; return ;
00001AC2  6000 0064 2674          bra       ChangeRegisters_6
                    2675   ChangeRegisters_47:
00001AC6  6000 005C 2676          bra       ChangeRegisters_51
                    2677   ChangeRegisters_44:
                    2678   ; }
                    2679   ; }
                    2680   ; else if((reg[0] == (char)('p')) && (c == (char)('c')))  {    // change program counter
00001ACA  1013      2681          move.b    (A3),D0
00001ACC  0C00 0070 2682          cmp.b     #112,D0
00001AD0  6620      2683          bne.s     ChangeRegisters_48
00001AD2  0C02 0063 2684          cmp.b     #99,D2
00001AD6  661A      2685          bne.s     ChangeRegisters_48
                    2686   ; printf("\r\nPC = ") ;
00001AD8  4879 0000 2687          pea       @m68kde~1_68.L
00001ADC  64E2      
00001ADE  4E92      2688          jsr       (A2)
00001AE0  584F      2689          addq.w    #4,A7
                    2690   ; PC = Get8HexDigits(0) ;    // read 32 bit value from user keyboard
00001AE2  42A7      2691          clr.l     -(A7)
00001AE4  4E94      2692          jsr       (A4)
00001AE6  584F      2693          addq.w    #4,A7
00001AE8  23C0 0803 2694          move.l    D0,_PC.L
00001AEC  0120      
00001AEE  6000 0034 2695          bra       ChangeRegisters_51
                    2696   ChangeRegisters_48:
                    2697   ; }
                    2698   ; else if((reg[0] == (char)('s')) && (c == (char)('r')))  {    // change status register
00001AF2  1013      2699          move.b    (A3),D0
00001AF4  0C00 0073 2700          cmp.b     #115,D0
00001AF8  6620      2701          bne.s     ChangeRegisters_50
00001AFA  0C02 0072 2702          cmp.b     #114,D2
00001AFE  661A      2703          bne.s     ChangeRegisters_50
                    2704   ; printf("\r\nSR = ") ;
00001B00  4879 0000 2705          pea       @m68kde~1_69.L
00001B04  64EA      
00001B06  4E92      2706          jsr       (A2)
00001B08  584F      2707          addq.w    #4,A7
                    2708   ; SR = Get4HexDigits(0) ;    // read 16 bit value from user keyboard
00001B0A  42A7      2709          clr.l     -(A7)
00001B0C  4EB8 0C58 2710          jsr       _Get4HexDigits
00001B10  584F      2711          addq.w    #4,A7
00001B12  33C0 0803 2712          move.w    D0,_SR.L
00001B16  012C      
00001B18  600A      2713          bra.s     ChangeRegisters_51
                    2714   ChangeRegisters_50:
                    2715   ; }
                    2716   ; else
                    2717   ; printf("\r\nIllegal Register: Use A0-A7, D0-D7, SSP, USP, PC or SR\r\n") ;
00001B1A  4879 0000 2718          pea       @m68kde~1_70.L
00001B1E  64F2      
00001B20  4E92      2719          jsr       (A2)
00001B22  584F      2720          addq.w    #4,A7
                    2721   ChangeRegisters_51:
                    2722   ; DumpRegisters() ;
00001B24  4EB8 135E 2723          jsr       _DumpRegisters
                    2724   ChangeRegisters_6:
00001B28  4CDF 3C0C 2725          movem.l   (A7)+,D2/D3/A2/A3/A4/A5
00001B2C  4E5E      2726          unlk      A6
00001B2E  4E75      2727          rts
                    2728   ; }
                    2729   ; void BreakPointDisplay(void)
                    2730   ; {
                    2731   _BreakPointDisplay:
00001B30  48E7 3030 2732          movem.l   D2/D3/A2/A3,-(A7)
00001B34  45F9 0000 2733          lea       _printf.L,A2
00001B38  556E      
00001B3A  47F9 0803 2734          lea       _BreakPointAddress.L,A3
00001B3E  012E      
                    2735   ; int i, BreakPointsSet = 0 ;
00001B40  4283      2736          clr.l     D3
                    2737   ; // any break points  set
                    2738   ; for(i = 0; i < 8; i++)  {
00001B42  4282      2739          clr.l     D2
                    2740   BreakPointDisplay_1:
00001B44  0C82 0000 2741          cmp.l     #8,D2
00001B48  0008      
00001B4A  6C1C      2742          bge.s     BreakPointDisplay_3
                    2743   ; if(BreakPointSetOrCleared[i] == 1)
00001B4C  2002      2744          move.l    D2,D0
00001B4E  E588      2745          lsl.l     #2,D0
00001B50  41F9 0803 2746          lea       _BreakPointSetOrCleared.L,A0
00001B54  015E      
00001B56  2030 0800 2747          move.l    0(A0,D0.L),D0
00001B5A  0C80 0000 2748          cmp.l     #1,D0
00001B5E  0001      
00001B60  6602      2749          bne.s     BreakPointDisplay_4
                    2750   ; BreakPointsSet = 1;
00001B62  7601      2751          moveq     #1,D3
                    2752   BreakPointDisplay_4:
00001B64  5282      2753          addq.l    #1,D2
00001B66  60DC      2754          bra       BreakPointDisplay_1
                    2755   BreakPointDisplay_3:
                    2756   ; }
                    2757   ; if(BreakPointsSet == 1) {
00001B68  0C83 0000 2758          cmp.l     #1,D3
00001B6C  0001      
00001B6E  6616      2759          bne.s     BreakPointDisplay_6
                    2760   ; printf("\r\n\r\nNum     Address      Instruction") ;
00001B70  4879 0000 2761          pea       @m68kde~1_71.L
00001B74  652E      
00001B76  4E92      2762          jsr       (A2)
00001B78  584F      2763          addq.w    #4,A7
                    2764   ; printf("\r\n---     ---------    -----------") ;
00001B7A  4879 0000 2765          pea       @m68kde~1_72.L
00001B7E  6554      
00001B80  4E92      2766          jsr       (A2)
00001B82  584F      2767          addq.w    #4,A7
00001B84  600A      2768          bra.s     BreakPointDisplay_7
                    2769   BreakPointDisplay_6:
                    2770   ; }
                    2771   ; else
                    2772   ; printf("\r\nNo BreakPoints Set") ;
00001B86  4879 0000 2773          pea       @m68kde~1_73.L
00001B8A  6578      
00001B8C  4E92      2774          jsr       (A2)
00001B8E  584F      2775          addq.w    #4,A7
                    2776   BreakPointDisplay_7:
                    2777   ; for(i = 0; i < 8; i++)  {
00001B90  4282      2778          clr.l     D2
                    2779   BreakPointDisplay_8:
00001B92  0C82 0000 2780          cmp.l     #8,D2
00001B96  0008      
00001B98  6C00 0080 2781          bge       BreakPointDisplay_10
                    2782   ; // put opcode back to disassemble it, then put break point back
                    2783   ; if(BreakPointSetOrCleared[i] == 1)  {
00001B9C  2002      2784          move.l    D2,D0
00001B9E  E588      2785          lsl.l     #2,D0
00001BA0  41F9 0803 2786          lea       _BreakPointSetOrCleared.L,A0
00001BA4  015E      
00001BA6  2030 0800 2787          move.l    0(A0,D0.L),D0
00001BAA  0C80 0000 2788          cmp.l     #1,D0
00001BAE  0001      
00001BB0  6600 0062 2789          bne       BreakPointDisplay_11
                    2790   ; *(unsigned short int *)(BreakPointAddress[i]) = BreakPointInstruction[i];
00001BB4  2002      2791          move.l    D2,D0
00001BB6  E388      2792          lsl.l     #1,D0
00001BB8  41F9 0803 2793          lea       _BreakPointInstruction.L,A0
00001BBC  014E      
00001BBE  2202      2794          move.l    D2,D1
00001BC0  E589      2795          lsl.l     #2,D1
00001BC2  2233 1800 2796          move.l    0(A3,D1.L),D1
00001BC6  2241      2797          move.l    D1,A1
00001BC8  32B0 0800 2798          move.w    0(A0,D0.L),(A1)
                    2799   ; DisassembleInstruction(BreakPointAddress[i]) ;
00001BCC  2202      2800          move.l    D2,D1
00001BCE  E589      2801          lsl.l     #2,D1
00001BD0  2F33 1800 2802          move.l    0(A3,D1.L),-(A7)
00001BD4  4EB9 0000 2803          jsr       _DisassembleInstruction
00001BD8  34D0      
00001BDA  584F      2804          addq.w    #4,A7
                    2805   ; FormatInstructionForTrace() ;
00001BDC  4EB8 12EA 2806          jsr       _FormatInstructionForTrace
                    2807   ; *(unsigned short int *)(BreakPointAddress[i]) = (unsigned short int)(0x4e4e) ;
00001BE0  2002      2808          move.l    D2,D0
00001BE2  E588      2809          lsl.l     #2,D0
00001BE4  2033 0800 2810          move.l    0(A3,D0.L),D0
00001BE8  2040      2811          move.l    D0,A0
00001BEA  30BC 4E4E 2812          move.w    #20046,(A0)
                    2813   ; printf("\r\n%3d     $%08x",i, BreakPointAddress[i]) ;
00001BEE  2202      2814          move.l    D2,D1
00001BF0  E589      2815          lsl.l     #2,D1
00001BF2  2F33 1800 2816          move.l    0(A3,D1.L),-(A7)
00001BF6  2F02      2817          move.l    D2,-(A7)
00001BF8  4879 0000 2818          pea       @m68kde~1_74.L
00001BFC  658E      
00001BFE  4E92      2819          jsr       (A2)
00001C00  DEFC 000C 2820          add.w     #12,A7
                    2821   ; printf("    %s", Instruction);
00001C04  4879 0803 2822          pea       _Instruction.L
00001C08  04E2      
00001C0A  4879 0000 2823          pea       @m68kde~1_75.L
00001C0E  659E      
00001C10  4E92      2824          jsr       (A2)
00001C12  504F      2825          addq.w    #8,A7
                    2826   BreakPointDisplay_11:
00001C14  5282      2827          addq.l    #1,D2
00001C16  6000 FF7A 2828          bra       BreakPointDisplay_8
                    2829   BreakPointDisplay_10:
                    2830   ; }
                    2831   ; }
                    2832   ; printf("\r\n") ;
00001C1A  4879 0000 2833          pea       @m68kde~1_76.L
00001C1E  65A6      
00001C20  4E92      2834          jsr       (A2)
00001C22  584F      2835          addq.w    #4,A7
00001C24  4CDF 0C0C 2836          movem.l   (A7)+,D2/D3/A2/A3
00001C28  4E75      2837          rts
                    2838   ; }
                    2839   ; void WatchPointDisplay(void)
                    2840   ; {
                    2841   _WatchPointDisplay:
00001C2A  48E7 3020 2842          movem.l   D2/D3/A2,-(A7)
00001C2E  45F9 0000 2843          lea       _printf.L,A2
00001C32  556E      
                    2844   ; int i ;
                    2845   ; int WatchPointsSet = 0 ;
00001C34  4283      2846          clr.l     D3
                    2847   ; // any watchpoints set
                    2848   ; for(i = 0; i < 8; i++)  {
00001C36  4282      2849          clr.l     D2
                    2850   WatchPointDisplay_1:
00001C38  0C82 0000 2851          cmp.l     #8,D2
00001C3C  0008      
00001C3E  6C1C      2852          bge.s     WatchPointDisplay_3
                    2853   ; if(WatchPointSetOrCleared[i] == 1)
00001C40  2002      2854          move.l    D2,D0
00001C42  E588      2855          lsl.l     #2,D0
00001C44  41F9 0803 2856          lea       _WatchPointSetOrCleared.L,A0
00001C48  01A2      
00001C4A  2030 0800 2857          move.l    0(A0,D0.L),D0
00001C4E  0C80 0000 2858          cmp.l     #1,D0
00001C52  0001      
00001C54  6602      2859          bne.s     WatchPointDisplay_4
                    2860   ; WatchPointsSet = 1;
00001C56  7601      2861          moveq     #1,D3
                    2862   WatchPointDisplay_4:
00001C58  5282      2863          addq.l    #1,D2
00001C5A  60DC      2864          bra       WatchPointDisplay_1
                    2865   WatchPointDisplay_3:
                    2866   ; }
                    2867   ; if(WatchPointsSet == 1) {
00001C5C  0C83 0000 2868          cmp.l     #1,D3
00001C60  0001      
00001C62  6616      2869          bne.s     WatchPointDisplay_6
                    2870   ; printf("\r\nNum     Address") ;
00001C64  4879 0000 2871          pea       @m68kde~1_77.L
00001C68  65AA      
00001C6A  4E92      2872          jsr       (A2)
00001C6C  584F      2873          addq.w    #4,A7
                    2874   ; printf("\r\n---     ---------") ;
00001C6E  4879 0000 2875          pea       @m68kde~1_78.L
00001C72  65BC      
00001C74  4E92      2876          jsr       (A2)
00001C76  584F      2877          addq.w    #4,A7
00001C78  600A      2878          bra.s     WatchPointDisplay_7
                    2879   WatchPointDisplay_6:
                    2880   ; }
                    2881   ; else
                    2882   ; printf("\r\nNo WatchPoints Set") ;
00001C7A  4879 0000 2883          pea       @m68kde~1_79.L
00001C7E  65D0      
00001C80  4E92      2884          jsr       (A2)
00001C82  584F      2885          addq.w    #4,A7
                    2886   WatchPointDisplay_7:
                    2887   ; for(i = 0; i < 8; i++)  {
00001C84  4282      2888          clr.l     D2
                    2889   WatchPointDisplay_8:
00001C86  0C82 0000 2890          cmp.l     #8,D2
00001C8A  0008      
00001C8C  6C00 0038 2891          bge       WatchPointDisplay_10
                    2892   ; if(WatchPointSetOrCleared[i] == 1)
00001C90  2002      2893          move.l    D2,D0
00001C92  E588      2894          lsl.l     #2,D0
00001C94  41F9 0803 2895          lea       _WatchPointSetOrCleared.L,A0
00001C98  01A2      
00001C9A  2030 0800 2896          move.l    0(A0,D0.L),D0
00001C9E  0C80 0000 2897          cmp.l     #1,D0
00001CA2  0001      
00001CA4  661C      2898          bne.s     WatchPointDisplay_11
                    2899   ; printf("\r\n%3d     $%08x",i, WatchPointAddress[i]) ;
00001CA6  2202      2900          move.l    D2,D1
00001CA8  E589      2901          lsl.l     #2,D1
00001CAA  41F9 0803 2902          lea       _WatchPointAddress.L,A0
00001CAE  0182      
00001CB0  2F30 1800 2903          move.l    0(A0,D1.L),-(A7)
00001CB4  2F02      2904          move.l    D2,-(A7)
00001CB6  4879 0000 2905          pea       @m68kde~1_80.L
00001CBA  65E6      
00001CBC  4E92      2906          jsr       (A2)
00001CBE  DEFC 000C 2907          add.w     #12,A7
                    2908   WatchPointDisplay_11:
00001CC2  5282      2909          addq.l    #1,D2
00001CC4  60C0      2910          bra       WatchPointDisplay_8
                    2911   WatchPointDisplay_10:
                    2912   ; }
                    2913   ; printf("\r\n") ;
00001CC6  4879 0000 2914          pea       @m68kde~1_81.L
00001CCA  65F6      
00001CCC  4E92      2915          jsr       (A2)
00001CCE  584F      2916          addq.w    #4,A7
00001CD0  4CDF 040C 2917          movem.l   (A7)+,D2/D3/A2
00001CD4  4E75      2918          rts
                    2919   ; }
                    2920   ; void BreakPointClear(void)
                    2921   ; {
                    2922   _BreakPointClear:
00001CD6  4E56 FFFC 2923          link      A6,#-4
00001CDA  48E7 2020 2924          movem.l   D2/A2,-(A7)
00001CDE  45F9 0000 2925          lea       _printf.L,A2
00001CE2  556E      
                    2926   ; unsigned int i ;
                    2927   ; volatile unsigned short int *ProgramBreakPointAddress ;
                    2928   ; BreakPointDisplay() ;
00001CE4  4EB8 1B30 2929          jsr       _BreakPointDisplay
                    2930   ; printf("\r\nEnter Break Point Number: ") ;
00001CE8  4879 0000 2931          pea       @m68kde~1_82.L
00001CEC  65FA      
00001CEE  4E92      2932          jsr       (A2)
00001CF0  584F      2933          addq.w    #4,A7
                    2934   ; i = xtod(_getch()) ;           // get break pointer number
00001CF2  2F00      2935          move.l    D0,-(A7)
00001CF4  4EB8 0B68 2936          jsr       __getch
00001CF8  2200      2937          move.l    D0,D1
00001CFA  201F      2938          move.l    (A7)+,D0
00001CFC  2F01      2939          move.l    D1,-(A7)
00001CFE  4EB8 0BD2 2940          jsr       _xtod
00001D02  584F      2941          addq.w    #4,A7
00001D04  C0BC 0000 2942          and.l     #255,D0
00001D08  00FF      
00001D0A  2400      2943          move.l    D0,D2
                    2944   ; if((i < 0) || (i > 7))   {
00001D0C  0C82 0000 2945          cmp.l     #0,D2
00001D10  0000      
00001D12  6508      2946          blo.s     BreakPointClear_3
00001D14  0C82 0000 2947          cmp.l     #7,D2
00001D18  0007      
00001D1A  630E      2948          bls.s     BreakPointClear_1
                    2949   BreakPointClear_3:
                    2950   ; printf("\r\nIllegal Range : Use 0 - 7") ;
00001D1C  4879 0000 2951          pea       @m68kde~1_83.L
00001D20  6618      
00001D22  4E92      2952          jsr       (A2)
00001D24  584F      2953          addq.w    #4,A7
                    2954   ; return ;
00001D26  6000 0080 2955          bra       BreakPointClear_4
                    2956   BreakPointClear_1:
                    2957   ; }
                    2958   ; if(BreakPointSetOrCleared[i] == 1)  {       // if break point set
00001D2A  2002      2959          move.l    D2,D0
00001D2C  E588      2960          lsl.l     #2,D0
00001D2E  41F9 0803 2961          lea       _BreakPointSetOrCleared.L,A0
00001D32  015E      
00001D34  2030 0800 2962          move.l    0(A0,D0.L),D0
00001D38  0C80 0000 2963          cmp.l     #1,D0
00001D3C  0001      
00001D3E  6600 005A 2964          bne       BreakPointClear_5
                    2965   ; ProgramBreakPointAddress = (volatile unsigned short int *)(BreakPointAddress[i]) ;     // point to the instruction in the user program we are about to change
00001D42  2002      2966          move.l    D2,D0
00001D44  E588      2967          lsl.l     #2,D0
00001D46  41F9 0803 2968          lea       _BreakPointAddress.L,A0
00001D4A  012E      
00001D4C  2D70 0800 2969          move.l    0(A0,D0.L),-4(A6)
00001D50  FFFC      
                    2970   ; BreakPointAddress[i] = 0 ;
00001D52  2002      2971          move.l    D2,D0
00001D54  E588      2972          lsl.l     #2,D0
00001D56  41F9 0803 2973          lea       _BreakPointAddress.L,A0
00001D5A  012E      
00001D5C  42B0 0800 2974          clr.l     0(A0,D0.L)
                    2975   ; BreakPointSetOrCleared[i] = 0 ;
00001D60  2002      2976          move.l    D2,D0
00001D62  E588      2977          lsl.l     #2,D0
00001D64  41F9 0803 2978          lea       _BreakPointSetOrCleared.L,A0
00001D68  015E      
00001D6A  42B0 0800 2979          clr.l     0(A0,D0.L)
                    2980   ; *ProgramBreakPointAddress = BreakPointInstruction[i] ;  // put original instruction back
00001D6E  2002      2981          move.l    D2,D0
00001D70  E388      2982          lsl.l     #1,D0
00001D72  41F9 0803 2983          lea       _BreakPointInstruction.L,A0
00001D76  014E      
00001D78  226E FFFC 2984          move.l    -4(A6),A1
00001D7C  32B0 0800 2985          move.w    0(A0,D0.L),(A1)
                    2986   ; BreakPointInstruction[i] = 0 ;
00001D80  2002      2987          move.l    D2,D0
00001D82  E388      2988          lsl.l     #1,D0
00001D84  41F9 0803 2989          lea       _BreakPointInstruction.L,A0
00001D88  014E      
00001D8A  4270 0800 2990          clr.w     0(A0,D0.L)
                    2991   ; printf("\r\nBreak Point Cleared.....\r\n") ;
00001D8E  4879 0000 2992          pea       @m68kde~1_84.L
00001D92  6634      
00001D94  4E92      2993          jsr       (A2)
00001D96  584F      2994          addq.w    #4,A7
00001D98  600A      2995          bra.s     BreakPointClear_6
                    2996   BreakPointClear_5:
                    2997   ; }
                    2998   ; else
                    2999   ; printf("\r\nBreak Point wasn't Set.....") ;
00001D9A  4879 0000 3000          pea       @m68kde~1_85.L
00001D9E  6652      
00001DA0  4E92      3001          jsr       (A2)
00001DA2  584F      3002          addq.w    #4,A7
                    3003   BreakPointClear_6:
                    3004   ; BreakPointDisplay() ;
00001DA4  4EB8 1B30 3005          jsr       _BreakPointDisplay
                    3006   ; return ;
                    3007   BreakPointClear_4:
00001DA8  4CDF 0404 3008          movem.l   (A7)+,D2/A2
00001DAC  4E5E      3009          unlk      A6
00001DAE  4E75      3010          rts
                    3011   ; }
                    3012   ; void WatchPointClear(void)
                    3013   ; {
                    3014   _WatchPointClear:
00001DB0  48E7 2020 3015          movem.l   D2/A2,-(A7)
00001DB4  45F9 0000 3016          lea       _printf.L,A2
00001DB8  556E      
                    3017   ; unsigned int i ;
                    3018   ; WatchPointDisplay() ;
00001DBA  4EB8 1C2A 3019          jsr       _WatchPointDisplay
                    3020   ; printf("\r\nEnter Watch Point Number: ") ;
00001DBE  4879 0000 3021          pea       @m68kde~1_86.L
00001DC2  6670      
00001DC4  4E92      3022          jsr       (A2)
00001DC6  584F      3023          addq.w    #4,A7
                    3024   ; i = xtod(_getch()) ;           // get watch pointer number
00001DC8  2F00      3025          move.l    D0,-(A7)
00001DCA  4EB8 0B68 3026          jsr       __getch
00001DCE  2200      3027          move.l    D0,D1
00001DD0  201F      3028          move.l    (A7)+,D0
00001DD2  2F01      3029          move.l    D1,-(A7)
00001DD4  4EB8 0BD2 3030          jsr       _xtod
00001DD8  584F      3031          addq.w    #4,A7
00001DDA  C0BC 0000 3032          and.l     #255,D0
00001DDE  00FF      
00001DE0  2400      3033          move.l    D0,D2
                    3034   ; if((i < 0) || (i > 7))   {
00001DE2  0C82 0000 3035          cmp.l     #0,D2
00001DE6  0000      
00001DE8  6508      3036          blo.s     WatchPointClear_3
00001DEA  0C82 0000 3037          cmp.l     #7,D2
00001DEE  0007      
00001DF0  630E      3038          bls.s     WatchPointClear_1
                    3039   WatchPointClear_3:
                    3040   ; printf("\r\nIllegal Range : Use 0 - 7") ;
00001DF2  4879 0000 3041          pea       @m68kde~1_87.L
00001DF6  668E      
00001DF8  4E92      3042          jsr       (A2)
00001DFA  584F      3043          addq.w    #4,A7
                    3044   ; return ;
00001DFC  6000 004E 3045          bra       WatchPointClear_4
                    3046   WatchPointClear_1:
                    3047   ; }
                    3048   ; if(WatchPointSetOrCleared[i] == 1)  {       // if watch point set
00001E00  2002      3049          move.l    D2,D0
00001E02  E588      3050          lsl.l     #2,D0
00001E04  41F9 0803 3051          lea       _WatchPointSetOrCleared.L,A0
00001E08  01A2      
00001E0A  2030 0800 3052          move.l    0(A0,D0.L),D0
00001E0E  0C80 0000 3053          cmp.l     #1,D0
00001E12  0001      
00001E14  6628      3054          bne.s     WatchPointClear_5
                    3055   ; WatchPointAddress[i] = 0 ;
00001E16  2002      3056          move.l    D2,D0
00001E18  E588      3057          lsl.l     #2,D0
00001E1A  41F9 0803 3058          lea       _WatchPointAddress.L,A0
00001E1E  0182      
00001E20  42B0 0800 3059          clr.l     0(A0,D0.L)
                    3060   ; WatchPointSetOrCleared[i] = 0 ;
00001E24  2002      3061          move.l    D2,D0
00001E26  E588      3062          lsl.l     #2,D0
00001E28  41F9 0803 3063          lea       _WatchPointSetOrCleared.L,A0
00001E2C  01A2      
00001E2E  42B0 0800 3064          clr.l     0(A0,D0.L)
                    3065   ; printf("\r\nWatch Point Cleared.....\r\n") ;
00001E32  4879 0000 3066          pea       @m68kde~1_88.L
00001E36  66AA      
00001E38  4E92      3067          jsr       (A2)
00001E3A  584F      3068          addq.w    #4,A7
00001E3C  600A      3069          bra.s     WatchPointClear_6
                    3070   WatchPointClear_5:
                    3071   ; }
                    3072   ; else
                    3073   ; printf("\r\nWatch Point Was not Set.....") ;
00001E3E  4879 0000 3074          pea       @m68kde~1_89.L
00001E42  66C8      
00001E44  4E92      3075          jsr       (A2)
00001E46  584F      3076          addq.w    #4,A7
                    3077   WatchPointClear_6:
                    3078   ; WatchPointDisplay() ;
00001E48  4EB8 1C2A 3079          jsr       _WatchPointDisplay
                    3080   ; return ;
                    3081   WatchPointClear_4:
00001E4C  4CDF 0404 3082          movem.l   (A7)+,D2/A2
00001E50  4E75      3083          rts
                    3084   ; }
                    3085   ; void DisableBreakPoints(void)
                    3086   ; {
                    3087   _DisableBreakPoints:
00001E52  4E56 FFFC 3088          link      A6,#-4
00001E56  2F02      3089          move.l    D2,-(A7)
                    3090   ; int i ;
                    3091   ; volatile unsigned short int *ProgramBreakPointAddress ;
                    3092   ; for(i = 0; i < 8; i++)  {
00001E58  4282      3093          clr.l     D2
                    3094   DisableBreakPoints_1:
00001E5A  0C82 0000 3095          cmp.l     #8,D2
00001E5E  0008      
00001E60  6C00 003E 3096          bge       DisableBreakPoints_3
                    3097   ; if(BreakPointSetOrCleared[i] == 1)    {                                                    // if break point set
00001E64  2002      3098          move.l    D2,D0
00001E66  E588      3099          lsl.l     #2,D0
00001E68  41F9 0803 3100          lea       _BreakPointSetOrCleared.L,A0
00001E6C  015E      
00001E6E  2030 0800 3101          move.l    0(A0,D0.L),D0
00001E72  0C80 0000 3102          cmp.l     #1,D0
00001E76  0001      
00001E78  6622      3103          bne.s     DisableBreakPoints_4
                    3104   ; ProgramBreakPointAddress = (volatile unsigned short int *)(BreakPointAddress[i]) ;     // point to the instruction in the user program where the break point has been set
00001E7A  2002      3105          move.l    D2,D0
00001E7C  E588      3106          lsl.l     #2,D0
00001E7E  41F9 0803 3107          lea       _BreakPointAddress.L,A0
00001E82  012E      
00001E84  2D70 0800 3108          move.l    0(A0,D0.L),-4(A6)
00001E88  FFFC      
                    3109   ; *ProgramBreakPointAddress = BreakPointInstruction[i];                                  // copy the instruction back to the user program overwritting the $4e4e
00001E8A  2002      3110          move.l    D2,D0
00001E8C  E388      3111          lsl.l     #1,D0
00001E8E  41F9 0803 3112          lea       _BreakPointInstruction.L,A0
00001E92  014E      
00001E94  226E FFFC 3113          move.l    -4(A6),A1
00001E98  32B0 0800 3114          move.w    0(A0,D0.L),(A1)
                    3115   DisableBreakPoints_4:
00001E9C  5282      3116          addq.l    #1,D2
00001E9E  60BA      3117          bra       DisableBreakPoints_1
                    3118   DisableBreakPoints_3:
00001EA0  241F      3119          move.l    (A7)+,D2
00001EA2  4E5E      3120          unlk      A6
00001EA4  4E75      3121          rts
                    3122   ; }
                    3123   ; }
                    3124   ; }
                    3125   ; void EnableBreakPoints(void)
                    3126   ; {
                    3127   _EnableBreakPoints:
00001EA6  4E56 FFFC 3128          link      A6,#-4
00001EAA  2F02      3129          move.l    D2,-(A7)
                    3130   ; int i ;
                    3131   ; volatile unsigned short int *ProgramBreakPointAddress ;
                    3132   ; for(i = 0; i < 8; i++)  {
00001EAC  4282      3133          clr.l     D2
                    3134   EnableBreakPoints_1:
00001EAE  0C82 0000 3135          cmp.l     #8,D2
00001EB2  0008      
00001EB4  6C32      3136          bge.s     EnableBreakPoints_3
                    3137   ; if(BreakPointSetOrCleared[i] == 1)    {                                                     // if break point set
00001EB6  2002      3138          move.l    D2,D0
00001EB8  E588      3139          lsl.l     #2,D0
00001EBA  41F9 0803 3140          lea       _BreakPointSetOrCleared.L,A0
00001EBE  015E      
00001EC0  2030 0800 3141          move.l    0(A0,D0.L),D0
00001EC4  0C80 0000 3142          cmp.l     #1,D0
00001EC8  0001      
00001ECA  6618      3143          bne.s     EnableBreakPoints_4
                    3144   ; ProgramBreakPointAddress = (volatile unsigned short int *)(BreakPointAddress[i]) ;     // point to the instruction in the user program where the break point has been set
00001ECC  2002      3145          move.l    D2,D0
00001ECE  E588      3146          lsl.l     #2,D0
00001ED0  41F9 0803 3147          lea       _BreakPointAddress.L,A0
00001ED4  012E      
00001ED6  2D70 0800 3148          move.l    0(A0,D0.L),-4(A6)
00001EDA  FFFC      
                    3149   ; *ProgramBreakPointAddress = (unsigned short int)(0x4e4e);                              // put the breakpoint back in user program
00001EDC  206E FFFC 3150          move.l    -4(A6),A0
00001EE0  30BC 4E4E 3151          move.w    #20046,(A0)
                    3152   EnableBreakPoints_4:
00001EE4  5282      3153          addq.l    #1,D2
00001EE6  60C6      3154          bra       EnableBreakPoints_1
                    3155   EnableBreakPoints_3:
00001EE8  241F      3156          move.l    (A7)+,D2
00001EEA  4E5E      3157          unlk      A6
00001EEC  4E75      3158          rts
                    3159   ; }
                    3160   ; }
                    3161   ; }
                    3162   ; void KillAllBreakPoints(void)
                    3163   ; {
                    3164   _KillAllBreakPoints:
00001EEE  4E56 FFFC 3165          link      A6,#-4
00001EF2  2F02      3166          move.l    D2,-(A7)
                    3167   ; int i ;
                    3168   ; volatile unsigned short int *ProgramBreakPointAddress ;
                    3169   ; for(i = 0; i < 8; i++)  {
00001EF4  4282      3170          clr.l     D2
                    3171   KillAllBreakPoints_1:
00001EF6  0C82 0000 3172          cmp.l     #8,D2
00001EFA  0008      
00001EFC  6C00 0052 3173          bge       KillAllBreakPoints_3
                    3174   ; // clear BP
                    3175   ; ProgramBreakPointAddress = (volatile unsigned short int *)(BreakPointAddress[i]) ;     // point to the instruction in the user program where the break point has been set
00001F00  2002      3176          move.l    D2,D0
00001F02  E588      3177          lsl.l     #2,D0
00001F04  41F9 0803 3178          lea       _BreakPointAddress.L,A0
00001F08  012E      
00001F0A  2D70 0800 3179          move.l    0(A0,D0.L),-4(A6)
00001F0E  FFFC      
                    3180   ; *ProgramBreakPointAddress = BreakPointInstruction[i];                                  // copy the instruction back to the user program
00001F10  2002      3181          move.l    D2,D0
00001F12  E388      3182          lsl.l     #1,D0
00001F14  41F9 0803 3183          lea       _BreakPointInstruction.L,A0
00001F18  014E      
00001F1A  226E FFFC 3184          move.l    -4(A6),A1
00001F1E  32B0 0800 3185          move.w    0(A0,D0.L),(A1)
                    3186   ; BreakPointAddress[i] = 0 ;                                                             // set BP address to NULL
00001F22  2002      3187          move.l    D2,D0
00001F24  E588      3188          lsl.l     #2,D0
00001F26  41F9 0803 3189          lea       _BreakPointAddress.L,A0
00001F2A  012E      
00001F2C  42B0 0800 3190          clr.l     0(A0,D0.L)
                    3191   ; BreakPointInstruction[i] = 0 ;
00001F30  2002      3192          move.l    D2,D0
00001F32  E388      3193          lsl.l     #1,D0
00001F34  41F9 0803 3194          lea       _BreakPointInstruction.L,A0
00001F38  014E      
00001F3A  4270 0800 3195          clr.w     0(A0,D0.L)
                    3196   ; BreakPointSetOrCleared[i] = 0 ;                                                        // mark break point as cleared for future setting
00001F3E  2002      3197          move.l    D2,D0
00001F40  E588      3198          lsl.l     #2,D0
00001F42  41F9 0803 3199          lea       _BreakPointSetOrCleared.L,A0
00001F46  015E      
00001F48  42B0 0800 3200          clr.l     0(A0,D0.L)
00001F4C  5282      3201          addq.l    #1,D2
00001F4E  60A6      3202          bra       KillAllBreakPoints_1
                    3203   KillAllBreakPoints_3:
00001F50  241F      3204          move.l    (A7)+,D2
00001F52  4E5E      3205          unlk      A6
00001F54  4E75      3206          rts
                    3207   ; }
                    3208   ; //BreakPointDisplay() ;       // display the break points
                    3209   ; }
                    3210   ; void KillAllWatchPoints(void)
                    3211   ; {
                    3212   _KillAllWatchPoints:
00001F56  2F02      3213          move.l    D2,-(A7)
                    3214   ; int i ;
                    3215   ; for(i = 0; i < 8; i++)  {
00001F58  4282      3216          clr.l     D2
                    3217   KillAllWatchPoints_1:
00001F5A  0C82 0000 3218          cmp.l     #8,D2
00001F5E  0008      
00001F60  6C20      3219          bge.s     KillAllWatchPoints_3
                    3220   ; WatchPointAddress[i] = 0 ;                                                             // set BP address to NULL
00001F62  2002      3221          move.l    D2,D0
00001F64  E588      3222          lsl.l     #2,D0
00001F66  41F9 0803 3223          lea       _WatchPointAddress.L,A0
00001F6A  0182      
00001F6C  42B0 0800 3224          clr.l     0(A0,D0.L)
                    3225   ; WatchPointSetOrCleared[i] = 0 ;                                                        // mark break point as cleared for future setting
00001F70  2002      3226          move.l    D2,D0
00001F72  E588      3227          lsl.l     #2,D0
00001F74  41F9 0803 3228          lea       _WatchPointSetOrCleared.L,A0
00001F78  01A2      
00001F7A  42B0 0800 3229          clr.l     0(A0,D0.L)
00001F7E  5282      3230          addq.l    #1,D2
00001F80  60D8      3231          bra       KillAllWatchPoints_1
                    3232   KillAllWatchPoints_3:
00001F82  241F      3233          move.l    (A7)+,D2
00001F84  4E75      3234          rts
                    3235   ; }
                    3236   ; //WatchPointDisplay() ;       // display the break points
                    3237   ; }
                    3238   ; void SetBreakPoint(void)
                    3239   ; {
                    3240   _SetBreakPoint:
00001F86  4E56 FFFC 3241          link      A6,#-4
00001F8A  48E7 3830 3242          movem.l   D2/D3/D4/A2/A3,-(A7)
00001F8E  45F9 0000 3243          lea       _printf.L,A2
00001F92  556E      
00001F94  47F9 0803 3244          lea       _BreakPointSetOrCleared.L,A3
00001F98  015E      
                    3245   ; int i ;
                    3246   ; int BPNumber;
                    3247   ; int BPAddress;
                    3248   ; volatile unsigned short int *ProgramBreakPointAddress ;
                    3249   ; // see if any free break points
                    3250   ; for(i = 0; i < 8; i ++) {
00001F9A  4282      3251          clr.l     D2
                    3252   SetBreakPoint_1:
00001F9C  0C82 0000 3253          cmp.l     #8,D2
00001FA0  0008      
00001FA2  6C10      3254          bge.s     SetBreakPoint_3
                    3255   ; if( BreakPointSetOrCleared[i] == 0)
00001FA4  2002      3256          move.l    D2,D0
00001FA6  E588      3257          lsl.l     #2,D0
00001FA8  2033 0800 3258          move.l    0(A3,D0.L),D0
00001FAC  6602      3259          bne.s     SetBreakPoint_4
                    3260   ; break ;         // if spare BP found allow user to set it
00001FAE  6004      3261          bra.s     SetBreakPoint_3
                    3262   SetBreakPoint_4:
00001FB0  5282      3263          addq.l    #1,D2
00001FB2  60E8      3264          bra       SetBreakPoint_1
                    3265   SetBreakPoint_3:
                    3266   ; }
                    3267   ; if(i == 8) {
00001FB4  0C82 0000 3268          cmp.l     #8,D2
00001FB8  0008      
00001FBA  660E      3269          bne.s     SetBreakPoint_6
                    3270   ; printf("\r\nNo FREE Break Points.....") ;
00001FBC  4879 0000 3271          pea       @m68kde~1_90.L
00001FC0  66E8      
00001FC2  4E92      3272          jsr       (A2)
00001FC4  584F      3273          addq.w    #4,A7
                    3274   ; return ;
00001FC6  6000 00EC 3275          bra       SetBreakPoint_15
                    3276   SetBreakPoint_6:
                    3277   ; }
                    3278   ; printf("\r\nBreak Point Address: ") ;
00001FCA  4879 0000 3279          pea       @m68kde~1_91.L
00001FCE  6704      
00001FD0  4E92      3280          jsr       (A2)
00001FD2  584F      3281          addq.w    #4,A7
                    3282   ; BPAddress = Get8HexDigits(0) ;
00001FD4  42A7      3283          clr.l     -(A7)
00001FD6  4EB8 0CA4 3284          jsr       _Get8HexDigits
00001FDA  584F      3285          addq.w    #4,A7
00001FDC  2600      3286          move.l    D0,D3
                    3287   ; ProgramBreakPointAddress = (volatile unsigned short int *)(BPAddress) ;     // point to the instruction in the user program we are about to change
00001FDE  2803      3288          move.l    D3,D4
                    3289   ; if((BPAddress & 0x00000001) == 0x00000001)  {   // cannot set BP at an odd address
00001FE0  2003      3290          move.l    D3,D0
00001FE2  C0BC 0000 3291          and.l     #1,D0
00001FE6  0001      
00001FE8  0C80 0000 3292          cmp.l     #1,D0
00001FEC  0001      
00001FEE  660E      3293          bne.s     SetBreakPoint_9
                    3294   ; printf("\r\nError : Break Points CANNOT be set at ODD addresses") ;
00001FF0  4879 0000 3295          pea       @m68kde~1_92.L
00001FF4  671C      
00001FF6  4E92      3296          jsr       (A2)
00001FF8  584F      3297          addq.w    #4,A7
                    3298   ; return ;
00001FFA  6000 00B8 3299          bra       SetBreakPoint_15
                    3300   SetBreakPoint_9:
                    3301   ; }
                    3302   ; if(BPAddress < 0x00008000)  {   // cannot set BP in ROM
00001FFE  0C83 0000 3303          cmp.l     #32768,D3
00002002  8000      
00002004  640E      3304          bhs.s     SetBreakPoint_11
                    3305   ; printf("\r\nError : Break Points CANNOT be set for ROM in Range : [$0-$00007FFF]") ;
00002006  4879 0000 3306          pea       @m68kde~1_93.L
0000200A  6752      
0000200C  4E92      3307          jsr       (A2)
0000200E  584F      3308          addq.w    #4,A7
                    3309   ; return ;
00002010  6000 00A2 3310          bra       SetBreakPoint_15
                    3311   SetBreakPoint_11:
                    3312   ; }
                    3313   ; // search for first free bp or existing same BP
                    3314   ; for(i = 0; i < 8; i++)  {
00002014  4282      3315          clr.l     D2
                    3316   SetBreakPoint_13:
00002016  0C82 0000 3317          cmp.l     #8,D2
0000201A  0008      
0000201C  6C00 0096 3318          bge       SetBreakPoint_15
                    3319   ; if(BreakPointAddress[i] == BPAddress)   {
00002020  2002      3320          move.l    D2,D0
00002022  E588      3321          lsl.l     #2,D0
00002024  41F9 0803 3322          lea       _BreakPointAddress.L,A0
00002028  012E      
0000202A  B6B0 0800 3323          cmp.l     0(A0,D0.L),D3
0000202E  6610      3324          bne.s     SetBreakPoint_16
                    3325   ; printf("\r\nError: Break Point Already Exists at Address : %08x\r\n", BPAddress) ;
00002030  2F03      3326          move.l    D3,-(A7)
00002032  4879 0000 3327          pea       @m68kde~1_94.L
00002036  679A      
00002038  4E92      3328          jsr       (A2)
0000203A  504F      3329          addq.w    #8,A7
                    3330   ; return ;
0000203C  6000 0076 3331          bra       SetBreakPoint_15
                    3332   SetBreakPoint_16:
                    3333   ; }
                    3334   ; if(BreakPointSetOrCleared[i] == 0) {
00002040  2002      3335          move.l    D2,D0
00002042  E588      3336          lsl.l     #2,D0
00002044  2033 0800 3337          move.l    0(A3,D0.L),D0
00002048  6600 0064 3338          bne       SetBreakPoint_18
                    3339   ; // set BP here
                    3340   ; BreakPointSetOrCleared[i] = 1 ;                                 // mark this breakpoint as set
0000204C  2002      3341          move.l    D2,D0
0000204E  E588      3342          lsl.l     #2,D0
00002050  27BC 0000 3343          move.l    #1,0(A3,D0.L)
00002054  0001 0800 
                    3344   ; BreakPointInstruction[i] = *ProgramBreakPointAddress ;          // copy the user program instruction here so we can put it back afterwards
00002058  2044      3345          move.l    D4,A0
0000205A  2002      3346          move.l    D2,D0
0000205C  E388      3347          lsl.l     #1,D0
0000205E  43F9 0803 3348          lea       _BreakPointInstruction.L,A1
00002062  014E      
00002064  3390 0800 3349          move.w    (A0),0(A1,D0.L)
                    3350   ; DisassembleInstruction(ProgramBreakPointAddress) ;
00002068  2F04      3351          move.l    D4,-(A7)
0000206A  4EB9 0000 3352          jsr       _DisassembleInstruction
0000206E  34D0      
00002070  584F      3353          addq.w    #4,A7
                    3354   ; FormatInstructionForTrace() ;
00002072  4EB8 12EA 3355          jsr       _FormatInstructionForTrace
                    3356   ; printf("\r\nBreak Point Set at Address: [$%08x], Instruction = %s", ProgramBreakPointAddress, Instruction) ;
00002076  4879 0803 3357          pea       _Instruction.L
0000207A  04E2      
0000207C  2F04      3358          move.l    D4,-(A7)
0000207E  4879 0000 3359          pea       @m68kde~1_95.L
00002082  67D2      
00002084  4E92      3360          jsr       (A2)
00002086  DEFC 000C 3361          add.w     #12,A7
                    3362   ; *ProgramBreakPointAddress = (unsigned short int)(0x4e4e)    ;   // put a Trap14 instruction at the user specified address
0000208A  2044      3363          move.l    D4,A0
0000208C  30BC 4E4E 3364          move.w    #20046,(A0)
                    3365   ; BreakPointAddress[i] = BPAddress ;                              // record the address of this break point in the debugger
00002090  2002      3366          move.l    D2,D0
00002092  E588      3367          lsl.l     #2,D0
00002094  41F9 0803 3368          lea       _BreakPointAddress.L,A0
00002098  012E      
0000209A  2183 0800 3369          move.l    D3,0(A0,D0.L)
                    3370   ; printf("\r\n") ;
0000209E  4879 0000 3371          pea       @m68kde~1_96.L
000020A2  680A      
000020A4  4E92      3372          jsr       (A2)
000020A6  584F      3373          addq.w    #4,A7
                    3374   ; BreakPointDisplay() ;       // display the break points
000020A8  4EB8 1B30 3375          jsr       _BreakPointDisplay
                    3376   ; return ;
000020AC  6006      3377          bra.s     SetBreakPoint_15
                    3378   SetBreakPoint_18:
000020AE  5282      3379          addq.l    #1,D2
000020B0  6000 FF64 3380          bra       SetBreakPoint_13
                    3381   SetBreakPoint_15:
000020B4  4CDF 0C1C 3382          movem.l   (A7)+,D2/D3/D4/A2/A3
000020B8  4E5E      3383          unlk      A6
000020BA  4E75      3384          rts
                    3385   ; }
                    3386   ; }
                    3387   ; }
                    3388   ; void SetWatchPoint(void)
                    3389   ; {
                    3390   _SetWatchPoint:
000020BC  4E56 FFF8 3391          link      A6,#-8
000020C0  48E7 3030 3392          movem.l   D2/D3/A2/A3,-(A7)
000020C4  45F9 0000 3393          lea       _printf.L,A2
000020C8  556E      
000020CA  47F9 0803 3394          lea       _WatchPointSetOrCleared.L,A3
000020CE  01A2      
                    3395   ; int i ;
                    3396   ; int WPNumber;
                    3397   ; int WPAddress;
                    3398   ; volatile unsigned short int *ProgramWatchPointAddress ;
                    3399   ; // see if any free break points
                    3400   ; for(i = 0; i < 8; i ++) {
000020D0  4282      3401          clr.l     D2
                    3402   SetWatchPoint_1:
000020D2  0C82 0000 3403          cmp.l     #8,D2
000020D6  0008      
000020D8  6C10      3404          bge.s     SetWatchPoint_3
                    3405   ; if( WatchPointSetOrCleared[i] == 0)
000020DA  2002      3406          move.l    D2,D0
000020DC  E588      3407          lsl.l     #2,D0
000020DE  2033 0800 3408          move.l    0(A3,D0.L),D0
000020E2  6602      3409          bne.s     SetWatchPoint_4
                    3410   ; break ;         // if spare WP found allow user to set it
000020E4  6004      3411          bra.s     SetWatchPoint_3
                    3412   SetWatchPoint_4:
000020E6  5282      3413          addq.l    #1,D2
000020E8  60E8      3414          bra       SetWatchPoint_1
                    3415   SetWatchPoint_3:
                    3416   ; }
                    3417   ; if(i == 8) {
000020EA  0C82 0000 3418          cmp.l     #8,D2
000020EE  0008      
000020F0  660E      3419          bne.s     SetWatchPoint_6
                    3420   ; printf("\r\nNo FREE Watch Points.....") ;
000020F2  4879 0000 3421          pea       @m68kde~1_97.L
000020F6  680E      
000020F8  4E92      3422          jsr       (A2)
000020FA  584F      3423          addq.w    #4,A7
                    3424   ; return ;
000020FC  6000 008C 3425          bra       SetWatchPoint_11
                    3426   SetWatchPoint_6:
                    3427   ; }
                    3428   ; printf("\r\nWatch Point Address: ") ;
00002100  4879 0000 3429          pea       @m68kde~1_98.L
00002104  682A      
00002106  4E92      3430          jsr       (A2)
00002108  584F      3431          addq.w    #4,A7
                    3432   ; WPAddress = Get8HexDigits(0) ;
0000210A  42A7      3433          clr.l     -(A7)
0000210C  4EB8 0CA4 3434          jsr       _Get8HexDigits
00002110  584F      3435          addq.w    #4,A7
00002112  2600      3436          move.l    D0,D3
                    3437   ; // search for first free wp or existing same wp
                    3438   ; for(i = 0; i < 8; i++)  {
00002114  4282      3439          clr.l     D2
                    3440   SetWatchPoint_9:
00002116  0C82 0000 3441          cmp.l     #8,D2
0000211A  0008      
0000211C  6C00 006C 3442          bge       SetWatchPoint_11
                    3443   ; if(WatchPointAddress[i] == WPAddress && WPAddress != 0)   {     //so we can set a wp at 0
00002120  2002      3444          move.l    D2,D0
00002122  E588      3445          lsl.l     #2,D0
00002124  41F9 0803 3446          lea       _WatchPointAddress.L,A0
00002128  0182      
0000212A  B6B0 0800 3447          cmp.l     0(A0,D0.L),D3
0000212E  6614      3448          bne.s     SetWatchPoint_12
00002130  4A83      3449          tst.l     D3
00002132  6710      3450          beq.s     SetWatchPoint_12
                    3451   ; printf("\r\nError: Watch Point Already Set at Address : %08x\r\n", WPAddress) ;
00002134  2F03      3452          move.l    D3,-(A7)
00002136  4879 0000 3453          pea       @m68kde~1_99.L
0000213A  6842      
0000213C  4E92      3454          jsr       (A2)
0000213E  504F      3455          addq.w    #8,A7
                    3456   ; return ;
00002140  6000 0048 3457          bra       SetWatchPoint_11
                    3458   SetWatchPoint_12:
                    3459   ; }
                    3460   ; if(WatchPointSetOrCleared[i] == 0) {
00002144  2002      3461          move.l    D2,D0
00002146  E588      3462          lsl.l     #2,D0
00002148  2033 0800 3463          move.l    0(A3,D0.L),D0
0000214C  6600 0038 3464          bne       SetWatchPoint_14
                    3465   ; WatchPointSetOrCleared[i] = 1 ;                                 // mark this watchpoint as set
00002150  2002      3466          move.l    D2,D0
00002152  E588      3467          lsl.l     #2,D0
00002154  27BC 0000 3468          move.l    #1,0(A3,D0.L)
00002158  0001 0800 
                    3469   ; printf("\r\nWatch Point Set at Address: [$%08x]", WPAddress) ;
0000215C  2F03      3470          move.l    D3,-(A7)
0000215E  4879 0000 3471          pea       @m68kde~1_100.L
00002162  6878      
00002164  4E92      3472          jsr       (A2)
00002166  504F      3473          addq.w    #8,A7
                    3474   ; WatchPointAddress[i] = WPAddress ;                              // record the address of this watch point in the debugger
00002168  2002      3475          move.l    D2,D0
0000216A  E588      3476          lsl.l     #2,D0
0000216C  41F9 0803 3477          lea       _WatchPointAddress.L,A0
00002170  0182      
00002172  2183 0800 3478          move.l    D3,0(A0,D0.L)
                    3479   ; printf("\r\n") ;
00002176  4879 0000 3480          pea       @m68kde~1_101.L
0000217A  689E      
0000217C  4E92      3481          jsr       (A2)
0000217E  584F      3482          addq.w    #4,A7
                    3483   ; WatchPointDisplay() ;       // display the break points
00002180  4EB8 1C2A 3484          jsr       _WatchPointDisplay
                    3485   ; return ;
00002184  6004      3486          bra.s     SetWatchPoint_11
                    3487   SetWatchPoint_14:
00002186  5282      3488          addq.l    #1,D2
00002188  608C      3489          bra       SetWatchPoint_9
                    3490   SetWatchPoint_11:
0000218A  4CDF 0C0C 3491          movem.l   (A7)+,D2/D3/A2/A3
0000218E  4E5E      3492          unlk      A6
00002190  4E75      3493          rts
                    3494   ; }
                    3495   ; }
                    3496   ; }
                    3497   ; void HandleBreakPoint(void)
                    3498   ; {
                    3499   _HandleBreakPoint:
00002192  4E56 FFFC 3500          link      A6,#-4
00002196  48E7 0038 3501          movem.l   A2/A3/A4,-(A7)
0000219A  45F9 0803 3502          lea       _i.L,A2
0000219E  00C4      
000021A0  47F9 0000 3503          lea       _printf.L,A3
000021A4  556E      
000021A6  49F9 0803 3504          lea       _PC.L,A4
000021AA  0120      
                    3505   ; volatile unsigned short int *ProgramBreakPointAddress ;
                    3506   ; // now we have to put the break point back to run the instruction
                    3507   ; // PC will contain the address of the TRAP instruction but advanced by two bytes so lets play with that
                    3508   ; PC = PC - 2 ;  // ready for user to resume after reaching breakpoint
000021AC  5594      3509          subq.l    #2,(A4)
                    3510   ; printf("\r\n\r\n\r\n\r\n@BREAKPOINT") ;
000021AE  4879 0000 3511          pea       @m68kde~1_102.L
000021B2  68A2      
000021B4  4E93      3512          jsr       (A3)
000021B6  584F      3513          addq.w    #4,A7
                    3514   ; printf("\r\nSingle Step : [ON]") ;
000021B8  4879 0000 3515          pea       @m68kde~1_103.L
000021BC  68B6      
000021BE  4E93      3516          jsr       (A3)
000021C0  584F      3517          addq.w    #4,A7
                    3518   ; printf("\r\nBreakPoints : [Enabled]") ;
000021C2  4879 0000 3519          pea       @m68kde~1_104.L
000021C6  68CC      
000021C8  4E93      3520          jsr       (A3)
000021CA  584F      3521          addq.w    #4,A7
                    3522   ; // now clear the break point (put original instruction back)
                    3523   ; ProgramBreakPointAddress = PC ;
000021CC  2D54 FFFC 3524          move.l    (A4),-4(A6)
                    3525   ; for(i = 0; i < 8; i ++) {
000021D0  4292      3526          clr.l     (A2)
                    3527   HandleBreakPoint_1:
000021D2  2012      3528          move.l    (A2),D0
000021D4  0C80 0000 3529          cmp.l     #8,D0
000021D8  0008      
000021DA  6400 0056 3530          bhs       HandleBreakPoint_3
                    3531   ; if(BreakPointAddress[i] == PC) {        // if we have found the breakpoint
000021DE  2012      3532          move.l    (A2),D0
000021E0  E588      3533          lsl.l     #2,D0
000021E2  41F9 0803 3534          lea       _BreakPointAddress.L,A0
000021E6  012E      
000021E8  2230 0800 3535          move.l    0(A0,D0.L),D1
000021EC  B294      3536          cmp.l     (A4),D1
000021EE  6600 003E 3537          bne       HandleBreakPoint_4
                    3538   ; BreakPointAddress[i] = 0 ;
000021F2  2012      3539          move.l    (A2),D0
000021F4  E588      3540          lsl.l     #2,D0
000021F6  41F9 0803 3541          lea       _BreakPointAddress.L,A0
000021FA  012E      
000021FC  42B0 0800 3542          clr.l     0(A0,D0.L)
                    3543   ; BreakPointSetOrCleared[i] = 0 ;
00002200  2012      3544          move.l    (A2),D0
00002202  E588      3545          lsl.l     #2,D0
00002204  41F9 0803 3546          lea       _BreakPointSetOrCleared.L,A0
00002208  015E      
0000220A  42B0 0800 3547          clr.l     0(A0,D0.L)
                    3548   ; *ProgramBreakPointAddress = BreakPointInstruction[i] ;  // put original instruction back
0000220E  2012      3549          move.l    (A2),D0
00002210  E388      3550          lsl.l     #1,D0
00002212  41F9 0803 3551          lea       _BreakPointInstruction.L,A0
00002216  014E      
00002218  226E FFFC 3552          move.l    -4(A6),A1
0000221C  32B0 0800 3553          move.w    0(A0,D0.L),(A1)
                    3554   ; BreakPointInstruction[i] = 0 ;
00002220  2012      3555          move.l    (A2),D0
00002222  E388      3556          lsl.l     #1,D0
00002224  41F9 0803 3557          lea       _BreakPointInstruction.L,A0
00002228  014E      
0000222A  4270 0800 3558          clr.w     0(A0,D0.L)
                    3559   HandleBreakPoint_4:
0000222E  5292      3560          addq.l    #1,(A2)
00002230  60A0      3561          bra       HandleBreakPoint_1
                    3562   HandleBreakPoint_3:
                    3563   ; }
                    3564   ; }
                    3565   ; DumpRegisters() ;
00002232  4EB8 135E 3566          jsr       _DumpRegisters
                    3567   ; printf("\r\nPress <SPACE> to Execute Next Instruction");
00002236  4879 0000 3568          pea       @m68kde~1_105.L
0000223A  68E6      
0000223C  4E93      3569          jsr       (A3)
0000223E  584F      3570          addq.w    #4,A7
                    3571   ; printf("\r\nPress <ESC> to Resume User Program\r\n") ;
00002240  4879 0000 3572          pea       @m68kde~1_106.L
00002244  6912      
00002246  4E93      3573          jsr       (A3)
00002248  584F      3574          addq.w    #4,A7
                    3575   ; menu() ;
0000224A  4EB9 0000 3576          jsr       _menu
0000224E  24A0      
00002250  4CDF 1C00 3577          movem.l   (A7)+,A2/A3/A4
00002254  4E5E      3578          unlk      A6
00002256  4E75      3579          rts
                    3580   ; }
                    3581   ; void UnknownCommand()
                    3582   ; {
                    3583   _UnknownCommand:
                    3584   ; printf("\r\nUnknown Command.....\r\n") ;
00002258  4879 0000 3585          pea       @m68kde~1_107.L
0000225C  693A      
0000225E  4EB9 0000 3586          jsr       _printf
00002262  556E      
00002264  584F      3587          addq.w    #4,A7
                    3588   ; Help() ;
00002266  4EB9 0000 3589          jsr       _Help
0000226A  23BC      
0000226C  4E75      3590          rts
                    3591   ; }
                    3592   ; // system when the users program executes a TRAP #15 instruction to halt program and return to debug monitor
                    3593   ; void CallDebugMonitor(void)
                    3594   ; {
                    3595   _CallDebugMonitor:
                    3596   ; printf("\r\nProgram Ended (TRAP #15)....") ;
0000226E  4879 0000 3597          pea       @m68kde~1_108.L
00002272  6954      
00002274  4EB9 0000 3598          jsr       _printf
00002278  556E      
0000227A  584F      3599          addq.w    #4,A7
                    3600   ; menu();
0000227C  4EB9 0000 3601          jsr       _menu
00002280  24A0      
00002282  4E75      3602          rts
                    3603   ; }
                    3604   ; void Breakpoint(void)
                    3605   ; {
                    3606   _Breakpoint:
00002284  2F02      3607          move.l    D2,-(A7)
                    3608   ; char c;
                    3609   ; c = toupper(_getch());
00002286  2F00      3610          move.l    D0,-(A7)
00002288  4EB8 0B68 3611          jsr       __getch
0000228C  2200      3612          move.l    D0,D1
0000228E  201F      3613          move.l    (A7)+,D0
00002290  2F01      3614          move.l    D1,-(A7)
00002292  4EB9 0000 3615          jsr       _toupper
00002296  5542      
00002298  584F      3616          addq.w    #4,A7
0000229A  1400      3617          move.b    D0,D2
                    3618   ; if( c == (char)('D'))                                      // BreakPoint Display
0000229C  0C02 0044 3619          cmp.b     #68,D2
000022A0  6608      3620          bne.s     Breakpoint_1
                    3621   ; BreakPointDisplay() ;
000022A2  4EB8 1B30 3622          jsr       _BreakPointDisplay
000022A6  6000 0054 3623          bra       Breakpoint_10
                    3624   Breakpoint_1:
                    3625   ; else if(c == (char)('K')) {                                 // breakpoint Kill
000022AA  0C02 004B 3626          cmp.b     #75,D2
000022AE  6630      3627          bne.s     Breakpoint_3
                    3628   ; printf("\r\nKill All Break Points...(y/n)?") ;
000022B0  4879 0000 3629          pea       @m68kde~1_109.L
000022B4  6974      
000022B6  4EB9 0000 3630          jsr       _printf
000022BA  556E      
000022BC  584F      3631          addq.w    #4,A7
                    3632   ; c = toupper(_getch());
000022BE  2F00      3633          move.l    D0,-(A7)
000022C0  4EB8 0B68 3634          jsr       __getch
000022C4  2200      3635          move.l    D0,D1
000022C6  201F      3636          move.l    (A7)+,D0
000022C8  2F01      3637          move.l    D1,-(A7)
000022CA  4EB9 0000 3638          jsr       _toupper
000022CE  5542      
000022D0  584F      3639          addq.w    #4,A7
000022D2  1400      3640          move.b    D0,D2
                    3641   ; if(c == (char)('Y'))
000022D4  0C02 0059 3642          cmp.b     #89,D2
000022D8  6604      3643          bne.s     Breakpoint_5
                    3644   ; KillAllBreakPoints() ;
000022DA  4EB8 1EEE 3645          jsr       _KillAllBreakPoints
                    3646   Breakpoint_5:
000022DE  601C      3647          bra.s     Breakpoint_10
                    3648   Breakpoint_3:
                    3649   ; }
                    3650   ; else if(c == (char)('S')) {
000022E0  0C02 0053 3651          cmp.b     #83,D2
000022E4  6606      3652          bne.s     Breakpoint_7
                    3653   ; SetBreakPoint() ;
000022E6  4EB8 1F86 3654          jsr       _SetBreakPoint
000022EA  6010      3655          bra.s     Breakpoint_10
                    3656   Breakpoint_7:
                    3657   ; }
                    3658   ; else if(c == (char)('C')) {
000022EC  0C02 0043 3659          cmp.b     #67,D2
000022F0  6606      3660          bne.s     Breakpoint_9
                    3661   ; BreakPointClear() ;
000022F2  4EB8 1CD6 3662          jsr       _BreakPointClear
000022F6  6004      3663          bra.s     Breakpoint_10
                    3664   Breakpoint_9:
                    3665   ; }
                    3666   ; else
                    3667   ; UnknownCommand() ;
000022F8  4EB8 2258 3668          jsr       _UnknownCommand
                    3669   Breakpoint_10:
000022FC  241F      3670          move.l    (A7)+,D2
000022FE  4E75      3671          rts
                    3672   ; }
                    3673   ; void Watchpoint(void)
                    3674   ; {
                    3675   _Watchpoint:
00002300  2F02      3676          move.l    D2,-(A7)
                    3677   ; char c;
                    3678   ; c = toupper(_getch());
00002302  2F00      3679          move.l    D0,-(A7)
00002304  4EB8 0B68 3680          jsr       __getch
00002308  2200      3681          move.l    D0,D1
0000230A  201F      3682          move.l    (A7)+,D0
0000230C  2F01      3683          move.l    D1,-(A7)
0000230E  4EB9 0000 3684          jsr       _toupper
00002312  5542      
00002314  584F      3685          addq.w    #4,A7
00002316  1400      3686          move.b    D0,D2
                    3687   ; if( c == (char)('D'))                                      // WatchPoint Display
00002318  0C02 0044 3688          cmp.b     #68,D2
0000231C  6608      3689          bne.s     Watchpoint_1
                    3690   ; WatchPointDisplay() ;
0000231E  4EB8 1C2A 3691          jsr       _WatchPointDisplay
00002322  6000 0054 3692          bra       Watchpoint_10
                    3693   Watchpoint_1:
                    3694   ; else if(c == (char)('K')) {                                 // wtahcpoint Kill
00002326  0C02 004B 3695          cmp.b     #75,D2
0000232A  6630      3696          bne.s     Watchpoint_3
                    3697   ; printf("\r\nKill All Watch Points...(y/n)?") ;
0000232C  4879 0000 3698          pea       @m68kde~1_110.L
00002330  6996      
00002332  4EB9 0000 3699          jsr       _printf
00002336  556E      
00002338  584F      3700          addq.w    #4,A7
                    3701   ; c = toupper(_getch());
0000233A  2F00      3702          move.l    D0,-(A7)
0000233C  4EB8 0B68 3703          jsr       __getch
00002340  2200      3704          move.l    D0,D1
00002342  201F      3705          move.l    (A7)+,D0
00002344  2F01      3706          move.l    D1,-(A7)
00002346  4EB9 0000 3707          jsr       _toupper
0000234A  5542      
0000234C  584F      3708          addq.w    #4,A7
0000234E  1400      3709          move.b    D0,D2
                    3710   ; if(c == (char)('Y'))
00002350  0C02 0059 3711          cmp.b     #89,D2
00002354  6604      3712          bne.s     Watchpoint_5
                    3713   ; KillAllWatchPoints() ;
00002356  4EB8 1F56 3714          jsr       _KillAllWatchPoints
                    3715   Watchpoint_5:
0000235A  601C      3716          bra.s     Watchpoint_10
                    3717   Watchpoint_3:
                    3718   ; }
                    3719   ; else if(c == (char)('S')) {
0000235C  0C02 0053 3720          cmp.b     #83,D2
00002360  6606      3721          bne.s     Watchpoint_7
                    3722   ; SetWatchPoint() ;
00002362  4EB8 20BC 3723          jsr       _SetWatchPoint
00002366  6010      3724          bra.s     Watchpoint_10
                    3725   Watchpoint_7:
                    3726   ; }
                    3727   ; else if(c == (char)('C')) {
00002368  0C02 0043 3728          cmp.b     #67,D2
0000236C  6606      3729          bne.s     Watchpoint_9
                    3730   ; WatchPointClear() ;
0000236E  4EB8 1DB0 3731          jsr       _WatchPointClear
00002372  6004      3732          bra.s     Watchpoint_10
                    3733   Watchpoint_9:
                    3734   ; }
                    3735   ; else
                    3736   ; UnknownCommand() ;
00002374  4EB8 2258 3737          jsr       _UnknownCommand
                    3738   Watchpoint_10:
00002378  241F      3739          move.l    (A7)+,D2
0000237A  4E75      3740          rts
                    3741   ; }
                    3742   ; void DMenu(void)
                    3743   ; {
                    3744   _DMenu:
0000237C  2F02      3745          move.l    D2,-(A7)
                    3746   ; char c;
                    3747   ; c = toupper(_getch());
0000237E  2F00      3748          move.l    D0,-(A7)
00002380  4EB8 0B68 3749          jsr       __getch
00002384  2200      3750          move.l    D0,D1
00002386  201F      3751          move.l    (A7)+,D0
00002388  2F01      3752          move.l    D1,-(A7)
0000238A  4EB9 0000 3753          jsr       _toupper
0000238E  5542      
00002390  584F      3754          addq.w    #4,A7
00002392  1400      3755          move.b    D0,D2
                    3756   ; if( c == (char)('U'))                                     // Dump Memory
00002394  0C02 0055 3757          cmp.b     #85,D2
00002398  6606      3758          bne.s     DMenu_1
                    3759   ; DumpMemory() ;
0000239A  4EB8 0EE0 3760          jsr       _DumpMemory
0000239E  6018      3761          bra.s     DMenu_4
                    3762   DMenu_1:
                    3763   ; else if(c == (char)('I'))   {
000023A0  0C02 0049 3764          cmp.b     #73,D2
000023A4  660E      3765          bne.s     DMenu_3
                    3766   ; DisableBreakPoints() ;
000023A6  4EB8 1E52 3767          jsr       _DisableBreakPoints
                    3768   ; DisassembleProgram() ;
000023AA  4EB8 0D00 3769          jsr       _DisassembleProgram
                    3770   ; EnableBreakPoints() ;
000023AE  4EB8 1EA6 3771          jsr       _EnableBreakPoints
000023B2  6004      3772          bra.s     DMenu_4
                    3773   DMenu_3:
                    3774   ; }
                    3775   ; else
                    3776   ; UnknownCommand() ;
000023B4  4EB8 2258 3777          jsr       _UnknownCommand
                    3778   DMenu_4:
000023B8  241F      3779          move.l    (A7)+,D2
000023BA  4E75      3780          rts
                    3781   ; }
                    3782   ; void Help(void)
                    3783   ; {
                    3784   _Help:
000023BC  48E7 2020 3785          movem.l   D2/A2,-(A7)
000023C0  45F9 0000 3786          lea       _printf.L,A2
000023C4  556E      
                    3787   ; char *banner = "\r\n----------------------------------------------------------------" ;
000023C6  41F9 0000 3788          lea       @m68kde~1_111.L,A0
000023CA  69B8      
000023CC  2408      3789          move.l    A0,D2
                    3790   ; printf(banner) ;
000023CE  2F02      3791          move.l    D2,-(A7)
000023D0  4E92      3792          jsr       (A2)
000023D2  584F      3793          addq.w    #4,A7
                    3794   ; printf("\r\n  Debugger Command Summary") ;
000023D4  4879 0000 3795          pea       @m68kde~1_112.L
000023D8  69FC      
000023DA  4E92      3796          jsr       (A2)
000023DC  584F      3797          addq.w    #4,A7
                    3798   ; printf(banner) ;
000023DE  2F02      3799          move.l    D2,-(A7)
000023E0  4E92      3800          jsr       (A2)
000023E2  584F      3801          addq.w    #4,A7
                    3802   ; printf("\r\n  .(reg)       - Change Registers: e.g A0-A7,D0-D7,PC,SSP,USP,SR");
000023E4  4879 0000 3803          pea       @m68kde~1_113.L
000023E8  6A1A      
000023EA  4E92      3804          jsr       (A2)
000023EC  584F      3805          addq.w    #4,A7
                    3806   ; printf("\r\n  BD/BS/BC/BK  - Break Point: Display/Set/Clear/Kill") ;
000023EE  4879 0000 3807          pea       @m68kde~1_114.L
000023F2  6A5E      
000023F4  4E92      3808          jsr       (A2)
000023F6  584F      3809          addq.w    #4,A7
                    3810   ; printf("\r\n  C            - Copy Program from Flash to Main Memory") ;
000023F8  4879 0000 3811          pea       @m68kde~1_115.L
000023FC  6A96      
000023FE  4E92      3812          jsr       (A2)
00002400  584F      3813          addq.w    #4,A7
                    3814   ; printf("\r\n  DI           - Disassemble Program");
00002402  4879 0000 3815          pea       @m68kde~1_116.L
00002406  6AD0      
00002408  4E92      3816          jsr       (A2)
0000240A  584F      3817          addq.w    #4,A7
                    3818   ; printf("\r\n  DU           - Dump Memory Contents to Screen") ;
0000240C  4879 0000 3819          pea       @m68kde~1_117.L
00002410  6AF8      
00002412  4E92      3820          jsr       (A2)
00002414  584F      3821          addq.w    #4,A7
                    3822   ; printf("\r\n  E            - Enter String into Memory") ;
00002416  4879 0000 3823          pea       @m68kde~1_118.L
0000241A  6B2A      
0000241C  4E92      3824          jsr       (A2)
0000241E  584F      3825          addq.w    #4,A7
                    3826   ; printf("\r\n  F            - Fill Memory with Data") ;
00002420  4879 0000 3827          pea       @m68kde~1_119.L
00002424  6B56      
00002426  4E92      3828          jsr       (A2)
00002428  584F      3829          addq.w    #4,A7
                    3830   ; printf("\r\n  G            - Go Program Starting at Address: $%08X", PC) ;
0000242A  2F39 0803 3831          move.l    _PC.L,-(A7)
0000242E  0120      
00002430  4879 0000 3832          pea       @m68kde~1_120.L
00002434  6B80      
00002436  4E92      3833          jsr       (A2)
00002438  504F      3834          addq.w    #8,A7
                    3835   ; printf("\r\n  L            - Load Program (.HEX file) from Laptop") ;
0000243A  4879 0000 3836          pea       @m68kde~1_121.L
0000243E  6BBA      
00002440  4E92      3837          jsr       (A2)
00002442  584F      3838          addq.w    #4,A7
                    3839   ; printf("\r\n  M            - Memory Examine and Change");
00002444  4879 0000 3840          pea       @m68kde~1_122.L
00002448  6BF2      
0000244A  4E92      3841          jsr       (A2)
0000244C  584F      3842          addq.w    #4,A7
                    3843   ; printf("\r\n  P            - Program Flash Memory with User Program") ;
0000244E  4879 0000 3844          pea       @m68kde~1_123.L
00002452  6C20      
00002454  4E92      3845          jsr       (A2)
00002456  584F      3846          addq.w    #4,A7
                    3847   ; printf("\r\n  R            - Display 68000 Registers") ;
00002458  4879 0000 3848          pea       @m68kde~1_124.L
0000245C  6C5A      
0000245E  4E92      3849          jsr       (A2)
00002460  584F      3850          addq.w    #4,A7
                    3851   ; printf("\r\n  S            - Toggle ON/OFF Single Step Mode") ;
00002462  4879 0000 3852          pea       @m68kde~1_125.L
00002466  6C86      
00002468  4E92      3853          jsr       (A2)
0000246A  584F      3854          addq.w    #4,A7
                    3855   ; printf("\r\n  TM           - Test Memory") ;
0000246C  4879 0000 3856          pea       @m68kde~1_126.L
00002470  6CB8      
00002472  4E92      3857          jsr       (A2)
00002474  584F      3858          addq.w    #4,A7
                    3859   ; printf("\r\n  TS           - Test Switches: SW7-0") ;
00002476  4879 0000 3860          pea       @m68kde~1_127.L
0000247A  6CD8      
0000247C  4E92      3861          jsr       (A2)
0000247E  584F      3862          addq.w    #4,A7
                    3863   ; printf("\r\n  TD           - Test Displays: LEDs and 7-Segment") ;
00002480  4879 0000 3864          pea       @m68kde~1_128.L
00002484  6D00      
00002486  4E92      3865          jsr       (A2)
00002488  584F      3866          addq.w    #4,A7
                    3867   ; printf("\r\n  WD/WS/WC/WK  - Watch Point: Display/Set/Clear/Kill") ;
0000248A  4879 0000 3868          pea       @m68kde~1_129.L
0000248E  6D36      
00002490  4E92      3869          jsr       (A2)
00002492  584F      3870          addq.w    #4,A7
                    3871   ; printf(banner) ;
00002494  2F02      3872          move.l    D2,-(A7)
00002496  4E92      3873          jsr       (A2)
00002498  584F      3874          addq.w    #4,A7
0000249A  4CDF 0404 3875          movem.l   (A7)+,D2/A2
0000249E  4E75      3876          rts
                    3877   ; }
                    3878   ; void menu(void)
                    3879   ; {
                    3880   _menu:
000024A0  48E7 303C 3881          movem.l   D2/D3/A2/A3/A4/A5,-(A7)
000024A4  45F9 0000 3882          lea       _printf.L,A2
000024A8  556E      
000024AA  47F9 0803 3883          lea       _Trace.L,A3
000024AE  00D8      
000024B0  49F9 0803 3884          lea       _x.L,A4
000024B4  00C8      
000024B6  4BF9 0803 3885          lea       _SR.L,A5
000024BA  012C      
                    3886   ; char c,c1 ;
                    3887   ; while(1)    {
                    3888   menu_1:
                    3889   ; FlushKeyboard() ;               // dump unread characters from keyboard
000024BC  4EB8 0BA6 3890          jsr       _FlushKeyboard
                    3891   ; printf("\r\n#") ;
000024C0  4879 0000 3892          pea       @m68kde~1_130.L
000024C4  6D6E      
000024C6  4E92      3893          jsr       (A2)
000024C8  584F      3894          addq.w    #4,A7
                    3895   ; c = toupper(_getch());
000024CA  2F00      3896          move.l    D0,-(A7)
000024CC  4EB8 0B68 3897          jsr       __getch
000024D0  2200      3898          move.l    D0,D1
000024D2  201F      3899          move.l    (A7)+,D0
000024D4  2F01      3900          move.l    D1,-(A7)
000024D6  4EB9 0000 3901          jsr       _toupper
000024DA  5542      
000024DC  584F      3902          addq.w    #4,A7
000024DE  1400      3903          move.b    D0,D2
                    3904   ; if( c == (char)('L'))                  // load s record file
000024E0  0C02 004C 3905          cmp.b     #76,D2
000024E4  6608      3906          bne.s     menu_4
                    3907   ; Load_SRecordFile() ;
000024E6  4EB8 104A 3908          jsr       _Load_SRecordFile
000024EA  6000 021E 3909          bra       menu_46
                    3910   menu_4:
                    3911   ; else if( c == (char)('D'))             // dump memory
000024EE  0C02 0044 3912          cmp.b     #68,D2
000024F2  6608      3913          bne.s     menu_6
                    3914   ; DMenu() ;
000024F4  4EB8 237C 3915          jsr       _DMenu
000024F8  6000 0210 3916          bra       menu_46
                    3917   menu_6:
                    3918   ; else if( c == (char)('E'))             // Enter String into memory
000024FC  0C02 0045 3919          cmp.b     #69,D2
00002500  660A      3920          bne.s     menu_8
                    3921   ; EnterString() ;
00002502  4EB9 0000 3922          jsr       _EnterString
00002506  2852      
00002508  6000 0200 3923          bra       menu_46
                    3924   menu_8:
                    3925   ; else if( c == (char)('F'))             // fill memory
0000250C  0C02 0046 3926          cmp.b     #70,D2
00002510  6608      3927          bne.s     menu_10
                    3928   ; FillMemory() ;
00002512  4EB8 0FD0 3929          jsr       _FillMemory
00002516  6000 01F2 3930          bra       menu_46
                    3931   menu_10:
                    3932   ; else if( c == (char)('G'))  {           // go user program
0000251A  0C02 0047 3933          cmp.b     #71,D2
0000251E  6626      3934          bne.s     menu_12
                    3935   ; printf("\r\nProgram Running.....") ;
00002520  4879 0000 3936          pea       @m68kde~1_131.L
00002524  6D72      
00002526  4E92      3937          jsr       (A2)
00002528  584F      3938          addq.w    #4,A7
                    3939   ; printf("\r\nPress <RESET> button <Key0> on DE1 to stop") ;
0000252A  4879 0000 3940          pea       @m68kde~1_132.L
0000252E  6D8A      
00002530  4E92      3941          jsr       (A2)
00002532  584F      3942          addq.w    #4,A7
                    3943   ; GoFlag = 1 ;
00002534  23FC 0000 3944          move.l    #1,_GoFlag.L
00002538  0001 0803 
0000253C  00DC      
                    3945   ; go() ;
0000253E  4EB8 08B8 3946          jsr       _go
00002542  6000 01C6 3947          bra       menu_46
                    3948   menu_12:
                    3949   ; }
                    3950   ; else if( c == (char)('M'))           // memory examine and modify
00002546  0C02 004D 3951          cmp.b     #77,D2
0000254A  6608      3952          bne.s     menu_14
                    3953   ; MemoryChange() ;
0000254C  4EB8 11D8 3954          jsr       _MemoryChange
00002550  6000 01B8 3955          bra       menu_46
                    3956   menu_14:
                    3957   ; else if( c == (char)('P'))            // Program Flash Chip
00002554  0C02 0050 3958          cmp.b     #80,D2
00002558  6608      3959          bne.s     menu_16
                    3960   ; ProgramFlashChip() ;
0000255A  4EB8 12D8 3961          jsr       _ProgramFlashChip
0000255E  6000 01AA 3962          bra       menu_46
                    3963   menu_16:
                    3964   ; else if( c == (char)('C'))             // copy flash chip to ram and go
00002562  0C02 0043 3965          cmp.b     #67,D2
00002566  6608      3966          bne.s     menu_18
                    3967   ; LoadFromFlashChip();
00002568  4EB8 12DA 3968          jsr       _LoadFromFlashChip
0000256C  6000 019C 3969          bra       menu_46
                    3970   menu_18:
                    3971   ; else if( c == (char)('R'))             // dump registers
00002570  0C02 0052 3972          cmp.b     #82,D2
00002574  6608      3973          bne.s     menu_20
                    3974   ; DumpRegisters() ;
00002576  4EB8 135E 3975          jsr       _DumpRegisters
0000257A  6000 018E 3976          bra       menu_46
                    3977   menu_20:
                    3978   ; else if( c == (char)('.'))           // change registers
0000257E  0C02 002E 3979          cmp.b     #46,D2
00002582  6608      3980          bne.s     menu_22
                    3981   ; ChangeRegisters() ;
00002584  4EB8 1874 3982          jsr       _ChangeRegisters
00002588  6000 0180 3983          bra       menu_46
                    3984   menu_22:
                    3985   ; else if( c == (char)('B'))              // breakpoint command
0000258C  0C02 0042 3986          cmp.b     #66,D2
00002590  6608      3987          bne.s     menu_24
                    3988   ; Breakpoint() ;
00002592  4EB8 2284 3989          jsr       _Breakpoint
00002596  6000 0172 3990          bra       menu_46
                    3991   menu_24:
                    3992   ; else if( c == (char)('T'))  {          // Test command
0000259A  0C02 0054 3993          cmp.b     #84,D2
0000259E  6600 0046 3994          bne       menu_26
                    3995   ; c1 = toupper(_getch()) ;
000025A2  2F00      3996          move.l    D0,-(A7)
000025A4  4EB8 0B68 3997          jsr       __getch
000025A8  2200      3998          move.l    D0,D1
000025AA  201F      3999          move.l    (A7)+,D0
000025AC  2F01      4000          move.l    D1,-(A7)
000025AE  4EB9 0000 4001          jsr       _toupper
000025B2  5542      
000025B4  584F      4002          addq.w    #4,A7
000025B6  1600      4003          move.b    D0,D3
                    4004   ; if(c1 == (char)('M'))                    // memory test
000025B8  0C03 004D 4005          cmp.b     #77,D3
000025BC  6608      4006          bne.s     menu_28
                    4007   ; MemoryTest() ;
000025BE  4EB9 0000 4008          jsr       _MemoryTest
000025C2  28A2      
000025C4  601C      4009          bra.s     menu_33
                    4010   menu_28:
                    4011   ; else if( c1 == (char)('S'))              // Switch Test command
000025C6  0C03 0053 4012          cmp.b     #83,D3
000025CA  6606      4013          bne.s     menu_30
                    4014   ; SwitchTest() ;
000025CC  4EB8 0AA4 4015          jsr       _SwitchTest
000025D0  6010      4016          bra.s     menu_33
                    4017   menu_30:
                    4018   ; else if( c1 == (char)('D'))              // display Test command
000025D2  0C03 0044 4019          cmp.b     #68,D3
000025D6  6606      4020          bne.s     menu_32
                    4021   ; TestLEDS() ;
000025D8  4EB8 0A50 4022          jsr       _TestLEDS
000025DC  6004      4023          bra.s     menu_33
                    4024   menu_32:
                    4025   ; else
                    4026   ; UnknownCommand() ;
000025DE  4EB8 2258 4027          jsr       _UnknownCommand
                    4028   menu_33:
000025E2  6000 0126 4029          bra       menu_46
                    4030   menu_26:
                    4031   ; }
                    4032   ; else if( c == (char)(' ')) {             // Next instruction command
000025E6  0C02 0020 4033          cmp.b     #32,D2
000025EA  6636      4034          bne.s     menu_34
                    4035   ; DisableBreakPoints() ;
000025EC  4EB8 1E52 4036          jsr       _DisableBreakPoints
                    4037   ; if(Trace == 1 && GoFlag == 1)   {    // if the program is running and trace mode on then 'N' is valid
000025F0  2013      4038          move.l    (A3),D0
000025F2  0C80 0000 4039          cmp.l     #1,D0
000025F6  0001      
000025F8  661A      4040          bne.s     menu_36
000025FA  2039 0803 4041          move.l    _GoFlag.L,D0
000025FE  00DC      
00002600  0C80 0000 4042          cmp.l     #1,D0
00002604  0001      
00002606  660C      4043          bne.s     menu_36
                    4044   ; TraceException = 1 ;             // generate a trace exception for the next instruction if user wants to single step though next instruction
00002608  13FC 0001 4045          move.b    #1,4194314
0000260C  0040 000A 
                    4046   ; return ;
00002610  6000 00FC 4047          bra       menu_38
                    4048   menu_36:
                    4049   ; }
                    4050   ; else
                    4051   ; printf("\r\nError: Press 'G' first to start program") ;
00002614  4879 0000 4052          pea       @m68kde~1_133.L
00002618  6DB8      
0000261A  4E92      4053          jsr       (A2)
0000261C  584F      4054          addq.w    #4,A7
0000261E  6000 00EA 4055          bra       menu_46
                    4056   menu_34:
                    4057   ; }
                    4058   ; else if( c == (char)('S')) {             // single step
00002622  0C02 0053 4059          cmp.b     #83,D2
00002626  6600 008C 4060          bne       menu_39
                    4061   ; if(Trace == 0) {
0000262A  2013      4062          move.l    (A3),D0
0000262C  6600 0050 4063          bne       menu_41
                    4064   ; DisableBreakPoints() ;
00002630  4EB8 1E52 4065          jsr       _DisableBreakPoints
                    4066   ; printf("\r\nSingle Step  :[ON]") ;
00002634  4879 0000 4067          pea       @m68kde~1_134.L
00002638  6DE2      
0000263A  4E92      4068          jsr       (A2)
0000263C  584F      4069          addq.w    #4,A7
                    4070   ; printf("\r\nBreak Points :[Disabled]") ;
0000263E  4879 0000 4071          pea       @m68kde~1_135.L
00002642  6DF8      
00002644  4E92      4072          jsr       (A2)
00002646  584F      4073          addq.w    #4,A7
                    4074   ; SR = SR | (unsigned short int)(0x8000) ;    // set T bit in status register
00002648  0055 8000 4075          or.w      #32768,(A5)
                    4076   ; printf("\r\nPress 'G' to Trace Program from address $%X.....",PC) ;
0000264C  2F39 0803 4077          move.l    _PC.L,-(A7)
00002650  0120      
00002652  4879 0000 4078          pea       @m68kde~1_136.L
00002656  6E14      
00002658  4E92      4079          jsr       (A2)
0000265A  504F      4080          addq.w    #8,A7
                    4081   ; printf("\r\nPush <RESET Button> to Stop.....") ;
0000265C  4879 0000 4082          pea       @m68kde~1_137.L
00002660  6E48      
00002662  4E92      4083          jsr       (A2)
00002664  584F      4084          addq.w    #4,A7
                    4085   ; DumpRegisters() ;
00002666  4EB8 135E 4086          jsr       _DumpRegisters
                    4087   ; Trace = 1;
0000266A  26BC 0000 4088          move.l    #1,(A3)
0000266E  0001      
                    4089   ; TraceException = 1;
00002670  13FC 0001 4090          move.b    #1,4194314
00002674  0040 000A 
                    4091   ; x = *(unsigned int *)(0x00000074) ;       // simulate responding to a Level 5 IRQ by reading vector to reset Trace exception generator
00002678  28B8 0074 4092          move.l    116,(A4)
0000267C  6032      4093          bra.s     menu_42
                    4094   menu_41:
                    4095   ; }
                    4096   ; else {
                    4097   ; Trace = 0 ;
0000267E  4293      4098          clr.l     (A3)
                    4099   ; TraceException = 0 ;
00002680  4239 0040 4100          clr.b     4194314
00002684  000A      
                    4101   ; x = *(unsigned int *)(0x00000074) ;       // simulate responding to a Level 5 IRQ by reading vector to reset Trace exception generator
00002686  28B8 0074 4102          move.l    116,(A4)
                    4103   ; EnableBreakPoints() ;
0000268A  4EB8 1EA6 4104          jsr       _EnableBreakPoints
                    4105   ; SR = SR & (unsigned short int)(0x7FFF) ;    // clear T bit in status register
0000268E  0255 7FFF 4106          and.w     #32767,(A5)
                    4107   ; printf("\r\nSingle Step : [OFF]") ;
00002692  4879 0000 4108          pea       @m68kde~1_138.L
00002696  6E6C      
00002698  4E92      4109          jsr       (A2)
0000269A  584F      4110          addq.w    #4,A7
                    4111   ; printf("\r\nBreak Points :[Enabled]") ;
0000269C  4879 0000 4112          pea       @m68kde~1_139.L
000026A0  6E82      
000026A2  4E92      4113          jsr       (A2)
000026A4  584F      4114          addq.w    #4,A7
                    4115   ; printf("\r\nPress <ESC> to Resume User Program.....") ;
000026A6  4879 0000 4116          pea       @m68kde~1_140.L
000026AA  6E9C      
000026AC  4E92      4117          jsr       (A2)
000026AE  584F      4118          addq.w    #4,A7
                    4119   menu_42:
000026B0  6000 0058 4120          bra       menu_46
                    4121   menu_39:
                    4122   ; }
                    4123   ; }
                    4124   ; else if(c == (char)(0x1b))  {   // if user choses to end trace and run program
000026B4  0C02 001B 4125          cmp.b     #27,D2
000026B8  6600 0040 4126          bne       menu_43
                    4127   ; Trace = 0;
000026BC  4293      4128          clr.l     (A3)
                    4129   ; TraceException = 0;
000026BE  4239 0040 4130          clr.b     4194314
000026C2  000A      
                    4131   ; x = *(unsigned int *)(0x00000074) ;   // read IRQ 5 vector to reset trace vector generator
000026C4  28B8 0074 4132          move.l    116,(A4)
                    4133   ; EnableBreakPoints() ;
000026C8  4EB8 1EA6 4134          jsr       _EnableBreakPoints
                    4135   ; SR = SR & (unsigned short int)(0x7FFF) ;    // clear T bit in status register
000026CC  0255 7FFF 4136          and.w     #32767,(A5)
                    4137   ; printf("\r\nSingle Step  :[OFF]") ;
000026D0  4879 0000 4138          pea       @m68kde~1_141.L
000026D4  6EC6      
000026D6  4E92      4139          jsr       (A2)
000026D8  584F      4140          addq.w    #4,A7
                    4141   ; printf("\r\nBreak Points :[Enabled]");
000026DA  4879 0000 4142          pea       @m68kde~1_142.L
000026DE  6EDC      
000026E0  4E92      4143          jsr       (A2)
000026E2  584F      4144          addq.w    #4,A7
                    4145   ; printf("\r\nProgram Running.....") ;
000026E4  4879 0000 4146          pea       @m68kde~1_143.L
000026E8  6EF6      
000026EA  4E92      4147          jsr       (A2)
000026EC  584F      4148          addq.w    #4,A7
                    4149   ; printf("\r\nPress <RESET> button <Key0> on DE1 to stop") ;
000026EE  4879 0000 4150          pea       @m68kde~1_144.L
000026F2  6F0E      
000026F4  4E92      4151          jsr       (A2)
000026F6  584F      4152          addq.w    #4,A7
                    4153   ; return ;
000026F8  6014      4154          bra.s     menu_38
                    4155   menu_43:
                    4156   ; }
                    4157   ; else if( c == (char)('W'))              // Watchpoint command
000026FA  0C02 0057 4158          cmp.b     #87,D2
000026FE  6606      4159          bne.s     menu_45
                    4160   ; Watchpoint() ;
00002700  4EB8 2300 4161          jsr       _Watchpoint
00002704  6004      4162          bra.s     menu_46
                    4163   menu_45:
                    4164   ; else
                    4165   ; UnknownCommand() ;
00002706  4EB8 2258 4166          jsr       _UnknownCommand
                    4167   menu_46:
0000270A  6000 FDB0 4168          bra       menu_1
                    4169   menu_38:
0000270E  4CDF 3C0C 4170          movem.l   (A7)+,D2/D3/A2/A3/A4/A5
00002712  4E75      4171          rts
                    4172   ; }
                    4173   ; }
                    4174   ; void PrintErrorMessageandAbort(char *string) {
                    4175   _PrintErrorMessageandAbort:
00002714  4E56 0000 4176          link      A6,#0
                    4177   ; printf("\r\n\r\nProgram ABORT !!!!!!\r\n") ;
00002718  4879 0000 4178          pea       @m68kde~1_145.L
0000271C  6F3C      
0000271E  4EB9 0000 4179          jsr       _printf
00002722  556E      
00002724  584F      4180          addq.w    #4,A7
                    4181   ; printf("%s\r\n", string) ;
00002726  2F2E 0008 4182          move.l    8(A6),-(A7)
0000272A  4879 0000 4183          pea       @m68kde~1_146.L
0000272E  6F58      
00002730  4EB9 0000 4184          jsr       _printf
00002734  556E      
00002736  504F      4185          addq.w    #8,A7
                    4186   ; menu() ;
00002738  4EB8 24A0 4187          jsr       _menu
0000273C  4E5E      4188          unlk      A6
0000273E  4E75      4189          rts
                    4190   ; }
                    4191   ; void IRQMessage(int level) {
                    4192   _IRQMessage:
00002740  4E56 0000 4193          link      A6,#0
                    4194   ; printf("\r\n\r\nProgram ABORT !!!!!");
00002744  4879 0000 4195          pea       @m68kde~1_147.L
00002748  6F5E      
0000274A  4EB9 0000 4196          jsr       _printf
0000274E  556E      
00002750  584F      4197          addq.w    #4,A7
                    4198   ; printf("\r\nUnhandled Interrupt: IRQ%d !!!!!", level) ;
00002752  2F2E 0008 4199          move.l    8(A6),-(A7)
00002756  4879 0000 4200          pea       @m68kde~1_148.L
0000275A  6F76      
0000275C  4EB9 0000 4201          jsr       _printf
00002760  556E      
00002762  504F      4202          addq.w    #8,A7
                    4203   ; menu() ;
00002764  4EB8 24A0 4204          jsr       _menu
00002768  4E5E      4205          unlk      A6
0000276A  4E75      4206          rts
                    4207   ; }
                    4208   ; void UnhandledIRQ1(void) {
                    4209   _UnhandledIRQ1:
                    4210   ; IRQMessage(1);
0000276C  4878 0001 4211          pea       1
00002770  4EB8 2740 4212          jsr       _IRQMessage
00002774  584F      4213          addq.w    #4,A7
00002776  4E75      4214          rts
                    4215   ; }
                    4216   ; void UnhandledIRQ2(void) {
                    4217   _UnhandledIRQ2:
                    4218   ; IRQMessage(2);
00002778  4878 0002 4219          pea       2
0000277C  4EB8 2740 4220          jsr       _IRQMessage
00002780  584F      4221          addq.w    #4,A7
00002782  4E75      4222          rts
                    4223   ; }
                    4224   ; void UnhandledIRQ3(void){
                    4225   _UnhandledIRQ3:
                    4226   ; IRQMessage(3);
00002784  4878 0003 4227          pea       3
00002788  4EB8 2740 4228          jsr       _IRQMessage
0000278C  584F      4229          addq.w    #4,A7
0000278E  4E75      4230          rts
                    4231   ; }
                    4232   ; void UnhandledIRQ4(void) {
                    4233   _UnhandledIRQ4:
                    4234   ; IRQMessage(4);
00002790  4878 0004 4235          pea       4
00002794  4EB8 2740 4236          jsr       _IRQMessage
00002798  584F      4237          addq.w    #4,A7
0000279A  4E75      4238          rts
                    4239   ; }
                    4240   ; void UnhandledIRQ5(void) {
                    4241   _UnhandledIRQ5:
                    4242   ; IRQMessage(5);
0000279C  4878 0005 4243          pea       5
000027A0  4EB8 2740 4244          jsr       _IRQMessage
000027A4  584F      4245          addq.w    #4,A7
000027A6  4E75      4246          rts
                    4247   ; }
                    4248   ; void UnhandledIRQ6(void) {
                    4249   _UnhandledIRQ6:
                    4250   ; PrintErrorMessageandAbort("ADDRESS ERROR: 16 or 32 Bit Transfer to/from an ODD Address....") ;
000027A8  4879 0000 4251          pea       @m68kde~1_149.L
000027AC  6F9A      
000027AE  4EB8 2714 4252          jsr       _PrintErrorMessageandAbort
000027B2  584F      4253          addq.w    #4,A7
                    4254   ; menu() ;
000027B4  4EB8 24A0 4255          jsr       _menu
000027B8  4E75      4256          rts
                    4257   ; }
                    4258   ; void UnhandledIRQ7(void) {
                    4259   _UnhandledIRQ7:
                    4260   ; IRQMessage(7);
000027BA  4878 0007 4261          pea       7
000027BE  4EB8 2740 4262          jsr       _IRQMessage
000027C2  584F      4263          addq.w    #4,A7
000027C4  4E75      4264          rts
                    4265   ; }
                    4266   ; void UnhandledTrap(void) {
                    4267   _UnhandledTrap:
                    4268   ; PrintErrorMessageandAbort("Unhandled Trap !!!!!") ;
000027C6  4879 0000 4269          pea       @m68kde~1_150.L
000027CA  6FDA      
000027CC  4EB8 2714 4270          jsr       _PrintErrorMessageandAbort
000027D0  584F      4271          addq.w    #4,A7
000027D2  4E75      4272          rts
                    4273   ; }
                    4274   ; void BusError() {
                    4275   _BusError:
                    4276   ; PrintErrorMessageandAbort("BUS Error!") ;
000027D4  4879 0000 4277          pea       @m68kde~1_151.L
000027D8  6FF0      
000027DA  4EB8 2714 4278          jsr       _PrintErrorMessageandAbort
000027DE  584F      4279          addq.w    #4,A7
000027E0  4E75      4280          rts
                    4281   ; }
                    4282   ; void AddressError() {
                    4283   _AddressError:
                    4284   ; PrintErrorMessageandAbort("ADDRESS Error!") ;
000027E2  4879 0000 4285          pea       @m68kde~1_152.L
000027E6  6FFC      
000027E8  4EB8 2714 4286          jsr       _PrintErrorMessageandAbort
000027EC  584F      4287          addq.w    #4,A7
000027EE  4E75      4288          rts
                    4289   ; }
                    4290   ; void IllegalInstruction() {
                    4291   _IllegalInstruction:
                    4292   ; PrintErrorMessageandAbort("ILLEGAL INSTRUCTION") ;
000027F0  4879 0000 4293          pea       @m68kde~1_153.L
000027F4  700C      
000027F6  4EB8 2714 4294          jsr       _PrintErrorMessageandAbort
000027FA  584F      4295          addq.w    #4,A7
000027FC  4E75      4296          rts
                    4297   ; }
                    4298   ; void Dividebyzero() {
                    4299   _Dividebyzero:
                    4300   ; PrintErrorMessageandAbort("DIVIDE BY ZERO") ;
000027FE  4879 0000 4301          pea       @m68kde~1_154.L
00002802  7020      
00002804  4EB8 2714 4302          jsr       _PrintErrorMessageandAbort
00002808  584F      4303          addq.w    #4,A7
0000280A  4E75      4304          rts
                    4305   ; }
                    4306   ; void Check() {
                    4307   _Check:
                    4308   ; PrintErrorMessageandAbort("'CHK' INSTRUCTION") ;
0000280C  4879 0000 4309          pea       @m68kde~1_155.L
00002810  7030      
00002812  4EB8 2714 4310          jsr       _PrintErrorMessageandAbort
00002816  584F      4311          addq.w    #4,A7
00002818  4E75      4312          rts
                    4313   ; }
                    4314   ; void Trapv() {
                    4315   _Trapv:
                    4316   ; PrintErrorMessageandAbort("TRAPV INSTRUCTION") ;
0000281A  4879 0000 4317          pea       @m68kde~1_156.L
0000281E  7042      
00002820  4EB8 2714 4318          jsr       _PrintErrorMessageandAbort
00002824  584F      4319          addq.w    #4,A7
00002826  4E75      4320          rts
                    4321   ; }
                    4322   ; void PrivError() {
                    4323   _PrivError:
                    4324   ; PrintErrorMessageandAbort("PRIVILEGE VIOLATION") ;
00002828  4879 0000 4325          pea       @m68kde~1_157.L
0000282C  7054      
0000282E  4EB8 2714 4326          jsr       _PrintErrorMessageandAbort
00002832  584F      4327          addq.w    #4,A7
00002834  4E75      4328          rts
                    4329   ; }
                    4330   ; void UnitIRQ() {
                    4331   _UnitIRQ:
                    4332   ; PrintErrorMessageandAbort("UNINITIALISED IRQ") ;
00002836  4879 0000 4333          pea       @m68kde~1_158.L
0000283A  7068      
0000283C  4EB8 2714 4334          jsr       _PrintErrorMessageandAbort
00002840  584F      4335          addq.w    #4,A7
00002842  4E75      4336          rts
                    4337   ; }
                    4338   ; void Spurious() {
                    4339   _Spurious:
                    4340   ; PrintErrorMessageandAbort("SPURIOUS IRQ") ;
00002844  4879 0000 4341          pea       @m68kde~1_159.L
00002848  707A      
0000284A  4EB8 2714 4342          jsr       _PrintErrorMessageandAbort
0000284E  584F      4343          addq.w    #4,A7
00002850  4E75      4344          rts
                    4345   ; }
                    4346   ; void EnterString(void)
                    4347   ; {
                    4348   _EnterString:
00002852  4E56 FFFC 4349          link      A6,#-4
00002856  2F02      4350          move.l    D2,-(A7)
                    4351   ; unsigned char *Start;
                    4352   ; unsigned char c;
                    4353   ; printf("\r\nStart Address in Memory: ") ;
00002858  4879 0000 4354          pea       @m68kde~1_160.L
0000285C  7088      
0000285E  4EB9 0000 4355          jsr       _printf
00002862  556E      
00002864  584F      4356          addq.w    #4,A7
                    4357   ; Start = Get8HexDigits(0) ;
00002866  42A7      4358          clr.l     -(A7)
00002868  4EB8 0CA4 4359          jsr       _Get8HexDigits
0000286C  584F      4360          addq.w    #4,A7
0000286E  2400      4361          move.l    D0,D2
                    4362   ; printf("\r\nEnter String (ESC to end) :") ;
00002870  4879 0000 4363          pea       @m68kde~1_161.L
00002874  70A4      
00002876  4EB9 0000 4364          jsr       _printf
0000287A  556E      
0000287C  584F      4365          addq.w    #4,A7
                    4366   ; while((c = getchar()) != 0x1b)
                    4367   EnterString_1:
0000287E  4EB9 0000 4368          jsr       _getch
00002882  5490      
00002884  1D40 FFFF 4369          move.b    D0,-1(A6)
00002888  0C00 001B 4370          cmp.b     #27,D0
0000288C  670A      4371          beq.s     EnterString_3
                    4372   ; *Start++ = c ;
0000288E  2042      4373          move.l    D2,A0
00002890  5282      4374          addq.l    #1,D2
00002892  10AE FFFF 4375          move.b    -1(A6),(A0)
00002896  60E6      4376          bra       EnterString_1
                    4377   EnterString_3:
                    4378   ; *Start = 0x00;  // terminate with a null
00002898  2042      4379          move.l    D2,A0
0000289A  4210      4380          clr.b     (A0)
0000289C  241F      4381          move.l    (A7)+,D2
0000289E  4E5E      4382          unlk      A6
000028A0  4E75      4383          rts
                    4384   ; }
                    4385   ; void MemoryTest(void)
                    4386   ; {
                    4387   _MemoryTest:
000028A2  4E56 FFE8 4388          link      A6,#-24
                    4389   ; unsigned int *RamPtr, counter1=1 ;
000028A6  2D7C 0000 4390          move.l    #1,-18(A6)
000028AA  0001 FFEE 
                    4391   ; register unsigned int i ;
                    4392   ; unsigned int Start, End ;
                    4393   ; char c ;
                    4394   ; printf("\r\nStart Address: ") ;
000028AE  4879 0000 4395          pea       @m68kde~1_162.L
000028B2  70C2      
000028B4  4EB9 0000 4396          jsr       _printf
000028B8  556E      
000028BA  584F      4397          addq.w    #4,A7
                    4398   ; Start = Get8HexDigits(0) ;
000028BC  42A7      4399          clr.l     -(A7)
000028BE  4EB8 0CA4 4400          jsr       _Get8HexDigits
000028C2  584F      4401          addq.w    #4,A7
000028C4  2D40 FFF6 4402          move.l    D0,-10(A6)
                    4403   ; printf("\r\nEnd Address: ") ;
000028C8  4879 0000 4404          pea       @m68kde~1_163.L
000028CC  70D4      
000028CE  4EB9 0000 4405          jsr       _printf
000028D2  556E      
000028D4  584F      4406          addq.w    #4,A7
                    4407   ; End = Get8HexDigits(0) ;
000028D6  42A7      4408          clr.l     -(A7)
000028D8  4EB8 0CA4 4409          jsr       _Get8HexDigits
000028DC  584F      4410          addq.w    #4,A7
000028DE  2D40 FFFA 4411          move.l    D0,-6(A6)
000028E2  4E5E      4412          unlk      A6
000028E4  4E75      4413          rts
                    4414   ; // TODO
                    4415   ; // add your code to test memory here using 32 bit reads and writes of data between the start and end of memory
                    4416   ; }
                    4417   ; void main(void)
                    4418   ; {
                    4419   _main:
000028E6  4E56 FFF4 4420          link      A6,#-12
000028EA  48E7 3030 4421          movem.l   D2/D3/A2/A3,-(A7)
000028EE  45F8 0A30 4422          lea       _InstallExceptionHandler.L,A2
000028F2  47F9 0000 4423          lea       _printf.L,A3
000028F6  556E      
                    4424   ; char c ;
                    4425   ; int i, j ;
                    4426   ; char *BugMessage = "DE1-68k Bug V1.77";
000028F8  41F9 0000 4427          lea       @m68kde~1_164.L,A0
000028FC  70E4      
000028FE  2608      4428          move.l    A0,D3
                    4429   ; char *CopyrightMessage = "Copyright (C) PJ Davies 2016";
00002900  41F9 0000 4430          lea       @m68kde~1_165.L,A0
00002904  70F6      
00002906  2D48 FFFC 4431          move.l    A0,-4(A6)
                    4432   ; KillAllBreakPoints() ;
0000290A  4EB8 1EEE 4433          jsr       _KillAllBreakPoints
                    4434   ; i = x = y = z = PortA_Count = 0;
0000290E  42B9 0803 4435          clr.l     _PortA_Count.L
00002912  00D4      
00002914  42B9 0803 4436          clr.l     _z.L
00002918  00D0      
0000291A  42B9 0803 4437          clr.l     _y.L
0000291E  00CC      
00002920  42B9 0803 4438          clr.l     _x.L
00002924  00C8      
00002926  4282      4439          clr.l     D2
                    4440   ; Trace = GoFlag = 0;                       // used in tracing/single stepping
00002928  42B9 0803 4441          clr.l     _GoFlag.L
0000292C  00DC      
0000292E  42B9 0803 4442          clr.l     _Trace.L
00002932  00D8      
                    4443   ; Echo = 1 ;
00002934  23FC 0000 4444          move.l    #1,_Echo.L
00002938  0001 0803 
0000293C  00E0      
                    4445   ; d0=d1=d2=d3=d4=d5=d6=d7=0 ;
0000293E  42B9 0803 4446          clr.l     _d7.L
00002942  0100      
00002944  42B9 0803 4447          clr.l     _d6.L
00002948  00FC      
0000294A  42B9 0803 4448          clr.l     _d5.L
0000294E  00F8      
00002950  42B9 0803 4449          clr.l     _d4.L
00002954  00F4      
00002956  42B9 0803 4450          clr.l     _d3.L
0000295A  00F0      
0000295C  42B9 0803 4451          clr.l     _d2.L
00002960  00EC      
00002962  42B9 0803 4452          clr.l     _d1.L
00002966  00E8      
00002968  42B9 0803 4453          clr.l     _d0.L
0000296C  00E4      
                    4454   ; a0=a1=a2=a3=a4=a5=a6=0 ;
0000296E  42B9 0803 4455          clr.l     _a6.L
00002972  011C      
00002974  42B9 0803 4456          clr.l     _a5.L
00002978  0118      
0000297A  42B9 0803 4457          clr.l     _a4.L
0000297E  0114      
00002980  42B9 0803 4458          clr.l     _a3.L
00002984  0110      
00002986  42B9 0803 4459          clr.l     _a2.L
0000298A  010C      
0000298C  42B9 0803 4460          clr.l     _a1.L
00002990  0108      
00002992  42B9 0803 4461          clr.l     _a0.L
00002996  0104      
                    4462   ; PC = ProgramStart, SSP=TopOfStack, USP = TopOfStack;
00002998  23FC 0800 4463          move.l    #134217728,_PC.L
0000299C  0000 0803 
000029A0  0120      
000029A2  23FC 0804 4464          move.l    #134479872,_SSP.L
000029A6  0000 0803 
000029AA  0124      
000029AC  23FC 0804 4465          move.l    #134479872,_USP.L
000029B0  0000 0803 
000029B4  0128      
                    4466   ; SR = 0x2000;                            // clear interrupts enable tracing  uses IRQ6
000029B6  33FC 2000 4467          move.w    #8192,_SR.L
000029BA  0803 012C 
                    4468   ; // Initialise Breakpoint variables
                    4469   ; for(i = 0; i < 8; i++)  {
000029BE  4282      4470          clr.l     D2
                    4471   main_1:
000029C0  0C82 0000 4472          cmp.l     #8,D2
000029C4  0008      
000029C6  6C00 004C 4473          bge       main_3
                    4474   ; BreakPointAddress[i] = 0;               //array of 8 breakpoint addresses
000029CA  2002      4475          move.l    D2,D0
000029CC  E588      4476          lsl.l     #2,D0
000029CE  41F9 0803 4477          lea       _BreakPointAddress.L,A0
000029D2  012E      
000029D4  42B0 0800 4478          clr.l     0(A0,D0.L)
                    4479   ; WatchPointAddress[i] = 0 ;
000029D8  2002      4480          move.l    D2,D0
000029DA  E588      4481          lsl.l     #2,D0
000029DC  41F9 0803 4482          lea       _WatchPointAddress.L,A0
000029E0  0182      
000029E2  42B0 0800 4483          clr.l     0(A0,D0.L)
                    4484   ; BreakPointInstruction[i] = 0;           // to hold the instruction at the break point
000029E6  2002      4485          move.l    D2,D0
000029E8  E388      4486          lsl.l     #1,D0
000029EA  41F9 0803 4487          lea       _BreakPointInstruction.L,A0
000029EE  014E      
000029F0  4270 0800 4488          clr.w     0(A0,D0.L)
                    4489   ; BreakPointSetOrCleared[i] = 0;          // indicates if break point set
000029F4  2002      4490          move.l    D2,D0
000029F6  E588      4491          lsl.l     #2,D0
000029F8  41F9 0803 4492          lea       _BreakPointSetOrCleared.L,A0
000029FC  015E      
000029FE  42B0 0800 4493          clr.l     0(A0,D0.L)
                    4494   ; WatchPointSetOrCleared[i] = 0;
00002A02  2002      4495          move.l    D2,D0
00002A04  E588      4496          lsl.l     #2,D0
00002A06  41F9 0803 4497          lea       _WatchPointSetOrCleared.L,A0
00002A0A  01A2      
00002A0C  42B0 0800 4498          clr.l     0(A0,D0.L)
00002A10  5282      4499          addq.l    #1,D2
00002A12  60AC      4500          bra       main_1
                    4501   main_3:
                    4502   ; }
                    4503   ; Init_RS232() ;     // initialise the RS232 port
00002A14  4EB8 0B12 4504          jsr       _Init_RS232
                    4505   ; Init_LCD() ;
00002A18  4EB8 095E 4506          jsr       _Init_LCD
                    4507   ; for( i = 32; i < 48; i++)
00002A1C  7420      4508          moveq     #32,D2
                    4509   main_4:
00002A1E  0C82 0000 4510          cmp.l     #48,D2
00002A22  0030      
00002A24  6C0E      4511          bge.s     main_6
                    4512   ; InstallExceptionHandler(UnhandledTrap, i) ;		        // install Trap exception handler on vector 32-47
00002A26  2F02      4513          move.l    D2,-(A7)
00002A28  4878 27C6 4514          pea       _UnhandledTrap.L
00002A2C  4E92      4515          jsr       (A2)
00002A2E  504F      4516          addq.w    #8,A7
00002A30  5282      4517          addq.l    #1,D2
00002A32  60EA      4518          bra       main_4
                    4519   main_6:
                    4520   ; InstallExceptionHandler(menu, 47) ;		                   // TRAP #15 call debug and end program
00002A34  4878 002F 4521          pea       47
00002A38  4878 24A0 4522          pea       _menu.L
00002A3C  4E92      4523          jsr       (A2)
00002A3E  504F      4524          addq.w    #8,A7
                    4525   ; InstallExceptionHandler(UnhandledIRQ1, 25) ;		      // install handler for interrupts
00002A40  4878 0019 4526          pea       25
00002A44  4878 276C 4527          pea       _UnhandledIRQ1.L
00002A48  4E92      4528          jsr       (A2)
00002A4A  504F      4529          addq.w    #8,A7
                    4530   ; InstallExceptionHandler(UnhandledIRQ2, 26) ;		      // install handler for interrupts
00002A4C  4878 001A 4531          pea       26
00002A50  4878 2778 4532          pea       _UnhandledIRQ2.L
00002A54  4E92      4533          jsr       (A2)
00002A56  504F      4534          addq.w    #8,A7
                    4535   ; InstallExceptionHandler(UnhandledIRQ3, 27) ;		      // install handler for interrupts
00002A58  4878 001B 4536          pea       27
00002A5C  4878 2784 4537          pea       _UnhandledIRQ3.L
00002A60  4E92      4538          jsr       (A2)
00002A62  504F      4539          addq.w    #8,A7
                    4540   ; InstallExceptionHandler(UnhandledIRQ4, 28) ;		      // install handler for interrupts
00002A64  4878 001C 4541          pea       28
00002A68  4878 2790 4542          pea       _UnhandledIRQ4.L
00002A6C  4E92      4543          jsr       (A2)
00002A6E  504F      4544          addq.w    #8,A7
                    4545   ; InstallExceptionHandler(UnhandledIRQ5, 29) ;		      // install handler for interrupts
00002A70  4878 001D 4546          pea       29
00002A74  4878 279C 4547          pea       _UnhandledIRQ5.L
00002A78  4E92      4548          jsr       (A2)
00002A7A  504F      4549          addq.w    #8,A7
                    4550   ; InstallExceptionHandler(UnhandledIRQ6, 30) ;		      // install handler for interrupts
00002A7C  4878 001E 4551          pea       30
00002A80  4878 27A8 4552          pea       _UnhandledIRQ6.L
00002A84  4E92      4553          jsr       (A2)
00002A86  504F      4554          addq.w    #8,A7
                    4555   ; InstallExceptionHandler(UnhandledIRQ7, 31) ;		      // install handler for interrupts
00002A88  4878 001F 4556          pea       31
00002A8C  4878 27BA 4557          pea       _UnhandledIRQ7.L
00002A90  4E92      4558          jsr       (A2)
00002A92  504F      4559          addq.w    #8,A7
                    4560   ; InstallExceptionHandler(HandleBreakPoint, 46) ;		           // install Trap 14 Break Point exception handler on vector 46
00002A94  4878 002E 4561          pea       46
00002A98  4878 2192 4562          pea       _HandleBreakPoint.L
00002A9C  4E92      4563          jsr       (A2)
00002A9E  504F      4564          addq.w    #8,A7
                    4565   ; InstallExceptionHandler(DumpRegistersandPause, 29) ;		   // install TRACE handler for IRQ5 on vector 29
00002AA0  4878 001D 4566          pea       29
00002AA4  4878 1836 4567          pea       _DumpRegistersandPause.L
00002AA8  4E92      4568          jsr       (A2)
00002AAA  504F      4569          addq.w    #8,A7
                    4570   ; InstallExceptionHandler(BusError,2) ;                          // install Bus error handler
00002AAC  4878 0002 4571          pea       2
00002AB0  4878 27D4 4572          pea       _BusError.L
00002AB4  4E92      4573          jsr       (A2)
00002AB6  504F      4574          addq.w    #8,A7
                    4575   ; InstallExceptionHandler(AddressError,3) ;                      // install address error handler (doesn't work on soft core 68k implementation)
00002AB8  4878 0003 4576          pea       3
00002ABC  4878 27E2 4577          pea       _AddressError.L
00002AC0  4E92      4578          jsr       (A2)
00002AC2  504F      4579          addq.w    #8,A7
                    4580   ; InstallExceptionHandler(IllegalInstruction,4) ;                // install illegal instruction exception handler
00002AC4  4878 0004 4581          pea       4
00002AC8  4878 27F0 4582          pea       _IllegalInstruction.L
00002ACC  4E92      4583          jsr       (A2)
00002ACE  504F      4584          addq.w    #8,A7
                    4585   ; InstallExceptionHandler(Dividebyzero,5) ;                      // install /0 exception handler
00002AD0  4878 0005 4586          pea       5
00002AD4  4878 27FE 4587          pea       _Dividebyzero.L
00002AD8  4E92      4588          jsr       (A2)
00002ADA  504F      4589          addq.w    #8,A7
                    4590   ; InstallExceptionHandler(Check,6) ;                             // install check instruction exception handler
00002ADC  4878 0006 4591          pea       6
00002AE0  4878 280C 4592          pea       _Check.L
00002AE4  4E92      4593          jsr       (A2)
00002AE6  504F      4594          addq.w    #8,A7
                    4595   ; InstallExceptionHandler(Trapv,7) ;                             // install trapv instruction exception handler
00002AE8  4878 0007 4596          pea       7
00002AEC  4878 281A 4597          pea       _Trapv.L
00002AF0  4E92      4598          jsr       (A2)
00002AF2  504F      4599          addq.w    #8,A7
                    4600   ; InstallExceptionHandler(PrivError,8) ;                         // install Priv Violation exception handler
00002AF4  4878 0008 4601          pea       8
00002AF8  4878 2828 4602          pea       _PrivError.L
00002AFC  4E92      4603          jsr       (A2)
00002AFE  504F      4604          addq.w    #8,A7
                    4605   ; InstallExceptionHandler(UnitIRQ,15) ;                          // install uninitialised IRQ exception handler
00002B00  4878 000F 4606          pea       15
00002B04  4878 2836 4607          pea       _UnitIRQ.L
00002B08  4E92      4608          jsr       (A2)
00002B0A  504F      4609          addq.w    #8,A7
                    4610   ; InstallExceptionHandler(Check,24) ;                            // install spurious IRQ exception handler
00002B0C  4878 0018 4611          pea       24
00002B10  4878 280C 4612          pea       _Check.L
00002B14  4E92      4613          jsr       (A2)
00002B16  504F      4614          addq.w    #8,A7
                    4615   ; FlushKeyboard() ;                        // dump unread characters from keyboard
00002B18  4EB8 0BA6 4616          jsr       _FlushKeyboard
                    4617   ; TraceException = 0 ;                     // clear trace exception port to remove any software generated single step/trace
00002B1C  4239 0040 4618          clr.b     4194314
00002B20  000A      
                    4619   ; // test for auto flash boot and run from Flash by reading switch 9 on DE1-soc board. If set, copy program from flash into Dram and run
                    4620   ; while(((char)(PortB & 0x02)) == (char)(0x02))    {
                    4621   main_7:
00002B22  1039 0040 4622          move.b    4194306,D0
00002B26  0002      
00002B28  C03C 0002 4623          and.b     #2,D0
00002B2C  0C00 0002 4624          cmp.b     #2,D0
00002B30  662A      4625          bne.s     main_9
                    4626   ; LoadFromFlashChip();
00002B32  4EB8 12DA 4627          jsr       _LoadFromFlashChip
                    4628   ; printf("\r\nRunning.....") ;
00002B36  4879 0000 4629          pea       @m68kde~1_166.L
00002B3A  7114      
00002B3C  4E93      4630          jsr       (A3)
00002B3E  584F      4631          addq.w    #4,A7
                    4632   ; Oline1("Running.....") ;
00002B40  4879 0000 4633          pea       @m68kde~1_167.L
00002B44  7124      
00002B46  4EB8 0A02 4634          jsr       _Oline1
00002B4A  584F      4635          addq.w    #4,A7
                    4636   ; GoFlag = 1;
00002B4C  23FC 0000 4637          move.l    #1,_GoFlag.L
00002B50  0001 0803 
00002B54  00DC      
                    4638   ; go() ;
00002B56  4EB8 08B8 4639          jsr       _go
00002B5A  60C6      4640          bra       main_7
                    4641   main_9:
                    4642   ; }
                    4643   ; // otherwise start the debug monitor
                    4644   ; Oline0(BugMessage) ;
00002B5C  2F03      4645          move.l    D3,-(A7)
00002B5E  4EB8 09D4 4646          jsr       _Oline0
00002B62  584F      4647          addq.w    #4,A7
                    4648   ; Oline1("By: PJ Davies") ;
00002B64  4879 0000 4649          pea       @m68kde~1_168.L
00002B68  7132      
00002B6A  4EB8 0A02 4650          jsr       _Oline1
00002B6E  584F      4651          addq.w    #4,A7
                    4652   ; printf("\r\n%s", BugMessage) ;
00002B70  2F03      4653          move.l    D3,-(A7)
00002B72  4879 0000 4654          pea       @m68kde~1_169.L
00002B76  7140      
00002B78  4E93      4655          jsr       (A3)
00002B7A  504F      4656          addq.w    #8,A7
                    4657   ; printf("\r\n%s", CopyrightMessage) ;
00002B7C  2F2E FFFC 4658          move.l    -4(A6),-(A7)
00002B80  4879 0000 4659          pea       @m68kde~1_170.L
00002B84  7146      
00002B86  4E93      4660          jsr       (A3)
00002B88  504F      4661          addq.w    #8,A7
                    4662   ; menu();
00002B8A  4EB8 24A0 4663          jsr       _menu
00002B8E  4CDF 0C0C 4664          movem.l   (A7)+,D2/D3/A2/A3
00002B92  4E5E      4665          unlk      A6
00002B94  4E75      4666          rts
                    4667   ; }
                    4668   ; void FormatInstruction(void)    // for disassembly
                    4669   ; {
                    4670   _FormatInstruction:
00002B96  4E56 FEC0 4671          link      A6,#-320
00002B9A  48E7 3C20 4672          movem.l   D2/D3/D4/D5/A2,-(A7)
00002B9E  45EE FEC0 4673          lea       -320(A6),A2
                    4674   ; short i, ilen = 0 ;
00002BA2  4245      4675          clr.w     D5
                    4676   ; char *iptr = Instruction ;
00002BA4  41F9 0803 4677          lea       _Instruction.L,A0
00002BA8  04E2      
00002BAA  2608      4678          move.l    A0,D3
                    4679   ; char *Formatted[80], *fptr ;
                    4680   ; fptr = Formatted ;
00002BAC  280A      4681          move.l    A2,D4
                    4682   ; for(i = 0; i < (short)(80); i ++)
00002BAE  4242      4683          clr.w     D2
                    4684   FormatInstruction_1:
00002BB0  0C42 0050 4685          cmp.w     #80,D2
00002BB4  6C0E      4686          bge.s     FormatInstruction_3
                    4687   ; Formatted[i] = (char)(0);          // set formatted string to null
00002BB6  48C2      4688          ext.l     D2
00002BB8  2002      4689          move.l    D2,D0
00002BBA  E588      4690          lsl.l     #2,D0
00002BBC  42B2 0800 4691          clr.l     0(A2,D0.L)
00002BC0  5242      4692          addq.w    #1,D2
00002BC2  60EC      4693          bra       FormatInstruction_1
                    4694   FormatInstruction_3:
                    4695   ; while((*iptr != ' '))   {   // while ot a space char
                    4696   FormatInstruction_4:
00002BC4  2043      4697          move.l    D3,A0
00002BC6  1010      4698          move.b    (A0),D0
00002BC8  0C00 0020 4699          cmp.b     #32,D0
00002BCC  6718      4700          beq.s     FormatInstruction_6
                    4701   ; *fptr++ = *iptr++ ;     // copy string until space or end encountered
00002BCE  2043      4702          move.l    D3,A0
00002BD0  5283      4703          addq.l    #1,D3
00002BD2  2244      4704          move.l    D4,A1
00002BD4  5284      4705          addq.l    #1,D4
00002BD6  1290      4706          move.b    (A0),(A1)
                    4707   ; ilen ++ ;               // count length of string as we go
00002BD8  5245      4708          addq.w    #1,D5
                    4709   ; if(*iptr == 0)          // if we got the end and copied the NUL then return
00002BDA  2043      4710          move.l    D3,A0
00002BDC  1010      4711          move.b    (A0),D0
00002BDE  6604      4712          bne.s     FormatInstruction_7
                    4713   ; return ;
00002BE0  6000 003E 4714          bra       FormatInstruction_9
                    4715   FormatInstruction_7:
00002BE4  60DE      4716          bra       FormatInstruction_4
                    4717   FormatInstruction_6:
                    4718   ; }
                    4719   ; // must still be more text to process otherwise we would have returned above if got to the end
                    4720   ; for(i = 0; i < ((short)(8) - ilen); i++)
00002BE6  4242      4721          clr.w     D2
                    4722   FormatInstruction_10:
00002BE8  7008      4723          moveq     #8,D0
00002BEA  4880      4724          ext.w     D0
00002BEC  9045      4725          sub.w     D5,D0
00002BEE  B440      4726          cmp.w     D0,D2
00002BF0  6C0C      4727          bge.s     FormatInstruction_12
                    4728   ; *fptr++ = ' ' ;        // make sure first operand appears in field 8 of formatted string
00002BF2  2044      4729          move.l    D4,A0
00002BF4  5284      4730          addq.l    #1,D4
00002BF6  10BC 0020 4731          move.b    #32,(A0)
00002BFA  5242      4732          addq.w    #1,D2
00002BFC  60EA      4733          bra       FormatInstruction_10
                    4734   FormatInstruction_12:
                    4735   ; // now skip over any spaces in original unformatted string before copying the rest
                    4736   ; while((*iptr == ' '))
                    4737   FormatInstruction_13:
00002BFE  2043      4738          move.l    D3,A0
00002C00  1010      4739          move.b    (A0),D0
00002C02  0C00 0020 4740          cmp.b     #32,D0
00002C06  6604      4741          bne.s     FormatInstruction_15
                    4742   ; iptr++ ;
00002C08  5283      4743          addq.l    #1,D3
00002C0A  60F2      4744          bra       FormatInstruction_13
                    4745   FormatInstruction_15:
                    4746   ; strcat(fptr,iptr) ;
00002C0C  2F03      4747          move.l    D3,-(A7)
00002C0E  2F04      4748          move.l    D4,-(A7)
00002C10  4EB9 0000 4749          jsr       _strcat
00002C14  552C      
00002C16  504F      4750          addq.w    #8,A7
                    4751   ; strcpyInstruction(Formatted) ;
00002C18  2F0A      4752          move.l    A2,-(A7)
00002C1A  4EB8 0CE6 4753          jsr       _strcpyInstruction
00002C1E  584F      4754          addq.w    #4,A7
                    4755   FormatInstruction_9:
00002C20  4CDF 043C 4756          movem.l   (A7)+,D2/D3/D4/D5/A2
00002C24  4E5E      4757          unlk      A6
00002C26  4E75      4758          rts
                    4759   ; }
                    4760   ; unsigned short int Decode2BitOperandSize(unsigned short int OpCode)
                    4761   ; {
                    4762   _Decode2BitOperandSize:
00002C28  4E56 0000 4763          link      A6,#0
00002C2C  48E7 3020 4764          movem.l   D2/D3/A2,-(A7)
00002C30  362E 000A 4765          move.w    10(A6),D3
00002C34  C6BC 0000 4766          and.l     #65535,D3
00002C38  FFFF      
00002C3A  45F8 0CCC 4767          lea       _strcatInstruction.L,A2
                    4768   ; unsigned short int DataSize ;       // used to determine the size of data following say an immediate instruction such as addi etc
                    4769   ; OpCode = (OpCode & (unsigned short int)(0x00C0)) >> 6 ;             // get bits 7 and 6 into positions 1,0
00002C3E  3003      4770          move.w    D3,D0
00002C40  C07C 00C0 4771          and.w     #192,D0
00002C44  EC48      4772          lsr.w     #6,D0
00002C46  3600      4773          move.w    D0,D3
                    4774   ; if(OpCode == (unsigned short int)(0))   {
00002C48  4A43      4775          tst.w     D3
00002C4A  660E      4776          bne.s     Decode2BitOperandSize_1
                    4777   ; strcatInstruction(".B ") ;
00002C4C  4879 0000 4778          pea       @m68kde~1_171.L
00002C50  714C      
00002C52  4E92      4779          jsr       (A2)
00002C54  584F      4780          addq.w    #4,A7
                    4781   ; DataSize = 1 ;
00002C56  7401      4782          moveq     #1,D2
00002C58  6020      4783          bra.s     Decode2BitOperandSize_4
                    4784   Decode2BitOperandSize_1:
                    4785   ; }
                    4786   ; else if(OpCode == (unsigned short int)(1)) {
00002C5A  0C43 0001 4787          cmp.w     #1,D3
00002C5E  660E      4788          bne.s     Decode2BitOperandSize_3
                    4789   ; strcatInstruction(".W ") ;
00002C60  4879 0000 4790          pea       @m68kde~1_172.L
00002C64  7150      
00002C66  4E92      4791          jsr       (A2)
00002C68  584F      4792          addq.w    #4,A7
                    4793   ; DataSize = 1 ;
00002C6A  7401      4794          moveq     #1,D2
00002C6C  600C      4795          bra.s     Decode2BitOperandSize_4
                    4796   Decode2BitOperandSize_3:
                    4797   ; }
                    4798   ; else {
                    4799   ; strcatInstruction(".L ") ;
00002C6E  4879 0000 4800          pea       @m68kde~1_173.L
00002C72  7154      
00002C74  4E92      4801          jsr       (A2)
00002C76  584F      4802          addq.w    #4,A7
                    4803   ; DataSize = 2 ;
00002C78  7402      4804          moveq     #2,D2
                    4805   Decode2BitOperandSize_4:
                    4806   ; }
                    4807   ; return DataSize;
00002C7A  3002      4808          move.w    D2,D0
00002C7C  4CDF 040C 4809          movem.l   (A7)+,D2/D3/A2
00002C80  4E5E      4810          unlk      A6
00002C82  4E75      4811          rts
                    4812   ; }
                    4813   ; void Decode3BitDataRegister(unsigned short int OpCode)                // Data Register in Bits 11, 10 and 9
                    4814   ; {
                    4815   _Decode3BitDataRegister:
00002C84  4E56 FFFC 4816          link      A6,#-4
00002C88  2F0A      4817          move.l    A2,-(A7)
00002C8A  45EE FFFC 4818          lea       -4(A6),A2
                    4819   ; unsigned char RegNumber[3] ;
                    4820   ; RegNumber[0] = 'D' ;
00002C8E  14BC 0044 4821          move.b    #68,(A2)
                    4822   ; RegNumber[1] = (unsigned char)(0x30) + (unsigned char)((OpCode & 0x0E00) >> 9) ;   // get data register number in bits 2,1,0 and convert to ASCII equiv
00002C92  7030      4823          moveq     #48,D0
00002C94  322E 000A 4824          move.w    10(A6),D1
00002C98  C27C 0E00 4825          and.w     #3584,D1
00002C9C  E049      4826          lsr.w     #8,D1
00002C9E  E249      4827          lsr.w     #1,D1
00002CA0  D001      4828          add.b     D1,D0
00002CA2  1540 0001 4829          move.b    D0,1(A2)
                    4830   ; RegNumber[2] = 0 ;
00002CA6  422A 0002 4831          clr.b     2(A2)
                    4832   ; strcatInstruction(RegNumber) ;        // write register number to the disassembled instruction
00002CAA  2F0A      4833          move.l    A2,-(A7)
00002CAC  4EB8 0CCC 4834          jsr       _strcatInstruction
00002CB0  584F      4835          addq.w    #4,A7
00002CB2  245F      4836          move.l    (A7)+,A2
00002CB4  4E5E      4837          unlk      A6
00002CB6  4E75      4838          rts
                    4839   ; }
                    4840   ; void Decode3BitAddressRegister(unsigned short int Reg)                // Address Register in Bits 2,1,0
                    4841   ; {
                    4842   _Decode3BitAddressRegister:
00002CB8  4E56 FFFC 4843          link      A6,#-4
00002CBC  2F0A      4844          move.l    A2,-(A7)
00002CBE  45EE FFFC 4845          lea       -4(A6),A2
                    4846   ; unsigned char RegNumber[3];
                    4847   ; RegNumber[0] = 'A' ;
00002CC2  14BC 0041 4848          move.b    #65,(A2)
                    4849   ; RegNumber[1] = (unsigned char)(0x30) + (unsigned char)(Reg) ;   // get data register number in bits 2,1,0 and convert to ASCII equiv
00002CC6  7030      4850          moveq     #48,D0
00002CC8  322E 000A 4851          move.w    10(A6),D1
00002CCC  D001      4852          add.b     D1,D0
00002CCE  1540 0001 4853          move.b    D0,1(A2)
                    4854   ; RegNumber[2] = 0 ;
00002CD2  422A 0002 4855          clr.b     2(A2)
                    4856   ; strcatInstruction(RegNumber) ;        // write register number to the disassembled instruction
00002CD6  2F0A      4857          move.l    A2,-(A7)
00002CD8  4EB8 0CCC 4858          jsr       _strcatInstruction
00002CDC  584F      4859          addq.w    #4,A7
00002CDE  245F      4860          move.l    (A7)+,A2
00002CE0  4E5E      4861          unlk      A6
00002CE2  4E75      4862          rts
                    4863   ; }
                    4864   ; //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                    4865   ; // Special function is used to print 8,16, 32 bit operands after move #
                    4866   ; //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                    4867   ; void DecodeBWLDataAfterOpCodeForMove(unsigned short int *OpCode )
                    4868   ; {
                    4869   _DecodeBWLDataAfterOpCodeForMove:
00002CE4  4E56 0000 4870          link      A6,#0
00002CE8  48E7 3030 4871          movem.l   D2/D3/A2/A3,-(A7)
00002CEC  242E 0008 4872          move.l    8(A6),D2
00002CF0  45F9 0803 4873          lea       _TempString.L,A2
00002CF4  0546      
00002CF6  47F9 0000 4874          lea       _sprintf.L,A3
00002CFA  54F8      
                    4875   ; unsigned char OperandSize ;
                    4876   ; OperandSize = (*OpCode >> 12) & (unsigned short int)(0x0003) ;               // get bits 13,12 into 1,0 as these define size of #operand
00002CFC  2042      4877          move.l    D2,A0
00002CFE  3010      4878          move.w    (A0),D0
00002D00  E048      4879          lsr.w     #8,D0
00002D02  E848      4880          lsr.w     #4,D0
00002D04  C07C 0003 4881          and.w     #3,D0
00002D08  1600      4882          move.b    D0,D3
                    4883   ; InstructionSize += 1;
00002D0A  52B9 0803 4884          addq.l    #1,_InstructionSize.L
00002D0E  017E      
                    4885   ; if(OperandSize == (char)(1))                // #byte value
00002D10  0C03 0001 4886          cmp.b     #1,D3
00002D14  6620      4887          bne.s     DecodeBWLDataAfterOpCodeForMove_1
                    4888   ; sprintf(TempString, "#$%X", (unsigned int)(OpCode[1]));
00002D16  2042      4889          move.l    D2,A0
00002D18  3228 0002 4890          move.w    2(A0),D1
00002D1C  C2BC 0000 4891          and.l     #65535,D1
00002D20  FFFF      
00002D22  2F01      4892          move.l    D1,-(A7)
00002D24  4879 0000 4893          pea       @m68kde~1_174.L
00002D28  7158      
00002D2A  2F0A      4894          move.l    A2,-(A7)
00002D2C  4E93      4895          jsr       (A3)
00002D2E  DEFC 000C 4896          add.w     #12,A7
00002D32  6000 0068 4897          bra       DecodeBWLDataAfterOpCodeForMove_5
                    4898   DecodeBWLDataAfterOpCodeForMove_1:
                    4899   ; else if(OperandSize == (char)(3))          // #word value
00002D36  0C03 0003 4900          cmp.b     #3,D3
00002D3A  6620      4901          bne.s     DecodeBWLDataAfterOpCodeForMove_3
                    4902   ; sprintf(TempString, "#$%X", (unsigned int)(OpCode[1]));
00002D3C  2042      4903          move.l    D2,A0
00002D3E  3228 0002 4904          move.w    2(A0),D1
00002D42  C2BC 0000 4905          and.l     #65535,D1
00002D46  FFFF      
00002D48  2F01      4906          move.l    D1,-(A7)
00002D4A  4879 0000 4907          pea       @m68kde~1_175.L
00002D4E  715E      
00002D50  2F0A      4908          move.l    A2,-(A7)
00002D52  4E93      4909          jsr       (A3)
00002D54  DEFC 000C 4910          add.w     #12,A7
00002D58  6000 0042 4911          bra       DecodeBWLDataAfterOpCodeForMove_5
                    4912   DecodeBWLDataAfterOpCodeForMove_3:
                    4913   ; else if(OperandSize == (char)(2)) {                                       // long value
00002D5C  0C03 0002 4914          cmp.b     #2,D3
00002D60  6600 003A 4915          bne       DecodeBWLDataAfterOpCodeForMove_5
                    4916   ; sprintf(TempString, "#$%X", ((unsigned int)(OpCode[1]) << 16) | (unsigned int)(OpCode[2])); // create 3
00002D64  2042      4917          move.l    D2,A0
00002D66  3228 0002 4918          move.w    2(A0),D1
00002D6A  C2BC 0000 4919          and.l     #65535,D1
00002D6E  FFFF      
00002D70  E189      4920          lsl.l     #8,D1
00002D72  E189      4921          lsl.l     #8,D1
00002D74  2042      4922          move.l    D2,A0
00002D76  2F00      4923          move.l    D0,-(A7)
00002D78  3028 0004 4924          move.w    4(A0),D0
00002D7C  C0BC 0000 4925          and.l     #65535,D0
00002D80  FFFF      
00002D82  8280      4926          or.l      D0,D1
00002D84  201F      4927          move.l    (A7)+,D0
00002D86  2F01      4928          move.l    D1,-(A7)
00002D88  4879 0000 4929          pea       @m68kde~1_176.L
00002D8C  7164      
00002D8E  2F0A      4930          move.l    A2,-(A7)
00002D90  4E93      4931          jsr       (A3)
00002D92  DEFC 000C 4932          add.w     #12,A7
                    4933   ; InstructionSize += 1;
00002D96  52B9 0803 4934          addq.l    #1,_InstructionSize.L
00002D9A  017E      
                    4935   DecodeBWLDataAfterOpCodeForMove_5:
                    4936   ; }
                    4937   ; strcatInstruction(TempString) ;
00002D9C  2F0A      4938          move.l    A2,-(A7)
00002D9E  4EB8 0CCC 4939          jsr       _strcatInstruction
00002DA2  584F      4940          addq.w    #4,A7
00002DA4  4CDF 0C0C 4941          movem.l   (A7)+,D2/D3/A2/A3
00002DA8  4E5E      4942          unlk      A6
00002DAA  4E75      4943          rts
                    4944   ; }
                    4945   ; /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                    4946   ; // This function is used to print 8,16, 32 bit operands after the opcode, this is in instruction like ADD # where immediate addressing is used as source
                    4947   ; /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                    4948   ; void DecodeBWLDataAfterOpCode(unsigned short int *OpCode )
                    4949   ; {
                    4950   _DecodeBWLDataAfterOpCode:
00002DAC  4E56 0000 4951          link      A6,#0
00002DB0  48E7 3038 4952          movem.l   D2/D3/A2/A3/A4,-(A7)
00002DB4  262E 0008 4953          move.l    8(A6),D3
00002DB8  45F9 0803 4954          lea       _TempString.L,A2
00002DBC  0546      
00002DBE  47F9 0000 4955          lea       _sprintf.L,A3
00002DC2  54F8      
00002DC4  49F9 0803 4956          lea       _InstructionSize.L,A4
00002DC8  017E      
                    4957   ; unsigned char OperandSize ;
                    4958   ; OperandSize = (*OpCode & (unsigned short int)(0x01C0)) >> 6 ;               // get bits 8,7 and 6 into positions 1,0, these define size of operand
00002DCA  2043      4959          move.l    D3,A0
00002DCC  3010      4960          move.w    (A0),D0
00002DCE  C07C 01C0 4961          and.w     #448,D0
00002DD2  EC48      4962          lsr.w     #6,D0
00002DD4  1400      4963          move.b    D0,D2
                    4964   ; InstructionSize += 1;
00002DD6  5294      4965          addq.l    #1,(A4)
                    4966   ; if((OperandSize == (char)(0)) || (OperandSize == (char)(4)))                // #byte value
00002DD8  4A02      4967          tst.b     D2
00002DDA  6706      4968          beq.s     DecodeBWLDataAfterOpCode_3
00002DDC  0C02 0004 4969          cmp.b     #4,D2
00002DE0  6620      4970          bne.s     DecodeBWLDataAfterOpCode_1
                    4971   DecodeBWLDataAfterOpCode_3:
                    4972   ; sprintf(TempString, "#$%X", (unsigned int)(OpCode[1]));
00002DE2  2043      4973          move.l    D3,A0
00002DE4  3228 0002 4974          move.w    2(A0),D1
00002DE8  C2BC 0000 4975          and.l     #65535,D1
00002DEC  FFFF      
00002DEE  2F01      4976          move.l    D1,-(A7)
00002DF0  4879 0000 4977          pea       @m68kde~1_177.L
00002DF4  716A      
00002DF6  2F0A      4978          move.l    A2,-(A7)
00002DF8  4E93      4979          jsr       (A3)
00002DFA  DEFC 000C 4980          add.w     #12,A7
00002DFE  6000 007C 4981          bra       DecodeBWLDataAfterOpCode_7
                    4982   DecodeBWLDataAfterOpCode_1:
                    4983   ; // #word value 7 is used by divs.w instruction (not divu)
                    4984   ; // however used by instructions like adda, cmpa, suba # to mean long value -
                    4985   ; // bugger - have to build a special case and look at opcode to see what instruction is
                    4986   ; else if((OperandSize == (char)(1)) || (OperandSize == (char)(5)) || (OperandSize == (char)(3)))         //# byte or word value
00002E02  0C02 0001 4987          cmp.b     #1,D2
00002E06  670C      4988          beq.s     DecodeBWLDataAfterOpCode_6
00002E08  0C02 0005 4989          cmp.b     #5,D2
00002E0C  6706      4990          beq.s     DecodeBWLDataAfterOpCode_6
00002E0E  0C02 0003 4991          cmp.b     #3,D2
00002E12  6620      4992          bne.s     DecodeBWLDataAfterOpCode_4
                    4993   DecodeBWLDataAfterOpCode_6:
                    4994   ; sprintf(TempString, "#$%X", (unsigned int)(OpCode[1]));
00002E14  2043      4995          move.l    D3,A0
00002E16  3228 0002 4996          move.w    2(A0),D1
00002E1A  C2BC 0000 4997          and.l     #65535,D1
00002E1E  FFFF      
00002E20  2F01      4998          move.l    D1,-(A7)
00002E22  4879 0000 4999          pea       @m68kde~1_178.L
00002E26  7170      
00002E28  2F0A      5000          move.l    A2,-(A7)
00002E2A  4E93      5001          jsr       (A3)
00002E2C  DEFC 000C 5002          add.w     #12,A7
00002E30  6000 004A 5003          bra       DecodeBWLDataAfterOpCode_7
                    5004   DecodeBWLDataAfterOpCode_4:
                    5005   ; else if((OperandSize == (char)(2))  || (OperandSize == (char)(6)) || (OperandSize == (char)(7)))    {    //# long value
00002E34  0C02 0002 5006          cmp.b     #2,D2
00002E38  670E      5007          beq.s     DecodeBWLDataAfterOpCode_9
00002E3A  0C02 0006 5008          cmp.b     #6,D2
00002E3E  6708      5009          beq.s     DecodeBWLDataAfterOpCode_9
00002E40  0C02 0007 5010          cmp.b     #7,D2
00002E44  6600 0036 5011          bne       DecodeBWLDataAfterOpCode_7
                    5012   DecodeBWLDataAfterOpCode_9:
                    5013   ; sprintf(TempString, "#$%X", ((unsigned int)(OpCode[1]) << 16) | (unsigned int)(OpCode[2]) ); // create 3
00002E48  2043      5014          move.l    D3,A0
00002E4A  3228 0002 5015          move.w    2(A0),D1
00002E4E  C2BC 0000 5016          and.l     #65535,D1
00002E52  FFFF      
00002E54  E189      5017          lsl.l     #8,D1
00002E56  E189      5018          lsl.l     #8,D1
00002E58  2043      5019          move.l    D3,A0
00002E5A  2F00      5020          move.l    D0,-(A7)
00002E5C  3028 0004 5021          move.w    4(A0),D0
00002E60  C0BC 0000 5022          and.l     #65535,D0
00002E64  FFFF      
00002E66  8280      5023          or.l      D0,D1
00002E68  201F      5024          move.l    (A7)+,D0
00002E6A  2F01      5025          move.l    D1,-(A7)
00002E6C  4879 0000 5026          pea       @m68kde~1_179.L
00002E70  7176      
00002E72  2F0A      5027          move.l    A2,-(A7)
00002E74  4E93      5028          jsr       (A3)
00002E76  DEFC 000C 5029          add.w     #12,A7
                    5030   ; InstructionSize += 1;
00002E7A  5294      5031          addq.l    #1,(A4)
                    5032   DecodeBWLDataAfterOpCode_7:
                    5033   ; }
                    5034   ; // special case for divs - bugger!!!
                    5035   ; if((*OpCode & (unsigned short int)(0xF1C0)) == (unsigned short int)(0x81C0)) // it's the divs instruction
00002E7C  2043      5036          move.l    D3,A0
00002E7E  3010      5037          move.w    (A0),D0
00002E80  C07C F1C0 5038          and.w     #61888,D0
00002E84  0C40 81C0 5039          cmp.w     #33216,D0
00002E88  6622      5040          bne.s     DecodeBWLDataAfterOpCode_10
                    5041   ; {
                    5042   ; InstructionSize = 2 ;
00002E8A  28BC 0000 5043          move.l    #2,(A4)
00002E8E  0002      
                    5044   ; sprintf(TempString, "#$%X", (unsigned int)(OpCode[1]));
00002E90  2043      5045          move.l    D3,A0
00002E92  3228 0002 5046          move.w    2(A0),D1
00002E96  C2BC 0000 5047          and.l     #65535,D1
00002E9A  FFFF      
00002E9C  2F01      5048          move.l    D1,-(A7)
00002E9E  4879 0000 5049          pea       @m68kde~1_180.L
00002EA2  717C      
00002EA4  2F0A      5050          move.l    A2,-(A7)
00002EA6  4E93      5051          jsr       (A3)
00002EA8  DEFC 000C 5052          add.w     #12,A7
                    5053   DecodeBWLDataAfterOpCode_10:
                    5054   ; }
                    5055   ; strcatInstruction(TempString) ;
00002EAC  2F0A      5056          move.l    A2,-(A7)
00002EAE  4EB8 0CCC 5057          jsr       _strcatInstruction
00002EB2  584F      5058          addq.w    #4,A7
00002EB4  4CDF 1C0C 5059          movem.l   (A7)+,D2/D3/A2/A3/A4
00002EB8  4E5E      5060          unlk      A6
00002EBA  4E75      5061          rts
                    5062   ; }
                    5063   ; //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                    5064   ; // This function decodes the MODE|EA bits opcode in bits 5,4,3,2,1,0 or 11-6
                    5065   ; // DataSize is used to gain access to the operand used by EA, e.g. ADDI  #$2344422,$234234
                    5066   ; // since the data following the opcode is actually the immediate data which could be 1 or 2 words
                    5067   ; //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                    5068   ; void Decode6BitEA(unsigned short int *OpCode, int EAChoice, unsigned short int DataSize, unsigned short int IsItMoveInstruction)     // decode Mode/Register
                    5069   ; {
                    5070   _Decode6BitEA:
00002EBC  4E56 FFF4 5071          link      A6,#-12
00002EC0  48E7 3F3C 5072          movem.l   D2/D3/D4/D5/D6/D7/A2/A3/A4/A5,-(A7)
00002EC4  45F8 0CCC 5073          lea       _strcatInstruction.L,A2
00002EC8  47F9 0803 5074          lea       _TempString.L,A3
00002ECC  0546      
00002ECE  282E 0008 5075          move.l    8(A6),D4
00002ED2  49F9 0000 5076          lea       _sprintf.L,A4
00002ED6  54F8      
00002ED8  4BF9 0803 5077          lea       _InstructionSize.L,A5
00002EDC  017E      
00002EDE  3C2E 0012 5078          move.w    18(A6),D6
00002EE2  CCBC 0000 5079          and.l     #65535,D6
00002EE6  FFFF      
                    5080   ; unsigned char OperandMode, OperandRegister, OperandSize;
                    5081   ; short int ExWord1, ExWord2 ;                       // get any extra 16 bit word associated with EA
                    5082   ; unsigned char RegNumber[3];
                    5083   ; signed char offset ;
                    5084   ; unsigned short int Xn, XnSize ;
                    5085   ; if(EAChoice == 0)   {   // if EA in bits 5-0
00002EE8  202E 000C 5086          move.l    12(A6),D0
00002EEC  6620      5087          bne.s     Decode6BitEA_1
                    5088   ; OperandMode = ((unsigned char)(*OpCode >> 3) & (unsigned short int)(0x7)) ;    // get bits 5,4,3 into position 2,1,0
00002EEE  2044      5089          move.l    D4,A0
00002EF0  3010      5090          move.w    (A0),D0
00002EF2  E648      5091          lsr.w     #3,D0
00002EF4  C07C 00FF 5092          and.w     #255,D0
00002EF8  C07C 0007 5093          and.w     #7,D0
00002EFC  1A00      5094          move.b    D0,D5
                    5095   ; OperandRegister = ((unsigned char)(*OpCode) & (unsigned short int)(0x7)) ;
00002EFE  2044      5096          move.l    D4,A0
00002F00  3010      5097          move.w    (A0),D0
00002F02  C07C 00FF 5098          and.w     #255,D0
00002F06  C07C 0007 5099          and.w     #7,D0
00002F0A  1600      5100          move.b    D0,D3
00002F0C  6022      5101          bra.s     Decode6BitEA_2
                    5102   Decode6BitEA_1:
                    5103   ; }
                    5104   ; else    {               // else EA in bits 11-6
                    5105   ; OperandMode = ((unsigned char)(*OpCode >> 6) & (unsigned short int)(0x7)) ;
00002F0E  2044      5106          move.l    D4,A0
00002F10  3010      5107          move.w    (A0),D0
00002F12  EC48      5108          lsr.w     #6,D0
00002F14  C07C 00FF 5109          and.w     #255,D0
00002F18  C07C 0007 5110          and.w     #7,D0
00002F1C  1A00      5111          move.b    D0,D5
                    5112   ; OperandRegister = ((unsigned char)(*OpCode >> 9) & (unsigned short int)(0x7)) ;
00002F1E  2044      5113          move.l    D4,A0
00002F20  3010      5114          move.w    (A0),D0
00002F22  E048      5115          lsr.w     #8,D0
00002F24  E248      5116          lsr.w     #1,D0
00002F26  C07C 00FF 5117          and.w     #255,D0
00002F2A  C07C 0007 5118          and.w     #7,D0
00002F2E  1600      5119          move.b    D0,D3
                    5120   Decode6BitEA_2:
                    5121   ; }
                    5122   ; if(EAChoice == 0)    {
00002F30  202E 000C 5123          move.l    12(A6),D0
00002F34  6600 0034 5124          bne       Decode6BitEA_3
                    5125   ; ExWord1 = OpCode[1+DataSize] ;
00002F38  2044      5126          move.l    D4,A0
00002F3A  7001      5127          moveq     #1,D0
00002F3C  4880      5128          ext.w     D0
00002F3E  48C0      5129          ext.l     D0
00002F40  CCBC 0000 5130          and.l     #65535,D6
00002F44  FFFF      
00002F46  D086      5131          add.l     D6,D0
00002F48  E388      5132          lsl.l     #1,D0
00002F4A  3430 0800 5133          move.w    0(A0,D0.L),D2
                    5134   ; ExWord2 = OpCode[2+DataSize] ;
00002F4E  2044      5135          move.l    D4,A0
00002F50  7002      5136          moveq     #2,D0
00002F52  4880      5137          ext.w     D0
00002F54  48C0      5138          ext.l     D0
00002F56  CCBC 0000 5139          and.l     #65535,D6
00002F5A  FFFF      
00002F5C  D086      5140          add.l     D6,D0
00002F5E  E388      5141          lsl.l     #1,D0
00002F60  3D70 0800 5142          move.w    0(A0,D0.L),-8(A6)
00002F64  FFF8      
00002F66  6000 007E 5143          bra       Decode6BitEA_7
                    5144   Decode6BitEA_3:
                    5145   ; }
                    5146   ; else if(EAChoice == 1)   {
00002F6A  202E 000C 5147          move.l    12(A6),D0
00002F6E  0C80 0000 5148          cmp.l     #1,D0
00002F72  0001      
00002F74  6600 0034 5149          bne       Decode6BitEA_5
                    5150   ; ExWord1 = OpCode[3+DataSize] ;
00002F78  2044      5151          move.l    D4,A0
00002F7A  7003      5152          moveq     #3,D0
00002F7C  4880      5153          ext.w     D0
00002F7E  48C0      5154          ext.l     D0
00002F80  CCBC 0000 5155          and.l     #65535,D6
00002F84  FFFF      
00002F86  D086      5156          add.l     D6,D0
00002F88  E388      5157          lsl.l     #1,D0
00002F8A  3430 0800 5158          move.w    0(A0,D0.L),D2
                    5159   ; ExWord2 = OpCode[4+DataSize] ;
00002F8E  2044      5160          move.l    D4,A0
00002F90  7004      5161          moveq     #4,D0
00002F92  4880      5162          ext.w     D0
00002F94  48C0      5163          ext.l     D0
00002F96  CCBC 0000 5164          and.l     #65535,D6
00002F9A  FFFF      
00002F9C  D086      5165          add.l     D6,D0
00002F9E  E388      5166          lsl.l     #1,D0
00002FA0  3D70 0800 5167          move.w    0(A0,D0.L),-8(A6)
00002FA4  FFF8      
00002FA6  6000 003E 5168          bra       Decode6BitEA_7
                    5169   Decode6BitEA_5:
                    5170   ; }
                    5171   ; else if(EAChoice == 2)   {  // for move instruction
00002FAA  202E 000C 5172          move.l    12(A6),D0
00002FAE  0C80 0000 5173          cmp.l     #2,D0
00002FB2  0002      
00002FB4  6600 0030 5174          bne       Decode6BitEA_7
                    5175   ; ExWord1 = OpCode[1+DataSize] ;
00002FB8  2044      5176          move.l    D4,A0
00002FBA  7001      5177          moveq     #1,D0
00002FBC  4880      5178          ext.w     D0
00002FBE  48C0      5179          ext.l     D0
00002FC0  CCBC 0000 5180          and.l     #65535,D6
00002FC4  FFFF      
00002FC6  D086      5181          add.l     D6,D0
00002FC8  E388      5182          lsl.l     #1,D0
00002FCA  3430 0800 5183          move.w    0(A0,D0.L),D2
                    5184   ; ExWord2 = OpCode[2+DataSize] ;
00002FCE  2044      5185          move.l    D4,A0
00002FD0  7002      5186          moveq     #2,D0
00002FD2  4880      5187          ext.w     D0
00002FD4  48C0      5188          ext.l     D0
00002FD6  CCBC 0000 5189          and.l     #65535,D6
00002FDA  FFFF      
00002FDC  D086      5190          add.l     D6,D0
00002FDE  E388      5191          lsl.l     #1,D0
00002FE0  3D70 0800 5192          move.w    0(A0,D0.L),-8(A6)
00002FE4  FFF8      
                    5193   Decode6BitEA_7:
                    5194   ; }
                    5195   ; if(OperandMode == (unsigned char)(0)) {                    // Effective Address = Dn
00002FE6  4A05      5196          tst.b     D5
00002FE8  661E      5197          bne.s     Decode6BitEA_9
                    5198   ; RegNumber[0] = 'D' ;
00002FEA  1D7C 0044 5199          move.b    #68,-6+0(A6)
00002FEE  FFFA      
                    5200   ; RegNumber[1] = (unsigned char)(0x30 + OperandRegister) ;
00002FF0  7030      5201          moveq     #48,D0
00002FF2  D003      5202          add.b     D3,D0
00002FF4  1D40 FFFB 5203          move.b    D0,-6+1(A6)
                    5204   ; RegNumber[2] = 0 ;
00002FF8  422E FFFC 5205          clr.b     -6+2(A6)
                    5206   ; strcatInstruction(RegNumber) ;
00002FFC  486E FFFA 5207          pea       -6(A6)
00003000  4E92      5208          jsr       (A2)
00003002  584F      5209          addq.w    #4,A7
00003004  6000 02D6 5210          bra       Decode6BitEA_44
                    5211   Decode6BitEA_9:
                    5212   ; }
                    5213   ; else if(OperandMode == (unsigned char)(1)) {                    // Effective Address = An
00003008  0C05 0001 5214          cmp.b     #1,D5
0000300C  6616      5215          bne.s     Decode6BitEA_11
                    5216   ; Decode3BitAddressRegister(OperandRegister) ;
0000300E  C67C 00FF 5217          and.w     #255,D3
00003012  C6BC 0000 5218          and.l     #65535,D3
00003016  FFFF      
00003018  2F03      5219          move.l    D3,-(A7)
0000301A  4EB8 2CB8 5220          jsr       _Decode3BitAddressRegister
0000301E  584F      5221          addq.w    #4,A7
00003020  6000 02BA 5222          bra       Decode6BitEA_44
                    5223   Decode6BitEA_11:
                    5224   ; }
                    5225   ; else if(OperandMode == (unsigned char)(2)) {                    // Effective Address = (An)
00003024  0C05 0002 5226          cmp.b     #2,D5
00003028  662A      5227          bne.s     Decode6BitEA_13
                    5228   ; strcatInstruction("(") ;
0000302A  4879 0000 5229          pea       @m68kde~1_181.L
0000302E  7182      
00003030  4E92      5230          jsr       (A2)
00003032  584F      5231          addq.w    #4,A7
                    5232   ; Decode3BitAddressRegister(OperandRegister) ;
00003034  C67C 00FF 5233          and.w     #255,D3
00003038  C6BC 0000 5234          and.l     #65535,D3
0000303C  FFFF      
0000303E  2F03      5235          move.l    D3,-(A7)
00003040  4EB8 2CB8 5236          jsr       _Decode3BitAddressRegister
00003044  584F      5237          addq.w    #4,A7
                    5238   ; strcatInstruction(")") ;
00003046  4879 0000 5239          pea       @m68kde~1_182.L
0000304A  7184      
0000304C  4E92      5240          jsr       (A2)
0000304E  584F      5241          addq.w    #4,A7
00003050  6000 028A 5242          bra       Decode6BitEA_44
                    5243   Decode6BitEA_13:
                    5244   ; }
                    5245   ; else if(OperandMode == (unsigned char)(3)) {                    // Effective Address = (An)+
00003054  0C05 0003 5246          cmp.b     #3,D5
00003058  662A      5247          bne.s     Decode6BitEA_15
                    5248   ; strcatInstruction("(") ;
0000305A  4879 0000 5249          pea       @m68kde~1_183.L
0000305E  7186      
00003060  4E92      5250          jsr       (A2)
00003062  584F      5251          addq.w    #4,A7
                    5252   ; Decode3BitAddressRegister(OperandRegister) ;
00003064  C67C 00FF 5253          and.w     #255,D3
00003068  C6BC 0000 5254          and.l     #65535,D3
0000306C  FFFF      
0000306E  2F03      5255          move.l    D3,-(A7)
00003070  4EB8 2CB8 5256          jsr       _Decode3BitAddressRegister
00003074  584F      5257          addq.w    #4,A7
                    5258   ; strcatInstruction(")+") ;
00003076  4879 0000 5259          pea       @m68kde~1_184.L
0000307A  7188      
0000307C  4E92      5260          jsr       (A2)
0000307E  584F      5261          addq.w    #4,A7
00003080  6000 025A 5262          bra       Decode6BitEA_44
                    5263   Decode6BitEA_15:
                    5264   ; }
                    5265   ; else if(OperandMode == (unsigned char)(4)) {                    // Effective Address = -(An)
00003084  0C05 0004 5266          cmp.b     #4,D5
00003088  662A      5267          bne.s     Decode6BitEA_17
                    5268   ; strcatInstruction("-(") ;
0000308A  4879 0000 5269          pea       @m68kde~1_185.L
0000308E  718C      
00003090  4E92      5270          jsr       (A2)
00003092  584F      5271          addq.w    #4,A7
                    5272   ; Decode3BitAddressRegister(OperandRegister) ;
00003094  C67C 00FF 5273          and.w     #255,D3
00003098  C6BC 0000 5274          and.l     #65535,D3
0000309C  FFFF      
0000309E  2F03      5275          move.l    D3,-(A7)
000030A0  4EB8 2CB8 5276          jsr       _Decode3BitAddressRegister
000030A4  584F      5277          addq.w    #4,A7
                    5278   ; strcatInstruction(")") ;
000030A6  4879 0000 5279          pea       @m68kde~1_186.L
000030AA  7190      
000030AC  4E92      5280          jsr       (A2)
000030AE  584F      5281          addq.w    #4,A7
000030B0  6000 022A 5282          bra       Decode6BitEA_44
                    5283   Decode6BitEA_17:
                    5284   ; }
                    5285   ; else if(OperandMode == (unsigned char)(5)) {                    // Effective Address = (d16, An)
000030B4  0C05 0005 5286          cmp.b     #5,D5
000030B8  6626      5287          bne.s     Decode6BitEA_19
                    5288   ; sprintf(TempString, "%d(A%d)", ExWord1, OperandRegister) ;
000030BA  C6BC 0000 5289          and.l     #255,D3
000030BE  00FF      
000030C0  2F03      5290          move.l    D3,-(A7)
000030C2  48C2      5291          ext.l     D2
000030C4  2F02      5292          move.l    D2,-(A7)
000030C6  4879 0000 5293          pea       @m68kde~1_187.L
000030CA  7192      
000030CC  2F0B      5294          move.l    A3,-(A7)
000030CE  4E94      5295          jsr       (A4)
000030D0  DEFC 0010 5296          add.w     #16,A7
                    5297   ; strcatInstruction(TempString) ;
000030D4  2F0B      5298          move.l    A3,-(A7)
000030D6  4E92      5299          jsr       (A2)
000030D8  584F      5300          addq.w    #4,A7
                    5301   ; InstructionSize += 1;
000030DA  5295      5302          addq.l    #1,(A5)
000030DC  6000 01FE 5303          bra       Decode6BitEA_44
                    5304   Decode6BitEA_19:
                    5305   ; }
                    5306   ; else if(OperandMode == (unsigned char)(6)) {                    // Effective Address = (d8, An, Xn)
000030E0  0C05 0006 5307          cmp.b     #6,D5
000030E4  6600 00AA 5308          bne       Decode6BitEA_21
                    5309   ; offset = ExWord1 & (short int)(0x00FF);
000030E8  3002      5310          move.w    D2,D0
000030EA  C07C 00FF 5311          and.w     #255,D0
000030EE  1D40 FFFD 5312          move.b    D0,-3(A6)
                    5313   ; sprintf(TempString, "%d(A%d,", offset, OperandRegister) ;
000030F2  C6BC 0000 5314          and.l     #255,D3
000030F6  00FF      
000030F8  2F03      5315          move.l    D3,-(A7)
000030FA  122E FFFD 5316          move.b    -3(A6),D1
000030FE  4881      5317          ext.w     D1
00003100  48C1      5318          ext.l     D1
00003102  2F01      5319          move.l    D1,-(A7)
00003104  4879 0000 5320          pea       @m68kde~1_188.L
00003108  719A      
0000310A  2F0B      5321          move.l    A3,-(A7)
0000310C  4E94      5322          jsr       (A4)
0000310E  DEFC 0010 5323          add.w     #16,A7
                    5324   ; strcatInstruction(TempString) ;
00003112  2F0B      5325          move.l    A3,-(A7)
00003114  4E92      5326          jsr       (A2)
00003116  584F      5327          addq.w    #4,A7
                    5328   ; InstructionSize += 1;
00003118  5295      5329          addq.l    #1,(A5)
                    5330   ; // decode the Xn bit
                    5331   ; if((ExWord1 & (unsigned short int)(0x8000)) == (unsigned short int)(0x0000))
0000311A  3002      5332          move.w    D2,D0
0000311C  C07C 8000 5333          and.w     #32768,D0
00003120  660C      5334          bne.s     Decode6BitEA_23
                    5335   ; strcatInstruction("D") ;
00003122  4879 0000 5336          pea       @m68kde~1_189.L
00003126  71A2      
00003128  4E92      5337          jsr       (A2)
0000312A  584F      5338          addq.w    #4,A7
0000312C  600A      5339          bra.s     Decode6BitEA_24
                    5340   Decode6BitEA_23:
                    5341   ; else
                    5342   ; strcatInstruction("A") ;
0000312E  4879 0000 5343          pea       @m68kde~1_190.L
00003132  71A4      
00003134  4E92      5344          jsr       (A2)
00003136  584F      5345          addq.w    #4,A7
                    5346   Decode6BitEA_24:
                    5347   ; Xn = (ExWord1 & (unsigned short int)(0x7000)) >> 12 ;        // get Xn register Number into bits 2,1,0
00003138  3002      5348          move.w    D2,D0
0000313A  C07C 7000 5349          and.w     #28672,D0
0000313E  E048      5350          lsr.w     #8,D0
00003140  E848      5351          lsr.w     #4,D0
00003142  3D40 FFFE 5352          move.w    D0,-2(A6)
                    5353   ; sprintf(TempString, "%d",Xn) ;                               // generate string for reg number 0 -7
00003146  322E FFFE 5354          move.w    -2(A6),D1
0000314A  C2BC 0000 5355          and.l     #65535,D1
0000314E  FFFF      
00003150  2F01      5356          move.l    D1,-(A7)
00003152  4879 0000 5357          pea       @m68kde~1_191.L
00003156  71A6      
00003158  2F0B      5358          move.l    A3,-(A7)
0000315A  4E94      5359          jsr       (A4)
0000315C  DEFC 000C 5360          add.w     #12,A7
                    5361   ; strcatInstruction(TempString) ;
00003160  2F0B      5362          move.l    A3,-(A7)
00003162  4E92      5363          jsr       (A2)
00003164  584F      5364          addq.w    #4,A7
                    5365   ; XnSize = (ExWord1 & (unsigned short int)(0x0800)) >> 11 ;    // get xn size into bit 0
00003166  3002      5366          move.w    D2,D0
00003168  C07C 0800 5367          and.w     #2048,D0
0000316C  E048      5368          lsr.w     #8,D0
0000316E  E648      5369          lsr.w     #3,D0
00003170  3E00      5370          move.w    D0,D7
                    5371   ; if(XnSize == 0)
00003172  4A47      5372          tst.w     D7
00003174  660C      5373          bne.s     Decode6BitEA_25
                    5374   ; strcatInstruction(".W)") ;
00003176  4879 0000 5375          pea       @m68kde~1_192.L
0000317A  71AA      
0000317C  4E92      5376          jsr       (A2)
0000317E  584F      5377          addq.w    #4,A7
00003180  600A      5378          bra.s     Decode6BitEA_26
                    5379   Decode6BitEA_25:
                    5380   ; else
                    5381   ; strcatInstruction(".L)") ;
00003182  4879 0000 5382          pea       @m68kde~1_193.L
00003186  71AE      
00003188  4E92      5383          jsr       (A2)
0000318A  584F      5384          addq.w    #4,A7
                    5385   Decode6BitEA_26:
0000318C  6000 014E 5386          bra       Decode6BitEA_44
                    5387   Decode6BitEA_21:
                    5388   ; }
                    5389   ; else if(OperandMode == (unsigned char)(7)) {
00003190  0C05 0007 5390          cmp.b     #7,D5
00003194  6600 0146 5391          bne       Decode6BitEA_44
                    5392   ; if(OperandRegister == 0) {                               // EA = (xxx).W
00003198  4A03      5393          tst.b     D3
0000319A  661E      5394          bne.s     Decode6BitEA_29
                    5395   ; sprintf(TempString, "$%X", ExWord1) ;
0000319C  48C2      5396          ext.l     D2
0000319E  2F02      5397          move.l    D2,-(A7)
000031A0  4879 0000 5398          pea       @m68kde~1_194.L
000031A4  71B2      
000031A6  2F0B      5399          move.l    A3,-(A7)
000031A8  4E94      5400          jsr       (A4)
000031AA  DEFC 000C 5401          add.w     #12,A7
                    5402   ; strcatInstruction(TempString) ;
000031AE  2F0B      5403          move.l    A3,-(A7)
000031B0  4E92      5404          jsr       (A2)
000031B2  584F      5405          addq.w    #4,A7
                    5406   ; InstructionSize += 1;
000031B4  5295      5407          addq.l    #1,(A5)
000031B6  6000 0124 5408          bra       Decode6BitEA_44
                    5409   Decode6BitEA_29:
                    5410   ; }
                    5411   ; else if(OperandRegister == 1)   {                         // EA = (xxx).L
000031BA  0C03 0001 5412          cmp.b     #1,D3
000031BE  6600 0032 5413          bne       Decode6BitEA_31
                    5414   ; sprintf(TempString, "$%X", ((unsigned int)(ExWord1) << 16) | (unsigned int)(ExWord2)); // create 32 bit address
000031C2  3202      5415          move.w    D2,D1
000031C4  48C1      5416          ext.l     D1
000031C6  E189      5417          lsl.l     #8,D1
000031C8  E189      5418          lsl.l     #8,D1
000031CA  2F00      5419          move.l    D0,-(A7)
000031CC  302E FFF8 5420          move.w    -8(A6),D0
000031D0  48C0      5421          ext.l     D0
000031D2  8280      5422          or.l      D0,D1
000031D4  201F      5423          move.l    (A7)+,D0
000031D6  2F01      5424          move.l    D1,-(A7)
000031D8  4879 0000 5425          pea       @m68kde~1_195.L
000031DC  71B6      
000031DE  2F0B      5426          move.l    A3,-(A7)
000031E0  4E94      5427          jsr       (A4)
000031E2  DEFC 000C 5428          add.w     #12,A7
                    5429   ; strcatInstruction(TempString) ;
000031E6  2F0B      5430          move.l    A3,-(A7)
000031E8  4E92      5431          jsr       (A2)
000031EA  584F      5432          addq.w    #4,A7
                    5433   ; InstructionSize += 2;
000031EC  5495      5434          addq.l    #2,(A5)
000031EE  6000 00EC 5435          bra       Decode6BitEA_44
                    5436   Decode6BitEA_31:
                    5437   ; }
                    5438   ; else if(OperandRegister == 4) {                                 // source EA = #Immediate addressing
000031F2  0C03 0004 5439          cmp.b     #4,D3
000031F6  661C      5440          bne.s     Decode6BitEA_33
                    5441   ; if(IsItMoveInstruction == 0)        //not move instruction
000031F8  302E 0016 5442          move.w    22(A6),D0
000031FC  660A      5443          bne.s     Decode6BitEA_35
                    5444   ; DecodeBWLDataAfterOpCode(OpCode);
000031FE  2F04      5445          move.l    D4,-(A7)
00003200  4EB8 2DAC 5446          jsr       _DecodeBWLDataAfterOpCode
00003204  584F      5447          addq.w    #4,A7
00003206  6008      5448          bra.s     Decode6BitEA_36
                    5449   Decode6BitEA_35:
                    5450   ; else
                    5451   ; DecodeBWLDataAfterOpCodeForMove(OpCode);
00003208  2F04      5452          move.l    D4,-(A7)
0000320A  4EB8 2CE4 5453          jsr       _DecodeBWLDataAfterOpCodeForMove
0000320E  584F      5454          addq.w    #4,A7
                    5455   Decode6BitEA_36:
00003210  6000 00CA 5456          bra       Decode6BitEA_44
                    5457   Decode6BitEA_33:
                    5458   ; }
                    5459   ; else if(OperandRegister == 2) {                                 // source EA = (d16,PC)
00003214  0C03 0002 5460          cmp.b     #2,D3
00003218  661E      5461          bne.s     Decode6BitEA_37
                    5462   ; sprintf(TempString, "%d(PC)", ExWord1) ;
0000321A  48C2      5463          ext.l     D2
0000321C  2F02      5464          move.l    D2,-(A7)
0000321E  4879 0000 5465          pea       @m68kde~1_196.L
00003222  71BA      
00003224  2F0B      5466          move.l    A3,-(A7)
00003226  4E94      5467          jsr       (A4)
00003228  DEFC 000C 5468          add.w     #12,A7
                    5469   ; strcatInstruction(TempString) ;
0000322C  2F0B      5470          move.l    A3,-(A7)
0000322E  4E92      5471          jsr       (A2)
00003230  584F      5472          addq.w    #4,A7
                    5473   ; InstructionSize += 1;
00003232  5295      5474          addq.l    #1,(A5)
00003234  6000 00A6 5475          bra       Decode6BitEA_44
                    5476   Decode6BitEA_37:
                    5477   ; }
                    5478   ; else if(OperandRegister == 3) {                                 // source EA = (d8,PC, Xn)
00003238  0C03 0003 5479          cmp.b     #3,D3
0000323C  6600 009E 5480          bne       Decode6BitEA_44
                    5481   ; offset = ExWord1 & (short int)(0x00FF);
00003240  3002      5482          move.w    D2,D0
00003242  C07C 00FF 5483          and.w     #255,D0
00003246  1D40 FFFD 5484          move.b    D0,-3(A6)
                    5485   ; sprintf(TempString, "%d(PC,", offset ) ;
0000324A  122E FFFD 5486          move.b    -3(A6),D1
0000324E  4881      5487          ext.w     D1
00003250  48C1      5488          ext.l     D1
00003252  2F01      5489          move.l    D1,-(A7)
00003254  4879 0000 5490          pea       @m68kde~1_197.L
00003258  71C2      
0000325A  2F0B      5491          move.l    A3,-(A7)
0000325C  4E94      5492          jsr       (A4)
0000325E  DEFC 000C 5493          add.w     #12,A7
                    5494   ; strcatInstruction(TempString) ;
00003262  2F0B      5495          move.l    A3,-(A7)
00003264  4E92      5496          jsr       (A2)
00003266  584F      5497          addq.w    #4,A7
                    5498   ; InstructionSize += 1;
00003268  5295      5499          addq.l    #1,(A5)
                    5500   ; // decode the Xn bit
                    5501   ; if((ExWord1 & (unsigned short int)(0x8000)) == (unsigned short int)(0x0000))
0000326A  3002      5502          move.w    D2,D0
0000326C  C07C 8000 5503          and.w     #32768,D0
00003270  660C      5504          bne.s     Decode6BitEA_41
                    5505   ; strcatInstruction("D") ;
00003272  4879 0000 5506          pea       @m68kde~1_198.L
00003276  71CA      
00003278  4E92      5507          jsr       (A2)
0000327A  584F      5508          addq.w    #4,A7
0000327C  600A      5509          bra.s     Decode6BitEA_42
                    5510   Decode6BitEA_41:
                    5511   ; else
                    5512   ; strcatInstruction("A") ;
0000327E  4879 0000 5513          pea       @m68kde~1_199.L
00003282  71CC      
00003284  4E92      5514          jsr       (A2)
00003286  584F      5515          addq.w    #4,A7
                    5516   Decode6BitEA_42:
                    5517   ; Xn = (ExWord1 & (unsigned short int)(0x7000)) >> 12 ;        // get Xn register Number into bits 2,1,0
00003288  3002      5518          move.w    D2,D0
0000328A  C07C 7000 5519          and.w     #28672,D0
0000328E  E048      5520          lsr.w     #8,D0
00003290  E848      5521          lsr.w     #4,D0
00003292  3D40 FFFE 5522          move.w    D0,-2(A6)
                    5523   ; sprintf(TempString, "%d",Xn) ;                               // generate string for reg number 0 -7
00003296  322E FFFE 5524          move.w    -2(A6),D1
0000329A  C2BC 0000 5525          and.l     #65535,D1
0000329E  FFFF      
000032A0  2F01      5526          move.l    D1,-(A7)
000032A2  4879 0000 5527          pea       @m68kde~1_200.L
000032A6  71CE      
000032A8  2F0B      5528          move.l    A3,-(A7)
000032AA  4E94      5529          jsr       (A4)
000032AC  DEFC 000C 5530          add.w     #12,A7
                    5531   ; strcatInstruction(TempString) ;
000032B0  2F0B      5532          move.l    A3,-(A7)
000032B2  4E92      5533          jsr       (A2)
000032B4  584F      5534          addq.w    #4,A7
                    5535   ; XnSize = (ExWord1 & (unsigned short int)(0x0800)) >> 11 ;    // get xn size into bit 0
000032B6  3002      5536          move.w    D2,D0
000032B8  C07C 0800 5537          and.w     #2048,D0
000032BC  E048      5538          lsr.w     #8,D0
000032BE  E648      5539          lsr.w     #3,D0
000032C0  3E00      5540          move.w    D0,D7
                    5541   ; if(XnSize == 0)
000032C2  4A47      5542          tst.w     D7
000032C4  660C      5543          bne.s     Decode6BitEA_43
                    5544   ; strcatInstruction(".W)") ;
000032C6  4879 0000 5545          pea       @m68kde~1_201.L
000032CA  71D2      
000032CC  4E92      5546          jsr       (A2)
000032CE  584F      5547          addq.w    #4,A7
000032D0  600A      5548          bra.s     Decode6BitEA_44
                    5549   Decode6BitEA_43:
                    5550   ; else
                    5551   ; strcatInstruction(".L)") ;
000032D2  4879 0000 5552          pea       @m68kde~1_202.L
000032D6  71D6      
000032D8  4E92      5553          jsr       (A2)
000032DA  584F      5554          addq.w    #4,A7
                    5555   Decode6BitEA_44:
000032DC  4CDF 3CFC 5556          movem.l   (A7)+,D2/D3/D4/D5/D6/D7/A2/A3/A4/A5
000032E0  4E5E      5557          unlk      A6
000032E2  4E75      5558          rts
                    5559   ; }
                    5560   ; }
                    5561   ; }
                    5562   ; void Decode3BitOperandMode(unsigned short int *OpCode)               // used with instructions like ADD determines source/destination
                    5563   ; {
                    5564   _Decode3BitOperandMode:
000032E4  4E56 FFFC 5565          link      A6,#-4
000032E8  2F02      5566          move.l    D2,-(A7)
000032EA  242E 0008 5567          move.l    8(A6),D2
                    5568   ; unsigned short int OperandMode;
                    5569   ; OperandMode = (*OpCode & (unsigned short int)(0x0100)) >> 8 ;    // get bit 8 into position 0, defines source and destination
000032EE  2042      5570          move.l    D2,A0
000032F0  3010      5571          move.w    (A0),D0
000032F2  C07C 0100 5572          and.w     #256,D0
000032F6  E048      5573          lsr.w     #8,D0
000032F8  3D40 FFFE 5574          move.w    D0,-2(A6)
                    5575   ; Decode2BitOperandSize(*OpCode);                                  // add .b, .w, .l size indicator to instruction string
000032FC  2042      5576          move.l    D2,A0
000032FE  3210      5577          move.w    (A0),D1
00003300  C2BC 0000 5578          and.l     #65535,D1
00003304  FFFF      
00003306  2F01      5579          move.l    D1,-(A7)
00003308  4EB8 2C28 5580          jsr       _Decode2BitOperandSize
0000330C  584F      5581          addq.w    #4,A7
                    5582   ; if(OperandMode == 0)     {                                      // Destination is a Data Register
0000330E  302E FFFE 5583          move.w    -2(A6),D0
00003312  6600 0032 5584          bne       Decode3BitOperandMode_1
                    5585   ; Decode6BitEA(OpCode,0,0,0) ;
00003316  42A7      5586          clr.l     -(A7)
00003318  42A7      5587          clr.l     -(A7)
0000331A  42A7      5588          clr.l     -(A7)
0000331C  2F02      5589          move.l    D2,-(A7)
0000331E  4EB8 2EBC 5590          jsr       _Decode6BitEA
00003322  DEFC 0010 5591          add.w     #16,A7
                    5592   ; strcatInstruction(",") ;
00003326  4879 0000 5593          pea       @m68kde~1_203.L
0000332A  71DA      
0000332C  4EB8 0CCC 5594          jsr       _strcatInstruction
00003330  584F      5595          addq.w    #4,A7
                    5596   ; Decode3BitDataRegister(*OpCode) ;
00003332  2042      5597          move.l    D2,A0
00003334  3210      5598          move.w    (A0),D1
00003336  C2BC 0000 5599          and.l     #65535,D1
0000333A  FFFF      
0000333C  2F01      5600          move.l    D1,-(A7)
0000333E  4EB8 2C84 5601          jsr       _Decode3BitDataRegister
00003342  584F      5602          addq.w    #4,A7
00003344  602E      5603          bra.s     Decode3BitOperandMode_2
                    5604   Decode3BitOperandMode_1:
                    5605   ; }
                    5606   ; else {                                                         // Destination is in EA
                    5607   ; Decode3BitDataRegister(*OpCode) ;
00003346  2042      5608          move.l    D2,A0
00003348  3210      5609          move.w    (A0),D1
0000334A  C2BC 0000 5610          and.l     #65535,D1
0000334E  FFFF      
00003350  2F01      5611          move.l    D1,-(A7)
00003352  4EB8 2C84 5612          jsr       _Decode3BitDataRegister
00003356  584F      5613          addq.w    #4,A7
                    5614   ; strcatInstruction(",") ;
00003358  4879 0000 5615          pea       @m68kde~1_204.L
0000335C  71DC      
0000335E  4EB8 0CCC 5616          jsr       _strcatInstruction
00003362  584F      5617          addq.w    #4,A7
                    5618   ; Decode6BitEA(OpCode,0,0,0) ;
00003364  42A7      5619          clr.l     -(A7)
00003366  42A7      5620          clr.l     -(A7)
00003368  42A7      5621          clr.l     -(A7)
0000336A  2F02      5622          move.l    D2,-(A7)
0000336C  4EB8 2EBC 5623          jsr       _Decode6BitEA
00003370  DEFC 0010 5624          add.w     #16,A7
                    5625   Decode3BitOperandMode_2:
00003374  241F      5626          move.l    (A7)+,D2
00003376  4E5E      5627          unlk      A6
00003378  4E75      5628          rts
                    5629   ; }
                    5630   ; }
                    5631   ; void DecodeBranchCondition(unsigned short int Condition)
                    5632   ; {
                    5633   _DecodeBranchCondition:
0000337A  4E56 0000 5634          link      A6,#0
0000337E  48E7 2020 5635          movem.l   D2/A2,-(A7)
00003382  45F8 0CCC 5636          lea       _strcatInstruction.L,A2
00003386  342E 000A 5637          move.w    10(A6),D2
0000338A  C4BC 0000 5638          and.l     #65535,D2
0000338E  FFFF      
                    5639   ; if(Condition == (unsigned short int)(0x04))
00003390  0C42 0004 5640          cmp.w     #4,D2
00003394  660E      5641          bne.s     DecodeBranchCondition_1
                    5642   ; strcatInstruction("CC") ;
00003396  4879 0000 5643          pea       @m68kde~1_205.L
0000339A  71DE      
0000339C  4E92      5644          jsr       (A2)
0000339E  584F      5645          addq.w    #4,A7
000033A0  6000 011C 5646          bra       DecodeBranchCondition_30
                    5647   DecodeBranchCondition_1:
                    5648   ; else if(Condition == (unsigned short int)(0x05))
000033A4  0C42 0005 5649          cmp.w     #5,D2
000033A8  660E      5650          bne.s     DecodeBranchCondition_3
                    5651   ; strcatInstruction("CS") ;
000033AA  4879 0000 5652          pea       @m68kde~1_206.L
000033AE  71E2      
000033B0  4E92      5653          jsr       (A2)
000033B2  584F      5654          addq.w    #4,A7
000033B4  6000 0108 5655          bra       DecodeBranchCondition_30
                    5656   DecodeBranchCondition_3:
                    5657   ; else if(Condition == (unsigned short int)(0x07))
000033B8  0C42 0007 5658          cmp.w     #7,D2
000033BC  660E      5659          bne.s     DecodeBranchCondition_5
                    5660   ; strcatInstruction("EQ") ;
000033BE  4879 0000 5661          pea       @m68kde~1_207.L
000033C2  71E6      
000033C4  4E92      5662          jsr       (A2)
000033C6  584F      5663          addq.w    #4,A7
000033C8  6000 00F4 5664          bra       DecodeBranchCondition_30
                    5665   DecodeBranchCondition_5:
                    5666   ; else if(Condition == (unsigned short int)(0x0C))
000033CC  0C42 000C 5667          cmp.w     #12,D2
000033D0  660E      5668          bne.s     DecodeBranchCondition_7
                    5669   ; strcatInstruction("GE") ;
000033D2  4879 0000 5670          pea       @m68kde~1_208.L
000033D6  71EA      
000033D8  4E92      5671          jsr       (A2)
000033DA  584F      5672          addq.w    #4,A7
000033DC  6000 00E0 5673          bra       DecodeBranchCondition_30
                    5674   DecodeBranchCondition_7:
                    5675   ; else if(Condition == (unsigned short int)(0x0E))
000033E0  0C42 000E 5676          cmp.w     #14,D2
000033E4  660E      5677          bne.s     DecodeBranchCondition_9
                    5678   ; strcatInstruction("GT") ;
000033E6  4879 0000 5679          pea       @m68kde~1_209.L
000033EA  71EE      
000033EC  4E92      5680          jsr       (A2)
000033EE  584F      5681          addq.w    #4,A7
000033F0  6000 00CC 5682          bra       DecodeBranchCondition_30
                    5683   DecodeBranchCondition_9:
                    5684   ; else if(Condition == (unsigned short int)(0x02))
000033F4  0C42 0002 5685          cmp.w     #2,D2
000033F8  660E      5686          bne.s     DecodeBranchCondition_11
                    5687   ; strcatInstruction("HI") ;
000033FA  4879 0000 5688          pea       @m68kde~1_210.L
000033FE  71F2      
00003400  4E92      5689          jsr       (A2)
00003402  584F      5690          addq.w    #4,A7
00003404  6000 00B8 5691          bra       DecodeBranchCondition_30
                    5692   DecodeBranchCondition_11:
                    5693   ; else if(Condition == (unsigned short int)(0x0F))
00003408  0C42 000F 5694          cmp.w     #15,D2
0000340C  660E      5695          bne.s     DecodeBranchCondition_13
                    5696   ; strcatInstruction("LE") ;
0000340E  4879 0000 5697          pea       @m68kde~1_211.L
00003412  71F6      
00003414  4E92      5698          jsr       (A2)
00003416  584F      5699          addq.w    #4,A7
00003418  6000 00A4 5700          bra       DecodeBranchCondition_30
                    5701   DecodeBranchCondition_13:
                    5702   ; else if(Condition == (unsigned short int)(0x03))
0000341C  0C42 0003 5703          cmp.w     #3,D2
00003420  660E      5704          bne.s     DecodeBranchCondition_15
                    5705   ; strcatInstruction("LS") ;
00003422  4879 0000 5706          pea       @m68kde~1_212.L
00003426  71FA      
00003428  4E92      5707          jsr       (A2)
0000342A  584F      5708          addq.w    #4,A7
0000342C  6000 0090 5709          bra       DecodeBranchCondition_30
                    5710   DecodeBranchCondition_15:
                    5711   ; else if(Condition == (unsigned short int)(0x0D))
00003430  0C42 000D 5712          cmp.w     #13,D2
00003434  660E      5713          bne.s     DecodeBranchCondition_17
                    5714   ; strcatInstruction("LT") ;
00003436  4879 0000 5715          pea       @m68kde~1_213.L
0000343A  71FE      
0000343C  4E92      5716          jsr       (A2)
0000343E  584F      5717          addq.w    #4,A7
00003440  6000 007C 5718          bra       DecodeBranchCondition_30
                    5719   DecodeBranchCondition_17:
                    5720   ; else if(Condition == (unsigned short int)(0x0B))
00003444  0C42 000B 5721          cmp.w     #11,D2
00003448  660E      5722          bne.s     DecodeBranchCondition_19
                    5723   ; strcatInstruction("MI") ;
0000344A  4879 0000 5724          pea       @m68kde~1_214.L
0000344E  7202      
00003450  4E92      5725          jsr       (A2)
00003452  584F      5726          addq.w    #4,A7
00003454  6000 0068 5727          bra       DecodeBranchCondition_30
                    5728   DecodeBranchCondition_19:
                    5729   ; else if(Condition == (unsigned short int)(0x06))
00003458  0C42 0006 5730          cmp.w     #6,D2
0000345C  660E      5731          bne.s     DecodeBranchCondition_21
                    5732   ; strcatInstruction("NE") ;
0000345E  4879 0000 5733          pea       @m68kde~1_215.L
00003462  7206      
00003464  4E92      5734          jsr       (A2)
00003466  584F      5735          addq.w    #4,A7
00003468  6000 0054 5736          bra       DecodeBranchCondition_30
                    5737   DecodeBranchCondition_21:
                    5738   ; else if(Condition == (unsigned short int)(0x0A))
0000346C  0C42 000A 5739          cmp.w     #10,D2
00003470  660E      5740          bne.s     DecodeBranchCondition_23
                    5741   ; strcatInstruction("PL") ;
00003472  4879 0000 5742          pea       @m68kde~1_216.L
00003476  720A      
00003478  4E92      5743          jsr       (A2)
0000347A  584F      5744          addq.w    #4,A7
0000347C  6000 0040 5745          bra       DecodeBranchCondition_30
                    5746   DecodeBranchCondition_23:
                    5747   ; else if(Condition == (unsigned short int)(0x09))
00003480  0C42 0009 5748          cmp.w     #9,D2
00003484  660C      5749          bne.s     DecodeBranchCondition_25
                    5750   ; strcatInstruction("VS") ;
00003486  4879 0000 5751          pea       @m68kde~1_217.L
0000348A  720E      
0000348C  4E92      5752          jsr       (A2)
0000348E  584F      5753          addq.w    #4,A7
00003490  602C      5754          bra.s     DecodeBranchCondition_30
                    5755   DecodeBranchCondition_25:
                    5756   ; else if(Condition == (unsigned short int)(0x08))
00003492  0C42 0008 5757          cmp.w     #8,D2
00003496  660C      5758          bne.s     DecodeBranchCondition_27
                    5759   ; strcatInstruction("VC") ;
00003498  4879 0000 5760          pea       @m68kde~1_218.L
0000349C  7212      
0000349E  4E92      5761          jsr       (A2)
000034A0  584F      5762          addq.w    #4,A7
000034A2  601A      5763          bra.s     DecodeBranchCondition_30
                    5764   DecodeBranchCondition_27:
                    5765   ; else if(Condition == (unsigned short int)(0))
000034A4  4A42      5766          tst.w     D2
000034A6  660C      5767          bne.s     DecodeBranchCondition_29
                    5768   ; strcatInstruction("RA") ;
000034A8  4879 0000 5769          pea       @m68kde~1_219.L
000034AC  7216      
000034AE  4E92      5770          jsr       (A2)
000034B0  584F      5771          addq.w    #4,A7
000034B2  600A      5772          bra.s     DecodeBranchCondition_30
                    5773   DecodeBranchCondition_29:
                    5774   ; else
                    5775   ; strcatInstruction("SR");
000034B4  4879 0000 5776          pea       @m68kde~1_220.L
000034B8  721A      
000034BA  4E92      5777          jsr       (A2)
000034BC  584F      5778          addq.w    #4,A7
                    5779   DecodeBranchCondition_30:
                    5780   ; strcatInstruction(" ") ;
000034BE  4879 0000 5781          pea       @m68kde~1_221.L
000034C2  721E      
000034C4  4E92      5782          jsr       (A2)
000034C6  584F      5783          addq.w    #4,A7
000034C8  4CDF 0404 5784          movem.l   (A7)+,D2/A2
000034CC  4E5E      5785          unlk      A6
000034CE  4E75      5786          rts
                    5787   ; }
                    5788   ; void DisassembleInstruction( short int *OpCode)         // pointer to Opcode
                    5789   ; {
                    5790   _DisassembleInstruction:
000034D0  4E56 FFD8 5791          link      A6,#-40
000034D4  48E7 3F3C 5792          movem.l   D2/D3/D4/D5/D6/D7/A2/A3/A4/A5,-(A7)
000034D8  242E 0008 5793          move.l    8(A6),D2
000034DC  45F9 0803 5794          lea       _InstructionSize.L,A2
000034E0  017E      
000034E2  47F8 0CE6 5795          lea       _strcpyInstruction.L,A3
000034E6  49F9 0803 5796          lea       _TempString.L,A4
000034EA  0546      
000034EC  4BF9 0000 5797          lea       _sprintf.L,A5
000034F0  54F8      
                    5798   ; unsigned short int MSBits = (*OpCode >> 12);    //mask off the lower 12 bits leaving top 4 bit to analyse
000034F2  2042      5799          move.l    D2,A0
000034F4  3010      5800          move.w    (A0),D0
000034F6  E040      5801          asr.w     #8,D0
000034F8  E840      5802          asr.w     #4,D0
000034FA  3D40 FFDA 5803          move.w    D0,-38(A6)
                    5804   ; unsigned short int LS12Bits = (*OpCode & (unsigned short int)(0x0FFF));
000034FE  2042      5805          move.l    D2,A0
00003500  3010      5806          move.w    (A0),D0
00003502  C07C 0FFF 5807          and.w     #4095,D0
00003506  3D40 FFDC 5808          move.w    D0,-36(A6)
                    5809   ; unsigned short int SourceBits, DestBits, Size ;
                    5810   ; unsigned char *Mode, Condition;
                    5811   ; unsigned short int Register, OpMode, EAMode, EARegister, Rx, Ry, EXGOpMode, DataSize, SourceReg;
                    5812   ; unsigned short int DataRegister, AddressRegister;
                    5813   ; signed char Displacement8Bit ;  // used for Bcc type instruction signed 8 bit displacement
                    5814   ; signed short int Displacement16Bit;
                    5815   ; short int Mask, DoneSlash;
                    5816   ; int i;
                    5817   ; strcpyInstruction("Unknown") ;
0000350A  4879 0000 5818          pea       @m68kde~1_222.L
0000350E  7220      
00003510  4E93      5819          jsr       (A3)
00003512  584F      5820          addq.w    #4,A7
                    5821   ; /////////////////////////////////////////////////////////////////////////////////
                    5822   ; // if instruction is ABCD
                    5823   ; /////////////////////////////////////////////////////////////////////////////////
                    5824   ; if((*OpCode & (unsigned short int)(0xF1F0 )) == (unsigned short int)(0xC100))   {
00003514  2042      5825          move.l    D2,A0
00003516  3010      5826          move.w    (A0),D0
00003518  C07C F1F0 5827          and.w     #61936,D0
0000351C  0C40 C100 5828          cmp.w     #49408,D0
00003520  6600 008C 5829          bne       DisassembleInstruction_4
                    5830   ; DestBits = (*OpCode >> 9) & (unsigned short int )(0x0007) ;
00003524  2042      5831          move.l    D2,A0
00003526  3010      5832          move.w    (A0),D0
00003528  E040      5833          asr.w     #8,D0
0000352A  E240      5834          asr.w     #1,D0
0000352C  C07C 0007 5835          and.w     #7,D0
00003530  3D40 FFE0 5836          move.w    D0,-32(A6)
                    5837   ; SourceBits = (*OpCode & (unsigned short int )(0x0007));
00003534  2042      5838          move.l    D2,A0
00003536  3010      5839          move.w    (A0),D0
00003538  C07C 0007 5840          and.w     #7,D0
0000353C  3D40 FFDE 5841          move.w    D0,-34(A6)
                    5842   ; Mode = (*OpCode >> 3) & (unsigned short int )(0x0001) ;
00003540  2042      5843          move.l    D2,A0
00003542  3010      5844          move.w    (A0),D0
00003544  E640      5845          asr.w     #3,D0
00003546  48C0      5846          ext.l     D0
00003548  C0BC 0000 5847          and.l     #1,D0
0000354C  0001      
0000354E  2D40 FFE4 5848          move.l    D0,-28(A6)
                    5849   ; if(Mode == 0)
00003552  202E FFE4 5850          move.l    -28(A6),D0
00003556  662C      5851          bne.s     DisassembleInstruction_3
                    5852   ; sprintf(Instruction, "ABCD D%d,D%d", SourceBits, DestBits) ;
00003558  322E FFE0 5853          move.w    -32(A6),D1
0000355C  C2BC 0000 5854          and.l     #65535,D1
00003560  FFFF      
00003562  2F01      5855          move.l    D1,-(A7)
00003564  322E FFDE 5856          move.w    -34(A6),D1
00003568  C2BC 0000 5857          and.l     #65535,D1
0000356C  FFFF      
0000356E  2F01      5858          move.l    D1,-(A7)
00003570  4879 0000 5859          pea       @m68kde~1_223.L
00003574  7228      
00003576  4879 0803 5860          pea       _Instruction.L
0000357A  04E2      
0000357C  4E95      5861          jsr       (A5)
0000357E  DEFC 0010 5862          add.w     #16,A7
00003582  602A      5863          bra.s     DisassembleInstruction_4
                    5864   DisassembleInstruction_3:
                    5865   ; else
                    5866   ; sprintf(Instruction, "ABCD -(A%d),-(A%d)", SourceBits, DestBits) ;
00003584  322E FFE0 5867          move.w    -32(A6),D1
00003588  C2BC 0000 5868          and.l     #65535,D1
0000358C  FFFF      
0000358E  2F01      5869          move.l    D1,-(A7)
00003590  322E FFDE 5870          move.w    -34(A6),D1
00003594  C2BC 0000 5871          and.l     #65535,D1
00003598  FFFF      
0000359A  2F01      5872          move.l    D1,-(A7)
0000359C  4879 0000 5873          pea       @m68kde~1_224.L
000035A0  7236      
000035A2  4879 0803 5874          pea       _Instruction.L
000035A6  04E2      
000035A8  4E95      5875          jsr       (A5)
000035AA  DEFC 0010 5876          add.w     #16,A7
                    5877   DisassembleInstruction_4:
                    5878   ; }
                    5879   ; /////////////////////////////////////////////////////////////////////////////////
                    5880   ; // if instruction is ADD or ADDA
                    5881   ; /////////////////////////////////////////////////////////////////////////////////
                    5882   ; if((*OpCode & (unsigned short int)(0xF000 )) == (unsigned short int)(0xD000))   {
000035AE  2042      5883          move.l    D2,A0
000035B0  3010      5884          move.w    (A0),D0
000035B2  C07C F000 5885          and.w     #61440,D0
000035B6  0C40 D000 5886          cmp.w     #53248,D0
000035BA  6600 008C 5887          bne       DisassembleInstruction_8
                    5888   ; InstructionSize = 1;
000035BE  24BC 0000 5889          move.l    #1,(A2)
000035C2  0001      
                    5890   ; OpMode = ((*OpCode >> 6) & (unsigned short int)(0x0007)) ;
000035C4  2042      5891          move.l    D2,A0
000035C6  3010      5892          move.w    (A0),D0
000035C8  EC40      5893          asr.w     #6,D0
000035CA  C07C 0007 5894          and.w     #7,D0
000035CE  3600      5895          move.w    D0,D3
                    5896   ; if( (OpMode == (unsigned short int)(0x0003)) || (OpMode == (unsigned short int)(0x0007)))      // if destination is an address register then use ADDA otherwise use ADD
000035D0  0C43 0003 5897          cmp.w     #3,D3
000035D4  6708      5898          beq.s     DisassembleInstruction_9
000035D6  0C43 0007 5899          cmp.w     #7,D3
000035DA  6600 005A 5900          bne       DisassembleInstruction_7
                    5901   DisassembleInstruction_9:
                    5902   ; {
                    5903   ; if(OpMode == (unsigned short int)(0x0003))
000035DE  0C43 0003 5904          cmp.w     #3,D3
000035E2  660C      5905          bne.s     DisassembleInstruction_10
                    5906   ; strcpyInstruction("ADDA.W ") ;
000035E4  4879 0000 5907          pea       @m68kde~1_225.L
000035E8  724A      
000035EA  4E93      5908          jsr       (A3)
000035EC  584F      5909          addq.w    #4,A7
000035EE  600A      5910          bra.s     DisassembleInstruction_11
                    5911   DisassembleInstruction_10:
                    5912   ; else
                    5913   ; strcpyInstruction("ADDA.L ") ;
000035F0  4879 0000 5914          pea       @m68kde~1_226.L
000035F4  7252      
000035F6  4E93      5915          jsr       (A3)
000035F8  584F      5916          addq.w    #4,A7
                    5917   DisassembleInstruction_11:
                    5918   ; Decode6BitEA(OpCode,0,0,0)  ;
000035FA  42A7      5919          clr.l     -(A7)
000035FC  42A7      5920          clr.l     -(A7)
000035FE  42A7      5921          clr.l     -(A7)
00003600  2F02      5922          move.l    D2,-(A7)
00003602  4EB8 2EBC 5923          jsr       _Decode6BitEA
00003606  DEFC 0010 5924          add.w     #16,A7
                    5925   ; sprintf(TempString, ",A%X", (*OpCode >> 9) & (unsigned short int)(0x0007)) ;
0000360A  2042      5926          move.l    D2,A0
0000360C  3210      5927          move.w    (A0),D1
0000360E  E041      5928          asr.w     #8,D1
00003610  E241      5929          asr.w     #1,D1
00003612  C27C 0007 5930          and.w     #7,D1
00003616  C2BC 0000 5931          and.l     #65535,D1
0000361A  FFFF      
0000361C  2F01      5932          move.l    D1,-(A7)
0000361E  4879 0000 5933          pea       @m68kde~1_227.L
00003622  725A      
00003624  2F0C      5934          move.l    A4,-(A7)
00003626  4E95      5935          jsr       (A5)
00003628  DEFC 000C 5936          add.w     #12,A7
                    5937   ; strcatInstruction(TempString) ;
0000362C  2F0C      5938          move.l    A4,-(A7)
0000362E  4EB8 0CCC 5939          jsr       _strcatInstruction
00003632  584F      5940          addq.w    #4,A7
00003634  6012      5941          bra.s     DisassembleInstruction_8
                    5942   DisassembleInstruction_7:
                    5943   ; }
                    5944   ; else {
                    5945   ; strcpyInstruction("ADD") ;
00003636  4879 0000 5946          pea       @m68kde~1_228.L
0000363A  7260      
0000363C  4E93      5947          jsr       (A3)
0000363E  584F      5948          addq.w    #4,A7
                    5949   ; Decode3BitOperandMode(OpCode) ;
00003640  2F02      5950          move.l    D2,-(A7)
00003642  4EB8 32E4 5951          jsr       _Decode3BitOperandMode
00003646  584F      5952          addq.w    #4,A7
                    5953   DisassembleInstruction_8:
                    5954   ; }
                    5955   ; }
                    5956   ; /////////////////////////////////////////////////////////////////////////////////
                    5957   ; // if instruction is ADDI or ANDI or CMPI or EORI or ORI or SUBI
                    5958   ; /////////////////////////////////////////////////////////////////////////////////
                    5959   ; if( (*OpCode & (unsigned short int)(0xFF00 )) == (unsigned short int)(0x0600) |
00003648  2042      5960          move.l    D2,A0
0000364A  3010      5961          move.w    (A0),D0
0000364C  C07C FF00 5962          and.w     #65280,D0
00003650  0C40 0600 5963          cmp.w     #1536,D0
00003654  6604      5964          bne.s     DisassembleInstruction_14
00003656  7001      5965          moveq     #1,D0
00003658  6002      5966          bra.s     DisassembleInstruction_15
                    5967   DisassembleInstruction_14:
0000365A  4280      5968          clr.l     D0
                    5969   DisassembleInstruction_15:
0000365C  2042      5970          move.l    D2,A0
0000365E  3210      5971          move.w    (A0),D1
00003660  C27C FF00 5972          and.w     #65280,D1
00003664  0C41 0200 5973          cmp.w     #512,D1
00003668  6604      5974          bne.s     DisassembleInstruction_16
0000366A  7201      5975          moveq     #1,D1
0000366C  6002      5976          bra.s     DisassembleInstruction_17
                    5977   DisassembleInstruction_16:
0000366E  4281      5978          clr.l     D1
                    5979   DisassembleInstruction_17:
00003670  8041      5980          or.w      D1,D0
00003672  2042      5981          move.l    D2,A0
00003674  3210      5982          move.w    (A0),D1
00003676  C27C FF00 5983          and.w     #65280,D1
0000367A  0C41 0C00 5984          cmp.w     #3072,D1
0000367E  6604      5985          bne.s     DisassembleInstruction_18
00003680  7201      5986          moveq     #1,D1
00003682  6002      5987          bra.s     DisassembleInstruction_19
                    5988   DisassembleInstruction_18:
00003684  4281      5989          clr.l     D1
                    5990   DisassembleInstruction_19:
00003686  8041      5991          or.w      D1,D0
00003688  2042      5992          move.l    D2,A0
0000368A  3210      5993          move.w    (A0),D1
0000368C  C27C FF00 5994          and.w     #65280,D1
00003690  0C41 0A00 5995          cmp.w     #2560,D1
00003694  6604      5996          bne.s     DisassembleInstruction_20
00003696  7201      5997          moveq     #1,D1
00003698  6002      5998          bra.s     DisassembleInstruction_21
                    5999   DisassembleInstruction_20:
0000369A  4281      6000          clr.l     D1
                    6001   DisassembleInstruction_21:
0000369C  8041      6002          or.w      D1,D0
0000369E  2042      6003          move.l    D2,A0
000036A0  3210      6004          move.w    (A0),D1
000036A2  C27C FF00 6005          and.w     #65280,D1
000036A6  6604      6006          bne.s     DisassembleInstruction_22
000036A8  7201      6007          moveq     #1,D1
000036AA  6002      6008          bra.s     DisassembleInstruction_23
                    6009   DisassembleInstruction_22:
000036AC  4281      6010          clr.l     D1
                    6011   DisassembleInstruction_23:
000036AE  8041      6012          or.w      D1,D0
000036B0  2042      6013          move.l    D2,A0
000036B2  3210      6014          move.w    (A0),D1
000036B4  C27C FF00 6015          and.w     #65280,D1
000036B8  0C41 0400 6016          cmp.w     #1024,D1
000036BC  6604      6017          bne.s     DisassembleInstruction_24
000036BE  7201      6018          moveq     #1,D1
000036C0  6002      6019          bra.s     DisassembleInstruction_25
                    6020   DisassembleInstruction_24:
000036C2  4281      6021          clr.l     D1
                    6022   DisassembleInstruction_25:
000036C4  8041      6023          or.w      D1,D0
000036C6  6700 00E4 6024          beq       DisassembleInstruction_12
                    6025   ; (*OpCode & (unsigned short int)(0xFF00 )) == (unsigned short int)(0x0200) |
                    6026   ; (*OpCode & (unsigned short int)(0xFF00 )) == (unsigned short int)(0x0C00) |
                    6027   ; (*OpCode & (unsigned short int)(0xFF00 )) == (unsigned short int)(0x0A00) |
                    6028   ; (*OpCode & (unsigned short int)(0xFF00 )) == (unsigned short int)(0x0000) |
                    6029   ; (*OpCode & (unsigned short int)(0xFF00 )) == (unsigned short int)(0x0400))
                    6030   ; {
                    6031   ; InstructionSize = 1;
000036CA  24BC 0000 6032          move.l    #1,(A2)
000036CE  0001      
                    6033   ; if((*OpCode & (unsigned short int)(0xFF00 )) == (unsigned short int)(0x0600))
000036D0  2042      6034          move.l    D2,A0
000036D2  3010      6035          move.w    (A0),D0
000036D4  C07C FF00 6036          and.w     #65280,D0
000036D8  0C40 0600 6037          cmp.w     #1536,D0
000036DC  660E      6038          bne.s     DisassembleInstruction_26
                    6039   ; strcpyInstruction("ADDI") ;
000036DE  4879 0000 6040          pea       @m68kde~1_229.L
000036E2  7264      
000036E4  4E93      6041          jsr       (A3)
000036E6  584F      6042          addq.w    #4,A7
000036E8  6000 0084 6043          bra       DisassembleInstruction_36
                    6044   DisassembleInstruction_26:
                    6045   ; else if((*OpCode & (unsigned short int)(0xFF00 )) == (unsigned short int)(0x0200))
000036EC  2042      6046          move.l    D2,A0
000036EE  3010      6047          move.w    (A0),D0
000036F0  C07C FF00 6048          and.w     #65280,D0
000036F4  0C40 0200 6049          cmp.w     #512,D0
000036F8  660E      6050          bne.s     DisassembleInstruction_28
                    6051   ; strcpyInstruction("ANDI") ;
000036FA  4879 0000 6052          pea       @m68kde~1_230.L
000036FE  726A      
00003700  4E93      6053          jsr       (A3)
00003702  584F      6054          addq.w    #4,A7
00003704  6000 0068 6055          bra       DisassembleInstruction_36
                    6056   DisassembleInstruction_28:
                    6057   ; else if((*OpCode & (unsigned short int)(0xFF00 )) == (unsigned short int)(0x0C00))
00003708  2042      6058          move.l    D2,A0
0000370A  3010      6059          move.w    (A0),D0
0000370C  C07C FF00 6060          and.w     #65280,D0
00003710  0C40 0C00 6061          cmp.w     #3072,D0
00003714  660E      6062          bne.s     DisassembleInstruction_30
                    6063   ; strcpyInstruction("CMPI") ;
00003716  4879 0000 6064          pea       @m68kde~1_231.L
0000371A  7270      
0000371C  4E93      6065          jsr       (A3)
0000371E  584F      6066          addq.w    #4,A7
00003720  6000 004C 6067          bra       DisassembleInstruction_36
                    6068   DisassembleInstruction_30:
                    6069   ; else if((*OpCode & (unsigned short int)(0xFF00 )) == (unsigned short int)(0x0A00))
00003724  2042      6070          move.l    D2,A0
00003726  3010      6071          move.w    (A0),D0
00003728  C07C FF00 6072          and.w     #65280,D0
0000372C  0C40 0A00 6073          cmp.w     #2560,D0
00003730  660E      6074          bne.s     DisassembleInstruction_32
                    6075   ; strcpyInstruction("EORI") ;
00003732  4879 0000 6076          pea       @m68kde~1_232.L
00003736  7276      
00003738  4E93      6077          jsr       (A3)
0000373A  584F      6078          addq.w    #4,A7
0000373C  6000 0030 6079          bra       DisassembleInstruction_36
                    6080   DisassembleInstruction_32:
                    6081   ; else if((*OpCode & (unsigned short int)(0xFF00 )) == (unsigned short int)(0x0000))
00003740  2042      6082          move.l    D2,A0
00003742  3010      6083          move.w    (A0),D0
00003744  C07C FF00 6084          and.w     #65280,D0
00003748  660C      6085          bne.s     DisassembleInstruction_34
                    6086   ; strcpyInstruction("ORI") ;
0000374A  4879 0000 6087          pea       @m68kde~1_233.L
0000374E  727C      
00003750  4E93      6088          jsr       (A3)
00003752  584F      6089          addq.w    #4,A7
00003754  6018      6090          bra.s     DisassembleInstruction_36
                    6091   DisassembleInstruction_34:
                    6092   ; else if((*OpCode & (unsigned short int)(0xFF00 )) == (unsigned short int)(0x0400))
00003756  2042      6093          move.l    D2,A0
00003758  3010      6094          move.w    (A0),D0
0000375A  C07C FF00 6095          and.w     #65280,D0
0000375E  0C40 0400 6096          cmp.w     #1024,D0
00003762  660A      6097          bne.s     DisassembleInstruction_36
                    6098   ; strcpyInstruction("SUBI") ;
00003764  4879 0000 6099          pea       @m68kde~1_234.L
00003768  7280      
0000376A  4E93      6100          jsr       (A3)
0000376C  584F      6101          addq.w    #4,A7
                    6102   DisassembleInstruction_36:
                    6103   ; DataSize = Decode2BitOperandSize(*OpCode);                                  // add .b, .w, .l size indicator to instruction string
0000376E  2042      6104          move.l    D2,A0
00003770  3210      6105          move.w    (A0),D1
00003772  C2BC 0000 6106          and.l     #65535,D1
00003776  FFFF      
00003778  2F01      6107          move.l    D1,-(A7)
0000377A  4EB8 2C28 6108          jsr       _Decode2BitOperandSize
0000377E  584F      6109          addq.w    #4,A7
00003780  3E00      6110          move.w    D0,D7
                    6111   ; DecodeBWLDataAfterOpCode(OpCode);                                // go add the 8,16,32 bit data to instruction string
00003782  2F02      6112          move.l    D2,-(A7)
00003784  4EB8 2DAC 6113          jsr       _DecodeBWLDataAfterOpCode
00003788  584F      6114          addq.w    #4,A7
                    6115   ; strcatInstruction(",") ;
0000378A  4879 0000 6116          pea       @m68kde~1_235.L
0000378E  7286      
00003790  4EB8 0CCC 6117          jsr       _strcatInstruction
00003794  584F      6118          addq.w    #4,A7
                    6119   ; Decode6BitEA(OpCode,0,DataSize,0) ;                                         // decode EA
00003796  42A7      6120          clr.l     -(A7)
00003798  CEBC 0000 6121          and.l     #65535,D7
0000379C  FFFF      
0000379E  2F07      6122          move.l    D7,-(A7)
000037A0  42A7      6123          clr.l     -(A7)
000037A2  2F02      6124          move.l    D2,-(A7)
000037A4  4EB8 2EBC 6125          jsr       _Decode6BitEA
000037A8  DEFC 0010 6126          add.w     #16,A7
                    6127   DisassembleInstruction_12:
                    6128   ; }
                    6129   ; /////////////////////////////////////////////////////////////////////////////////
                    6130   ; // if instruction is ADDI #data,SR
                    6131   ; /////////////////////////////////////////////////////////////////////////////////
                    6132   ; if(*OpCode  == (unsigned short int)(0x027c))   {
000037AC  2042      6133          move.l    D2,A0
000037AE  3010      6134          move.w    (A0),D0
000037B0  0C40 027C 6135          cmp.w     #636,D0
000037B4  6622      6136          bne.s     DisassembleInstruction_38
                    6137   ; InstructionSize = 2;
000037B6  24BC 0000 6138          move.l    #2,(A2)
000037BA  0002      
                    6139   ; sprintf(Instruction, "ANDI #$%X,SR", OpCode[1]);
000037BC  2042      6140          move.l    D2,A0
000037BE  3228 0002 6141          move.w    2(A0),D1
000037C2  48C1      6142          ext.l     D1
000037C4  2F01      6143          move.l    D1,-(A7)
000037C6  4879 0000 6144          pea       @m68kde~1_236.L
000037CA  7288      
000037CC  4879 0803 6145          pea       _Instruction.L
000037D0  04E2      
000037D2  4E95      6146          jsr       (A5)
000037D4  DEFC 000C 6147          add.w     #12,A7
                    6148   DisassembleInstruction_38:
                    6149   ; }
                    6150   ; /////////////////////////////////////////////////////////////////////////////////
                    6151   ; // if instruction is ADDQ
                    6152   ; /////////////////////////////////////////////////////////////////////////////////
                    6153   ; if((*OpCode & (unsigned short int)(0xF100 )) == (unsigned short int)(0x5000))   {
000037D8  2042      6154          move.l    D2,A0
000037DA  3010      6155          move.w    (A0),D0
000037DC  C07C F100 6156          and.w     #61696,D0
000037E0  0C40 5000 6157          cmp.w     #20480,D0
000037E4  6600 005E 6158          bne       DisassembleInstruction_40
                    6159   ; InstructionSize = 1;
000037E8  24BC 0000 6160          move.l    #1,(A2)
000037EC  0001      
                    6161   ; strcpyInstruction("ADDQ") ;
000037EE  4879 0000 6162          pea       @m68kde~1_237.L
000037F2  7296      
000037F4  4E93      6163          jsr       (A3)
000037F6  584F      6164          addq.w    #4,A7
                    6165   ; Decode2BitOperandSize(*OpCode);                                  // add .b, .w, .l size indicator to instruction string
000037F8  2042      6166          move.l    D2,A0
000037FA  3210      6167          move.w    (A0),D1
000037FC  C2BC 0000 6168          and.l     #65535,D1
00003800  FFFF      
00003802  2F01      6169          move.l    D1,-(A7)
00003804  4EB8 2C28 6170          jsr       _Decode2BitOperandSize
00003808  584F      6171          addq.w    #4,A7
                    6172   ; sprintf(TempString, "#%1X,", ((*OpCode >> 9) & (unsigned short int)(0x0007)));    // print 3 bit #data in positions 11,10,9 in opcode
0000380A  2042      6173          move.l    D2,A0
0000380C  3210      6174          move.w    (A0),D1
0000380E  E041      6175          asr.w     #8,D1
00003810  E241      6176          asr.w     #1,D1
00003812  C27C 0007 6177          and.w     #7,D1
00003816  C2BC 0000 6178          and.l     #65535,D1
0000381A  FFFF      
0000381C  2F01      6179          move.l    D1,-(A7)
0000381E  4879 0000 6180          pea       @m68kde~1_238.L
00003822  729C      
00003824  2F0C      6181          move.l    A4,-(A7)
00003826  4E95      6182          jsr       (A5)
00003828  DEFC 000C 6183          add.w     #12,A7
                    6184   ; strcatInstruction(TempString) ;
0000382C  2F0C      6185          move.l    A4,-(A7)
0000382E  4EB8 0CCC 6186          jsr       _strcatInstruction
00003832  584F      6187          addq.w    #4,A7
                    6188   ; Decode6BitEA(OpCode,0,0,0) ;                                           // decode EA
00003834  42A7      6189          clr.l     -(A7)
00003836  42A7      6190          clr.l     -(A7)
00003838  42A7      6191          clr.l     -(A7)
0000383A  2F02      6192          move.l    D2,-(A7)
0000383C  4EB8 2EBC 6193          jsr       _Decode6BitEA
00003840  DEFC 0010 6194          add.w     #16,A7
                    6195   DisassembleInstruction_40:
                    6196   ; }
                    6197   ; /////////////////////////////////////////////////////////////////////////////////
                    6198   ; // if instruction is ADDX
                    6199   ; /////////////////////////////////////////////////////////////////////////////////
                    6200   ; if((*OpCode & (unsigned short int)(0xF130 )) == (unsigned short int)(0xD100))   {
00003844  2042      6201          move.l    D2,A0
00003846  3010      6202          move.w    (A0),D0
00003848  C07C F130 6203          and.w     #61744,D0
0000384C  0C40 D100 6204          cmp.w     #53504,D0
00003850  6600 00A4 6205          bne       DisassembleInstruction_44
                    6206   ; InstructionSize = 1;
00003854  24BC 0000 6207          move.l    #1,(A2)
00003858  0001      
                    6208   ; OpMode = ((*OpCode >> 6) & (unsigned short int)(0x0003)) ;
0000385A  2042      6209          move.l    D2,A0
0000385C  3010      6210          move.w    (A0),D0
0000385E  EC40      6211          asr.w     #6,D0
00003860  C07C 0003 6212          and.w     #3,D0
00003864  3600      6213          move.w    D0,D3
                    6214   ; if(OpMode != (unsigned short int)(0x0003)) // if size = 11 then it's ADDA not ADDX
00003866  0C43 0003 6215          cmp.w     #3,D3
0000386A  6700 008A 6216          beq       DisassembleInstruction_44
                    6217   ; {
                    6218   ; strcpyInstruction("ADDX") ;
0000386E  4879 0000 6219          pea       @m68kde~1_239.L
00003872  72A2      
00003874  4E93      6220          jsr       (A3)
00003876  584F      6221          addq.w    #4,A7
                    6222   ; Decode2BitOperandSize(*OpCode);                                  // add .b, .w, .l size indicator to instruction string
00003878  2042      6223          move.l    D2,A0
0000387A  3210      6224          move.w    (A0),D1
0000387C  C2BC 0000 6225          and.l     #65535,D1
00003880  FFFF      
00003882  2F01      6226          move.l    D1,-(A7)
00003884  4EB8 2C28 6227          jsr       _Decode2BitOperandSize
00003888  584F      6228          addq.w    #4,A7
                    6229   ; if((*OpCode & (unsigned short int)(0x0008)) == (unsigned short int)(0))    // if bit 3 of opcode is 0 indicates data registers are used as source and destination
0000388A  2042      6230          move.l    D2,A0
0000388C  3010      6231          move.w    (A0),D0
0000388E  C07C 0008 6232          and.w     #8,D0
00003892  6600 0030 6233          bne       DisassembleInstruction_46
                    6234   ; sprintf(TempString, "D%X,D%X", (*OpCode & 0x0007), ((*OpCode >> 9) & 0x0007)) ;
00003896  2042      6235          move.l    D2,A0
00003898  3210      6236          move.w    (A0),D1
0000389A  E041      6237          asr.w     #8,D1
0000389C  E241      6238          asr.w     #1,D1
0000389E  C27C 0007 6239          and.w     #7,D1
000038A2  48C1      6240          ext.l     D1
000038A4  2F01      6241          move.l    D1,-(A7)
000038A6  2042      6242          move.l    D2,A0
000038A8  3210      6243          move.w    (A0),D1
000038AA  C27C 0007 6244          and.w     #7,D1
000038AE  48C1      6245          ext.l     D1
000038B0  2F01      6246          move.l    D1,-(A7)
000038B2  4879 0000 6247          pea       @m68kde~1_240.L
000038B6  72A8      
000038B8  2F0C      6248          move.l    A4,-(A7)
000038BA  4E95      6249          jsr       (A5)
000038BC  DEFC 0010 6250          add.w     #16,A7
000038C0  6000 002C 6251          bra       DisassembleInstruction_47
                    6252   DisassembleInstruction_46:
                    6253   ; else        // -(ax),-(ay) mode used
                    6254   ; sprintf(TempString, "-(A%X),-(A%X)", (*OpCode & 0x0007), ((*OpCode >> 9) & 0x0007)) ;
000038C4  2042      6255          move.l    D2,A0
000038C6  3210      6256          move.w    (A0),D1
000038C8  E041      6257          asr.w     #8,D1
000038CA  E241      6258          asr.w     #1,D1
000038CC  C27C 0007 6259          and.w     #7,D1
000038D0  48C1      6260          ext.l     D1
000038D2  2F01      6261          move.l    D1,-(A7)
000038D4  2042      6262          move.l    D2,A0
000038D6  3210      6263          move.w    (A0),D1
000038D8  C27C 0007 6264          and.w     #7,D1
000038DC  48C1      6265          ext.l     D1
000038DE  2F01      6266          move.l    D1,-(A7)
000038E0  4879 0000 6267          pea       @m68kde~1_241.L
000038E4  72B0      
000038E6  2F0C      6268          move.l    A4,-(A7)
000038E8  4E95      6269          jsr       (A5)
000038EA  DEFC 0010 6270          add.w     #16,A7
                    6271   DisassembleInstruction_47:
                    6272   ; strcatInstruction(TempString) ;
000038EE  2F0C      6273          move.l    A4,-(A7)
000038F0  4EB8 0CCC 6274          jsr       _strcatInstruction
000038F4  584F      6275          addq.w    #4,A7
                    6276   DisassembleInstruction_44:
                    6277   ; }
                    6278   ; }
                    6279   ; /////////////////////////////////////////////////////////////////////////////////
                    6280   ; // if instruction is AND
                    6281   ; /////////////////////////////////////////////////////////////////////////////////
                    6282   ; if((*OpCode & (unsigned short int)(0xF000 )) == (unsigned short int)(0xC000))   {
000038F6  2042      6283          move.l    D2,A0
000038F8  3010      6284          move.w    (A0),D0
000038FA  C07C F000 6285          and.w     #61440,D0
000038FE  0C40 C000 6286          cmp.w     #49152,D0
00003902  662A      6287          bne.s     DisassembleInstruction_50
                    6288   ; InstructionSize = 1;
00003904  24BC 0000 6289          move.l    #1,(A2)
00003908  0001      
                    6290   ; // need to differentiate between AND and ABCD using Mode bits in 5,4,3
                    6291   ; OpMode = (*OpCode >> 4) & (unsigned short int)(0x001F);
0000390A  2042      6292          move.l    D2,A0
0000390C  3010      6293          move.w    (A0),D0
0000390E  E840      6294          asr.w     #4,D0
00003910  C07C 001F 6295          and.w     #31,D0
00003914  3600      6296          move.w    D0,D3
                    6297   ; if(OpMode != (unsigned short int)(0x0010))   {
00003916  0C43 0010 6298          cmp.w     #16,D3
0000391A  6712      6299          beq.s     DisassembleInstruction_50
                    6300   ; strcpyInstruction("AND") ;
0000391C  4879 0000 6301          pea       @m68kde~1_242.L
00003920  72BE      
00003922  4E93      6302          jsr       (A3)
00003924  584F      6303          addq.w    #4,A7
                    6304   ; Decode3BitOperandMode(OpCode) ;
00003926  2F02      6305          move.l    D2,-(A7)
00003928  4EB8 32E4 6306          jsr       _Decode3BitOperandMode
0000392C  584F      6307          addq.w    #4,A7
                    6308   DisassembleInstruction_50:
                    6309   ; }
                    6310   ; }
                    6311   ; /////////////////////////////////////////////////////////////////////////////////
                    6312   ; // if instruction is ANDI to CCR
                    6313   ; /////////////////////////////////////////////////////////////////////////////////
                    6314   ; if(*OpCode == (unsigned short int)(0x023C))   {
0000392E  2042      6315          move.l    D2,A0
00003930  3010      6316          move.w    (A0),D0
00003932  0C40 023C 6317          cmp.w     #572,D0
00003936  662A      6318          bne.s     DisassembleInstruction_52
                    6319   ; sprintf(Instruction, "ANDI #$%2X,CCR", OpCode[1] & (unsigned short int)(0x00FF)) ;
00003938  2042      6320          move.l    D2,A0
0000393A  3228 0002 6321          move.w    2(A0),D1
0000393E  C27C 00FF 6322          and.w     #255,D1
00003942  C2BC 0000 6323          and.l     #65535,D1
00003946  FFFF      
00003948  2F01      6324          move.l    D1,-(A7)
0000394A  4879 0000 6325          pea       @m68kde~1_243.L
0000394E  72C2      
00003950  4879 0803 6326          pea       _Instruction.L
00003954  04E2      
00003956  4E95      6327          jsr       (A5)
00003958  DEFC 000C 6328          add.w     #12,A7
                    6329   ; InstructionSize = 2;
0000395C  24BC 0000 6330          move.l    #2,(A2)
00003960  0002      
                    6331   DisassembleInstruction_52:
                    6332   ; }
                    6333   ; /////////////////////////////////////////////////////////////////////////////////
                    6334   ; // if instruction is ASL/ASR/LSL/LSR/ROL/ROR NOTE two versions of this with different OPCodes
                    6335   ; /////////////////////////////////////////////////////////////////////////////////
                    6336   ; if( ((*OpCode & (unsigned short int)(0xF018 )) == (unsigned short int)(0xE000)) |   // ASL/ASR
00003962  2042      6337          move.l    D2,A0
00003964  3010      6338          move.w    (A0),D0
00003966  C07C F018 6339          and.w     #61464,D0
0000396A  0C40 E000 6340          cmp.w     #57344,D0
0000396E  6604      6341          bne.s     DisassembleInstruction_56
00003970  7001      6342          moveq     #1,D0
00003972  6002      6343          bra.s     DisassembleInstruction_57
                    6344   DisassembleInstruction_56:
00003974  4280      6345          clr.l     D0
                    6346   DisassembleInstruction_57:
00003976  2042      6347          move.l    D2,A0
00003978  3210      6348          move.w    (A0),D1
0000397A  C27C FEC0 6349          and.w     #65216,D1
0000397E  0C41 E0C0 6350          cmp.w     #57536,D1
00003982  6604      6351          bne.s     DisassembleInstruction_58
00003984  7201      6352          moveq     #1,D1
00003986  6002      6353          bra.s     DisassembleInstruction_59
                    6354   DisassembleInstruction_58:
00003988  4281      6355          clr.l     D1
                    6356   DisassembleInstruction_59:
0000398A  8041      6357          or.w      D1,D0
0000398C  2042      6358          move.l    D2,A0
0000398E  3210      6359          move.w    (A0),D1
00003990  C27C F018 6360          and.w     #61464,D1
00003994  0C41 E008 6361          cmp.w     #57352,D1
00003998  6604      6362          bne.s     DisassembleInstruction_60
0000399A  7201      6363          moveq     #1,D1
0000399C  6002      6364          bra.s     DisassembleInstruction_61
                    6365   DisassembleInstruction_60:
0000399E  4281      6366          clr.l     D1
                    6367   DisassembleInstruction_61:
000039A0  8041      6368          or.w      D1,D0
000039A2  2042      6369          move.l    D2,A0
000039A4  3210      6370          move.w    (A0),D1
000039A6  C27C FEC0 6371          and.w     #65216,D1
000039AA  0C41 E2C0 6372          cmp.w     #58048,D1
000039AE  6604      6373          bne.s     DisassembleInstruction_62
000039B0  7201      6374          moveq     #1,D1
000039B2  6002      6375          bra.s     DisassembleInstruction_63
                    6376   DisassembleInstruction_62:
000039B4  4281      6377          clr.l     D1
                    6378   DisassembleInstruction_63:
000039B6  8041      6379          or.w      D1,D0
000039B8  2042      6380          move.l    D2,A0
000039BA  3210      6381          move.w    (A0),D1
000039BC  C27C F018 6382          and.w     #61464,D1
000039C0  0C41 E018 6383          cmp.w     #57368,D1
000039C4  6604      6384          bne.s     DisassembleInstruction_64
000039C6  7201      6385          moveq     #1,D1
000039C8  6002      6386          bra.s     DisassembleInstruction_65
                    6387   DisassembleInstruction_64:
000039CA  4281      6388          clr.l     D1
                    6389   DisassembleInstruction_65:
000039CC  8041      6390          or.w      D1,D0
000039CE  2042      6391          move.l    D2,A0
000039D0  3210      6392          move.w    (A0),D1
000039D2  C27C FEC0 6393          and.w     #65216,D1
000039D6  0C41 E6C0 6394          cmp.w     #59072,D1
000039DA  6604      6395          bne.s     DisassembleInstruction_66
000039DC  7201      6396          moveq     #1,D1
000039DE  6002      6397          bra.s     DisassembleInstruction_67
                    6398   DisassembleInstruction_66:
000039E0  4281      6399          clr.l     D1
                    6400   DisassembleInstruction_67:
000039E2  8041      6401          or.w      D1,D0
000039E4  2042      6402          move.l    D2,A0
000039E6  3210      6403          move.w    (A0),D1
000039E8  C27C F018 6404          and.w     #61464,D1
000039EC  0C41 E010 6405          cmp.w     #57360,D1
000039F0  6604      6406          bne.s     DisassembleInstruction_68
000039F2  7201      6407          moveq     #1,D1
000039F4  6002      6408          bra.s     DisassembleInstruction_69
                    6409   DisassembleInstruction_68:
000039F6  4281      6410          clr.l     D1
                    6411   DisassembleInstruction_69:
000039F8  8041      6412          or.w      D1,D0
000039FA  2042      6413          move.l    D2,A0
000039FC  3210      6414          move.w    (A0),D1
000039FE  C27C FEC0 6415          and.w     #65216,D1
00003A02  0C41 E4C0 6416          cmp.w     #58560,D1
00003A06  6604      6417          bne.s     DisassembleInstruction_70
00003A08  7201      6418          moveq     #1,D1
00003A0A  6002      6419          bra.s     DisassembleInstruction_71
                    6420   DisassembleInstruction_70:
00003A0C  4281      6421          clr.l     D1
                    6422   DisassembleInstruction_71:
00003A0E  8041      6423          or.w      D1,D0
00003A10  6700 0252 6424          beq       DisassembleInstruction_73
                    6425   ; ((*OpCode & (unsigned short int)(0xFEC0 )) == (unsigned short int)(0xE0C0)) |
                    6426   ; ((*OpCode & (unsigned short int)(0xF018 )) == (unsigned short int)(0xE008)) |   // LSL/LSR
                    6427   ; ((*OpCode & (unsigned short int)(0xFEC0 )) == (unsigned short int)(0xE2C0)) |
                    6428   ; ((*OpCode & (unsigned short int)(0xF018 )) == (unsigned short int)(0xE018)) |   // ROR/ROL
                    6429   ; ((*OpCode & (unsigned short int)(0xFEC0 )) == (unsigned short int)(0xE6C0)) |
                    6430   ; ((*OpCode & (unsigned short int)(0xF018 )) == (unsigned short int)(0xE010)) |   // ROXR/ROXL
                    6431   ; ((*OpCode & (unsigned short int)(0xFEC0 )) == (unsigned short int)(0xE4C0)))
                    6432   ; {
                    6433   ; InstructionSize = 1;
00003A14  24BC 0000 6434          move.l    #1,(A2)
00003A18  0001      
                    6435   ; // 2nd version e.g. ASR/ASL/LSR/LSL/ROR/ROL/ROXL/ROXR <EA> shift a word 1 bit
                    6436   ; if((*OpCode & (unsigned short int)(0x00C0)) == (unsigned short int)(0x00C0)) // if bits 7,6 == 1,1
00003A1A  2042      6437          move.l    D2,A0
00003A1C  3010      6438          move.w    (A0),D0
00003A1E  C07C 00C0 6439          and.w     #192,D0
00003A22  0C40 00C0 6440          cmp.w     #192,D0
00003A26  6600 00EA 6441          bne       DisassembleInstruction_72
                    6442   ; {
                    6443   ; // test direction by testing bit 8
                    6444   ; if((*OpCode & (unsigned short int)(0xFEC0)) == (unsigned short int)(0xE0C0))    //asr/asl
00003A2A  2042      6445          move.l    D2,A0
00003A2C  3010      6446          move.w    (A0),D0
00003A2E  C07C FEC0 6447          and.w     #65216,D0
00003A32  0C40 E0C0 6448          cmp.w     #57536,D0
00003A36  6624      6449          bne.s     DisassembleInstruction_77
                    6450   ; if((*OpCode & (unsigned short int)(0x0100)) == (unsigned short int)(0x0100))
00003A38  2042      6451          move.l    D2,A0
00003A3A  3010      6452          move.w    (A0),D0
00003A3C  C07C 0100 6453          and.w     #256,D0
00003A40  0C40 0100 6454          cmp.w     #256,D0
00003A44  660C      6455          bne.s     DisassembleInstruction_76
                    6456   ; strcpyInstruction("ASL") ;
00003A46  4879 0000 6457          pea       @m68kde~1_244.L
00003A4A  72D2      
00003A4C  4E93      6458          jsr       (A3)
00003A4E  584F      6459          addq.w    #4,A7
00003A50  600A      6460          bra.s     DisassembleInstruction_77
                    6461   DisassembleInstruction_76:
                    6462   ; else
                    6463   ; strcpyInstruction("ASR") ;
00003A52  4879 0000 6464          pea       @m68kde~1_245.L
00003A56  72D6      
00003A58  4E93      6465          jsr       (A3)
00003A5A  584F      6466          addq.w    #4,A7
                    6467   DisassembleInstruction_77:
                    6468   ; // test direction by testing bit 8
                    6469   ; if((*OpCode & (unsigned short int)(0xFEC0)) == (unsigned short int)(0xE2C0))    //lsr/lsl
00003A5C  2042      6470          move.l    D2,A0
00003A5E  3010      6471          move.w    (A0),D0
00003A60  C07C FEC0 6472          and.w     #65216,D0
00003A64  0C40 E2C0 6473          cmp.w     #58048,D0
00003A68  6624      6474          bne.s     DisassembleInstruction_81
                    6475   ; if((*OpCode & (unsigned short int)(0x0100)) == (unsigned short int)(0x0100))
00003A6A  2042      6476          move.l    D2,A0
00003A6C  3010      6477          move.w    (A0),D0
00003A6E  C07C 0100 6478          and.w     #256,D0
00003A72  0C40 0100 6479          cmp.w     #256,D0
00003A76  660C      6480          bne.s     DisassembleInstruction_80
                    6481   ; strcpyInstruction("LSL") ;
00003A78  4879 0000 6482          pea       @m68kde~1_246.L
00003A7C  72DA      
00003A7E  4E93      6483          jsr       (A3)
00003A80  584F      6484          addq.w    #4,A7
00003A82  600A      6485          bra.s     DisassembleInstruction_81
                    6486   DisassembleInstruction_80:
                    6487   ; else
                    6488   ; strcpyInstruction("LSR") ;
00003A84  4879 0000 6489          pea       @m68kde~1_247.L
00003A88  72DE      
00003A8A  4E93      6490          jsr       (A3)
00003A8C  584F      6491          addq.w    #4,A7
                    6492   DisassembleInstruction_81:
                    6493   ; // test direction by testing bit 8
                    6494   ; if((*OpCode & (unsigned short int)(0xFEC0)) == (unsigned short int)(0xE6C0))    //ror/rol
00003A8E  2042      6495          move.l    D2,A0
00003A90  3010      6496          move.w    (A0),D0
00003A92  C07C FEC0 6497          and.w     #65216,D0
00003A96  0C40 E6C0 6498          cmp.w     #59072,D0
00003A9A  6624      6499          bne.s     DisassembleInstruction_85
                    6500   ; if((*OpCode & (unsigned short int)(0x0100)) == (unsigned short int)(0x0100))
00003A9C  2042      6501          move.l    D2,A0
00003A9E  3010      6502          move.w    (A0),D0
00003AA0  C07C 0100 6503          and.w     #256,D0
00003AA4  0C40 0100 6504          cmp.w     #256,D0
00003AA8  660C      6505          bne.s     DisassembleInstruction_84
                    6506   ; strcpyInstruction("ROL") ;
00003AAA  4879 0000 6507          pea       @m68kde~1_248.L
00003AAE  72E2      
00003AB0  4E93      6508          jsr       (A3)
00003AB2  584F      6509          addq.w    #4,A7
00003AB4  600A      6510          bra.s     DisassembleInstruction_85
                    6511   DisassembleInstruction_84:
                    6512   ; else
                    6513   ; strcpyInstruction("ROR") ;
00003AB6  4879 0000 6514          pea       @m68kde~1_249.L
00003ABA  72E6      
00003ABC  4E93      6515          jsr       (A3)
00003ABE  584F      6516          addq.w    #4,A7
                    6517   DisassembleInstruction_85:
                    6518   ; // test direction by testing bit 8
                    6519   ; if((*OpCode & (unsigned short int)(0xFEC0)) == (unsigned short int)(0xE4C0))    //roxr/roxl
00003AC0  2042      6520          move.l    D2,A0
00003AC2  3010      6521          move.w    (A0),D0
00003AC4  C07C FEC0 6522          and.w     #65216,D0
00003AC8  0C40 E4C0 6523          cmp.w     #58560,D0
00003ACC  6624      6524          bne.s     DisassembleInstruction_89
                    6525   ; if((*OpCode & (unsigned short int)(0x0100)) == (unsigned short int)(0x0100))
00003ACE  2042      6526          move.l    D2,A0
00003AD0  3010      6527          move.w    (A0),D0
00003AD2  C07C 0100 6528          and.w     #256,D0
00003AD6  0C40 0100 6529          cmp.w     #256,D0
00003ADA  660C      6530          bne.s     DisassembleInstruction_88
                    6531   ; strcpyInstruction("ROXL") ;
00003ADC  4879 0000 6532          pea       @m68kde~1_250.L
00003AE0  72EA      
00003AE2  4E93      6533          jsr       (A3)
00003AE4  584F      6534          addq.w    #4,A7
00003AE6  600A      6535          bra.s     DisassembleInstruction_89
                    6536   DisassembleInstruction_88:
                    6537   ; else
                    6538   ; strcpyInstruction("ROXR") ;
00003AE8  4879 0000 6539          pea       @m68kde~1_251.L
00003AEC  72F0      
00003AEE  4E93      6540          jsr       (A3)
00003AF0  584F      6541          addq.w    #4,A7
                    6542   DisassembleInstruction_89:
                    6543   ; strcatInstruction("  ") ;
00003AF2  4879 0000 6544          pea       @m68kde~1_252.L
00003AF6  72F6      
00003AF8  4EB8 0CCC 6545          jsr       _strcatInstruction
00003AFC  584F      6546          addq.w    #4,A7
                    6547   ; Decode6BitEA(OpCode,0, 0,0) ;
00003AFE  42A7      6548          clr.l     -(A7)
00003B00  42A7      6549          clr.l     -(A7)
00003B02  42A7      6550          clr.l     -(A7)
00003B04  2F02      6551          move.l    D2,-(A7)
00003B06  4EB8 2EBC 6552          jsr       _Decode6BitEA
00003B0A  DEFC 0010 6553          add.w     #16,A7
00003B0E  6000 0154 6554          bra       DisassembleInstruction_73
                    6555   DisassembleInstruction_72:
                    6556   ; }
                    6557   ; // first version of above instructions, bit 5 is 0
                    6558   ; else
                    6559   ; {
                    6560   ; // test instruction and direction by testing bits 4,3
                    6561   ; if((*OpCode & (unsigned short int)(0x0018)) == (unsigned short int)(0x0))    //asr/asl
00003B12  2042      6562          move.l    D2,A0
00003B14  3010      6563          move.w    (A0),D0
00003B16  C07C 0018 6564          and.w     #24,D0
00003B1A  6624      6565          bne.s     DisassembleInstruction_93
                    6566   ; if((*OpCode & (unsigned short int)(0x0100)) == (unsigned short int)(0x0100))
00003B1C  2042      6567          move.l    D2,A0
00003B1E  3010      6568          move.w    (A0),D0
00003B20  C07C 0100 6569          and.w     #256,D0
00003B24  0C40 0100 6570          cmp.w     #256,D0
00003B28  660C      6571          bne.s     DisassembleInstruction_92
                    6572   ; strcpyInstruction("ASL") ;
00003B2A  4879 0000 6573          pea       @m68kde~1_253.L
00003B2E  72FA      
00003B30  4E93      6574          jsr       (A3)
00003B32  584F      6575          addq.w    #4,A7
00003B34  600A      6576          bra.s     DisassembleInstruction_93
                    6577   DisassembleInstruction_92:
                    6578   ; else
                    6579   ; strcpyInstruction("ASR") ;
00003B36  4879 0000 6580          pea       @m68kde~1_254.L
00003B3A  72FE      
00003B3C  4E93      6581          jsr       (A3)
00003B3E  584F      6582          addq.w    #4,A7
                    6583   DisassembleInstruction_93:
                    6584   ; // test instruction and direction by testing bits 4,3
                    6585   ; if((*OpCode & (unsigned short int)(0x0018)) == (unsigned short int)(0x0008))    //lsr/lsl
00003B40  2042      6586          move.l    D2,A0
00003B42  3010      6587          move.w    (A0),D0
00003B44  C07C 0018 6588          and.w     #24,D0
00003B48  0C40 0008 6589          cmp.w     #8,D0
00003B4C  6624      6590          bne.s     DisassembleInstruction_97
                    6591   ; if((*OpCode & (unsigned short int)(0x0100)) == (unsigned short int)(0x0100))
00003B4E  2042      6592          move.l    D2,A0
00003B50  3010      6593          move.w    (A0),D0
00003B52  C07C 0100 6594          and.w     #256,D0
00003B56  0C40 0100 6595          cmp.w     #256,D0
00003B5A  660C      6596          bne.s     DisassembleInstruction_96
                    6597   ; strcpyInstruction("LSL") ;
00003B5C  4879 0000 6598          pea       @m68kde~1_255.L
00003B60  7302      
00003B62  4E93      6599          jsr       (A3)
00003B64  584F      6600          addq.w    #4,A7
00003B66  600A      6601          bra.s     DisassembleInstruction_97
                    6602   DisassembleInstruction_96:
                    6603   ; else
                    6604   ; strcpyInstruction("LSR") ;
00003B68  4879 0000 6605          pea       @m68kde~1_256.L
00003B6C  7306      
00003B6E  4E93      6606          jsr       (A3)
00003B70  584F      6607          addq.w    #4,A7
                    6608   DisassembleInstruction_97:
                    6609   ; // test instruction and direction by testing bits 4,3
                    6610   ; if((*OpCode & (unsigned short int)(0x0018)) == (unsigned short int)(0x0018))    //ror/rol
00003B72  2042      6611          move.l    D2,A0
00003B74  3010      6612          move.w    (A0),D0
00003B76  C07C 0018 6613          and.w     #24,D0
00003B7A  0C40 0018 6614          cmp.w     #24,D0
00003B7E  6624      6615          bne.s     DisassembleInstruction_101
                    6616   ; if((*OpCode & (unsigned short int)(0x0100)) == (unsigned short int)(0x0100))
00003B80  2042      6617          move.l    D2,A0
00003B82  3010      6618          move.w    (A0),D0
00003B84  C07C 0100 6619          and.w     #256,D0
00003B88  0C40 0100 6620          cmp.w     #256,D0
00003B8C  660C      6621          bne.s     DisassembleInstruction_100
                    6622   ; strcpyInstruction("ROL") ;
00003B8E  4879 0000 6623          pea       @m68kde~1_257.L
00003B92  730A      
00003B94  4E93      6624          jsr       (A3)
00003B96  584F      6625          addq.w    #4,A7
00003B98  600A      6626          bra.s     DisassembleInstruction_101
                    6627   DisassembleInstruction_100:
                    6628   ; else
                    6629   ; strcpyInstruction("ROR") ;
00003B9A  4879 0000 6630          pea       @m68kde~1_258.L
00003B9E  730E      
00003BA0  4E93      6631          jsr       (A3)
00003BA2  584F      6632          addq.w    #4,A7
                    6633   DisassembleInstruction_101:
                    6634   ; // test instruction and direction by testing bits 4,3
                    6635   ; if((*OpCode & (unsigned short int)(0x0018)) == (unsigned short int)(0x0010))    //roxr/roxl
00003BA4  2042      6636          move.l    D2,A0
00003BA6  3010      6637          move.w    (A0),D0
00003BA8  C07C 0018 6638          and.w     #24,D0
00003BAC  0C40 0010 6639          cmp.w     #16,D0
00003BB0  6624      6640          bne.s     DisassembleInstruction_105
                    6641   ; if((*OpCode & (unsigned short int)(0x0100)) == (unsigned short int)(0x0100))
00003BB2  2042      6642          move.l    D2,A0
00003BB4  3010      6643          move.w    (A0),D0
00003BB6  C07C 0100 6644          and.w     #256,D0
00003BBA  0C40 0100 6645          cmp.w     #256,D0
00003BBE  660C      6646          bne.s     DisassembleInstruction_104
                    6647   ; strcpyInstruction("ROXL") ;
00003BC0  4879 0000 6648          pea       @m68kde~1_259.L
00003BC4  7312      
00003BC6  4E93      6649          jsr       (A3)
00003BC8  584F      6650          addq.w    #4,A7
00003BCA  600A      6651          bra.s     DisassembleInstruction_105
                    6652   DisassembleInstruction_104:
                    6653   ; else
                    6654   ; strcpyInstruction("ROXR") ;
00003BCC  4879 0000 6655          pea       @m68kde~1_260.L
00003BD0  7318      
00003BD2  4E93      6656          jsr       (A3)
00003BD4  584F      6657          addq.w    #4,A7
                    6658   DisassembleInstruction_105:
                    6659   ; Decode2BitOperandSize(*OpCode) ;
00003BD6  2042      6660          move.l    D2,A0
00003BD8  3210      6661          move.w    (A0),D1
00003BDA  C2BC 0000 6662          and.l     #65535,D1
00003BDE  FFFF      
00003BE0  2F01      6663          move.l    D1,-(A7)
00003BE2  4EB8 2C28 6664          jsr       _Decode2BitOperandSize
00003BE6  584F      6665          addq.w    #4,A7
                    6666   ; if((*OpCode & (unsigned short int)(0x0020)) == (unsigned short int)(0)) {   // if shift count defined by #value (bit 5 = 0), e.g. asl #3,d0
00003BE8  2042      6667          move.l    D2,A0
00003BEA  3010      6668          move.w    (A0),D0
00003BEC  C07C 0020 6669          and.w     #32,D0
00003BF0  6600 0038 6670          bne       DisassembleInstruction_106
                    6671   ; sprintf(TempString,"#$%X,D%X",
00003BF4  2042      6672          move.l    D2,A0
00003BF6  3210      6673          move.w    (A0),D1
00003BF8  C27C 0007 6674          and.w     #7,D1
00003BFC  C2BC 0000 6675          and.l     #65535,D1
00003C00  FFFF      
00003C02  2F01      6676          move.l    D1,-(A7)
00003C04  2042      6677          move.l    D2,A0
00003C06  3210      6678          move.w    (A0),D1
00003C08  E041      6679          asr.w     #8,D1
00003C0A  E241      6680          asr.w     #1,D1
00003C0C  C27C 0007 6681          and.w     #7,D1
00003C10  C2BC 0000 6682          and.l     #65535,D1
00003C14  FFFF      
00003C16  2F01      6683          move.l    D1,-(A7)
00003C18  4879 0000 6684          pea       @m68kde~1_261.L
00003C1C  731E      
00003C1E  2F0C      6685          move.l    A4,-(A7)
00003C20  4E95      6686          jsr       (A5)
00003C22  DEFC 0010 6687          add.w     #16,A7
00003C26  6000 0034 6688          bra       DisassembleInstruction_107
                    6689   DisassembleInstruction_106:
                    6690   ; ((*OpCode >> 9) & (unsigned short int)(0x0007)),
                    6691   ; (*OpCode & (unsigned short int)(0x0007))) ;
                    6692   ; }
                    6693   ; else {                                                                      // if shift is for example ASR D1,D2
                    6694   ; sprintf(TempString,"D%X,D%X",
00003C2A  2042      6695          move.l    D2,A0
00003C2C  3210      6696          move.w    (A0),D1
00003C2E  C27C 0007 6697          and.w     #7,D1
00003C32  C2BC 0000 6698          and.l     #65535,D1
00003C36  FFFF      
00003C38  2F01      6699          move.l    D1,-(A7)
00003C3A  2042      6700          move.l    D2,A0
00003C3C  3210      6701          move.w    (A0),D1
00003C3E  E041      6702          asr.w     #8,D1
00003C40  E241      6703          asr.w     #1,D1
00003C42  C27C 0007 6704          and.w     #7,D1
00003C46  C2BC 0000 6705          and.l     #65535,D1
00003C4A  FFFF      
00003C4C  2F01      6706          move.l    D1,-(A7)
00003C4E  4879 0000 6707          pea       @m68kde~1_262.L
00003C52  7328      
00003C54  2F0C      6708          move.l    A4,-(A7)
00003C56  4E95      6709          jsr       (A5)
00003C58  DEFC 0010 6710          add.w     #16,A7
                    6711   DisassembleInstruction_107:
                    6712   ; ((*OpCode >> 9) & (unsigned short int)(0x0007)),
                    6713   ; (*OpCode & (unsigned short int)(0x0007))) ;
                    6714   ; }
                    6715   ; strcatInstruction(TempString) ;
00003C5C  2F0C      6716          move.l    A4,-(A7)
00003C5E  4EB8 0CCC 6717          jsr       _strcatInstruction
00003C62  584F      6718          addq.w    #4,A7
                    6719   DisassembleInstruction_73:
                    6720   ; }
                    6721   ; }
                    6722   ; /////////////////////////////////////////////////////////////////////////////////
                    6723   ; // if instruction is BCC and BSR and BRA
                    6724   ; /////////////////////////////////////////////////////////////////////////////////
                    6725   ; if((*OpCode & (unsigned short int)(0xF000 )) == (unsigned short int)(0x6000))
00003C64  2042      6726          move.l    D2,A0
00003C66  3010      6727          move.w    (A0),D0
00003C68  C07C F000 6728          and.w     #61440,D0
00003C6C  0C40 6000 6729          cmp.w     #24576,D0
00003C70  6600 00A0 6730          bne       DisassembleInstruction_108
                    6731   ; {
                    6732   ; InstructionSize = 1;
00003C74  24BC 0000 6733          move.l    #1,(A2)
00003C78  0001      
                    6734   ; Condition = ((*OpCode >> 8) & (unsigned short int)(0xF)) ;
00003C7A  2042      6735          move.l    D2,A0
00003C7C  3010      6736          move.w    (A0),D0
00003C7E  E040      6737          asr.w     #8,D0
00003C80  C07C 000F 6738          and.w     #15,D0
00003C84  1D40 FFE9 6739          move.b    D0,-23(A6)
                    6740   ; strcpyInstruction("B") ;
00003C88  4879 0000 6741          pea       @m68kde~1_263.L
00003C8C  7330      
00003C8E  4E93      6742          jsr       (A3)
00003C90  584F      6743          addq.w    #4,A7
                    6744   ; DecodeBranchCondition(Condition) ;
00003C92  122E FFE9 6745          move.b    -23(A6),D1
00003C96  C27C 00FF 6746          and.w     #255,D1
00003C9A  C2BC 0000 6747          and.l     #65535,D1
00003C9E  FFFF      
00003CA0  2F01      6748          move.l    D1,-(A7)
00003CA2  4EB8 337A 6749          jsr       _DecodeBranchCondition
00003CA6  584F      6750          addq.w    #4,A7
                    6751   ; Displacement8Bit = (*OpCode & (unsigned short int)(0xFF)) ;
00003CA8  2042      6752          move.l    D2,A0
00003CAA  3010      6753          move.w    (A0),D0
00003CAC  C07C 00FF 6754          and.w     #255,D0
00003CB0  1D40 FFFB 6755          move.b    D0,-5(A6)
                    6756   ; if(Displacement8Bit == (unsigned short int)(0))  {           // if 16 bit displacement
00003CB4  102E FFFB 6757          move.b    -5(A6),D0
00003CB8  4880      6758          ext.w     D0
00003CBA  4A40      6759          tst.w     D0
00003CBC  662A      6760          bne.s     DisassembleInstruction_110
                    6761   ; sprintf(TempString, "$%X", (int)(OpCode) + (int)(OpCode[1]) +  2) ;
00003CBE  2202      6762          move.l    D2,D1
00003CC0  2042      6763          move.l    D2,A0
00003CC2  2F00      6764          move.l    D0,-(A7)
00003CC4  3028 0002 6765          move.w    2(A0),D0
00003CC8  48C0      6766          ext.l     D0
00003CCA  D280      6767          add.l     D0,D1
00003CCC  201F      6768          move.l    (A7)+,D0
00003CCE  5481      6769          addq.l    #2,D1
00003CD0  2F01      6770          move.l    D1,-(A7)
00003CD2  4879 0000 6771          pea       @m68kde~1_264.L
00003CD6  7332      
00003CD8  2F0C      6772          move.l    A4,-(A7)
00003CDA  4E95      6773          jsr       (A5)
00003CDC  DEFC 000C 6774          add.w     #12,A7
                    6775   ; InstructionSize = 2 ;
00003CE0  24BC 0000 6776          move.l    #2,(A2)
00003CE4  0002      
00003CE6  6022      6777          bra.s     DisassembleInstruction_111
                    6778   DisassembleInstruction_110:
                    6779   ; }
                    6780   ; else
                    6781   ; sprintf(TempString, "$%X", (int)(OpCode) + Displacement8Bit + 2) ;           // 8 bit displacement
00003CE8  2202      6782          move.l    D2,D1
00003CEA  2F00      6783          move.l    D0,-(A7)
00003CEC  102E FFFB 6784          move.b    -5(A6),D0
00003CF0  4880      6785          ext.w     D0
00003CF2  48C0      6786          ext.l     D0
00003CF4  D280      6787          add.l     D0,D1
00003CF6  201F      6788          move.l    (A7)+,D0
00003CF8  5481      6789          addq.l    #2,D1
00003CFA  2F01      6790          move.l    D1,-(A7)
00003CFC  4879 0000 6791          pea       @m68kde~1_265.L
00003D00  7336      
00003D02  2F0C      6792          move.l    A4,-(A7)
00003D04  4E95      6793          jsr       (A5)
00003D06  DEFC 000C 6794          add.w     #12,A7
                    6795   DisassembleInstruction_111:
                    6796   ; strcatInstruction(TempString) ;
00003D0A  2F0C      6797          move.l    A4,-(A7)
00003D0C  4EB8 0CCC 6798          jsr       _strcatInstruction
00003D10  584F      6799          addq.w    #4,A7
                    6800   DisassembleInstruction_108:
                    6801   ; }
                    6802   ; /////////////////////////////////////////////////////////////////////////////////
                    6803   ; // if instruction is BCHG dn,<EA>
                    6804   ; /////////////////////////////////////////////////////////////////////////////////
                    6805   ; if((*OpCode & (unsigned short int)(0xF1C0 )) == (unsigned short int)(0x0140))   {
00003D12  2042      6806          move.l    D2,A0
00003D14  3010      6807          move.w    (A0),D0
00003D16  C07C F1C0 6808          and.w     #61888,D0
00003D1A  0C40 0140 6809          cmp.w     #320,D0
00003D1E  6600 004C 6810          bne       DisassembleInstruction_112
                    6811   ; InstructionSize = 1;
00003D22  24BC 0000 6812          move.l    #1,(A2)
00003D26  0001      
                    6813   ; strcpyInstruction("BCHG ") ;
00003D28  4879 0000 6814          pea       @m68kde~1_266.L
00003D2C  733A      
00003D2E  4E93      6815          jsr       (A3)
00003D30  584F      6816          addq.w    #4,A7
                    6817   ; sprintf(TempString, "D%d,", (*OpCode >> 9) & (unsigned short int)(0x0007)) ;
00003D32  2042      6818          move.l    D2,A0
00003D34  3210      6819          move.w    (A0),D1
00003D36  E041      6820          asr.w     #8,D1
00003D38  E241      6821          asr.w     #1,D1
00003D3A  C27C 0007 6822          and.w     #7,D1
00003D3E  C2BC 0000 6823          and.l     #65535,D1
00003D42  FFFF      
00003D44  2F01      6824          move.l    D1,-(A7)
00003D46  4879 0000 6825          pea       @m68kde~1_267.L
00003D4A  7340      
00003D4C  2F0C      6826          move.l    A4,-(A7)
00003D4E  4E95      6827          jsr       (A5)
00003D50  DEFC 000C 6828          add.w     #12,A7
                    6829   ; strcatInstruction(TempString) ;
00003D54  2F0C      6830          move.l    A4,-(A7)
00003D56  4EB8 0CCC 6831          jsr       _strcatInstruction
00003D5A  584F      6832          addq.w    #4,A7
                    6833   ; Decode6BitEA(OpCode,0,0,0) ;
00003D5C  42A7      6834          clr.l     -(A7)
00003D5E  42A7      6835          clr.l     -(A7)
00003D60  42A7      6836          clr.l     -(A7)
00003D62  2F02      6837          move.l    D2,-(A7)
00003D64  4EB8 2EBC 6838          jsr       _Decode6BitEA
00003D68  DEFC 0010 6839          add.w     #16,A7
                    6840   DisassembleInstruction_112:
                    6841   ; }
                    6842   ; /////////////////////////////////////////////////////////////////////////////////
                    6843   ; // if instruction is BCHG #data,<EA>
                    6844   ; /////////////////////////////////////////////////////////////////////////////////
                    6845   ; if((*OpCode & (unsigned short int)(0xFFC0 )) == (unsigned short int)(0x0840))   {
00003D6C  2042      6846          move.l    D2,A0
00003D6E  3010      6847          move.w    (A0),D0
00003D70  C07C FFC0 6848          and.w     #65472,D0
00003D74  0C40 0840 6849          cmp.w     #2112,D0
00003D78  6600 0044 6850          bne       DisassembleInstruction_114
                    6851   ; strcpyInstruction("BCHG ") ;
00003D7C  4879 0000 6852          pea       @m68kde~1_268.L
00003D80  7346      
00003D82  4E93      6853          jsr       (A3)
00003D84  584F      6854          addq.w    #4,A7
                    6855   ; sprintf(TempString, "#$%X,", OpCode[1]) ;
00003D86  2042      6856          move.l    D2,A0
00003D88  3228 0002 6857          move.w    2(A0),D1
00003D8C  48C1      6858          ext.l     D1
00003D8E  2F01      6859          move.l    D1,-(A7)
00003D90  4879 0000 6860          pea       @m68kde~1_269.L
00003D94  734C      
00003D96  2F0C      6861          move.l    A4,-(A7)
00003D98  4E95      6862          jsr       (A5)
00003D9A  DEFC 000C 6863          add.w     #12,A7
                    6864   ; InstructionSize = 2 ;
00003D9E  24BC 0000 6865          move.l    #2,(A2)
00003DA2  0002      
                    6866   ; strcatInstruction(TempString) ;
00003DA4  2F0C      6867          move.l    A4,-(A7)
00003DA6  4EB8 0CCC 6868          jsr       _strcatInstruction
00003DAA  584F      6869          addq.w    #4,A7
                    6870   ; Decode6BitEA(OpCode,0,1,0) ;
00003DAC  42A7      6871          clr.l     -(A7)
00003DAE  4878 0001 6872          pea       1
00003DB2  42A7      6873          clr.l     -(A7)
00003DB4  2F02      6874          move.l    D2,-(A7)
00003DB6  4EB8 2EBC 6875          jsr       _Decode6BitEA
00003DBA  DEFC 0010 6876          add.w     #16,A7
                    6877   DisassembleInstruction_114:
                    6878   ; }
                    6879   ; /////////////////////////////////////////////////////////////////////////////////
                    6880   ; // if instruction is BCLR  dn,<EA>
                    6881   ; /////////////////////////////////////////////////////////////////////////////////
                    6882   ; if((*OpCode & (unsigned short int)(0xF1C0 )) == (unsigned short int)(0x0180))   {
00003DBE  2042      6883          move.l    D2,A0
00003DC0  3010      6884          move.w    (A0),D0
00003DC2  C07C F1C0 6885          and.w     #61888,D0
00003DC6  0C40 0180 6886          cmp.w     #384,D0
00003DCA  6600 004C 6887          bne       DisassembleInstruction_116
                    6888   ; InstructionSize = 1;
00003DCE  24BC 0000 6889          move.l    #1,(A2)
00003DD2  0001      
                    6890   ; strcpyInstruction("BCLR ") ;
00003DD4  4879 0000 6891          pea       @m68kde~1_270.L
00003DD8  7352      
00003DDA  4E93      6892          jsr       (A3)
00003DDC  584F      6893          addq.w    #4,A7
                    6894   ; sprintf(TempString, "D%d,", (*OpCode >> 9) & (unsigned short int)(0x0007)) ;
00003DDE  2042      6895          move.l    D2,A0
00003DE0  3210      6896          move.w    (A0),D1
00003DE2  E041      6897          asr.w     #8,D1
00003DE4  E241      6898          asr.w     #1,D1
00003DE6  C27C 0007 6899          and.w     #7,D1
00003DEA  C2BC 0000 6900          and.l     #65535,D1
00003DEE  FFFF      
00003DF0  2F01      6901          move.l    D1,-(A7)
00003DF2  4879 0000 6902          pea       @m68kde~1_271.L
00003DF6  7358      
00003DF8  2F0C      6903          move.l    A4,-(A7)
00003DFA  4E95      6904          jsr       (A5)
00003DFC  DEFC 000C 6905          add.w     #12,A7
                    6906   ; strcatInstruction(TempString) ;
00003E00  2F0C      6907          move.l    A4,-(A7)
00003E02  4EB8 0CCC 6908          jsr       _strcatInstruction
00003E06  584F      6909          addq.w    #4,A7
                    6910   ; Decode6BitEA(OpCode,0,0,0) ;
00003E08  42A7      6911          clr.l     -(A7)
00003E0A  42A7      6912          clr.l     -(A7)
00003E0C  42A7      6913          clr.l     -(A7)
00003E0E  2F02      6914          move.l    D2,-(A7)
00003E10  4EB8 2EBC 6915          jsr       _Decode6BitEA
00003E14  DEFC 0010 6916          add.w     #16,A7
                    6917   DisassembleInstruction_116:
                    6918   ; }
                    6919   ; /////////////////////////////////////////////////////////////////////////////////
                    6920   ; // if instruction is BCLR #data,<EA>
                    6921   ; /////////////////////////////////////////////////////////////////////////////////
                    6922   ; if((*OpCode & (unsigned short int)(0xFFC0 )) == (unsigned short int)(0x0880))   {
00003E18  2042      6923          move.l    D2,A0
00003E1A  3010      6924          move.w    (A0),D0
00003E1C  C07C FFC0 6925          and.w     #65472,D0
00003E20  0C40 0880 6926          cmp.w     #2176,D0
00003E24  6600 0044 6927          bne       DisassembleInstruction_118
                    6928   ; strcpyInstruction("BCLR ") ;
00003E28  4879 0000 6929          pea       @m68kde~1_272.L
00003E2C  735E      
00003E2E  4E93      6930          jsr       (A3)
00003E30  584F      6931          addq.w    #4,A7
                    6932   ; sprintf(TempString, "#$%X,", OpCode[1]) ;
00003E32  2042      6933          move.l    D2,A0
00003E34  3228 0002 6934          move.w    2(A0),D1
00003E38  48C1      6935          ext.l     D1
00003E3A  2F01      6936          move.l    D1,-(A7)
00003E3C  4879 0000 6937          pea       @m68kde~1_273.L
00003E40  7364      
00003E42  2F0C      6938          move.l    A4,-(A7)
00003E44  4E95      6939          jsr       (A5)
00003E46  DEFC 000C 6940          add.w     #12,A7
                    6941   ; InstructionSize = 2 ;
00003E4A  24BC 0000 6942          move.l    #2,(A2)
00003E4E  0002      
                    6943   ; strcatInstruction(TempString) ;
00003E50  2F0C      6944          move.l    A4,-(A7)
00003E52  4EB8 0CCC 6945          jsr       _strcatInstruction
00003E56  584F      6946          addq.w    #4,A7
                    6947   ; Decode6BitEA(OpCode,0,1,0) ;
00003E58  42A7      6948          clr.l     -(A7)
00003E5A  4878 0001 6949          pea       1
00003E5E  42A7      6950          clr.l     -(A7)
00003E60  2F02      6951          move.l    D2,-(A7)
00003E62  4EB8 2EBC 6952          jsr       _Decode6BitEA
00003E66  DEFC 0010 6953          add.w     #16,A7
                    6954   DisassembleInstruction_118:
                    6955   ; }
                    6956   ; /////////////////////////////////////////////////////////////////////////////////
                    6957   ; // if instruction is BSET dn,<EA>
                    6958   ; /////////////////////////////////////////////////////////////////////////////////
                    6959   ; if((*OpCode & (unsigned short int)(0xF1C0 )) == (unsigned short int)(0x01C0))   {
00003E6A  2042      6960          move.l    D2,A0
00003E6C  3010      6961          move.w    (A0),D0
00003E6E  C07C F1C0 6962          and.w     #61888,D0
00003E72  0C40 01C0 6963          cmp.w     #448,D0
00003E76  6600 004C 6964          bne       DisassembleInstruction_120
                    6965   ; InstructionSize = 1;
00003E7A  24BC 0000 6966          move.l    #1,(A2)
00003E7E  0001      
                    6967   ; strcpyInstruction("BSET ") ;
00003E80  4879 0000 6968          pea       @m68kde~1_274.L
00003E84  736A      
00003E86  4E93      6969          jsr       (A3)
00003E88  584F      6970          addq.w    #4,A7
                    6971   ; sprintf(TempString, "D%d,", (*OpCode >> 9) & (unsigned short int)(0x0007)) ;
00003E8A  2042      6972          move.l    D2,A0
00003E8C  3210      6973          move.w    (A0),D1
00003E8E  E041      6974          asr.w     #8,D1
00003E90  E241      6975          asr.w     #1,D1
00003E92  C27C 0007 6976          and.w     #7,D1
00003E96  C2BC 0000 6977          and.l     #65535,D1
00003E9A  FFFF      
00003E9C  2F01      6978          move.l    D1,-(A7)
00003E9E  4879 0000 6979          pea       @m68kde~1_275.L
00003EA2  7370      
00003EA4  2F0C      6980          move.l    A4,-(A7)
00003EA6  4E95      6981          jsr       (A5)
00003EA8  DEFC 000C 6982          add.w     #12,A7
                    6983   ; strcatInstruction(TempString) ;
00003EAC  2F0C      6984          move.l    A4,-(A7)
00003EAE  4EB8 0CCC 6985          jsr       _strcatInstruction
00003EB2  584F      6986          addq.w    #4,A7
                    6987   ; Decode6BitEA(OpCode,0,0,0) ;
00003EB4  42A7      6988          clr.l     -(A7)
00003EB6  42A7      6989          clr.l     -(A7)
00003EB8  42A7      6990          clr.l     -(A7)
00003EBA  2F02      6991          move.l    D2,-(A7)
00003EBC  4EB8 2EBC 6992          jsr       _Decode6BitEA
00003EC0  DEFC 0010 6993          add.w     #16,A7
                    6994   DisassembleInstruction_120:
                    6995   ; }
                    6996   ; /////////////////////////////////////////////////////////////////////////////////
                    6997   ; // if instruction is BSET #data,<EA>
                    6998   ; /////////////////////////////////////////////////////////////////////////////////
                    6999   ; if((*OpCode & (unsigned short int)(0xFFC0 )) == (unsigned short int)(0x08C0))   {
00003EC4  2042      7000          move.l    D2,A0
00003EC6  3010      7001          move.w    (A0),D0
00003EC8  C07C FFC0 7002          and.w     #65472,D0
00003ECC  0C40 08C0 7003          cmp.w     #2240,D0
00003ED0  6600 0044 7004          bne       DisassembleInstruction_122
                    7005   ; strcpyInstruction("BSET ") ;
00003ED4  4879 0000 7006          pea       @m68kde~1_276.L
00003ED8  7376      
00003EDA  4E93      7007          jsr       (A3)
00003EDC  584F      7008          addq.w    #4,A7
                    7009   ; sprintf(TempString, "#$%X,", OpCode[1]) ;
00003EDE  2042      7010          move.l    D2,A0
00003EE0  3228 0002 7011          move.w    2(A0),D1
00003EE4  48C1      7012          ext.l     D1
00003EE6  2F01      7013          move.l    D1,-(A7)
00003EE8  4879 0000 7014          pea       @m68kde~1_277.L
00003EEC  737C      
00003EEE  2F0C      7015          move.l    A4,-(A7)
00003EF0  4E95      7016          jsr       (A5)
00003EF2  DEFC 000C 7017          add.w     #12,A7
                    7018   ; InstructionSize = 2 ;
00003EF6  24BC 0000 7019          move.l    #2,(A2)
00003EFA  0002      
                    7020   ; strcatInstruction(TempString) ;
00003EFC  2F0C      7021          move.l    A4,-(A7)
00003EFE  4EB8 0CCC 7022          jsr       _strcatInstruction
00003F02  584F      7023          addq.w    #4,A7
                    7024   ; Decode6BitEA(OpCode,0,1,0) ;
00003F04  42A7      7025          clr.l     -(A7)
00003F06  4878 0001 7026          pea       1
00003F0A  42A7      7027          clr.l     -(A7)
00003F0C  2F02      7028          move.l    D2,-(A7)
00003F0E  4EB8 2EBC 7029          jsr       _Decode6BitEA
00003F12  DEFC 0010 7030          add.w     #16,A7
                    7031   DisassembleInstruction_122:
                    7032   ; }
                    7033   ; /////////////////////////////////////////////////////////////////////////////////
                    7034   ; // if instruction is BTST dn,<EA>
                    7035   ; /////////////////////////////////////////////////////////////////////////////////
                    7036   ; if((*OpCode & (unsigned short int)(0xF1C0 )) == (unsigned short int)(0x0100))   {
00003F16  2042      7037          move.l    D2,A0
00003F18  3010      7038          move.w    (A0),D0
00003F1A  C07C F1C0 7039          and.w     #61888,D0
00003F1E  0C40 0100 7040          cmp.w     #256,D0
00003F22  6600 004C 7041          bne       DisassembleInstruction_124
                    7042   ; InstructionSize = 1;
00003F26  24BC 0000 7043          move.l    #1,(A2)
00003F2A  0001      
                    7044   ; strcpyInstruction("BTST ") ;
00003F2C  4879 0000 7045          pea       @m68kde~1_278.L
00003F30  7382      
00003F32  4E93      7046          jsr       (A3)
00003F34  584F      7047          addq.w    #4,A7
                    7048   ; sprintf(TempString, "D%d,", (*OpCode >> 9) & (unsigned short int)(0x0007)) ;
00003F36  2042      7049          move.l    D2,A0
00003F38  3210      7050          move.w    (A0),D1
00003F3A  E041      7051          asr.w     #8,D1
00003F3C  E241      7052          asr.w     #1,D1
00003F3E  C27C 0007 7053          and.w     #7,D1
00003F42  C2BC 0000 7054          and.l     #65535,D1
00003F46  FFFF      
00003F48  2F01      7055          move.l    D1,-(A7)
00003F4A  4879 0000 7056          pea       @m68kde~1_279.L
00003F4E  7388      
00003F50  2F0C      7057          move.l    A4,-(A7)
00003F52  4E95      7058          jsr       (A5)
00003F54  DEFC 000C 7059          add.w     #12,A7
                    7060   ; strcatInstruction(TempString) ;
00003F58  2F0C      7061          move.l    A4,-(A7)
00003F5A  4EB8 0CCC 7062          jsr       _strcatInstruction
00003F5E  584F      7063          addq.w    #4,A7
                    7064   ; Decode6BitEA(OpCode,0,0,0) ;
00003F60  42A7      7065          clr.l     -(A7)
00003F62  42A7      7066          clr.l     -(A7)
00003F64  42A7      7067          clr.l     -(A7)
00003F66  2F02      7068          move.l    D2,-(A7)
00003F68  4EB8 2EBC 7069          jsr       _Decode6BitEA
00003F6C  DEFC 0010 7070          add.w     #16,A7
                    7071   DisassembleInstruction_124:
                    7072   ; }
                    7073   ; /////////////////////////////////////////////////////////////////////////////////
                    7074   ; // if instruction is BTST #data,<EA>
                    7075   ; /////////////////////////////////////////////////////////////////////////////////
                    7076   ; if((*OpCode & (unsigned short int)(0xFFC0 )) == (unsigned short int)(0x0800))   {
00003F70  2042      7077          move.l    D2,A0
00003F72  3010      7078          move.w    (A0),D0
00003F74  C07C FFC0 7079          and.w     #65472,D0
00003F78  0C40 0800 7080          cmp.w     #2048,D0
00003F7C  6600 0044 7081          bne       DisassembleInstruction_126
                    7082   ; strcpyInstruction("BTST ") ;
00003F80  4879 0000 7083          pea       @m68kde~1_280.L
00003F84  738E      
00003F86  4E93      7084          jsr       (A3)
00003F88  584F      7085          addq.w    #4,A7
                    7086   ; sprintf(TempString, "#$%X,", OpCode[1]) ;
00003F8A  2042      7087          move.l    D2,A0
00003F8C  3228 0002 7088          move.w    2(A0),D1
00003F90  48C1      7089          ext.l     D1
00003F92  2F01      7090          move.l    D1,-(A7)
00003F94  4879 0000 7091          pea       @m68kde~1_281.L
00003F98  7394      
00003F9A  2F0C      7092          move.l    A4,-(A7)
00003F9C  4E95      7093          jsr       (A5)
00003F9E  DEFC 000C 7094          add.w     #12,A7
                    7095   ; InstructionSize = 2 ;
00003FA2  24BC 0000 7096          move.l    #2,(A2)
00003FA6  0002      
                    7097   ; strcatInstruction(TempString) ;
00003FA8  2F0C      7098          move.l    A4,-(A7)
00003FAA  4EB8 0CCC 7099          jsr       _strcatInstruction
00003FAE  584F      7100          addq.w    #4,A7
                    7101   ; Decode6BitEA(OpCode,0,1,0) ;
00003FB0  42A7      7102          clr.l     -(A7)
00003FB2  4878 0001 7103          pea       1
00003FB6  42A7      7104          clr.l     -(A7)
00003FB8  2F02      7105          move.l    D2,-(A7)
00003FBA  4EB8 2EBC 7106          jsr       _Decode6BitEA
00003FBE  DEFC 0010 7107          add.w     #16,A7
                    7108   DisassembleInstruction_126:
                    7109   ; }
                    7110   ; /////////////////////////////////////////////////////////////////////////////////
                    7111   ; // if instruction is CHK.W <EA>,DN
                    7112   ; /////////////////////////////////////////////////////////////////////////////////
                    7113   ; if((*OpCode & (unsigned short int)(0xF1C0 )) == (unsigned short int)(0x4180))   {
00003FC2  2042      7114          move.l    D2,A0
00003FC4  3010      7115          move.w    (A0),D0
00003FC6  C07C F1C0 7116          and.w     #61888,D0
00003FCA  0C40 4180 7117          cmp.w     #16768,D0
00003FCE  6600 004C 7118          bne       DisassembleInstruction_128
                    7119   ; InstructionSize = 1;
00003FD2  24BC 0000 7120          move.l    #1,(A2)
00003FD6  0001      
                    7121   ; strcpyInstruction("CHK ") ;
00003FD8  4879 0000 7122          pea       @m68kde~1_282.L
00003FDC  739A      
00003FDE  4E93      7123          jsr       (A3)
00003FE0  584F      7124          addq.w    #4,A7
                    7125   ; Decode6BitEA(OpCode,0,0,0) ;
00003FE2  42A7      7126          clr.l     -(A7)
00003FE4  42A7      7127          clr.l     -(A7)
00003FE6  42A7      7128          clr.l     -(A7)
00003FE8  2F02      7129          move.l    D2,-(A7)
00003FEA  4EB8 2EBC 7130          jsr       _Decode6BitEA
00003FEE  DEFC 0010 7131          add.w     #16,A7
                    7132   ; sprintf(TempString, ",D%d", (*OpCode >> 9) & (unsigned short int)(0x0007)) ;
00003FF2  2042      7133          move.l    D2,A0
00003FF4  3210      7134          move.w    (A0),D1
00003FF6  E041      7135          asr.w     #8,D1
00003FF8  E241      7136          asr.w     #1,D1
00003FFA  C27C 0007 7137          and.w     #7,D1
00003FFE  C2BC 0000 7138          and.l     #65535,D1
00004002  FFFF      
00004004  2F01      7139          move.l    D1,-(A7)
00004006  4879 0000 7140          pea       @m68kde~1_283.L
0000400A  73A0      
0000400C  2F0C      7141          move.l    A4,-(A7)
0000400E  4E95      7142          jsr       (A5)
00004010  DEFC 000C 7143          add.w     #12,A7
                    7144   ; strcatInstruction(TempString) ;
00004014  2F0C      7145          move.l    A4,-(A7)
00004016  4EB8 0CCC 7146          jsr       _strcatInstruction
0000401A  584F      7147          addq.w    #4,A7
                    7148   DisassembleInstruction_128:
                    7149   ; }
                    7150   ; /////////////////////////////////////////////////////////////////////////////////
                    7151   ; // if instruction is CLR <EA>
                    7152   ; /////////////////////////////////////////////////////////////////////////////////
                    7153   ; if((*OpCode & (unsigned short int)(0xFF00 )) == (unsigned short int)(0x4200))   {
0000401C  2042      7154          move.l    D2,A0
0000401E  3010      7155          move.w    (A0),D0
00004020  C07C FF00 7156          and.w     #65280,D0
00004024  0C40 4200 7157          cmp.w     #16896,D0
00004028  6600 0034 7158          bne       DisassembleInstruction_130
                    7159   ; InstructionSize = 1;
0000402C  24BC 0000 7160          move.l    #1,(A2)
00004030  0001      
                    7161   ; strcpyInstruction("CLR") ;
00004032  4879 0000 7162          pea       @m68kde~1_284.L
00004036  73A6      
00004038  4E93      7163          jsr       (A3)
0000403A  584F      7164          addq.w    #4,A7
                    7165   ; Decode2BitOperandSize(*OpCode) ;
0000403C  2042      7166          move.l    D2,A0
0000403E  3210      7167          move.w    (A0),D1
00004040  C2BC 0000 7168          and.l     #65535,D1
00004044  FFFF      
00004046  2F01      7169          move.l    D1,-(A7)
00004048  4EB8 2C28 7170          jsr       _Decode2BitOperandSize
0000404C  584F      7171          addq.w    #4,A7
                    7172   ; Decode6BitEA(OpCode,0,0,0) ;
0000404E  42A7      7173          clr.l     -(A7)
00004050  42A7      7174          clr.l     -(A7)
00004052  42A7      7175          clr.l     -(A7)
00004054  2F02      7176          move.l    D2,-(A7)
00004056  4EB8 2EBC 7177          jsr       _Decode6BitEA
0000405A  DEFC 0010 7178          add.w     #16,A7
                    7179   DisassembleInstruction_130:
                    7180   ; }
                    7181   ; /////////////////////////////////////////////////////////////////////////////////
                    7182   ; // if instruction is CMP, CMPA
                    7183   ; /////////////////////////////////////////////////////////////////////////////////
                    7184   ; if((*OpCode & (unsigned short int)(0xF000 )) == (unsigned short int)(0xB000))
0000405E  2042      7185          move.l    D2,A0
00004060  3010      7186          move.w    (A0),D0
00004062  C07C F000 7187          and.w     #61440,D0
00004066  0C40 B000 7188          cmp.w     #45056,D0
0000406A  6600 008C 7189          bne       DisassembleInstruction_135
                    7190   ; {
                    7191   ; InstructionSize = 1;
0000406E  24BC 0000 7192          move.l    #1,(A2)
00004072  0001      
                    7193   ; OpMode = (*OpCode >> 6) & (unsigned short int)(0x0007) ;
00004074  2042      7194          move.l    D2,A0
00004076  3010      7195          move.w    (A0),D0
00004078  EC40      7196          asr.w     #6,D0
0000407A  C07C 0007 7197          and.w     #7,D0
0000407E  3600      7198          move.w    D0,D3
                    7199   ; if((OpMode == (unsigned short int)(0x0003)) || (OpMode == (unsigned short int)(0x0007)))    {
00004080  0C43 0003 7200          cmp.w     #3,D3
00004084  6708      7201          beq.s     DisassembleInstruction_136
00004086  0C43 0007 7202          cmp.w     #7,D3
0000408A  6600 005A 7203          bne       DisassembleInstruction_134
                    7204   DisassembleInstruction_136:
                    7205   ; if(OpMode == (unsigned short int)(0x0003))
0000408E  0C43 0003 7206          cmp.w     #3,D3
00004092  660C      7207          bne.s     DisassembleInstruction_137
                    7208   ; strcpyInstruction("CMPA.W ") ;
00004094  4879 0000 7209          pea       @m68kde~1_285.L
00004098  73AA      
0000409A  4E93      7210          jsr       (A3)
0000409C  584F      7211          addq.w    #4,A7
0000409E  600A      7212          bra.s     DisassembleInstruction_138
                    7213   DisassembleInstruction_137:
                    7214   ; else
                    7215   ; strcpyInstruction("CMPA.L ") ;
000040A0  4879 0000 7216          pea       @m68kde~1_286.L
000040A4  73B2      
000040A6  4E93      7217          jsr       (A3)
000040A8  584F      7218          addq.w    #4,A7
                    7219   DisassembleInstruction_138:
                    7220   ; Decode6BitEA(OpCode,0,0,0) ;
000040AA  42A7      7221          clr.l     -(A7)
000040AC  42A7      7222          clr.l     -(A7)
000040AE  42A7      7223          clr.l     -(A7)
000040B0  2F02      7224          move.l    D2,-(A7)
000040B2  4EB8 2EBC 7225          jsr       _Decode6BitEA
000040B6  DEFC 0010 7226          add.w     #16,A7
                    7227   ; sprintf(TempString, ",A%d", ((*OpCode >> 9) & (unsigned short int)(0x0007))) ;
000040BA  2042      7228          move.l    D2,A0
000040BC  3210      7229          move.w    (A0),D1
000040BE  E041      7230          asr.w     #8,D1
000040C0  E241      7231          asr.w     #1,D1
000040C2  C27C 0007 7232          and.w     #7,D1
000040C6  C2BC 0000 7233          and.l     #65535,D1
000040CA  FFFF      
000040CC  2F01      7234          move.l    D1,-(A7)
000040CE  4879 0000 7235          pea       @m68kde~1_287.L
000040D2  73BA      
000040D4  2F0C      7236          move.l    A4,-(A7)
000040D6  4E95      7237          jsr       (A5)
000040D8  DEFC 000C 7238          add.w     #12,A7
                    7239   ; strcatInstruction(TempString) ;
000040DC  2F0C      7240          move.l    A4,-(A7)
000040DE  4EB8 0CCC 7241          jsr       _strcatInstruction
000040E2  584F      7242          addq.w    #4,A7
000040E4  6012      7243          bra.s     DisassembleInstruction_135
                    7244   DisassembleInstruction_134:
                    7245   ; }
                    7246   ; else {
                    7247   ; strcpyInstruction("CMP") ;
000040E6  4879 0000 7248          pea       @m68kde~1_288.L
000040EA  73C0      
000040EC  4E93      7249          jsr       (A3)
000040EE  584F      7250          addq.w    #4,A7
                    7251   ; Decode3BitOperandMode(OpCode) ;
000040F0  2F02      7252          move.l    D2,-(A7)
000040F2  4EB8 32E4 7253          jsr       _Decode3BitOperandMode
000040F6  584F      7254          addq.w    #4,A7
                    7255   DisassembleInstruction_135:
                    7256   ; }
                    7257   ; }
                    7258   ; /////////////////////////////////////////////////////////////////////////////////
                    7259   ; // if instruction is CMPM
                    7260   ; /////////////////////////////////////////////////////////////////////////////////
                    7261   ; if((*OpCode & (unsigned short int)(0xF138 )) == (unsigned short int)(0xB108))
000040F8  2042      7262          move.l    D2,A0
000040FA  3010      7263          move.w    (A0),D0
000040FC  C07C F138 7264          and.w     #61752,D0
00004100  0C40 B108 7265          cmp.w     #45320,D0
00004104  6600 007A 7266          bne       DisassembleInstruction_141
                    7267   ; {
                    7268   ; OpMode = (*OpCode >> 6) & (unsigned short int)(0x0003) ;
00004108  2042      7269          move.l    D2,A0
0000410A  3010      7270          move.w    (A0),D0
0000410C  EC40      7271          asr.w     #6,D0
0000410E  C07C 0003 7272          and.w     #3,D0
00004112  3600      7273          move.w    D0,D3
                    7274   ; if((OpMode >= (unsigned short int)(0x0000)) && (OpMode <= (unsigned short int)(0x0002)))
00004114  0C43 0000 7275          cmp.w     #0,D3
00004118  6500 0066 7276          blo       DisassembleInstruction_141
0000411C  0C43 0002 7277          cmp.w     #2,D3
00004120  6200 005E 7278          bhi       DisassembleInstruction_141
                    7279   ; {
                    7280   ; InstructionSize = 1;
00004124  24BC 0000 7281          move.l    #1,(A2)
00004128  0001      
                    7282   ; strcpyInstruction("CMPM") ;
0000412A  4879 0000 7283          pea       @m68kde~1_289.L
0000412E  73C4      
00004130  4E93      7284          jsr       (A3)
00004132  584F      7285          addq.w    #4,A7
                    7286   ; Decode2BitOperandSize(*OpCode) ;
00004134  2042      7287          move.l    D2,A0
00004136  3210      7288          move.w    (A0),D1
00004138  C2BC 0000 7289          and.l     #65535,D1
0000413C  FFFF      
0000413E  2F01      7290          move.l    D1,-(A7)
00004140  4EB8 2C28 7291          jsr       _Decode2BitOperandSize
00004144  584F      7292          addq.w    #4,A7
                    7293   ; sprintf(TempString, "(A%d)+,(A%d)+", (*OpCode & (unsigned short int)(0x7)) , ((*OpCode >> 9) & (unsigned short int)(0x7)));
00004146  2042      7294          move.l    D2,A0
00004148  3210      7295          move.w    (A0),D1
0000414A  E041      7296          asr.w     #8,D1
0000414C  E241      7297          asr.w     #1,D1
0000414E  C27C 0007 7298          and.w     #7,D1
00004152  C2BC 0000 7299          and.l     #65535,D1
00004156  FFFF      
00004158  2F01      7300          move.l    D1,-(A7)
0000415A  2042      7301          move.l    D2,A0
0000415C  3210      7302          move.w    (A0),D1
0000415E  C27C 0007 7303          and.w     #7,D1
00004162  C2BC 0000 7304          and.l     #65535,D1
00004166  FFFF      
00004168  2F01      7305          move.l    D1,-(A7)
0000416A  4879 0000 7306          pea       @m68kde~1_290.L
0000416E  73CA      
00004170  2F0C      7307          move.l    A4,-(A7)
00004172  4E95      7308          jsr       (A5)
00004174  DEFC 0010 7309          add.w     #16,A7
                    7310   ; strcatInstruction(TempString) ;
00004178  2F0C      7311          move.l    A4,-(A7)
0000417A  4EB8 0CCC 7312          jsr       _strcatInstruction
0000417E  584F      7313          addq.w    #4,A7
                    7314   DisassembleInstruction_141:
                    7315   ; }
                    7316   ; }
                    7317   ; /////////////////////////////////////////////////////////////////////////////////
                    7318   ; // if instruction is DBCC
                    7319   ; /////////////////////////////////////////////////////////////////////////////////
                    7320   ; if((*OpCode & (unsigned short int)(0xF0F8 )) == (unsigned short int)(0x50C8))
00004180  2042      7321          move.l    D2,A0
00004182  3010      7322          move.w    (A0),D0
00004184  C07C F0F8 7323          and.w     #61688,D0
00004188  0C40 50C8 7324          cmp.w     #20680,D0
0000418C  6600 0084 7325          bne       DisassembleInstruction_143
                    7326   ; {
                    7327   ; InstructionSize = 2;
00004190  24BC 0000 7328          move.l    #2,(A2)
00004194  0002      
                    7329   ; strcpy(Instruction,"DB") ;
00004196  4879 0000 7330          pea       @m68kde~1_291.L
0000419A  73D8      
0000419C  4879 0803 7331          pea       _Instruction.L
000041A0  04E2      
000041A2  4EB9 0000 7332          jsr       _strcpy
000041A6  5372      
000041A8  504F      7333          addq.w    #8,A7
                    7334   ; Condition = ((*OpCode >> 8) & (unsigned short int)(0x000F)) ;
000041AA  2042      7335          move.l    D2,A0
000041AC  3010      7336          move.w    (A0),D0
000041AE  E040      7337          asr.w     #8,D0
000041B0  C07C 000F 7338          and.w     #15,D0
000041B4  1D40 FFE9 7339          move.b    D0,-23(A6)
                    7340   ; DecodeBranchCondition(Condition) ;
000041B8  122E FFE9 7341          move.b    -23(A6),D1
000041BC  C27C 00FF 7342          and.w     #255,D1
000041C0  C2BC 0000 7343          and.l     #65535,D1
000041C4  FFFF      
000041C6  2F01      7344          move.l    D1,-(A7)
000041C8  4EB8 337A 7345          jsr       _DecodeBranchCondition
000041CC  584F      7346          addq.w    #4,A7
                    7347   ; sprintf(TempString, "D%d,%+d(PC) to Addr:$%X",(*OpCode & (unsigned short int)(0x7)), (int)(OpCode[1]), (int)(OpCode) + (int)(OpCode[1]) +  2) ;
000041CE  2202      7348          move.l    D2,D1
000041D0  2042      7349          move.l    D2,A0
000041D2  2F00      7350          move.l    D0,-(A7)
000041D4  3028 0002 7351          move.w    2(A0),D0
000041D8  48C0      7352          ext.l     D0
000041DA  D280      7353          add.l     D0,D1
000041DC  201F      7354          move.l    (A7)+,D0
000041DE  5481      7355          addq.l    #2,D1
000041E0  2F01      7356          move.l    D1,-(A7)
000041E2  2042      7357          move.l    D2,A0
000041E4  3228 0002 7358          move.w    2(A0),D1
000041E8  48C1      7359          ext.l     D1
000041EA  2F01      7360          move.l    D1,-(A7)
000041EC  2042      7361          move.l    D2,A0
000041EE  3210      7362          move.w    (A0),D1
000041F0  C27C 0007 7363          and.w     #7,D1
000041F4  C2BC 0000 7364          and.l     #65535,D1
000041F8  FFFF      
000041FA  2F01      7365          move.l    D1,-(A7)
000041FC  4879 0000 7366          pea       @m68kde~1_292.L
00004200  73DC      
00004202  2F0C      7367          move.l    A4,-(A7)
00004204  4E95      7368          jsr       (A5)
00004206  DEFC 0014 7369          add.w     #20,A7
                    7370   ; strcatInstruction(TempString) ;
0000420A  2F0C      7371          move.l    A4,-(A7)
0000420C  4EB8 0CCC 7372          jsr       _strcatInstruction
00004210  584F      7373          addq.w    #4,A7
                    7374   DisassembleInstruction_143:
                    7375   ; }
                    7376   ; /////////////////////////////////////////////////////////////////////////////////
                    7377   ; // if instruction is DIVS
                    7378   ; /////////////////////////////////////////////////////////////////////////////////
                    7379   ; if((*OpCode & (unsigned short int)(0xF1C0 )) == (unsigned short int)(0x81C0))
00004212  2042      7380          move.l    D2,A0
00004214  3010      7381          move.w    (A0),D0
00004216  C07C F1C0 7382          and.w     #61888,D0
0000421A  0C40 81C0 7383          cmp.w     #33216,D0
0000421E  6600 004A 7384          bne       DisassembleInstruction_145
                    7385   ; {
                    7386   ; InstructionSize = 1;
00004222  24BC 0000 7387          move.l    #1,(A2)
00004226  0001      
                    7388   ; strcpy(Instruction,"DIVS ") ;
00004228  4879 0000 7389          pea       @m68kde~1_293.L
0000422C  73F4      
0000422E  4879 0803 7390          pea       _Instruction.L
00004232  04E2      
00004234  4EB9 0000 7391          jsr       _strcpy
00004238  5372      
0000423A  504F      7392          addq.w    #8,A7
                    7393   ; Decode6BitEA(OpCode,0,0,0) ;
0000423C  42A7      7394          clr.l     -(A7)
0000423E  42A7      7395          clr.l     -(A7)
00004240  42A7      7396          clr.l     -(A7)
00004242  2F02      7397          move.l    D2,-(A7)
00004244  4EB8 2EBC 7398          jsr       _Decode6BitEA
00004248  DEFC 0010 7399          add.w     #16,A7
                    7400   ; strcatInstruction(",") ;
0000424C  4879 0000 7401          pea       @m68kde~1_294.L
00004250  73FA      
00004252  4EB8 0CCC 7402          jsr       _strcatInstruction
00004256  584F      7403          addq.w    #4,A7
                    7404   ; Decode3BitDataRegister(*OpCode) ;
00004258  2042      7405          move.l    D2,A0
0000425A  3210      7406          move.w    (A0),D1
0000425C  C2BC 0000 7407          and.l     #65535,D1
00004260  FFFF      
00004262  2F01      7408          move.l    D1,-(A7)
00004264  4EB8 2C84 7409          jsr       _Decode3BitDataRegister
00004268  584F      7410          addq.w    #4,A7
                    7411   DisassembleInstruction_145:
                    7412   ; }
                    7413   ; /////////////////////////////////////////////////////////////////////////////////
                    7414   ; // if instruction is DIVU
                    7415   ; /////////////////////////////////////////////////////////////////////////////////
                    7416   ; if((*OpCode & (unsigned short int)(0xF1C0 )) == (unsigned short int)(0x80C0))
0000426A  2042      7417          move.l    D2,A0
0000426C  3010      7418          move.w    (A0),D0
0000426E  C07C F1C0 7419          and.w     #61888,D0
00004272  0C40 80C0 7420          cmp.w     #32960,D0
00004276  6600 004A 7421          bne       DisassembleInstruction_147
                    7422   ; {
                    7423   ; InstructionSize = 1;
0000427A  24BC 0000 7424          move.l    #1,(A2)
0000427E  0001      
                    7425   ; strcpy(Instruction,"DIVU ") ;
00004280  4879 0000 7426          pea       @m68kde~1_295.L
00004284  73FC      
00004286  4879 0803 7427          pea       _Instruction.L
0000428A  04E2      
0000428C  4EB9 0000 7428          jsr       _strcpy
00004290  5372      
00004292  504F      7429          addq.w    #8,A7
                    7430   ; Decode6BitEA(OpCode,0,0,0) ;
00004294  42A7      7431          clr.l     -(A7)
00004296  42A7      7432          clr.l     -(A7)
00004298  42A7      7433          clr.l     -(A7)
0000429A  2F02      7434          move.l    D2,-(A7)
0000429C  4EB8 2EBC 7435          jsr       _Decode6BitEA
000042A0  DEFC 0010 7436          add.w     #16,A7
                    7437   ; strcatInstruction(",") ;
000042A4  4879 0000 7438          pea       @m68kde~1_296.L
000042A8  7402      
000042AA  4EB8 0CCC 7439          jsr       _strcatInstruction
000042AE  584F      7440          addq.w    #4,A7
                    7441   ; Decode3BitDataRegister(*OpCode) ;
000042B0  2042      7442          move.l    D2,A0
000042B2  3210      7443          move.w    (A0),D1
000042B4  C2BC 0000 7444          and.l     #65535,D1
000042B8  FFFF      
000042BA  2F01      7445          move.l    D1,-(A7)
000042BC  4EB8 2C84 7446          jsr       _Decode3BitDataRegister
000042C0  584F      7447          addq.w    #4,A7
                    7448   DisassembleInstruction_147:
                    7449   ; }
                    7450   ; /////////////////////////////////////////////////////////////////////////////////
                    7451   ; // if instruction is EOR
                    7452   ; /////////////////////////////////////////////////////////////////////////////////
                    7453   ; if((*OpCode & (unsigned short int)(0xF000 )) == (unsigned short int)(0xB000))   {
000042C2  2042      7454          move.l    D2,A0
000042C4  3010      7455          move.w    (A0),D0
000042C6  C07C F000 7456          and.w     #61440,D0
000042CA  0C40 B000 7457          cmp.w     #45056,D0
000042CE  6600 004A 7458          bne       DisassembleInstruction_151
                    7459   ; OpMode = (*OpCode >> 6) & (unsigned short int)(0x0007) ;
000042D2  2042      7460          move.l    D2,A0
000042D4  3010      7461          move.w    (A0),D0
000042D6  EC40      7462          asr.w     #6,D0
000042D8  C07C 0007 7463          and.w     #7,D0
000042DC  3600      7464          move.w    D0,D3
                    7465   ; EAMode = (*OpCode >> 3) & (unsigned short int)(0x0007) ;    // mode cannot be 1 for EOR as it it used by CMPM instruction as a differentiator
000042DE  2042      7466          move.l    D2,A0
000042E0  3010      7467          move.w    (A0),D0
000042E2  E640      7468          asr.w     #3,D0
000042E4  C07C 0007 7469          and.w     #7,D0
000042E8  3D40 FFEC 7470          move.w    D0,-20(A6)
                    7471   ; if( (OpMode >= (unsigned short int)(0x0004)) &&
000042EC  0C43 0004 7472          cmp.w     #4,D3
000042F0  6528      7473          blo.s     DisassembleInstruction_151
000042F2  0C43 0006 7474          cmp.w     #6,D3
000042F6  6222      7475          bhi.s     DisassembleInstruction_151
000042F8  302E FFEC 7476          move.w    -20(A6),D0
000042FC  0C40 0001 7477          cmp.w     #1,D0
00004300  6718      7478          beq.s     DisassembleInstruction_151
                    7479   ; (OpMode <= (unsigned short int)(0x0006)) &&
                    7480   ; (EAMode != (unsigned short int)(0x0001)))
                    7481   ; {
                    7482   ; InstructionSize = 1;
00004302  24BC 0000 7483          move.l    #1,(A2)
00004306  0001      
                    7484   ; strcpyInstruction("EOR") ;
00004308  4879 0000 7485          pea       @m68kde~1_297.L
0000430C  7404      
0000430E  4E93      7486          jsr       (A3)
00004310  584F      7487          addq.w    #4,A7
                    7488   ; Decode3BitOperandMode(OpCode);
00004312  2F02      7489          move.l    D2,-(A7)
00004314  4EB8 32E4 7490          jsr       _Decode3BitOperandMode
00004318  584F      7491          addq.w    #4,A7
                    7492   DisassembleInstruction_151:
                    7493   ; }
                    7494   ; }
                    7495   ; /////////////////////////////////////////////////////////////////////////////////
                    7496   ; // if instruction is EOR to CCR
                    7497   ; /////////////////////////////////////////////////////////////////////////////////
                    7498   ; if(*OpCode == (unsigned short int)(0x0A3C))   {
0000431A  2042      7499          move.l    D2,A0
0000431C  3010      7500          move.w    (A0),D0
0000431E  0C40 0A3C 7501          cmp.w     #2620,D0
00004322  662C      7502          bne.s     DisassembleInstruction_153
                    7503   ; InstructionSize = 1;
00004324  24BC 0000 7504          move.l    #1,(A2)
00004328  0001      
                    7505   ; sprintf(Instruction, "EORI #$%2X,CCR", OpCode[1] & (unsigned short int)(0x00FF)) ;
0000432A  2042      7506          move.l    D2,A0
0000432C  3228 0002 7507          move.w    2(A0),D1
00004330  C27C 00FF 7508          and.w     #255,D1
00004334  C2BC 0000 7509          and.l     #65535,D1
00004338  FFFF      
0000433A  2F01      7510          move.l    D1,-(A7)
0000433C  4879 0000 7511          pea       @m68kde~1_298.L
00004340  7408      
00004342  4879 0803 7512          pea       _Instruction.L
00004346  04E2      
00004348  4E95      7513          jsr       (A5)
0000434A  DEFC 000C 7514          add.w     #12,A7
                    7515   ; InstructionSize += 1;
0000434E  5292      7516          addq.l    #1,(A2)
                    7517   DisassembleInstruction_153:
                    7518   ; }
                    7519   ; /////////////////////////////////////////////////////////////////////////////////
                    7520   ; // if instruction is EORI #data,SR
                    7521   ; /////////////////////////////////////////////////////////////////////////////////
                    7522   ; if(*OpCode  == (unsigned short int)(0x0A7C))   {
00004350  2042      7523          move.l    D2,A0
00004352  3010      7524          move.w    (A0),D0
00004354  0C40 0A7C 7525          cmp.w     #2684,D0
00004358  6622      7526          bne.s     DisassembleInstruction_155
                    7527   ; InstructionSize = 2;
0000435A  24BC 0000 7528          move.l    #2,(A2)
0000435E  0002      
                    7529   ; sprintf(Instruction, "EORI #$%X,SR", OpCode[1]);
00004360  2042      7530          move.l    D2,A0
00004362  3228 0002 7531          move.w    2(A0),D1
00004366  48C1      7532          ext.l     D1
00004368  2F01      7533          move.l    D1,-(A7)
0000436A  4879 0000 7534          pea       @m68kde~1_299.L
0000436E  7418      
00004370  4879 0803 7535          pea       _Instruction.L
00004374  04E2      
00004376  4E95      7536          jsr       (A5)
00004378  DEFC 000C 7537          add.w     #12,A7
                    7538   DisassembleInstruction_155:
                    7539   ; }
                    7540   ; /////////////////////////////////////////////////////////////////////////////////
                    7541   ; // if instruction is EXG
                    7542   ; /////////////////////////////////////////////////////////////////////////////////
                    7543   ; if((*OpCode & (unsigned short int)(0xF100 )) == (unsigned short int)(0xC100))   {
0000437C  2042      7544          move.l    D2,A0
0000437E  3010      7545          move.w    (A0),D0
00004380  C07C F100 7546          and.w     #61696,D0
00004384  0C40 C100 7547          cmp.w     #49408,D0
00004388  6600 00E0 7548          bne       DisassembleInstruction_163
                    7549   ; Rx = ((*OpCode >> 9) & (unsigned short int)(0x7)) ;
0000438C  2042      7550          move.l    D2,A0
0000438E  3010      7551          move.w    (A0),D0
00004390  E040      7552          asr.w     #8,D0
00004392  E240      7553          asr.w     #1,D0
00004394  C07C 0007 7554          and.w     #7,D0
00004398  3D40 FFF0 7555          move.w    D0,-16(A6)
                    7556   ; Ry = (*OpCode & (unsigned short int)(0x7)) ;
0000439C  2042      7557          move.l    D2,A0
0000439E  3010      7558          move.w    (A0),D0
000043A0  C07C 0007 7559          and.w     #7,D0
000043A4  3D40 FFF2 7560          move.w    D0,-14(A6)
                    7561   ; EXGOpMode = ((*OpCode >> 3) & (unsigned short int)(0x1F)) ;
000043A8  2042      7562          move.l    D2,A0
000043AA  3010      7563          move.w    (A0),D0
000043AC  E640      7564          asr.w     #3,D0
000043AE  C07C 001F 7565          and.w     #31,D0
000043B2  3D40 FFF4 7566          move.w    D0,-12(A6)
                    7567   ; if(EXGOpMode == (unsigned short int)(0x0008))   {
000043B6  302E FFF4 7568          move.w    -12(A6),D0
000043BA  0C40 0008 7569          cmp.w     #8,D0
000043BE  6634      7570          bne.s     DisassembleInstruction_159
                    7571   ; InstructionSize = 1;
000043C0  24BC 0000 7572          move.l    #1,(A2)
000043C4  0001      
                    7573   ; sprintf(Instruction, "EXG D%d,D%d", Rx, Ry) ;
000043C6  322E FFF2 7574          move.w    -14(A6),D1
000043CA  C2BC 0000 7575          and.l     #65535,D1
000043CE  FFFF      
000043D0  2F01      7576          move.l    D1,-(A7)
000043D2  322E FFF0 7577          move.w    -16(A6),D1
000043D6  C2BC 0000 7578          and.l     #65535,D1
000043DA  FFFF      
000043DC  2F01      7579          move.l    D1,-(A7)
000043DE  4879 0000 7580          pea       @m68kde~1_300.L
000043E2  7426      
000043E4  4879 0803 7581          pea       _Instruction.L
000043E8  04E2      
000043EA  4E95      7582          jsr       (A5)
000043EC  DEFC 0010 7583          add.w     #16,A7
000043F0  6000 0078 7584          bra       DisassembleInstruction_163
                    7585   DisassembleInstruction_159:
                    7586   ; }
                    7587   ; else if(EXGOpMode == (unsigned short int)(0x0009))  {
000043F4  302E FFF4 7588          move.w    -12(A6),D0
000043F8  0C40 0009 7589          cmp.w     #9,D0
000043FC  6632      7590          bne.s     DisassembleInstruction_161
                    7591   ; InstructionSize = 1;
000043FE  24BC 0000 7592          move.l    #1,(A2)
00004402  0001      
                    7593   ; sprintf(Instruction, "EXG A%d,A%d", Rx, Ry) ;
00004404  322E FFF2 7594          move.w    -14(A6),D1
00004408  C2BC 0000 7595          and.l     #65535,D1
0000440C  FFFF      
0000440E  2F01      7596          move.l    D1,-(A7)
00004410  322E FFF0 7597          move.w    -16(A6),D1
00004414  C2BC 0000 7598          and.l     #65535,D1
00004418  FFFF      
0000441A  2F01      7599          move.l    D1,-(A7)
0000441C  4879 0000 7600          pea       @m68kde~1_301.L
00004420  7432      
00004422  4879 0803 7601          pea       _Instruction.L
00004426  04E2      
00004428  4E95      7602          jsr       (A5)
0000442A  DEFC 0010 7603          add.w     #16,A7
0000442E  603A      7604          bra.s     DisassembleInstruction_163
                    7605   DisassembleInstruction_161:
                    7606   ; }
                    7607   ; else if(EXGOpMode == (unsigned short int)(0x0011))  {
00004430  302E FFF4 7608          move.w    -12(A6),D0
00004434  0C40 0011 7609          cmp.w     #17,D0
00004438  6630      7610          bne.s     DisassembleInstruction_163
                    7611   ; InstructionSize = 1;
0000443A  24BC 0000 7612          move.l    #1,(A2)
0000443E  0001      
                    7613   ; sprintf(Instruction, "EXG D%d,A%d", Rx, Ry) ;
00004440  322E FFF2 7614          move.w    -14(A6),D1
00004444  C2BC 0000 7615          and.l     #65535,D1
00004448  FFFF      
0000444A  2F01      7616          move.l    D1,-(A7)
0000444C  322E FFF0 7617          move.w    -16(A6),D1
00004450  C2BC 0000 7618          and.l     #65535,D1
00004454  FFFF      
00004456  2F01      7619          move.l    D1,-(A7)
00004458  4879 0000 7620          pea       @m68kde~1_302.L
0000445C  743E      
0000445E  4879 0803 7621          pea       _Instruction.L
00004462  04E2      
00004464  4E95      7622          jsr       (A5)
00004466  DEFC 0010 7623          add.w     #16,A7
                    7624   DisassembleInstruction_163:
                    7625   ; }
                    7626   ; }
                    7627   ; /////////////////////////////////////////////////////////////////////////////////
                    7628   ; // if instruction is EXT
                    7629   ; /////////////////////////////////////////////////////////////////////////////////
                    7630   ; if((*OpCode & (unsigned short int)(0xFE38)) == (unsigned short int)(0x4800))
0000446A  2042      7631          move.l    D2,A0
0000446C  3010      7632          move.w    (A0),D0
0000446E  C07C FE38 7633          and.w     #65080,D0
00004472  0C40 4800 7634          cmp.w     #18432,D0
00004476  6600 0054 7635          bne       DisassembleInstruction_165
                    7636   ; {
                    7637   ; InstructionSize = 1;
0000447A  24BC 0000 7638          move.l    #1,(A2)
0000447E  0001      
                    7639   ; strcpy(Instruction,"EXT") ;
00004480  4879 0000 7640          pea       @m68kde~1_303.L
00004484  744A      
00004486  4879 0803 7641          pea       _Instruction.L
0000448A  04E2      
0000448C  4EB9 0000 7642          jsr       _strcpy
00004490  5372      
00004492  504F      7643          addq.w    #8,A7
                    7644   ; if((*OpCode & (unsigned short int)(0x00C0)) == (unsigned short int)(0x00C0))
00004494  2042      7645          move.l    D2,A0
00004496  3010      7646          move.w    (A0),D0
00004498  C07C 00C0 7647          and.w     #192,D0
0000449C  0C40 00C0 7648          cmp.w     #192,D0
000044A0  660E      7649          bne.s     DisassembleInstruction_167
                    7650   ; strcatInstruction(".L ") ;
000044A2  4879 0000 7651          pea       @m68kde~1_304.L
000044A6  744E      
000044A8  4EB8 0CCC 7652          jsr       _strcatInstruction
000044AC  584F      7653          addq.w    #4,A7
000044AE  600C      7654          bra.s     DisassembleInstruction_168
                    7655   DisassembleInstruction_167:
                    7656   ; else
                    7657   ; strcatInstruction(".W ") ;
000044B0  4879 0000 7658          pea       @m68kde~1_305.L
000044B4  7452      
000044B6  4EB8 0CCC 7659          jsr       _strcatInstruction
000044BA  584F      7660          addq.w    #4,A7
                    7661   DisassembleInstruction_168:
                    7662   ; Decode6BitEA(OpCode,0,0,0) ;
000044BC  42A7      7663          clr.l     -(A7)
000044BE  42A7      7664          clr.l     -(A7)
000044C0  42A7      7665          clr.l     -(A7)
000044C2  2F02      7666          move.l    D2,-(A7)
000044C4  4EB8 2EBC 7667          jsr       _Decode6BitEA
000044C8  DEFC 0010 7668          add.w     #16,A7
                    7669   DisassembleInstruction_165:
                    7670   ; }
                    7671   ; /////////////////////////////////////////////////////////////////////////////////
                    7672   ; // if instruction is ILLEGAL $4afc
                    7673   ; /////////////////////////////////////////////////////////////////////////////////
                    7674   ; if(*OpCode == (unsigned short int)(0x4AFC)) {
000044CC  2042      7675          move.l    D2,A0
000044CE  3010      7676          move.w    (A0),D0
000044D0  0C40 4AFC 7677          cmp.w     #19196,D0
000044D4  661A      7678          bne.s     DisassembleInstruction_169
                    7679   ; InstructionSize = 1;
000044D6  24BC 0000 7680          move.l    #1,(A2)
000044DA  0001      
                    7681   ; strcpy(Instruction,"ILLEGAL ($4AFC)") ;
000044DC  4879 0000 7682          pea       @m68kde~1_306.L
000044E0  7456      
000044E2  4879 0803 7683          pea       _Instruction.L
000044E6  04E2      
000044E8  4EB9 0000 7684          jsr       _strcpy
000044EC  5372      
000044EE  504F      7685          addq.w    #8,A7
                    7686   DisassembleInstruction_169:
                    7687   ; }
                    7688   ; /////////////////////////////////////////////////////////////////////////////////
                    7689   ; // if instruction is JMP
                    7690   ; /////////////////////////////////////////////////////////////////////////////////
                    7691   ; if((*OpCode & (unsigned short int)(0xFFC0)) == (unsigned short int)(0x4EC0))
000044F0  2042      7692          move.l    D2,A0
000044F2  3010      7693          move.w    (A0),D0
000044F4  C07C FFC0 7694          and.w     #65472,D0
000044F8  0C40 4EC0 7695          cmp.w     #20160,D0
000044FC  662A      7696          bne.s     DisassembleInstruction_171
                    7697   ; {
                    7698   ; InstructionSize = 1;
000044FE  24BC 0000 7699          move.l    #1,(A2)
00004502  0001      
                    7700   ; strcpy(Instruction,"JMP ") ;
00004504  4879 0000 7701          pea       @m68kde~1_307.L
00004508  7466      
0000450A  4879 0803 7702          pea       _Instruction.L
0000450E  04E2      
00004510  4EB9 0000 7703          jsr       _strcpy
00004514  5372      
00004516  504F      7704          addq.w    #8,A7
                    7705   ; Decode6BitEA(OpCode,0,0,0) ;
00004518  42A7      7706          clr.l     -(A7)
0000451A  42A7      7707          clr.l     -(A7)
0000451C  42A7      7708          clr.l     -(A7)
0000451E  2F02      7709          move.l    D2,-(A7)
00004520  4EB8 2EBC 7710          jsr       _Decode6BitEA
00004524  DEFC 0010 7711          add.w     #16,A7
                    7712   DisassembleInstruction_171:
                    7713   ; }
                    7714   ; /////////////////////////////////////////////////////////////////////////////////
                    7715   ; // if instruction is JSR
                    7716   ; /////////////////////////////////////////////////////////////////////////////////
                    7717   ; if((*OpCode & (unsigned short int)(0xFFC0)) == (unsigned short int)(0x4E80))
00004528  2042      7718          move.l    D2,A0
0000452A  3010      7719          move.w    (A0),D0
0000452C  C07C FFC0 7720          and.w     #65472,D0
00004530  0C40 4E80 7721          cmp.w     #20096,D0
00004534  662A      7722          bne.s     DisassembleInstruction_173
                    7723   ; {
                    7724   ; InstructionSize = 1;
00004536  24BC 0000 7725          move.l    #1,(A2)
0000453A  0001      
                    7726   ; strcpy(Instruction,"JSR ") ;
0000453C  4879 0000 7727          pea       @m68kde~1_308.L
00004540  746C      
00004542  4879 0803 7728          pea       _Instruction.L
00004546  04E2      
00004548  4EB9 0000 7729          jsr       _strcpy
0000454C  5372      
0000454E  504F      7730          addq.w    #8,A7
                    7731   ; Decode6BitEA(OpCode,0,0,0) ;
00004550  42A7      7732          clr.l     -(A7)
00004552  42A7      7733          clr.l     -(A7)
00004554  42A7      7734          clr.l     -(A7)
00004556  2F02      7735          move.l    D2,-(A7)
00004558  4EB8 2EBC 7736          jsr       _Decode6BitEA
0000455C  DEFC 0010 7737          add.w     #16,A7
                    7738   DisassembleInstruction_173:
                    7739   ; }
                    7740   ; /////////////////////////////////////////////////////////////////////////////////
                    7741   ; // if instruction is LEA
                    7742   ; /////////////////////////////////////////////////////////////////////////////////
                    7743   ; if((*OpCode & (unsigned short int)(0xF1C0)) == (unsigned short int)(0x41C0))
00004560  2042      7744          move.l    D2,A0
00004562  3010      7745          move.w    (A0),D0
00004564  C07C F1C0 7746          and.w     #61888,D0
00004568  0C40 41C0 7747          cmp.w     #16832,D0
0000456C  6600 0056 7748          bne       DisassembleInstruction_175
                    7749   ; {
                    7750   ; InstructionSize = 1;
00004570  24BC 0000 7751          move.l    #1,(A2)
00004574  0001      
                    7752   ; strcpy(Instruction,"LEA ") ;
00004576  4879 0000 7753          pea       @m68kde~1_309.L
0000457A  7472      
0000457C  4879 0803 7754          pea       _Instruction.L
00004580  04E2      
00004582  4EB9 0000 7755          jsr       _strcpy
00004586  5372      
00004588  504F      7756          addq.w    #8,A7
                    7757   ; Decode6BitEA(OpCode,0,0,0) ;
0000458A  42A7      7758          clr.l     -(A7)
0000458C  42A7      7759          clr.l     -(A7)
0000458E  42A7      7760          clr.l     -(A7)
00004590  2F02      7761          move.l    D2,-(A7)
00004592  4EB8 2EBC 7762          jsr       _Decode6BitEA
00004596  DEFC 0010 7763          add.w     #16,A7
                    7764   ; sprintf(TempString, ",A%d", ((*OpCode >> 9) & (unsigned short int)(0x7)));
0000459A  2042      7765          move.l    D2,A0
0000459C  3210      7766          move.w    (A0),D1
0000459E  E041      7767          asr.w     #8,D1
000045A0  E241      7768          asr.w     #1,D1
000045A2  C27C 0007 7769          and.w     #7,D1
000045A6  C2BC 0000 7770          and.l     #65535,D1
000045AA  FFFF      
000045AC  2F01      7771          move.l    D1,-(A7)
000045AE  4879 0000 7772          pea       @m68kde~1_310.L
000045B2  7478      
000045B4  2F0C      7773          move.l    A4,-(A7)
000045B6  4E95      7774          jsr       (A5)
000045B8  DEFC 000C 7775          add.w     #12,A7
                    7776   ; strcatInstruction(TempString);
000045BC  2F0C      7777          move.l    A4,-(A7)
000045BE  4EB8 0CCC 7778          jsr       _strcatInstruction
000045C2  584F      7779          addq.w    #4,A7
                    7780   DisassembleInstruction_175:
                    7781   ; }
                    7782   ; /////////////////////////////////////////////////////////////////////////////////
                    7783   ; // if instruction is LINK.W
                    7784   ; /////////////////////////////////////////////////////////////////////////////////
                    7785   ; if((*OpCode & (unsigned short int)(0xFFF8)) == (unsigned short int)(0x4E50))
000045C4  2042      7786          move.l    D2,A0
000045C6  3010      7787          move.w    (A0),D0
000045C8  C07C FFF8 7788          and.w     #65528,D0
000045CC  0C40 4E50 7789          cmp.w     #20048,D0
000045D0  6600 0052 7790          bne       DisassembleInstruction_177
                    7791   ; {
                    7792   ; InstructionSize = 1;
000045D4  24BC 0000 7793          move.l    #1,(A2)
000045D8  0001      
                    7794   ; strcpy(Instruction,"LINK ") ;
000045DA  4879 0000 7795          pea       @m68kde~1_311.L
000045DE  747E      
000045E0  4879 0803 7796          pea       _Instruction.L
000045E4  04E2      
000045E6  4EB9 0000 7797          jsr       _strcpy
000045EA  5372      
000045EC  504F      7798          addq.w    #8,A7
                    7799   ; sprintf(TempString, "A%d,#%d", ((*OpCode) & (unsigned short int)(0x7)),OpCode[1]);
000045EE  2042      7800          move.l    D2,A0
000045F0  3228 0002 7801          move.w    2(A0),D1
000045F4  48C1      7802          ext.l     D1
000045F6  2F01      7803          move.l    D1,-(A7)
000045F8  2042      7804          move.l    D2,A0
000045FA  3210      7805          move.w    (A0),D1
000045FC  C27C 0007 7806          and.w     #7,D1
00004600  C2BC 0000 7807          and.l     #65535,D1
00004604  FFFF      
00004606  2F01      7808          move.l    D1,-(A7)
00004608  4879 0000 7809          pea       @m68kde~1_312.L
0000460C  7484      
0000460E  2F0C      7810          move.l    A4,-(A7)
00004610  4E95      7811          jsr       (A5)
00004612  DEFC 0010 7812          add.w     #16,A7
                    7813   ; InstructionSize = 2 ;
00004616  24BC 0000 7814          move.l    #2,(A2)
0000461A  0002      
                    7815   ; strcatInstruction(TempString);
0000461C  2F0C      7816          move.l    A4,-(A7)
0000461E  4EB8 0CCC 7817          jsr       _strcatInstruction
00004622  584F      7818          addq.w    #4,A7
                    7819   DisassembleInstruction_177:
                    7820   ; }
                    7821   ; /////////////////////////////////////////////////////////////////////////////////
                    7822   ; // if instruction is MOVE, MOVEA
                    7823   ; /////////////////////////////////////////////////////////////////////////////////
                    7824   ; if((*OpCode & (unsigned short int)(0xC000)) == (unsigned short int)(0x0000))
00004624  2042      7825          move.l    D2,A0
00004626  3010      7826          move.w    (A0),D0
00004628  C07C C000 7827          and.w     #49152,D0
0000462C  6600 00F0 7828          bne       DisassembleInstruction_193
                    7829   ; {
                    7830   ; Size = (*OpCode & (unsigned short int)(0x3000)) >> 12 ;   // get 2 bit size in bits 13/12 into 1,0
00004630  2042      7831          move.l    D2,A0
00004632  3010      7832          move.w    (A0),D0
00004634  C07C 3000 7833          and.w     #12288,D0
00004638  E048      7834          lsr.w     #8,D0
0000463A  E848      7835          lsr.w     #4,D0
0000463C  3D40 FFE2 7836          move.w    D0,-30(A6)
                    7837   ; OpMode = (*OpCode >> 3) & (unsigned short int)(0x0007);   // get 3 bit source mode operand
00004640  2042      7838          move.l    D2,A0
00004642  3010      7839          move.w    (A0),D0
00004644  E640      7840          asr.w     #3,D0
00004646  C07C 0007 7841          and.w     #7,D0
0000464A  3600      7842          move.w    D0,D3
                    7843   ; SourceReg = (*OpCode) & (unsigned short int)(0x0007);     // get 3 bit source register number
0000464C  2042      7844          move.l    D2,A0
0000464E  3010      7845          move.w    (A0),D0
00004650  C07C 0007 7846          and.w     #7,D0
00004654  3D40 FFF6 7847          move.w    D0,-10(A6)
                    7848   ; DataSize = 0 ;
00004658  7E00      7849          moveq     #0,D7
                    7850   ; // if source addressing mode is d16(a0) or d8(a0,d0)
                    7851   ; if((OpMode == (unsigned short int)(0x0005)) || (OpMode == (unsigned short int)(0x0006)))
0000465A  0C43 0005 7852          cmp.w     #5,D3
0000465E  6706      7853          beq.s     DisassembleInstruction_183
00004660  0C43 0006 7854          cmp.w     #6,D3
00004664  6602      7855          bne.s     DisassembleInstruction_181
                    7856   DisassembleInstruction_183:
                    7857   ; DataSize = 1;  // source operands has 1 word after EA
00004666  7E01      7858          moveq     #1,D7
                    7859   DisassembleInstruction_181:
                    7860   ; // if source addressing mode is a 16 or 32 bit address
                    7861   ; if((OpMode == (unsigned short int)(0x0007))) {
00004668  0C43 0007 7862          cmp.w     #7,D3
0000466C  660C      7863          bne.s     DisassembleInstruction_187
                    7864   ; if(SourceReg == (unsigned short int)(0x0000))         // short address
0000466E  302E FFF6 7865          move.w    -10(A6),D0
00004672  6604      7866          bne.s     DisassembleInstruction_186
                    7867   ; DataSize = 1 ;
00004674  7E01      7868          moveq     #1,D7
00004676  6002      7869          bra.s     DisassembleInstruction_187
                    7870   DisassembleInstruction_186:
                    7871   ; else
                    7872   ; DataSize = 2 ;
00004678  7E02      7873          moveq     #2,D7
                    7874   DisassembleInstruction_187:
                    7875   ; }
                    7876   ; // if source addressing mode is # then figure out size
                    7877   ; if((OpMode == (unsigned short int)(0x0007)) && (SourceReg == (unsigned short int)(0x0004)))    {
0000467A  0C43 0007 7878          cmp.w     #7,D3
0000467E  6624      7879          bne.s     DisassembleInstruction_191
00004680  302E FFF6 7880          move.w    -10(A6),D0
00004684  0C40 0004 7881          cmp.w     #4,D0
00004688  661A      7882          bne.s     DisassembleInstruction_191
                    7883   ; if((Size == (unsigned short int)(1)) || (Size == (unsigned short int)(3)))
0000468A  302E FFE2 7884          move.w    -30(A6),D0
0000468E  0C40 0001 7885          cmp.w     #1,D0
00004692  670A      7886          beq.s     DisassembleInstruction_192
00004694  302E FFE2 7887          move.w    -30(A6),D0
00004698  0C40 0003 7888          cmp.w     #3,D0
0000469C  6604      7889          bne.s     DisassembleInstruction_190
                    7890   DisassembleInstruction_192:
                    7891   ; DataSize = 1;
0000469E  7E01      7892          moveq     #1,D7
000046A0  6002      7893          bra.s     DisassembleInstruction_191
                    7894   DisassembleInstruction_190:
                    7895   ; else
                    7896   ; DataSize = 2 ;
000046A2  7E02      7897          moveq     #2,D7
                    7898   DisassembleInstruction_191:
                    7899   ; //printf("DataSize = %d",DataSize) ;
                    7900   ; }
                    7901   ; if(Size != 0)
000046A4  302E FFE2 7902          move.w    -30(A6),D0
000046A8  6700 0074 7903          beq       DisassembleInstruction_193
                    7904   ; {
                    7905   ; InstructionSize = 1;
000046AC  24BC 0000 7906          move.l    #1,(A2)
000046B0  0001      
                    7907   ; if(Size == 1)
000046B2  302E FFE2 7908          move.w    -30(A6),D0
000046B6  0C40 0001 7909          cmp.w     #1,D0
000046BA  660C      7910          bne.s     DisassembleInstruction_195
                    7911   ; strcpyInstruction("MOVE.B ") ;
000046BC  4879 0000 7912          pea       @m68kde~1_313.L
000046C0  748C      
000046C2  4E93      7913          jsr       (A3)
000046C4  584F      7914          addq.w    #4,A7
000046C6  6020      7915          bra.s     DisassembleInstruction_198
                    7916   DisassembleInstruction_195:
                    7917   ; else if(Size == 2)
000046C8  302E FFE2 7918          move.w    -30(A6),D0
000046CC  0C40 0002 7919          cmp.w     #2,D0
000046D0  660C      7920          bne.s     DisassembleInstruction_197
                    7921   ; strcpyInstruction("MOVE.L ") ;
000046D2  4879 0000 7922          pea       @m68kde~1_314.L
000046D6  7494      
000046D8  4E93      7923          jsr       (A3)
000046DA  584F      7924          addq.w    #4,A7
000046DC  600A      7925          bra.s     DisassembleInstruction_198
                    7926   DisassembleInstruction_197:
                    7927   ; else
                    7928   ; strcpyInstruction("MOVE.W ") ;
000046DE  4879 0000 7929          pea       @m68kde~1_315.L
000046E2  749C      
000046E4  4E93      7930          jsr       (A3)
000046E6  584F      7931          addq.w    #4,A7
                    7932   DisassembleInstruction_198:
                    7933   ; Decode6BitEA(OpCode,0,0,1) ;
000046E8  4878 0001 7934          pea       1
000046EC  42A7      7935          clr.l     -(A7)
000046EE  42A7      7936          clr.l     -(A7)
000046F0  2F02      7937          move.l    D2,-(A7)
000046F2  4EB8 2EBC 7938          jsr       _Decode6BitEA
000046F6  DEFC 0010 7939          add.w     #16,A7
                    7940   ; strcatInstruction(",") ;
000046FA  4879 0000 7941          pea       @m68kde~1_316.L
000046FE  74A4      
00004700  4EB8 0CCC 7942          jsr       _strcatInstruction
00004704  584F      7943          addq.w    #4,A7
                    7944   ; // tell next function how many words lie between opcode and destination, could be 1 or 2 e.g. with # addressing move.bwl #$data,<EA>
                    7945   ; // but subtract 1 to make the maths correct in the called function
                    7946   ; Decode6BitEA(OpCode,2,(DataSize),0) ;
00004706  42A7      7947          clr.l     -(A7)
00004708  CEBC 0000 7948          and.l     #65535,D7
0000470C  FFFF      
0000470E  2F07      7949          move.l    D7,-(A7)
00004710  4878 0002 7950          pea       2
00004714  2F02      7951          move.l    D2,-(A7)
00004716  4EB8 2EBC 7952          jsr       _Decode6BitEA
0000471A  DEFC 0010 7953          add.w     #16,A7
                    7954   DisassembleInstruction_193:
                    7955   ; }
                    7956   ; }
                    7957   ; /////////////////////////////////////////////////////////////////////////////////
                    7958   ; // if instruction is MOVE <EA>,CCR
                    7959   ; /////////////////////////////////////////////////////////////////////////////////
                    7960   ; if((*OpCode & (unsigned short int)(0xFFC0)) == (unsigned short int)(0x44C0))
0000471E  2042      7961          move.l    D2,A0
00004720  3010      7962          move.w    (A0),D0
00004722  C07C FFC0 7963          and.w     #65472,D0
00004726  0C40 44C0 7964          cmp.w     #17600,D0
0000472A  6636      7965          bne.s     DisassembleInstruction_199
                    7966   ; {
                    7967   ; InstructionSize = 1;
0000472C  24BC 0000 7968          move.l    #1,(A2)
00004730  0001      
                    7969   ; strcpy(Instruction,"MOVE ") ;
00004732  4879 0000 7970          pea       @m68kde~1_317.L
00004736  74A6      
00004738  4879 0803 7971          pea       _Instruction.L
0000473C  04E2      
0000473E  4EB9 0000 7972          jsr       _strcpy
00004742  5372      
00004744  504F      7973          addq.w    #8,A7
                    7974   ; Decode6BitEA(OpCode,0,0,0) ;
00004746  42A7      7975          clr.l     -(A7)
00004748  42A7      7976          clr.l     -(A7)
0000474A  42A7      7977          clr.l     -(A7)
0000474C  2F02      7978          move.l    D2,-(A7)
0000474E  4EB8 2EBC 7979          jsr       _Decode6BitEA
00004752  DEFC 0010 7980          add.w     #16,A7
                    7981   ; strcatInstruction(",CCR") ;
00004756  4879 0000 7982          pea       @m68kde~1_318.L
0000475A  74AC      
0000475C  4EB8 0CCC 7983          jsr       _strcatInstruction
00004760  584F      7984          addq.w    #4,A7
                    7985   DisassembleInstruction_199:
                    7986   ; }
                    7987   ; /////////////////////////////////////////////////////////////////////////////////
                    7988   ; // if instruction is MOVE SR,<EA>
                    7989   ; /////////////////////////////////////////////////////////////////////////////////
                    7990   ; if((*OpCode & (unsigned short int)(0xFFC0)) == (unsigned short int)(0x40C0))
00004762  2042      7991          move.l    D2,A0
00004764  3010      7992          move.w    (A0),D0
00004766  C07C FFC0 7993          and.w     #65472,D0
0000476A  0C40 40C0 7994          cmp.w     #16576,D0
0000476E  662A      7995          bne.s     DisassembleInstruction_201
                    7996   ; {
                    7997   ; InstructionSize = 1;
00004770  24BC 0000 7998          move.l    #1,(A2)
00004774  0001      
                    7999   ; strcpy(Instruction,"MOVE SR,") ;
00004776  4879 0000 8000          pea       @m68kde~1_319.L
0000477A  74B2      
0000477C  4879 0803 8001          pea       _Instruction.L
00004780  04E2      
00004782  4EB9 0000 8002          jsr       _strcpy
00004786  5372      
00004788  504F      8003          addq.w    #8,A7
                    8004   ; Decode6BitEA(OpCode,0,0,0) ;
0000478A  42A7      8005          clr.l     -(A7)
0000478C  42A7      8006          clr.l     -(A7)
0000478E  42A7      8007          clr.l     -(A7)
00004790  2F02      8008          move.l    D2,-(A7)
00004792  4EB8 2EBC 8009          jsr       _Decode6BitEA
00004796  DEFC 0010 8010          add.w     #16,A7
                    8011   DisassembleInstruction_201:
                    8012   ; }
                    8013   ; /////////////////////////////////////////////////////////////////////////////////
                    8014   ; // if instruction is MOVE <EA>,SR
                    8015   ; /////////////////////////////////////////////////////////////////////////////////
                    8016   ; if((*OpCode & (unsigned short int)(0xFFC0)) == (unsigned short int)(0x46C0))
0000479A  2042      8017          move.l    D2,A0
0000479C  3010      8018          move.w    (A0),D0
0000479E  C07C FFC0 8019          and.w     #65472,D0
000047A2  0C40 46C0 8020          cmp.w     #18112,D0
000047A6  6636      8021          bne.s     DisassembleInstruction_203
                    8022   ; {
                    8023   ; InstructionSize = 1;
000047A8  24BC 0000 8024          move.l    #1,(A2)
000047AC  0001      
                    8025   ; strcpy(Instruction,"MOVE ") ;
000047AE  4879 0000 8026          pea       @m68kde~1_320.L
000047B2  74BC      
000047B4  4879 0803 8027          pea       _Instruction.L
000047B8  04E2      
000047BA  4EB9 0000 8028          jsr       _strcpy
000047BE  5372      
000047C0  504F      8029          addq.w    #8,A7
                    8030   ; Decode6BitEA(OpCode,0,0,0) ;
000047C2  42A7      8031          clr.l     -(A7)
000047C4  42A7      8032          clr.l     -(A7)
000047C6  42A7      8033          clr.l     -(A7)
000047C8  2F02      8034          move.l    D2,-(A7)
000047CA  4EB8 2EBC 8035          jsr       _Decode6BitEA
000047CE  DEFC 0010 8036          add.w     #16,A7
                    8037   ; strcatInstruction(",SR") ;
000047D2  4879 0000 8038          pea       @m68kde~1_321.L
000047D6  74C2      
000047D8  4EB8 0CCC 8039          jsr       _strcatInstruction
000047DC  584F      8040          addq.w    #4,A7
                    8041   DisassembleInstruction_203:
                    8042   ; }
                    8043   ; /////////////////////////////////////////////////////////////////////////////////
                    8044   ; // if instruction is MOVE USP,An
                    8045   ; /////////////////////////////////////////////////////////////////////////////////
                    8046   ; if((*OpCode & (unsigned short int)(0xFFF0)) == (unsigned short int)(0x4E60))
000047DE  2042      8047          move.l    D2,A0
000047E0  3010      8048          move.w    (A0),D0
000047E2  C07C FFF0 8049          and.w     #65520,D0
000047E6  0C40 4E60 8050          cmp.w     #20064,D0
000047EA  6600 0060 8051          bne       DisassembleInstruction_208
                    8052   ; {
                    8053   ; InstructionSize = 1;
000047EE  24BC 0000 8054          move.l    #1,(A2)
000047F2  0001      
                    8055   ; Register = (*OpCode & (unsigned short int)(0x0007)) ;
000047F4  2042      8056          move.l    D2,A0
000047F6  3010      8057          move.w    (A0),D0
000047F8  C07C 0007 8058          and.w     #7,D0
000047FC  3D40 FFEA 8059          move.w    D0,-22(A6)
                    8060   ; if((*OpCode & (unsigned short int)(0x0008)) == (unsigned short int)(0x0008))        // transfer sp to address regier
00004800  2042      8061          move.l    D2,A0
00004802  3010      8062          move.w    (A0),D0
00004804  C07C 0008 8063          and.w     #8,D0
00004808  0C40 0008 8064          cmp.w     #8,D0
0000480C  6620      8065          bne.s     DisassembleInstruction_207
                    8066   ; sprintf(Instruction, "MOVE USP,A%d", Register);
0000480E  322E FFEA 8067          move.w    -22(A6),D1
00004812  C2BC 0000 8068          and.l     #65535,D1
00004816  FFFF      
00004818  2F01      8069          move.l    D1,-(A7)
0000481A  4879 0000 8070          pea       @m68kde~1_322.L
0000481E  74C6      
00004820  4879 0803 8071          pea       _Instruction.L
00004824  04E2      
00004826  4E95      8072          jsr       (A5)
00004828  DEFC 000C 8073          add.w     #12,A7
0000482C  601E      8074          bra.s     DisassembleInstruction_208
                    8075   DisassembleInstruction_207:
                    8076   ; else
                    8077   ; sprintf(Instruction, "MOVE A%d,USP", Register);
0000482E  322E FFEA 8078          move.w    -22(A6),D1
00004832  C2BC 0000 8079          and.l     #65535,D1
00004836  FFFF      
00004838  2F01      8080          move.l    D1,-(A7)
0000483A  4879 0000 8081          pea       @m68kde~1_323.L
0000483E  74D4      
00004840  4879 0803 8082          pea       _Instruction.L
00004844  04E2      
00004846  4E95      8083          jsr       (A5)
00004848  DEFC 000C 8084          add.w     #12,A7
                    8085   DisassembleInstruction_208:
                    8086   ; }
                    8087   ; /////////////////////////////////////////////////////////////////////////////////
                    8088   ; // if instruction is MOVEM
                    8089   ; /////////////////////////////////////////////////////////////////////////////////
                    8090   ; if((*OpCode & (unsigned short int)(0xFB80)) == (unsigned short int)(0x4880))
0000484C  2042      8091          move.l    D2,A0
0000484E  3010      8092          move.w    (A0),D0
00004850  C07C FB80 8093          and.w     #64384,D0
00004854  0C40 4880 8094          cmp.w     #18560,D0
00004858  6600 01FC 8095          bne       DisassembleInstruction_230
                    8096   ; {
                    8097   ; OpMode = (*OpCode >> 3) & (unsigned short int)(0x0007) ;
0000485C  2042      8098          move.l    D2,A0
0000485E  3010      8099          move.w    (A0),D0
00004860  E640      8100          asr.w     #3,D0
00004862  C07C 0007 8101          and.w     #7,D0
00004866  3600      8102          move.w    D0,D3
                    8103   ; if( (OpMode != (unsigned short int)(0x0)) &&
00004868  4A43      8104          tst.w     D3
0000486A  6700 01EA 8105          beq       DisassembleInstruction_230
0000486E  0C43 0001 8106          cmp.w     #1,D3
00004872  6700 01E2 8107          beq       DisassembleInstruction_230
00004876  4A43      8108          tst.w     D3
00004878  6700 01DC 8109          beq       DisassembleInstruction_230
                    8110   ; (OpMode != (unsigned short int)(0x1)) &&
                    8111   ; (OpMode != (unsigned short int)(0x0)))
                    8112   ; {
                    8113   ; InstructionSize = 1;
0000487C  24BC 0000 8114          move.l    #1,(A2)
00004880  0001      
                    8115   ; strcpy(Instruction,"MOVEM") ;
00004882  4879 0000 8116          pea       @m68kde~1_324.L
00004886  74E2      
00004888  4879 0803 8117          pea       _Instruction.L
0000488C  04E2      
0000488E  4EB9 0000 8118          jsr       _strcpy
00004892  5372      
00004894  504F      8119          addq.w    #8,A7
                    8120   ; InstructionSize ++ ;
00004896  5292      8121          addq.l    #1,(A2)
                    8122   ; if((*OpCode & (unsigned short int)(0x0040)) == (unsigned short int)(0x0))
00004898  2042      8123          move.l    D2,A0
0000489A  3010      8124          move.w    (A0),D0
0000489C  C07C 0040 8125          and.w     #64,D0
000048A0  660E      8126          bne.s     DisassembleInstruction_213
                    8127   ; strcatInstruction(".W ") ;
000048A2  4879 0000 8128          pea       @m68kde~1_325.L
000048A6  74E8      
000048A8  4EB8 0CCC 8129          jsr       _strcatInstruction
000048AC  584F      8130          addq.w    #4,A7
000048AE  600C      8131          bra.s     DisassembleInstruction_214
                    8132   DisassembleInstruction_213:
                    8133   ; else
                    8134   ; strcatInstruction(".L ") ;
000048B0  4879 0000 8135          pea       @m68kde~1_326.L
000048B4  74EC      
000048B6  4EB8 0CCC 8136          jsr       _strcatInstruction
000048BA  584F      8137          addq.w    #4,A7
                    8138   DisassembleInstruction_214:
                    8139   ; // movem  reg,-(An) if bit 10 = 0
                    8140   ; if((*OpCode & (unsigned short int)(0x0400))  == (unsigned short int)(0x0000))
000048BC  2042      8141          move.l    D2,A0
000048BE  3010      8142          move.w    (A0),D0
000048C0  C07C 0400 8143          and.w     #1024,D0
000048C4  6600 00D2 8144          bne       DisassembleInstruction_215
                    8145   ; {
                    8146   ; Mask = 0x8000 ;                     // bit 15 = 1
000048C8  3D7C 8000 8147          move.w    #32768,-2(A6)
000048CC  FFFE      
                    8148   ; DoneSlash = 0 ;
000048CE  4246      8149          clr.w     D6
                    8150   ; for(i = 0; i < 16; i ++)    {
000048D0  4284      8151          clr.l     D4
                    8152   DisassembleInstruction_217:
000048D2  0C84 0000 8153          cmp.l     #16,D4
000048D6  0010      
000048D8  6C00 009E 8154          bge       DisassembleInstruction_219
                    8155   ; printf("") ;    // fixes bug otherwise the address registers doen't get printed (don't know why), something to do with sprintf I guess
000048DC  4879 0000 8156          pea       @m68kde~1_327.L
000048E0  74F0      
000048E2  4EB9 0000 8157          jsr       _printf
000048E6  556E      
000048E8  584F      8158          addq.w    #4,A7
                    8159   ; if((OpCode[1] & Mask) == Mask)    {
000048EA  2042      8160          move.l    D2,A0
000048EC  3028 0002 8161          move.w    2(A0),D0
000048F0  C06E FFFE 8162          and.w     -2(A6),D0
000048F4  B06E FFFE 8163          cmp.w     -2(A6),D0
000048F8  6600 006E 8164          bne       DisassembleInstruction_220
                    8165   ; if(i < 8 )  {
000048FC  0C84 0000 8166          cmp.l     #8,D4
00004900  0008      
00004902  6C2C      8167          bge.s     DisassembleInstruction_222
                    8168   ; if(DoneSlash == 0)  {
00004904  4A46      8169          tst.w     D6
00004906  6614      8170          bne.s     DisassembleInstruction_224
                    8171   ; sprintf(TempString, "D%d", i) ;
00004908  2F04      8172          move.l    D4,-(A7)
0000490A  4879 0000 8173          pea       @m68kde~1_328.L
0000490E  74F2      
00004910  2F0C      8174          move.l    A4,-(A7)
00004912  4E95      8175          jsr       (A5)
00004914  DEFC 000C 8176          add.w     #12,A7
                    8177   ; DoneSlash = 1;
00004918  7C01      8178          moveq     #1,D6
0000491A  6010      8179          bra.s     DisassembleInstruction_225
                    8180   DisassembleInstruction_224:
                    8181   ; }
                    8182   ; else
                    8183   ; sprintf(TempString, "/D%d", i) ;
0000491C  2F04      8184          move.l    D4,-(A7)
0000491E  4879 0000 8185          pea       @m68kde~1_329.L
00004922  74F6      
00004924  2F0C      8186          move.l    A4,-(A7)
00004926  4E95      8187          jsr       (A5)
00004928  DEFC 000C 8188          add.w     #12,A7
                    8189   DisassembleInstruction_225:
0000492C  6000 0032 8190          bra       DisassembleInstruction_227
                    8191   DisassembleInstruction_222:
                    8192   ; }
                    8193   ; else   {
                    8194   ; if(DoneSlash == 0)  {
00004930  4A46      8195          tst.w     D6
00004932  6618      8196          bne.s     DisassembleInstruction_226
                    8197   ; sprintf(TempString, "A%d", i-8) ;
00004934  2204      8198          move.l    D4,D1
00004936  5181      8199          subq.l    #8,D1
00004938  2F01      8200          move.l    D1,-(A7)
0000493A  4879 0000 8201          pea       @m68kde~1_330.L
0000493E  74FC      
00004940  2F0C      8202          move.l    A4,-(A7)
00004942  4E95      8203          jsr       (A5)
00004944  DEFC 000C 8204          add.w     #12,A7
                    8205   ; DoneSlash = 1;
00004948  7C01      8206          moveq     #1,D6
0000494A  6014      8207          bra.s     DisassembleInstruction_227
                    8208   DisassembleInstruction_226:
                    8209   ; }
                    8210   ; else
                    8211   ; sprintf(TempString, "/A%d", i-8) ;
0000494C  2204      8212          move.l    D4,D1
0000494E  5181      8213          subq.l    #8,D1
00004950  2F01      8214          move.l    D1,-(A7)
00004952  4879 0000 8215          pea       @m68kde~1_331.L
00004956  7500      
00004958  2F0C      8216          move.l    A4,-(A7)
0000495A  4E95      8217          jsr       (A5)
0000495C  DEFC 000C 8218          add.w     #12,A7
                    8219   DisassembleInstruction_227:
                    8220   ; }
                    8221   ; strcatInstruction(TempString) ;
00004960  2F0C      8222          move.l    A4,-(A7)
00004962  4EB8 0CCC 8223          jsr       _strcatInstruction
00004966  584F      8224          addq.w    #4,A7
                    8225   DisassembleInstruction_220:
                    8226   ; }
                    8227   ; Mask = Mask >> 1 ;
00004968  302E FFFE 8228          move.w    -2(A6),D0
0000496C  E240      8229          asr.w     #1,D0
0000496E  3D40 FFFE 8230          move.w    D0,-2(A6)
00004972  5284      8231          addq.l    #1,D4
00004974  6000 FF5C 8232          bra       DisassembleInstruction_217
                    8233   DisassembleInstruction_219:
                    8234   ; }
                    8235   ; strcatInstruction(",") ;
00004978  4879 0000 8236          pea       @m68kde~1_332.L
0000497C  7506      
0000497E  4EB8 0CCC 8237          jsr       _strcatInstruction
00004982  584F      8238          addq.w    #4,A7
                    8239   ; Decode6BitEA(OpCode,0,0,0) ;
00004984  42A7      8240          clr.l     -(A7)
00004986  42A7      8241          clr.l     -(A7)
00004988  42A7      8242          clr.l     -(A7)
0000498A  2F02      8243          move.l    D2,-(A7)
0000498C  4EB8 2EBC 8244          jsr       _Decode6BitEA
00004990  DEFC 0010 8245          add.w     #16,A7
00004994  6000 00C0 8246          bra       DisassembleInstruction_230
                    8247   DisassembleInstruction_215:
                    8248   ; }
                    8249   ; //movem  (An)+,reg
                    8250   ; else    {
                    8251   ; Decode6BitEA(OpCode,0,0,0) ;
00004998  42A7      8252          clr.l     -(A7)
0000499A  42A7      8253          clr.l     -(A7)
0000499C  42A7      8254          clr.l     -(A7)
0000499E  2F02      8255          move.l    D2,-(A7)
000049A0  4EB8 2EBC 8256          jsr       _Decode6BitEA
000049A4  DEFC 0010 8257          add.w     #16,A7
                    8258   ; strcatInstruction(",") ;
000049A8  4879 0000 8259          pea       @m68kde~1_333.L
000049AC  7508      
000049AE  4EB8 0CCC 8260          jsr       _strcatInstruction
000049B2  584F      8261          addq.w    #4,A7
                    8262   ; Mask = 0x0001 ;                     // bit 0 = 1
000049B4  3D7C 0001 8263          move.w    #1,-2(A6)
000049B8  FFFE      
                    8264   ; DoneSlash = 0 ;
000049BA  4246      8265          clr.w     D6
                    8266   ; for(i = 0; i < 16 ; i ++)    {
000049BC  4284      8267          clr.l     D4
                    8268   DisassembleInstruction_228:
000049BE  0C84 0000 8269          cmp.l     #16,D4
000049C2  0010      
000049C4  6C00 0090 8270          bge       DisassembleInstruction_230
                    8271   ; if((OpCode[1] & Mask) == Mask)    {
000049C8  2042      8272          move.l    D2,A0
000049CA  3028 0002 8273          move.w    2(A0),D0
000049CE  C06E FFFE 8274          and.w     -2(A6),D0
000049D2  B06E FFFE 8275          cmp.w     -2(A6),D0
000049D6  6600 006E 8276          bne       DisassembleInstruction_231
                    8277   ; if(i < 8)   {       // data registers in bits 7-0
000049DA  0C84 0000 8278          cmp.l     #8,D4
000049DE  0008      
000049E0  6C2C      8279          bge.s     DisassembleInstruction_233
                    8280   ; if(DoneSlash == 0)  {
000049E2  4A46      8281          tst.w     D6
000049E4  6614      8282          bne.s     DisassembleInstruction_235
                    8283   ; sprintf(TempString, "D%d", i) ;
000049E6  2F04      8284          move.l    D4,-(A7)
000049E8  4879 0000 8285          pea       @m68kde~1_334.L
000049EC  750A      
000049EE  2F0C      8286          move.l    A4,-(A7)
000049F0  4E95      8287          jsr       (A5)
000049F2  DEFC 000C 8288          add.w     #12,A7
                    8289   ; DoneSlash = 1;
000049F6  7C01      8290          moveq     #1,D6
000049F8  6010      8291          bra.s     DisassembleInstruction_236
                    8292   DisassembleInstruction_235:
                    8293   ; }
                    8294   ; else
                    8295   ; sprintf(TempString, "/D%d", i) ;
000049FA  2F04      8296          move.l    D4,-(A7)
000049FC  4879 0000 8297          pea       @m68kde~1_335.L
00004A00  750E      
00004A02  2F0C      8298          move.l    A4,-(A7)
00004A04  4E95      8299          jsr       (A5)
00004A06  DEFC 000C 8300          add.w     #12,A7
                    8301   DisassembleInstruction_236:
00004A0A  6000 0032 8302          bra       DisassembleInstruction_238
                    8303   DisassembleInstruction_233:
                    8304   ; }
                    8305   ; else    {
                    8306   ; if(DoneSlash == 0)  {
00004A0E  4A46      8307          tst.w     D6
00004A10  6618      8308          bne.s     DisassembleInstruction_237
                    8309   ; sprintf(TempString, "A%d", i-8) ;
00004A12  2204      8310          move.l    D4,D1
00004A14  5181      8311          subq.l    #8,D1
00004A16  2F01      8312          move.l    D1,-(A7)
00004A18  4879 0000 8313          pea       @m68kde~1_336.L
00004A1C  7514      
00004A1E  2F0C      8314          move.l    A4,-(A7)
00004A20  4E95      8315          jsr       (A5)
00004A22  DEFC 000C 8316          add.w     #12,A7
                    8317   ; DoneSlash = 1;
00004A26  7C01      8318          moveq     #1,D6
00004A28  6014      8319          bra.s     DisassembleInstruction_238
                    8320   DisassembleInstruction_237:
                    8321   ; }
                    8322   ; else
                    8323   ; sprintf(TempString, "/A%d", i-8) ;
00004A2A  2204      8324          move.l    D4,D1
00004A2C  5181      8325          subq.l    #8,D1
00004A2E  2F01      8326          move.l    D1,-(A7)
00004A30  4879 0000 8327          pea       @m68kde~1_337.L
00004A34  7518      
00004A36  2F0C      8328          move.l    A4,-(A7)
00004A38  4E95      8329          jsr       (A5)
00004A3A  DEFC 000C 8330          add.w     #12,A7
                    8331   DisassembleInstruction_238:
                    8332   ; }
                    8333   ; strcatInstruction(TempString) ;
00004A3E  2F0C      8334          move.l    A4,-(A7)
00004A40  4EB8 0CCC 8335          jsr       _strcatInstruction
00004A44  584F      8336          addq.w    #4,A7
                    8337   DisassembleInstruction_231:
                    8338   ; }
                    8339   ; Mask = Mask << 1 ;
00004A46  302E FFFE 8340          move.w    -2(A6),D0
00004A4A  E340      8341          asl.w     #1,D0
00004A4C  3D40 FFFE 8342          move.w    D0,-2(A6)
00004A50  5284      8343          addq.l    #1,D4
00004A52  6000 FF6A 8344          bra       DisassembleInstruction_228
                    8345   DisassembleInstruction_230:
                    8346   ; }
                    8347   ; }
                    8348   ; }
                    8349   ; }
                    8350   ; /////////////////////////////////////////////////////////////////////////////////
                    8351   ; // if instruction is MOVEP
                    8352   ; /////////////////////////////////////////////////////////////////////////////////
                    8353   ; if((*OpCode & (unsigned short int)(0xF038)) == (unsigned short int)(0x0008))
00004A56  2042      8354          move.l    D2,A0
00004A58  3010      8355          move.w    (A0),D0
00004A5A  C07C F038 8356          and.w     #61496,D0
00004A5E  0C40 0008 8357          cmp.w     #8,D0
00004A62  6600 0112 8358          bne       DisassembleInstruction_247
                    8359   ; {
                    8360   ; InstructionSize = 1;
00004A66  24BC 0000 8361          move.l    #1,(A2)
00004A6A  0001      
                    8362   ; DataRegister = (*OpCode >> 9) & (unsigned short int)(0x0007);
00004A6C  2042      8363          move.l    D2,A0
00004A6E  3010      8364          move.w    (A0),D0
00004A70  E040      8365          asr.w     #8,D0
00004A72  E240      8366          asr.w     #1,D0
00004A74  C07C 0007 8367          and.w     #7,D0
00004A78  3A00      8368          move.w    D0,D5
                    8369   ; AddressRegister = (*OpCode & (unsigned short int)(0x0007)) ;
00004A7A  2042      8370          move.l    D2,A0
00004A7C  3010      8371          move.w    (A0),D0
00004A7E  C07C 0007 8372          and.w     #7,D0
00004A82  3D40 FFF8 8373          move.w    D0,-8(A6)
                    8374   ; OpMode = (*OpCode >> 6) & (unsigned short int)(0x0007)  ;
00004A86  2042      8375          move.l    D2,A0
00004A88  3010      8376          move.w    (A0),D0
00004A8A  EC40      8377          asr.w     #6,D0
00004A8C  C07C 0007 8378          and.w     #7,D0
00004A90  3600      8379          move.w    D0,D3
                    8380   ; InstructionSize++ ;
00004A92  5292      8381          addq.l    #1,(A2)
                    8382   ; if(OpMode == (unsigned short int)(0x4)) // transfer word from memory to register
00004A94  0C43 0004 8383          cmp.w     #4,D3
00004A98  6634      8384          bne.s     DisassembleInstruction_241
                    8385   ; sprintf(Instruction, "MOVEP.W $%X(A%d),D%d", OpCode[1], AddressRegister, DataRegister) ;
00004A9A  CABC 0000 8386          and.l     #65535,D5
00004A9E  FFFF      
00004AA0  2F05      8387          move.l    D5,-(A7)
00004AA2  322E FFF8 8388          move.w    -8(A6),D1
00004AA6  C2BC 0000 8389          and.l     #65535,D1
00004AAA  FFFF      
00004AAC  2F01      8390          move.l    D1,-(A7)
00004AAE  2042      8391          move.l    D2,A0
00004AB0  3228 0002 8392          move.w    2(A0),D1
00004AB4  48C1      8393          ext.l     D1
00004AB6  2F01      8394          move.l    D1,-(A7)
00004AB8  4879 0000 8395          pea       @m68kde~1_338.L
00004ABC  751E      
00004ABE  4879 0803 8396          pea       _Instruction.L
00004AC2  04E2      
00004AC4  4E95      8397          jsr       (A5)
00004AC6  DEFC 0014 8398          add.w     #20,A7
00004ACA  6000 00AA 8399          bra       DisassembleInstruction_247
                    8400   DisassembleInstruction_241:
                    8401   ; else if(OpMode == (unsigned short int)(0x5)) // transfer long from memory to register
00004ACE  0C43 0005 8402          cmp.w     #5,D3
00004AD2  6634      8403          bne.s     DisassembleInstruction_243
                    8404   ; sprintf(Instruction, "MOVEP.L $%X(A%d),D%d", OpCode[1], AddressRegister, DataRegister) ;
00004AD4  CABC 0000 8405          and.l     #65535,D5
00004AD8  FFFF      
00004ADA  2F05      8406          move.l    D5,-(A7)
00004ADC  322E FFF8 8407          move.w    -8(A6),D1
00004AE0  C2BC 0000 8408          and.l     #65535,D1
00004AE4  FFFF      
00004AE6  2F01      8409          move.l    D1,-(A7)
00004AE8  2042      8410          move.l    D2,A0
00004AEA  3228 0002 8411          move.w    2(A0),D1
00004AEE  48C1      8412          ext.l     D1
00004AF0  2F01      8413          move.l    D1,-(A7)
00004AF2  4879 0000 8414          pea       @m68kde~1_339.L
00004AF6  7534      
00004AF8  4879 0803 8415          pea       _Instruction.L
00004AFC  04E2      
00004AFE  4E95      8416          jsr       (A5)
00004B00  DEFC 0014 8417          add.w     #20,A7
00004B04  6000 0070 8418          bra       DisassembleInstruction_247
                    8419   DisassembleInstruction_243:
                    8420   ; else if(OpMode == (unsigned short int)(0x6)) // transfer long from register to memory
00004B08  0C43 0006 8421          cmp.w     #6,D3
00004B0C  6632      8422          bne.s     DisassembleInstruction_245
                    8423   ; sprintf(Instruction, "MOVEP.W D%d,$%X(A%d)", DataRegister, OpCode[1], AddressRegister ) ;
00004B0E  322E FFF8 8424          move.w    -8(A6),D1
00004B12  C2BC 0000 8425          and.l     #65535,D1
00004B16  FFFF      
00004B18  2F01      8426          move.l    D1,-(A7)
00004B1A  2042      8427          move.l    D2,A0
00004B1C  3228 0002 8428          move.w    2(A0),D1
00004B20  48C1      8429          ext.l     D1
00004B22  2F01      8430          move.l    D1,-(A7)
00004B24  CABC 0000 8431          and.l     #65535,D5
00004B28  FFFF      
00004B2A  2F05      8432          move.l    D5,-(A7)
00004B2C  4879 0000 8433          pea       @m68kde~1_340.L
00004B30  754A      
00004B32  4879 0803 8434          pea       _Instruction.L
00004B36  04E2      
00004B38  4E95      8435          jsr       (A5)
00004B3A  DEFC 0014 8436          add.w     #20,A7
00004B3E  6036      8437          bra.s     DisassembleInstruction_247
                    8438   DisassembleInstruction_245:
                    8439   ; else if(OpMode == (unsigned short int)(0x7)) // transfer long from register to memory
00004B40  0C43 0007 8440          cmp.w     #7,D3
00004B44  6630      8441          bne.s     DisassembleInstruction_247
                    8442   ; sprintf(Instruction, "MOVEP.L D%d,$%X(A%d)", DataRegister, OpCode[1], AddressRegister ) ;
00004B46  322E FFF8 8443          move.w    -8(A6),D1
00004B4A  C2BC 0000 8444          and.l     #65535,D1
00004B4E  FFFF      
00004B50  2F01      8445          move.l    D1,-(A7)
00004B52  2042      8446          move.l    D2,A0
00004B54  3228 0002 8447          move.w    2(A0),D1
00004B58  48C1      8448          ext.l     D1
00004B5A  2F01      8449          move.l    D1,-(A7)
00004B5C  CABC 0000 8450          and.l     #65535,D5
00004B60  FFFF      
00004B62  2F05      8451          move.l    D5,-(A7)
00004B64  4879 0000 8452          pea       @m68kde~1_341.L
00004B68  7560      
00004B6A  4879 0803 8453          pea       _Instruction.L
00004B6E  04E2      
00004B70  4E95      8454          jsr       (A5)
00004B72  DEFC 0014 8455          add.w     #20,A7
                    8456   DisassembleInstruction_247:
                    8457   ; }
                    8458   ; /////////////////////////////////////////////////////////////////////////////////
                    8459   ; // if instruction is MOVEQ
                    8460   ; /////////////////////////////////////////////////////////////////////////////////
                    8461   ; if((*OpCode & (unsigned short int)(0xF100)) == (unsigned short int)(0x7000))
00004B76  2042      8462          move.l    D2,A0
00004B78  3010      8463          move.w    (A0),D0
00004B7A  C07C F100 8464          and.w     #61696,D0
00004B7E  0C40 7000 8465          cmp.w     #28672,D0
00004B82  6600 0040 8466          bne       DisassembleInstruction_249
                    8467   ; {
                    8468   ; InstructionSize = 1;
00004B86  24BC 0000 8469          move.l    #1,(A2)
00004B8A  0001      
                    8470   ; DataRegister = (*OpCode >> 9) & (unsigned short int)(0x0007) ;
00004B8C  2042      8471          move.l    D2,A0
00004B8E  3010      8472          move.w    (A0),D0
00004B90  E040      8473          asr.w     #8,D0
00004B92  E240      8474          asr.w     #1,D0
00004B94  C07C 0007 8475          and.w     #7,D0
00004B98  3A00      8476          move.w    D0,D5
                    8477   ; sprintf(Instruction, "MOVEQ #$%X,D%d", (*OpCode & (unsigned short int)(0x00FF)), DataRegister) ;
00004B9A  CABC 0000 8478          and.l     #65535,D5
00004B9E  FFFF      
00004BA0  2F05      8479          move.l    D5,-(A7)
00004BA2  2042      8480          move.l    D2,A0
00004BA4  3210      8481          move.w    (A0),D1
00004BA6  C27C 00FF 8482          and.w     #255,D1
00004BAA  C2BC 0000 8483          and.l     #65535,D1
00004BAE  FFFF      
00004BB0  2F01      8484          move.l    D1,-(A7)
00004BB2  4879 0000 8485          pea       @m68kde~1_342.L
00004BB6  7576      
00004BB8  4879 0803 8486          pea       _Instruction.L
00004BBC  04E2      
00004BBE  4E95      8487          jsr       (A5)
00004BC0  DEFC 0010 8488          add.w     #16,A7
                    8489   DisassembleInstruction_249:
                    8490   ; }
                    8491   ; /////////////////////////////////////////////////////////////////////////////////
                    8492   ; // if instruction is MULS.W
                    8493   ; /////////////////////////////////////////////////////////////////////////////////
                    8494   ; if((*OpCode & (unsigned short int)(0xF1C0)) == (unsigned short int)(0xC1C0))
00004BC4  2042      8495          move.l    D2,A0
00004BC6  3010      8496          move.w    (A0),D0
00004BC8  C07C F1C0 8497          and.w     #61888,D0
00004BCC  0C40 C1C0 8498          cmp.w     #49600,D0
00004BD0  6600 004E 8499          bne       DisassembleInstruction_251
                    8500   ; {
                    8501   ; InstructionSize = 1;
00004BD4  24BC 0000 8502          move.l    #1,(A2)
00004BD8  0001      
                    8503   ; DataRegister = (*OpCode >> 9) & (unsigned short int)(0x0007);
00004BDA  2042      8504          move.l    D2,A0
00004BDC  3010      8505          move.w    (A0),D0
00004BDE  E040      8506          asr.w     #8,D0
00004BE0  E240      8507          asr.w     #1,D0
00004BE2  C07C 0007 8508          and.w     #7,D0
00004BE6  3A00      8509          move.w    D0,D5
                    8510   ; strcpyInstruction("MULS ");
00004BE8  4879 0000 8511          pea       @m68kde~1_343.L
00004BEC  7586      
00004BEE  4E93      8512          jsr       (A3)
00004BF0  584F      8513          addq.w    #4,A7
                    8514   ; Decode6BitEA(OpCode,0,0,0) ;
00004BF2  42A7      8515          clr.l     -(A7)
00004BF4  42A7      8516          clr.l     -(A7)
00004BF6  42A7      8517          clr.l     -(A7)
00004BF8  2F02      8518          move.l    D2,-(A7)
00004BFA  4EB8 2EBC 8519          jsr       _Decode6BitEA
00004BFE  DEFC 0010 8520          add.w     #16,A7
                    8521   ; sprintf(TempString, ",D%d", DataRegister) ;
00004C02  CABC 0000 8522          and.l     #65535,D5
00004C06  FFFF      
00004C08  2F05      8523          move.l    D5,-(A7)
00004C0A  4879 0000 8524          pea       @m68kde~1_344.L
00004C0E  758C      
00004C10  2F0C      8525          move.l    A4,-(A7)
00004C12  4E95      8526          jsr       (A5)
00004C14  DEFC 000C 8527          add.w     #12,A7
                    8528   ; strcatInstruction(TempString);
00004C18  2F0C      8529          move.l    A4,-(A7)
00004C1A  4EB8 0CCC 8530          jsr       _strcatInstruction
00004C1E  584F      8531          addq.w    #4,A7
                    8532   DisassembleInstruction_251:
                    8533   ; }
                    8534   ; /////////////////////////////////////////////////////////////////////////////////
                    8535   ; // if instruction is MULU.W
                    8536   ; /////////////////////////////////////////////////////////////////////////////////
                    8537   ; if((*OpCode & (unsigned short int)(0xF1C0)) == (unsigned short int)(0xC0C0))
00004C20  2042      8538          move.l    D2,A0
00004C22  3010      8539          move.w    (A0),D0
00004C24  C07C F1C0 8540          and.w     #61888,D0
00004C28  0C40 C0C0 8541          cmp.w     #49344,D0
00004C2C  6600 004E 8542          bne       DisassembleInstruction_253
                    8543   ; {
                    8544   ; InstructionSize = 1;
00004C30  24BC 0000 8545          move.l    #1,(A2)
00004C34  0001      
                    8546   ; DataRegister = (*OpCode >> 9) & (unsigned short int)(0x0007);
00004C36  2042      8547          move.l    D2,A0
00004C38  3010      8548          move.w    (A0),D0
00004C3A  E040      8549          asr.w     #8,D0
00004C3C  E240      8550          asr.w     #1,D0
00004C3E  C07C 0007 8551          and.w     #7,D0
00004C42  3A00      8552          move.w    D0,D5
                    8553   ; strcpyInstruction("MULU ");
00004C44  4879 0000 8554          pea       @m68kde~1_345.L
00004C48  7592      
00004C4A  4E93      8555          jsr       (A3)
00004C4C  584F      8556          addq.w    #4,A7
                    8557   ; Decode6BitEA(OpCode,0,0,0) ;
00004C4E  42A7      8558          clr.l     -(A7)
00004C50  42A7      8559          clr.l     -(A7)
00004C52  42A7      8560          clr.l     -(A7)
00004C54  2F02      8561          move.l    D2,-(A7)
00004C56  4EB8 2EBC 8562          jsr       _Decode6BitEA
00004C5A  DEFC 0010 8563          add.w     #16,A7
                    8564   ; sprintf(TempString, ",D%d", DataRegister) ;
00004C5E  CABC 0000 8565          and.l     #65535,D5
00004C62  FFFF      
00004C64  2F05      8566          move.l    D5,-(A7)
00004C66  4879 0000 8567          pea       @m68kde~1_346.L
00004C6A  7598      
00004C6C  2F0C      8568          move.l    A4,-(A7)
00004C6E  4E95      8569          jsr       (A5)
00004C70  DEFC 000C 8570          add.w     #12,A7
                    8571   ; strcatInstruction(TempString);
00004C74  2F0C      8572          move.l    A4,-(A7)
00004C76  4EB8 0CCC 8573          jsr       _strcatInstruction
00004C7A  584F      8574          addq.w    #4,A7
                    8575   DisassembleInstruction_253:
                    8576   ; }
                    8577   ; /////////////////////////////////////////////////////////////////////////////////
                    8578   ; // if instruction is NBCD <EA>
                    8579   ; /////////////////////////////////////////////////////////////////////////////////
                    8580   ; if((*OpCode & (unsigned short int)(0xFFC0)) == (unsigned short int)(0x4800))
00004C7C  2042      8581          move.l    D2,A0
00004C7E  3010      8582          move.w    (A0),D0
00004C80  C07C FFC0 8583          and.w     #65472,D0
00004C84  0C40 4800 8584          cmp.w     #18432,D0
00004C88  6620      8585          bne.s     DisassembleInstruction_255
                    8586   ; {
                    8587   ; InstructionSize = 1;
00004C8A  24BC 0000 8588          move.l    #1,(A2)
00004C8E  0001      
                    8589   ; strcpyInstruction("NBCD ");
00004C90  4879 0000 8590          pea       @m68kde~1_347.L
00004C94  759E      
00004C96  4E93      8591          jsr       (A3)
00004C98  584F      8592          addq.w    #4,A7
                    8593   ; Decode6BitEA(OpCode,0,0,0);
00004C9A  42A7      8594          clr.l     -(A7)
00004C9C  42A7      8595          clr.l     -(A7)
00004C9E  42A7      8596          clr.l     -(A7)
00004CA0  2F02      8597          move.l    D2,-(A7)
00004CA2  4EB8 2EBC 8598          jsr       _Decode6BitEA
00004CA6  DEFC 0010 8599          add.w     #16,A7
                    8600   DisassembleInstruction_255:
                    8601   ; }
                    8602   ; /////////////////////////////////////////////////////////////////////////////////
                    8603   ; // if instruction is NEG <EA>
                    8604   ; /////////////////////////////////////////////////////////////////////////////////
                    8605   ; if((*OpCode & (unsigned short int)(0xFF00)) == (unsigned short int)(0x4400))
00004CAA  2042      8606          move.l    D2,A0
00004CAC  3010      8607          move.w    (A0),D0
00004CAE  C07C FF00 8608          and.w     #65280,D0
00004CB2  0C40 4400 8609          cmp.w     #17408,D0
00004CB6  6600 0046 8610          bne       DisassembleInstruction_259
                    8611   ; {
                    8612   ; if(((*OpCode >> 6) & (unsigned short int)(0x0003)) != (unsigned short int)(0x0003))
00004CBA  2042      8613          move.l    D2,A0
00004CBC  3010      8614          move.w    (A0),D0
00004CBE  EC40      8615          asr.w     #6,D0
00004CC0  C07C 0003 8616          and.w     #3,D0
00004CC4  0C40 0003 8617          cmp.w     #3,D0
00004CC8  6700 0034 8618          beq       DisassembleInstruction_259
                    8619   ; {
                    8620   ; InstructionSize = 1;
00004CCC  24BC 0000 8621          move.l    #1,(A2)
00004CD0  0001      
                    8622   ; strcpyInstruction("NEG");
00004CD2  4879 0000 8623          pea       @m68kde~1_348.L
00004CD6  75A4      
00004CD8  4E93      8624          jsr       (A3)
00004CDA  584F      8625          addq.w    #4,A7
                    8626   ; Decode2BitOperandSize(*OpCode) ;
00004CDC  2042      8627          move.l    D2,A0
00004CDE  3210      8628          move.w    (A0),D1
00004CE0  C2BC 0000 8629          and.l     #65535,D1
00004CE4  FFFF      
00004CE6  2F01      8630          move.l    D1,-(A7)
00004CE8  4EB8 2C28 8631          jsr       _Decode2BitOperandSize
00004CEC  584F      8632          addq.w    #4,A7
                    8633   ; Decode6BitEA(OpCode,0,0,0);
00004CEE  42A7      8634          clr.l     -(A7)
00004CF0  42A7      8635          clr.l     -(A7)
00004CF2  42A7      8636          clr.l     -(A7)
00004CF4  2F02      8637          move.l    D2,-(A7)
00004CF6  4EB8 2EBC 8638          jsr       _Decode6BitEA
00004CFA  DEFC 0010 8639          add.w     #16,A7
                    8640   DisassembleInstruction_259:
                    8641   ; }
                    8642   ; }
                    8643   ; /////////////////////////////////////////////////////////////////////////////////
                    8644   ; // if instruction is NEGX <EA>
                    8645   ; /////////////////////////////////////////////////////////////////////////////////
                    8646   ; if((*OpCode & (unsigned short int)(0xFF00)) == (unsigned short int)(0x4000))
00004CFE  2042      8647          move.l    D2,A0
00004D00  3010      8648          move.w    (A0),D0
00004D02  C07C FF00 8649          and.w     #65280,D0
00004D06  0C40 4000 8650          cmp.w     #16384,D0
00004D0A  6600 0046 8651          bne       DisassembleInstruction_263
                    8652   ; {
                    8653   ; if(((*OpCode >> 6) & (unsigned short int)(0x0003)) != (unsigned short int)(0x0003))
00004D0E  2042      8654          move.l    D2,A0
00004D10  3010      8655          move.w    (A0),D0
00004D12  EC40      8656          asr.w     #6,D0
00004D14  C07C 0003 8657          and.w     #3,D0
00004D18  0C40 0003 8658          cmp.w     #3,D0
00004D1C  6700 0034 8659          beq       DisassembleInstruction_263
                    8660   ; {
                    8661   ; InstructionSize = 1;
00004D20  24BC 0000 8662          move.l    #1,(A2)
00004D24  0001      
                    8663   ; strcpyInstruction("NEGX");
00004D26  4879 0000 8664          pea       @m68kde~1_349.L
00004D2A  75A8      
00004D2C  4E93      8665          jsr       (A3)
00004D2E  584F      8666          addq.w    #4,A7
                    8667   ; Decode2BitOperandSize(*OpCode) ;
00004D30  2042      8668          move.l    D2,A0
00004D32  3210      8669          move.w    (A0),D1
00004D34  C2BC 0000 8670          and.l     #65535,D1
00004D38  FFFF      
00004D3A  2F01      8671          move.l    D1,-(A7)
00004D3C  4EB8 2C28 8672          jsr       _Decode2BitOperandSize
00004D40  584F      8673          addq.w    #4,A7
                    8674   ; Decode6BitEA(OpCode,0,0,0);
00004D42  42A7      8675          clr.l     -(A7)
00004D44  42A7      8676          clr.l     -(A7)
00004D46  42A7      8677          clr.l     -(A7)
00004D48  2F02      8678          move.l    D2,-(A7)
00004D4A  4EB8 2EBC 8679          jsr       _Decode6BitEA
00004D4E  DEFC 0010 8680          add.w     #16,A7
                    8681   DisassembleInstruction_263:
                    8682   ; }
                    8683   ; }
                    8684   ; /////////////////////////////////////////////////////////////////////////////////
                    8685   ; // if instruction is NOP
                    8686   ; /////////////////////////////////////////////////////////////////////////////////
                    8687   ; if(*OpCode == (unsigned short int)(0x4E71))
00004D52  2042      8688          move.l    D2,A0
00004D54  3010      8689          move.w    (A0),D0
00004D56  0C40 4E71 8690          cmp.w     #20081,D0
00004D5A  6610      8691          bne.s     DisassembleInstruction_265
                    8692   ; {
                    8693   ; InstructionSize = 1;
00004D5C  24BC 0000 8694          move.l    #1,(A2)
00004D60  0001      
                    8695   ; strcpyInstruction("NOP");
00004D62  4879 0000 8696          pea       @m68kde~1_350.L
00004D66  75AE      
00004D68  4E93      8697          jsr       (A3)
00004D6A  584F      8698          addq.w    #4,A7
                    8699   DisassembleInstruction_265:
                    8700   ; }
                    8701   ; /////////////////////////////////////////////////////////////////////////////////
                    8702   ; // if instruction is NOT <EA>
                    8703   ; /////////////////////////////////////////////////////////////////////////////////
                    8704   ; if((*OpCode & (unsigned short int)(0xFF00)) == (unsigned short int)(0x4600))
00004D6C  2042      8705          move.l    D2,A0
00004D6E  3010      8706          move.w    (A0),D0
00004D70  C07C FF00 8707          and.w     #65280,D0
00004D74  0C40 4600 8708          cmp.w     #17920,D0
00004D78  6600 0046 8709          bne       DisassembleInstruction_269
                    8710   ; {
                    8711   ; if(((*OpCode >> 6) & (unsigned short int)(0x0003)) != (unsigned short int)(0x0003))
00004D7C  2042      8712          move.l    D2,A0
00004D7E  3010      8713          move.w    (A0),D0
00004D80  EC40      8714          asr.w     #6,D0
00004D82  C07C 0003 8715          and.w     #3,D0
00004D86  0C40 0003 8716          cmp.w     #3,D0
00004D8A  6700 0034 8717          beq       DisassembleInstruction_269
                    8718   ; {
                    8719   ; InstructionSize = 1;
00004D8E  24BC 0000 8720          move.l    #1,(A2)
00004D92  0001      
                    8721   ; strcpyInstruction("NOT");
00004D94  4879 0000 8722          pea       @m68kde~1_351.L
00004D98  75B2      
00004D9A  4E93      8723          jsr       (A3)
00004D9C  584F      8724          addq.w    #4,A7
                    8725   ; Decode2BitOperandSize(*OpCode) ;
00004D9E  2042      8726          move.l    D2,A0
00004DA0  3210      8727          move.w    (A0),D1
00004DA2  C2BC 0000 8728          and.l     #65535,D1
00004DA6  FFFF      
00004DA8  2F01      8729          move.l    D1,-(A7)
00004DAA  4EB8 2C28 8730          jsr       _Decode2BitOperandSize
00004DAE  584F      8731          addq.w    #4,A7
                    8732   ; Decode6BitEA(OpCode,0,0,0);
00004DB0  42A7      8733          clr.l     -(A7)
00004DB2  42A7      8734          clr.l     -(A7)
00004DB4  42A7      8735          clr.l     -(A7)
00004DB6  2F02      8736          move.l    D2,-(A7)
00004DB8  4EB8 2EBC 8737          jsr       _Decode6BitEA
00004DBC  DEFC 0010 8738          add.w     #16,A7
                    8739   DisassembleInstruction_269:
                    8740   ; }
                    8741   ; }
                    8742   ; /////////////////////////////////////////////////////////////////////////////////
                    8743   ; // if instruction is OR <EA>,Dn or OR Dn,<EA>
                    8744   ; /////////////////////////////////////////////////////////////////////////////////
                    8745   ; if((*OpCode & (unsigned short int)(0xF000)) == (unsigned short int)(0x8000))
00004DC0  2042      8746          move.l    D2,A0
00004DC2  3010      8747          move.w    (A0),D0
00004DC4  C07C F000 8748          and.w     #61440,D0
00004DC8  0C40 8000 8749          cmp.w     #32768,D0
00004DCC  6600 0038 8750          bne       DisassembleInstruction_273
                    8751   ; {
                    8752   ; OpMode = (*OpCode >> 6) & (unsigned short int)(0x0007) ;
00004DD0  2042      8753          move.l    D2,A0
00004DD2  3010      8754          move.w    (A0),D0
00004DD4  EC40      8755          asr.w     #6,D0
00004DD6  C07C 0007 8756          and.w     #7,D0
00004DDA  3600      8757          move.w    D0,D3
                    8758   ; if( (OpMode <= (unsigned short int)(0x0002)) ||
00004DDC  0C43 0002 8759          cmp.w     #2,D3
00004DE0  630C      8760          bls.s     DisassembleInstruction_275
00004DE2  0C43 0004 8761          cmp.w     #4,D3
00004DE6  651E      8762          blo.s     DisassembleInstruction_273
00004DE8  0C43 0006 8763          cmp.w     #6,D3
00004DEC  6218      8764          bhi.s     DisassembleInstruction_273
                    8765   DisassembleInstruction_275:
                    8766   ; ((OpMode >= (unsigned short int)(0x0004)) && (OpMode <= (unsigned short int)(0x0006))))
                    8767   ; {
                    8768   ; InstructionSize = 1;
00004DEE  24BC 0000 8769          move.l    #1,(A2)
00004DF2  0001      
                    8770   ; strcpyInstruction("OR") ;
00004DF4  4879 0000 8771          pea       @m68kde~1_352.L
00004DF8  75B6      
00004DFA  4E93      8772          jsr       (A3)
00004DFC  584F      8773          addq.w    #4,A7
                    8774   ; Decode3BitOperandMode(OpCode) ;
00004DFE  2F02      8775          move.l    D2,-(A7)
00004E00  4EB8 32E4 8776          jsr       _Decode3BitOperandMode
00004E04  584F      8777          addq.w    #4,A7
                    8778   DisassembleInstruction_273:
                    8779   ; }
                    8780   ; }
                    8781   ; /////////////////////////////////////////////////////////////////////////////////
                    8782   ; // if instruction is ORI to CCR
                    8783   ; /////////////////////////////////////////////////////////////////////////////////
                    8784   ; if(*OpCode == (unsigned short int)(0x003C))   {
00004E06  2042      8785          move.l    D2,A0
00004E08  3010      8786          move.w    (A0),D0
00004E0A  0C40 003C 8787          cmp.w     #60,D0
00004E0E  662A      8788          bne.s     DisassembleInstruction_276
                    8789   ; sprintf(Instruction, "ORI #$%2X,CCR", OpCode[1] & (unsigned short int)(0x00FF)) ;
00004E10  2042      8790          move.l    D2,A0
00004E12  3228 0002 8791          move.w    2(A0),D1
00004E16  C27C 00FF 8792          and.w     #255,D1
00004E1A  C2BC 0000 8793          and.l     #65535,D1
00004E1E  FFFF      
00004E20  2F01      8794          move.l    D1,-(A7)
00004E22  4879 0000 8795          pea       @m68kde~1_353.L
00004E26  75BA      
00004E28  4879 0803 8796          pea       _Instruction.L
00004E2C  04E2      
00004E2E  4E95      8797          jsr       (A5)
00004E30  DEFC 000C 8798          add.w     #12,A7
                    8799   ; InstructionSize = 2;
00004E34  24BC 0000 8800          move.l    #2,(A2)
00004E38  0002      
                    8801   DisassembleInstruction_276:
                    8802   ; }
                    8803   ; /////////////////////////////////////////////////////////////////////////////////
                    8804   ; // if instruction is ORI #data,SR
                    8805   ; /////////////////////////////////////////////////////////////////////////////////
                    8806   ; if(*OpCode  == (unsigned short int)(0x007c))
00004E3A  2042      8807          move.l    D2,A0
00004E3C  3010      8808          move.w    (A0),D0
00004E3E  0C40 007C 8809          cmp.w     #124,D0
00004E42  6622      8810          bne.s     DisassembleInstruction_278
                    8811   ; {
                    8812   ; InstructionSize = 2;
00004E44  24BC 0000 8813          move.l    #2,(A2)
00004E48  0002      
                    8814   ; sprintf(Instruction, "ORI  #$%X,SR", OpCode[1]);
00004E4A  2042      8815          move.l    D2,A0
00004E4C  3228 0002 8816          move.w    2(A0),D1
00004E50  48C1      8817          ext.l     D1
00004E52  2F01      8818          move.l    D1,-(A7)
00004E54  4879 0000 8819          pea       @m68kde~1_354.L
00004E58  75C8      
00004E5A  4879 0803 8820          pea       _Instruction.L
00004E5E  04E2      
00004E60  4E95      8821          jsr       (A5)
00004E62  DEFC 000C 8822          add.w     #12,A7
                    8823   DisassembleInstruction_278:
                    8824   ; }
                    8825   ; /////////////////////////////////////////////////////////////////////////////////
                    8826   ; // if instruction is PEA
                    8827   ; /////////////////////////////////////////////////////////////////////////////////
                    8828   ; if((*OpCode & (unsigned short int)(0xFFC0)) == (unsigned short int)(0x4840))
00004E66  2042      8829          move.l    D2,A0
00004E68  3010      8830          move.w    (A0),D0
00004E6A  C07C FFC0 8831          and.w     #65472,D0
00004E6E  0C40 4840 8832          cmp.w     #18496,D0
00004E72  6620      8833          bne.s     DisassembleInstruction_280
                    8834   ; {
                    8835   ; InstructionSize = 1;
00004E74  24BC 0000 8836          move.l    #1,(A2)
00004E78  0001      
                    8837   ; strcpyInstruction("PEA ");
00004E7A  4879 0000 8838          pea       @m68kde~1_355.L
00004E7E  75D6      
00004E80  4E93      8839          jsr       (A3)
00004E82  584F      8840          addq.w    #4,A7
                    8841   ; Decode6BitEA(OpCode,0,0,0);
00004E84  42A7      8842          clr.l     -(A7)
00004E86  42A7      8843          clr.l     -(A7)
00004E88  42A7      8844          clr.l     -(A7)
00004E8A  2F02      8845          move.l    D2,-(A7)
00004E8C  4EB8 2EBC 8846          jsr       _Decode6BitEA
00004E90  DEFC 0010 8847          add.w     #16,A7
                    8848   DisassembleInstruction_280:
                    8849   ; }
                    8850   ; /////////////////////////////////////////////////////////////////////////////////
                    8851   ; // if instruction is reset
                    8852   ; /////////////////////////////////////////////////////////////////////////////////
                    8853   ; if(*OpCode  == (unsigned short int)(0x4E70))
00004E94  2042      8854          move.l    D2,A0
00004E96  3010      8855          move.w    (A0),D0
00004E98  0C40 4E70 8856          cmp.w     #20080,D0
00004E9C  6616      8857          bne.s     DisassembleInstruction_282
                    8858   ; {
                    8859   ; InstructionSize = 1;
00004E9E  24BC 0000 8860          move.l    #1,(A2)
00004EA2  0001      
                    8861   ; sprintf(Instruction, "RESET");
00004EA4  4879 0000 8862          pea       @m68kde~1_356.L
00004EA8  75DC      
00004EAA  4879 0803 8863          pea       _Instruction.L
00004EAE  04E2      
00004EB0  4E95      8864          jsr       (A5)
00004EB2  504F      8865          addq.w    #8,A7
                    8866   DisassembleInstruction_282:
                    8867   ; }
                    8868   ; /////////////////////////////////////////////////////////////////////////////////
                    8869   ; // if instruction is RTE
                    8870   ; /////////////////////////////////////////////////////////////////////////////////
                    8871   ; if(*OpCode  == (unsigned short int)(0x4E73))
00004EB4  2042      8872          move.l    D2,A0
00004EB6  3010      8873          move.w    (A0),D0
00004EB8  0C40 4E73 8874          cmp.w     #20083,D0
00004EBC  6616      8875          bne.s     DisassembleInstruction_284
                    8876   ; {
                    8877   ; InstructionSize = 1;
00004EBE  24BC 0000 8878          move.l    #1,(A2)
00004EC2  0001      
                    8879   ; sprintf(Instruction, "RTE");
00004EC4  4879 0000 8880          pea       @m68kde~1_357.L
00004EC8  75E2      
00004ECA  4879 0803 8881          pea       _Instruction.L
00004ECE  04E2      
00004ED0  4E95      8882          jsr       (A5)
00004ED2  504F      8883          addq.w    #8,A7
                    8884   DisassembleInstruction_284:
                    8885   ; }
                    8886   ; /////////////////////////////////////////////////////////////////////////////////
                    8887   ; // if instruction is RTR
                    8888   ; /////////////////////////////////////////////////////////////////////////////////
                    8889   ; if(*OpCode == (unsigned short int)(0x4E77))
00004ED4  2042      8890          move.l    D2,A0
00004ED6  3010      8891          move.w    (A0),D0
00004ED8  0C40 4E77 8892          cmp.w     #20087,D0
00004EDC  6610      8893          bne.s     DisassembleInstruction_286
                    8894   ; {
                    8895   ; InstructionSize = 1;
00004EDE  24BC 0000 8896          move.l    #1,(A2)
00004EE2  0001      
                    8897   ; strcpyInstruction("RTR");
00004EE4  4879 0000 8898          pea       @m68kde~1_358.L
00004EE8  75E6      
00004EEA  4E93      8899          jsr       (A3)
00004EEC  584F      8900          addq.w    #4,A7
                    8901   DisassembleInstruction_286:
                    8902   ; }
                    8903   ; /////////////////////////////////////////////////////////////////////////////////
                    8904   ; // if instruction is RTS
                    8905   ; /////////////////////////////////////////////////////////////////////////////////
                    8906   ; if(*OpCode == (unsigned short int)(0x4E75))
00004EEE  2042      8907          move.l    D2,A0
00004EF0  3010      8908          move.w    (A0),D0
00004EF2  0C40 4E75 8909          cmp.w     #20085,D0
00004EF6  6610      8910          bne.s     DisassembleInstruction_288
                    8911   ; {
                    8912   ; InstructionSize = 1;
00004EF8  24BC 0000 8913          move.l    #1,(A2)
00004EFC  0001      
                    8914   ; strcpyInstruction("RTS");
00004EFE  4879 0000 8915          pea       @m68kde~1_359.L
00004F02  75EA      
00004F04  4E93      8916          jsr       (A3)
00004F06  584F      8917          addq.w    #4,A7
                    8918   DisassembleInstruction_288:
                    8919   ; }
                    8920   ; /////////////////////////////////////////////////////////////////////////////////
                    8921   ; // if instruction is STOP
                    8922   ; /////////////////////////////////////////////////////////////////////////////////
                    8923   ; if(*OpCode  == (unsigned short int)(0x4E72))
00004F08  2042      8924          move.l    D2,A0
00004F0A  3010      8925          move.w    (A0),D0
00004F0C  0C40 4E72 8926          cmp.w     #20082,D0
00004F10  6622      8927          bne.s     DisassembleInstruction_290
                    8928   ; {
                    8929   ; InstructionSize = 2;
00004F12  24BC 0000 8930          move.l    #2,(A2)
00004F16  0002      
                    8931   ; sprintf(Instruction, "STOP #$%X", OpCode[1]);
00004F18  2042      8932          move.l    D2,A0
00004F1A  3228 0002 8933          move.w    2(A0),D1
00004F1E  48C1      8934          ext.l     D1
00004F20  2F01      8935          move.l    D1,-(A7)
00004F22  4879 0000 8936          pea       @m68kde~1_360.L
00004F26  75EE      
00004F28  4879 0803 8937          pea       _Instruction.L
00004F2C  04E2      
00004F2E  4E95      8938          jsr       (A5)
00004F30  DEFC 000C 8939          add.w     #12,A7
                    8940   DisassembleInstruction_290:
                    8941   ; }
                    8942   ; /////////////////////////////////////////////////////////////////////////////////
                    8943   ; // if instruction is SBCD
                    8944   ; /////////////////////////////////////////////////////////////////////////////////
                    8945   ; if((*OpCode & (unsigned short int)(0xF1F0 )) == (unsigned short int)(0x8100))
00004F34  2042      8946          move.l    D2,A0
00004F36  3010      8947          move.w    (A0),D0
00004F38  C07C F1F0 8948          and.w     #61936,D0
00004F3C  0C40 8100 8949          cmp.w     #33024,D0
00004F40  6600 0092 8950          bne       DisassembleInstruction_295
                    8951   ; {
                    8952   ; InstructionSize = 1;
00004F44  24BC 0000 8953          move.l    #1,(A2)
00004F48  0001      
                    8954   ; DestBits = (*OpCode >> 9) & (unsigned short int )(0x0007) ;
00004F4A  2042      8955          move.l    D2,A0
00004F4C  3010      8956          move.w    (A0),D0
00004F4E  E040      8957          asr.w     #8,D0
00004F50  E240      8958          asr.w     #1,D0
00004F52  C07C 0007 8959          and.w     #7,D0
00004F56  3D40 FFE0 8960          move.w    D0,-32(A6)
                    8961   ; SourceBits = (*OpCode & (unsigned short int )(0x0007));
00004F5A  2042      8962          move.l    D2,A0
00004F5C  3010      8963          move.w    (A0),D0
00004F5E  C07C 0007 8964          and.w     #7,D0
00004F62  3D40 FFDE 8965          move.w    D0,-34(A6)
                    8966   ; Mode = (*OpCode >> 3) & (unsigned short int )(0x0001) ;
00004F66  2042      8967          move.l    D2,A0
00004F68  3010      8968          move.w    (A0),D0
00004F6A  E640      8969          asr.w     #3,D0
00004F6C  48C0      8970          ext.l     D0
00004F6E  C0BC 0000 8971          and.l     #1,D0
00004F72  0001      
00004F74  2D40 FFE4 8972          move.l    D0,-28(A6)
                    8973   ; if(Mode == 0)
00004F78  202E FFE4 8974          move.l    -28(A6),D0
00004F7C  662C      8975          bne.s     DisassembleInstruction_294
                    8976   ; sprintf(Instruction, "SBCD D%d,D%d", SourceBits, DestBits) ;
00004F7E  322E FFE0 8977          move.w    -32(A6),D1
00004F82  C2BC 0000 8978          and.l     #65535,D1
00004F86  FFFF      
00004F88  2F01      8979          move.l    D1,-(A7)
00004F8A  322E FFDE 8980          move.w    -34(A6),D1
00004F8E  C2BC 0000 8981          and.l     #65535,D1
00004F92  FFFF      
00004F94  2F01      8982          move.l    D1,-(A7)
00004F96  4879 0000 8983          pea       @m68kde~1_361.L
00004F9A  75F8      
00004F9C  4879 0803 8984          pea       _Instruction.L
00004FA0  04E2      
00004FA2  4E95      8985          jsr       (A5)
00004FA4  DEFC 0010 8986          add.w     #16,A7
00004FA8  602A      8987          bra.s     DisassembleInstruction_295
                    8988   DisassembleInstruction_294:
                    8989   ; else
                    8990   ; sprintf(Instruction, "SBCD -(A%d),-(A%d)", SourceBits, DestBits) ;
00004FAA  322E FFE0 8991          move.w    -32(A6),D1
00004FAE  C2BC 0000 8992          and.l     #65535,D1
00004FB2  FFFF      
00004FB4  2F01      8993          move.l    D1,-(A7)
00004FB6  322E FFDE 8994          move.w    -34(A6),D1
00004FBA  C2BC 0000 8995          and.l     #65535,D1
00004FBE  FFFF      
00004FC0  2F01      8996          move.l    D1,-(A7)
00004FC2  4879 0000 8997          pea       @m68kde~1_362.L
00004FC6  7606      
00004FC8  4879 0803 8998          pea       _Instruction.L
00004FCC  04E2      
00004FCE  4E95      8999          jsr       (A5)
00004FD0  DEFC 0010 9000          add.w     #16,A7
                    9001   DisassembleInstruction_295:
                    9002   ; }
                    9003   ; /////////////////////////////////////////////////////////////////////////////////
                    9004   ; // if instruction is Scc
                    9005   ; /////////////////////////////////////////////////////////////////////////////////
                    9006   ; if((*OpCode & (unsigned short int)(0xF0C0 )) == (unsigned short int)(0x50C0))
00004FD4  2042      9007          move.l    D2,A0
00004FD6  3010      9008          move.w    (A0),D0
00004FD8  C07C F0C0 9009          and.w     #61632,D0
00004FDC  0C40 50C0 9010          cmp.w     #20672,D0
00004FE0  6600 0060 9011          bne       DisassembleInstruction_298
                    9012   ; {
                    9013   ; EAMode = (*OpCode >> 3) & (unsigned short int)(0x0007) ;    // mode cannot be 1 for Scc as it it used by DBcc instruction as a differentiator
00004FE4  2042      9014          move.l    D2,A0
00004FE6  3010      9015          move.w    (A0),D0
00004FE8  E640      9016          asr.w     #3,D0
00004FEA  C07C 0007 9017          and.w     #7,D0
00004FEE  3D40 FFEC 9018          move.w    D0,-20(A6)
                    9019   ; if(EAMode != (unsigned short int)(0x0001))
00004FF2  302E FFEC 9020          move.w    -20(A6),D0
00004FF6  0C40 0001 9021          cmp.w     #1,D0
00004FFA  6700 0046 9022          beq       DisassembleInstruction_298
                    9023   ; {
                    9024   ; InstructionSize = 1;
00004FFE  24BC 0000 9025          move.l    #1,(A2)
00005002  0001      
                    9026   ; Condition = ((*OpCode >> 8) & (unsigned short int)(0xF)) ;
00005004  2042      9027          move.l    D2,A0
00005006  3010      9028          move.w    (A0),D0
00005008  E040      9029          asr.w     #8,D0
0000500A  C07C 000F 9030          and.w     #15,D0
0000500E  1D40 FFE9 9031          move.b    D0,-23(A6)
                    9032   ; strcpyInstruction("S") ;
00005012  4879 0000 9033          pea       @m68kde~1_363.L
00005016  761A      
00005018  4E93      9034          jsr       (A3)
0000501A  584F      9035          addq.w    #4,A7
                    9036   ; DecodeBranchCondition(Condition) ;
0000501C  122E FFE9 9037          move.b    -23(A6),D1
00005020  C27C 00FF 9038          and.w     #255,D1
00005024  C2BC 0000 9039          and.l     #65535,D1
00005028  FFFF      
0000502A  2F01      9040          move.l    D1,-(A7)
0000502C  4EB8 337A 9041          jsr       _DecodeBranchCondition
00005030  584F      9042          addq.w    #4,A7
                    9043   ; Decode6BitEA(OpCode,0,0,0);
00005032  42A7      9044          clr.l     -(A7)
00005034  42A7      9045          clr.l     -(A7)
00005036  42A7      9046          clr.l     -(A7)
00005038  2F02      9047          move.l    D2,-(A7)
0000503A  4EB8 2EBC 9048          jsr       _Decode6BitEA
0000503E  DEFC 0010 9049          add.w     #16,A7
                    9050   DisassembleInstruction_298:
                    9051   ; }
                    9052   ; }
                    9053   ; /////////////////////////////////////////////////////////////////////////////////
                    9054   ; // if instruction is SUB or SUBA
                    9055   ; /////////////////////////////////////////////////////////////////////////////////
                    9056   ; if((*OpCode & (unsigned short int)(0xF000 )) == (unsigned short int)(0x9000))   {
00005042  2042      9057          move.l    D2,A0
00005044  3010      9058          move.w    (A0),D0
00005046  C07C F000 9059          and.w     #61440,D0
0000504A  0C40 9000 9060          cmp.w     #36864,D0
0000504E  6600 008C 9061          bne       DisassembleInstruction_303
                    9062   ; OpMode = ((*OpCode >> 6) & (unsigned short int)(0x0007)) ;
00005052  2042      9063          move.l    D2,A0
00005054  3010      9064          move.w    (A0),D0
00005056  EC40      9065          asr.w     #6,D0
00005058  C07C 0007 9066          and.w     #7,D0
0000505C  3600      9067          move.w    D0,D3
                    9068   ; InstructionSize = 1;
0000505E  24BC 0000 9069          move.l    #1,(A2)
00005062  0001      
                    9070   ; if((OpMode == (unsigned short int)(0x0003)) || (OpMode == (unsigned short int)(0x0007)))      // if destination is an address register then use ADDA otherwise use ADD
00005064  0C43 0003 9071          cmp.w     #3,D3
00005068  6708      9072          beq.s     DisassembleInstruction_304
0000506A  0C43 0007 9073          cmp.w     #7,D3
0000506E  6600 005A 9074          bne       DisassembleInstruction_302
                    9075   DisassembleInstruction_304:
                    9076   ; {
                    9077   ; if(OpMode == (unsigned short int)(0x0003))
00005072  0C43 0003 9078          cmp.w     #3,D3
00005076  660C      9079          bne.s     DisassembleInstruction_305
                    9080   ; strcpyInstruction("SUBA.W ") ;
00005078  4879 0000 9081          pea       @m68kde~1_364.L
0000507C  761C      
0000507E  4E93      9082          jsr       (A3)
00005080  584F      9083          addq.w    #4,A7
00005082  600A      9084          bra.s     DisassembleInstruction_306
                    9085   DisassembleInstruction_305:
                    9086   ; else
                    9087   ; strcpyInstruction("SUBA.L ") ;
00005084  4879 0000 9088          pea       @m68kde~1_365.L
00005088  7624      
0000508A  4E93      9089          jsr       (A3)
0000508C  584F      9090          addq.w    #4,A7
                    9091   DisassembleInstruction_306:
                    9092   ; Decode6BitEA(OpCode,0,0,0)  ;
0000508E  42A7      9093          clr.l     -(A7)
00005090  42A7      9094          clr.l     -(A7)
00005092  42A7      9095          clr.l     -(A7)
00005094  2F02      9096          move.l    D2,-(A7)
00005096  4EB8 2EBC 9097          jsr       _Decode6BitEA
0000509A  DEFC 0010 9098          add.w     #16,A7
                    9099   ; sprintf(TempString, ",A%X", (*OpCode >> 9) & (unsigned short int)(0x0007)) ;
0000509E  2042      9100          move.l    D2,A0
000050A0  3210      9101          move.w    (A0),D1
000050A2  E041      9102          asr.w     #8,D1
000050A4  E241      9103          asr.w     #1,D1
000050A6  C27C 0007 9104          and.w     #7,D1
000050AA  C2BC 0000 9105          and.l     #65535,D1
000050AE  FFFF      
000050B0  2F01      9106          move.l    D1,-(A7)
000050B2  4879 0000 9107          pea       @m68kde~1_366.L
000050B6  762C      
000050B8  2F0C      9108          move.l    A4,-(A7)
000050BA  4E95      9109          jsr       (A5)
000050BC  DEFC 000C 9110          add.w     #12,A7
                    9111   ; strcatInstruction(TempString) ;
000050C0  2F0C      9112          move.l    A4,-(A7)
000050C2  4EB8 0CCC 9113          jsr       _strcatInstruction
000050C6  584F      9114          addq.w    #4,A7
000050C8  6012      9115          bra.s     DisassembleInstruction_303
                    9116   DisassembleInstruction_302:
                    9117   ; }
                    9118   ; else {
                    9119   ; strcpyInstruction("SUB") ;
000050CA  4879 0000 9120          pea       @m68kde~1_367.L
000050CE  7632      
000050D0  4E93      9121          jsr       (A3)
000050D2  584F      9122          addq.w    #4,A7
                    9123   ; Decode3BitOperandMode(OpCode) ;
000050D4  2F02      9124          move.l    D2,-(A7)
000050D6  4EB8 32E4 9125          jsr       _Decode3BitOperandMode
000050DA  584F      9126          addq.w    #4,A7
                    9127   DisassembleInstruction_303:
                    9128   ; }
                    9129   ; }
                    9130   ; /////////////////////////////////////////////////////////////////////////////////
                    9131   ; // if instruction is SUBQ
                    9132   ; /////////////////////////////////////////////////////////////////////////////////
                    9133   ; if((*OpCode & (unsigned short int)(0xF100 )) == (unsigned short int)(0x5100))
000050DC  2042      9134          move.l    D2,A0
000050DE  3010      9135          move.w    (A0),D0
000050E0  C07C F100 9136          and.w     #61696,D0
000050E4  0C40 5100 9137          cmp.w     #20736,D0
000050E8  6600 0072 9138          bne       DisassembleInstruction_309
                    9139   ; {
                    9140   ; OpMode = (*OpCode >> 6) & (unsigned short int)(0x0003) ;
000050EC  2042      9141          move.l    D2,A0
000050EE  3010      9142          move.w    (A0),D0
000050F0  EC40      9143          asr.w     #6,D0
000050F2  C07C 0003 9144          and.w     #3,D0
000050F6  3600      9145          move.w    D0,D3
                    9146   ; if(OpMode <= (unsigned short int)(0x0002))
000050F8  0C43 0002 9147          cmp.w     #2,D3
000050FC  6200 005E 9148          bhi       DisassembleInstruction_309
                    9149   ; {
                    9150   ; InstructionSize = 1;
00005100  24BC 0000 9151          move.l    #1,(A2)
00005104  0001      
                    9152   ; strcpyInstruction("SUBQ") ;
00005106  4879 0000 9153          pea       @m68kde~1_368.L
0000510A  7636      
0000510C  4E93      9154          jsr       (A3)
0000510E  584F      9155          addq.w    #4,A7
                    9156   ; Decode2BitOperandSize(*OpCode);                                  // add .b, .w, .l size indicator to instruction string
00005110  2042      9157          move.l    D2,A0
00005112  3210      9158          move.w    (A0),D1
00005114  C2BC 0000 9159          and.l     #65535,D1
00005118  FFFF      
0000511A  2F01      9160          move.l    D1,-(A7)
0000511C  4EB8 2C28 9161          jsr       _Decode2BitOperandSize
00005120  584F      9162          addq.w    #4,A7
                    9163   ; sprintf(TempString, "#%1X,", ((*OpCode >> 9) & (unsigned short int)(0x0007)));    // print 3 bit #data in positions 11,10,9 in opcode
00005122  2042      9164          move.l    D2,A0
00005124  3210      9165          move.w    (A0),D1
00005126  E041      9166          asr.w     #8,D1
00005128  E241      9167          asr.w     #1,D1
0000512A  C27C 0007 9168          and.w     #7,D1
0000512E  C2BC 0000 9169          and.l     #65535,D1
00005132  FFFF      
00005134  2F01      9170          move.l    D1,-(A7)
00005136  4879 0000 9171          pea       @m68kde~1_369.L
0000513A  763C      
0000513C  2F0C      9172          move.l    A4,-(A7)
0000513E  4E95      9173          jsr       (A5)
00005140  DEFC 000C 9174          add.w     #12,A7
                    9175   ; strcatInstruction(TempString) ;
00005144  2F0C      9176          move.l    A4,-(A7)
00005146  4EB8 0CCC 9177          jsr       _strcatInstruction
0000514A  584F      9178          addq.w    #4,A7
                    9179   ; Decode6BitEA(OpCode,0,0,0) ;                                           // decode EA
0000514C  42A7      9180          clr.l     -(A7)
0000514E  42A7      9181          clr.l     -(A7)
00005150  42A7      9182          clr.l     -(A7)
00005152  2F02      9183          move.l    D2,-(A7)
00005154  4EB8 2EBC 9184          jsr       _Decode6BitEA
00005158  DEFC 0010 9185          add.w     #16,A7
                    9186   DisassembleInstruction_309:
                    9187   ; }
                    9188   ; }
                    9189   ; /////////////////////////////////////////////////////////////////////////////////
                    9190   ; // if instruction is SUBX
                    9191   ; /////////////////////////////////////////////////////////////////////////////////
                    9192   ; if((*OpCode & (unsigned short int)(0xF130 )) == (unsigned short int)(0x9100))
0000515C  2042      9193          move.l    D2,A0
0000515E  3010      9194          move.w    (A0),D0
00005160  C07C F130 9195          and.w     #61744,D0
00005164  0C40 9100 9196          cmp.w     #37120,D0
00005168  6600 00A4 9197          bne       DisassembleInstruction_313
                    9198   ; {
                    9199   ; InstructionSize = 1;
0000516C  24BC 0000 9200          move.l    #1,(A2)
00005170  0001      
                    9201   ; OpMode = ((*OpCode >> 6) & (unsigned short int)(0x0003)) ;
00005172  2042      9202          move.l    D2,A0
00005174  3010      9203          move.w    (A0),D0
00005176  EC40      9204          asr.w     #6,D0
00005178  C07C 0003 9205          and.w     #3,D0
0000517C  3600      9206          move.w    D0,D3
                    9207   ; if(OpMode != (unsigned short int)(0x0003)) // if size = 11 then it's SUBA not SUBX
0000517E  0C43 0003 9208          cmp.w     #3,D3
00005182  6700 008A 9209          beq       DisassembleInstruction_313
                    9210   ; {
                    9211   ; strcpyInstruction("SUBX") ;
00005186  4879 0000 9212          pea       @m68kde~1_370.L
0000518A  7642      
0000518C  4E93      9213          jsr       (A3)
0000518E  584F      9214          addq.w    #4,A7
                    9215   ; Decode2BitOperandSize(*OpCode);                                  // add .b, .w, .l size indicator to instruction string
00005190  2042      9216          move.l    D2,A0
00005192  3210      9217          move.w    (A0),D1
00005194  C2BC 0000 9218          and.l     #65535,D1
00005198  FFFF      
0000519A  2F01      9219          move.l    D1,-(A7)
0000519C  4EB8 2C28 9220          jsr       _Decode2BitOperandSize
000051A0  584F      9221          addq.w    #4,A7
                    9222   ; if((*OpCode & (unsigned short int)(0x0008)) == (unsigned short int)(0))    // if bit 3 of opcode is 0 indicates data registers are used as source and destination
000051A2  2042      9223          move.l    D2,A0
000051A4  3010      9224          move.w    (A0),D0
000051A6  C07C 0008 9225          and.w     #8,D0
000051AA  6600 0030 9226          bne       DisassembleInstruction_315
                    9227   ; sprintf(TempString, "D%1X,D%1X", (*OpCode & 0x0007), ((*OpCode >> 9) & 0x0007)) ;
000051AE  2042      9228          move.l    D2,A0
000051B0  3210      9229          move.w    (A0),D1
000051B2  E041      9230          asr.w     #8,D1
000051B4  E241      9231          asr.w     #1,D1
000051B6  C27C 0007 9232          and.w     #7,D1
000051BA  48C1      9233          ext.l     D1
000051BC  2F01      9234          move.l    D1,-(A7)
000051BE  2042      9235          move.l    D2,A0
000051C0  3210      9236          move.w    (A0),D1
000051C2  C27C 0007 9237          and.w     #7,D1
000051C6  48C1      9238          ext.l     D1
000051C8  2F01      9239          move.l    D1,-(A7)
000051CA  4879 0000 9240          pea       @m68kde~1_371.L
000051CE  7648      
000051D0  2F0C      9241          move.l    A4,-(A7)
000051D2  4E95      9242          jsr       (A5)
000051D4  DEFC 0010 9243          add.w     #16,A7
000051D8  6000 002C 9244          bra       DisassembleInstruction_316
                    9245   DisassembleInstruction_315:
                    9246   ; else        // -(ax),-(ay) mode used
                    9247   ; sprintf(TempString, "-(A%1X),-(A%1X)", (*OpCode & 0x0007), ((*OpCode >> 9) & 0x0007)) ;
000051DC  2042      9248          move.l    D2,A0
000051DE  3210      9249          move.w    (A0),D1
000051E0  E041      9250          asr.w     #8,D1
000051E2  E241      9251          asr.w     #1,D1
000051E4  C27C 0007 9252          and.w     #7,D1
000051E8  48C1      9253          ext.l     D1
000051EA  2F01      9254          move.l    D1,-(A7)
000051EC  2042      9255          move.l    D2,A0
000051EE  3210      9256          move.w    (A0),D1
000051F0  C27C 0007 9257          and.w     #7,D1
000051F4  48C1      9258          ext.l     D1
000051F6  2F01      9259          move.l    D1,-(A7)
000051F8  4879 0000 9260          pea       @m68kde~1_372.L
000051FC  7652      
000051FE  2F0C      9261          move.l    A4,-(A7)
00005200  4E95      9262          jsr       (A5)
00005202  DEFC 0010 9263          add.w     #16,A7
                    9264   DisassembleInstruction_316:
                    9265   ; strcatInstruction(TempString) ;
00005206  2F0C      9266          move.l    A4,-(A7)
00005208  4EB8 0CCC 9267          jsr       _strcatInstruction
0000520C  584F      9268          addq.w    #4,A7
                    9269   DisassembleInstruction_313:
                    9270   ; }
                    9271   ; }
                    9272   ; /////////////////////////////////////////////////////////////////////////////////
                    9273   ; // if instruction is SWAP
                    9274   ; /////////////////////////////////////////////////////////////////////////////////
                    9275   ; if((*OpCode & (unsigned short int)(0xFFF8 )) == (unsigned short int)(0x4840))
0000520E  2042      9276          move.l    D2,A0
00005210  3010      9277          move.w    (A0),D0
00005212  C07C FFF8 9278          and.w     #65528,D0
00005216  0C40 4840 9279          cmp.w     #18496,D0
0000521A  662A      9280          bne.s     DisassembleInstruction_317
                    9281   ; {
                    9282   ; InstructionSize = 1;
0000521C  24BC 0000 9283          move.l    #1,(A2)
00005220  0001      
                    9284   ; DataRegister = *OpCode & (unsigned short int)(0x0007) ;
00005222  2042      9285          move.l    D2,A0
00005224  3010      9286          move.w    (A0),D0
00005226  C07C 0007 9287          and.w     #7,D0
0000522A  3A00      9288          move.w    D0,D5
                    9289   ; sprintf(Instruction, "SWAP D%d", DataRegister) ;
0000522C  CABC 0000 9290          and.l     #65535,D5
00005230  FFFF      
00005232  2F05      9291          move.l    D5,-(A7)
00005234  4879 0000 9292          pea       @m68kde~1_373.L
00005238  7662      
0000523A  4879 0803 9293          pea       _Instruction.L
0000523E  04E2      
00005240  4E95      9294          jsr       (A5)
00005242  DEFC 000C 9295          add.w     #12,A7
                    9296   DisassembleInstruction_317:
                    9297   ; }
                    9298   ; /////////////////////////////////////////////////////////////////////////////////
                    9299   ; // if instruction is TAS
                    9300   ; /////////////////////////////////////////////////////////////////////////////////
                    9301   ; if((*OpCode & (unsigned short int)(0xFFC0 )) == (unsigned short int)(0x4AC0))
00005246  2042      9302          move.l    D2,A0
00005248  3010      9303          move.w    (A0),D0
0000524A  C07C FFC0 9304          and.w     #65472,D0
0000524E  0C40 4AC0 9305          cmp.w     #19136,D0
00005252  662A      9306          bne.s     DisassembleInstruction_321
                    9307   ; {
                    9308   ; if(*OpCode != (unsigned short int)(0x4AFC))
00005254  2042      9309          move.l    D2,A0
00005256  3010      9310          move.w    (A0),D0
00005258  0C40 4AFC 9311          cmp.w     #19196,D0
0000525C  6720      9312          beq.s     DisassembleInstruction_321
                    9313   ; {
                    9314   ; InstructionSize = 1;
0000525E  24BC 0000 9315          move.l    #1,(A2)
00005262  0001      
                    9316   ; strcpyInstruction("TAS ") ;
00005264  4879 0000 9317          pea       @m68kde~1_374.L
00005268  766C      
0000526A  4E93      9318          jsr       (A3)
0000526C  584F      9319          addq.w    #4,A7
                    9320   ; Decode6BitEA(OpCode,0,0,0) ;
0000526E  42A7      9321          clr.l     -(A7)
00005270  42A7      9322          clr.l     -(A7)
00005272  42A7      9323          clr.l     -(A7)
00005274  2F02      9324          move.l    D2,-(A7)
00005276  4EB8 2EBC 9325          jsr       _Decode6BitEA
0000527A  DEFC 0010 9326          add.w     #16,A7
                    9327   DisassembleInstruction_321:
                    9328   ; }
                    9329   ; }
                    9330   ; /////////////////////////////////////////////////////////////////////////////////
                    9331   ; // if instruction is TRAP
                    9332   ; /////////////////////////////////////////////////////////////////////////////////
                    9333   ; if((*OpCode & (unsigned short int)(0xFFF0 )) == (unsigned short int)(0x4E40))   {
0000527E  2042      9334          move.l    D2,A0
00005280  3010      9335          move.w    (A0),D0
00005282  C07C FFF0 9336          and.w     #65520,D0
00005286  0C40 4E40 9337          cmp.w     #20032,D0
0000528A  6622      9338          bne.s     DisassembleInstruction_323
                    9339   ; sprintf(Instruction, "TRAP #%d", *OpCode & (unsigned short int)(0x000F)) ;
0000528C  2042      9340          move.l    D2,A0
0000528E  3210      9341          move.w    (A0),D1
00005290  C27C 000F 9342          and.w     #15,D1
00005294  C2BC 0000 9343          and.l     #65535,D1
00005298  FFFF      
0000529A  2F01      9344          move.l    D1,-(A7)
0000529C  4879 0000 9345          pea       @m68kde~1_375.L
000052A0  7672      
000052A2  4879 0803 9346          pea       _Instruction.L
000052A6  04E2      
000052A8  4E95      9347          jsr       (A5)
000052AA  DEFC 000C 9348          add.w     #12,A7
                    9349   DisassembleInstruction_323:
                    9350   ; }
                    9351   ; /////////////////////////////////////////////////////////////////////////////////
                    9352   ; // if instruction is TRAPV
                    9353   ; /////////////////////////////////////////////////////////////////////////////////
                    9354   ; if(*OpCode == (unsigned short int)(0x4E76))
000052AE  2042      9355          move.l    D2,A0
000052B0  3010      9356          move.w    (A0),D0
000052B2  0C40 4E76 9357          cmp.w     #20086,D0
000052B6  6610      9358          bne.s     DisassembleInstruction_325
                    9359   ; {
                    9360   ; InstructionSize = 1;
000052B8  24BC 0000 9361          move.l    #1,(A2)
000052BC  0001      
                    9362   ; strcpyInstruction("TRAPV") ;
000052BE  4879 0000 9363          pea       @m68kde~1_376.L
000052C2  767C      
000052C4  4E93      9364          jsr       (A3)
000052C6  584F      9365          addq.w    #4,A7
                    9366   DisassembleInstruction_325:
                    9367   ; }
                    9368   ; /////////////////////////////////////////////////////////////////////////////////
                    9369   ; // if instruction is TST
                    9370   ; /////////////////////////////////////////////////////////////////////////////////
                    9371   ; if((*OpCode & (unsigned short int)(0xFF00 )) == (unsigned short int)(0x4A00))
000052C8  2042      9372          move.l    D2,A0
000052CA  3010      9373          move.w    (A0),D0
000052CC  C07C FF00 9374          and.w     #65280,D0
000052D0  0C40 4A00 9375          cmp.w     #18944,D0
000052D4  6600 005A 9376          bne       DisassembleInstruction_329
                    9377   ; {
                    9378   ; Size = (*OpCode >> 6) & (unsigned short int)(0x0003) ;
000052D8  2042      9379          move.l    D2,A0
000052DA  3010      9380          move.w    (A0),D0
000052DC  EC40      9381          asr.w     #6,D0
000052DE  C07C 0003 9382          and.w     #3,D0
000052E2  3D40 FFE2 9383          move.w    D0,-30(A6)
                    9384   ; if((*OpCode != (unsigned short int)(0x4AFC)) && (Size != (unsigned short int)(0x0003)))       { // test for size to eliminate TAS instruction which shares similar opcode
000052E6  2042      9385          move.l    D2,A0
000052E8  3010      9386          move.w    (A0),D0
000052EA  0C40 4AFC 9387          cmp.w     #19196,D0
000052EE  6700 0040 9388          beq       DisassembleInstruction_329
000052F2  302E FFE2 9389          move.w    -30(A6),D0
000052F6  0C40 0003 9390          cmp.w     #3,D0
000052FA  6700 0034 9391          beq       DisassembleInstruction_329
                    9392   ; InstructionSize = 1;
000052FE  24BC 0000 9393          move.l    #1,(A2)
00005302  0001      
                    9394   ; strcpyInstruction("TST") ;
00005304  4879 0000 9395          pea       @m68kde~1_377.L
00005308  7682      
0000530A  4E93      9396          jsr       (A3)
0000530C  584F      9397          addq.w    #4,A7
                    9398   ; Decode2BitOperandSize(*OpCode) ;
0000530E  2042      9399          move.l    D2,A0
00005310  3210      9400          move.w    (A0),D1
00005312  C2BC 0000 9401          and.l     #65535,D1
00005316  FFFF      
00005318  2F01      9402          move.l    D1,-(A7)
0000531A  4EB8 2C28 9403          jsr       _Decode2BitOperandSize
0000531E  584F      9404          addq.w    #4,A7
                    9405   ; Decode6BitEA(OpCode,0,0,0) ;
00005320  42A7      9406          clr.l     -(A7)
00005322  42A7      9407          clr.l     -(A7)
00005324  42A7      9408          clr.l     -(A7)
00005326  2F02      9409          move.l    D2,-(A7)
00005328  4EB8 2EBC 9410          jsr       _Decode6BitEA
0000532C  DEFC 0010 9411          add.w     #16,A7
                    9412   DisassembleInstruction_329:
                    9413   ; }
                    9414   ; }
                    9415   ; /////////////////////////////////////////////////////////////////////////////////
                    9416   ; // if instruction is UNLK
                    9417   ; //////////////////////////////////////////////////////////
                    9418   ; if((*OpCode & (unsigned short int)(0xFFF8 )) == (unsigned short int)(0x4E58))
00005330  2042      9419          move.l    D2,A0
00005332  3010      9420          move.w    (A0),D0
00005334  C07C FFF8 9421          and.w     #65528,D0
00005338  0C40 4E58 9422          cmp.w     #20056,D0
0000533C  6628      9423          bne.s     DisassembleInstruction_331
                    9424   ; {
                    9425   ; InstructionSize = 1;
0000533E  24BC 0000 9426          move.l    #1,(A2)
00005342  0001      
                    9427   ; sprintf(Instruction, "UNLK A%d", *OpCode & (unsigned short int)(0x0007)) ;
00005344  2042      9428          move.l    D2,A0
00005346  3210      9429          move.w    (A0),D1
00005348  C27C 0007 9430          and.w     #7,D1
0000534C  C2BC 0000 9431          and.l     #65535,D1
00005350  FFFF      
00005352  2F01      9432          move.l    D1,-(A7)
00005354  4879 0000 9433          pea       @m68kde~1_378.L
00005358  7686      
0000535A  4879 0803 9434          pea       _Instruction.L
0000535E  04E2      
00005360  4E95      9435          jsr       (A5)
00005362  DEFC 000C 9436          add.w     #12,A7
                    9437   DisassembleInstruction_331:
                    9438   ; }
                    9439   ; FormatInstruction() ;
00005366  4EB8 2B96 9440          jsr       _FormatInstruction
0000536A  4CDF 3CFC 9441          movem.l   (A7)+,D2/D3/D4/D5/D6/D7/A2/A3/A4/A5
0000536E  4E5E      9442          unlk      A6
00005370  4E75      9443          rts
                    9444   ; }
                    9445   _strcpy:
00005372  206F 0004 9446          move.l    (4,A7),A0
00005376  226F 0008 9447          move.l    (8,A7),A1
0000537A  2008      9448          move.l    A0,D0
                    9449   strcpy_1:
0000537C  10D9      9450          move.b    (A1)+,(A0)+
0000537E  66FC      9451          bne       strcpy_1
00005380  4E75      9452          rts
                    9453   ULDIV:
00005382  4E56 0000 9454          link    A6,#0
00005386  48E7 C000 9455          movem.l D0/D1,-(A7)
0000538A  222E 0008 9456          move.l  8(A6),D1
0000538E  202E 000C 9457          move.l  12(A6),D0
00005392  6036      9458          bra.s   ldiv_3
                    9459   LDIV:
00005394  4E56 0000 9460          link    A6,#0
00005398  48E7 C000 9461          movem.l D0/D1,-(A7)
0000539C  222E 0008 9462          move.l  8(A6),D1
000053A0  202E 000C 9463          move.l  12(A6),D0
000053A4  4A80      9464          tst.l   D0
000053A6  6A0E      9465          bpl.s   ldiv_1
000053A8  4480      9466          neg.l   D0
000053AA  4A81      9467          tst.l   D1
000053AC  6A14      9468          bpl.s   ldiv_2
000053AE  4481      9469          neg.l   D1
000053B0  612A      9470          bsr.s   dodiv
000053B2  4481      9471          neg.l   D1
000053B4  6016      9472          bra.s   ldiv_4
                    9473   ldiv_1:
000053B6  4A81      9474          tst.l   D1
000053B8  6A10      9475          bpl.s   ldiv_3
000053BA  4481      9476          neg.l   D1
000053BC  611E      9477          bsr.s   dodiv
000053BE  4480      9478          neg.l   D0
000053C0  600A      9479          bra.s   ldiv_4
                    9480   ldiv_2:
000053C2  6118      9481          bsr.s   dodiv
000053C4  4480      9482          neg.l   D0
000053C6  4481      9483          neg.l   D1
000053C8  6002      9484          bra.s   ldiv_4
                    9485   ldiv_3:
000053CA  6110      9486          bsr.s   dodiv
                    9487   ldiv_4:
000053CC  2D40 0008 9488          move.l  D0,8(A6)
000053D0  2D41 000C 9489          move.l  D1,12(A6)
000053D4  4CDF 0003 9490          movem.l (A7)+,D0/D1
000053D8  4E5E      9491          unlk    A6
000053DA  4E75      9492          rts
                    9493   dodiv:
000053DC  0C81 0000 9494          cmpi.l  #$FFFF,D1
000053E0  FFFF      
000053E2  6236      9495          bhi.s   dodiv_2
000053E4  0C80 0000 9496          cmpi.l  #$FFFF,D0
000053E8  FFFF      
000053EA  6210      9497          bhi.s   dodiv_1
000053EC  80C1      9498          divu    D1,D0
000053EE  2200      9499          move.l  D0,D1
000053F0  4241      9500          clr.w   D1
000053F2  4841      9501          swap    D1
000053F4  0280 0000 9502          andi.l  #$FFFF,D0
000053F8  FFFF      
000053FA  4E75      9503          rts
                    9504   dodiv_1:
000053FC  48A7 A000 9505          movem.w D0/D2,-(A7)
00005400  4240      9506          clr.w   D0
00005402  4840      9507          swap    D0
00005404  80C1      9508          divu    D1,D0
00005406  3400      9509          move.w  D0,D2
00005408  301F      9510          move.w  (A7)+,D0
0000540A  80C1      9511          divu    D1,D0
0000540C  4840      9512          swap    D0
0000540E  4281      9513          clr.l   D1
00005410  3200      9514          move.w  D0,D1
00005412  3002      9515          move.w  D2,D0
00005414  4840      9516          swap    D0
00005416  341F      9517          move.w  (A7)+,D2
00005418  4E75      9518          rts
                    9519   dodiv_2:
0000541A  48E7 3800 9520          movem.l D2/D3/D4,-(A7)
0000541E  2401      9521          move.l  D1,D2
00005420  4242      9522          clr.w   D2
00005422  4842      9523          swap    D2
00005424  5282      9524          addq.l  #1,D2
00005426  2600      9525          move.l  D0,D3
00005428  2801      9526          move.l  D1,D4
0000542A  2202      9527          move.l  D2,D1
0000542C  61CE      9528          bsr.s   dodiv_1
0000542E  2204      9529          move.l  D4,D1
00005430  82C2      9530          divu    D2,D1
00005432  80C1      9531          divu    D1,D0
00005434  0280 0000 9532          andi.l  #$FFFF,D0
00005438  FFFF      
                    9533   dodiv_3:
0000543A  2204      9534          move.l  D4,D1
0000543C  2404      9535          move.l  D4,D2
0000543E  4842      9536          swap    D2
00005440  C2C0      9537          mulu    D0,D1
00005442  C4C0      9538          mulu    D0,D2
00005444  4842      9539          swap    D2
00005446  D282      9540          add.l   D2,D1
00005448  9283      9541          sub.l   D3,D1
0000544A  620A      9542          bhi.s   dodiv_4
0000544C  4481      9543          neg.l   D1
0000544E  B881      9544          cmp.l   D1,D4
00005450  6208      9545          bhi.s   dodiv_5
00005452  5280      9546          addq.l  #1,D0
00005454  60E4      9547          bra.s   dodiv_3
                    9548   dodiv_4:
00005456  5380      9549          subq.l  #1,D0
00005458  60E0      9550          bra.s   dodiv_3
                    9551   dodiv_5:
0000545A  4CDF 001C 9552          movem.l (A7)+,D2/D3/D4
0000545E  4E75      9553          rts
                    9554   _putch:
00005460  4E56 0000 9555          link      A6,#0
00005464  48E7 2000 9556          movem.l   D2,-(A7)
00005468  242E 0008 9557          move.l    8(A6),D2
0000546C  0C82 0000 9558          cmp.l     #10,D2
00005470  000A      
00005472  660A      9559          bne.s     putch_1
00005474  4878 000D 9560          pea       13
00005478  6100 B6C2 9561          bsr       __putch
0000547C  584F      9562          addq.w    #4,A7
                    9563   putch_1:
0000547E  2F02      9564          move.l    D2,-(A7)
00005480  6100 B6BA 9565          bsr       __putch
00005484  584F      9566          addq.w    #4,A7
00005486  2002      9567          move.l    D2,D0
00005488  4CDF 0004 9568          movem.l   (A7)+,D2
0000548C  4E5E      9569          unlk      A6
0000548E  4E75      9570          rts
                    9571   _getch:
00005490  48E7 2000 9572          movem.l   D2,-(A7)
00005494  2439 0803 9573          move.l    __ungetbuf,D2
00005498  00C0      
0000549A  2039 0803 9574          move.l    __ungetbuf,D0
0000549E  00C0      
000054A0  0C80 FFFF 9575          cmp.l     #-1,D0
000054A4  FFFF      
000054A6  670C      9576          beq.s     getch_1
000054A8  23FC FFFF 9577          move.l    #-1,__ungetbuf
000054AC  FFFF 0803 
000054B0  00C0      
000054B2  6010      9578          bra.s     getch_3
                    9579   getch_1:
000054B4  6100 B6B2 9580          bsr       __getch
000054B8  2400      9581          move.l    D0,D2
000054BA  0C80 0000 9582          cmp.l     #13,D0
000054BE  000D      
000054C0  6602      9583          bne.s     getch_3
000054C2  740A      9584          moveq     #10,D2
                    9585   getch_3:
000054C4  2002      9586          move.l    D2,D0
000054C6  4CDF 0004 9587          movem.l   (A7)+,D2
000054CA  4E75      9588          rts
                    9589   _tolower:
000054CC  4E56 0000 9590          link      A6,#0
000054D0  48E7 2000 9591          movem.l   D2,-(A7)
000054D4  242E 0008 9592          move.l    8(A6),D2
000054D8  0C82 0000 9593          cmp.l     #65,D2
000054DC  0041      
000054DE  6D0E      9594          blt.s     tolower_1
000054E0  0C82 0000 9595          cmp.l     #90,D2
000054E4  005A      
000054E6  6E06      9596          bgt.s     tolower_1
000054E8  84BC 0000 9597          or.l      #32,D2
000054EC  0020      
                    9598   tolower_1:
000054EE  2002      9599          move.l    D2,D0
000054F0  4CDF 0004 9600          movem.l   (A7)+,D2
000054F4  4E5E      9601          unlk      A6
000054F6  4E75      9602          rts
                    9603   _sprintf:
000054F8  4E56 FFFC 9604          link      A6,#-4
000054FC  48E7 2000 9605          movem.l   D2,-(A7)
00005500  41EE 000C 9606          lea       12(A6),A0
00005504  5848      9607          addq.w    #4,A0
00005506  2408      9608          move.l    A0,D2
00005508  2F02      9609          move.l    D2,-(A7)
0000550A  2F2E 000C 9610          move.l    12(A6),-(A7)
0000550E  2F2E 0008 9611          move.l    8(A6),-(A7)
00005512  6100 013E 9612          bsr       _vsprintf
00005516  DEFC 000C 9613          add.w     #12,A7
0000551A  2D40 FFFC 9614          move.l    D0,-4(A6)
0000551E  4282      9615          clr.l     D2
00005520  202E FFFC 9616          move.l    -4(A6),D0
00005524  4CDF 0004 9617          movem.l   (A7)+,D2
00005528  4E5E      9618          unlk      A6
0000552A  4E75      9619          rts
                    9620   _strcat:
0000552C  206F 0004 9621          move.l    (4,A7),A0	
00005530  226F 0008 9622          move.l    (8,A7),A1	
00005534  2008      9623          move.l    A0,D0		
                    9624   strcat_0:
00005536  4A18      9625          tst.b     (A0)+
00005538  66FC      9626          bne       strcat_0
0000553A  5348      9627          subq      #1,A0
                    9628   strcat_1:
0000553C  10D9      9629          move.b    (A1)+,(A0)+
0000553E  66FC      9630          bne       strcat_1
00005540  4E75      9631          rts
                    9632   _toupper:
00005542  4E56 0000 9633          link      A6,#0
00005546  48E7 2000 9634          movem.l   D2,-(A7)
0000554A  242E 0008 9635          move.l    8(A6),D2
0000554E  0C82 0000 9636          cmp.l     #97,D2
00005552  0061      
00005554  6D0E      9637          blt.s     toupper_1
00005556  0C82 0000 9638          cmp.l     #122,D2
0000555A  007A      
0000555C  6E06      9639          bgt.s     toupper_1
0000555E  C4BC 0000 9640          and.l     #95,D2
00005562  005F      
                    9641   toupper_1:
00005564  2002      9642          move.l    D2,D0
00005566  4CDF 0004 9643          movem.l   (A7)+,D2
0000556A  4E5E      9644          unlk      A6
0000556C  4E75      9645          rts
                    9646   _printf:
0000556E  4E56 FFFC 9647          link      A6,#-4
00005572  48E7 2000 9648          movem.l   D2,-(A7)
00005576  41EE 0008 9649          lea       8(A6),A0
0000557A  5848      9650          addq.w    #4,A0
0000557C  2408      9651          move.l    A0,D2
0000557E  2F02      9652          move.l    D2,-(A7)
00005580  2F2E 0008 9653          move.l    8(A6),-(A7)
00005584  42A7      9654          clr.l     -(A7)
00005586  6100 00CA 9655          bsr       _vsprintf
0000558A  DEFC 000C 9656          add.w     #12,A7
0000558E  2D40 FFFC 9657          move.l    D0,-4(A6)
00005592  4282      9658          clr.l     D2
00005594  202E FFFC 9659          move.l    -4(A6),D0
00005598  4CDF 0004 9660          movem.l   (A7)+,D2
0000559C  4E5E      9661          unlk      A6
0000559E  4E75      9662          rts
                    9663   @vsprintf_copy:
000055A0  4E56 0000 9664          link      A6,#0
000055A4  206E 0008 9665          move.l    8(A6),A0
000055A8  4A90      9666          tst.l     (A0)
000055AA  6710      9667          beq.s     @vsprintf_copy_1
000055AC  202E 000C 9668          move.l    12(A6),D0
000055B0  206E 0008 9669          move.l    8(A6),A0
000055B4  2250      9670          move.l    (A0),A1
000055B6  5290      9671          addq.l    #1,(A0)
000055B8  1280      9672          move.b    D0,(A1)
000055BA  600A      9673          bra.s     @vsprintf_copy_2
                    9674   @vsprintf_copy_1:
000055BC  2F2E 000C 9675          move.l    12(A6),-(A7)
000055C0  6100 FE9E 9676          bsr       _putch
000055C4  584F      9677          addq.w    #4,A7
                    9678   @vsprintf_copy_2:
000055C6  4E5E      9679          unlk      A6
000055C8  4E75      9680          rts
                    9681   @vsprintf_getval:
000055CA  4E56 0000 9682          link      A6,#0
000055CE  48E7 3000 9683          movem.l   D2/D3,-(A7)
000055D2  242E 0008 9684          move.l    8(A6),D2
000055D6  4283      9685          clr.l     D3
000055D8  2042      9686          move.l    D2,A0
000055DA  2050      9687          move.l    (A0),A0
000055DC  1010      9688          move.b    (A0),D0
000055DE  4880      9689          ext.w     D0
000055E0  48C0      9690          ext.l     D0
000055E2  0C80 0000 9691          cmp.l     #42,D0
000055E6  002A      
000055E8  6612      9692          bne.s     @vsprintf_getval_1
000055EA  206E 000C 9693          move.l    12(A6),A0
000055EE  2250      9694          move.l    (A0),A1
000055F0  5890      9695          addq.l    #4,(A0)
000055F2  2611      9696          move.l    (A1),D3
000055F4  2042      9697          move.l    D2,A0
000055F6  5290      9698          addq.l    #1,(A0)
000055F8  6000 004E 9699          bra       @vsprintf_getval_5
                    9700   @vsprintf_getval_1:
000055FC  2042      9701          move.l    D2,A0
000055FE  2050      9702          move.l    (A0),A0
00005600  1010      9703          move.b    (A0),D0
00005602  4880      9704          ext.w     D0
00005604  48C0      9705          ext.l     D0
00005606  0C80 0000 9706          cmp.l     #48,D0
0000560A  0030      
0000560C  6D00 003A 9707          blt       @vsprintf_getval_5
00005610  2042      9708          move.l    D2,A0
00005612  2050      9709          move.l    (A0),A0
00005614  1010      9710          move.b    (A0),D0
00005616  4880      9711          ext.w     D0
00005618  48C0      9712          ext.l     D0
0000561A  0C80 0000 9713          cmp.l     #57,D0
0000561E  0039      
00005620  6E26      9714          bgt.s     @vsprintf_getval_5
00005622  2F03      9715          move.l    D3,-(A7)
00005624  4878 000A 9716          pea       10
00005628  6100 07F4 9717          bsr       LMUL
0000562C  2017      9718          move.l    (A7),D0
0000562E  504F      9719          addq.w    #8,A7
00005630  2042      9720          move.l    D2,A0
00005632  2250      9721          move.l    (A0),A1
00005634  5290      9722          addq.l    #1,(A0)
00005636  1211      9723          move.b    (A1),D1
00005638  4881      9724          ext.w     D1
0000563A  48C1      9725          ext.l     D1
0000563C  D081      9726          add.l     D1,D0
0000563E  0480 0000 9727          sub.l     #48,D0
00005642  0030      
00005644  2600      9728          move.l    D0,D3
00005646  60B4      9729          bra       @vsprintf_getval_1
                    9730   @vsprintf_getval_5:
00005648  2003      9731          move.l    D3,D0
0000564A  4CDF 000C 9732          movem.l   (A7)+,D2/D3
0000564E  4E5E      9733          unlk      A6
00005650  4E75      9734          rts
                    9735   _vsprintf:
00005652  4E56 FFCC 9736          link      A6,#-52
00005656  48E7 3F3C 9737          movem.l   D2/D3/D4/D5/D6/D7/A2/A3/A4/A5,-(A7)
0000565A  45EE 0008 9738          lea       8(A6),A2
0000565E  47F8 55A0 9739          lea       @vsprintf_copy,A3
00005662  49F9 0000 9740          lea       _ultoa,A4
00005666  5DAA      
00005668  4286      9741          clr.l     D6
                    9742   vsprintf_1:
0000566A  206E 000C 9743          move.l    12(A6),A0
0000566E  4A10      9744          tst.b     (A0)
00005670  6700 0624 9745          beq       vsprintf_3
00005674  206E 000C 9746          move.l    12(A6),A0
00005678  1010      9747          move.b    (A0),D0
0000567A  4880      9748          ext.w     D0
0000567C  48C0      9749          ext.l     D0
0000567E  0C80 0000 9750          cmp.l     #37,D0
00005682  0025      
00005684  671C      9751          beq.s     vsprintf_4
00005686  206E 000C 9752          move.l    12(A6),A0
0000568A  52AE 000C 9753          addq.l    #1,12(A6)
0000568E  1210      9754          move.b    (A0),D1
00005690  4881      9755          ext.w     D1
00005692  48C1      9756          ext.l     D1
00005694  2F01      9757          move.l    D1,-(A7)
00005696  2F0A      9758          move.l    A2,-(A7)
00005698  4E93      9759          jsr       (A3)
0000569A  504F      9760          addq.w    #8,A7
0000569C  5286      9761          addq.l    #1,D6
0000569E  6000 05F2 9762          bra       vsprintf_2
                    9763   vsprintf_4:
000056A2  52AE 000C 9764          addq.l    #1,12(A6)
000056A6  422E FFD3 9765          clr.b     -45(A6)
000056AA  422E FFD2 9766          clr.b     -46(A6)
000056AE  422E FFD0 9767          clr.b     -48(A6)
000056B2  422E FFCF 9768          clr.b     -49(A6)
000056B6  422E FFCE 9769          clr.b     -50(A6)
000056BA  422E FFCD 9770          clr.b     -51(A6)
000056BE  42AE FFFC 9771          clr.l     -4(A6)
000056C2  7AFF      9772          moveq     #-1,D5
000056C4  41EE FFDC 9773          lea       -36(A6),A0
000056C8  2608      9774          move.l    A0,D3
000056CA  2408      9775          move.l    A0,D2
                    9776   vsprintf_6:
000056CC  206E 000C 9777          move.l    12(A6),A0
000056D0  1010      9778          move.b    (A0),D0
000056D2  4880      9779          ext.w     D0
000056D4  48C0      9780          ext.l     D0
000056D6  0C80 0000 9781          cmp.l     #43,D0
000056DA  002B      
000056DC  6730      9782          beq.s     vsprintf_12
000056DE  6E18      9783          bgt.s     vsprintf_15
000056E0  0C80 0000 9784          cmp.l     #35,D0
000056E4  0023      
000056E6  6700 003E 9785          beq       vsprintf_14
000056EA  6E00 0046 9786          bgt       vsprintf_9
000056EE  0C80 0000 9787          cmp.l     #32,D0
000056F2  0020      
000056F4  6724      9788          beq.s     vsprintf_13
000056F6  603A      9789          bra.s     vsprintf_9
                    9790   vsprintf_15:
000056F8  0C80 0000 9791          cmp.l     #45,D0
000056FC  002D      
000056FE  6702      9792          beq.s     vsprintf_11
00005700  6030      9793          bra.s     vsprintf_9
                    9794   vsprintf_11:
00005702  1D7C 0001 9795          move.b    #1,-51(A6)
00005706  FFCD      
00005708  52AE 000C 9796          addq.l    #1,12(A6)
0000570C  6026      9797          bra.s     vsprintf_7
                    9798   vsprintf_12:
0000570E  1D7C 0001 9799          move.b    #1,-50(A6)
00005712  FFCE      
00005714  52AE 000C 9800          addq.l    #1,12(A6)
00005718  601A      9801          bra.s     vsprintf_7
                    9802   vsprintf_13:
0000571A  1D7C 0001 9803          move.b    #1,-49(A6)
0000571E  FFCF      
00005720  52AE 000C 9804          addq.l    #1,12(A6)
00005724  600E      9805          bra.s     vsprintf_7
                    9806   vsprintf_14:
00005726  1D7C 0001 9807          move.b    #1,-48(A6)
0000572A  FFD0      
0000572C  52AE 000C 9808          addq.l    #1,12(A6)
00005730  6002      9809          bra.s     vsprintf_7
                    9810   vsprintf_9:
00005732  6002      9811          bra.s     vsprintf_8
                    9812   vsprintf_7:
00005734  6096      9813          bra       vsprintf_6
                    9814   vsprintf_8:
00005736  206E 000C 9815          move.l    12(A6),A0
0000573A  1010      9816          move.b    (A0),D0
0000573C  4880      9817          ext.w     D0
0000573E  48C0      9818          ext.l     D0
00005740  0C80 0000 9819          cmp.l     #48,D0
00005744  0030      
00005746  660A      9820          bne.s     vsprintf_16
00005748  52AE 000C 9821          addq.l    #1,12(A6)
0000574C  1D7C 0001 9822          move.b    #1,-46(A6)
00005750  FFD2      
                    9823   vsprintf_16:
00005752  486E 0010 9824          pea       16(A6)
00005756  486E 000C 9825          pea       12(A6)
0000575A  6100 FE6E 9826          bsr       @vsprintf_getval
0000575E  504F      9827          addq.w    #8,A7
00005760  2A40      9828          move.l    D0,A5
00005762  206E 000C 9829          move.l    12(A6),A0
00005766  1010      9830          move.b    (A0),D0
00005768  4880      9831          ext.w     D0
0000576A  48C0      9832          ext.l     D0
0000576C  0C80 0000 9833          cmp.l     #46,D0
00005770  002E      
00005772  6614      9834          bne.s     vsprintf_18
00005774  52AE 000C 9835          addq.l    #1,12(A6)
00005778  486E 0010 9836          pea       16(A6)
0000577C  486E 000C 9837          pea       12(A6)
00005780  6100 FE48 9838          bsr       @vsprintf_getval
00005784  504F      9839          addq.w    #8,A7
00005786  2A00      9840          move.l    D0,D5
                    9841   vsprintf_18:
00005788  206E 000C 9842          move.l    12(A6),A0
0000578C  1010      9843          move.b    (A0),D0
0000578E  4880      9844          ext.w     D0
00005790  48C0      9845          ext.l     D0
00005792  0C80 0000 9846          cmp.l     #108,D0
00005796  006C      
00005798  660A      9847          bne.s     vsprintf_20
0000579A  52AE 000C 9848          addq.l    #1,12(A6)
0000579E  1D7C 0001 9849          move.b    #1,-45(A6)
000057A2  FFD3      
                    9850   vsprintf_20:
000057A4  206E 000C 9851          move.l    12(A6),A0
000057A8  1010      9852          move.b    (A0),D0
000057AA  4880      9853          ext.w     D0
000057AC  48C0      9854          ext.l     D0
000057AE  0C80 0000 9855          cmp.l     #111,D0
000057B2  006F      
000057B4  6700 00D4 9856          beq       vsprintf_27
000057B8  6E34      9857          bgt.s     vsprintf_33
000057BA  0C80 0000 9858          cmp.l     #100,D0
000057BE  0064      
000057C0  6700 0054 9859          beq       vsprintf_24
000057C4  6E1C      9860          bgt.s     vsprintf_34
000057C6  0C80 0000 9861          cmp.l     #99,D0
000057CA  0063      
000057CC  6700 012C 9862          beq       vsprintf_30
000057D0  6E00 016A 9863          bgt       vsprintf_22
000057D4  0C80 0000 9864          cmp.l     #88,D0
000057D8  0058      
000057DA  6700 00E6 9865          beq       vsprintf_28
000057DE  6000 015C 9866          bra       vsprintf_22
                    9867   vsprintf_34:
000057E2  0C80 0000 9868          cmp.l     #105,D0
000057E6  0069      
000057E8  672C      9869          beq.s     vsprintf_24
000057EA  6000 0150 9870          bra       vsprintf_22
                    9871   vsprintf_33:
000057EE  0C80 0000 9872          cmp.l     #117,D0
000057F2  0075      
000057F4  6700 005C 9873          beq       vsprintf_26
000057F8  6E0E      9874          bgt.s     vsprintf_35
000057FA  0C80 0000 9875          cmp.l     #115,D0
000057FE  0073      
00005800  6700 011C 9876          beq       vsprintf_31
00005804  6000 0136 9877          bra       vsprintf_22
                    9878   vsprintf_35:
00005808  0C80 0000 9879          cmp.l     #120,D0
0000580C  0078      
0000580E  6700 00B2 9880          beq       vsprintf_28
00005812  6000 0128 9881          bra       vsprintf_22
                    9882   vsprintf_24:
00005816  4A2E FFD3 9883          tst.b     -45(A6)
0000581A  671A      9884          beq.s     vsprintf_36
0000581C  4878 000A 9885          pea       10
00005820  2F03      9886          move.l    D3,-(A7)
00005822  206E 0010 9887          move.l    16(A6),A0
00005826  58AE 0010 9888          addq.l    #4,16(A6)
0000582A  2F10      9889          move.l    (A0),-(A7)
0000582C  6100 04F8 9890          bsr       _ltoa
00005830  DEFC 000C 9891          add.w     #12,A7
00005834  6018      9892          bra.s     vsprintf_37
                    9893   vsprintf_36:
00005836  4878 000A 9894          pea       10
0000583A  2F03      9895          move.l    D3,-(A7)
0000583C  206E 0010 9896          move.l    16(A6),A0
00005840  58AE 0010 9897          addq.l    #4,16(A6)
00005844  2F10      9898          move.l    (A0),-(A7)
00005846  6100 04DE 9899          bsr       _ltoa
0000584A  DEFC 000C 9900          add.w     #12,A7
                    9901   vsprintf_37:
0000584E  6000 00FA 9902          bra       vsprintf_23
                    9903   vsprintf_26:
00005852  4A2E FFD3 9904          tst.b     -45(A6)
00005856  6718      9905          beq.s     vsprintf_38
00005858  4878 000A 9906          pea       10
0000585C  2F03      9907          move.l    D3,-(A7)
0000585E  206E 0010 9908          move.l    16(A6),A0
00005862  58AE 0010 9909          addq.l    #4,16(A6)
00005866  2F10      9910          move.l    (A0),-(A7)
00005868  4E94      9911          jsr       (A4)
0000586A  DEFC 000C 9912          add.w     #12,A7
0000586E  6016      9913          bra.s     vsprintf_39
                    9914   vsprintf_38:
00005870  4878 000A 9915          pea       10
00005874  2F03      9916          move.l    D3,-(A7)
00005876  206E 0010 9917          move.l    16(A6),A0
0000587A  58AE 0010 9918          addq.l    #4,16(A6)
0000587E  2F10      9919          move.l    (A0),-(A7)
00005880  4E94      9920          jsr       (A4)
00005882  DEFC 000C 9921          add.w     #12,A7
                    9922   vsprintf_39:
00005886  6000 00C2 9923          bra       vsprintf_23
                    9924   vsprintf_27:
0000588A  4A2E FFD3 9925          tst.b     -45(A6)
0000588E  6718      9926          beq.s     vsprintf_40
00005890  4878 0008 9927          pea       8
00005894  2F03      9928          move.l    D3,-(A7)
00005896  206E 0010 9929          move.l    16(A6),A0
0000589A  58AE 0010 9930          addq.l    #4,16(A6)
0000589E  2F10      9931          move.l    (A0),-(A7)
000058A0  4E94      9932          jsr       (A4)
000058A2  DEFC 000C 9933          add.w     #12,A7
000058A6  6016      9934          bra.s     vsprintf_41
                    9935   vsprintf_40:
000058A8  4878 0008 9936          pea       8
000058AC  2F03      9937          move.l    D3,-(A7)
000058AE  206E 0010 9938          move.l    16(A6),A0
000058B2  58AE 0010 9939          addq.l    #4,16(A6)
000058B6  2F10      9940          move.l    (A0),-(A7)
000058B8  4E94      9941          jsr       (A4)
000058BA  DEFC 000C 9942          add.w     #12,A7
                    9943   vsprintf_41:
000058BE  6000 008A 9944          bra       vsprintf_23
                    9945   vsprintf_28:
000058C2  4A2E FFD3 9946          tst.b     -45(A6)
000058C6  6718      9947          beq.s     vsprintf_42
000058C8  4878 0010 9948          pea       16
000058CC  2F03      9949          move.l    D3,-(A7)
000058CE  206E 0010 9950          move.l    16(A6),A0
000058D2  58AE 0010 9951          addq.l    #4,16(A6)
000058D6  2F10      9952          move.l    (A0),-(A7)
000058D8  4E94      9953          jsr       (A4)
000058DA  DEFC 000C 9954          add.w     #12,A7
000058DE  6016      9955          bra.s     vsprintf_43
                    9956   vsprintf_42:
000058E0  4878 0010 9957          pea       16
000058E4  2F03      9958          move.l    D3,-(A7)
000058E6  206E 0010 9959          move.l    16(A6),A0
000058EA  58AE 0010 9960          addq.l    #4,16(A6)
000058EE  2F10      9961          move.l    (A0),-(A7)
000058F0  4E94      9962          jsr       (A4)
000058F2  DEFC 000C 9963          add.w     #12,A7
                    9964   vsprintf_43:
000058F6  6000 0052 9965          bra       vsprintf_23
                    9966   vsprintf_30:
000058FA  206E 0010 9967          move.l    16(A6),A0
000058FE  58AE 0010 9968          addq.l    #4,16(A6)
00005902  2010      9969          move.l    (A0),D0
00005904  2042      9970          move.l    D2,A0
00005906  5282      9971          addq.l    #1,D2
00005908  1080      9972          move.b    D0,(A0)
0000590A  2042      9973          move.l    D2,A0
0000590C  4210      9974          clr.b     (A0)
0000590E  200D      9975          move.l    A5,D0
00005910  6704      9976          beq.s     vsprintf_44
00005912  200D      9977          move.l    A5,D0
00005914  6002      9978          bra.s     vsprintf_45
                    9979   vsprintf_44:
00005916  7001      9980          moveq     #1,D0
                    9981   vsprintf_45:
00005918  2A00      9982          move.l    D0,D5
0000591A  6000 002E 9983          bra       vsprintf_23
                    9984   vsprintf_31:
0000591E  206E 0010 9985          move.l    16(A6),A0
00005922  58AE 0010 9986          addq.l    #4,16(A6)
00005926  2610      9987          move.l    (A0),D3
00005928  0C85 FFFF 9988          cmp.l     #-1,D5
0000592C  FFFF      
0000592E  660A      9989          bne.s     vsprintf_46
00005930  2F03      9990          move.l    D3,-(A7)
00005932  6100 0578 9991          bsr       _strlen
00005936  584F      9992          addq.w    #4,A7
00005938  2A00      9993          move.l    D0,D5
                    9994   vsprintf_46:
0000593A  600E      9995          bra.s     vsprintf_23
                    9996   vsprintf_22:
0000593C  206E 000C 9997          move.l    12(A6),A0
00005940  2242      9998          move.l    D2,A1
00005942  5282      9999          addq.l    #1,D2
00005944  1290      10000          move.b    (A0),(A1)
00005946  2042      10001          move.l    D2,A0
00005948  4210      10002          clr.b     (A0)
                    10003   vsprintf_23:
0000594A  2F03      10004          move.l    D3,-(A7)
0000594C  6100 055E 10005          bsr       _strlen
00005950  584F      10006          addq.w    #4,A7
00005952  1800      10007          move.b    D0,D4
00005954  206E 000C 10008          move.l    12(A6),A0
00005958  1010      10009          move.b    (A0),D0
0000595A  4880      10010          ext.w     D0
0000595C  48C0      10011          ext.l     D0
0000595E  0C80 0000 10012          cmp.l     #115,D0
00005962  0073      
00005964  6618      10013          bne.s     vsprintf_48
00005966  0C85 0000 10014          cmp.l     #0,D5
0000596A  0000      
0000596C  6D10      10015          blt.s     vsprintf_48
0000596E  4884      10016          ext.w     D4
00005970  48C4      10017          ext.l     D4
00005972  B885      10018          cmp.l     D5,D4
00005974  6F04      10019          ble.s     vsprintf_50
00005976  1005      10020          move.b    D5,D0
00005978  6002      10021          bra.s     vsprintf_51
                    10022   vsprintf_50:
0000597A  1004      10023          move.b    D4,D0
                    10024   vsprintf_51:
0000597C  1800      10025          move.b    D0,D4
                    10026   vsprintf_48:
0000597E  206E 000C 10027          move.l    12(A6),A0
00005982  1010      10028          move.b    (A0),D0
00005984  4880      10029          ext.w     D0
00005986  48C0      10030          ext.l     D0
00005988  0C80 0000 10031          cmp.l     #88,D0
0000598C  0058      
0000598E  6600 0026 10032          bne       vsprintf_56
00005992  41EE FFDC 10033          lea       -36(A6),A0
00005996  2408      10034          move.l    A0,D2
                    10035   vsprintf_54:
00005998  2042      10036          move.l    D2,A0
0000599A  4A10      10037          tst.b     (A0)
0000599C  6718      10038          beq.s     vsprintf_56
0000599E  2042      10039          move.l    D2,A0
000059A0  1210      10040          move.b    (A0),D1
000059A2  4881      10041          ext.w     D1
000059A4  48C1      10042          ext.l     D1
000059A6  2F01      10043          move.l    D1,-(A7)
000059A8  6100 FB98 10044          bsr       _toupper
000059AC  584F      10045          addq.w    #4,A7
000059AE  2042      10046          move.l    D2,A0
000059B0  1080      10047          move.b    D0,(A0)
000059B2  5282      10048          addq.l    #1,D2
000059B4  60E2      10049          bra       vsprintf_54
                    10050   vsprintf_56:
000059B6  7E00      10051          moveq     #0,D7
000059B8  41EE FFD4 10052          lea       -44(A6),A0
000059BC  2408      10053          move.l    A0,D2
000059BE  206E 000C 10054          move.l    12(A6),A0
000059C2  1010      10055          move.b    (A0),D0
000059C4  4880      10056          ext.w     D0
000059C6  48C0      10057          ext.l     D0
000059C8  0C80 0000 10058          cmp.l     #100,D0
000059CC  0064      
000059CE  6714      10059          beq.s     vsprintf_59
000059D0  206E 000C 10060          move.l    12(A6),A0
000059D4  1010      10061          move.b    (A0),D0
000059D6  4880      10062          ext.w     D0
000059D8  48C0      10063          ext.l     D0
000059DA  0C80 0000 10064          cmp.l     #105,D0
000059DE  0069      
000059E0  6600 0076 10065          bne       vsprintf_65
                    10066   vsprintf_59:
000059E4  4A2E FFCE 10067          tst.b     -50(A6)
000059E8  6612      10068          bne.s     vsprintf_62
000059EA  2043      10069          move.l    D3,A0
000059EC  1010      10070          move.b    (A0),D0
000059EE  4880      10071          ext.w     D0
000059F0  48C0      10072          ext.l     D0
000059F2  0C80 0000 10073          cmp.l     #45,D0
000059F6  002D      
000059F8  6600 002E 10074          bne       vsprintf_60
                    10075   vsprintf_62:
000059FC  2043      10076          move.l    D3,A0
000059FE  1010      10077          move.b    (A0),D0
00005A00  4880      10078          ext.w     D0
00005A02  48C0      10079          ext.l     D0
00005A04  0C80 0000 10080          cmp.l     #45,D0
00005A08  002D      
00005A0A  660E      10081          bne.s     vsprintf_63
00005A0C  2043      10082          move.l    D3,A0
00005A0E  5283      10083          addq.l    #1,D3
00005A10  2242      10084          move.l    D2,A1
00005A12  5282      10085          addq.l    #1,D2
00005A14  1290      10086          move.b    (A0),(A1)
00005A16  5304      10087          subq.b    #1,D4
00005A18  6008      10088          bra.s     vsprintf_64
                    10089   vsprintf_63:
00005A1A  2042      10090          move.l    D2,A0
00005A1C  5282      10091          addq.l    #1,D2
00005A1E  10BC 002B 10092          move.b    #43,(A0)
                    10093   vsprintf_64:
00005A22  5287      10094          addq.l    #1,D7
00005A24  6000 0032 10095          bra       vsprintf_65
                    10096   vsprintf_60:
00005A28  4A2E FFCF 10097          tst.b     -49(A6)
00005A2C  6700 002A 10098          beq       vsprintf_65
00005A30  2043      10099          move.l    D3,A0
00005A32  1010      10100          move.b    (A0),D0
00005A34  4880      10101          ext.w     D0
00005A36  48C0      10102          ext.l     D0
00005A38  0C80 0000 10103          cmp.l     #45,D0
00005A3C  002D      
00005A3E  660E      10104          bne.s     vsprintf_67
00005A40  2043      10105          move.l    D3,A0
00005A42  5283      10106          addq.l    #1,D3
00005A44  2242      10107          move.l    D2,A1
00005A46  5282      10108          addq.l    #1,D2
00005A48  1290      10109          move.b    (A0),(A1)
00005A4A  5304      10110          subq.b    #1,D4
00005A4C  6008      10111          bra.s     vsprintf_68
                    10112   vsprintf_67:
00005A4E  2042      10113          move.l    D2,A0
00005A50  5282      10114          addq.l    #1,D2
00005A52  10BC 0020 10115          move.b    #32,(A0)
                    10116   vsprintf_68:
00005A56  5287      10117          addq.l    #1,D7
                    10118   vsprintf_65:
00005A58  4A2E FFD0 10119          tst.b     -48(A6)
00005A5C  6700 0066 10120          beq       vsprintf_77
00005A60  206E 000C 10121          move.l    12(A6),A0
00005A64  1010      10122          move.b    (A0),D0
00005A66  4880      10123          ext.w     D0
00005A68  48C0      10124          ext.l     D0
00005A6A  0C80 0000 10125          cmp.l     #111,D0
00005A6E  006F      
00005A70  671A      10126          beq.s     vsprintf_73
00005A72  6E0C      10127          bgt.s     vsprintf_76
00005A74  0C80 0000 10128          cmp.l     #88,D0
00005A78  0058      
00005A7A  6710      10129          beq.s     vsprintf_73
00005A7C  6000 0046 10130          bra       vsprintf_77
                    10131   vsprintf_76:
00005A80  0C80 0000 10132          cmp.l     #120,D0
00005A84  0078      
00005A86  6704      10133          beq.s     vsprintf_73
00005A88  6000 003A 10134          bra       vsprintf_77
                    10135   vsprintf_73:
00005A8C  2042      10136          move.l    D2,A0
00005A8E  5282      10137          addq.l    #1,D2
00005A90  10BC 0030 10138          move.b    #48,(A0)
00005A94  5287      10139          addq.l    #1,D7
00005A96  206E 000C 10140          move.l    12(A6),A0
00005A9A  1010      10141          move.b    (A0),D0
00005A9C  4880      10142          ext.w     D0
00005A9E  48C0      10143          ext.l     D0
00005AA0  0C80 0000 10144          cmp.l     #120,D0
00005AA4  0078      
00005AA6  6712      10145          beq.s     vsprintf_79
00005AA8  206E 000C 10146          move.l    12(A6),A0
00005AAC  1010      10147          move.b    (A0),D0
00005AAE  4880      10148          ext.w     D0
00005AB0  48C0      10149          ext.l     D0
00005AB2  0C80 0000 10150          cmp.l     #88,D0
00005AB6  0058      
00005AB8  660A      10151          bne.s     vsprintf_77
                    10152   vsprintf_79:
00005ABA  2042      10153          move.l    D2,A0
00005ABC  5282      10154          addq.l    #1,D2
00005ABE  10BC 0078 10155          move.b    #120,(A0)
00005AC2  5287      10156          addq.l    #1,D7
                    10157   vsprintf_77:
00005AC4  2042      10158          move.l    D2,A0
00005AC6  4210      10159          clr.b     (A0)
00005AC8  206E 000C 10160          move.l    12(A6),A0
00005ACC  1010      10161          move.b    (A0),D0
00005ACE  4880      10162          ext.w     D0
00005AD0  48C0      10163          ext.l     D0
00005AD2  0C80 0000 10164          cmp.l     #105,D0
00005AD6  0069      
00005AD8  6700 0076 10165          beq       vsprintf_82
00005ADC  6E42      10166          bgt.s     vsprintf_93
00005ADE  0C80 0000 10167          cmp.l     #99,D0
00005AE2  0063      
00005AE4  6700 0084 10168          beq       vsprintf_96
00005AE8  6E1C      10169          bgt.s     vsprintf_94
00005AEA  0C80 0000 10170          cmp.l     #88,D0
00005AEE  0058      
00005AF0  6700 005E 10171          beq       vsprintf_82
00005AF4  6E00 0184 10172          bgt       vsprintf_80
00005AF8  0C80 0000 10173          cmp.l     #69,D0
00005AFC  0045      
00005AFE  6700 0050 10174          beq       vsprintf_82
00005B02  6000 0176 10175          bra       vsprintf_80
                    10176   vsprintf_94:
00005B06  0C80 0000 10177          cmp.l     #101,D0
00005B0A  0065      
00005B0C  6700 0042 10178          beq       vsprintf_82
00005B10  6E00 0168 10179          bgt       vsprintf_80
00005B14  0C80 0000 10180          cmp.l     #100,D0
00005B18  0064      
00005B1A  6734      10181          beq.s     vsprintf_82
00005B1C  6000 015C 10182          bra       vsprintf_80
                    10183   vsprintf_93:
00005B20  0C80 0000 10184          cmp.l     #117,D0
00005B24  0075      
00005B26  6728      10185          beq.s     vsprintf_82
00005B28  6E1A      10186          bgt.s     vsprintf_95
00005B2A  0C80 0000 10187          cmp.l     #115,D0
00005B2E  0073      
00005B30  6700 0038 10188          beq       vsprintf_96
00005B34  6E00 0144 10189          bgt       vsprintf_80
00005B38  0C80 0000 10190          cmp.l     #111,D0
00005B3C  006F      
00005B3E  6710      10191          beq.s     vsprintf_82
00005B40  6000 0138 10192          bra       vsprintf_80
                    10193   vsprintf_95:
00005B44  0C80 0000 10194          cmp.l     #120,D0
00005B48  0078      
00005B4A  6704      10195          beq.s     vsprintf_82
00005B4C  6000 012C 10196          bra       vsprintf_80
                    10197   vsprintf_82:
00005B50  4A2E FFD2 10198          tst.b     -46(A6)
00005B54  6714      10199          beq.s     vsprintf_96
00005B56  4A2E FFCD 10200          tst.b     -51(A6)
00005B5A  660E      10201          bne.s     vsprintf_96
00005B5C  200D      10202          move.l    A5,D0
00005B5E  9087      10203          sub.l     D7,D0
00005B60  4884      10204          ext.w     D4
00005B62  48C4      10205          ext.l     D4
00005B64  9084      10206          sub.l     D4,D0
00005B66  2D40 FFFC 10207          move.l    D0,-4(A6)
                    10208   vsprintf_96:
00005B6A  202E FFFC 10209          move.l    -4(A6),D0
00005B6E  0C80 0000 10210          cmp.l     #0,D0
00005B72  0000      
00005B74  6C04      10211          bge.s     vsprintf_98
00005B76  42AE FFFC 10212          clr.l     -4(A6)
                    10213   vsprintf_98:
00005B7A  4A2E FFCD 10214          tst.b     -51(A6)
00005B7E  6600 0030 10215          bne       vsprintf_104
00005B82  4884      10216          ext.w     D4
00005B84  48C4      10217          ext.l     D4
00005B86  2004      10218          move.l    D4,D0
00005B88  D0AE FFFC 10219          add.l     -4(A6),D0
00005B8C  D087      10220          add.l     D7,D0
00005B8E  1D40 FFD1 10221          move.b    D0,-47(A6)
                    10222   vsprintf_102:
00005B92  102E FFD1 10223          move.b    -47(A6),D0
00005B96  4880      10224          ext.w     D0
00005B98  48C0      10225          ext.l     D0
00005B9A  220D      10226          move.l    A5,D1
00005B9C  534D      10227          subq.w    #1,A5
00005B9E  B081      10228          cmp.l     D1,D0
00005BA0  6C0E      10229          bge.s     vsprintf_104
00005BA2  4878 0020 10230          pea       32
00005BA6  2F0A      10231          move.l    A2,-(A7)
00005BA8  4E93      10232          jsr       (A3)
00005BAA  504F      10233          addq.w    #8,A7
00005BAC  5286      10234          addq.l    #1,D6
00005BAE  60E2      10235          bra       vsprintf_102
                    10236   vsprintf_104:
00005BB0  41EE FFD4 10237          lea       -44(A6),A0
00005BB4  2408      10238          move.l    A0,D2
                    10239   vsprintf_105:
00005BB6  2042      10240          move.l    D2,A0
00005BB8  4A10      10241          tst.b     (A0)
00005BBA  6716      10242          beq.s     vsprintf_107
00005BBC  2042      10243          move.l    D2,A0
00005BBE  5282      10244          addq.l    #1,D2
00005BC0  1210      10245          move.b    (A0),D1
00005BC2  4881      10246          ext.w     D1
00005BC4  48C1      10247          ext.l     D1
00005BC6  2F01      10248          move.l    D1,-(A7)
00005BC8  2F0A      10249          move.l    A2,-(A7)
00005BCA  4E93      10250          jsr       (A3)
00005BCC  504F      10251          addq.w    #8,A7
00005BCE  5286      10252          addq.l    #1,D6
00005BD0  60E4      10253          bra       vsprintf_105
                    10254   vsprintf_107:
00005BD2  202E FFFC 10255          move.l    -4(A6),D0
00005BD6  1D40 FFD1 10256          move.b    D0,-47(A6)
                    10257   vsprintf_108:
00005BDA  102E FFD1 10258          move.b    -47(A6),D0
00005BDE  532E FFD1 10259          subq.b    #1,-47(A6)
00005BE2  4A00      10260          tst.b     D0
00005BE4  670E      10261          beq.s     vsprintf_110
00005BE6  4878 0030 10262          pea       48
00005BEA  2F0A      10263          move.l    A2,-(A7)
00005BEC  4E93      10264          jsr       (A3)
00005BEE  504F      10265          addq.w    #8,A7
00005BF0  5286      10266          addq.l    #1,D6
00005BF2  60E6      10267          bra       vsprintf_108
                    10268   vsprintf_110:
00005BF4  2043      10269          move.l    D3,A0
00005BF6  4A10      10270          tst.b     (A0)
00005BF8  6700 0048 10271          beq       vsprintf_113
00005BFC  206E 000C 10272          move.l    12(A6),A0
00005C00  1010      10273          move.b    (A0),D0
00005C02  4880      10274          ext.w     D0
00005C04  48C0      10275          ext.l     D0
00005C06  0C80 0000 10276          cmp.l     #115,D0
00005C0A  0073      
00005C0C  670C      10277          beq.s     vsprintf_116
00005C0E  6E18      10278          bgt.s     vsprintf_119
00005C10  0C80 0000 10279          cmp.l     #99,D0
00005C14  0063      
00005C16  6702      10280          beq.s     vsprintf_116
00005C18  600E      10281          bra.s     vsprintf_119
                    10282   vsprintf_116:
00005C1A  2005      10283          move.l    D5,D0
00005C1C  5385      10284          subq.l    #1,D5
00005C1E  0C80 0000 10285          cmp.l     #0,D0
00005C22  0000      
00005C24  6E02      10286          bgt.s     vsprintf_119
00005C26  6016      10287          bra.s     vsprintf_115
                    10288   vsprintf_119:
00005C28  2043      10289          move.l    D3,A0
00005C2A  5283      10290          addq.l    #1,D3
00005C2C  1210      10291          move.b    (A0),D1
00005C2E  4881      10292          ext.w     D1
00005C30  48C1      10293          ext.l     D1
00005C32  2F01      10294          move.l    D1,-(A7)
00005C34  2F0A      10295          move.l    A2,-(A7)
00005C36  4E93      10296          jsr       (A3)
00005C38  504F      10297          addq.w    #8,A7
00005C3A  5286      10298          addq.l    #1,D6
00005C3C  6002      10299          bra.s     vsprintf_112
                    10300   vsprintf_115:
00005C3E  6002      10301          bra.s     vsprintf_113
                    10302   vsprintf_112:
00005C40  60B2      10303          bra       vsprintf_110
                    10304   vsprintf_113:
00005C42  4A2E FFCD 10305          tst.b     -51(A6)
00005C46  6700 0030 10306          beq       vsprintf_125
00005C4A  4884      10307          ext.w     D4
00005C4C  48C4      10308          ext.l     D4
00005C4E  2004      10309          move.l    D4,D0
00005C50  D0AE FFFC 10310          add.l     -4(A6),D0
00005C54  D087      10311          add.l     D7,D0
00005C56  1D40 FFD1 10312          move.b    D0,-47(A6)
                    10313   vsprintf_123:
00005C5A  102E FFD1 10314          move.b    -47(A6),D0
00005C5E  4880      10315          ext.w     D0
00005C60  48C0      10316          ext.l     D0
00005C62  220D      10317          move.l    A5,D1
00005C64  534D      10318          subq.w    #1,A5
00005C66  B081      10319          cmp.l     D1,D0
00005C68  6C0E      10320          bge.s     vsprintf_125
00005C6A  4878 0020 10321          pea       32
00005C6E  2F0A      10322          move.l    A2,-(A7)
00005C70  4E93      10323          jsr       (A3)
00005C72  504F      10324          addq.w    #8,A7
00005C74  5386      10325          subq.l    #1,D6
00005C76  60E2      10326          bra       vsprintf_123
                    10327   vsprintf_125:
00005C78  6014      10328          bra.s     vsprintf_81
                    10329   vsprintf_80:
00005C7A  206E 000C 10330          move.l    12(A6),A0
00005C7E  1210      10331          move.b    (A0),D1
00005C80  4881      10332          ext.w     D1
00005C82  48C1      10333          ext.l     D1
00005C84  2F01      10334          move.l    D1,-(A7)
00005C86  2F0A      10335          move.l    A2,-(A7)
00005C88  4E93      10336          jsr       (A3)
00005C8A  504F      10337          addq.w    #8,A7
00005C8C  5286      10338          addq.l    #1,D6
                    10339   vsprintf_81:
00005C8E  52AE 000C 10340          addq.l    #1,12(A6)
                    10341   vsprintf_2:
00005C92  6000 F9D6 10342          bra       vsprintf_1
                    10343   vsprintf_3:
00005C96  4A92      10344          tst.l     (A2)
00005C98  6710      10345          beq.s     vsprintf_126
00005C9A  4201      10346          clr.b     D1
00005C9C  C2BC 0000 10347          and.l     #255,D1
00005CA0  00FF      
00005CA2  2F01      10348          move.l    D1,-(A7)
00005CA4  2F0A      10349          move.l    A2,-(A7)
00005CA6  4E93      10350          jsr       (A3)
00005CA8  504F      10351          addq.w    #8,A7
                    10352   vsprintf_126:
00005CAA  2006      10353          move.l    D6,D0
00005CAC  4CDF 3CFC 10354          movem.l   (A7)+,D2/D3/D4/D5/D6/D7/A2/A3/A4/A5
00005CB0  4E5E      10355          unlk      A6
00005CB2  4E75      10356          rts
                    10357   @itoa_convert:
00005CB4  4E56 0000 10358          link      A6,#0
00005CB8  48E7 3C00 10359          movem.l   D2/D3/D4/D5,-(A7)
00005CBC  242E 0008 10360          move.l    8(A6),D2
00005CC0  262E 0010 10361          move.l    16(A6),D3
00005CC4  2A2E 000C 10362          move.l    12(A6),D5
00005CC8  2F05      10363          move.l    D5,-(A7)
00005CCA  2F03      10364          move.l    D3,-(A7)
00005CCC  6100 F6B4 10365          bsr       ULDIV
00005CD0  202F 0004 10366          move.l    4(A7),D0
00005CD4  504F      10367          addq.w    #8,A7
00005CD6  2800      10368          move.l    D0,D4
00005CD8  BA83      10369          cmp.l     D3,D5
00005CDA  651A      10370          blo.s     @itoa_convert_1
00005CDC  2F03      10371          move.l    D3,-(A7)
00005CDE  2F05      10372          move.l    D5,-(A7)
00005CE0  2F03      10373          move.l    D3,-(A7)
00005CE2  6100 F69E 10374          bsr       ULDIV
00005CE6  2217      10375          move.l    (A7),D1
00005CE8  504F      10376          addq.w    #8,A7
00005CEA  2F01      10377          move.l    D1,-(A7)
00005CEC  2F02      10378          move.l    D2,-(A7)
00005CEE  61C4      10379          bsr       @itoa_convert
00005CF0  DEFC 000C 10380          add.w     #12,A7
00005CF4  2400      10381          move.l    D0,D2
                    10382   @itoa_convert_1:
00005CF6  0C84 0000 10383          cmp.l     #9,D4
00005CFA  0009      
00005CFC  6E0A      10384          bgt.s     @itoa_convert_3
00005CFE  2004      10385          move.l    D4,D0
00005D00  0680 0000 10386          add.l     #48,D0
00005D04  0030      
00005D06  600E      10387          bra.s     @itoa_convert_4
                    10388   @itoa_convert_3:
00005D08  2004      10389          move.l    D4,D0
00005D0A  0680 0000 10390          add.l     #97,D0
00005D0E  0061      
00005D10  0480 0000 10391          sub.l     #10,D0
00005D14  000A      
                    10392   @itoa_convert_4:
00005D16  2042      10393          move.l    D2,A0
00005D18  1080      10394          move.b    D0,(A0)
00005D1A  2002      10395          move.l    D2,D0
00005D1C  5280      10396          addq.l    #1,D0
00005D1E  4CDF 003C 10397          movem.l   (A7)+,D2/D3/D4/D5
00005D22  4E5E      10398          unlk      A6
00005D24  4E75      10399          rts
                    10400   _ltoa:
00005D26  4E56 0000 10401          link      A6,#0
00005D2A  48E7 3C00 10402          movem.l   D2/D3/D4/D5,-(A7)
00005D2E  242E 0008 10403          move.l    8(A6),D2
00005D32  262E 000C 10404          move.l    12(A6),D3
00005D36  2A2E 0010 10405          move.l    16(A6),D5
00005D3A  2803      10406          move.l    D3,D4
00005D3C  0C85 0000 10407          cmp.l     #2,D5
00005D40  0002      
00005D42  6D08      10408          blt.s     ltoa_3
00005D44  0C85 0000 10409          cmp.l     #36,D5
00005D48  0024      
00005D4A  6F06      10410          ble.s     ltoa_1
                    10411   ltoa_3:
00005D4C  2003      10412          move.l    D3,D0
00005D4E  6000 0052 10413          bra       ltoa_4
                    10414   ltoa_1:
00005D52  0C85 0000 10415          cmp.l     #10,D5
00005D56  000A      
00005D58  6600 0032 10416          bne       ltoa_5
00005D5C  0C82 0000 10417          cmp.l     #0,D2
00005D60  0000      
00005D62  6C28      10418          bge.s     ltoa_5
00005D64  2002      10419          move.l    D2,D0
00005D66  4480      10420          neg.l     D0
00005D68  2400      10421          move.l    D0,D2
00005D6A  0C82 0000 10422          cmp.l     #0,D2
00005D6E  0000      
00005D70  6C12      10423          bge.s     ltoa_7
00005D72  4879 0000 10424          pea       @itoa_1
00005D76  7690      
00005D78  2F03      10425          move.l    D3,-(A7)
00005D7A  6100 F5F6 10426          bsr       _strcpy
00005D7E  504F      10427          addq.w    #8,A7
00005D80  2003      10428          move.l    D3,D0
00005D82  601E      10429          bra.s     ltoa_4
                    10430   ltoa_7:
00005D84  2044      10431          move.l    D4,A0
00005D86  5284      10432          addq.l    #1,D4
00005D88  10BC 002D 10433          move.b    #45,(A0)
                    10434   ltoa_5:
00005D8C  2F05      10435          move.l    D5,-(A7)
00005D8E  2F02      10436          move.l    D2,-(A7)
00005D90  2F04      10437          move.l    D4,-(A7)
00005D92  6100 FF20 10438          bsr       @itoa_convert
00005D96  DEFC 000C 10439          add.w     #12,A7
00005D9A  2800      10440          move.l    D0,D4
00005D9C  2044      10441          move.l    D4,A0
00005D9E  4210      10442          clr.b     (A0)
00005DA0  2003      10443          move.l    D3,D0
                    10444   ltoa_4:
00005DA2  4CDF 003C 10445          movem.l   (A7)+,D2/D3/D4/D5
00005DA6  4E5E      10446          unlk      A6
00005DA8  4E75      10447          rts
                    10448   _ultoa:
00005DAA  4E56 0000 10449          link      A6,#0
00005DAE  48E7 3800 10450          movem.l   D2/D3/D4,-(A7)
00005DB2  262E 0010 10451          move.l    16(A6),D3
00005DB6  282E 000C 10452          move.l    12(A6),D4
00005DBA  2404      10453          move.l    D4,D2
00005DBC  0C83 0000 10454          cmp.l     #2,D3
00005DC0  0002      
00005DC2  6D08      10455          blt.s     ultoa_3
00005DC4  0C83 0000 10456          cmp.l     #36,D3
00005DC8  0024      
00005DCA  6F04      10457          ble.s     ultoa_1
                    10458   ultoa_3:
00005DCC  2004      10459          move.l    D4,D0
00005DCE  6018      10460          bra.s     ultoa_4
                    10461   ultoa_1:
00005DD0  2F03      10462          move.l    D3,-(A7)
00005DD2  2F2E 0008 10463          move.l    8(A6),-(A7)
00005DD6  2F02      10464          move.l    D2,-(A7)
00005DD8  6100 FEDA 10465          bsr       @itoa_convert
00005DDC  DEFC 000C 10466          add.w     #12,A7
00005DE0  2400      10467          move.l    D0,D2
00005DE2  2042      10468          move.l    D2,A0
00005DE4  4210      10469          clr.b     (A0)
00005DE6  2004      10470          move.l    D4,D0
                    10471   ultoa_4:
00005DE8  4CDF 001C 10472          movem.l   (A7)+,D2/D3/D4
00005DEC  4E5E      10473          unlk      A6
00005DEE  4E75      10474          rts
                    10475   _itoa:
00005DF0  4E56 0000 10476          link      A6,#0
00005DF4  2F2E 0010 10477          move.l    16(A6),-(A7)
00005DF8  2F2E 000C 10478          move.l    12(A6),-(A7)
00005DFC  2F2E 0008 10479          move.l    8(A6),-(A7)
00005E00  6100 FF24 10480          bsr       _ltoa
00005E04  DEFC 000C 10481          add.w     #12,A7
00005E08  4E5E      10482          unlk      A6
00005E0A  4E75      10483          rts
                    10484   ULMUL:
00005E0C  4E56 0000 10485          link    A6,#0
00005E10  48E7 C000 10486          movem.l D0/D1,-(A7)
00005E14  222E 0008 10487          move.l  8(A6),D1
00005E18  202E 000C 10488          move.l  12(A6),D0
00005E1C  602C      10489          bra.s   lmul_3
                    10490   LMUL:
00005E1E  4E56 0000 10491          link    A6,#0
00005E22  48E7 C000 10492          movem.l D0/D1,-(A7)
00005E26  222E 0008 10493          move.l  8(A6),D1
00005E2A  202E 000C 10494          move.l  12(A6),D0
00005E2E  4A80      10495          tst.l   D0
00005E30  6A0A      10496          bpl.s   lmul_1
00005E32  4480      10497          neg.l   D0
00005E34  4A81      10498          tst.l   D1
00005E36  6A0A      10499          bpl.s   lmul_2
00005E38  4481      10500          neg.l   D1
00005E3A  600E      10501          bra.s   lmul_3
                    10502   lmul_1:
00005E3C  4A81      10503          tst.l   D1
00005E3E  6A0A      10504          bpl.s   lmul_3
00005E40  4481      10505          neg.l   D1
                    10506   lmul_2:
00005E42  6114      10507          bsr.s   domul
00005E44  4481      10508          neg.l   D1
00005E46  4080      10509          negx.l  D0
00005E48  6002      10510          bra.s   lmul_4
                    10511   lmul_3:
00005E4A  610C      10512          bsr.s   domul
                    10513   lmul_4:
00005E4C  2D41 0008 10514          move.l  D1,8(A6)
00005E50  4CDF 0003 10515          movem.l (A7)+,D0/D1
00005E54  4E5E      10516          unlk    A6
00005E56  4E75      10517          rts
                    10518   domul:
00005E58  0C81 0000 10519          cmpi.l  #$FFFF,D1
00005E5C  FFFF      
00005E5E  620C      10520          bhi.s   domul_1
00005E60  0C80 0000 10521          cmpi.l  #$FFFF,D0
00005E64  FFFF      
00005E66  620E      10522          bhi.s   domul_2
00005E68  C2C0      10523          mulu    D0,D1
00005E6A  4E75      10524          rts
                    10525   domul_1:
00005E6C  0C80 0000 10526          cmpi.l  #$FFFF,D0
00005E70  FFFF      
00005E72  6218      10527          bhi.s   domul_4
00005E74  6002      10528          bra.s   domul_3
                    10529   domul_2
00005E76  C141      10530          exg     D0,D1
                    10531   domul_3:
00005E78  2F02      10532          move.l  D2,-(A7)
00005E7A  2401      10533          move.l  D1,D2
00005E7C  4842      10534          swap    D2
00005E7E  C2C0      10535          mulu    D0,D1
00005E80  C4C0      10536          mulu    D0,D2
00005E82  4842      10537          swap    D2
00005E84  4242      10538          clr.w   D2
00005E86  D282      10539          add.l   D2,D1
00005E88  241F      10540          move.l  (A7)+,D2
00005E8A  4E75      10541          rts
                    10542   domul_4:
00005E8C  48E7 3000 10543          movem.l D2/D3,-(A7)
00005E90  2401      10544          move.l  D1,D2
00005E92  2601      10545          move.l  D1,D3
00005E94  C2C0      10546          mulu    D0,D1
00005E96  4842      10547          swap    D2
00005E98  C4C0      10548          mulu    D0,D2
00005E9A  4840      10549          swap    D0
00005E9C  C6C0      10550          mulu    D0,D3
00005E9E  D483      10551          add.l   D3,D2
00005EA0  4842      10552          swap    D2
00005EA2  4242      10553          clr.w   D2
00005EA4  D282      10554          add.l   D2,D1
00005EA6  4CDF 000C 10555          movem.l (A7)+,D2/D3
00005EAA  4E75      10556          rts
                    10557   _strlen:
00005EAC  206F 0004 10558          move.l    (4,A7),A0
00005EB0  2248      10559          move.l    A0,A1
                    10560   strlen_1:
00005EB2  4A19      10561          tst.b     (A1)+
00005EB4  66FC      10562          bne       strlen_1
00005EB6  2009      10563          move.l    A1,D0
00005EB8  9088      10564          sub.l     A0,D0
00005EBA  5380      10565          subq.l    #1,D0
00005EBC  4E75      10566          rts
                    10567          section   const
                    10568   
                    10569   @m68kde~1_1:
00005EBE  0D0A 00   10570          dc.b      13,10,0
                    10571   @m68kde~1_2:
00005EC2  0D53 7769 10572          dc.b      13,83,119,105,116,99,104,101,115,32,83,87,91
00005EC6  7463 6865 
00005ECA  7320 5357 
00005ECE  5B        
00005ECF  372D 305D 10573          dc.b      55,45,48,93,32,61,32,0
00005ED3  203D 2000 
                    10574   @m68kde~1_3:
00005ED8  3000      10575          dc.b      48,0
                    10576   @m68kde~1_4:
00005EDA  3100      10577          dc.b      49,0
                    10578   @m68kde~1_5:
00005EDC  0D0A 456E 10579          dc.b      13,10,69,110,116,101,114,32,83,116,97,114,116
00005EE0  7465 7220 
00005EE4  5374 6172 
00005EE8  74        
00005EE9  2041 6464 10580          dc.b      32,65,100,100,114,101,115,115,58,32,0
00005EED  7265 7373 
00005EF1  3A20 00   
                    10581   @m68kde~1_6:
00005EF4  0D0A 3C45 10582          dc.b      13,10,60,69,83,67,62,32,61,32,65,98,111,114
00005EF8  5343 3E20 
00005EFC  3D20 4162 
00005F00  6F72      
00005F02  742C 2053 10583          dc.b      116,44,32,83,80,65,67,69,32,116,111,32,67,111
00005F06  5041 4345 
00005F0A  2074 6F20 
00005F0E  436F      
00005F10  6E74 696E 10584          dc.b      110,116,105,110,117,101,0
00005F14  7565 00   
                    10585   @m68kde~1_7:
00005F18  0D0A 2530 10586          dc.b      13,10,37,48,56,88,32,32,37,48,52,88,32,32,32
00005F1C  3858 2020 
00005F20  2530 3458 
00005F24  2020 20   
00005F27  2020 2020 10587          dc.b      32,32,32,32,32,32,32,32,32,32,32,32,32,32,32
00005F2B  2020 2020 
00005F2F  2020 2020 
00005F33  2020 20   
00005F36  2020 2020 10588          dc.b      32,32,32,32,32,32,37,115,0
00005F3A  2020 2573 
00005F3E  00        
                    10589   @m68kde~1_8:
00005F40  0D0A 2530 10590          dc.b      13,10,37,48,56,88,32,32,37,48,52,88,32,37,48
00005F44  3858 2020 
00005F48  2530 3458 
00005F4C  2025 30   
00005F4F  3458 2020 10591          dc.b      52,88,32,32,32,32,32,32,32,32,32,32,32,32,32
00005F53  2020 2020 
00005F57  2020 2020 
00005F5B  2020 20   
00005F5E  2020 2020 10592          dc.b      32,32,32,32,32,32,37,115,0
00005F62  2020 2573 
00005F66  00        
                    10593   @m68kde~1_9:
00005F68  0D0A 2530 10594          dc.b      13,10,37,48,56,88,32,32,37,48,52,88,32,37,48
00005F6C  3858 2020 
00005F70  2530 3458 
00005F74  2025 30   
00005F77  3458 2025 10595          dc.b      52,88,32,37,48,52,88,32,32,32,32,32,32,32,32
00005F7B  3034 5820 
00005F7F  2020 2020 
00005F83  2020 20   
00005F86  2020 2020 10596          dc.b      32,32,32,32,32,32,37,115,0
00005F8A  2020 2573 
00005F8E  00        
                    10597   @m68kde~1_10:
00005F90  0D0A 2530 10598          dc.b      13,10,37,48,56,88,32,32,37,48,52,88,32,37,48
00005F94  3858 2020 
00005F98  2530 3458 
00005F9C  2025 30   
00005F9F  3458 2025 10599          dc.b      52,88,32,37,48,52,88,32,37,48,52,88,32,32,32
00005FA3  3034 5820 
00005FA7  2530 3458 
00005FAB  2020 20   
00005FAE  2020 2020 10600          dc.b      32,32,32,32,32,32,37,115,0
00005FB2  2020 2573 
00005FB6  00        
                    10601   @m68kde~1_11:
00005FB8  0D0A 2530 10602          dc.b      13,10,37,48,56,88,32,32,37,48,52,88,32,37,48
00005FBC  3858 2020 
00005FC0  2530 3458 
00005FC4  2025 30   
00005FC7  3458 2025 10603          dc.b      52,88,32,37,48,52,88,32,37,48,52,88,32,37,48
00005FCB  3034 5820 
00005FCF  2530 3458 
00005FD3  2025 30   
00005FD6  3458 2020 10604          dc.b      52,88,32,32,32,32,37,115,0
00005FDA  2020 2573 
00005FDE  00        
                    10605   @m68kde~1_12:
00005FE0  0D0A 4475 10606          dc.b      13,10,68,117,109,112,32,77,101,109,111,114,121
00005FE4  6D70 204D 
00005FE8  656D 6F72 
00005FEC  79        
00005FED  2042 6C6F 10607          dc.b      32,66,108,111,99,107,58,32,60,69,83,67,62,32
00005FF1  636B 3A20 
00005FF5  3C45 5343 
00005FF9  3E20      
00005FFB  746F 2041 10608          dc.b      116,111,32,65,98,111,114,116,44,32,60,83,80
00005FFF  626F 7274 
00006003  2C20 3C53 
00006007  50        
00006008  4143 453E 10609          dc.b      65,67,69,62,32,116,111,32,67,111,110,116,105
0000600C  2074 6F20 
00006010  436F 6E74 
00006014  69        
00006015  6E75 6500 10610          dc.b      110,117,101,0
                    10611   @m68kde~1_13:
0000601A  0D0A 456E 10612          dc.b      13,10,69,110,116,101,114,32,83,116,97,114,116
0000601E  7465 7220 
00006022  5374 6172 
00006026  74        
00006027  2041 6464 10613          dc.b      32,65,100,100,114,101,115,115,58,32,0
0000602B  7265 7373 
0000602F  3A20 00   
                    10614   @m68kde~1_14:
00006032  0D0A 2530 10615          dc.b      13,10,37,48,56,120,32,0
00006036  3878 2000 
                    10616   @m68kde~1_15:
0000603A  2530 3258 10617          dc.b      37,48,50,88,0
0000603E  00        
                    10618   @m68kde~1_16:
00006040  2020 00   10619          dc.b      32,32,0
                    10620   @m68kde~1_17:
00006044  0D0A 00   10621          dc.b      13,10,0
                    10622   @m68kde~1_18:
00006048  0D0A 4669 10623          dc.b      13,10,70,105,108,108,32,77,101,109,111,114,121
0000604C  6C6C 204D 
00006050  656D 6F72 
00006054  79        
00006055  2042 6C6F 10624          dc.b      32,66,108,111,99,107,0
00006059  636B 00   
                    10625   @m68kde~1_19:
0000605C  0D0A 456E 10626          dc.b      13,10,69,110,116,101,114,32,83,116,97,114,116
00006060  7465 7220 
00006064  5374 6172 
00006068  74        
00006069  2041 6464 10627          dc.b      32,65,100,100,114,101,115,115,58,32,0
0000606D  7265 7373 
00006071  3A20 00   
                    10628   @m68kde~1_20:
00006074  0D0A 456E 10629          dc.b      13,10,69,110,116,101,114,32,69,110,100,32,65
00006078  7465 7220 
0000607C  456E 6420 
00006080  41        
00006081  6464 7265 10630          dc.b      100,100,114,101,115,115,58,32,0
00006085  7373 3A20 
00006089  00        
                    10631   @m68kde~1_21:
0000608A  0D0A 456E 10632          dc.b      13,10,69,110,116,101,114,32,70,105,108,108,32
0000608E  7465 7220 
00006092  4669 6C6C 
00006096  20        
00006097  4461 7461 10633          dc.b      68,97,116,97,58,32,0
0000609B  3A20 00   
                    10634   @m68kde~1_22:
0000609E  0D0A 4669 10635          dc.b      13,10,70,105,108,108,105,110,103,32,65,100,100
000060A2  6C6C 696E 
000060A6  6720 4164 
000060AA  64        
000060AB  7265 7373 10636          dc.b      114,101,115,115,101,115,32,91,36,37,48,56,88
000060AF  6573 205B 
000060B3  2425 3038 
000060B7  58        
000060B8  202D 2024 10637          dc.b      32,45,32,36,37,48,56,88,93,32,119,105,116,104
000060BC  2530 3858 
000060C0  5D20 7769 
000060C4  7468      
000060C6  2024 2530 10638          dc.b      32,36,37,48,50,88,0
000060CA  3258 00   
                    10639   @m68kde~1_23:
000060CE  0D0A 5573 10640          dc.b      13,10,85,115,101,32,72,121,112,101,114,84,101
000060D2  6520 4879 
000060D6  7065 7254 
000060DA  65        
000060DB  726D 696E 10641          dc.b      114,109,105,110,97,108,32,116,111,32,83,101
000060DF  616C 2074 
000060E3  6F20 5365 
000060E7  6E64 2054 10642          dc.b      110,100,32,84,101,120,116,32,70,105,108,101
000060EB  6578 7420 
000060EF  4669 6C65 
000060F3  2028 2E68 10643          dc.b      32,40,46,104,101,120,41,13,10,0
000060F7  6578 290D 
000060FB  0A00      
                    10644   @m68kde~1_24:
000060FE  0D0A 4C6F 10645          dc.b      13,10,76,111,97,100,32,70,97,105,108,101,100
00006102  6164 2046 
00006106  6169 6C65 
0000610A  64        
0000610B  2061 7420 10646          dc.b      32,97,116,32,65,100,100,114,101,115,115,32,61
0000610F  4164 6472 
00006113  6573 7320 
00006117  3D        
00006118  205B 2425 10647          dc.b      32,91,36,37,48,56,88,93,13,10,0
0000611C  3038 585D 
00006120  0D0A 00   
                    10648   @m68kde~1_25:
00006124  0D0A 5375 10649          dc.b      13,10,83,117,99,99,101,115,115,58,32,68,111
00006128  6363 6573 
0000612C  733A 2044 
00006130  6F        
00006131  776E 6C6F 10650          dc.b      119,110,108,111,97,100,101,100,32,37,100,32
00006135  6164 6564 
00006139  2025 6420 
0000613D  6279 7465 10651          dc.b      98,121,116,101,115,13,10,0
00006141  730D 0A00 
                    10652   @m68kde~1_26:
00006146  0D0A 4578 10653          dc.b      13,10,69,120,97,109,105,110,101,32,97,110,100
0000614A  616D 696E 
0000614E  6520 616E 
00006152  64        
00006153  2043 6861 10654          dc.b      32,67,104,97,110,103,101,32,77,101,109,111,114
00006157  6E67 6520 
0000615B  4D65 6D6F 
0000615F  72        
00006160  7900      10655          dc.b      121,0
                    10656   @m68kde~1_27:
00006162  0D0A 3C45 10657          dc.b      13,10,60,69,83,67,62,32,116,111,32,83,116,111
00006166  5343 3E20 
0000616A  746F 2053 
0000616E  746F      
00006170  702C 203C 10658          dc.b      112,44,32,60,83,80,65,67,69,62,32,116,111,32
00006174  5350 4143 
00006178  453E 2074 
0000617C  6F20      
0000617E  4164 7661 10659          dc.b      65,100,118,97,110,99,101,44,32,39,45,39,32,116
00006182  6E63 652C 
00006186  2027 2D27 
0000618A  2074      
0000618C  6F20 476F 10660          dc.b      111,32,71,111,32,66,97,99,107,44,32,60,68,65
00006190  2042 6163 
00006194  6B2C 203C 
00006198  4441      
0000619A  5441 3E20 10661          dc.b      84,65,62,32,116,111,32,99,104,97,110,103,101
0000619E  746F 2063 
000061A2  6861 6E67 
000061A6  65        
000061A7  00        10662          dc.b      0
                    10663   @m68kde~1_28:
000061A8  0D0A 456E 10664          dc.b      13,10,69,110,116,101,114,32,65,100,100,114,101
000061AC  7465 7220 
000061B0  4164 6472 
000061B4  65        
000061B5  7373 3A20 10665          dc.b      115,115,58,32,0
000061B9  00        
                    10666   @m68kde~1_29:
000061BA  0D0A 5B25 10667          dc.b      13,10,91,37,48,56,120,93,32,58,32,37,48,50,120
000061BE  3038 785D 
000061C2  203A 2025 
000061C6  3032 78   
000061C9  2020 00   10668          dc.b      32,32,0
                    10669   @m68kde~1_30:
000061CC  0D0A 5761 10670          dc.b      13,10,87,97,114,110,105,110,103,32,67,104,97
000061D0  726E 696E 
000061D4  6720 4368 
000061D8  61        
000061D9  6E67 6520 10671          dc.b      110,103,101,32,70,97,105,108,101,100,58,32,87
000061DD  4661 696C 
000061E1  6564 3A20 
000061E5  57        
000061E6  726F 7465 10672          dc.b      114,111,116,101,32,91,37,48,50,120,93,44,32
000061EA  205B 2530 
000061EE  3278 5D2C 
000061F2  20        
000061F3  5265 6164 10673          dc.b      82,101,97,100,32,91,37,48,50,120,93,0
000061F7  205B 2530 
000061FB  3278 5D00 
                    10674   @m68kde~1_31:
00006200  0D0A 4C6F 10675          dc.b      13,10,76,111,97,100,105,110,103,32,80,114,111
00006204  6164 696E 
00006208  6720 5072 
0000620C  6F        
0000620D  6772 616D 10676          dc.b      103,114,97,109,32,70,114,111,109,32,83,80,73
00006211  2046 726F 
00006215  6D20 5350 
00006219  49        
0000621A  2046 6C61 10677          dc.b      32,70,108,97,115,104,46,46,46,46,0
0000621E  7368 2E2E 
00006222  2E2E 00   
                    10678   @m68kde~1_32:
00006226  2425 3038 10679          dc.b      36,37,48,56,88,32,32,0
0000622A  5820 2000 
                    10680   @m68kde~1_33:
0000622E  2530 3258 10681          dc.b      37,48,50,88,0
00006232  00        
                    10682   @m68kde~1_34:
00006234  2000      10683          dc.b      32,0
                    10684   @m68kde~1_35:
00006236  2020 00   10685          dc.b      32,32,0
                    10686   @m68kde~1_36:
0000623A  2E00      10687          dc.b      46,0
                    10688   @m68kde~1_37:
0000623C  2563 00   10689          dc.b      37,99,0
                    10690   @m68kde~1_38:
00006240  00        10691          dc.b      0
                    10692   @m68kde~1_39:
00006242  0D0A 0D0A 10693          dc.b      13,10,13,10,32,68,48,32,61,32,36,37,48,56,88
00006246  2044 3020 
0000624A  3D20 2425 
0000624E  3038 58   
00006251  2020 4130 10694          dc.b      32,32,65,48,32,61,32,36,37,48,56,88,0
00006255  203D 2024 
00006259  2530 3858 
0000625D  00        
                    10695   @m68kde~1_40:
0000625E  0D0A 2044 10696          dc.b      13,10,32,68,49,32,61,32,36,37,48,56,88,32,32
00006262  3120 3D20 
00006266  2425 3038 
0000626A  5820 20   
0000626D  4131 203D 10697          dc.b      65,49,32,61,32,36,37,48,56,88,0
00006271  2024 2530 
00006275  3858 00   
                    10698   @m68kde~1_41:
00006278  0D0A 2044 10699          dc.b      13,10,32,68,50,32,61,32,36,37,48,56,88,32,32
0000627C  3220 3D20 
00006280  2425 3038 
00006284  5820 20   
00006287  4132 203D 10700          dc.b      65,50,32,61,32,36,37,48,56,88,0
0000628B  2024 2530 
0000628F  3858 00   
                    10701   @m68kde~1_42:
00006292  0D0A 2044 10702          dc.b      13,10,32,68,51,32,61,32,36,37,48,56,88,32,32
00006296  3320 3D20 
0000629A  2425 3038 
0000629E  5820 20   
000062A1  4133 203D 10703          dc.b      65,51,32,61,32,36,37,48,56,88,0
000062A5  2024 2530 
000062A9  3858 00   
                    10704   @m68kde~1_43:
000062AC  0D0A 2044 10705          dc.b      13,10,32,68,52,32,61,32,36,37,48,56,88,32,32
000062B0  3420 3D20 
000062B4  2425 3038 
000062B8  5820 20   
000062BB  4134 203D 10706          dc.b      65,52,32,61,32,36,37,48,56,88,0
000062BF  2024 2530 
000062C3  3858 00   
                    10707   @m68kde~1_44:
000062C6  0D0A 2044 10708          dc.b      13,10,32,68,53,32,61,32,36,37,48,56,88,32,32
000062CA  3520 3D20 
000062CE  2425 3038 
000062D2  5820 20   
000062D5  4135 203D 10709          dc.b      65,53,32,61,32,36,37,48,56,88,0
000062D9  2024 2530 
000062DD  3858 00   
                    10710   @m68kde~1_45:
000062E0  0D0A 2044 10711          dc.b      13,10,32,68,54,32,61,32,36,37,48,56,88,32,32
000062E4  3620 3D20 
000062E8  2425 3038 
000062EC  5820 20   
000062EF  4136 203D 10712          dc.b      65,54,32,61,32,36,37,48,56,88,0
000062F3  2024 2530 
000062F7  3858 00   
                    10713   @m68kde~1_46:
000062FA  0D0A 2044 10714          dc.b      13,10,32,68,55,32,61,32,36,37,48,56,88,32,32
000062FE  3720 3D20 
00006302  2425 3038 
00006306  5820 20   
00006309  4137 203D 10715          dc.b      65,55,32,61,32,36,37,48,56,88,0
0000630D  2024 2530 
00006311  3858 00   
                    10716   @m68kde~1_47:
00006314  0D0A 0D0A 10717          dc.b      13,10,13,10,85,83,80,32,61,32,36,37,48,56,88
00006318  5553 5020 
0000631C  3D20 2425 
00006320  3038 58   
00006323  2020 2841 10718          dc.b      32,32,40,65,55,41,32,85,115,101,114,32,83,80
00006327  3729 2055 
0000632B  7365 7220 
0000632F  5350      
00006331  00        10719          dc.b      0
                    10720   @m68kde~1_48:
00006332  0D0A 5353 10721          dc.b      13,10,83,83,80,32,61,32,36,37,48,56,88,32,32
00006336  5020 3D20 
0000633A  2425 3038 
0000633E  5820 20   
00006341  2841 3729 10722          dc.b      40,65,55,41,32,83,117,112,101,114,118,105,115
00006345  2053 7570 
00006349  6572 7669 
0000634D  73        
0000634E  6F72 2053 10723          dc.b      111,114,32,83,80,0
00006352  5000      
                    10724   @m68kde~1_49:
00006354  0D0A 2053 10725          dc.b      13,10,32,83,82,32,61,32,36,37,48,52,88,32,32
00006358  5220 3D20 
0000635C  2425 3034 
00006360  5820 20   
00006363  2000      10726          dc.b      32,0
                    10727   @m68kde~1_50:
00006366  2020 205B 10728          dc.b      32,32,32,91,0
0000636A  00        
                    10729   @m68kde~1_51:
0000636C  0D0A 2050 10730          dc.b      13,10,32,80,67,32,61,32,36,37,48,56,88,32,32
00006370  4320 3D20 
00006374  2425 3038 
00006378  5820 20   
0000637B  00        10731          dc.b      0
                    10732   @m68kde~1_52:
0000637C  2573 00   10733          dc.b      37,115,0
                    10734   @m68kde~1_53:
00006380  5B42 5245 10735          dc.b      91,66,82,69,65,75,80,79,73,78,84,93,0
00006384  414B 504F 
00006388  494E 545D 
0000638C  00        
                    10736   @m68kde~1_54:
0000638E  0D0A 00   10737          dc.b      13,10,0
                    10738   @m68kde~1_55:
00006392  0D0A 5750 10739          dc.b      13,10,87,80,37,100,32,61,32,37,115,0
00006396  2564 203D 
0000639A  2025 7300 
                    10740   @m68kde~1_56:
0000639E  0D0A 0D0A 10741          dc.b      13,10,13,10,13,10,13,10,13,10,13,10,83,105,110
000063A2  0D0A 0D0A 
000063A6  0D0A 0D0A 
000063AA  5369 6E   
000063AD  676C 6520 10742          dc.b      103,108,101,32,83,116,101,112,32,32,58,91,79
000063B1  5374 6570 
000063B5  2020 3A5B 
000063B9  4F        
000063BA  4E5D 00   10743          dc.b      78,93,0
                    10744   @m68kde~1_57:
000063BE  0D0A 4272 10745          dc.b      13,10,66,114,101,97,107,32,80,111,105,110,116
000063C2  6561 6B20 
000063C6  506F 696E 
000063CA  74        
000063CB  7320 3A5B 10746          dc.b      115,32,58,91,68,105,115,97,98,108,101,100,93
000063CF  4469 7361 
000063D3  626C 6564 
000063D7  5D        
000063D8  00        10747          dc.b      0
                    10748   @m68kde~1_58:
000063DA  0D0A 5072 10749          dc.b      13,10,80,114,101,115,115,32,60,83,80,65,67,69
000063DE  6573 7320 
000063E2  3C53 5041 
000063E6  4345      
000063E8  3E20 746F 10750          dc.b      62,32,116,111,32,69,120,101,99,117,116,101,32
000063EC  2045 7865 
000063F0  6375 7465 
000063F4  20        
000063F5  4E65 7874 10751          dc.b      78,101,120,116,32,73,110,115,116,114,117,99
000063F9  2049 6E73 
000063FD  7472 7563 
00006401  7469 6F6E 10752          dc.b      116,105,111,110,0
00006405  00        
                    10753   @m68kde~1_59:
00006406  0D0A 5072 10754          dc.b      13,10,80,114,101,115,115,32,60,69,83,67,62,32
0000640A  6573 7320 
0000640E  3C45 5343 
00006412  3E20      
00006414  746F 2052 10755          dc.b      116,111,32,82,101,115,117,109,101,32,80,114
00006418  6573 756D 
0000641C  6520 5072 
00006420  6F67 7261 10756          dc.b      111,103,114,97,109,0
00006424  6D00      
                    10757   @m68kde~1_60:
00006426  0D0A 496C 10758          dc.b      13,10,73,108,108,101,103,97,108,32,68,97,116
0000642A  6C65 6761 
0000642E  6C20 4461 
00006432  74        
00006433  6120 5265 10759          dc.b      97,32,82,101,103,105,115,116,101,114,32,58,32
00006437  6769 7374 
0000643B  6572 203A 
0000643F  20        
00006440  5573 6520 10760          dc.b      85,115,101,32,68,48,45,68,55,46,46,46,46,46
00006444  4430 2D44 
00006448  372E 2E2E 
0000644C  2E2E      
0000644E  0D0A 00   10761          dc.b      13,10,0
                    10762   @m68kde~1_61:
00006452  0D0A 4425 10763          dc.b      13,10,68,37,99,32,61,32,0
00006456  6320 3D20 
0000645A  00        
                    10764   @m68kde~1_62:
0000645C  0D0A 496C 10765          dc.b      13,10,73,108,108,101,103,97,108,32,65,100,100
00006460  6C65 6761 
00006464  6C20 4164 
00006468  64        
00006469  7265 7373 10766          dc.b      114,101,115,115,32,82,101,103,105,115,116,101
0000646D  2052 6567 
00006471  6973 7465 
00006475  7220 3A20 10767          dc.b      114,32,58,32,85,115,101,32,65,48,45,65,55,46
00006479  5573 6520 
0000647D  4130 2D41 
00006481  372E      
00006483  2E2E 2E2E 10768          dc.b      46,46,46,46,13,10,0
00006487  0D0A 00   
                    10769   @m68kde~1_63:
0000648A  0D0A 4125 10770          dc.b      13,10,65,37,99,32,61,32,0
0000648E  6320 3D20 
00006492  00        
                    10771   @m68kde~1_64:
00006494  0D0A 5573 10772          dc.b      13,10,85,115,101,114,32,83,80,32,61,32,0
00006498  6572 2053 
0000649C  5020 3D20 
000064A0  00        
                    10773   @m68kde~1_65:
000064A2  0D0A 496C 10774          dc.b      13,10,73,108,108,101,103,97,108,32,82,101,103
000064A6  6C65 6761 
000064AA  6C20 5265 
000064AE  67        
000064AF  6973 7465 10775          dc.b      105,115,116,101,114,46,46,46,46,0
000064B3  722E 2E2E 
000064B7  2E00      
                    10776   @m68kde~1_66:
000064BA  0D0A 5379 10777          dc.b      13,10,83,121,115,116,101,109,32,83,80,32,61
000064BE  7374 656D 
000064C2  2053 5020 
000064C6  3D        
000064C7  2000      10778          dc.b      32,0
                    10779   @m68kde~1_67:
000064CA  0D0A 496C 10780          dc.b      13,10,73,108,108,101,103,97,108,32,82,101,103
000064CE  6C65 6761 
000064D2  6C20 5265 
000064D6  67        
000064D7  6973 7465 10781          dc.b      105,115,116,101,114,46,46,46,46,0
000064DB  722E 2E2E 
000064DF  2E00      
                    10782   @m68kde~1_68:
000064E2  0D0A 5043 10783          dc.b      13,10,80,67,32,61,32,0
000064E6  203D 2000 
                    10784   @m68kde~1_69:
000064EA  0D0A 5352 10785          dc.b      13,10,83,82,32,61,32,0
000064EE  203D 2000 
                    10786   @m68kde~1_70:
000064F2  0D0A 496C 10787          dc.b      13,10,73,108,108,101,103,97,108,32,82,101,103
000064F6  6C65 6761 
000064FA  6C20 5265 
000064FE  67        
000064FF  6973 7465 10788          dc.b      105,115,116,101,114,58,32,85,115,101,32,65,48
00006503  723A 2055 
00006507  7365 2041 
0000650B  30        
0000650C  2D41 372C 10789          dc.b      45,65,55,44,32,68,48,45,68,55,44,32,83,83,80
00006510  2044 302D 
00006514  4437 2C20 
00006518  5353 50   
0000651B  2C20 5553 10790          dc.b      44,32,85,83,80,44,32,80,67,32,111,114,32,83
0000651F  502C 2050 
00006523  4320 6F72 
00006527  2053      
00006529  520D 0A00 10791          dc.b      82,13,10,0
                    10792   @m68kde~1_71:
0000652E  0D0A 0D0A 10793          dc.b      13,10,13,10,78,117,109,32,32,32,32,32,65,100
00006532  4E75 6D20 
00006536  2020 2020 
0000653A  4164      
0000653C  6472 6573 10794          dc.b      100,114,101,115,115,32,32,32,32,32,32,73,110
00006540  7320 2020 
00006544  2020 2049 
00006548  6E        
00006549  7374 7275 10795          dc.b      115,116,114,117,99,116,105,111,110,0
0000654D  6374 696F 
00006551  6E00      
                    10796   @m68kde~1_72:
00006554  0D0A 2D2D 10797          dc.b      13,10,45,45,45,32,32,32,32,32,45,45,45,45,45
00006558  2D20 2020 
0000655C  2020 2D2D 
00006560  2D2D 2D   
00006563  2D2D 2D2D 10798          dc.b      45,45,45,45,32,32,32,32,45,45,45,45,45,45,45
00006567  2020 2020 
0000656B  2D2D 2D2D 
0000656F  2D2D 2D   
00006572  2D2D 2D2D 10799          dc.b      45,45,45,45,0
00006576  00        
                    10800   @m68kde~1_73:
00006578  0D0A 4E6F 10801          dc.b      13,10,78,111,32,66,114,101,97,107,80,111,105
0000657C  2042 7265 
00006580  616B 506F 
00006584  69        
00006585  6E74 7320 10802          dc.b      110,116,115,32,83,101,116,0
00006589  5365 7400 
                    10803   @m68kde~1_74:
0000658E  0D0A 2533 10804          dc.b      13,10,37,51,100,32,32,32,32,32,36,37,48,56,120
00006592  6420 2020 
00006596  2020 2425 
0000659A  3038 78   
0000659D  00        10805          dc.b      0
                    10806   @m68kde~1_75:
0000659E  2020 2020 10807          dc.b      32,32,32,32,37,115,0
000065A2  2573 00   
                    10808   @m68kde~1_76:
000065A6  0D0A 00   10809          dc.b      13,10,0
                    10810   @m68kde~1_77:
000065AA  0D0A 4E75 10811          dc.b      13,10,78,117,109,32,32,32,32,32,65,100,100,114
000065AE  6D20 2020 
000065B2  2020 4164 
000065B6  6472      
000065B8  6573 7300 10812          dc.b      101,115,115,0
                    10813   @m68kde~1_78:
000065BC  0D0A 2D2D 10814          dc.b      13,10,45,45,45,32,32,32,32,32,45,45,45,45,45
000065C0  2D20 2020 
000065C4  2020 2D2D 
000065C8  2D2D 2D   
000065CB  2D2D 2D2D 10815          dc.b      45,45,45,45,0
000065CF  00        
                    10816   @m68kde~1_79:
000065D0  0D0A 4E6F 10817          dc.b      13,10,78,111,32,87,97,116,99,104,80,111,105
000065D4  2057 6174 
000065D8  6368 506F 
000065DC  69        
000065DD  6E74 7320 10818          dc.b      110,116,115,32,83,101,116,0
000065E1  5365 7400 
                    10819   @m68kde~1_80:
000065E6  0D0A 2533 10820          dc.b      13,10,37,51,100,32,32,32,32,32,36,37,48,56,120
000065EA  6420 2020 
000065EE  2020 2425 
000065F2  3038 78   
000065F5  00        10821          dc.b      0
                    10822   @m68kde~1_81:
000065F6  0D0A 00   10823          dc.b      13,10,0
                    10824   @m68kde~1_82:
000065FA  0D0A 456E 10825          dc.b      13,10,69,110,116,101,114,32,66,114,101,97,107
000065FE  7465 7220 
00006602  4272 6561 
00006606  6B        
00006607  2050 6F69 10826          dc.b      32,80,111,105,110,116,32,78,117,109,98,101,114
0000660B  6E74 204E 
0000660F  756D 6265 
00006613  72        
00006614  3A20 00   10827          dc.b      58,32,0
                    10828   @m68kde~1_83:
00006618  0D0A 496C 10829          dc.b      13,10,73,108,108,101,103,97,108,32,82,97,110
0000661C  6C65 6761 
00006620  6C20 5261 
00006624  6E        
00006625  6765 203A 10830          dc.b      103,101,32,58,32,85,115,101,32,48,32,45,32,55
00006629  2055 7365 
0000662D  2030 202D 
00006631  2037      
00006633  00        10831          dc.b      0
                    10832   @m68kde~1_84:
00006634  0D0A 4272 10833          dc.b      13,10,66,114,101,97,107,32,80,111,105,110,116
00006638  6561 6B20 
0000663C  506F 696E 
00006640  74        
00006641  2043 6C65 10834          dc.b      32,67,108,101,97,114,101,100,46,46,46,46,46
00006645  6172 6564 
00006649  2E2E 2E2E 
0000664D  2E        
0000664E  0D0A 00   10835          dc.b      13,10,0
                    10836   @m68kde~1_85:
00006652  0D0A 4272 10837          dc.b      13,10,66,114,101,97,107,32,80,111,105,110,116
00006656  6561 6B20 
0000665A  506F 696E 
0000665E  74        
0000665F  2077 6173 10838          dc.b      32,119,97,115,110,39,116,32,83,101,116,46,46
00006663  6E27 7420 
00006667  5365 742E 
0000666B  2E        
0000666C  2E2E 2E00 10839          dc.b      46,46,46,0
                    10840   @m68kde~1_86:
00006670  0D0A 456E 10841          dc.b      13,10,69,110,116,101,114,32,87,97,116,99,104
00006674  7465 7220 
00006678  5761 7463 
0000667C  68        
0000667D  2050 6F69 10842          dc.b      32,80,111,105,110,116,32,78,117,109,98,101,114
00006681  6E74 204E 
00006685  756D 6265 
00006689  72        
0000668A  3A20 00   10843          dc.b      58,32,0
                    10844   @m68kde~1_87:
0000668E  0D0A 496C 10845          dc.b      13,10,73,108,108,101,103,97,108,32,82,97,110
00006692  6C65 6761 
00006696  6C20 5261 
0000669A  6E        
0000669B  6765 203A 10846          dc.b      103,101,32,58,32,85,115,101,32,48,32,45,32,55
0000669F  2055 7365 
000066A3  2030 202D 
000066A7  2037      
000066A9  00        10847          dc.b      0
                    10848   @m68kde~1_88:
000066AA  0D0A 5761 10849          dc.b      13,10,87,97,116,99,104,32,80,111,105,110,116
000066AE  7463 6820 
000066B2  506F 696E 
000066B6  74        
000066B7  2043 6C65 10850          dc.b      32,67,108,101,97,114,101,100,46,46,46,46,46
000066BB  6172 6564 
000066BF  2E2E 2E2E 
000066C3  2E        
000066C4  0D0A 00   10851          dc.b      13,10,0
                    10852   @m68kde~1_89:
000066C8  0D0A 5761 10853          dc.b      13,10,87,97,116,99,104,32,80,111,105,110,116
000066CC  7463 6820 
000066D0  506F 696E 
000066D4  74        
000066D5  2057 6173 10854          dc.b      32,87,97,115,32,110,111,116,32,83,101,116,46
000066D9  206E 6F74 
000066DD  2053 6574 
000066E1  2E        
000066E2  2E2E 2E2E 10855          dc.b      46,46,46,46,0
000066E6  00        
                    10856   @m68kde~1_90:
000066E8  0D0A 4E6F 10857          dc.b      13,10,78,111,32,70,82,69,69,32,66,114,101,97
000066EC  2046 5245 
000066F0  4520 4272 
000066F4  6561      
000066F6  6B20 506F 10858          dc.b      107,32,80,111,105,110,116,115,46,46,46,46,46
000066FA  696E 7473 
000066FE  2E2E 2E2E 
00006702  2E        
00006703  00        10859          dc.b      0
                    10860   @m68kde~1_91:
00006704  0D0A 4272 10861          dc.b      13,10,66,114,101,97,107,32,80,111,105,110,116
00006708  6561 6B20 
0000670C  506F 696E 
00006710  74        
00006711  2041 6464 10862          dc.b      32,65,100,100,114,101,115,115,58,32,0
00006715  7265 7373 
00006719  3A20 00   
                    10863   @m68kde~1_92:
0000671C  0D0A 4572 10864          dc.b      13,10,69,114,114,111,114,32,58,32,66,114,101
00006720  726F 7220 
00006724  3A20 4272 
00006728  65        
00006729  616B 2050 10865          dc.b      97,107,32,80,111,105,110,116,115,32,67,65,78
0000672D  6F69 6E74 
00006731  7320 4341 
00006735  4E        
00006736  4E4F 5420 10866          dc.b      78,79,84,32,98,101,32,115,101,116,32,97,116
0000673A  6265 2073 
0000673E  6574 2061 
00006742  74        
00006743  204F 4444 10867          dc.b      32,79,68,68,32,97,100,100,114,101,115,115,101
00006747  2061 6464 
0000674B  7265 7373 
0000674F  65        
00006750  7300      10868          dc.b      115,0
                    10869   @m68kde~1_93:
00006752  0D0A 4572 10870          dc.b      13,10,69,114,114,111,114,32,58,32,66,114,101
00006756  726F 7220 
0000675A  3A20 4272 
0000675E  65        
0000675F  616B 2050 10871          dc.b      97,107,32,80,111,105,110,116,115,32,67,65,78
00006763  6F69 6E74 
00006767  7320 4341 
0000676B  4E        
0000676C  4E4F 5420 10872          dc.b      78,79,84,32,98,101,32,115,101,116,32,102,111
00006770  6265 2073 
00006774  6574 2066 
00006778  6F        
00006779  7220 524F 10873          dc.b      114,32,82,79,77,32,105,110,32,82,97,110,103
0000677D  4D20 696E 
00006781  2052 616E 
00006785  67        
00006786  6520 3A20 10874          dc.b      101,32,58,32,91,36,48,45,36,48,48,48,48,55,70
0000678A  5B24 302D 
0000678E  2430 3030 
00006792  3037 46   
00006795  4646 5D00 10875          dc.b      70,70,93,0
                    10876   @m68kde~1_94:
0000679A  0D0A 4572 10877          dc.b      13,10,69,114,114,111,114,58,32,66,114,101,97
0000679E  726F 723A 
000067A2  2042 7265 
000067A6  61        
000067A7  6B20 506F 10878          dc.b      107,32,80,111,105,110,116,32,65,108,114,101
000067AB  696E 7420 
000067AF  416C 7265 
000067B3  6164 7920 10879          dc.b      97,100,121,32,69,120,105,115,116,115,32,97,116
000067B7  4578 6973 
000067BB  7473 2061 
000067BF  74        
000067C0  2041 6464 10880          dc.b      32,65,100,100,114,101,115,115,32,58,32,37,48
000067C4  7265 7373 
000067C8  203A 2025 
000067CC  30        
000067CD  3878 0D0A 10881          dc.b      56,120,13,10,0
000067D1  00        
                    10882   @m68kde~1_95:
000067D2  0D0A 4272 10883          dc.b      13,10,66,114,101,97,107,32,80,111,105,110,116
000067D6  6561 6B20 
000067DA  506F 696E 
000067DE  74        
000067DF  2053 6574 10884          dc.b      32,83,101,116,32,97,116,32,65,100,100,114,101
000067E3  2061 7420 
000067E7  4164 6472 
000067EB  65        
000067EC  7373 3A20 10885          dc.b      115,115,58,32,91,36,37,48,56,120,93,44,32,73
000067F0  5B24 2530 
000067F4  3878 5D2C 
000067F8  2049      
000067FA  6E73 7472 10886          dc.b      110,115,116,114,117,99,116,105,111,110,32,61
000067FE  7563 7469 
00006802  6F6E 203D 
00006806  2025 7300 10887          dc.b      32,37,115,0
                    10888   @m68kde~1_96:
0000680A  0D0A 00   10889          dc.b      13,10,0
                    10890   @m68kde~1_97:
0000680E  0D0A 4E6F 10891          dc.b      13,10,78,111,32,70,82,69,69,32,87,97,116,99
00006812  2046 5245 
00006816  4520 5761 
0000681A  7463      
0000681C  6820 506F 10892          dc.b      104,32,80,111,105,110,116,115,46,46,46,46,46
00006820  696E 7473 
00006824  2E2E 2E2E 
00006828  2E        
00006829  00        10893          dc.b      0
                    10894   @m68kde~1_98:
0000682A  0D0A 5761 10895          dc.b      13,10,87,97,116,99,104,32,80,111,105,110,116
0000682E  7463 6820 
00006832  506F 696E 
00006836  74        
00006837  2041 6464 10896          dc.b      32,65,100,100,114,101,115,115,58,32,0
0000683B  7265 7373 
0000683F  3A20 00   
                    10897   @m68kde~1_99:
00006842  0D0A 4572 10898          dc.b      13,10,69,114,114,111,114,58,32,87,97,116,99
00006846  726F 723A 
0000684A  2057 6174 
0000684E  63        
0000684F  6820 506F 10899          dc.b      104,32,80,111,105,110,116,32,65,108,114,101
00006853  696E 7420 
00006857  416C 7265 
0000685B  6164 7920 10900          dc.b      97,100,121,32,83,101,116,32,97,116,32,65,100
0000685F  5365 7420 
00006863  6174 2041 
00006867  64        
00006868  6472 6573 10901          dc.b      100,114,101,115,115,32,58,32,37,48,56,120,13
0000686C  7320 3A20 
00006870  2530 3878 
00006874  0D        
00006875  0A00      10902          dc.b      10,0
                    10903   @m68kde~1_100:
00006878  0D0A 5761 10904          dc.b      13,10,87,97,116,99,104,32,80,111,105,110,116
0000687C  7463 6820 
00006880  506F 696E 
00006884  74        
00006885  2053 6574 10905          dc.b      32,83,101,116,32,97,116,32,65,100,100,114,101
00006889  2061 7420 
0000688D  4164 6472 
00006891  65        
00006892  7373 3A20 10906          dc.b      115,115,58,32,91,36,37,48,56,120,93,0
00006896  5B24 2530 
0000689A  3878 5D00 
                    10907   @m68kde~1_101:
0000689E  0D0A 00   10908          dc.b      13,10,0
                    10909   @m68kde~1_102:
000068A2  0D0A 0D0A 10910          dc.b      13,10,13,10,13,10,13,10,64,66,82,69,65,75,80
000068A6  0D0A 0D0A 
000068AA  4042 5245 
000068AE  414B 50   
000068B1  4F49 4E54 10911          dc.b      79,73,78,84,0
000068B5  00        
                    10912   @m68kde~1_103:
000068B6  0D0A 5369 10913          dc.b      13,10,83,105,110,103,108,101,32,83,116,101,112
000068BA  6E67 6C65 
000068BE  2053 7465 
000068C2  70        
000068C3  203A 205B 10914          dc.b      32,58,32,91,79,78,93,0
000068C7  4F4E 5D00 
                    10915   @m68kde~1_104:
000068CC  0D0A 4272 10916          dc.b      13,10,66,114,101,97,107,80,111,105,110,116,115
000068D0  6561 6B50 
000068D4  6F69 6E74 
000068D8  73        
000068D9  203A 205B 10917          dc.b      32,58,32,91,69,110,97,98,108,101,100,93,0
000068DD  456E 6162 
000068E1  6C65 645D 
000068E5  00        
                    10918   @m68kde~1_105:
000068E6  0D0A 5072 10919          dc.b      13,10,80,114,101,115,115,32,60,83,80,65,67,69
000068EA  6573 7320 
000068EE  3C53 5041 
000068F2  4345      
000068F4  3E20 746F 10920          dc.b      62,32,116,111,32,69,120,101,99,117,116,101,32
000068F8  2045 7865 
000068FC  6375 7465 
00006900  20        
00006901  4E65 7874 10921          dc.b      78,101,120,116,32,73,110,115,116,114,117,99
00006905  2049 6E73 
00006909  7472 7563 
0000690D  7469 6F6E 10922          dc.b      116,105,111,110,0
00006911  00        
                    10923   @m68kde~1_106:
00006912  0D0A 5072 10924          dc.b      13,10,80,114,101,115,115,32,60,69,83,67,62,32
00006916  6573 7320 
0000691A  3C45 5343 
0000691E  3E20      
00006920  746F 2052 10925          dc.b      116,111,32,82,101,115,117,109,101,32,85,115
00006924  6573 756D 
00006928  6520 5573 
0000692C  6572 2050 10926          dc.b      101,114,32,80,114,111,103,114,97,109,13,10,0
00006930  726F 6772 
00006934  616D 0D0A 
00006938  00        
                    10927   @m68kde~1_107:
0000693A  0D0A 556E 10928          dc.b      13,10,85,110,107,110,111,119,110,32,67,111,109
0000693E  6B6E 6F77 
00006942  6E20 436F 
00006946  6D        
00006947  6D61 6E64 10929          dc.b      109,97,110,100,46,46,46,46,46,13,10,0
0000694B  2E2E 2E2E 
0000694F  2E0D 0A00 
                    10930   @m68kde~1_108:
00006954  0D0A 5072 10931          dc.b      13,10,80,114,111,103,114,97,109,32,69,110,100
00006958  6F67 7261 
0000695C  6D20 456E 
00006960  64        
00006961  6564 2028 10932          dc.b      101,100,32,40,84,82,65,80,32,35,49,53,41,46
00006965  5452 4150 
00006969  2023 3135 
0000696D  292E      
0000696F  2E2E 2E00 10933          dc.b      46,46,46,0
                    10934   @m68kde~1_109:
00006974  0D0A 4B69 10935          dc.b      13,10,75,105,108,108,32,65,108,108,32,66,114
00006978  6C6C 2041 
0000697C  6C6C 2042 
00006980  72        
00006981  6561 6B20 10936          dc.b      101,97,107,32,80,111,105,110,116,115,46,46,46
00006985  506F 696E 
00006989  7473 2E2E 
0000698D  2E        
0000698E  2879 2F6E 10937          dc.b      40,121,47,110,41,63,0
00006992  293F 00   
                    10938   @m68kde~1_110:
00006996  0D0A 4B69 10939          dc.b      13,10,75,105,108,108,32,65,108,108,32,87,97
0000699A  6C6C 2041 
0000699E  6C6C 2057 
000069A2  61        
000069A3  7463 6820 10940          dc.b      116,99,104,32,80,111,105,110,116,115,46,46,46
000069A7  506F 696E 
000069AB  7473 2E2E 
000069AF  2E        
000069B0  2879 2F6E 10941          dc.b      40,121,47,110,41,63,0
000069B4  293F 00   
                    10942   @m68kde~1_111:
000069B8  0D0A 2D2D 10943          dc.b      13,10,45,45,45,45,45,45,45,45,45,45,45,45,45
000069BC  2D2D 2D2D 
000069C0  2D2D 2D2D 
000069C4  2D2D 2D   
000069C7  2D2D 2D2D 10944          dc.b      45,45,45,45,45,45,45,45,45,45,45,45,45,45,45
000069CB  2D2D 2D2D 
000069CF  2D2D 2D2D 
000069D3  2D2D 2D   
000069D6  2D2D 2D2D 10945          dc.b      45,45,45,45,45,45,45,45,45,45,45,45,45,45,45
000069DA  2D2D 2D2D 
000069DE  2D2D 2D2D 
000069E2  2D2D 2D   
000069E5  2D2D 2D2D 10946          dc.b      45,45,45,45,45,45,45,45,45,45,45,45,45,45,45
000069E9  2D2D 2D2D 
000069ED  2D2D 2D2D 
000069F1  2D2D 2D   
000069F4  2D2D 2D2D 10947          dc.b      45,45,45,45,45,45,0
000069F8  2D2D 00   
                    10948   @m68kde~1_112:
000069FC  0D0A 2020 10949          dc.b      13,10,32,32,68,101,98,117,103,103,101,114,32
00006A00  4465 6275 
00006A04  6767 6572 
00006A08  20        
00006A09  436F 6D6D 10950          dc.b      67,111,109,109,97,110,100,32,83,117,109,109
00006A0D  616E 6420 
00006A11  5375 6D6D 
00006A15  6172 7900 10951          dc.b      97,114,121,0
                    10952   @m68kde~1_113:
00006A1A  0D0A 2020 10953          dc.b      13,10,32,32,46,40,114,101,103,41,32,32,32,32
00006A1E  2E28 7265 
00006A22  6729 2020 
00006A26  2020      
00006A28  2020 202D 10954          dc.b      32,32,32,45,32,67,104,97,110,103,101,32,82,101
00006A2C  2043 6861 
00006A30  6E67 6520 
00006A34  5265      
00006A36  6769 7374 10955          dc.b      103,105,115,116,101,114,115,58,32,101,46,103
00006A3A  6572 733A 
00006A3E  2065 2E67 
00006A42  2041 302D 10956          dc.b      32,65,48,45,65,55,44,68,48,45,68,55,44,80,67
00006A46  4137 2C44 
00006A4A  302D 4437 
00006A4E  2C50 43   
00006A51  2C53 5350 10957          dc.b      44,83,83,80,44,85,83,80,44,83,82,0
00006A55  2C55 5350 
00006A59  2C53 5200 
                    10958   @m68kde~1_114:
00006A5E  0D0A 2020 10959          dc.b      13,10,32,32,66,68,47,66,83,47,66,67,47,66,75
00006A62  4244 2F42 
00006A66  532F 4243 
00006A6A  2F42 4B   
00006A6D  2020 2D20 10960          dc.b      32,32,45,32,66,114,101,97,107,32,80,111,105
00006A71  4272 6561 
00006A75  6B20 506F 
00006A79  69        
00006A7A  6E74 3A20 10961          dc.b      110,116,58,32,68,105,115,112,108,97,121,47,83
00006A7E  4469 7370 
00006A82  6C61 792F 
00006A86  53        
00006A87  6574 2F43 10962          dc.b      101,116,47,67,108,101,97,114,47,75,105,108,108
00006A8B  6C65 6172 
00006A8F  2F4B 696C 
00006A93  6C        
00006A94  00        10963          dc.b      0
                    10964   @m68kde~1_115:
00006A96  0D0A 2020 10965          dc.b      13,10,32,32,67,32,32,32,32,32,32,32,32,32,32
00006A9A  4320 2020 
00006A9E  2020 2020 
00006AA2  2020 20   
00006AA5  2020 2D20 10966          dc.b      32,32,45,32,67,111,112,121,32,80,114,111,103
00006AA9  436F 7079 
00006AAD  2050 726F 
00006AB1  67        
00006AB2  7261 6D20 10967          dc.b      114,97,109,32,102,114,111,109,32,70,108,97,115
00006AB6  6672 6F6D 
00006ABA  2046 6C61 
00006ABE  73        
00006ABF  6820 746F 10968          dc.b      104,32,116,111,32,77,97,105,110,32,77,101,109
00006AC3  204D 6169 
00006AC7  6E20 4D65 
00006ACB  6D        
00006ACC  6F72 7900 10969          dc.b      111,114,121,0
                    10970   @m68kde~1_116:
00006AD0  0D0A 2020 10971          dc.b      13,10,32,32,68,73,32,32,32,32,32,32,32,32,32
00006AD4  4449 2020 
00006AD8  2020 2020 
00006ADC  2020 20   
00006ADF  2020 2D20 10972          dc.b      32,32,45,32,68,105,115,97,115,115,101,109,98
00006AE3  4469 7361 
00006AE7  7373 656D 
00006AEB  62        
00006AEC  6C65 2050 10973          dc.b      108,101,32,80,114,111,103,114,97,109,0
00006AF0  726F 6772 
00006AF4  616D 00   
                    10974   @m68kde~1_117:
00006AF8  0D0A 2020 10975          dc.b      13,10,32,32,68,85,32,32,32,32,32,32,32,32,32
00006AFC  4455 2020 
00006B00  2020 2020 
00006B04  2020 20   
00006B07  2020 2D20 10976          dc.b      32,32,45,32,68,117,109,112,32,77,101,109,111
00006B0B  4475 6D70 
00006B0F  204D 656D 
00006B13  6F        
00006B14  7279 2043 10977          dc.b      114,121,32,67,111,110,116,101,110,116,115,32
00006B18  6F6E 7465 
00006B1C  6E74 7320 
00006B20  746F 2053 10978          dc.b      116,111,32,83,99,114,101,101,110,0
00006B24  6372 6565 
00006B28  6E00      
                    10979   @m68kde~1_118:
00006B2A  0D0A 2020 10980          dc.b      13,10,32,32,69,32,32,32,32,32,32,32,32,32,32
00006B2E  4520 2020 
00006B32  2020 2020 
00006B36  2020 20   
00006B39  2020 2D20 10981          dc.b      32,32,45,32,69,110,116,101,114,32,83,116,114
00006B3D  456E 7465 
00006B41  7220 5374 
00006B45  72        
00006B46  696E 6720 10982          dc.b      105,110,103,32,105,110,116,111,32,77,101,109
00006B4A  696E 746F 
00006B4E  204D 656D 
00006B52  6F72 7900 10983          dc.b      111,114,121,0
                    10984   @m68kde~1_119:
00006B56  0D0A 2020 10985          dc.b      13,10,32,32,70,32,32,32,32,32,32,32,32,32,32
00006B5A  4620 2020 
00006B5E  2020 2020 
00006B62  2020 20   
00006B65  2020 2D20 10986          dc.b      32,32,45,32,70,105,108,108,32,77,101,109,111
00006B69  4669 6C6C 
00006B6D  204D 656D 
00006B71  6F        
00006B72  7279 2077 10987          dc.b      114,121,32,119,105,116,104,32,68,97,116,97,0
00006B76  6974 6820 
00006B7A  4461 7461 
00006B7E  00        
                    10988   @m68kde~1_120:
00006B80  0D0A 2020 10989          dc.b      13,10,32,32,71,32,32,32,32,32,32,32,32,32,32
00006B84  4720 2020 
00006B88  2020 2020 
00006B8C  2020 20   
00006B8F  2020 2D20 10990          dc.b      32,32,45,32,71,111,32,80,114,111,103,114,97
00006B93  476F 2050 
00006B97  726F 6772 
00006B9B  61        
00006B9C  6D20 5374 10991          dc.b      109,32,83,116,97,114,116,105,110,103,32,97,116
00006BA0  6172 7469 
00006BA4  6E67 2061 
00006BA8  74        
00006BA9  2041 6464 10992          dc.b      32,65,100,100,114,101,115,115,58,32,36,37,48
00006BAD  7265 7373 
00006BB1  3A20 2425 
00006BB5  30        
00006BB6  3858 00   10993          dc.b      56,88,0
                    10994   @m68kde~1_121:
00006BBA  0D0A 2020 10995          dc.b      13,10,32,32,76,32,32,32,32,32,32,32,32,32,32
00006BBE  4C20 2020 
00006BC2  2020 2020 
00006BC6  2020 20   
00006BC9  2020 2D20 10996          dc.b      32,32,45,32,76,111,97,100,32,80,114,111,103
00006BCD  4C6F 6164 
00006BD1  2050 726F 
00006BD5  67        
00006BD6  7261 6D20 10997          dc.b      114,97,109,32,40,46,72,69,88,32,102,105,108
00006BDA  282E 4845 
00006BDE  5820 6669 
00006BE2  6C        
00006BE3  6529 2066 10998          dc.b      101,41,32,102,114,111,109,32,76,97,112,116,111
00006BE7  726F 6D20 
00006BEB  4C61 7074 
00006BEF  6F        
00006BF0  7000      10999          dc.b      112,0
                    11000   @m68kde~1_122:
00006BF2  0D0A 2020 11001          dc.b      13,10,32,32,77,32,32,32,32,32,32,32,32,32,32
00006BF6  4D20 2020 
00006BFA  2020 2020 
00006BFE  2020 20   
00006C01  2020 2D20 11002          dc.b      32,32,45,32,77,101,109,111,114,121,32,69,120
00006C05  4D65 6D6F 
00006C09  7279 2045 
00006C0D  78        
00006C0E  616D 696E 11003          dc.b      97,109,105,110,101,32,97,110,100,32,67,104,97
00006C12  6520 616E 
00006C16  6420 4368 
00006C1A  61        
00006C1B  6E67 6500 11004          dc.b      110,103,101,0
                    11005   @m68kde~1_123:
00006C20  0D0A 2020 11006          dc.b      13,10,32,32,80,32,32,32,32,32,32,32,32,32,32
00006C24  5020 2020 
00006C28  2020 2020 
00006C2C  2020 20   
00006C2F  2020 2D20 11007          dc.b      32,32,45,32,80,114,111,103,114,97,109,32,70
00006C33  5072 6F67 
00006C37  7261 6D20 
00006C3B  46        
00006C3C  6C61 7368 11008          dc.b      108,97,115,104,32,77,101,109,111,114,121,32
00006C40  204D 656D 
00006C44  6F72 7920 
00006C48  7769 7468 11009          dc.b      119,105,116,104,32,85,115,101,114,32,80,114
00006C4C  2055 7365 
00006C50  7220 5072 
00006C54  6F67 7261 11010          dc.b      111,103,114,97,109,0
00006C58  6D00      
                    11011   @m68kde~1_124:
00006C5A  0D0A 2020 11012          dc.b      13,10,32,32,82,32,32,32,32,32,32,32,32,32,32
00006C5E  5220 2020 
00006C62  2020 2020 
00006C66  2020 20   
00006C69  2020 2D20 11013          dc.b      32,32,45,32,68,105,115,112,108,97,121,32,54
00006C6D  4469 7370 
00006C71  6C61 7920 
00006C75  36        
00006C76  3830 3030 11014          dc.b      56,48,48,48,32,82,101,103,105,115,116,101,114
00006C7A  2052 6567 
00006C7E  6973 7465 
00006C82  72        
00006C83  7300      11015          dc.b      115,0
                    11016   @m68kde~1_125:
00006C86  0D0A 2020 11017          dc.b      13,10,32,32,83,32,32,32,32,32,32,32,32,32,32
00006C8A  5320 2020 
00006C8E  2020 2020 
00006C92  2020 20   
00006C95  2020 2D20 11018          dc.b      32,32,45,32,84,111,103,103,108,101,32,79,78
00006C99  546F 6767 
00006C9D  6C65 204F 
00006CA1  4E        
00006CA2  2F4F 4646 11019          dc.b      47,79,70,70,32,83,105,110,103,108,101,32,83
00006CA6  2053 696E 
00006CAA  676C 6520 
00006CAE  53        
00006CAF  7465 7020 11020          dc.b      116,101,112,32,77,111,100,101,0
00006CB3  4D6F 6465 
00006CB7  00        
                    11021   @m68kde~1_126:
00006CB8  0D0A 2020 11022          dc.b      13,10,32,32,84,77,32,32,32,32,32,32,32,32,32
00006CBC  544D 2020 
00006CC0  2020 2020 
00006CC4  2020 20   
00006CC7  2020 2D20 11023          dc.b      32,32,45,32,84,101,115,116,32,77,101,109,111
00006CCB  5465 7374 
00006CCF  204D 656D 
00006CD3  6F        
00006CD4  7279 00   11024          dc.b      114,121,0
                    11025   @m68kde~1_127:
00006CD8  0D0A 2020 11026          dc.b      13,10,32,32,84,83,32,32,32,32,32,32,32,32,32
00006CDC  5453 2020 
00006CE0  2020 2020 
00006CE4  2020 20   
00006CE7  2020 2D20 11027          dc.b      32,32,45,32,84,101,115,116,32,83,119,105,116
00006CEB  5465 7374 
00006CEF  2053 7769 
00006CF3  74        
00006CF4  6368 6573 11028          dc.b      99,104,101,115,58,32,83,87,55,45,48,0
00006CF8  3A20 5357 
00006CFC  372D 3000 
                    11029   @m68kde~1_128:
00006D00  0D0A 2020 11030          dc.b      13,10,32,32,84,68,32,32,32,32,32,32,32,32,32
00006D04  5444 2020 
00006D08  2020 2020 
00006D0C  2020 20   
00006D0F  2020 2D20 11031          dc.b      32,32,45,32,84,101,115,116,32,68,105,115,112
00006D13  5465 7374 
00006D17  2044 6973 
00006D1B  70        
00006D1C  6C61 7973 11032          dc.b      108,97,121,115,58,32,76,69,68,115,32,97,110
00006D20  3A20 4C45 
00006D24  4473 2061 
00006D28  6E        
00006D29  6420 372D 11033          dc.b      100,32,55,45,83,101,103,109,101,110,116,0
00006D2D  5365 676D 
00006D31  656E 7400 
                    11034   @m68kde~1_129:
00006D36  0D0A 2020 11035          dc.b      13,10,32,32,87,68,47,87,83,47,87,67,47,87,75
00006D3A  5744 2F57 
00006D3E  532F 5743 
00006D42  2F57 4B   
00006D45  2020 2D20 11036          dc.b      32,32,45,32,87,97,116,99,104,32,80,111,105,110
00006D49  5761 7463 
00006D4D  6820 506F 
00006D51  696E      
00006D53  743A 2044 11037          dc.b      116,58,32,68,105,115,112,108,97,121,47,83,101
00006D57  6973 706C 
00006D5B  6179 2F53 
00006D5F  65        
00006D60  742F 436C 11038          dc.b      116,47,67,108,101,97,114,47,75,105,108,108,0
00006D64  6561 722F 
00006D68  4B69 6C6C 
00006D6C  00        
                    11039   @m68kde~1_130:
00006D6E  0D0A 2300 11040          dc.b      13,10,35,0
                    11041   @m68kde~1_131:
00006D72  0D0A 5072 11042          dc.b      13,10,80,114,111,103,114,97,109,32,82,117,110
00006D76  6F67 7261 
00006D7A  6D20 5275 
00006D7E  6E        
00006D7F  6E69 6E67 11043          dc.b      110,105,110,103,46,46,46,46,46,0
00006D83  2E2E 2E2E 
00006D87  2E00      
                    11044   @m68kde~1_132:
00006D8A  0D0A 5072 11045          dc.b      13,10,80,114,101,115,115,32,60,82,69,83,69,84
00006D8E  6573 7320 
00006D92  3C52 4553 
00006D96  4554      
00006D98  3E20 6275 11046          dc.b      62,32,98,117,116,116,111,110,32,60,75,101,121
00006D9C  7474 6F6E 
00006DA0  203C 4B65 
00006DA4  79        
00006DA5  303E 206F 11047          dc.b      48,62,32,111,110,32,68,69,49,32,116,111,32,115
00006DA9  6E20 4445 
00006DAD  3120 746F 
00006DB1  2073      
00006DB3  746F 7000 11048          dc.b      116,111,112,0
                    11049   @m68kde~1_133:
00006DB8  0D0A 4572 11050          dc.b      13,10,69,114,114,111,114,58,32,80,114,101,115
00006DBC  726F 723A 
00006DC0  2050 7265 
00006DC4  73        
00006DC5  7320 2747 11051          dc.b      115,32,39,71,39,32,102,105,114,115,116,32,116
00006DC9  2720 6669 
00006DCD  7273 7420 
00006DD1  74        
00006DD2  6F20 7374 11052          dc.b      111,32,115,116,97,114,116,32,112,114,111,103
00006DD6  6172 7420 
00006DDA  7072 6F67 
00006DDE  7261 6D00 11053          dc.b      114,97,109,0
                    11054   @m68kde~1_134:
00006DE2  0D0A 5369 11055          dc.b      13,10,83,105,110,103,108,101,32,83,116,101,112
00006DE6  6E67 6C65 
00006DEA  2053 7465 
00006DEE  70        
00006DEF  2020 3A5B 11056          dc.b      32,32,58,91,79,78,93,0
00006DF3  4F4E 5D00 
                    11057   @m68kde~1_135:
00006DF8  0D0A 4272 11058          dc.b      13,10,66,114,101,97,107,32,80,111,105,110,116
00006DFC  6561 6B20 
00006E00  506F 696E 
00006E04  74        
00006E05  7320 3A5B 11059          dc.b      115,32,58,91,68,105,115,97,98,108,101,100,93
00006E09  4469 7361 
00006E0D  626C 6564 
00006E11  5D        
00006E12  00        11060          dc.b      0
                    11061   @m68kde~1_136:
00006E14  0D0A 5072 11062          dc.b      13,10,80,114,101,115,115,32,39,71,39,32,116
00006E18  6573 7320 
00006E1C  2747 2720 
00006E20  74        
00006E21  6F20 5472 11063          dc.b      111,32,84,114,97,99,101,32,80,114,111,103,114
00006E25  6163 6520 
00006E29  5072 6F67 
00006E2D  72        
00006E2E  616D 2066 11064          dc.b      97,109,32,102,114,111,109,32,97,100,100,114
00006E32  726F 6D20 
00006E36  6164 6472 
00006E3A  6573 7320 11065          dc.b      101,115,115,32,36,37,88,46,46,46,46,46,0
00006E3E  2425 582E 
00006E42  2E2E 2E2E 
00006E46  00        
                    11066   @m68kde~1_137:
00006E48  0D0A 5075 11067          dc.b      13,10,80,117,115,104,32,60,82,69,83,69,84,32
00006E4C  7368 203C 
00006E50  5245 5345 
00006E54  5420      
00006E56  4275 7474 11068          dc.b      66,117,116,116,111,110,62,32,116,111,32,83,116
00006E5A  6F6E 3E20 
00006E5E  746F 2053 
00006E62  74        
00006E63  6F70 2E2E 11069          dc.b      111,112,46,46,46,46,46,0
00006E67  2E2E 2E00 
                    11070   @m68kde~1_138:
00006E6C  0D0A 5369 11071          dc.b      13,10,83,105,110,103,108,101,32,83,116,101,112
00006E70  6E67 6C65 
00006E74  2053 7465 
00006E78  70        
00006E79  203A 205B 11072          dc.b      32,58,32,91,79,70,70,93,0
00006E7D  4F46 465D 
00006E81  00        
                    11073   @m68kde~1_139:
00006E82  0D0A 4272 11074          dc.b      13,10,66,114,101,97,107,32,80,111,105,110,116
00006E86  6561 6B20 
00006E8A  506F 696E 
00006E8E  74        
00006E8F  7320 3A5B 11075          dc.b      115,32,58,91,69,110,97,98,108,101,100,93,0
00006E93  456E 6162 
00006E97  6C65 645D 
00006E9B  00        
                    11076   @m68kde~1_140:
00006E9C  0D0A 5072 11077          dc.b      13,10,80,114,101,115,115,32,60,69,83,67,62,32
00006EA0  6573 7320 
00006EA4  3C45 5343 
00006EA8  3E20      
00006EAA  746F 2052 11078          dc.b      116,111,32,82,101,115,117,109,101,32,85,115
00006EAE  6573 756D 
00006EB2  6520 5573 
00006EB6  6572 2050 11079          dc.b      101,114,32,80,114,111,103,114,97,109,46,46,46
00006EBA  726F 6772 
00006EBE  616D 2E2E 
00006EC2  2E        
00006EC3  2E2E 00   11080          dc.b      46,46,0
                    11081   @m68kde~1_141:
00006EC6  0D0A 5369 11082          dc.b      13,10,83,105,110,103,108,101,32,83,116,101,112
00006ECA  6E67 6C65 
00006ECE  2053 7465 
00006ED2  70        
00006ED3  2020 3A5B 11083          dc.b      32,32,58,91,79,70,70,93,0
00006ED7  4F46 465D 
00006EDB  00        
                    11084   @m68kde~1_142:
00006EDC  0D0A 4272 11085          dc.b      13,10,66,114,101,97,107,32,80,111,105,110,116
00006EE0  6561 6B20 
00006EE4  506F 696E 
00006EE8  74        
00006EE9  7320 3A5B 11086          dc.b      115,32,58,91,69,110,97,98,108,101,100,93,0
00006EED  456E 6162 
00006EF1  6C65 645D 
00006EF5  00        
                    11087   @m68kde~1_143:
00006EF6  0D0A 5072 11088          dc.b      13,10,80,114,111,103,114,97,109,32,82,117,110
00006EFA  6F67 7261 
00006EFE  6D20 5275 
00006F02  6E        
00006F03  6E69 6E67 11089          dc.b      110,105,110,103,46,46,46,46,46,0
00006F07  2E2E 2E2E 
00006F0B  2E00      
                    11090   @m68kde~1_144:
00006F0E  0D0A 5072 11091          dc.b      13,10,80,114,101,115,115,32,60,82,69,83,69,84
00006F12  6573 7320 
00006F16  3C52 4553 
00006F1A  4554      
00006F1C  3E20 6275 11092          dc.b      62,32,98,117,116,116,111,110,32,60,75,101,121
00006F20  7474 6F6E 
00006F24  203C 4B65 
00006F28  79        
00006F29  303E 206F 11093          dc.b      48,62,32,111,110,32,68,69,49,32,116,111,32,115
00006F2D  6E20 4445 
00006F31  3120 746F 
00006F35  2073      
00006F37  746F 7000 11094          dc.b      116,111,112,0
                    11095   @m68kde~1_145:
00006F3C  0D0A 0D0A 11096          dc.b      13,10,13,10,80,114,111,103,114,97,109,32,65
00006F40  5072 6F67 
00006F44  7261 6D20 
00006F48  41        
00006F49  424F 5254 11097          dc.b      66,79,82,84,32,33,33,33,33,33,33,13,10,0
00006F4D  2021 2121 
00006F51  2121 210D 
00006F55  0A00      
                    11098   @m68kde~1_146:
00006F58  2573 0D0A 11099          dc.b      37,115,13,10,0
00006F5C  00        
                    11100   @m68kde~1_147:
00006F5E  0D0A 0D0A 11101          dc.b      13,10,13,10,80,114,111,103,114,97,109,32,65
00006F62  5072 6F67 
00006F66  7261 6D20 
00006F6A  41        
00006F6B  424F 5254 11102          dc.b      66,79,82,84,32,33,33,33,33,33,0
00006F6F  2021 2121 
00006F73  2121 00   
                    11103   @m68kde~1_148:
00006F76  0D0A 556E 11104          dc.b      13,10,85,110,104,97,110,100,108,101,100,32,73
00006F7A  6861 6E64 
00006F7E  6C65 6420 
00006F82  49        
00006F83  6E74 6572 11105          dc.b      110,116,101,114,114,117,112,116,58,32,73,82
00006F87  7275 7074 
00006F8B  3A20 4952 
00006F8F  5125 6420 11106          dc.b      81,37,100,32,33,33,33,33,33,0
00006F93  2121 2121 
00006F97  2100      
                    11107   @m68kde~1_149:
00006F9A  4144 4452 11108          dc.b      65,68,68,82,69,83,83,32,69,82,82,79,82,58,32
00006F9E  4553 5320 
00006FA2  4552 524F 
00006FA6  523A 20   
00006FA9  3136 206F 11109          dc.b      49,54,32,111,114,32,51,50,32,66,105,116,32,84
00006FAD  7220 3332 
00006FB1  2042 6974 
00006FB5  2054      
00006FB7  7261 6E73 11110          dc.b      114,97,110,115,102,101,114,32,116,111,47,102
00006FBB  6665 7220 
00006FBF  746F 2F66 
00006FC3  726F 6D20 11111          dc.b      114,111,109,32,97,110,32,79,68,68,32,65,100
00006FC7  616E 204F 
00006FCB  4444 2041 
00006FCF  64        
00006FD0  6472 6573 11112          dc.b      100,114,101,115,115,46,46,46,46,0
00006FD4  732E 2E2E 
00006FD8  2E00      
                    11113   @m68kde~1_150:
00006FDA  556E 6861 11114          dc.b      85,110,104,97,110,100,108,101,100,32,84,114
00006FDE  6E64 6C65 
00006FE2  6420 5472 
00006FE6  6170 2021 11115          dc.b      97,112,32,33,33,33,33,33,0
00006FEA  2121 2121 
00006FEE  00        
                    11116   @m68kde~1_151:
00006FF0  4255 5320 11117          dc.b      66,85,83,32,69,114,114,111,114,33,0
00006FF4  4572 726F 
00006FF8  7221 00   
                    11118   @m68kde~1_152:
00006FFC  4144 4452 11119          dc.b      65,68,68,82,69,83,83,32,69,114,114,111,114,33
00007000  4553 5320 
00007004  4572 726F 
00007008  7221      
0000700A  00        11120          dc.b      0
                    11121   @m68kde~1_153:
0000700C  494C 4C45 11122          dc.b      73,76,76,69,71,65,76,32,73,78,83,84,82,85,67
00007010  4741 4C20 
00007014  494E 5354 
00007018  5255 43   
0000701B  5449 4F4E 11123          dc.b      84,73,79,78,0
0000701F  00        
                    11124   @m68kde~1_154:
00007020  4449 5649 11125          dc.b      68,73,86,73,68,69,32,66,89,32,90,69,82,79,0
00007024  4445 2042 
00007028  5920 5A45 
0000702C  524F 00   
                    11126   @m68kde~1_155:
00007030  2743 484B 11127          dc.b      39,67,72,75,39,32,73,78,83,84,82,85,67,84,73
00007034  2720 494E 
00007038  5354 5255 
0000703C  4354 49   
0000703F  4F4E 00   11128          dc.b      79,78,0
                    11129   @m68kde~1_156:
00007042  5452 4150 11130          dc.b      84,82,65,80,86,32,73,78,83,84,82,85,67,84,73
00007046  5620 494E 
0000704A  5354 5255 
0000704E  4354 49   
00007051  4F4E 00   11131          dc.b      79,78,0
                    11132   @m68kde~1_157:
00007054  5052 4956 11133          dc.b      80,82,73,86,73,76,69,71,69,32,86,73,79,76,65
00007058  494C 4547 
0000705C  4520 5649 
00007060  4F4C 41   
00007063  5449 4F4E 11134          dc.b      84,73,79,78,0
00007067  00        
                    11135   @m68kde~1_158:
00007068  554E 494E 11136          dc.b      85,78,73,78,73,84,73,65,76,73,83,69,68,32,73
0000706C  4954 4941 
00007070  4C49 5345 
00007074  4420 49   
00007077  5251 00   11137          dc.b      82,81,0
                    11138   @m68kde~1_159:
0000707A  5350 5552 11139          dc.b      83,80,85,82,73,79,85,83,32,73,82,81,0
0000707E  494F 5553 
00007082  2049 5251 
00007086  00        
                    11140   @m68kde~1_160:
00007088  0D0A 5374 11141          dc.b      13,10,83,116,97,114,116,32,65,100,100,114,101
0000708C  6172 7420 
00007090  4164 6472 
00007094  65        
00007095  7373 2069 11142          dc.b      115,115,32,105,110,32,77,101,109,111,114,121
00007099  6E20 4D65 
0000709D  6D6F 7279 
000070A1  3A20 00   11143          dc.b      58,32,0
                    11144   @m68kde~1_161:
000070A4  0D0A 456E 11145          dc.b      13,10,69,110,116,101,114,32,83,116,114,105,110
000070A8  7465 7220 
000070AC  5374 7269 
000070B0  6E        
000070B1  6720 2845 11146          dc.b      103,32,40,69,83,67,32,116,111,32,101,110,100
000070B5  5343 2074 
000070B9  6F20 656E 
000070BD  64        
000070BE  2920 3A00 11147          dc.b      41,32,58,0
                    11148   @m68kde~1_162:
000070C2  0D0A 5374 11149          dc.b      13,10,83,116,97,114,116,32,65,100,100,114,101
000070C6  6172 7420 
000070CA  4164 6472 
000070CE  65        
000070CF  7373 3A20 11150          dc.b      115,115,58,32,0
000070D3  00        
                    11151   @m68kde~1_163:
000070D4  0D0A 456E 11152          dc.b      13,10,69,110,100,32,65,100,100,114,101,115,115
000070D8  6420 4164 
000070DC  6472 6573 
000070E0  73        
000070E1  3A20 00   11153          dc.b      58,32,0
                    11154   @m68kde~1_164:
000070E4  4445 312D 11155          dc.b      68,69,49,45,54,56,107,32,66,117,103,32,86,49
000070E8  3638 6B20 
000070EC  4275 6720 
000070F0  5631      
000070F2  2E37 3700 11156          dc.b      46,55,55,0
                    11157   @m68kde~1_165:
000070F6  436F 7079 11158          dc.b      67,111,112,121,114,105,103,104,116,32,40,67
000070FA  7269 6768 
000070FE  7420 2843 
00007102  2920 504A 11159          dc.b      41,32,80,74,32,68,97,118,105,101,115,32,50,48
00007106  2044 6176 
0000710A  6965 7320 
0000710E  3230      
00007110  3136 00   11160          dc.b      49,54,0
                    11161   @m68kde~1_166:
00007114  0D0A 5275 11162          dc.b      13,10,82,117,110,110,105,110,103,46,46,46,46
00007118  6E6E 696E 
0000711C  672E 2E2E 
00007120  2E        
00007121  2E00      11163          dc.b      46,0
                    11164   @m68kde~1_167:
00007124  5275 6E6E 11165          dc.b      82,117,110,110,105,110,103,46,46,46,46,46,0
00007128  696E 672E 
0000712C  2E2E 2E2E 
00007130  00        
                    11166   @m68kde~1_168:
00007132  4279 3A20 11167          dc.b      66,121,58,32,80,74,32,68,97,118,105,101,115
00007136  504A 2044 
0000713A  6176 6965 
0000713E  73        
0000713F  00        11168          dc.b      0
                    11169   @m68kde~1_169:
00007140  0D0A 2573 11170          dc.b      13,10,37,115,0
00007144  00        
                    11171   @m68kde~1_170:
00007146  0D0A 2573 11172          dc.b      13,10,37,115,0
0000714A  00        
                    11173   @m68kde~1_171:
0000714C  2E42 2000 11174          dc.b      46,66,32,0
                    11175   @m68kde~1_172:
00007150  2E57 2000 11176          dc.b      46,87,32,0
                    11177   @m68kde~1_173:
00007154  2E4C 2000 11178          dc.b      46,76,32,0
                    11179   @m68kde~1_174:
00007158  2324 2558 11180          dc.b      35,36,37,88,0
0000715C  00        
                    11181   @m68kde~1_175:
0000715E  2324 2558 11182          dc.b      35,36,37,88,0
00007162  00        
                    11183   @m68kde~1_176:
00007164  2324 2558 11184          dc.b      35,36,37,88,0
00007168  00        
                    11185   @m68kde~1_177:
0000716A  2324 2558 11186          dc.b      35,36,37,88,0
0000716E  00        
                    11187   @m68kde~1_178:
00007170  2324 2558 11188          dc.b      35,36,37,88,0
00007174  00        
                    11189   @m68kde~1_179:
00007176  2324 2558 11190          dc.b      35,36,37,88,0
0000717A  00        
                    11191   @m68kde~1_180:
0000717C  2324 2558 11192          dc.b      35,36,37,88,0
00007180  00        
                    11193   @m68kde~1_181:
00007182  2800      11194          dc.b      40,0
                    11195   @m68kde~1_182:
00007184  2900      11196          dc.b      41,0
                    11197   @m68kde~1_183:
00007186  2800      11198          dc.b      40,0
                    11199   @m68kde~1_184:
00007188  292B 00   11200          dc.b      41,43,0
                    11201   @m68kde~1_185:
0000718C  2D28 00   11202          dc.b      45,40,0
                    11203   @m68kde~1_186:
00007190  2900      11204          dc.b      41,0
                    11205   @m68kde~1_187:
00007192  2564 2841 11206          dc.b      37,100,40,65,37,100,41,0
00007196  2564 2900 
                    11207   @m68kde~1_188:
0000719A  2564 2841 11208          dc.b      37,100,40,65,37,100,44,0
0000719E  2564 2C00 
                    11209   @m68kde~1_189:
000071A2  4400      11210          dc.b      68,0
                    11211   @m68kde~1_190:
000071A4  4100      11212          dc.b      65,0
                    11213   @m68kde~1_191:
000071A6  2564 00   11214          dc.b      37,100,0
                    11215   @m68kde~1_192:
000071AA  2E57 2900 11216          dc.b      46,87,41,0
                    11217   @m68kde~1_193:
000071AE  2E4C 2900 11218          dc.b      46,76,41,0
                    11219   @m68kde~1_194:
000071B2  2425 5800 11220          dc.b      36,37,88,0
                    11221   @m68kde~1_195:
000071B6  2425 5800 11222          dc.b      36,37,88,0
                    11223   @m68kde~1_196:
000071BA  2564 2850 11224          dc.b      37,100,40,80,67,41,0
000071BE  4329 00   
                    11225   @m68kde~1_197:
000071C2  2564 2850 11226          dc.b      37,100,40,80,67,44,0
000071C6  432C 00   
                    11227   @m68kde~1_198:
000071CA  4400      11228          dc.b      68,0
                    11229   @m68kde~1_199:
000071CC  4100      11230          dc.b      65,0
                    11231   @m68kde~1_200:
000071CE  2564 00   11232          dc.b      37,100,0
                    11233   @m68kde~1_201:
000071D2  2E57 2900 11234          dc.b      46,87,41,0
                    11235   @m68kde~1_202:
000071D6  2E4C 2900 11236          dc.b      46,76,41,0
                    11237   @m68kde~1_203:
000071DA  2C00      11238          dc.b      44,0
                    11239   @m68kde~1_204:
000071DC  2C00      11240          dc.b      44,0
                    11241   @m68kde~1_205:
000071DE  4343 00   11242          dc.b      67,67,0
                    11243   @m68kde~1_206:
000071E2  4353 00   11244          dc.b      67,83,0
                    11245   @m68kde~1_207:
000071E6  4551 00   11246          dc.b      69,81,0
                    11247   @m68kde~1_208:
000071EA  4745 00   11248          dc.b      71,69,0
                    11249   @m68kde~1_209:
000071EE  4754 00   11250          dc.b      71,84,0
                    11251   @m68kde~1_210:
000071F2  4849 00   11252          dc.b      72,73,0
                    11253   @m68kde~1_211:
000071F6  4C45 00   11254          dc.b      76,69,0
                    11255   @m68kde~1_212:
000071FA  4C53 00   11256          dc.b      76,83,0
                    11257   @m68kde~1_213:
000071FE  4C54 00   11258          dc.b      76,84,0
                    11259   @m68kde~1_214:
00007202  4D49 00   11260          dc.b      77,73,0
                    11261   @m68kde~1_215:
00007206  4E45 00   11262          dc.b      78,69,0
                    11263   @m68kde~1_216:
0000720A  504C 00   11264          dc.b      80,76,0
                    11265   @m68kde~1_217:
0000720E  5653 00   11266          dc.b      86,83,0
                    11267   @m68kde~1_218:
00007212  5643 00   11268          dc.b      86,67,0
                    11269   @m68kde~1_219:
00007216  5241 00   11270          dc.b      82,65,0
                    11271   @m68kde~1_220:
0000721A  5352 00   11272          dc.b      83,82,0
                    11273   @m68kde~1_221:
0000721E  2000      11274          dc.b      32,0
                    11275   @m68kde~1_222:
00007220  556E 6B6E 11276          dc.b      85,110,107,110,111,119,110,0
00007224  6F77 6E00 
                    11277   @m68kde~1_223:
00007228  4142 4344 11278          dc.b      65,66,67,68,32,68,37,100,44,68,37,100,0
0000722C  2044 2564 
00007230  2C44 2564 
00007234  00        
                    11279   @m68kde~1_224:
00007236  4142 4344 11280          dc.b      65,66,67,68,32,45,40,65,37,100,41,44,45,40,65
0000723A  202D 2841 
0000723E  2564 292C 
00007242  2D28 41   
00007245  2564 2900 11281          dc.b      37,100,41,0
                    11282   @m68kde~1_225:
0000724A  4144 4441 11283          dc.b      65,68,68,65,46,87,32,0
0000724E  2E57 2000 
                    11284   @m68kde~1_226:
00007252  4144 4441 11285          dc.b      65,68,68,65,46,76,32,0
00007256  2E4C 2000 
                    11286   @m68kde~1_227:
0000725A  2C41 2558 11287          dc.b      44,65,37,88,0
0000725E  00        
                    11288   @m68kde~1_228:
00007260  4144 4400 11289          dc.b      65,68,68,0
                    11290   @m68kde~1_229:
00007264  4144 4449 11291          dc.b      65,68,68,73,0
00007268  00        
                    11292   @m68kde~1_230:
0000726A  414E 4449 11293          dc.b      65,78,68,73,0
0000726E  00        
                    11294   @m68kde~1_231:
00007270  434D 5049 11295          dc.b      67,77,80,73,0
00007274  00        
                    11296   @m68kde~1_232:
00007276  454F 5249 11297          dc.b      69,79,82,73,0
0000727A  00        
                    11298   @m68kde~1_233:
0000727C  4F52 4900 11299          dc.b      79,82,73,0
                    11300   @m68kde~1_234:
00007280  5355 4249 11301          dc.b      83,85,66,73,0
00007284  00        
                    11302   @m68kde~1_235:
00007286  2C00      11303          dc.b      44,0
                    11304   @m68kde~1_236:
00007288  414E 4449 11305          dc.b      65,78,68,73,32,35,36,37,88,44,83,82,0
0000728C  2023 2425 
00007290  582C 5352 
00007294  00        
                    11306   @m68kde~1_237:
00007296  4144 4451 11307          dc.b      65,68,68,81,0
0000729A  00        
                    11308   @m68kde~1_238:
0000729C  2325 3158 11309          dc.b      35,37,49,88,44,0
000072A0  2C00      
                    11310   @m68kde~1_239:
000072A2  4144 4458 11311          dc.b      65,68,68,88,0
000072A6  00        
                    11312   @m68kde~1_240:
000072A8  4425 582C 11313          dc.b      68,37,88,44,68,37,88,0
000072AC  4425 5800 
                    11314   @m68kde~1_241:
000072B0  2D28 4125 11315          dc.b      45,40,65,37,88,41,44,45,40,65,37,88,41,0
000072B4  5829 2C2D 
000072B8  2841 2558 
000072BC  2900      
                    11316   @m68kde~1_242:
000072BE  414E 4400 11317          dc.b      65,78,68,0
                    11318   @m68kde~1_243:
000072C2  414E 4449 11319          dc.b      65,78,68,73,32,35,36,37,50,88,44,67,67,82,0
000072C6  2023 2425 
000072CA  3258 2C43 
000072CE  4352 00   
                    11320   @m68kde~1_244:
000072D2  4153 4C00 11321          dc.b      65,83,76,0
                    11322   @m68kde~1_245:
000072D6  4153 5200 11323          dc.b      65,83,82,0
                    11324   @m68kde~1_246:
000072DA  4C53 4C00 11325          dc.b      76,83,76,0
                    11326   @m68kde~1_247:
000072DE  4C53 5200 11327          dc.b      76,83,82,0
                    11328   @m68kde~1_248:
000072E2  524F 4C00 11329          dc.b      82,79,76,0
                    11330   @m68kde~1_249:
000072E6  524F 5200 11331          dc.b      82,79,82,0
                    11332   @m68kde~1_250:
000072EA  524F 584C 11333          dc.b      82,79,88,76,0
000072EE  00        
                    11334   @m68kde~1_251:
000072F0  524F 5852 11335          dc.b      82,79,88,82,0
000072F4  00        
                    11336   @m68kde~1_252:
000072F6  2020 00   11337          dc.b      32,32,0
                    11338   @m68kde~1_253:
000072FA  4153 4C00 11339          dc.b      65,83,76,0
                    11340   @m68kde~1_254:
000072FE  4153 5200 11341          dc.b      65,83,82,0
                    11342   @m68kde~1_255:
00007302  4C53 4C00 11343          dc.b      76,83,76,0
                    11344   @m68kde~1_256:
00007306  4C53 5200 11345          dc.b      76,83,82,0
                    11346   @m68kde~1_257:
0000730A  524F 4C00 11347          dc.b      82,79,76,0
                    11348   @m68kde~1_258:
0000730E  524F 5200 11349          dc.b      82,79,82,0
                    11350   @m68kde~1_259:
00007312  524F 584C 11351          dc.b      82,79,88,76,0
00007316  00        
                    11352   @m68kde~1_260:
00007318  524F 5852 11353          dc.b      82,79,88,82,0
0000731C  00        
                    11354   @m68kde~1_261:
0000731E  2324 2558 11355          dc.b      35,36,37,88,44,68,37,88,0
00007322  2C44 2558 
00007326  00        
                    11356   @m68kde~1_262:
00007328  4425 582C 11357          dc.b      68,37,88,44,68,37,88,0
0000732C  4425 5800 
                    11358   @m68kde~1_263:
00007330  4200      11359          dc.b      66,0
                    11360   @m68kde~1_264:
00007332  2425 5800 11361          dc.b      36,37,88,0
                    11362   @m68kde~1_265:
00007336  2425 5800 11363          dc.b      36,37,88,0
                    11364   @m68kde~1_266:
0000733A  4243 4847 11365          dc.b      66,67,72,71,32,0
0000733E  2000      
                    11366   @m68kde~1_267:
00007340  4425 642C 11367          dc.b      68,37,100,44,0
00007344  00        
                    11368   @m68kde~1_268:
00007346  4243 4847 11369          dc.b      66,67,72,71,32,0
0000734A  2000      
                    11370   @m68kde~1_269:
0000734C  2324 2558 11371          dc.b      35,36,37,88,44,0
00007350  2C00      
                    11372   @m68kde~1_270:
00007352  4243 4C52 11373          dc.b      66,67,76,82,32,0
00007356  2000      
                    11374   @m68kde~1_271:
00007358  4425 642C 11375          dc.b      68,37,100,44,0
0000735C  00        
                    11376   @m68kde~1_272:
0000735E  4243 4C52 11377          dc.b      66,67,76,82,32,0
00007362  2000      
                    11378   @m68kde~1_273:
00007364  2324 2558 11379          dc.b      35,36,37,88,44,0
00007368  2C00      
                    11380   @m68kde~1_274:
0000736A  4253 4554 11381          dc.b      66,83,69,84,32,0
0000736E  2000      
                    11382   @m68kde~1_275:
00007370  4425 642C 11383          dc.b      68,37,100,44,0
00007374  00        
                    11384   @m68kde~1_276:
00007376  4253 4554 11385          dc.b      66,83,69,84,32,0
0000737A  2000      
                    11386   @m68kde~1_277:
0000737C  2324 2558 11387          dc.b      35,36,37,88,44,0
00007380  2C00      
                    11388   @m68kde~1_278:
00007382  4254 5354 11389          dc.b      66,84,83,84,32,0
00007386  2000      
                    11390   @m68kde~1_279:
00007388  4425 642C 11391          dc.b      68,37,100,44,0
0000738C  00        
                    11392   @m68kde~1_280:
0000738E  4254 5354 11393          dc.b      66,84,83,84,32,0
00007392  2000      
                    11394   @m68kde~1_281:
00007394  2324 2558 11395          dc.b      35,36,37,88,44,0
00007398  2C00      
                    11396   @m68kde~1_282:
0000739A  4348 4B20 11397          dc.b      67,72,75,32,0
0000739E  00        
                    11398   @m68kde~1_283:
000073A0  2C44 2564 11399          dc.b      44,68,37,100,0
000073A4  00        
                    11400   @m68kde~1_284:
000073A6  434C 5200 11401          dc.b      67,76,82,0
                    11402   @m68kde~1_285:
000073AA  434D 5041 11403          dc.b      67,77,80,65,46,87,32,0
000073AE  2E57 2000 
                    11404   @m68kde~1_286:
000073B2  434D 5041 11405          dc.b      67,77,80,65,46,76,32,0
000073B6  2E4C 2000 
                    11406   @m68kde~1_287:
000073BA  2C41 2564 11407          dc.b      44,65,37,100,0
000073BE  00        
                    11408   @m68kde~1_288:
000073C0  434D 5000 11409          dc.b      67,77,80,0
                    11410   @m68kde~1_289:
000073C4  434D 504D 11411          dc.b      67,77,80,77,0
000073C8  00        
                    11412   @m68kde~1_290:
000073CA  2841 2564 11413          dc.b      40,65,37,100,41,43,44,40,65,37,100,41,43,0
000073CE  292B 2C28 
000073D2  4125 6429 
000073D6  2B00      
                    11414   @m68kde~1_291:
000073D8  4442 00   11415          dc.b      68,66,0
                    11416   @m68kde~1_292:
000073DC  4425 642C 11417          dc.b      68,37,100,44,37,43,100,40,80,67,41,32,116,111
000073E0  252B 6428 
000073E4  5043 2920 
000073E8  746F      
000073EA  2041 6464 11418          dc.b      32,65,100,100,114,58,36,37,88,0
000073EE  723A 2425 
000073F2  5800      
                    11419   @m68kde~1_293:
000073F4  4449 5653 11420          dc.b      68,73,86,83,32,0
000073F8  2000      
                    11421   @m68kde~1_294:
000073FA  2C00      11422          dc.b      44,0
                    11423   @m68kde~1_295:
000073FC  4449 5655 11424          dc.b      68,73,86,85,32,0
00007400  2000      
                    11425   @m68kde~1_296:
00007402  2C00      11426          dc.b      44,0
                    11427   @m68kde~1_297:
00007404  454F 5200 11428          dc.b      69,79,82,0
                    11429   @m68kde~1_298:
00007408  454F 5249 11430          dc.b      69,79,82,73,32,35,36,37,50,88,44,67,67,82,0
0000740C  2023 2425 
00007410  3258 2C43 
00007414  4352 00   
                    11431   @m68kde~1_299:
00007418  454F 5249 11432          dc.b      69,79,82,73,32,35,36,37,88,44,83,82,0
0000741C  2023 2425 
00007420  582C 5352 
00007424  00        
                    11433   @m68kde~1_300:
00007426  4558 4720 11434          dc.b      69,88,71,32,68,37,100,44,68,37,100,0
0000742A  4425 642C 
0000742E  4425 6400 
                    11435   @m68kde~1_301:
00007432  4558 4720 11436          dc.b      69,88,71,32,65,37,100,44,65,37,100,0
00007436  4125 642C 
0000743A  4125 6400 
                    11437   @m68kde~1_302:
0000743E  4558 4720 11438          dc.b      69,88,71,32,68,37,100,44,65,37,100,0
00007442  4425 642C 
00007446  4125 6400 
                    11439   @m68kde~1_303:
0000744A  4558 5400 11440          dc.b      69,88,84,0
                    11441   @m68kde~1_304:
0000744E  2E4C 2000 11442          dc.b      46,76,32,0
                    11443   @m68kde~1_305:
00007452  2E57 2000 11444          dc.b      46,87,32,0
                    11445   @m68kde~1_306:
00007456  494C 4C45 11446          dc.b      73,76,76,69,71,65,76,32,40,36,52,65,70,67,41
0000745A  4741 4C20 
0000745E  2824 3441 
00007462  4643 29   
00007465  00        11447          dc.b      0
                    11448   @m68kde~1_307:
00007466  4A4D 5020 11449          dc.b      74,77,80,32,0
0000746A  00        
                    11450   @m68kde~1_308:
0000746C  4A53 5220 11451          dc.b      74,83,82,32,0
00007470  00        
                    11452   @m68kde~1_309:
00007472  4C45 4120 11453          dc.b      76,69,65,32,0
00007476  00        
                    11454   @m68kde~1_310:
00007478  2C41 2564 11455          dc.b      44,65,37,100,0
0000747C  00        
                    11456   @m68kde~1_311:
0000747E  4C49 4E4B 11457          dc.b      76,73,78,75,32,0
00007482  2000      
                    11458   @m68kde~1_312:
00007484  4125 642C 11459          dc.b      65,37,100,44,35,37,100,0
00007488  2325 6400 
                    11460   @m68kde~1_313:
0000748C  4D4F 5645 11461          dc.b      77,79,86,69,46,66,32,0
00007490  2E42 2000 
                    11462   @m68kde~1_314:
00007494  4D4F 5645 11463          dc.b      77,79,86,69,46,76,32,0
00007498  2E4C 2000 
                    11464   @m68kde~1_315:
0000749C  4D4F 5645 11465          dc.b      77,79,86,69,46,87,32,0
000074A0  2E57 2000 
                    11466   @m68kde~1_316:
000074A4  2C00      11467          dc.b      44,0
                    11468   @m68kde~1_317:
000074A6  4D4F 5645 11469          dc.b      77,79,86,69,32,0
000074AA  2000      
                    11470   @m68kde~1_318:
000074AC  2C43 4352 11471          dc.b      44,67,67,82,0
000074B0  00        
                    11472   @m68kde~1_319:
000074B2  4D4F 5645 11473          dc.b      77,79,86,69,32,83,82,44,0
000074B6  2053 522C 
000074BA  00        
                    11474   @m68kde~1_320:
000074BC  4D4F 5645 11475          dc.b      77,79,86,69,32,0
000074C0  2000      
                    11476   @m68kde~1_321:
000074C2  2C53 5200 11477          dc.b      44,83,82,0
                    11478   @m68kde~1_322:
000074C6  4D4F 5645 11479          dc.b      77,79,86,69,32,85,83,80,44,65,37,100,0
000074CA  2055 5350 
000074CE  2C41 2564 
000074D2  00        
                    11480   @m68kde~1_323:
000074D4  4D4F 5645 11481          dc.b      77,79,86,69,32,65,37,100,44,85,83,80,0
000074D8  2041 2564 
000074DC  2C55 5350 
000074E0  00        
                    11482   @m68kde~1_324:
000074E2  4D4F 5645 11483          dc.b      77,79,86,69,77,0
000074E6  4D00      
                    11484   @m68kde~1_325:
000074E8  2E57 2000 11485          dc.b      46,87,32,0
                    11486   @m68kde~1_326:
000074EC  2E4C 2000 11487          dc.b      46,76,32,0
                    11488   @m68kde~1_327:
000074F0  00        11489          dc.b      0
                    11490   @m68kde~1_328:
000074F2  4425 6400 11491          dc.b      68,37,100,0
                    11492   @m68kde~1_329:
000074F6  2F44 2564 11493          dc.b      47,68,37,100,0
000074FA  00        
                    11494   @m68kde~1_330:
000074FC  4125 6400 11495          dc.b      65,37,100,0
                    11496   @m68kde~1_331:
00007500  2F41 2564 11497          dc.b      47,65,37,100,0
00007504  00        
                    11498   @m68kde~1_332:
00007506  2C00      11499          dc.b      44,0
                    11500   @m68kde~1_333:
00007508  2C00      11501          dc.b      44,0
                    11502   @m68kde~1_334:
0000750A  4425 6400 11503          dc.b      68,37,100,0
                    11504   @m68kde~1_335:
0000750E  2F44 2564 11505          dc.b      47,68,37,100,0
00007512  00        
                    11506   @m68kde~1_336:
00007514  4125 6400 11507          dc.b      65,37,100,0
                    11508   @m68kde~1_337:
00007518  2F41 2564 11509          dc.b      47,65,37,100,0
0000751C  00        
                    11510   @m68kde~1_338:
0000751E  4D4F 5645 11511          dc.b      77,79,86,69,80,46,87,32,36,37,88,40,65,37,100
00007522  502E 5720 
00007526  2425 5828 
0000752A  4125 64   
0000752D  292C 4425 11512          dc.b      41,44,68,37,100,0
00007531  6400      
                    11513   @m68kde~1_339:
00007534  4D4F 5645 11514          dc.b      77,79,86,69,80,46,76,32,36,37,88,40,65,37,100
00007538  502E 4C20 
0000753C  2425 5828 
00007540  4125 64   
00007543  292C 4425 11515          dc.b      41,44,68,37,100,0
00007547  6400      
                    11516   @m68kde~1_340:
0000754A  4D4F 5645 11517          dc.b      77,79,86,69,80,46,87,32,68,37,100,44,36,37,88
0000754E  502E 5720 
00007552  4425 642C 
00007556  2425 58   
00007559  2841 2564 11518          dc.b      40,65,37,100,41,0
0000755D  2900      
                    11519   @m68kde~1_341:
00007560  4D4F 5645 11520          dc.b      77,79,86,69,80,46,76,32,68,37,100,44,36,37,88
00007564  502E 4C20 
00007568  4425 642C 
0000756C  2425 58   
0000756F  2841 2564 11521          dc.b      40,65,37,100,41,0
00007573  2900      
                    11522   @m68kde~1_342:
00007576  4D4F 5645 11523          dc.b      77,79,86,69,81,32,35,36,37,88,44,68,37,100,0
0000757A  5120 2324 
0000757E  2558 2C44 
00007582  2564 00   
                    11524   @m68kde~1_343:
00007586  4D55 4C53 11525          dc.b      77,85,76,83,32,0
0000758A  2000      
                    11526   @m68kde~1_344:
0000758C  2C44 2564 11527          dc.b      44,68,37,100,0
00007590  00        
                    11528   @m68kde~1_345:
00007592  4D55 4C55 11529          dc.b      77,85,76,85,32,0
00007596  2000      
                    11530   @m68kde~1_346:
00007598  2C44 2564 11531          dc.b      44,68,37,100,0
0000759C  00        
                    11532   @m68kde~1_347:
0000759E  4E42 4344 11533          dc.b      78,66,67,68,32,0
000075A2  2000      
                    11534   @m68kde~1_348:
000075A4  4E45 4700 11535          dc.b      78,69,71,0
                    11536   @m68kde~1_349:
000075A8  4E45 4758 11537          dc.b      78,69,71,88,0
000075AC  00        
                    11538   @m68kde~1_350:
000075AE  4E4F 5000 11539          dc.b      78,79,80,0
                    11540   @m68kde~1_351:
000075B2  4E4F 5400 11541          dc.b      78,79,84,0
                    11542   @m68kde~1_352:
000075B6  4F52 00   11543          dc.b      79,82,0
                    11544   @m68kde~1_353:
000075BA  4F52 4920 11545          dc.b      79,82,73,32,35,36,37,50,88,44,67,67,82,0
000075BE  2324 2532 
000075C2  582C 4343 
000075C6  5200      
                    11546   @m68kde~1_354:
000075C8  4F52 4920 11547          dc.b      79,82,73,32,32,35,36,37,88,44,83,82,0
000075CC  2023 2425 
000075D0  582C 5352 
000075D4  00        
                    11548   @m68kde~1_355:
000075D6  5045 4120 11549          dc.b      80,69,65,32,0
000075DA  00        
                    11550   @m68kde~1_356:
000075DC  5245 5345 11551          dc.b      82,69,83,69,84,0
000075E0  5400      
                    11552   @m68kde~1_357:
000075E2  5254 4500 11553          dc.b      82,84,69,0
                    11554   @m68kde~1_358:
000075E6  5254 5200 11555          dc.b      82,84,82,0
                    11556   @m68kde~1_359:
000075EA  5254 5300 11557          dc.b      82,84,83,0
                    11558   @m68kde~1_360:
000075EE  5354 4F50 11559          dc.b      83,84,79,80,32,35,36,37,88,0
000075F2  2023 2425 
000075F6  5800      
                    11560   @m68kde~1_361:
000075F8  5342 4344 11561          dc.b      83,66,67,68,32,68,37,100,44,68,37,100,0
000075FC  2044 2564 
00007600  2C44 2564 
00007604  00        
                    11562   @m68kde~1_362:
00007606  5342 4344 11563          dc.b      83,66,67,68,32,45,40,65,37,100,41,44,45,40,65
0000760A  202D 2841 
0000760E  2564 292C 
00007612  2D28 41   
00007615  2564 2900 11564          dc.b      37,100,41,0
                    11565   @m68kde~1_363:
0000761A  5300      11566          dc.b      83,0
                    11567   @m68kde~1_364:
0000761C  5355 4241 11568          dc.b      83,85,66,65,46,87,32,0
00007620  2E57 2000 
                    11569   @m68kde~1_365:
00007624  5355 4241 11570          dc.b      83,85,66,65,46,76,32,0
00007628  2E4C 2000 
                    11571   @m68kde~1_366:
0000762C  2C41 2558 11572          dc.b      44,65,37,88,0
00007630  00        
                    11573   @m68kde~1_367:
00007632  5355 4200 11574          dc.b      83,85,66,0
                    11575   @m68kde~1_368:
00007636  5355 4251 11576          dc.b      83,85,66,81,0
0000763A  00        
                    11577   @m68kde~1_369:
0000763C  2325 3158 11578          dc.b      35,37,49,88,44,0
00007640  2C00      
                    11579   @m68kde~1_370:
00007642  5355 4258 11580          dc.b      83,85,66,88,0
00007646  00        
                    11581   @m68kde~1_371:
00007648  4425 3158 11582          dc.b      68,37,49,88,44,68,37,49,88,0
0000764C  2C44 2531 
00007650  5800      
                    11583   @m68kde~1_372:
00007652  2D28 4125 11584          dc.b      45,40,65,37,49,88,41,44,45,40,65,37,49,88,41
00007656  3158 292C 
0000765A  2D28 4125 
0000765E  3158 29   
00007661  00        11585          dc.b      0
                    11586   @m68kde~1_373:
00007662  5357 4150 11587          dc.b      83,87,65,80,32,68,37,100,0
00007666  2044 2564 
0000766A  00        
                    11588   @m68kde~1_374:
0000766C  5441 5320 11589          dc.b      84,65,83,32,0
00007670  00        
                    11590   @m68kde~1_375:
00007672  5452 4150 11591          dc.b      84,82,65,80,32,35,37,100,0
00007676  2023 2564 
0000767A  00        
                    11592   @m68kde~1_376:
0000767C  5452 4150 11593          dc.b      84,82,65,80,86,0
00007680  5600      
                    11594   @m68kde~1_377:
00007682  5453 5400 11595          dc.b      84,83,84,0
                    11596   @m68kde~1_378:
00007686  554E 4C4B 11597          dc.b      85,78,76,75,32,65,37,100,0
0000768A  2041 2564 
0000768E  00        
                    11598          section   data
00007690            11599                   align
          0000 7690 11600   DataStart       equ       *
                    11601   
                    11602   *********************************************************************************************************
                    11603   * Data Section for Initialised Data - these will be placed in rom as constants and have to be copied
                    11604   * to ram as part of the CStart routine in this file
                    11605   *********************************************************************************************************
                    11606   
                    11607   @itoa_1:
00007690  2D32 3134 11608          dc.b      45,50,49,52,55,52,56,51,54,52,56,0
00007694  3734 3833 
00007698  3634 3800 
                    11609          section   bss
0000769C            11610                   align
          0000 769C 11611   DataEnd         equ     *                       this label will equate to the address of the last byte of global variable in it
                    11612   
                    11613   *********************************************************************************************************
                    11614   * Section for Uninitialised Data held in ROM as constants
                    11615   *********************************************************************************************************
                    11616   
08030000            11617                   org     RamVectorTable          Ram based vector table must be stored here otherwise InstallException Handler will not work
          0000 000C 11618   DataLength      equ     DataEnd-DataStart       length of data needed to copy to Ram on bootup
                    11619   
                    11620   
08030000            11621   bss             org       bss
                    11622   
                    11623   *********************************************************************************************************
                    11624   * Build a ram based vector table for interrupts so we can install our own Exception Handlers in C code at run time
                    11625   * install the exception handler using the C function InstallExceptionHandler()
                    11626   *********************************************************************************************************
                    11627   
                    11628   
                    11629   
08030000            11630   VInitialSP       ds.l    1      dummy as we can't really install a handler for this
08030004            11631   VInitialPC       ds.l    1      dummy as we can't reallin install a handler for this
08030008            11632   VBusError        ds.l    1      storage for address of Bus Error Handler
0803000C            11633   VAddressError    ds.l    1      storage for address of Address Error Handler
08030010            11634   VIllegalInstr    ds.l    1      storage for address of Illegal Instruction handler
08030014            11635   VDividebyZero    ds.l    1      storage for address of divide by zero handler
08030018            11636   VCheck           ds.l    1      ditto
0803001C            11637   VTrapV           ds.l    1      ditto
08030020            11638   VPrivilege       ds.l    1      ditto
08030024            11639   VTrace           ds.l    1
08030028            11640   VLine1010emul    ds.l    1
0803002C            11641   VLine1111emul    ds.l    1
08030030            11642   VUnassigned1     ds.l    1
08030034            11643   VUnassigned2     ds.l    1
08030038            11644   VUnassigned3     ds.l    1
0803003C            11645   VUninit_IRQ      ds.l    1
08030040            11646   VUnassigned4     ds.l    1
08030044            11647   VUnassigned5     ds.l    1
08030048            11648   VUnassigned6     ds.l    1
0803004C            11649   VUnassigned7     ds.l    1
08030050            11650   VUnassigned8     ds.l    1
08030054            11651   VUnassigned9     ds.l    1
08030058            11652   VUnassigned10    ds.l    1
0803005C            11653   VUnassigned11    ds.l    1
08030060            11654   VSpuriousIRQ     ds.l    1
                    11655   
                    11656   * Interrupt handlers Vector 25-31
08030064            11657   VL1IRQ           ds.l    1       storage for 4 byte address of IRQ handler in your C program - install the handler using the C function InstallExceptionHandler()
08030068            11658   VL2IRQ           ds.l    1       storage for 4 byte address of IRQ handler in your C program - install the handler using the C function InstallExceptionHandler()
0803006C            11659   VL3IRQ           ds.l    1       storage for 4 byte address of IRQ handler in your C program - install the handler using the C function InstallExceptionHandler()
08030070            11660   VL4IRQ           ds.l    1       storage for 4 byte address of IRQ handler in your C program - install the handler using the C function InstallExceptionHandler()
08030074            11661   VL5IRQ           ds.l    1       storage for 4 byte address of IRQ handler in your C program - install the handler using the C function InstallExceptionHandler()
08030078            11662   VL6IRQ           ds.l    1       storage for 4 byte address of IRQ handler in your C program - install the handler using the C function InstallExceptionHandler()
0803007C            11663   VL7IRQ           ds.l    1       storage for 4 byte address of IRQ handler in your C program - install the handler using the C function InstallExceptionHandler()
                    11664   
                    11665   * Trap Handler vectors 32-47
08030080            11666   VTrap0           ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
08030084            11667   VTrap1           ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
08030088            11668   VTrap2           ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
0803008C            11669   VTrap3           ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
08030090            11670   VTrap4           ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
08030094            11671   VTrap5           ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
08030098            11672   VTrap6           ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
0803009C            11673   VTrap7           ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
080300A0            11674   VTrap8           ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
080300A4            11675   VTrap9           ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
080300A8            11676   VTrap10          ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
080300AC            11677   VTrap11          ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
080300B0            11678   VTrap12          ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
080300B4            11679   VTrap13          ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
080300B8            11680   VTrap14          ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
080300BC            11681   VTrap15          ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
                    11682   
                    11683   * the remaining exceptions are unassigned in the 68000 so no need to allocate storage for them here
                    11684   
                    11685   ***********************************************************************************************************
                    11686   * Other Variables
                    11687   ***********************************************************************************************************
                    11688   *__DebugA5       ds.l    1
                    11689   *__UserA5        ds.l    1
                    11690   
                    11691   ***********************************************************************************************************
080300C0            11692   __ungetbuf:     ds.l    1       ; ungetbuffer for stdio functions
080300C4            11693   __allocp:       ds.l    0       ; start of allocation units
080300C4            11694   __heap:         ds.l    0       ; pointers for malloc functions
                    11695   
                    11696   *__himem:       ds.l    himem            ; highest memory location + 1
                    11697   *__stklen:      ds.l    stklen           ; default stack size
                    11698   
                    11699   *********************************************************************************************************
                    11700   * Section for Heap
                    11701   *********************************************************************************************************
                    11702   
                    11703   _i:
080300C4            11704          ds.b      4
                    11705   _x:
080300C8            11706          ds.b      4
                    11707   _y:
080300CC            11708          ds.b      4
                    11709   _z:
080300D0            11710          ds.b      4
                    11711   _PortA_Count:
080300D4            11712          ds.b      4
                    11713   _Trace:
080300D8            11714          ds.b      4
                    11715   _GoFlag:
080300DC            11716          ds.b      4
                    11717   _Echo:
080300E0            11718          ds.b      4
                    11719   _d0:
080300E4            11720          ds.b      4
                    11721   _d1:
080300E8            11722          ds.b      4
                    11723   _d2:
080300EC            11724          ds.b      4
                    11725   _d3:
080300F0            11726          ds.b      4
                    11727   _d4:
080300F4            11728          ds.b      4
                    11729   _d5:
080300F8            11730          ds.b      4
                    11731   _d6:
080300FC            11732          ds.b      4
                    11733   _d7:
08030100            11734          ds.b      4
                    11735   _a0:
08030104            11736          ds.b      4
                    11737   _a1:
08030108            11738          ds.b      4
                    11739   _a2:
0803010C            11740          ds.b      4
                    11741   _a3:
08030110            11742          ds.b      4
                    11743   _a4:
08030114            11744          ds.b      4
                    11745   _a5:
08030118            11746          ds.b      4
                    11747   _a6:
0803011C            11748          ds.b      4
                    11749   _PC:
08030120            11750          ds.b      4
                    11751   _SSP:
08030124            11752          ds.b      4
                    11753   _USP:
08030128            11754          ds.b      4
                    11755   _SR:
0803012C            11756          ds.b      2
                    11757   _BreakPointAddress:
0803012E            11758          ds.b      32
                    11759   _BreakPointInstruction:
0803014E            11760          ds.b      16
                    11761   _BreakPointSetOrCleared:
0803015E            11762          ds.b      32
                    11763   _InstructionSize:
0803017E            11764          ds.b      4
                    11765   _WatchPointAddress:
08030182            11766          ds.b      32
                    11767   _WatchPointSetOrCleared:
080301A2            11768          ds.b      32
                    11769   _WatchPointString:
080301C2            11770          ds.b      800
                    11771   _Instruction:
080304E2            11772          ds.b      100
                    11773   _TempString:
08030546            11774          ds.b      100
                    11775          section   heap
080305AA            11776                   align
          0803 05AA 11777   bssEnd          equ *                   end of storage space for unitialised variables
                    11778   *                                       we have to copy all initialised variable from rom to here at startup
          0803 05AA 11779   heap   equ       *
080305AA            11780                    align
          0000 0000

Assembly errors: 0
