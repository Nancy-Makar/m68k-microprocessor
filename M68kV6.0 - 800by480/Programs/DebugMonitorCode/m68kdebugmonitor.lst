680x0 MACRO ASSEMBLER   Version 5.00   (c) 1992-2005 Peter J. Fondse

Date: 28 Feb 2023      Time: 22:29:52          Source: C:\CPEN412\GITHUB_STEUP\M68KV6.0 - 800BY480\PROGRAMS\DEBUGMONITORCODE\M68KDEBUGMONITOR.SRC

                       1          section   code
                       2   ; for initial stack use $08040000 if your system uses SRAM for main memory (top of 256kbyte SRAM space)
                       3   ; When your system is converted to use DRAM for main memory set this constant to $0C000000 (top of 64MByte DRAM space
                       4   
          0804 0000    5   StackPointerVal     equ $08040000      when using sram
                       6   ;StackPointerVal     equ $0C000000      when using dram
                       7   
                       8   ; define RamVectorTable as $0803000 if your system uses SRAM for main memory
                       9   ; When your system is converted to use DRAM for main memory define RamVectorTable constant as $0B000000 (top of 64MByte DRAM space)
                      10   
          0803 0000   11   RamVectorTable      equ $08030000      when using sram
                      12   ;RamVectorTable      equ $0B000000      when using dram
                      13   
                      14   
                      15   
                      16   ; CSTART.ASM  -  C startup-code for Debug Monitor
00000000              17                   align
                      18   
00000000              19                   org $00000000          ;start of rom based vector table, 68k hard wired to expect this at $0
                      20   
00000000  0804 0000   21   InitialSP       dc.l StackPointerVal   ;initial supervisor state stack pointer(stack decrements first before being used)
00000004  0000 0400   22   InitialPC       dc.l start             ;address of 1st instruction of program after a reset
00000008  0000 0802   23   BusError        dc.l E_BErro           ;bus error - stop program
0000000C  0000 0814   24   AddressError    dc.l E_AErro           ;address error - stop program
00000010  0000 0826   25   IllegalInstr    dc.l E_IInst           ;illegal instruction - stop program
00000014  0000 0838   26   DividebyZero    dc.l E_DZero           ;divide by zero error - stop program
00000018  0000 084A   27   Check           dc.l E_Check           ;Check instruction - stop program
0000001C  0000 085C   28   TrapV           dc.l E_Trapv           ;Trapv instruction - stop program
00000020  0000 086E   29   Privilege       dc.l E_Priv            ;privilige violation - stop program
00000024  0000 0880   30   Trace           dc.l E_Trace           ;stop on trace
00000028  0000 0892   31   Line1010emul    dc.l E_1010            ;1010 instructions stop
0000002C  0000 08A4   32   Line1111emul    dc.l E_1111            ;1111 instructions stop
00000030  0000 08B6   33   Unassigned1     dc.l E_Unnas1           ;unassigned vector
00000034  0000 08B6   34   Unassigned2     dc.l E_Unnas2           ;unassigned vector
00000038  0000 08B6   35   Unassigned3     dc.l E_Unnas3           ;unassigned vector
0000003C  0000 08B6   36   Uninit_IRQ      dc.l E_UnitI           ;uninitialised interrupt
00000040  0000 08B6   37   Unassigned4     dc.l E_Unnas4           ;unassigned vector
00000044  0000 08B6   38   Unassigned5     dc.l E_Unnas5           ;unassigned vector
00000048  0000 08B6   39   Unassigned6     dc.l E_Unnas6           ;unassigned vector
0000004C  0000 08B6   40   Unassigned7     dc.l E_Unnas7           ;unassigned vector
00000050  0000 08B6   41   Unassigned8     dc.l E_Unnas8           ;unassigned vector
00000054  0000 08B6   42   Unassigned9     dc.l E_Unnas9           ;unassigned vector
00000058  0000 08B6   43   Unassigned10    dc.l E_Unnas10           ;unassigned vector
0000005C  0000 08B6   44   Unassigned11    dc.l E_Unnas11           ;unassigned vector
00000060  0000 08B6   45   SpuriousIRQ     dc.l E_Spuri           ;stop on spurious irq
                      46   *
                      47   *
00000064  0000 049A   48   Level1IRQ       dc.l Level1RamISR
00000068  0000 04AC   49   Level2IRQ       dc.l Level2RamISR
0000006C  0000 04BE   50   Level3IRQ       dc.l Level3RamISR
00000070  0000 04D0   51   Level4IRQ       dc.l Level4RamISR
00000074  0000 04E2   52   Level5IRQ       dc.l Level5RamISR
00000078  0000 05EC   53   Level6IRQ       dc.l Level6RamISR
0000007C  0000 05FE   54   Level7IRQ       dc.l Level7RamISR
                      55   *
                      56   *
00000080  0000 0610   57   Trap0           dc.l Trap0RamISR        ; User installed trap handler
00000084  0000 0622   58   Trap1           dc.l Trap1RamISR        ; User installed trap handler
00000088  0000 0634   59   Trap2           dc.l Trap2RamISR        ; User installed trap handler
0000008C  0000 0646   60   Trap3           dc.l Trap3RamISR        ; User installed trap handler
00000090  0000 0658   61   Trap4           dc.l Trap4RamISR        ; User installed trap handler
00000094  0000 066A   62   Trap5           dc.l Trap5RamISR        ; User installed trap handler
00000098  0000 067C   63   Trap6           dc.l Trap6RamISR        ; User installed trap handler
0000009C  0000 068E   64   Trap7           dc.l Trap7RamISR        ; User installed trap handler
000000A0  0000 06A0   65   Trap8           dc.l Trap8RamISR        ; User installed trap handler
000000A4  0000 06B2   66   Trap9           dc.l Trap9RamISR        ; User installed trap handler
000000A8  0000 06C4   67   Trap10          dc.l Trap10RamISR       ; User installed trap handler
000000AC  0000 06D6   68   Trap11          dc.l Trap11RamISR       ; User installed trap handler
000000B0  0000 06E8   69   Trap12          dc.l Trap12RamISR       ; User installed trap handler
000000B4  0000 06FA   70   Trap13          dc.l Trap13RamISR       ; User installed trap handler
000000B8  0000 070C   71   Trap14          dc.l Trap14RamISR       ; User installed trap handler
000000BC  0000 07FC   72   Trap15          dc.l Trap15RamISR       ; User installed trap handler
                      73   
                      74   *
                      75   * Other vectors 64-255 are users vectors for autovectored IO device (not implemented in TG68)
                      76   *
                      77   
00000400              78                   org       $00000400
                      79   
00000400  46FC 2700   80   start:          move.w     #$2700,SR             set interrupts to disable until later
                      81   
                      82   *************************************************************************************
                      83   ** add some 68000 instruction to read and write to memory, IO etc. This doesn't do anything
                      84   ** important, it just creates read and write bus cycles to specific addresses which
                      85   ** help with debugging hardware in Quartus simulations
                      86   **************************************************************************************
                      87   
                      88                   ; perform some dummy read/write of 32 bit values to memory to see waveforms during a simulation
                      89   
00000404  23FC 1122   90                   move.l     #$11223344,$08060000 write 32 bits, to memory
00000408  3344 0806 
0000040C  0000      
0000040E  2039 0806   91                   move.l     $08060000,d0         read 32 bits back
00000412  0000      
00000414  13FC 0000   92                   move.b     #$00,$00400000         write to the output ports
00000418  0040 0000 
0000041C  13FC 0000   93                   move.b     #$00,$00400002         write to the output ports
00000420  0040 0002 
00000424  13FC 0000   94                   move.b     #$00,$00400004         write to the output ports
00000428  0040 0004 
0000042C  13FC 0000   95                   move.b     #$00,$00400006         write to the output ports
00000430  0040 0006 
00000434  13FC 0000   96                   move.b     #$00,$00400008         write to the output ports
00000438  0040 0008 
0000043C  13FC 0000   97                   move.b     #$00,$00400010         write to the hex display ports
00000440  0040 0010 
00000444  13FC 0000   98                   move.b     #$00,$00400012         write to the hex display ports
00000448  0040 0012 
0000044C  13FC 0000   99                   move.b     #$00,$00400014         write to the hex display ports
00000450  0040 0014 
00000454  13FC 0000  100                   move.b     #0,$00400020         write to the LCD
00000458  0040 0020 
0000045C  13FC 0000  101                   move.b     #0,$00400022         write to the LCD
00000460  0040 0022 
00000464  13FC 0000  102                   move.b     #0,$00400030         write to the Timer1 Data
00000468  0040 0030 
0000046C  13FC 0000  103                   move.b     #0,$00400032         write to the Timer1 Control
00000470  0040 0032 
                     104   
                     105                   ; some important initialisation do not modify
00000474  23FC FFFF  106                   move.l    #-1,__ungetbuf  ; unget-buffer for keyboard input
00000478  FFFF 0803 
0000047C  00C0      
0000047E  23FC 0000  107                   move.l    #0,__allocp     ; pointer to allocated memory for malloc-function
00000482  0000 0803 
00000486  00C4      
00000488  23FC 0803  108                   move.l    #heap,__heap    ; pointer to free memory
0000048C  0596 0803 
00000490  00C4      
                     109   
                     110   
00000492  4EB9 0000  111   mainloop        jsr       _main
00000496  33F8      
00000498  60F8       112                   bra       mainloop
                     113   
                     114   *********************************************************************************************************
                     115   * Code to call Ram Based Interrupt handler and other exeception handler code
                     116   *********************************************************************************************************
0000049A  48E7 FFFE  117   Level1RamISR    movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
0000049E  2079 0803  118                   move.l    VL1IRQ,a0               get ram based address into a0
000004A2  0064      
000004A4  4E90       119                   jsr       0(a0)                   jump to the subroutine that is the interrupt handler, using ram based address
000004A6  4CDF 7FFF  120                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
000004AA  4E73       121                   rte
000004AC  48E7 FFFE  122   Level2RamISR    movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
000004B0  2079 0803  123                   move.l    VL2IRQ,a0               get ram based address into a0
000004B4  0068      
000004B6  4E90       124                   jsr       0(a0)                   jump to the subroutine that is the interrupt handler, using ram based address
000004B8  4CDF 7FFF  125                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
000004BC  4E73       126                   rte
000004BE  48E7 FFFE  127   Level3RamISR    movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
000004C2  2079 0803  128                   move.l    VL3IRQ,a0               get ram based address into a0
000004C6  006C      
000004C8  4E90       129                   jsr       0(a0)                   jump to the subroutine that is the interrupt handler, using ram based address
000004CA  4CDF 7FFF  130                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
000004CE  4E73       131                   rte
000004D0  48E7 FFFE  132   Level4RamISR    movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
000004D4  2079 0803  133                   move.l    VL4IRQ,a0               get ram based address into a0
000004D8  0070      
000004DA  4E90       134                   jsr       0(a0)                   jump to the subroutine that is the interrupt handler, using ram based address
000004DC  4CDF 7FFF  135                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
000004E0  4E73       136                   rte
                     137   
                     138   * Trace trap Handler
                     139   
                     140   Level5RamISR
                     141   *
                     142   **         Copy 68000 registers from debug monitor Variables,
                     143   *
                     144   *
000004E2  23FC 0000  145                   move.l    #1,_Trace              switch on Trace Mode
000004E6  0001 0803 
000004EA  00D8      
000004EC  13FC 0000  146                   move.b    #$0,$0040000A          turn off a trace exception so we don't when generate a trace when disassembling instruction in the register dump (disassembling causes access to use program)
000004F0  0040 000A 
000004F4  33DF 0803  147                   move.w    (sp)+,_SR              get at the users status register pointed to by stack pointer and copy
000004F8  012C      
000004FA  23DF 0803  148                   move.l    (sp)+,_PC              get at the users program counter and copy
000004FE  0120      
                     149   *
00000500  23CF 0803  150                   move.l    SP,_SSP                copy system stack pointer to debug monitor variable
00000504  0124      
00000506  23C0 0803  151                   move.l    d0,_d0
0000050A  00E4      
0000050C  23C1 0803  152                   move.l    d1,_d1
00000510  00E8      
00000512  23C2 0803  153                   move.l    d2,_d2
00000516  00EC      
00000518  23C3 0803  154                   move.l    d3,_d3
0000051C  00F0      
0000051E  23C4 0803  155                   move.l    d4,_d4
00000522  00F4      
00000524  23C5 0803  156                   move.l    d5,_d5
00000528  00F8      
0000052A  23C6 0803  157                   move.l    d6,_d6
0000052E  00FC      
00000530  23C7 0803  158                   move.l    d7,_d7
00000534  0100      
                     159   *
00000536  23C8 0803  160                   move.l    a0,_a0
0000053A  0104      
0000053C  23C9 0803  161                   move.l    a1,_a1
00000540  0108      
00000542  23CA 0803  162                   move.l    a2,_a2
00000546  010C      
00000548  23CB 0803  163                   move.l    a3,_a3
0000054C  0110      
0000054E  23CC 0803  164                   move.l    a4,_a4
00000552  0114      
00000554  23CD 0803  165                   move.l    a5,_a5
00000558  0118      
0000055A  23CE 0803  166                   move.l    a6,_a6
0000055E  011C      
00000560  4E68       167                   move.l    usp,a0
00000562  23C8 0803  168                   move.l    a0,_USP
00000566  0128      
                     169   *
00000568  2079 0803  170                   move.l    VL5IRQ,a0              get ram based address into a0, trace exception for next instruction will be generated in Menu SPACE command
0000056C  0074      
0000056E  4E90       171                   jsr       0(a0)                  jump to the subroutine that is the trap handler, using ram based address
                     172   
                     173   ** After trace, reload 68000 registers with new values before continuing
                     174   
00000570  2039 0803  175                   move.l   _d0,d0
00000574  00E4      
00000576  2239 0803  176                   move.l   _d1,d1
0000057A  00E8      
0000057C  2439 0803  177                   move.l   _d2,d2
00000580  00EC      
00000582  2639 0803  178                   move.l   _d3,d3
00000586  00F0      
00000588  2839 0803  179                   move.l   _d4,d4
0000058C  00F4      
0000058E  2A39 0803  180                   move.l   _d5,d5
00000592  00F8      
00000594  2C39 0803  181                   move.l   _d6,d6
00000598  00FC      
0000059A  2E39 0803  182                   move.l   _d7,d7
0000059E  0100      
                     183   
000005A0  2079 0803  184                   move.l   _USP,a0
000005A4  0128      
000005A6  4E60       185                   move.l   a0,USP                     load user stack pointer
000005A8  2079 0803  186                   move.l   _a0,a0
000005AC  0104      
000005AE  2279 0803  187                   move.l   _a1,a1
000005B2  0108      
000005B4  2479 0803  188                   move.l   _a2,a2
000005B8  010C      
000005BA  2679 0803  189                   move.l   _a3,a3
000005BE  0110      
000005C0  2879 0803  190                   move.l   _a4,a4
000005C4  0114      
000005C6  2A79 0803  191                   move.l   _a5,a5
000005CA  0118      
000005CC  2C79 0803  192                   move.l   _a6,a6
000005D0  011C      
                     193   
000005D2  2E79 0803  194                   move.l   _SSP,sp
000005D6  0124      
000005D8  2F39 0803  195                   move.l   _PC,-(sp)
000005DC  0120      
000005DE  3F39 0803  196                   move.w   _SR,-(sp)
000005E2  012C      
000005E4  11F8 0074  197                   move.b    $00000074,$0	          read trace exception vector after accessing disassembly to reset the trace request causes by disassembling program above
000005E8  0000      
000005EA  4E73       198                   rte
                     199   
                     200   * address trap handler
                     201   
000005EC  48E7 FFFE  202   Level6RamISR    movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
000005F0  2079 0803  203                   move.l    VL6IRQ,a0               get ram based address into a0
000005F4  0078      
000005F6  4E90       204                   jsr       0(a0)                   jump to the subroutine that is the interrupt handler, using ram based address
000005F8  4CDF 7FFF  205                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
000005FC  4E73       206                   rte
                     207   
000005FE  48E7 FFFE  208   Level7RamISR    movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000602  2079 0803  209                   move.l    VL7IRQ,a0               get ram based address into a0
00000606  007C      
00000608  4E90       210                   jsr       0(a0)                   jump to the subroutine that is the interrupt handler, using ram based address
0000060A  4CDF 7FFF  211                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
0000060E  4E73       212                   rte
                     213   
                     214   
                     215   ********************************************************************************************************
                     216   * Ram based Trap handler and other exeception handler code
                     217   *********************************************************************************************************
                     218   
00000610  48E7 FFFE  219   Trap0RamISR     movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000614  2079 0803  220                   move.l    VTrap0,a0                get ram based address into a0
00000618  0080      
0000061A  4E90       221                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
0000061C  4CDF 7FFF  222                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
00000620  4E73       223                   rte
                     224   
00000622  48E7 FFFE  225   Trap1RamISR     movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000626  2079 0803  226                   move.l    VTrap1,a0                get ram based address into a0
0000062A  0084      
0000062C  4E90       227                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
0000062E  4CDF 7FFF  228                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
00000632  4E73       229                   rte
                     230   
00000634  48E7 FFFE  231   Trap2RamISR     movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000638  2079 0803  232                   move.l    VTrap2,a0                get ram based address into a0
0000063C  0088      
0000063E  4E90       233                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
00000640  4CDF 7FFF  234                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
00000644  4E73       235                   rte
                     236   
00000646  48E7 FFFE  237   Trap3RamISR     movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
0000064A  2079 0803  238                   move.l    VTrap3,a0                get ram based address into a0
0000064E  008C      
00000650  4E90       239                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
00000652  4CDF 7FFF  240                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
00000656  4E73       241                   rte
                     242   
00000658  48E7 FFFE  243   Trap4RamISR     movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
0000065C  2079 0803  244                   move.l    VTrap4,a0                get ram based address into a0
00000660  0090      
00000662  4E90       245                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
00000664  4CDF 7FFF  246                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
00000668  4E73       247                   rte
                     248   
0000066A  48E7 FFFE  249   Trap5RamISR     movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
0000066E  2079 0803  250                   move.l    VTrap5,a0                get ram based address into a0
00000672  0094      
00000674  4E90       251                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
00000676  4CDF 7FFF  252                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
0000067A  4E73       253                   rte
                     254   
0000067C  48E7 FFFE  255   Trap6RamISR     movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000680  2079 0803  256                   move.l    VTrap6,a0                get ram based address into a0
00000684  0098      
00000686  4E90       257                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
00000688  4CDF 7FFF  258                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
0000068C  4E73       259                   rte
                     260   
0000068E  48E7 FFFE  261   Trap7RamISR     movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000692  2079 0803  262                   move.l    VTrap7,a0                get ram based address into a0
00000696  009C      
00000698  4E90       263                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
0000069A  4CDF 7FFF  264                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
0000069E  4E73       265                   rte
                     266   
000006A0  48E7 FFFE  267   Trap8RamISR     movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
000006A4  2079 0803  268                   move.l    VTrap8,a0                get ram based address into a0
000006A8  00A0      
000006AA  4E90       269                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
000006AC  4CDF 7FFF  270                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
000006B0  4E73       271                   rte
                     272   
000006B2  48E7 FFFE  273   Trap9RamISR     movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
000006B6  2079 0803  274                   move.l    VTrap9,a0                get ram based address into a0
000006BA  00A4      
000006BC  4E90       275                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
000006BE  4CDF 7FFF  276                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
000006C2  4E73       277                   rte
                     278   
000006C4  48E7 FFFE  279   Trap10RamISR    movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
000006C8  2079 0803  280                   move.l    VTrap10,a0                get ram based address into a0
000006CC  00A8      
000006CE  4E90       281                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
000006D0  4CDF 7FFF  282                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
000006D4  4E73       283                   rte
                     284   
000006D6  48E7 FFFE  285   Trap11RamISR    movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
000006DA  2079 0803  286                   move.l    VTrap11,a0                get ram based address into a0
000006DE  00AC      
000006E0  4E90       287                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
000006E2  4CDF 7FFF  288                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
000006E6  4E73       289                   rte
                     290   
000006E8  48E7 FFFE  291   Trap12RamISR    movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
000006EC  2079 0803  292                   move.l    VTrap12,a0                get ram based address into a0
000006F0  00B0      
000006F2  4E90       293                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
000006F4  4CDF 7FFF  294                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
000006F8  4E73       295                   rte
                     296   
000006FA  48E7 FFFE  297   Trap13RamISR    movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
000006FE  2079 0803  298                   move.l    VTrap13,a0                get ram based address into a0
00000702  00B4      
00000704  4E90       299                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
00000706  4CDF 7FFF  300                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
0000070A  4E73       301                   rte
                     302   
                     303   Trap14RamISR    ;Break Point Handler
                     304   *
                     305   **         Copy 68000 registers from debug monitor Variables
                     306   *
0000070C  23FC 0000  307                   move.l    #1,_Trace      switch on Trace Mode
00000710  0001 0803 
00000714  00D8      
00000716  33DF 0803  308                   move.w    (sp)+,_SR       get at the users status register pointed to by stack pointer and copy
0000071A  012C      
0000071C  23DF 0803  309                   move.l    (sp)+,_PC      get at the users program counter and copy
00000720  0120      
                     310   *
00000722  23C0 0803  311                   move.l    d0,_d0
00000726  00E4      
00000728  23C1 0803  312                   move.l    d1,_d1
0000072C  00E8      
0000072E  23C2 0803  313                   move.l    d2,_d2
00000732  00EC      
00000734  23C3 0803  314                   move.l    d3,_d3
00000738  00F0      
0000073A  23C4 0803  315                   move.l    d4,_d4
0000073E  00F4      
00000740  23C5 0803  316                   move.l    d5,_d5
00000744  00F8      
00000746  23C6 0803  317                   move.l    d6,_d6
0000074A  00FC      
0000074C  23C7 0803  318                   move.l    d7,_d7
00000750  0100      
                     319   *
00000752  23C8 0803  320                   move.l    a0,_a0
00000756  0104      
00000758  23C9 0803  321                   move.l    a1,_a1
0000075C  0108      
0000075E  23CA 0803  322                   move.l    a2,_a2
00000762  010C      
00000764  23CB 0803  323                   move.l    a3,_a3
00000768  0110      
0000076A  23CC 0803  324                   move.l    a4,_a4
0000076E  0114      
00000770  23CD 0803  325                   move.l    a5,_a5
00000774  0118      
00000776  23CE 0803  326                   move.l    a6,_a6
0000077A  011C      
0000077C  4E68       327                   move.l    USP,a0
0000077E  23C8 0803  328                   move.l    a0,_USP
00000782  0128      
                     329   *
00000784  2079 0803  330                   move.l    VTrap14,a0             get ram based address into a0
00000788  00B8      
0000078A  4E90       331                   jsr       0(a0)                  jump to the subroutine that is the trap handler, using ram based address
                     332   
                     333   ** After breakpoint reload 68000 registers with new values before continuing
                     334   
                     335   *                move.b    #$ff,$0040000A     generate a trace exception for the next instruction
0000078C  2039 0803  336                   move.l   _d0,d0
00000790  00E4      
00000792  2239 0803  337                   move.l   _d1,d1
00000796  00E8      
00000798  2439 0803  338                   move.l   _d2,d2
0000079C  00EC      
0000079E  2639 0803  339                   move.l   _d3,d3
000007A2  00F0      
000007A4  2839 0803  340                   move.l   _d4,d4
000007A8  00F4      
000007AA  2A39 0803  341                   move.l   _d5,d5
000007AE  00F8      
000007B0  2C39 0803  342                   move.l   _d6,d6
000007B4  00FC      
000007B6  2E39 0803  343                   move.l   _d7,d7
000007BA  0100      
                     344   
000007BC  2079 0803  345                   move.l   _USP,a0
000007C0  0128      
000007C2  4E60       346                   move.l   a0,USP        load user stack pointer A7
000007C4  2079 0803  347                   move.l   _a0,a0
000007C8  0104      
000007CA  2279 0803  348                   move.l   _a1,a1
000007CE  0108      
000007D0  2479 0803  349                   move.l   _a2,a2
000007D4  010C      
000007D6  2679 0803  350                   move.l   _a3,a3
000007DA  0110      
000007DC  2879 0803  351                   move.l   _a4,a4
000007E0  0114      
000007E2  2A79 0803  352                   move.l   _a5,a5
000007E6  0118      
000007E8  2C79 0803  353                   move.l   _a6,a6
000007EC  011C      
                     354   
000007EE  2F39 0803  355                   move.l   _PC,-(sp)
000007F2  0120      
000007F4  3F39 0803  356                   move.w   _SR,-(sp)
000007F8  012C      
000007FA  4E73       357                   rte
                     358   
000007FC  4EF9 0000  359   Trap15RamISR    jmp     _CallDebugMonitor
00000800  24D4      
                     360   *                movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
                     361   *                move.l    VTrap15,a0                get ram based address into a0
                     362   *                jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
                     363   *                movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
                     364   *                rte
                     365   
                     366   *********************************************************************************************************
                     367   *Default exception handler for everything without a specific handler
                     368   *********************************************************************************************************
                     369   
                     370   *
                     371   **              Jump here for each unhandled exception
                     372   **              If you need to, MAKE SURE YOU SAVE ALL IMPORTANT REGISTERS AND RESTORE THEM BEFORE RETURNING (IF APPROPRIATE)
                     373   *
                     374   
00000802  48E7 FFFE  375   E_BErro         movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000806  2079 0803  376                   move.l    VBusError,a0            get ram based address into a0
0000080A  0008      
0000080C  4E90       377                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
0000080E  4CDF 7FFF  378                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
00000812  4E73       379                   rte
00000814  48E7 FFFE  380   E_AErro         movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000818  2079 0803  381                   move.l    VAddressError,a0        get ram based address into a0
0000081C  000C      
0000081E  4E90       382                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
00000820  4CDF 7FFF  383                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
00000824  4E73       384                   rte
00000826  48E7 FFFE  385   E_IInst         movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
0000082A  2079 0803  386                   move.l    VIllegalInstr,a0        get ram based address into a0
0000082E  0010      
00000830  4E90       387                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
00000832  4CDF 7FFF  388                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
00000836  4E73       389                   rte
00000838  48E7 FFFE  390   E_DZero         movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
0000083C  2079 0803  391                   move.l    VDividebyZero,a0        get ram based address into a0
00000840  0014      
00000842  4E90       392                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
00000844  4CDF 7FFF  393                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
00000848  4E73       394                   rte
0000084A  48E7 FFFE  395   E_Check         movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
0000084E  2079 0803  396                   move.l    VCheck,a0               get ram based address into a0
00000852  0018      
00000854  4E90       397                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
00000856  4CDF 7FFF  398                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
0000085A  4E73       399                   rte
0000085C  48E7 FFFE  400   E_Trapv         movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000860  2079 0803  401                   move.l    VTrapV,a0               get ram based address into a0
00000864  001C      
00000866  4E90       402                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
00000868  4CDF 7FFF  403                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
0000086C  4E73       404                   rte
0000086E  48E7 FFFE  405   E_Priv          movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000872  2079 0803  406                   move.l    VPrivilege,a0           get ram based address into a0
00000876  0020      
00000878  4E90       407                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
0000087A  4CDF 7FFF  408                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
0000087E  4E73       409                   rte
00000880  48E7 FFFE  410   E_Trace         movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000884  2079 0803  411                   move.l    VTrace,a0               get ram based address into a0
00000888  0024      
0000088A  4E90       412                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
0000088C  4CDF 7FFF  413                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
00000890  4E73       414                   rte
00000892  48E7 FFFE  415   E_1010          movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000896  2079 0803  416                   move.l    VLine1010emul,a0        get ram based address into a0
0000089A  0028      
0000089C  4E90       417                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
0000089E  4CDF 7FFF  418                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
000008A2  4E73       419                   rte
000008A4  48E7 FFFE  420   E_1111          movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
000008A8  2079 0803  421                   move.l    VLine1111emul,a0        get ram based address into a0
000008AC  002C      
000008AE  4E90       422                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
000008B0  4CDF 7FFF  423                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
000008B4  4E73       424                   rte
                     425   E_Unnas1
                     426   E_Unnas2
                     427   E_Unnas3
                     428   E_UnitI
                     429   E_Unnas4
                     430   E_Unnas5
                     431   E_Unnas6
                     432   E_Unnas7
                     433   E_Unnas8
                     434   E_Unnas9
                     435   E_Unnas10
                     436   E_Unnas11
                     437   E_Spuri
000008B6  60FE       438   _stop            bra _stop                         stop
                     439   ***************************************************************************************************
                     440   * Go() function in debug monitor
                     441   ***************************************************************************************************
                     442   _go
000008B8  2E79 0803  443                   move.l   _SSP,a7        load system stack pointer (remember we are in supervisor mode when running this so a7 is the System stack pointer)
000008BC  0124      
000008BE  2F39 0803  444                   move.l   _PC,-(sp)      copy debug monitor PC variable to the stack
000008C2  0120      
000008C4  3F39 0803  445                   move.w   _SR,-(sp)      copy debug monitor status reg to the stack
000008C8  012C      
                     446   
000008CA  1038 0078  447                   move.b   $00000078,d0  remove any spurious address exception arising after power on
000008CE  2039 0803  448                   move.l   _d0,d0
000008D2  00E4      
000008D4  2239 0803  449                   move.l   _d1,d1
000008D8  00E8      
000008DA  2439 0803  450                   move.l   _d2,d2
000008DE  00EC      
000008E0  2639 0803  451                   move.l   _d3,d3
000008E4  00F0      
000008E6  2839 0803  452                   move.l   _d4,d4
000008EA  00F4      
000008EC  2A39 0803  453                   move.l   _d5,d5
000008F0  00F8      
000008F2  2C39 0803  454                   move.l   _d6,d6
000008F6  00FC      
000008F8  2E39 0803  455                   move.l   _d7,d7
000008FC  0100      
                     456   
000008FE  2079 0803  457                   move.l   _USP,a0
00000902  0128      
00000904  4E60       458                   move.l   a0,USP        load user stack pointer (remember we are in supervisor mode when running this, so a7 is the System stack pointer)
00000906  2079 0803  459                   move.l   _a0,a0
0000090A  0104      
0000090C  2279 0803  460                   move.l   _a1,a1
00000910  0108      
00000912  2479 0803  461                   move.l   _a2,a2
00000916  010C      
00000918  2679 0803  462                   move.l   _a3,a3
0000091C  0110      
0000091E  2879 0803  463                   move.l   _a4,a4
00000922  0114      
00000924  2A79 0803  464                   move.l   _a5,a5
00000928  0118      
0000092A  2C79 0803  465                   move.l   _a6,a6
0000092E  011C      
00000930  4E73       466                   rte                    load the status reg and PC from the stack and commence running
                     467                                          *used to be rte but this didn't load the status byte
                     468   
                     469   ; C:\CPEN412\GITHUB_STEUP\M68KV6.0 - 800BY480\PROGRAMS\DEBUGMONITORCODE\M68KDEBUG (NO DISASSEMBLER).C - Compiled by CC68K  Version 5.00 (c) 1991-2005  Peter J. Fondse
                     470   ; #include "DebugMonitor.h"
                     471   ; // use 08030000 for a system running from sram or 0B000000 for system running from dram
                     472   ; //#define StartOfExceptionVectorTable 0x08030000
                     473   ; #define StartOfExceptionVectorTable 0x0B000000
                     474   ; // use 0C000000 for dram or hex 08040000 for sram
                     475   ; //#define TopOfStack 0x08040000
                     476   ; #define TopOfStack 0x0C000000
                     477   ; /*************************************************************
                     478   ; ** SPI Controller registers
                     479   ; **************************************************************/
                     480   ; // SPI Registers
                     481   ; // these two macros enable or disable the flash memory chip enable off SSN_O[7..0]
                     482   ; // in this case we assume there is only 1 device connected to SSN_O[0] so we can
                     483   ; // write hex FE to the SPI_CS to enable it (the enable on the flash chip is active low)
                     484   ; // and write FF to disable it
                     485   ; #define Enable_SPI_CS() SPI_CS = 0xFE
                     486   ; #define Disable_SPI_CS() SPI_CS = 0xFF
                     487   ; /* DO NOT INITIALISE GLOBAL VARIABLES - DO IT in MAIN() */
                     488   ; unsigned int i, x, y, z, PortA_Count;
                     489   ; int     Trace, GoFlag, Echo;                       // used in tracing/single stepping
                     490   ; // 68000 register dump and preintialise value (these can be changed by the user program when it is running, e.g. stack pointer, registers etc
                     491   ; unsigned int d0, d1, d2, d3, d4, d5, d6, d7;
                     492   ; unsigned int a0, a1, a2, a3, a4, a5, a6;
                     493   ; unsigned int PC, SSP, USP;
                     494   ; unsigned short int SR;
                     495   ; // Breakpoint variables
                     496   ; unsigned int BreakPointAddress[8];                      //array of 8 breakpoint addresses
                     497   ; unsigned short int BreakPointInstruction[8];           // to hold the instruction opcode at the breakpoint
                     498   ; unsigned int BreakPointSetOrCleared[8];
                     499   ; unsigned int InstructionSize;
                     500   ; // watchpoint variables
                     501   ; unsigned int WatchPointAddress[8];                      //array of 8 breakpoint addresses
                     502   ; unsigned int WatchPointSetOrCleared[8];
                     503   ; char WatchPointString[8][100];
                     504   ; char    TempString[100];
                     505   ; /************************************************************************************
                     506   ; *Subroutine to give the 68000 something useless to do to waste 1 mSec
                     507   ; ************************************************************************************/
                     508   ; void Wait1ms(void)
                     509   ; {
                     510   _Wait1ms:
00000932  2F02       511          move.l    D2,-(A7)
                     512   ; long int  i;
                     513   ; for (i = 0; i < 1000; i++)
00000934  4282       514          clr.l     D2
                     515   Wait1ms_1:
00000936  0C82 0000  516          cmp.l     #1000,D2
0000093A  03E8      
0000093C  6C04       517          bge.s     Wait1ms_3
0000093E  5282       518          addq.l    #1,D2
00000940  60F4       519          bra       Wait1ms_1
                     520   Wait1ms_3:
00000942  241F       521          move.l    (A7)+,D2
00000944  4E75       522          rts
                     523   ; ;
                     524   ; }
                     525   ; /************************************************************************************
                     526   ; *Subroutine to give the 68000 something useless to do to waste 3 mSec
                     527   ; **************************************************************************************/
                     528   ; void Wait3ms(void)
                     529   ; {
                     530   _Wait3ms:
00000946  2F02       531          move.l    D2,-(A7)
                     532   ; int i;
                     533   ; for (i = 0; i < 3; i++)
00000948  4282       534          clr.l     D2
                     535   Wait3ms_1:
0000094A  0C82 0000  536          cmp.l     #3,D2
0000094E  0003      
00000950  6C08       537          bge.s     Wait3ms_3
                     538   ; Wait1ms();
00000952  4EB8 0932  539          jsr       _Wait1ms
00000956  5282       540          addq.l    #1,D2
00000958  60F0       541          bra       Wait3ms_1
                     542   Wait3ms_3:
0000095A  241F       543          move.l    (A7)+,D2
0000095C  4E75       544          rts
                     545   ; }
                     546   ; /*********************************************************************************************
                     547   ; *Subroutine to initialise the display by writing some commands to the LCD internal registers
                     548   ; *********************************************************************************************/
                     549   ; void Init_LCD(void)
                     550   ; {
                     551   _Init_LCD:
                     552   ; LCDcommand = (char)(0x0c);
0000095E  13FC 000C  553          move.b    #12,4194336
00000962  0040 0020 
                     554   ; Wait3ms();
00000966  4EB8 0946  555          jsr       _Wait3ms
                     556   ; LCDcommand = (char)(0x38);
0000096A  13FC 0038  557          move.b    #56,4194336
0000096E  0040 0020 
                     558   ; Wait3ms();
00000972  4EB8 0946  559          jsr       _Wait3ms
00000976  4E75       560          rts
                     561   ; }
                     562   ; /******************************************************************************
                     563   ; *subroutine to output a single character held in d1 to the LCD display
                     564   ; *it is assumed the character is an ASCII code and it will be displayed at the
                     565   ; *current cursor position
                     566   ; *******************************************************************************/
                     567   ; void Outchar(int c)
                     568   ; {
                     569   _Outchar:
00000978  4E56 0000  570          link      A6,#0
                     571   ; LCDdata = (char)(c);
0000097C  202E 0008  572          move.l    8(A6),D0
00000980  13C0 0040  573          move.b    D0,4194338
00000984  0022      
                     574   ; Wait1ms();
00000986  4EB8 0932  575          jsr       _Wait1ms
0000098A  4E5E       576          unlk      A6
0000098C  4E75       577          rts
                     578   ; }
                     579   ; /**********************************************************************************
                     580   ; *subroutine to output a message at the current cursor position of the LCD display
                     581   ; ************************************************************************************/
                     582   ; void OutMess(char* theMessage)
                     583   ; {
                     584   _OutMess:
0000098E  4E56 FFFC  585          link      A6,#-4
                     586   ; char c;
                     587   ; while ((c = *theMessage++) != (char)(0))
                     588   OutMess_1:
00000992  206E 0008  589          move.l    8(A6),A0
00000996  52AE 0008  590          addq.l    #1,8(A6)
0000099A  1D50 FFFF  591          move.b    (A0),-1(A6)
0000099E  1010       592          move.b    (A0),D0
000009A0  6712       593          beq.s     OutMess_3
                     594   ; Outchar(c);
000009A2  122E FFFF  595          move.b    -1(A6),D1
000009A6  4881       596          ext.w     D1
000009A8  48C1       597          ext.l     D1
000009AA  2F01       598          move.l    D1,-(A7)
000009AC  4EB8 0978  599          jsr       _Outchar
000009B0  584F       600          addq.w    #4,A7
000009B2  60DE       601          bra       OutMess_1
                     602   OutMess_3:
000009B4  4E5E       603          unlk      A6
000009B6  4E75       604          rts
                     605   ; }
                     606   ; /******************************************************************************
                     607   ; *subroutine to clear the line by issuing 24 space characters
                     608   ; *******************************************************************************/
                     609   ; void Clearln(void)
                     610   ; {
                     611   _Clearln:
000009B8  2F02       612          move.l    D2,-(A7)
                     613   ; unsigned char i;
                     614   ; for (i = 0; i < 24; i++)
000009BA  4202       615          clr.b     D2
                     616   Clearln_1:
000009BC  0C02 0018  617          cmp.b     #24,D2
000009C0  640E       618          bhs.s     Clearln_3
                     619   ; Outchar(' ');  /* write a space char to the LCD display */
000009C2  4878 0020  620          pea       32
000009C6  4EB8 0978  621          jsr       _Outchar
000009CA  584F       622          addq.w    #4,A7
000009CC  5202       623          addq.b    #1,D2
000009CE  60EC       624          bra       Clearln_1
                     625   Clearln_3:
000009D0  241F       626          move.l    (A7)+,D2
000009D2  4E75       627          rts
                     628   ; }
                     629   ; /******************************************************************************
                     630   ; *subroutine to move the cursor to the start of line 1 and clear that line
                     631   ; *******************************************************************************/
                     632   ; void Oline0(char* theMessage)
                     633   ; {
                     634   _Oline0:
000009D4  4E56 0000  635          link      A6,#0
                     636   ; LCDcommand = (char)(0x80);
000009D8  13FC 0080  637          move.b    #128,4194336
000009DC  0040 0020 
                     638   ; Wait3ms();
000009E0  4EB8 0946  639          jsr       _Wait3ms
                     640   ; Clearln();
000009E4  4EB8 09B8  641          jsr       _Clearln
                     642   ; LCDcommand = (char)(0x80);
000009E8  13FC 0080  643          move.b    #128,4194336
000009EC  0040 0020 
                     644   ; Wait3ms();
000009F0  4EB8 0946  645          jsr       _Wait3ms
                     646   ; OutMess(theMessage);
000009F4  2F2E 0008  647          move.l    8(A6),-(A7)
000009F8  4EB8 098E  648          jsr       _OutMess
000009FC  584F       649          addq.w    #4,A7
000009FE  4E5E       650          unlk      A6
00000A00  4E75       651          rts
                     652   ; }
                     653   ; /******************************************************************************
                     654   ; *subroutine to move the cursor to the start of line 2 and clear that line
                     655   ; *******************************************************************************/
                     656   ; void Oline1(char* theMessage)
                     657   ; {
                     658   _Oline1:
00000A02  4E56 0000  659          link      A6,#0
                     660   ; LCDcommand = (char)(0xC0);
00000A06  13FC 00C0  661          move.b    #192,4194336
00000A0A  0040 0020 
                     662   ; Wait3ms();
00000A0E  4EB8 0946  663          jsr       _Wait3ms
                     664   ; Clearln();
00000A12  4EB8 09B8  665          jsr       _Clearln
                     666   ; LCDcommand = (char)(0xC0);
00000A16  13FC 00C0  667          move.b    #192,4194336
00000A1A  0040 0020 
                     668   ; Wait3ms();
00000A1E  4EB8 0946  669          jsr       _Wait3ms
                     670   ; OutMess(theMessage);
00000A22  2F2E 0008  671          move.l    8(A6),-(A7)
00000A26  4EB8 098E  672          jsr       _OutMess
00000A2A  584F       673          addq.w    #4,A7
00000A2C  4E5E       674          unlk      A6
00000A2E  4E75       675          rts
                     676   ; }
                     677   ; void InstallExceptionHandler(void (*function_ptr)(), int level)
                     678   ; {
                     679   _InstallExceptionHandler:
00000A30  4E56 FFFC  680          link      A6,#-4
                     681   ; volatile long int* RamVectorAddress = (volatile long int*)(StartOfExceptionVectorTable);   // pointer to the Ram based interrupt vector table created in Cstart in debug monitor
00000A34  2D7C 0B00  682          move.l    #184549376,-4(A6)
00000A38  0000 FFFC 
                     683   ; RamVectorAddress[level] = (long int*)(function_ptr);
00000A3C  206E FFFC  684          move.l    -4(A6),A0
00000A40  202E 000C  685          move.l    12(A6),D0
00000A44  E588       686          lsl.l     #2,D0
00000A46  21AE 0008  687          move.l    8(A6),0(A0,D0.L)
00000A4A  0800      
00000A4C  4E5E       688          unlk      A6
00000A4E  4E75       689          rts
                     690   ; }
                     691   ; void TestLEDS(void)
                     692   ; {
                     693   _TestLEDS:
00000A50  48E7 3000  694          movem.l   D2/D3,-(A7)
                     695   ; int delay;
                     696   ; unsigned char count = 0;
00000A54  4202       697          clr.b     D2
                     698   ; while (1) {
                     699   TestLEDS_1:
                     700   ; PortA = PortB = PortC = PortD = HEX_A = HEX_B = HEX_C = HEX_D = ((count << 4) + (count & 0x0f));
00000A56  1002       701          move.b    D2,D0
00000A58  E908       702          lsl.b     #4,D0
00000A5A  1202       703          move.b    D2,D1
00000A5C  C23C 000F  704          and.b     #15,D1
00000A60  D001       705          add.b     D1,D0
00000A62  13C0 0040  706          move.b    D0,4194326
00000A66  0016      
00000A68  13C0 0040  707          move.b    D0,4194324
00000A6C  0014      
00000A6E  13C0 0040  708          move.b    D0,4194322
00000A72  0012      
00000A74  13C0 0040  709          move.b    D0,4194320
00000A78  0010      
00000A7A  13C0 0040  710          move.b    D0,4194310
00000A7E  0006      
00000A80  13C0 0040  711          move.b    D0,4194308
00000A84  0004      
00000A86  13C0 0040  712          move.b    D0,4194306
00000A8A  0002      
00000A8C  13C0 0040  713          move.b    D0,4194304
00000A90  0000      
                     714   ; for (delay = 0; delay < 200000; delay++)
00000A92  4283       715          clr.l     D3
                     716   TestLEDS_4:
00000A94  0C83 0003  717          cmp.l     #200000,D3
00000A98  0D40      
00000A9A  6C04       718          bge.s     TestLEDS_6
00000A9C  5283       719          addq.l    #1,D3
00000A9E  60F4       720          bra       TestLEDS_4
                     721   TestLEDS_6:
                     722   ; ;
                     723   ; count++;
00000AA0  5202       724          addq.b    #1,D2
00000AA2  60B2       725          bra       TestLEDS_1
                     726   ; }
                     727   ; }
                     728   ; void SwitchTest(void)
                     729   ; {
                     730   _SwitchTest:
00000AA4  48E7 3020  731          movem.l   D2/D3/A2,-(A7)
00000AA8  45F9 0000  732          lea       _printf.L,A2
00000AAC  41E4      
                     733   ; int i, switches = 0;
00000AAE  4283       734          clr.l     D3
                     735   ; printf("\r\n");
00000AB0  4879 0000  736          pea       @m68kde~1_1.L
00000AB4  4B1A      
00000AB6  4E92       737          jsr       (A2)
00000AB8  584F       738          addq.w    #4,A7
                     739   ; while (1) {
                     740   SwitchTest_1:
                     741   ; switches = (PortB << 8) | (PortA);
00000ABA  1039 0040  742          move.b    4194306,D0
00000ABE  0002      
00000AC0  C0BC 0000  743          and.l     #255,D0
00000AC4  00FF      
00000AC6  E188       744          lsl.l     #8,D0
00000AC8  1239 0040  745          move.b    4194304,D1
00000ACC  0000      
00000ACE  C2BC 0000  746          and.l     #255,D1
00000AD2  00FF      
00000AD4  8081       747          or.l      D1,D0
00000AD6  2600       748          move.l    D0,D3
                     749   ; printf("\rSwitches SW[7-0] = ");
00000AD8  4879 0000  750          pea       @m68kde~1_2.L
00000ADC  4B1E      
00000ADE  4E92       751          jsr       (A2)
00000AE0  584F       752          addq.w    #4,A7
                     753   ; for (i = (int)(0x00000080); i > 0; i = i >> 1) {
00000AE2  243C 0000  754          move.l    #128,D2
00000AE6  0080      
                     755   SwitchTest_4:
00000AE8  0C82 0000  756          cmp.l     #0,D2
00000AEC  0000      
00000AEE  6F20       757          ble.s     SwitchTest_6
                     758   ; if ((switches & i) == 0)
00000AF0  2003       759          move.l    D3,D0
00000AF2  C082       760          and.l     D2,D0
00000AF4  660C       761          bne.s     SwitchTest_7
                     762   ; printf("0");
00000AF6  4879 0000  763          pea       @m68kde~1_3.L
00000AFA  4B34      
00000AFC  4E92       764          jsr       (A2)
00000AFE  584F       765          addq.w    #4,A7
00000B00  600A       766          bra.s     SwitchTest_8
                     767   SwitchTest_7:
                     768   ; else
                     769   ; printf("1");
00000B02  4879 0000  770          pea       @m68kde~1_4.L
00000B06  4B36      
00000B08  4E92       771          jsr       (A2)
00000B0A  584F       772          addq.w    #4,A7
                     773   SwitchTest_8:
00000B0C  E282       774          asr.l     #1,D2
00000B0E  60D8       775          bra       SwitchTest_4
                     776   SwitchTest_6:
00000B10  60A8       777          bra       SwitchTest_1
                     778   ; }
                     779   ; }
                     780   ; }
                     781   ; /*********************************************************************************************
                     782   ; *Subroutine to initialise the RS232 Port by writing some commands to the internal registers
                     783   ; *********************************************************************************************/
                     784   ; void Init_RS232(void)
                     785   ; {
                     786   _Init_RS232:
                     787   ; RS232_Control = (char)(0x15); //  %00010101    divide by 16 clock, set rts low, 8 bits no parity, 1 stop bit transmitter interrupt disabled
00000B12  13FC 0015  788          move.b    #21,4194368
00000B16  0040 0040 
                     789   ; RS232_Baud = (char)(0x1);      // program baud rate generator 000 = 230k, 001 = 115k, 010 = 57.6k, 011 = 38.4k, 100 = 19.2, all others = 9600
00000B1A  13FC 0001  790          move.b    #1,4194372
00000B1E  0040 0044 
00000B22  4E75       791          rts
                     792   ; }
                     793   ; int kbhit(void)
                     794   ; {
                     795   _kbhit:
                     796   ; if (((char)(RS232_Status) & (char)(0x01)) == (char)(0x01))    // wait for Rx bit in status register to be '1'
00000B24  1039 0040  797          move.b    4194368,D0
00000B28  0040      
00000B2A  C03C 0001  798          and.b     #1,D0
00000B2E  0C00 0001  799          cmp.b     #1,D0
00000B32  6604       800          bne.s     kbhit_1
                     801   ; return 1;
00000B34  7001       802          moveq     #1,D0
00000B36  6002       803          bra.s     kbhit_3
                     804   kbhit_1:
                     805   ; else
                     806   ; return 0;
00000B38  4280       807          clr.l     D0
                     808   kbhit_3:
00000B3A  4E75       809          rts
                     810   ; }
                     811   ; /*********************************************************************************************************
                     812   ; **  Subroutine to provide a low level output function to 6850 ACIA
                     813   ; **  This routine provides the basic functionality to output a single character to the serial Port
                     814   ; **  to allow the board to communicate with HyperTerminal Program
                     815   ; **
                     816   ; **  NOTE you do not call this function directly, instead you call the normal putchar() function
                     817   ; **  which in turn calls _putch() below). Other functions like puts(), printf() call putchar() so will
                     818   ; **  call _putch() also
                     819   ; *********************************************************************************************************/
                     820   ; int _putch(int c)
                     821   ; {
                     822   __putch:
00000B3C  4E56 0000  823          link      A6,#0
                     824   ; while (((char)(RS232_Status) & (char)(0x02)) != (char)(0x02))    // wait for Tx bit in status register or 6850 serial comms chip to be '1'
                     825   _putch_1:
00000B40  1039 0040  826          move.b    4194368,D0
00000B44  0040      
00000B46  C03C 0002  827          and.b     #2,D0
00000B4A  0C00 0002  828          cmp.b     #2,D0
00000B4E  6702       829          beq.s     _putch_3
00000B50  60EE       830          bra       _putch_1
                     831   _putch_3:
                     832   ; ;
                     833   ; (char)(RS232_TxData) = ((char)(c) & (char)(0x7f));                      // write to the data register to output the character (mask off bit 8 to keep it 7 bit ASCII)
00000B52  202E 0008  834          move.l    8(A6),D0
00000B56  C03C 007F  835          and.b     #127,D0
00000B5A  13C0 0040  836          move.b    D0,4194370
00000B5E  0042      
                     837   ; return c;                                              // putchar() expects the character to be returned
00000B60  202E 0008  838          move.l    8(A6),D0
00000B64  4E5E       839          unlk      A6
00000B66  4E75       840          rts
                     841   ; }
                     842   ; /*********************************************************************************************************
                     843   ; **  Subroutine to provide a low level input function to 6850 ACIA
                     844   ; **  This routine provides the basic functionality to input a single character from the serial Port
                     845   ; **  to allow the board to communicate with HyperTerminal Program Keyboard (your PC)
                     846   ; **
                     847   ; **  NOTE you do not call this function directly, instead you call the normal _getch() function
                     848   ; **  which in turn calls _getch() below). Other functions like gets(), scanf() call _getch() so will
                     849   ; **  call _getch() also
                     850   ; *********************************************************************************************************/
                     851   ; int _getch(void)
                     852   ; {
                     853   __getch:
00000B68  2F02       854          move.l    D2,-(A7)
                     855   ; int c;
                     856   ; while (((char)(RS232_Status) & (char)(0x01)) != (char)(0x01))    // wait for Rx bit in 6850 serial comms chip status register to be '1'
                     857   _getch_1:
00000B6A  1039 0040  858          move.b    4194368,D0
00000B6E  0040      
00000B70  C03C 0001  859          and.b     #1,D0
00000B74  0C00 0001  860          cmp.b     #1,D0
00000B78  6702       861          beq.s     _getch_3
00000B7A  60EE       862          bra       _getch_1
                     863   _getch_3:
                     864   ; ;
                     865   ; c = (RS232_RxData & (char)(0x7f));                   // read received character, mask off top bit and return as 7 bit ASCII character
00000B7C  1039 0040  866          move.b    4194370,D0
00000B80  0042      
00000B82  C0BC 0000  867          and.l     #255,D0
00000B86  00FF      
00000B88  C0BC 0000  868          and.l     #127,D0
00000B8C  007F      
00000B8E  2400       869          move.l    D0,D2
                     870   ; // shall we echo the character? Echo is set to TRUE at reset, but for speed we don't want to echo when downloading code with the 'L' debugger command
                     871   ; if (Echo)
00000B90  4AB9 0803  872          tst.l     _Echo.L
00000B94  00E0      
00000B96  6708       873          beq.s     _getch_4
                     874   ; _putch(c);
00000B98  2F02       875          move.l    D2,-(A7)
00000B9A  4EB8 0B3C  876          jsr       __putch
00000B9E  584F       877          addq.w    #4,A7
                     878   _getch_4:
                     879   ; return c;
00000BA0  2002       880          move.l    D2,D0
00000BA2  241F       881          move.l    (A7)+,D2
00000BA4  4E75       882          rts
                     883   ; }
                     884   ; // flush the input stream for any unread characters
                     885   ; void FlushKeyboard(void)
                     886   ; {
                     887   _FlushKeyboard:
00000BA6  4E56 FFFC  888          link      A6,#-4
                     889   ; char c;
                     890   ; while (1) {
                     891   FlushKeyboard_1:
                     892   ; if (((char)(RS232_Status) & (char)(0x01)) == (char)(0x01))    // if Rx bit in status register is '1'
00000BAA  1039 0040  893          move.b    4194368,D0
00000BAE  0040      
00000BB0  C03C 0001  894          and.b     #1,D0
00000BB4  0C00 0001  895          cmp.b     #1,D0
00000BB8  6610       896          bne.s     FlushKeyboard_4
                     897   ; c = ((char)(RS232_RxData) & (char)(0x7f));
00000BBA  1039 0040  898          move.b    4194370,D0
00000BBE  0042      
00000BC0  C03C 007F  899          and.b     #127,D0
00000BC4  1D40 FFFF  900          move.b    D0,-1(A6)
00000BC8  6002       901          bra.s     FlushKeyboard_5
                     902   FlushKeyboard_4:
                     903   ; else
                     904   ; return;
00000BCA  6002       905          bra.s     FlushKeyboard_6
                     906   FlushKeyboard_5:
00000BCC  60DC       907          bra       FlushKeyboard_1
                     908   FlushKeyboard_6:
00000BCE  4E5E       909          unlk      A6
00000BD0  4E75       910          rts
                     911   ; }
                     912   ; }
                     913   ; // converts hex char to 4 bit binary equiv in range 0000-1111 (0-F)
                     914   ; // char assumed to be a valid hex char 0-9, a-f, A-F
                     915   ; char xtod(int c)
                     916   ; {
                     917   _xtod:
00000BD2  4E56 0000  918          link      A6,#0
00000BD6  2F02       919          move.l    D2,-(A7)
00000BD8  242E 0008  920          move.l    8(A6),D2
                     921   ; if ((char)(c) <= (char)('9'))
00000BDC  0C02 0039  922          cmp.b     #57,D2
00000BE0  6E08       923          bgt.s     xtod_1
                     924   ; return c - (char)(0x30);    // 0 - 9 = 0x30 - 0x39 so convert to number by sutracting 0x30
00000BE2  1002       925          move.b    D2,D0
00000BE4  0400 0030  926          sub.b     #48,D0
00000BE8  6014       927          bra.s     xtod_3
                     928   xtod_1:
                     929   ; else if ((char)(c) > (char)('F'))    // assume lower case
00000BEA  0C02 0046  930          cmp.b     #70,D2
00000BEE  6F08       931          ble.s     xtod_4
                     932   ; return c - (char)(0x57);    // a-f = 0x61-66 so needs to be converted to 0x0A - 0x0F so subtract 0x57
00000BF0  1002       933          move.b    D2,D0
00000BF2  0400 0057  934          sub.b     #87,D0
00000BF6  6006       935          bra.s     xtod_3
                     936   xtod_4:
                     937   ; else
                     938   ; return c - (char)(0x37);    // A-F = 0x41-46 so needs to be converted to 0x0A - 0x0F so subtract 0x37
00000BF8  1002       939          move.b    D2,D0
00000BFA  0400 0037  940          sub.b     #55,D0
                     941   xtod_3:
00000BFE  241F       942          move.l    (A7)+,D2
00000C00  4E5E       943          unlk      A6
00000C02  4E75       944          rts
                     945   ; }
                     946   ; int Get2HexDigits(char* CheckSumPtr)
                     947   ; {
                     948   _Get2HexDigits:
00000C04  4E56 0000  949          link      A6,#0
00000C08  2F02       950          move.l    D2,-(A7)
                     951   ; register int i = (xtod(_getch()) << 4) | (xtod(_getch()));
00000C0A  2F00       952          move.l    D0,-(A7)
00000C0C  4EB8 0B68  953          jsr       __getch
00000C10  2200       954          move.l    D0,D1
00000C12  201F       955          move.l    (A7)+,D0
00000C14  2F01       956          move.l    D1,-(A7)
00000C16  4EB8 0BD2  957          jsr       _xtod
00000C1A  584F       958          addq.w    #4,A7
00000C1C  C0BC 0000  959          and.l     #255,D0
00000C20  00FF      
00000C22  E980       960          asl.l     #4,D0
00000C24  2F00       961          move.l    D0,-(A7)
00000C26  2F01       962          move.l    D1,-(A7)
00000C28  4EB8 0B68  963          jsr       __getch
00000C2C  221F       964          move.l    (A7)+,D1
00000C2E  2F00       965          move.l    D0,-(A7)
00000C30  4EB8 0BD2  966          jsr       _xtod
00000C34  584F       967          addq.w    #4,A7
00000C36  2200       968          move.l    D0,D1
00000C38  201F       969          move.l    (A7)+,D0
00000C3A  C2BC 0000  970          and.l     #255,D1
00000C3E  00FF      
00000C40  8081       971          or.l      D1,D0
00000C42  2400       972          move.l    D0,D2
                     973   ; if (CheckSumPtr)
00000C44  4AAE 0008  974          tst.l     8(A6)
00000C48  6706       975          beq.s     Get2HexDigits_1
                     976   ; *CheckSumPtr += i;
00000C4A  206E 0008  977          move.l    8(A6),A0
00000C4E  D510       978          add.b     D2,(A0)
                     979   Get2HexDigits_1:
                     980   ; return i;
00000C50  2002       981          move.l    D2,D0
00000C52  241F       982          move.l    (A7)+,D2
00000C54  4E5E       983          unlk      A6
00000C56  4E75       984          rts
                     985   ; }
                     986   ; int Get4HexDigits(char* CheckSumPtr)
                     987   ; {
                     988   _Get4HexDigits:
00000C58  4E56 0000  989          link      A6,#0
                     990   ; return (Get2HexDigits(CheckSumPtr) << 8) | (Get2HexDigits(CheckSumPtr));
00000C5C  2F2E 0008  991          move.l    8(A6),-(A7)
00000C60  4EB8 0C04  992          jsr       _Get2HexDigits
00000C64  584F       993          addq.w    #4,A7
00000C66  E180       994          asl.l     #8,D0
00000C68  2F00       995          move.l    D0,-(A7)
00000C6A  2F2E 0008  996          move.l    8(A6),-(A7)
00000C6E  4EB8 0C04  997          jsr       _Get2HexDigits
00000C72  584F       998          addq.w    #4,A7
00000C74  2200       999          move.l    D0,D1
00000C76  201F      1000          move.l    (A7)+,D0
00000C78  8081      1001          or.l      D1,D0
00000C7A  4E5E      1002          unlk      A6
00000C7C  4E75      1003          rts
                    1004   ; }
                    1005   ; int Get6HexDigits(char* CheckSumPtr)
                    1006   ; {
                    1007   _Get6HexDigits:
00000C7E  4E56 0000 1008          link      A6,#0
                    1009   ; return (Get4HexDigits(CheckSumPtr) << 8) | (Get2HexDigits(CheckSumPtr));
00000C82  2F2E 0008 1010          move.l    8(A6),-(A7)
00000C86  4EB8 0C58 1011          jsr       _Get4HexDigits
00000C8A  584F      1012          addq.w    #4,A7
00000C8C  E180      1013          asl.l     #8,D0
00000C8E  2F00      1014          move.l    D0,-(A7)
00000C90  2F2E 0008 1015          move.l    8(A6),-(A7)
00000C94  4EB8 0C04 1016          jsr       _Get2HexDigits
00000C98  584F      1017          addq.w    #4,A7
00000C9A  2200      1018          move.l    D0,D1
00000C9C  201F      1019          move.l    (A7)+,D0
00000C9E  8081      1020          or.l      D1,D0
00000CA0  4E5E      1021          unlk      A6
00000CA2  4E75      1022          rts
                    1023   ; }
                    1024   ; int Get8HexDigits(char* CheckSumPtr)
                    1025   ; {
                    1026   _Get8HexDigits:
00000CA4  4E56 0000 1027          link      A6,#0
                    1028   ; return (Get4HexDigits(CheckSumPtr) << 16) | (Get4HexDigits(CheckSumPtr));
00000CA8  2F2E 0008 1029          move.l    8(A6),-(A7)
00000CAC  4EB8 0C58 1030          jsr       _Get4HexDigits
00000CB0  584F      1031          addq.w    #4,A7
00000CB2  E180      1032          asl.l     #8,D0
00000CB4  E180      1033          asl.l     #8,D0
00000CB6  2F00      1034          move.l    D0,-(A7)
00000CB8  2F2E 0008 1035          move.l    8(A6),-(A7)
00000CBC  4EB8 0C58 1036          jsr       _Get4HexDigits
00000CC0  584F      1037          addq.w    #4,A7
00000CC2  2200      1038          move.l    D0,D1
00000CC4  201F      1039          move.l    (A7)+,D0
00000CC6  8081      1040          or.l      D1,D0
00000CC8  4E5E      1041          unlk      A6
00000CCA  4E75      1042          rts
                    1043   ; }
                    1044   ; void DumpMemory(void)   // simple dump memory fn
                    1045   ; {
                    1046   _DumpMemory:
00000CCC  48E7 3C30 1047          movem.l   D2/D3/D4/D5/A2/A3,-(A7)
00000CD0  45F9 0000 1048          lea       _printf.L,A2
00000CD4  41E4      
00000CD6  47F9 0000 1049          lea       _putch.L,A3
00000CDA  3840      
                    1050   ; int i, j;
                    1051   ; unsigned char* RamPtr, c; // pointer to where the program is download (assumed)
                    1052   ; printf("\r\nDump Memory Block: <ESC> to Abort, <SPACE> to Continue");
00000CDC  4879 0000 1053          pea       @m68kde~1_5.L
00000CE0  4B38      
00000CE2  4E92      1054          jsr       (A2)
00000CE4  584F      1055          addq.w    #4,A7
                    1056   ; printf("\r\nEnter Start Address: ");
00000CE6  4879 0000 1057          pea       @m68kde~1_6.L
00000CEA  4B72      
00000CEC  4E92      1058          jsr       (A2)
00000CEE  584F      1059          addq.w    #4,A7
                    1060   ; RamPtr = Get8HexDigits(0);
00000CF0  42A7      1061          clr.l     -(A7)
00000CF2  4EB8 0CA4 1062          jsr       _Get8HexDigits
00000CF6  584F      1063          addq.w    #4,A7
00000CF8  2600      1064          move.l    D0,D3
                    1065   ; while (1) {
                    1066   DumpMemory_1:
                    1067   ; for (i = 0; i < 16; i++) {
00000CFA  4285      1068          clr.l     D5
                    1069   DumpMemory_4:
00000CFC  0C85 0000 1070          cmp.l     #16,D5
00000D00  0010      
00000D02  6C00 0096 1071          bge       DumpMemory_6
                    1072   ; printf("\r\n%08x ", RamPtr);
00000D06  2F03      1073          move.l    D3,-(A7)
00000D08  4879 0000 1074          pea       @m68kde~1_7.L
00000D0C  4B8A      
00000D0E  4E92      1075          jsr       (A2)
00000D10  504F      1076          addq.w    #8,A7
                    1077   ; for (j = 0; j < 16; j++) {
00000D12  4282      1078          clr.l     D2
                    1079   DumpMemory_7:
00000D14  0C82 0000 1080          cmp.l     #16,D2
00000D18  0010      
00000D1A  6C24      1081          bge.s     DumpMemory_9
                    1082   ; printf("%02X", RamPtr[j]);
00000D1C  2043      1083          move.l    D3,A0
00000D1E  1230 2800 1084          move.b    0(A0,D2.L),D1
00000D22  C2BC 0000 1085          and.l     #255,D1
00000D26  00FF      
00000D28  2F01      1086          move.l    D1,-(A7)
00000D2A  4879 0000 1087          pea       @m68kde~1_8.L
00000D2E  4B92      
00000D30  4E92      1088          jsr       (A2)
00000D32  504F      1089          addq.w    #8,A7
                    1090   ; putchar(' ');
00000D34  4878 0020 1091          pea       32
00000D38  4E93      1092          jsr       (A3)
00000D3A  584F      1093          addq.w    #4,A7
00000D3C  5282      1094          addq.l    #1,D2
00000D3E  60D4      1095          bra       DumpMemory_7
                    1096   DumpMemory_9:
                    1097   ; }
                    1098   ; // now display the data as ASCII at the end
                    1099   ; printf("  ");
00000D40  4879 0000 1100          pea       @m68kde~1_9.L
00000D44  4B98      
00000D46  4E92      1101          jsr       (A2)
00000D48  584F      1102          addq.w    #4,A7
                    1103   ; for (j = 0; j < 16; j++) {
00000D4A  4282      1104          clr.l     D2
                    1105   DumpMemory_10:
00000D4C  0C82 0000 1106          cmp.l     #16,D2
00000D50  0010      
00000D52  6C00 003A 1107          bge       DumpMemory_12
                    1108   ; c = ((char)(RamPtr[j]) & 0x7f);
00000D56  2043      1109          move.l    D3,A0
00000D58  1030 2800 1110          move.b    0(A0,D2.L),D0
00000D5C  C03C 007F 1111          and.b     #127,D0
00000D60  1800      1112          move.b    D0,D4
                    1113   ; if ((c > (char)(0x7f)) || (c < ' '))
00000D62  0C04 007F 1114          cmp.b     #127,D4
00000D66  6206      1115          bhi.s     DumpMemory_15
00000D68  0C04 0020 1116          cmp.b     #32,D4
00000D6C  640A      1117          bhs.s     DumpMemory_13
                    1118   DumpMemory_15:
                    1119   ; putchar('.');
00000D6E  4878 002E 1120          pea       46
00000D72  4E93      1121          jsr       (A3)
00000D74  584F      1122          addq.w    #4,A7
00000D76  6012      1123          bra.s     DumpMemory_14
                    1124   DumpMemory_13:
                    1125   ; else
                    1126   ; putchar(RamPtr[j]);
00000D78  2043      1127          move.l    D3,A0
00000D7A  1230 2800 1128          move.b    0(A0,D2.L),D1
00000D7E  C2BC 0000 1129          and.l     #255,D1
00000D82  00FF      
00000D84  2F01      1130          move.l    D1,-(A7)
00000D86  4E93      1131          jsr       (A3)
00000D88  584F      1132          addq.w    #4,A7
                    1133   DumpMemory_14:
00000D8A  5282      1134          addq.l    #1,D2
00000D8C  60BE      1135          bra       DumpMemory_10
                    1136   DumpMemory_12:
                    1137   ; }
                    1138   ; RamPtr = RamPtr + 16;
00000D8E  0683 0000 1139          add.l     #16,D3
00000D92  0010      
00000D94  5285      1140          addq.l    #1,D5
00000D96  6000 FF64 1141          bra       DumpMemory_4
                    1142   DumpMemory_6:
                    1143   ; }
                    1144   ; printf("\r\n");
00000D9A  4879 0000 1145          pea       @m68kde~1_1.L
00000D9E  4B1A      
00000DA0  4E92      1146          jsr       (A2)
00000DA2  584F      1147          addq.w    #4,A7
                    1148   ; c = _getch();
00000DA4  4EB8 0B68 1149          jsr       __getch
00000DA8  1800      1150          move.b    D0,D4
                    1151   ; if (c == 0x1b)          // break on ESC
00000DAA  0C04 001B 1152          cmp.b     #27,D4
00000DAE  6602      1153          bne.s     DumpMemory_16
                    1154   ; break;
00000DB0  6004      1155          bra.s     DumpMemory_3
                    1156   DumpMemory_16:
00000DB2  6000 FF46 1157          bra       DumpMemory_1
                    1158   DumpMemory_3:
00000DB6  4CDF 0C3C 1159          movem.l   (A7)+,D2/D3/D4/D5/A2/A3
00000DBA  4E75      1160          rts
                    1161   ; }
                    1162   ; }
                    1163   ; void FillMemory()
                    1164   ; {
                    1165   _FillMemory:
00000DBC  48E7 3820 1166          movem.l   D2/D3/D4/A2,-(A7)
00000DC0  45F9 0000 1167          lea       _printf.L,A2
00000DC4  41E4      
                    1168   ; char* StartRamPtr, * EndRamPtr;
                    1169   ; unsigned char FillData;
                    1170   ; printf("\r\nFill Memory Block");
00000DC6  4879 0000 1171          pea       @m68kde~1_10.L
00000DCA  4B9C      
00000DCC  4E92      1172          jsr       (A2)
00000DCE  584F      1173          addq.w    #4,A7
                    1174   ; printf("\r\nEnter Start Address: ");
00000DD0  4879 0000 1175          pea       @m68kde~1_6.L
00000DD4  4B72      
00000DD6  4E92      1176          jsr       (A2)
00000DD8  584F      1177          addq.w    #4,A7
                    1178   ; StartRamPtr = Get8HexDigits(0);
00000DDA  42A7      1179          clr.l     -(A7)
00000DDC  4EB8 0CA4 1180          jsr       _Get8HexDigits
00000DE0  584F      1181          addq.w    #4,A7
00000DE2  2400      1182          move.l    D0,D2
                    1183   ; printf("\r\nEnter End Address: ");
00000DE4  4879 0000 1184          pea       @m68kde~1_11.L
00000DE8  4BB0      
00000DEA  4E92      1185          jsr       (A2)
00000DEC  584F      1186          addq.w    #4,A7
                    1187   ; EndRamPtr = Get8HexDigits(0);
00000DEE  42A7      1188          clr.l     -(A7)
00000DF0  4EB8 0CA4 1189          jsr       _Get8HexDigits
00000DF4  584F      1190          addq.w    #4,A7
00000DF6  2800      1191          move.l    D0,D4
                    1192   ; printf("\r\nEnter Fill Data: ");
00000DF8  4879 0000 1193          pea       @m68kde~1_12.L
00000DFC  4BC6      
00000DFE  4E92      1194          jsr       (A2)
00000E00  584F      1195          addq.w    #4,A7
                    1196   ; FillData = Get2HexDigits(0);
00000E02  42A7      1197          clr.l     -(A7)
00000E04  4EB8 0C04 1198          jsr       _Get2HexDigits
00000E08  584F      1199          addq.w    #4,A7
00000E0A  1600      1200          move.b    D0,D3
                    1201   ; printf("\r\nFilling Addresses [$%08X - $%08X] with $%02X", StartRamPtr, EndRamPtr, FillData);
00000E0C  C6BC 0000 1202          and.l     #255,D3
00000E10  00FF      
00000E12  2F03      1203          move.l    D3,-(A7)
00000E14  2F04      1204          move.l    D4,-(A7)
00000E16  2F02      1205          move.l    D2,-(A7)
00000E18  4879 0000 1206          pea       @m68kde~1_13.L
00000E1C  4BDA      
00000E1E  4E92      1207          jsr       (A2)
00000E20  DEFC 0010 1208          add.w     #16,A7
                    1209   ; while (StartRamPtr < EndRamPtr)
                    1210   FillMemory_1:
00000E24  B484      1211          cmp.l     D4,D2
00000E26  6408      1212          bhs.s     FillMemory_3
                    1213   ; *StartRamPtr++ = FillData;
00000E28  2042      1214          move.l    D2,A0
00000E2A  5282      1215          addq.l    #1,D2
00000E2C  1083      1216          move.b    D3,(A0)
00000E2E  60F4      1217          bra       FillMemory_1
                    1218   FillMemory_3:
00000E30  4CDF 041C 1219          movem.l   (A7)+,D2/D3/D4/A2
00000E34  4E75      1220          rts
                    1221   ; }
                    1222   ; void Load_SRecordFile()
                    1223   ; {
                    1224   _Load_SRecordFile:
00000E36  4E56 FFDC 1225          link      A6,#-36
00000E3A  48E7 3F3C 1226          movem.l   D2/D3/D4/D5/D6/D7/A2/A3/A4/A5,-(A7)
00000E3E  45EE FFFA 1227          lea       -6(A6),A2
00000E42  47F8 0C04 1228          lea       _Get2HexDigits.L,A3
00000E46  49F9 0000 1229          lea       _printf.L,A4
00000E4A  41E4      
                    1230   ; int i, Address, AddressSize, DataByte, NumDataBytesToRead, LoadFailed, FailedAddress, AddressFail, SRecordCount = 0, ByteTotal = 0;
00000E4C  42AE FFEE 1231          clr.l     -18(A6)
00000E50  3A7C 0000 1232          move.w    #0,A5
                    1233   ; int result, ByteCount;
                    1234   ; char c, CheckSum, ReadCheckSum, HeaderType;
                    1235   ; char* RamPtr;                          // pointer to Memory where downloaded program will be stored
                    1236   ; LoadFailed = 0;                        //assume LOAD operation will pass
00000E54  7E00      1237          moveq     #0,D7
                    1238   ; AddressFail = 0;
00000E56  42AE FFEA 1239          clr.l     -22(A6)
                    1240   ; Echo = 0;                              // don't echo S records during download
00000E5A  42B9 0803 1241          clr.l     _Echo.L
00000E5E  00E0      
                    1242   ; printf("\r\nUse HyperTerminal to Send Text File (.hex)\r\n");
00000E60  4879 0000 1243          pea       @m68kde~1_14.L
00000E64  4C0A      
00000E66  4E94      1244          jsr       (A4)
00000E68  584F      1245          addq.w    #4,A7
                    1246   ; while (1) {
                    1247   Load_SRecordFile_1:
                    1248   ; CheckSum = 0;
00000E6A  4212      1249          clr.b     (A2)
                    1250   ; do {
                    1251   Load_SRecordFile_4:
                    1252   ; c = toupper(_getch());
00000E6C  2F00      1253          move.l    D0,-(A7)
00000E6E  4EB8 0B68 1254          jsr       __getch
00000E72  2200      1255          move.l    D0,D1
00000E74  201F      1256          move.l    (A7)+,D0
00000E76  2F01      1257          move.l    D1,-(A7)
00000E78  4EB9 0000 1258          jsr       _toupper
00000E7C  3922      
00000E7E  584F      1259          addq.w    #4,A7
00000E80  1C00      1260          move.b    D0,D6
                    1261   ; if (c == 0x1b)      // if break
00000E82  0C06 001B 1262          cmp.b     #27,D6
00000E86  6604      1263          bne.s     Load_SRecordFile_6
                    1264   ; return;
00000E88  6000 0132 1265          bra       Load_SRecordFile_8
                    1266   Load_SRecordFile_6:
00000E8C  0C06 0053 1267          cmp.b     #83,D6
00000E90  66DA      1268          bne       Load_SRecordFile_4
                    1269   ; } while (c != (char)('S'));   // wait for S start of header
                    1270   ; HeaderType = _getch();
00000E92  4EB8 0B68 1271          jsr       __getch
00000E96  1600      1272          move.b    D0,D3
                    1273   ; if (HeaderType == (char)('0') || HeaderType == (char)('5'))       // ignore s0, s5 records
00000E98  0C03 0030 1274          cmp.b     #48,D3
00000E9C  6706      1275          beq.s     Load_SRecordFile_11
00000E9E  0C03 0035 1276          cmp.b     #53,D3
00000EA2  6604      1277          bne.s     Load_SRecordFile_9
                    1278   Load_SRecordFile_11:
                    1279   ; continue;
00000EA4  6000 00D2 1280          bra       Load_SRecordFile_23
                    1281   Load_SRecordFile_9:
                    1282   ; if (HeaderType >= (char)('7'))
00000EA8  0C03 0037 1283          cmp.b     #55,D3
00000EAC  6D04      1284          blt.s     Load_SRecordFile_12
                    1285   ; break;                 // end load on s7,s8,s9 records
00000EAE  6000 00CC 1286          bra       Load_SRecordFile_3
                    1287   Load_SRecordFile_12:
                    1288   ; // get the bytecount
                    1289   ; ByteCount = Get2HexDigits(&CheckSum);
00000EB2  2F0A      1290          move.l    A2,-(A7)
00000EB4  4E93      1291          jsr       (A3)
00000EB6  584F      1292          addq.w    #4,A7
00000EB8  2D40 FFF6 1293          move.l    D0,-10(A6)
                    1294   ; // get the address, 4 digits for s1, 6 digits for s2, and 8 digits for s3 record
                    1295   ; if (HeaderType == (char)('1')) {
00000EBC  0C03 0031 1296          cmp.b     #49,D3
00000EC0  660E      1297          bne.s     Load_SRecordFile_14
                    1298   ; AddressSize = 2;       // 2 byte address
00000EC2  7A02      1299          moveq     #2,D5
                    1300   ; Address = Get4HexDigits(&CheckSum);
00000EC4  2F0A      1301          move.l    A2,-(A7)
00000EC6  4EB8 0C58 1302          jsr       _Get4HexDigits
00000ECA  584F      1303          addq.w    #4,A7
00000ECC  2800      1304          move.l    D0,D4
00000ECE  6020      1305          bra.s     Load_SRecordFile_17
                    1306   Load_SRecordFile_14:
                    1307   ; }
                    1308   ; else if (HeaderType == (char)('2')) {
00000ED0  0C03 0032 1309          cmp.b     #50,D3
00000ED4  660E      1310          bne.s     Load_SRecordFile_16
                    1311   ; AddressSize = 3;       // 3 byte address
00000ED6  7A03      1312          moveq     #3,D5
                    1313   ; Address = Get6HexDigits(&CheckSum);
00000ED8  2F0A      1314          move.l    A2,-(A7)
00000EDA  4EB8 0C7E 1315          jsr       _Get6HexDigits
00000EDE  584F      1316          addq.w    #4,A7
00000EE0  2800      1317          move.l    D0,D4
00000EE2  600C      1318          bra.s     Load_SRecordFile_17
                    1319   Load_SRecordFile_16:
                    1320   ; }
                    1321   ; else {
                    1322   ; AddressSize = 4;       // 4 byte address
00000EE4  7A04      1323          moveq     #4,D5
                    1324   ; Address = Get8HexDigits(&CheckSum);
00000EE6  2F0A      1325          move.l    A2,-(A7)
00000EE8  4EB8 0CA4 1326          jsr       _Get8HexDigits
00000EEC  584F      1327          addq.w    #4,A7
00000EEE  2800      1328          move.l    D0,D4
                    1329   Load_SRecordFile_17:
                    1330   ; }
                    1331   ; RamPtr = (char*)(Address);                            // point to download area
00000EF0  2D44 FFFC 1332          move.l    D4,-4(A6)
                    1333   ; NumDataBytesToRead = ByteCount - AddressSize - 1;
00000EF4  202E FFF6 1334          move.l    -10(A6),D0
00000EF8  9085      1335          sub.l     D5,D0
00000EFA  5380      1336          subq.l    #1,D0
00000EFC  2D40 FFE2 1337          move.l    D0,-30(A6)
                    1338   ; for (i = 0; i < NumDataBytesToRead; i++) {     // read in remaining data bytes (ignore address and checksum at the end
00000F00  4282      1339          clr.l     D2
                    1340   Load_SRecordFile_18:
00000F02  B4AE FFE2 1341          cmp.l     -30(A6),D2
00000F06  6C1E      1342          bge.s     Load_SRecordFile_20
                    1343   ; DataByte = Get2HexDigits(&CheckSum);
00000F08  2F0A      1344          move.l    A2,-(A7)
00000F0A  4E93      1345          jsr       (A3)
00000F0C  584F      1346          addq.w    #4,A7
00000F0E  2D40 FFDE 1347          move.l    D0,-34(A6)
                    1348   ; *RamPtr++ = DataByte;                      // store downloaded byte in Ram at specified address
00000F12  202E FFDE 1349          move.l    -34(A6),D0
00000F16  206E FFFC 1350          move.l    -4(A6),A0
00000F1A  52AE FFFC 1351          addq.l    #1,-4(A6)
00000F1E  1080      1352          move.b    D0,(A0)
                    1353   ; ByteTotal++;
00000F20  524D      1354          addq.w    #1,A5
00000F22  5282      1355          addq.l    #1,D2
00000F24  60DC      1356          bra       Load_SRecordFile_18
                    1357   Load_SRecordFile_20:
                    1358   ; }
                    1359   ; // checksum is the 1's complement of the sum of all data pairs following the bytecount, i.e. it includes the address and the data itself
                    1360   ; ReadCheckSum = Get2HexDigits(0);
00000F26  42A7      1361          clr.l     -(A7)
00000F28  4E93      1362          jsr       (A3)
00000F2A  584F      1363          addq.w    #4,A7
00000F2C  1D40 FFFB 1364          move.b    D0,-5(A6)
                    1365   ; if ((~CheckSum & 0Xff) != (ReadCheckSum & 0Xff)) {
00000F30  1012      1366          move.b    (A2),D0
00000F32  4600      1367          not.b     D0
00000F34  4880      1368          ext.w     D0
00000F36  C07C 00FF 1369          and.w     #255,D0
00000F3A  122E FFFB 1370          move.b    -5(A6),D1
00000F3E  4881      1371          ext.w     D1
00000F40  C27C 00FF 1372          and.w     #255,D1
00000F44  B041      1373          cmp.w     D1,D0
00000F46  6708      1374          beq.s     Load_SRecordFile_21
                    1375   ; LoadFailed = 1;
00000F48  7E01      1376          moveq     #1,D7
                    1377   ; FailedAddress = Address;
00000F4A  2D44 FFE6 1378          move.l    D4,-26(A6)
                    1379   ; break;
00000F4E  602C      1380          bra.s     Load_SRecordFile_3
                    1381   Load_SRecordFile_21:
                    1382   ; }
                    1383   ; SRecordCount++;
00000F50  52AE FFEE 1384          addq.l    #1,-18(A6)
                    1385   ; // display feedback on progress
                    1386   ; if (SRecordCount % 25 == 0)
00000F54  2F2E FFEE 1387          move.l    -18(A6),-(A7)
00000F58  4878 0019 1388          pea       25
00000F5C  4EB9 0000 1389          jsr       LDIV
00000F60  36D4      
00000F62  202F 0004 1390          move.l    4(A7),D0
00000F66  504F      1391          addq.w    #8,A7
00000F68  4A80      1392          tst.l     D0
00000F6A  660C      1393          bne.s     Load_SRecordFile_23
                    1394   ; putchar('.');
00000F6C  4878 002E 1395          pea       46
00000F70  4EB9 0000 1396          jsr       _putch
00000F74  3840      
00000F76  584F      1397          addq.w    #4,A7
                    1398   Load_SRecordFile_23:
00000F78  6000 FEF0 1399          bra       Load_SRecordFile_1
                    1400   Load_SRecordFile_3:
                    1401   ; }
                    1402   ; if (LoadFailed == 1) {
00000F7C  0C87 0000 1403          cmp.l     #1,D7
00000F80  0001      
00000F82  6610      1404          bne.s     Load_SRecordFile_25
                    1405   ; printf("\r\nLoad Failed at Address = [$%08X]\r\n", FailedAddress);
00000F84  2F2E FFE6 1406          move.l    -26(A6),-(A7)
00000F88  4879 0000 1407          pea       @m68kde~1_15.L
00000F8C  4C3A      
00000F8E  4E94      1408          jsr       (A4)
00000F90  504F      1409          addq.w    #8,A7
00000F92  600C      1410          bra.s     Load_SRecordFile_26
                    1411   Load_SRecordFile_25:
                    1412   ; }
                    1413   ; else
                    1414   ; printf("\r\nSuccess: Downloaded %d bytes\r\n", ByteTotal);
00000F94  2F0D      1415          move.l    A5,-(A7)
00000F96  4879 0000 1416          pea       @m68kde~1_16.L
00000F9A  4C60      
00000F9C  4E94      1417          jsr       (A4)
00000F9E  504F      1418          addq.w    #8,A7
                    1419   Load_SRecordFile_26:
                    1420   ; // pause at the end to wait for download to finish transmitting at the end of S8 etc
                    1421   ; for (i = 0; i < 400000; i++)
00000FA0  4282      1422          clr.l     D2
                    1423   Load_SRecordFile_27:
00000FA2  0C82 0006 1424          cmp.l     #400000,D2
00000FA6  1A80      
00000FA8  6C04      1425          bge.s     Load_SRecordFile_29
00000FAA  5282      1426          addq.l    #1,D2
00000FAC  60F4      1427          bra       Load_SRecordFile_27
                    1428   Load_SRecordFile_29:
                    1429   ; ;
                    1430   ; FlushKeyboard();
00000FAE  4EB8 0BA6 1431          jsr       _FlushKeyboard
                    1432   ; Echo = 1;
00000FB2  23FC 0000 1433          move.l    #1,_Echo.L
00000FB6  0001 0803 
00000FBA  00E0      
                    1434   Load_SRecordFile_8:
00000FBC  4CDF 3CFC 1435          movem.l   (A7)+,D2/D3/D4/D5/D6/D7/A2/A3/A4/A5
00000FC0  4E5E      1436          unlk      A6
00000FC2  4E75      1437          rts
                    1438   ; }
                    1439   ; void MemoryChange(void)
                    1440   ; {
                    1441   _MemoryChange:
00000FC4  48E7 3820 1442          movem.l   D2/D3/D4/A2,-(A7)
00000FC8  45F9 0000 1443          lea       _printf.L,A2
00000FCC  41E4      
                    1444   ; unsigned char* RamPtr, c; // pointer to memory
                    1445   ; int Data;
                    1446   ; printf("\r\nExamine and Change Memory");
00000FCE  4879 0000 1447          pea       @m68kde~1_17.L
00000FD2  4C82      
00000FD4  4E92      1448          jsr       (A2)
00000FD6  584F      1449          addq.w    #4,A7
                    1450   ; printf("\r\n<ESC> to Stop, <SPACE> to Advance, '-' to Go Back, <DATA> to change");
00000FD8  4879 0000 1451          pea       @m68kde~1_18.L
00000FDC  4C9E      
00000FDE  4E92      1452          jsr       (A2)
00000FE0  584F      1453          addq.w    #4,A7
                    1454   ; printf("\r\nEnter Address: ");
00000FE2  4879 0000 1455          pea       @m68kde~1_19.L
00000FE6  4CE4      
00000FE8  4E92      1456          jsr       (A2)
00000FEA  584F      1457          addq.w    #4,A7
                    1458   ; RamPtr = Get8HexDigits(0);
00000FEC  42A7      1459          clr.l     -(A7)
00000FEE  4EB8 0CA4 1460          jsr       _Get8HexDigits
00000FF2  584F      1461          addq.w    #4,A7
00000FF4  2600      1462          move.l    D0,D3
                    1463   ; while (1) {
                    1464   MemoryChange_1:
                    1465   ; printf("\r\n[%08x] : %02x  ", RamPtr, *RamPtr);
00000FF6  2043      1466          move.l    D3,A0
00000FF8  1210      1467          move.b    (A0),D1
00000FFA  C2BC 0000 1468          and.l     #255,D1
00000FFE  00FF      
00001000  2F01      1469          move.l    D1,-(A7)
00001002  2F03      1470          move.l    D3,-(A7)
00001004  4879 0000 1471          pea       @m68kde~1_20.L
00001008  4CF6      
0000100A  4E92      1472          jsr       (A2)
0000100C  DEFC 000C 1473          add.w     #12,A7
                    1474   ; c = tolower(_getch());
00001010  2F00      1475          move.l    D0,-(A7)
00001012  4EB8 0B68 1476          jsr       __getch
00001016  2200      1477          move.l    D0,D1
00001018  201F      1478          move.l    (A7)+,D0
0000101A  2F01      1479          move.l    D1,-(A7)
0000101C  4EB9 0000 1480          jsr       _tolower
00001020  38AC      
00001022  584F      1481          addq.w    #4,A7
00001024  1400      1482          move.b    D0,D2
                    1483   ; if (c == (char)(0x1b))
00001026  0C02 001B 1484          cmp.b     #27,D2
0000102A  6604      1485          bne.s     MemoryChange_4
                    1486   ; return;                                // abort on escape
0000102C  6000 0090 1487          bra       MemoryChange_6
                    1488   MemoryChange_4:
                    1489   ; else if ((c >= '0' && c <= '9') || (c >= 'a' && c <= 'f')) {  // are we trying to change data at this location by entering a hex char
00001030  0C02 0030 1490          cmp.b     #48,D2
00001034  6506      1491          blo.s     MemoryChange_10
00001036  0C02 0039 1492          cmp.b     #57,D2
0000103A  6310      1493          bls.s     MemoryChange_9
                    1494   MemoryChange_10:
0000103C  0C02 0061 1495          cmp.b     #97,D2
00001040  6500 006E 1496          blo       MemoryChange_7
00001044  0C02 0066 1497          cmp.b     #102,D2
00001048  6200 0066 1498          bhi       MemoryChange_7
                    1499   MemoryChange_9:
                    1500   ; Data = (xtod(c) << 4) | (xtod(_getch()));
0000104C  C4BC 0000 1501          and.l     #255,D2
00001050  00FF      
00001052  2F02      1502          move.l    D2,-(A7)
00001054  4EB8 0BD2 1503          jsr       _xtod
00001058  584F      1504          addq.w    #4,A7
0000105A  C0BC 0000 1505          and.l     #255,D0
0000105E  00FF      
00001060  E980      1506          asl.l     #4,D0
00001062  2F00      1507          move.l    D0,-(A7)
00001064  2F01      1508          move.l    D1,-(A7)
00001066  4EB8 0B68 1509          jsr       __getch
0000106A  221F      1510          move.l    (A7)+,D1
0000106C  2F00      1511          move.l    D0,-(A7)
0000106E  4EB8 0BD2 1512          jsr       _xtod
00001072  584F      1513          addq.w    #4,A7
00001074  2200      1514          move.l    D0,D1
00001076  201F      1515          move.l    (A7)+,D0
00001078  C2BC 0000 1516          and.l     #255,D1
0000107C  00FF      
0000107E  8081      1517          or.l      D1,D0
00001080  2800      1518          move.l    D0,D4
                    1519   ; *RamPtr = (char)(Data);
00001082  2043      1520          move.l    D3,A0
00001084  1084      1521          move.b    D4,(A0)
                    1522   ; if (*RamPtr != Data) {
00001086  2043      1523          move.l    D3,A0
00001088  1010      1524          move.b    (A0),D0
0000108A  C0BC 0000 1525          and.l     #255,D0
0000108E  00FF      
00001090  B084      1526          cmp.l     D4,D0
00001092  671A      1527          beq.s     MemoryChange_11
                    1528   ; printf("\r\nWarning Change Failed: Wrote [%02x], Read [%02x]", Data, *RamPtr);
00001094  2043      1529          move.l    D3,A0
00001096  1210      1530          move.b    (A0),D1
00001098  C2BC 0000 1531          and.l     #255,D1
0000109C  00FF      
0000109E  2F01      1532          move.l    D1,-(A7)
000010A0  2F04      1533          move.l    D4,-(A7)
000010A2  4879 0000 1534          pea       @m68kde~1_21.L
000010A6  4D08      
000010A8  4E92      1535          jsr       (A2)
000010AA  DEFC 000C 1536          add.w     #12,A7
                    1537   MemoryChange_11:
000010AE  6008      1538          bra.s     MemoryChange_13
                    1539   MemoryChange_7:
                    1540   ; }
                    1541   ; }
                    1542   ; else if (c == (char)('-'))
000010B0  0C02 002D 1543          cmp.b     #45,D2
000010B4  6602      1544          bne.s     MemoryChange_13
                    1545   ; RamPtr -= 2; ;
000010B6  5583      1546          subq.l    #2,D3
                    1547   MemoryChange_13:
                    1548   ; RamPtr++;
000010B8  5283      1549          addq.l    #1,D3
000010BA  6000 FF3A 1550          bra       MemoryChange_1
                    1551   MemoryChange_6:
000010BE  4CDF 041C 1552          movem.l   (A7)+,D2/D3/D4/A2
000010C2  4E75      1553          rts
                    1554   ; }
                    1555   ; }
                    1556   ; /* SPI functions */
                    1557   ; /******************************************************************************************
                    1558   ; ** The following code is for the SPI controller
                    1559   ; *******************************************************************************************/
                    1560   ; // return true if the SPI has finished transmitting a byte (to say the Flash chip) return false otherwise
                    1561   ; // this can be used in a polling algorithm to know when the controller is busy or idle.
                    1562   ; int TestForSPITransmitDataComplete(void) {
                    1563   _TestForSPITransmitDataComplete:
                    1564   ; /* TODO replace 0 below with a test for status register SPIF bit and if set, return true */
                    1565   ; return (SPI_Status >= 0x80);
000010C4  1039 0040 1566          move.b    4227106,D0
000010C8  8022      
000010CA  C07C 00FF 1567          and.w     #255,D0
000010CE  0C40 0080 1568          cmp.w     #128,D0
000010D2  6504      1569          blo.s     TestForSPITransmitDataComplete_1
000010D4  7001      1570          moveq     #1,D0
000010D6  6002      1571          bra.s     TestForSPITransmitDataComplete_2
                    1572   TestForSPITransmitDataComplete_1:
000010D8  4280      1573          clr.l     D0
                    1574   TestForSPITransmitDataComplete_2:
000010DA  4E75      1575          rts
                    1576   ; }
                    1577   ; /************************************************************************************
                    1578   ; ** initialises the SPI controller chip to set speed, interrupt capability etc.
                    1579   ; ************************************************************************************/
                    1580   ; void SPI_Init(void)
                    1581   ; {
                    1582   _SPI_Init:
                    1583   ; //TODO
                    1584   ; //
                    1585   ; // Program the SPI Control, EXT, CS and Status registers to initialise the SPI controller
                    1586   ; // Don't forget to call this routine from main() before you do anything else with SPI
                    1587   ; //
                    1588   ; // Here are some settings we want to create
                    1589   ; //
                    1590   ; // Control Reg     - interrupts disabled, core enabled, Master mode, Polarity and Phase of clock = [0,0], speed =  divide by 32 = approx 700Khz
                    1591   ; // Ext Reg         - in conjunction with control reg, sets speed above and also sets interrupt flag after every completed transfer (each byte)
                    1592   ; // SPI_CS Reg      - control selection of slave SPI chips via their CS# signals
                    1593   ; // Status Reg      - status of SPI controller chip and used to clear any write collision and interrupt on transmit complete flag
                    1594   ; /* setting up control register */
                    1595   ; if ((SPI_Control & 0x20) == 0)
000010DC  1039 0040 1596          move.b    4227104,D0
000010E0  8020      
000010E2  C03C 0020 1597          and.b     #32,D0
000010E6  660A      1598          bne.s     SPI_Init_1
                    1599   ; SPI_Control = 0x53; //writing a 0 to reserved bit at position 5
000010E8  13FC 0053 1600          move.b    #83,4227104
000010EC  0040 8020 
000010F0  6008      1601          bra.s     SPI_Init_2
                    1602   SPI_Init_1:
                    1603   ; else
                    1604   ; SPI_Control = 0x73; //writing a 1 to reserved bit at position 5
000010F2  13FC 0073 1605          move.b    #115,4227104
000010F6  0040 8020 
                    1606   SPI_Init_2:
                    1607   ; /* setting up extension register */
                    1608   ; SPI_Ext = SPI_Ext & 0x3c;
000010FA  1039 0040 1609          move.b    4227110,D0
000010FE  8026      
00001100  C03C 003C 1610          and.b     #60,D0
00001104  13C0 0040 1611          move.b    D0,4227110
00001108  8026      
                    1612   ; /* enable chip */
                    1613   ; Disable_SPI_CS();
0000110A  13FC 00FF 1614          move.b    #255,4227112
0000110E  0040 8028 
                    1615   ; /* setting up status register */
                    1616   ; SPI_Status = 0xff;
00001112  13FC 00FF 1617          move.b    #255,4227106
00001116  0040 8022 
0000111A  4E75      1618          rts
                    1619   ; //TODO: figure out what value to write to reserved bits, is there a way to maintain the value of the reerved bit?
                    1620   ; //TODO: How to write to individual bit positions
                    1621   ; //assume data can be changed in such a way such that the reserved bits are not updated, may need to read the data first
                    1622   ; }
                    1623   ; /************************************************************************************
                    1624   ; ** return ONLY when the SPI controller has finished transmitting a byte
                    1625   ; ************************************************************************************/
                    1626   ; void WaitForSPITransmitComplete(void)
                    1627   ; {
                    1628   _WaitForSPITransmitComplete:
                    1629   ; // TODO : poll the status register SPIF bit looking for completion of transmission
                    1630   ; // once transmission is complete, clear the write collision and interrupt on transmit complete flags in the status register (read documentation)
                    1631   ; // just in case they were set
                    1632   ; /* loop for polling */
                    1633   ; while (TestForSPITransmitDataComplete() == 0) {
                    1634   WaitForSPITransmitComplete_1:
0000111C  4EB8 10C4 1635          jsr       _TestForSPITransmitDataComplete
00001120  4A80      1636          tst.l     D0
00001122  6602      1637          bne.s     WaitForSPITransmitComplete_3
                    1638   ; //do nothing
                    1639   ; }
00001124  60F6      1640          bra       WaitForSPITransmitComplete_1
                    1641   WaitForSPITransmitComplete_3:
                    1642   ; /* set bits in status register */
                    1643   ; SPI_Status = 0xff;
00001126  13FC 00FF 1644          move.b    #255,4227106
0000112A  0040 8022 
0000112E  4E75      1645          rts
                    1646   ; }
                    1647   ; char WriteSPIChar(char c) //change int to char to take into account 1 byte
                    1648   ; {
                    1649   _WriteSPIChar:
00001130  4E56 FFFC 1650          link      A6,#-4
                    1651   ; char buffer;
                    1652   ; SPI_Data = c;
00001134  13EE 000B 1653          move.b    11(A6),4227108
00001138  0040 8024 
                    1654   ; WaitForSPITransmitComplete();
0000113C  4EB8 111C 1655          jsr       _WaitForSPITransmitComplete
                    1656   ; buffer = SPI_Data;
00001140  1D79 0040 1657          move.b    4227108,-1(A6)
00001144  8024 FFFF 
                    1658   ; return buffer;
00001148  102E FFFF 1659          move.b    -1(A6),D0
0000114C  4E5E      1660          unlk      A6
0000114E  4E75      1661          rts
                    1662   ; }
                    1663   ; void PollFlashStatusRegister(void) {
                    1664   _PollFlashStatusRegister:
00001150  48E7 2020 1665          movem.l   D2/A2,-(A7)
00001154  45F8 1130 1666          lea       _WriteSPIChar.L,A2
                    1667   ; int status;
                    1668   ; Enable_SPI_CS(); //enable cs#
00001158  13FC 00FE 1669          move.b    #254,4227112
0000115C  0040 8028 
                    1670   ; WriteSPIChar(0x05); //cmd data to mosi for polling
00001160  4878 0005 1671          pea       5
00001164  4E92      1672          jsr       (A2)
00001166  584F      1673          addq.w    #4,A7
                    1674   ; status = WriteSPIChar(0xee); // dummy data to mosi for polling
00001168  4878 00EE 1675          pea       238
0000116C  4E92      1676          jsr       (A2)
0000116E  584F      1677          addq.w    #4,A7
00001170  C0BC 0000 1678          and.l     #255,D0
00001174  00FF      
00001176  2400      1679          move.l    D0,D2
                    1680   ; while (status & 0x01 == 1) {
                    1681   PollFlashStatusRegister_1:
00001178  2002      1682          move.l    D2,D0
0000117A  C0BC 0000 1683          and.l     #1,D0
0000117E  0001      
00001180  6712      1684          beq.s     PollFlashStatusRegister_3
                    1685   ; status = WriteSPIChar(0xee); // dummy data to mosi for polling
00001182  4878 00EE 1686          pea       238
00001186  4E92      1687          jsr       (A2)
00001188  584F      1688          addq.w    #4,A7
0000118A  C0BC 0000 1689          and.l     #255,D0
0000118E  00FF      
00001190  2400      1690          move.l    D0,D2
00001192  60E4      1691          bra       PollFlashStatusRegister_1
                    1692   PollFlashStatusRegister_3:
                    1693   ; }
                    1694   ; Disable_SPI_CS(); // disable cs#
00001194  13FC 00FF 1695          move.b    #255,4227112
00001198  0040 8028 
0000119C  4CDF 0404 1696          movem.l   (A7)+,D2/A2
000011A0  4E75      1697          rts
                    1698   ; }
                    1699   ; void EraseChip(void) {
                    1700   _EraseChip:
                    1701   ; //1: enable write
                    1702   ; Enable_SPI_CS();    //enable cs#
000011A2  13FC 00FE 1703          move.b    #254,4227112
000011A6  0040 8028 
                    1704   ; WriteSPIChar(0x06); //data to mosi
000011AA  4878 0006 1705          pea       6
000011AE  4EB8 1130 1706          jsr       _WriteSPIChar
000011B2  584F      1707          addq.w    #4,A7
                    1708   ; Disable_SPI_CS();   //disable cs#
000011B4  13FC 00FF 1709          move.b    #255,4227112
000011B8  0040 8028 
                    1710   ; //2: erase chip
                    1711   ; Enable_SPI_CS();      //enable cs#
000011BC  13FC 00FE 1712          move.b    #254,4227112
000011C0  0040 8028 
                    1713   ; WriteSPIChar(0xc7);   //data to mosi
000011C4  4878 00C7 1714          pea       199
000011C8  4EB8 1130 1715          jsr       _WriteSPIChar
000011CC  584F      1716          addq.w    #4,A7
                    1717   ; Disable_SPI_CS();     // disable cs#
000011CE  13FC 00FF 1718          move.b    #255,4227112
000011D2  0040 8028 
                    1719   ; //3: poll flash chip to see if ready
                    1720   ; PollFlashStatusRegister();
000011D6  4EB8 1150 1721          jsr       _PollFlashStatusRegister
000011DA  4E75      1722          rts
                    1723   ; }
                    1724   ; /************************************************************************************
                    1725   ; ** Write a byte to the SPI flash chip via the controller and returns (reads) whatever was
                    1726   ; ** given back by SPI device at the same time (removes the read byte from the FIFO)
                    1727   ; ************************************************************************************/
                    1728   ; void WriteToFlash(char c, unsigned char lowerByteOfAddress, unsigned char midByteOfAddress, unsigned char upperByteOfAddress) //change int to char to take into account 1 byte
                    1729   ; {
                    1730   _WriteToFlash:
000011DC  4E56 FFFC 1731          link      A6,#-4
000011E0  2F0A      1732          move.l    A2,-(A7)
000011E2  45F8 1130 1733          lea       _WriteSPIChar.L,A2
                    1734   ; char dummy, dummy2;
                    1735   ; //1: enable write
                    1736   ; Enable_SPI_CS();    //enable cs#
000011E6  13FC 00FE 1737          move.b    #254,4227112
000011EA  0040 8028 
                    1738   ; WriteSPIChar(0x06); //data to mosi
000011EE  4878 0006 1739          pea       6
000011F2  4E92      1740          jsr       (A2)
000011F4  584F      1741          addq.w    #4,A7
                    1742   ; Disable_SPI_CS();   //disable cs#
000011F6  13FC 00FF 1743          move.b    #255,4227112
000011FA  0040 8028 
                    1744   ; //2: write to flash
                    1745   ; Enable_SPI_CS();    //enable cs#
000011FE  13FC 00FE 1746          move.b    #254,4227112
00001202  0040 8028 
                    1747   ; WriteSPIChar(0x02); //data to mosi
00001206  4878 0002 1748          pea       2
0000120A  4E92      1749          jsr       (A2)
0000120C  584F      1750          addq.w    #4,A7
                    1751   ; WriteSPIChar(upperByteOfAddress);
0000120E  122E 0017 1752          move.b    23(A6),D1
00001212  4881      1753          ext.w     D1
00001214  48C1      1754          ext.l     D1
00001216  2F01      1755          move.l    D1,-(A7)
00001218  4E92      1756          jsr       (A2)
0000121A  584F      1757          addq.w    #4,A7
                    1758   ; WriteSPIChar(midByteOfAddress);
0000121C  122E 0013 1759          move.b    19(A6),D1
00001220  4881      1760          ext.w     D1
00001222  48C1      1761          ext.l     D1
00001224  2F01      1762          move.l    D1,-(A7)
00001226  4E92      1763          jsr       (A2)
00001228  584F      1764          addq.w    #4,A7
                    1765   ; WriteSPIChar(lowerByteOfAddress);
0000122A  122E 000F 1766          move.b    15(A6),D1
0000122E  4881      1767          ext.w     D1
00001230  48C1      1768          ext.l     D1
00001232  2F01      1769          move.l    D1,-(A7)
00001234  4E92      1770          jsr       (A2)
00001236  584F      1771          addq.w    #4,A7
                    1772   ; WriteSPIChar(c);
00001238  122E 000B 1773          move.b    11(A6),D1
0000123C  4881      1774          ext.w     D1
0000123E  48C1      1775          ext.l     D1
00001240  2F01      1776          move.l    D1,-(A7)
00001242  4E92      1777          jsr       (A2)
00001244  584F      1778          addq.w    #4,A7
                    1779   ; Disable_SPI_CS();   //disable cs#
00001246  13FC 00FF 1780          move.b    #255,4227112
0000124A  0040 8028 
                    1781   ; //3: poll flash chip to see if rdy
                    1782   ; PollFlashStatusRegister();
0000124E  4EB8 1150 1783          jsr       _PollFlashStatusRegister
00001252  245F      1784          move.l    (A7)+,A2
00001254  4E5E      1785          unlk      A6
00001256  4E75      1786          rts
                    1787   ; }
                    1788   ; void readID(void) {
                    1789   _readID:
00001258  4E56 FFFC 1790          link      A6,#-4
0000125C  2F0A      1791          move.l    A2,-(A7)
0000125E  45F8 1130 1792          lea       _WriteSPIChar.L,A2
                    1793   ; unsigned char manuID, deviceID;
                    1794   ; Enable_SPI_CS(); //enable cs#
00001262  13FC 00FE 1795          move.b    #254,4227112
00001266  0040 8028 
                    1796   ; WriteSPIChar(0x90); // command to read manufactorer ID and Device ID
0000126A  4878 0090 1797          pea       144
0000126E  4E92      1798          jsr       (A2)
00001270  584F      1799          addq.w    #4,A7
                    1800   ; WriteSPIChar(0x01); //dummy byte mosi
00001272  4878 0001 1801          pea       1
00001276  4E92      1802          jsr       (A2)
00001278  584F      1803          addq.w    #4,A7
                    1804   ; WriteSPIChar(0x01); //dummy byte mosi
0000127A  4878 0001 1805          pea       1
0000127E  4E92      1806          jsr       (A2)
00001280  584F      1807          addq.w    #4,A7
                    1808   ; WriteSPIChar(0x00); //00h mosi
00001282  42A7      1809          clr.l     -(A7)
00001284  4E92      1810          jsr       (A2)
00001286  584F      1811          addq.w    #4,A7
                    1812   ; manuID = WriteSPIChar(0x02); //dummy byte
00001288  4878 0002 1813          pea       2
0000128C  4E92      1814          jsr       (A2)
0000128E  584F      1815          addq.w    #4,A7
00001290  1D40 FFFE 1816          move.b    D0,-2(A6)
                    1817   ; deviceID = WriteSPIChar(0x02); //dummy byte
00001294  4878 0002 1818          pea       2
00001298  4E92      1819          jsr       (A2)
0000129A  584F      1820          addq.w    #4,A7
0000129C  1D40 FFFF 1821          move.b    D0,-1(A6)
                    1822   ; Disable_SPI_CS();
000012A0  13FC 00FF 1823          move.b    #255,4227112
000012A4  0040 8028 
                    1824   ; printf("\r\n\nManufactorer ID: %02x ", manuID);
000012A8  122E FFFE 1825          move.b    -2(A6),D1
000012AC  C2BC 0000 1826          and.l     #255,D1
000012B0  00FF      
000012B2  2F01      1827          move.l    D1,-(A7)
000012B4  4879 0000 1828          pea       @m68kde~1_22.L
000012B8  4D3C      
000012BA  4EB9 0000 1829          jsr       _printf
000012BE  41E4      
000012C0  504F      1830          addq.w    #8,A7
                    1831   ; printf("\r\n\nDevice ID: %02x ", deviceID);
000012C2  122E FFFF 1832          move.b    -1(A6),D1
000012C6  C2BC 0000 1833          and.l     #255,D1
000012CA  00FF      
000012CC  2F01      1834          move.l    D1,-(A7)
000012CE  4879 0000 1835          pea       @m68kde~1_23.L
000012D2  4D56      
000012D4  4EB9 0000 1836          jsr       _printf
000012D8  41E4      
000012DA  504F      1837          addq.w    #8,A7
000012DC  245F      1838          move.l    (A7)+,A2
000012DE  4E5E      1839          unlk      A6
000012E0  4E75      1840          rts
                    1841   ; }
                    1842   ; // This function reads the first thousand n bytes from flash memory
                    1843   ; void ReadDataFromFlash(unsigned char LowerByteOfAddress, int n) {
                    1844   _ReadDataFromFlash:
000012E2  4E56 FFFC 1845          link      A6,#-4
000012E6  48E7 3830 1846          movem.l   D2/D3/D4/A2/A3,-(A7)
000012EA  45F8 1130 1847          lea       _WriteSPIChar.L,A2
000012EE  47F9 0000 1848          lea       _printf.L,A3
000012F2  41E4      
                    1849   ; unsigned char data;
                    1850   ; int i, j;
                    1851   ; int data_count = 0;
000012F4  4284      1852          clr.l     D4
                    1853   ; Enable_SPI_CS(); //enable cs#
000012F6  13FC 00FE 1854          move.b    #254,4227112
000012FA  0040 8028 
                    1855   ; WriteSPIChar(0x03); //page program cmd to mosi
000012FE  4878 0003 1856          pea       3
00001302  4E92      1857          jsr       (A2)
00001304  584F      1858          addq.w    #4,A7
                    1859   ; WriteSPIChar(0x00); //upper byte addr to mosi
00001306  42A7      1860          clr.l     -(A7)
00001308  4E92      1861          jsr       (A2)
0000130A  584F      1862          addq.w    #4,A7
                    1863   ; WriteSPIChar(0x00); //mid byte addr to mosi
0000130C  42A7      1864          clr.l     -(A7)
0000130E  4E92      1865          jsr       (A2)
00001310  584F      1866          addq.w    #4,A7
                    1867   ; WriteSPIChar(LowerByteOfAddress); //lower byte addr to mosi
00001312  122E 000B 1868          move.b    11(A6),D1
00001316  4881      1869          ext.w     D1
00001318  48C1      1870          ext.l     D1
0000131A  2F01      1871          move.l    D1,-(A7)
0000131C  4E92      1872          jsr       (A2)
0000131E  584F      1873          addq.w    #4,A7
                    1874   ; printf("\r\nData from flash at address %08X\r\n", LowerByteOfAddress);
00001320  122E 000B 1875          move.b    11(A6),D1
00001324  C2BC 0000 1876          and.l     #255,D1
00001328  00FF      
0000132A  2F01      1877          move.l    D1,-(A7)
0000132C  4879 0000 1878          pea       @m68kde~1_24.L
00001330  4D6A      
00001332  4E93      1879          jsr       (A3)
00001334  504F      1880          addq.w    #8,A7
                    1881   ; for (j = 0; j < 1000; j++) {
00001336  4283      1882          clr.l     D3
                    1883   ReadDataFromFlash_1:
00001338  0C83 0000 1884          cmp.l     #1000,D3
0000133C  03E8      
0000133E  6C00 0062 1885          bge       ReadDataFromFlash_3
                    1886   ; for (i = 0; i < n; i++) {
00001342  4282      1887          clr.l     D2
                    1888   ReadDataFromFlash_4:
00001344  B4AE 000C 1889          cmp.l     12(A6),D2
00001348  6C00 004A 1890          bge       ReadDataFromFlash_6
                    1891   ; data = WriteSPIChar(0xee); // dummy data to mosi for polling
0000134C  4878 00EE 1892          pea       238
00001350  4E92      1893          jsr       (A2)
00001352  584F      1894          addq.w    #4,A7
00001354  1D40 FFFF 1895          move.b    D0,-1(A6)
                    1896   ; if (data_count % 16 == 0)
00001358  2F04      1897          move.l    D4,-(A7)
0000135A  4878 0010 1898          pea       16
0000135E  4EB9 0000 1899          jsr       LDIV
00001362  36D4      
00001364  202F 0004 1900          move.l    4(A7),D0
00001368  504F      1901          addq.w    #8,A7
0000136A  4A80      1902          tst.l     D0
0000136C  660A      1903          bne.s     ReadDataFromFlash_7
                    1904   ; printf("\r\n");
0000136E  4879 0000 1905          pea       @m68kde~1_1.L
00001372  4B1A      
00001374  4E93      1906          jsr       (A3)
00001376  584F      1907          addq.w    #4,A7
                    1908   ReadDataFromFlash_7:
                    1909   ; printf("%02X ", data);
00001378  122E FFFF 1910          move.b    -1(A6),D1
0000137C  C2BC 0000 1911          and.l     #255,D1
00001380  00FF      
00001382  2F01      1912          move.l    D1,-(A7)
00001384  4879 0000 1913          pea       @m68kde~1_25.L
00001388  4D8E      
0000138A  4E93      1914          jsr       (A3)
0000138C  504F      1915          addq.w    #8,A7
                    1916   ; data_count++;
0000138E  5284      1917          addq.l    #1,D4
00001390  5282      1918          addq.l    #1,D2
00001392  60B0      1919          bra       ReadDataFromFlash_4
                    1920   ReadDataFromFlash_6:
                    1921   ; }
                    1922   ; printf("\r\n\n\n");
00001394  4879 0000 1923          pea       @m68kde~1_26.L
00001398  4D94      
0000139A  4E93      1924          jsr       (A3)
0000139C  584F      1925          addq.w    #4,A7
0000139E  5283      1926          addq.l    #1,D3
000013A0  6096      1927          bra       ReadDataFromFlash_1
                    1928   ReadDataFromFlash_3:
                    1929   ; }
                    1930   ; Disable_SPI_CS(); // disable cs#
000013A2  13FC 00FF 1931          move.b    #255,4227112
000013A6  0040 8028 
000013AA  4CDF 0C1C 1932          movem.l   (A7)+,D2/D3/D4/A2/A3
000013AE  4E5E      1933          unlk      A6
000013B0  4E75      1934          rts
                    1935   ; }
                    1936   ; void CompareDataFromFlashToRam(unsigned char LowerByteOfAddress, int n) {
                    1937   _CompareDataFromFlashToRam:
000013B2  4E56 FFFC 1938          link      A6,#-4
000013B6  48E7 3C30 1939          movem.l   D2/D3/D4/D5/A2/A3,-(A7)
000013BA  45F9 0000 1940          lea       _printf.L,A2
000013BE  41E4      
000013C0  47F8 1130 1941          lea       _WriteSPIChar.L,A3
                    1942   ; unsigned char data;
                    1943   ; unsigned char* RamPtr = (unsigned char*)(0x08000000);
000013C4  263C 0800 1944          move.l    #134217728,D3
000013C8  0000      
                    1945   ; int i, j;
                    1946   ; int error = 0;
000013CA  4285      1947          clr.l     D5
                    1948   ; Enable_SPI_CS(); //enable cs#
000013CC  13FC 00FE 1949          move.b    #254,4227112
000013D0  0040 8028 
                    1950   ; WriteSPIChar(0x03); //page program cmd to mosi
000013D4  4878 0003 1951          pea       3
000013D8  4E93      1952          jsr       (A3)
000013DA  584F      1953          addq.w    #4,A7
                    1954   ; WriteSPIChar(0x00); //upper byte addr to mosi
000013DC  42A7      1955          clr.l     -(A7)
000013DE  4E93      1956          jsr       (A3)
000013E0  584F      1957          addq.w    #4,A7
                    1958   ; WriteSPIChar(0x00); //mid byte addr to mosi
000013E2  42A7      1959          clr.l     -(A7)
000013E4  4E93      1960          jsr       (A3)
000013E6  584F      1961          addq.w    #4,A7
                    1962   ; WriteSPIChar(LowerByteOfAddress); //lower byte addr to mosi
000013E8  122E 000B 1963          move.b    11(A6),D1
000013EC  4881      1964          ext.w     D1
000013EE  48C1      1965          ext.l     D1
000013F0  2F01      1966          move.l    D1,-(A7)
000013F2  4E93      1967          jsr       (A3)
000013F4  584F      1968          addq.w    #4,A7
                    1969   ; printf("\r\nComparing data from flash starting at address %08X\r\n", LowerByteOfAddress);
000013F6  122E 000B 1970          move.b    11(A6),D1
000013FA  C2BC 0000 1971          and.l     #255,D1
000013FE  00FF      
00001400  2F01      1972          move.l    D1,-(A7)
00001402  4879 0000 1973          pea       @m68kde~1_27.L
00001406  4D9A      
00001408  4E92      1974          jsr       (A2)
0000140A  504F      1975          addq.w    #8,A7
                    1976   ; for (i = 0; i < n * 1000; i++) {
0000140C  4282      1977          clr.l     D2
                    1978   CompareDataFromFlashToRam_1:
0000140E  2F2E 000C 1979          move.l    12(A6),-(A7)
00001412  4878 03E8 1980          pea       1000
00001416  4EB9 0000 1981          jsr       LMUL
0000141A  37B2      
0000141C  2017      1982          move.l    (A7),D0
0000141E  504F      1983          addq.w    #8,A7
00001420  B480      1984          cmp.l     D0,D2
00001422  6C00 004E 1985          bge       CompareDataFromFlashToRam_3
                    1986   ; data = WriteSPIChar(0xee); // dummy data to mosi for polling
00001426  4878 00EE 1987          pea       238
0000142A  4E93      1988          jsr       (A3)
0000142C  584F      1989          addq.w    #4,A7
0000142E  1800      1990          move.b    D0,D4
                    1991   ; if (data != RamPtr[i]) {
00001430  2043      1992          move.l    D3,A0
00001432  B830 2800 1993          cmp.b     0(A0,D2.L),D4
00001436  6700 0036 1994          beq       CompareDataFromFlashToRam_4
                    1995   ; printf("\r\n Error at address %08X", RamPtr + i);
0000143A  2203      1996          move.l    D3,D1
0000143C  D282      1997          add.l     D2,D1
0000143E  2F01      1998          move.l    D1,-(A7)
00001440  4879 0000 1999          pea       @m68kde~1_28.L
00001444  4DD2      
00001446  4E92      2000          jsr       (A2)
00001448  504F      2001          addq.w    #8,A7
                    2002   ; printf("\r\n Expected %02X but found %02X", RamPtr[i], data);
0000144A  C8BC 0000 2003          and.l     #255,D4
0000144E  00FF      
00001450  2F04      2004          move.l    D4,-(A7)
00001452  2043      2005          move.l    D3,A0
00001454  1230 2800 2006          move.b    0(A0,D2.L),D1
00001458  C2BC 0000 2007          and.l     #255,D1
0000145C  00FF      
0000145E  2F01      2008          move.l    D1,-(A7)
00001460  4879 0000 2009          pea       @m68kde~1_29.L
00001464  4DEC      
00001466  4E92      2010          jsr       (A2)
00001468  DEFC 000C 2011          add.w     #12,A7
                    2012   ; error = 1;
0000146C  7A01      2013          moveq     #1,D5
                    2014   CompareDataFromFlashToRam_4:
0000146E  5282      2015          addq.l    #1,D2
00001470  609C      2016          bra       CompareDataFromFlashToRam_1
                    2017   CompareDataFromFlashToRam_3:
                    2018   ; }
                    2019   ; }
                    2020   ; Disable_SPI_CS(); // disable cs#
00001472  13FC 00FF 2021          move.b    #255,4227112
00001476  0040 8028 
                    2022   ; if(!error)
0000147A  4A85      2023          tst.l     D5
0000147C  660A      2024          bne.s     CompareDataFromFlashToRam_6
                    2025   ; printf("\r\nSPI Flash Programmes Successfully!");
0000147E  4879 0000 2026          pea       @m68kde~1_30.L
00001482  4E0C      
00001484  4E92      2027          jsr       (A2)
00001486  584F      2028          addq.w    #4,A7
                    2029   CompareDataFromFlashToRam_6:
                    2030   ; printf("\r\nData in SPI Flash matches the first 256k Bytes in Ram starting at 0x08000000");
00001488  4879 0000 2031          pea       @m68kde~1_31.L
0000148C  4E32      
0000148E  4E92      2032          jsr       (A2)
00001490  584F      2033          addq.w    #4,A7
00001492  4CDF 0C3C 2034          movem.l   (A7)+,D2/D3/D4/D5/A2/A3
00001496  4E5E      2035          unlk      A6
00001498  4E75      2036          rts
                    2037   ; }
                    2038   ; /*******************************************************************
                    2039   ; ** Write a program to SPI Flash Chip from memory and verify by reading back
                    2040   ; ********************************************************************/
                    2041   ; void ProgramFlashChip(void)
                    2042   ; {
                    2043   _ProgramFlashChip:
0000149A  4E56 FFF8 2044          link      A6,#-8
0000149E  2F02      2045          move.l    D2,-(A7)
                    2046   ; int i;
                    2047   ; unsigned char msb;
                    2048   ; unsigned char mid;
                    2049   ; unsigned char lsb;
                    2050   ; unsigned char* RamPtr = (unsigned char*)(0x08000000);
000014A0  2D7C 0800 2051          move.l    #134217728,-4(A6)
000014A4  0000 FFFC 
                    2052   ; printf("\r\nProgramming flash chip");
000014A8  4879 0000 2053          pea       @m68kde~1_32.L
000014AC  4E82      
000014AE  4EB9 0000 2054          jsr       _printf
000014B2  41E4      
000014B4  584F      2055          addq.w    #4,A7
                    2056   ; SPI_Init();
000014B6  4EB8 10DC 2057          jsr       _SPI_Init
                    2058   ; EraseChip();
000014BA  4EB8 11A2 2059          jsr       _EraseChip
                    2060   ; printf("\r\nWriting data from address 0x00000000 to 0x0003D090 in flash memory\n");
000014BE  4879 0000 2061          pea       @m68kde~1_33.L
000014C2  4E9C      
000014C4  4EB9 0000 2062          jsr       _printf
000014C8  41E4      
000014CA  584F      2063          addq.w    #4,A7
                    2064   ; for (i = 0; i < 256000; i++) { // lower byte of address
000014CC  4282      2065          clr.l     D2
                    2066   ProgramFlashChip_1:
000014CE  0C82 0003 2067          cmp.l     #256000,D2
000014D2  E800      
000014D4  6C00 008E 2068          bge       ProgramFlashChip_3
                    2069   ; msb = (i >> 16) & 0xff;
000014D8  2002      2070          move.l    D2,D0
000014DA  E080      2071          asr.l     #8,D0
000014DC  E080      2072          asr.l     #8,D0
000014DE  C0BC 0000 2073          and.l     #255,D0
000014E2  00FF      
000014E4  1D40 FFF9 2074          move.b    D0,-7(A6)
                    2075   ; mid = (i >> 8) & 0xff;
000014E8  2002      2076          move.l    D2,D0
000014EA  E080      2077          asr.l     #8,D0
000014EC  C0BC 0000 2078          and.l     #255,D0
000014F0  00FF      
000014F2  1D40 FFFA 2079          move.b    D0,-6(A6)
                    2080   ; lsb = i & 0xff;
000014F6  2002      2081          move.l    D2,D0
000014F8  C0BC 0000 2082          and.l     #255,D0
000014FC  00FF      
000014FE  1D40 FFFB 2083          move.b    D0,-5(A6)
                    2084   ; if(i % 10000 == 0)
00001502  2F02      2085          move.l    D2,-(A7)
00001504  4878 2710 2086          pea       10000
00001508  4EB9 0000 2087          jsr       LDIV
0000150C  36D4      
0000150E  202F 0004 2088          move.l    4(A7),D0
00001512  504F      2089          addq.w    #8,A7
00001514  4A80      2090          tst.l     D0
00001516  660C      2091          bne.s     ProgramFlashChip_4
                    2092   ; putchar('.');
00001518  4878 002E 2093          pea       46
0000151C  4EB9 0000 2094          jsr       _putch
00001520  3840      
00001522  584F      2095          addq.w    #4,A7
                    2096   ProgramFlashChip_4:
                    2097   ; WriteToFlash(RamPtr[i], lsb, mid, msb);
00001524  122E FFF9 2098          move.b    -7(A6),D1
00001528  C2BC 0000 2099          and.l     #255,D1
0000152C  00FF      
0000152E  2F01      2100          move.l    D1,-(A7)
00001530  122E FFFA 2101          move.b    -6(A6),D1
00001534  C2BC 0000 2102          and.l     #255,D1
00001538  00FF      
0000153A  2F01      2103          move.l    D1,-(A7)
0000153C  122E FFFB 2104          move.b    -5(A6),D1
00001540  C2BC 0000 2105          and.l     #255,D1
00001544  00FF      
00001546  2F01      2106          move.l    D1,-(A7)
00001548  206E FFFC 2107          move.l    -4(A6),A0
0000154C  1230 2800 2108          move.b    0(A0,D2.L),D1
00001550  4881      2109          ext.w     D1
00001552  48C1      2110          ext.l     D1
00001554  2F01      2111          move.l    D1,-(A7)
00001556  4EB8 11DC 2112          jsr       _WriteToFlash
0000155A  DEFC 0010 2113          add.w     #16,A7
0000155E  5282      2114          addq.l    #1,D2
00001560  6000 FF6C 2115          bra       ProgramFlashChip_1
                    2116   ProgramFlashChip_3:
                    2117   ; }
                    2118   ; CompareDataFromFlashToRam(0x00, 256);
00001564  4878 0100 2119          pea       256
00001568  42A7      2120          clr.l     -(A7)
0000156A  4EB8 13B2 2121          jsr       _CompareDataFromFlashToRam
0000156E  504F      2122          addq.w    #8,A7
00001570  241F      2123          move.l    (A7)+,D2
00001572  4E5E      2124          unlk      A6
00001574  4E75      2125          rts
                    2126   ; }
                    2127   ; /*************************************************************************
                    2128   ; ** Load a program from SPI Flash Chip and copy to Dram
                    2129   ; **************************************************************************/
                    2130   ; void LoadFromFlashChip(void)
                    2131   ; {
                    2132   _LoadFromFlashChip:
00001576  4E56 FFF8 2133          link      A6,#-8
0000157A  48E7 2020 2134          movem.l   D2/A2,-(A7)
0000157E  45F8 1130 2135          lea       _WriteSPIChar.L,A2
                    2136   ; unsigned char* RamPtr = (unsigned char*)(0x08000000);
00001582  2D7C 0800 2137          move.l    #134217728,-6(A6)
00001586  0000 FFFA 
                    2138   ; unsigned char data;
                    2139   ; int i;
                    2140   ; printf("\r\nLoading Program From SPI Flash\n");
0000158A  4879 0000 2141          pea       @m68kde~1_34.L
0000158E  4EE2      
00001590  4EB9 0000 2142          jsr       _printf
00001594  41E4      
00001596  584F      2143          addq.w    #4,A7
                    2144   ; SPI_Init();
00001598  4EB8 10DC 2145          jsr       _SPI_Init
                    2146   ; Enable_SPI_CS(); //enable cs#
0000159C  13FC 00FE 2147          move.b    #254,4227112
000015A0  0040 8028 
                    2148   ; WriteSPIChar(0x03); //page program cmd to mosi
000015A4  4878 0003 2149          pea       3
000015A8  4E92      2150          jsr       (A2)
000015AA  584F      2151          addq.w    #4,A7
                    2152   ; WriteSPIChar(0x00); //upper byte addr to mosi
000015AC  42A7      2153          clr.l     -(A7)
000015AE  4E92      2154          jsr       (A2)
000015B0  584F      2155          addq.w    #4,A7
                    2156   ; WriteSPIChar(0x00); //mid byte addr to mosi
000015B2  42A7      2157          clr.l     -(A7)
000015B4  4E92      2158          jsr       (A2)
000015B6  584F      2159          addq.w    #4,A7
                    2160   ; WriteSPIChar(0x00); //lower byte addr to mosi
000015B8  42A7      2161          clr.l     -(A7)
000015BA  4E92      2162          jsr       (A2)
000015BC  584F      2163          addq.w    #4,A7
                    2164   ; for (i = 0; i < 256000; i++) {
000015BE  4282      2165          clr.l     D2
                    2166   LoadFromFlashChip_1:
000015C0  0C82 0003 2167          cmp.l     #256000,D2
000015C4  E800      
000015C6  6C00 003E 2168          bge       LoadFromFlashChip_3
                    2169   ; data = WriteSPIChar(0xee); // dummy data
000015CA  4878 00EE 2170          pea       238
000015CE  4E92      2171          jsr       (A2)
000015D0  584F      2172          addq.w    #4,A7
000015D2  1D40 FFFF 2173          move.b    D0,-1(A6)
                    2174   ; RamPtr[i] = data;
000015D6  206E FFFA 2175          move.l    -6(A6),A0
000015DA  11AE FFFF 2176          move.b    -1(A6),0(A0,D2.L)
000015DE  2800      
                    2177   ; if(i % 10000 == 0)
000015E0  2F02      2178          move.l    D2,-(A7)
000015E2  4878 2710 2179          pea       10000
000015E6  4EB9 0000 2180          jsr       LDIV
000015EA  36D4      
000015EC  202F 0004 2181          move.l    4(A7),D0
000015F0  504F      2182          addq.w    #8,A7
000015F2  4A80      2183          tst.l     D0
000015F4  660C      2184          bne.s     LoadFromFlashChip_4
                    2185   ; putchar('.');
000015F6  4878 002E 2186          pea       46
000015FA  4EB9 0000 2187          jsr       _putch
000015FE  3840      
00001600  584F      2188          addq.w    #4,A7
                    2189   LoadFromFlashChip_4:
00001602  5282      2190          addq.l    #1,D2
00001604  60BA      2191          bra       LoadFromFlashChip_1
                    2192   LoadFromFlashChip_3:
                    2193   ; }
                    2194   ; Disable_SPI_CS(); // disable cs#
00001606  13FC 00FF 2195          move.b    #255,4227112
0000160A  0040 8028 
                    2196   ; printf("\r\nData Loaded Successfully");
0000160E  4879 0000 2197          pea       @m68kde~1_35.L
00001612  4F04      
00001614  4EB9 0000 2198          jsr       _printf
00001618  41E4      
0000161A  584F      2199          addq.w    #4,A7
0000161C  4CDF 0404 2200          movem.l   (A7)+,D2/A2
00001620  4E5E      2201          unlk      A6
00001622  4E75      2202          rts
                    2203   ; }
                    2204   ; //////////////////////////////////////////////////////////////////////////////////////////////////
                    2205   ; // IMPORTANT
                    2206   ; // TG68 does not support the Native Trace mode of the original 68000 so tracing
                    2207   ; // has to be done with an interrupt (IRQ Level 6)
                    2208   ; //
                    2209   ; // To allow the 68000 to execute one more instruction after each pseudo trace (IRQ6)
                    2210   ; // the IRQ is removed in hardware once the TG68 reads the IRQ autovector (i.e. acknowledges the IRQ)
                    2211   ; //
                    2212   ; // on return from the IRQ service handler, the first access to the user memory program space
                    2213   ; // generates a fresh IRQ (in hardware) to generate a new trace, this allows the tg68 to
                    2214   ; // execute one more new instruction (without it the TG68 would trace on the same instruction
                    2215   ; // each time and not after the next one). It also means it doesn't simgle step outside the user
                    2216   ; // program area
                    2217   ; //
                    2218   ; // The bottom line is the Trace handler, which includes the Dump registers below
                    2219   ; // cannot access the user memory to display for example the Instruction Opcode or to disassemble etc
                    2220   ; // as this would lead to a new IRQ being reset and the TG68 would trace on same instruction
                    2221   ; // NOT SURE THIS IS TRUE NOW THAT TRACE HANDLER HAS BEEN MODIVIED TO NOT AUTOMATICALLY GENERATE A TRACE EXCEPTION
                    2222   ; // INSTEAD IT IS DONE IN THE 'N' COMMAND FOR NEXT
                    2223   ; /////////////////////////////////////////////////////////////////////////////////////////////////////
                    2224   ; void DumpRegisters()
                    2225   ; {
                    2226   _DumpRegisters:
00001624  48E7 3F3C 2227          movem.l   D2/D3/D4/D5/D6/D7/A2/A3/A4/A5,-(A7)
00001628  45F9 0000 2228          lea       _putch.L,A2
0000162C  3840      
0000162E  47F9 0000 2229          lea       _printf.L,A3
00001632  41E4      
00001634  49F9 0803 2230          lea       _SR.L,A4
00001638  012C      
0000163A  4BF9 0803 2231          lea       _WatchPointString.L,A5
0000163E  01C2      
                    2232   ; short i, x, j, k;
                    2233   ; unsigned char c, * BytePointer;
                    2234   ; // buld up strings for displaying watchpoints
                    2235   ; for (x = 0; x < (short)(8); x++)
00001640  4242      2236          clr.w     D2
                    2237   DumpRegisters_1:
00001642  0C42 0008 2238          cmp.w     #8,D2
00001646  6C00 01C6 2239          bge       DumpRegisters_3
                    2240   ; {
                    2241   ; if (WatchPointSetOrCleared[x] == 1)
0000164A  48C2      2242          ext.l     D2
0000164C  2002      2243          move.l    D2,D0
0000164E  E588      2244          lsl.l     #2,D0
00001650  41F9 0803 2245          lea       _WatchPointSetOrCleared.L,A0
00001654  01A2      
00001656  2030 0800 2246          move.l    0(A0,D0.L),D0
0000165A  0C80 0000 2247          cmp.l     #1,D0
0000165E  0001      
00001660  6600 0186 2248          bne       DumpRegisters_4
                    2249   ; {
                    2250   ; sprintf(WatchPointString[x], "$%08X  ", WatchPointAddress[x]);
00001664  48C2      2251          ext.l     D2
00001666  2202      2252          move.l    D2,D1
00001668  E589      2253          lsl.l     #2,D1
0000166A  41F9 0803 2254          lea       _WatchPointAddress.L,A0
0000166E  0182      
00001670  2F30 1800 2255          move.l    0(A0,D1.L),-(A7)
00001674  4879 0000 2256          pea       @m68kde~1_36.L
00001678  4F20      
0000167A  220D      2257          move.l    A5,D1
0000167C  48C2      2258          ext.l     D2
0000167E  2F00      2259          move.l    D0,-(A7)
00001680  2002      2260          move.l    D2,D0
00001682  C1FC 0064 2261          muls      #100,D0
00001686  D280      2262          add.l     D0,D1
00001688  201F      2263          move.l    (A7)+,D0
0000168A  2F01      2264          move.l    D1,-(A7)
0000168C  4EB9 0000 2265          jsr       _sprintf
00001690  38D8      
00001692  DEFC 000C 2266          add.w     #12,A7
                    2267   ; BytePointer = (char*)(WatchPointAddress[x]);
00001696  48C2      2268          ext.l     D2
00001698  2002      2269          move.l    D2,D0
0000169A  E588      2270          lsl.l     #2,D0
0000169C  41F9 0803 2271          lea       _WatchPointAddress.L,A0
000016A0  0182      
000016A2  2A30 0800 2272          move.l    0(A0,D0.L),D5
                    2273   ; for (j = 0; j < (short)(16); j += 2)
000016A6  4243      2274          clr.w     D3
                    2275   DumpRegisters_6:
000016A8  0C43 0010 2276          cmp.w     #16,D3
000016AC  6C00 0082 2277          bge       DumpRegisters_8
                    2278   ; {
                    2279   ; for (k = 0; k < (short)(2); k++)
000016B0  4246      2280          clr.w     D6
                    2281   DumpRegisters_9:
000016B2  0C46 0002 2282          cmp.w     #2,D6
000016B6  6C00 0052 2283          bge       DumpRegisters_11
                    2284   ; {
                    2285   ; sprintf(TempString, "%02X", BytePointer[j + k]);
000016BA  2045      2286          move.l    D5,A0
000016BC  48C3      2287          ext.l     D3
000016BE  2203      2288          move.l    D3,D1
000016C0  48C6      2289          ext.l     D6
000016C2  D286      2290          add.l     D6,D1
000016C4  1230 1800 2291          move.b    0(A0,D1.L),D1
000016C8  C2BC 0000 2292          and.l     #255,D1
000016CC  00FF      
000016CE  2F01      2293          move.l    D1,-(A7)
000016D0  4879 0000 2294          pea       @m68kde~1_8.L
000016D4  4B92      
000016D6  4879 0803 2295          pea       _TempString.L
000016DA  04E2      
000016DC  4EB9 0000 2296          jsr       _sprintf
000016E0  38D8      
000016E2  DEFC 000C 2297          add.w     #12,A7
                    2298   ; strcat(WatchPointString[x], TempString);
000016E6  4879 0803 2299          pea       _TempString.L
000016EA  04E2      
000016EC  220D      2300          move.l    A5,D1
000016EE  48C2      2301          ext.l     D2
000016F0  2F00      2302          move.l    D0,-(A7)
000016F2  2002      2303          move.l    D2,D0
000016F4  C1FC 0064 2304          muls      #100,D0
000016F8  D280      2305          add.l     D0,D1
000016FA  201F      2306          move.l    (A7)+,D0
000016FC  2F01      2307          move.l    D1,-(A7)
000016FE  4EB9 0000 2308          jsr       _strcat
00001702  390C      
00001704  504F      2309          addq.w    #8,A7
00001706  5246      2310          addq.w    #1,D6
00001708  60A8      2311          bra       DumpRegisters_9
                    2312   DumpRegisters_11:
                    2313   ; }
                    2314   ; strcat(WatchPointString[x], " ");
0000170A  4879 0000 2315          pea       @m68kde~1_37.L
0000170E  4F28      
00001710  220D      2316          move.l    A5,D1
00001712  48C2      2317          ext.l     D2
00001714  2F00      2318          move.l    D0,-(A7)
00001716  2002      2319          move.l    D2,D0
00001718  C1FC 0064 2320          muls      #100,D0
0000171C  D280      2321          add.l     D0,D1
0000171E  201F      2322          move.l    (A7)+,D0
00001720  2F01      2323          move.l    D1,-(A7)
00001722  4EB9 0000 2324          jsr       _strcat
00001726  390C      
00001728  504F      2325          addq.w    #8,A7
0000172A  5443      2326          addq.w    #2,D3
0000172C  6000 FF7A 2327          bra       DumpRegisters_6
                    2328   DumpRegisters_8:
                    2329   ; }
                    2330   ; strcat(WatchPointString[x], "  ");
00001730  4879 0000 2331          pea       @m68kde~1_9.L
00001734  4B98      
00001736  220D      2332          move.l    A5,D1
00001738  48C2      2333          ext.l     D2
0000173A  2F00      2334          move.l    D0,-(A7)
0000173C  2002      2335          move.l    D2,D0
0000173E  C1FC 0064 2336          muls      #100,D0
00001742  D280      2337          add.l     D0,D1
00001744  201F      2338          move.l    (A7)+,D0
00001746  2F01      2339          move.l    D1,-(A7)
00001748  4EB9 0000 2340          jsr       _strcat
0000174C  390C      
0000174E  504F      2341          addq.w    #8,A7
                    2342   ; BytePointer = (char*)(WatchPointAddress[x]);
00001750  48C2      2343          ext.l     D2
00001752  2002      2344          move.l    D2,D0
00001754  E588      2345          lsl.l     #2,D0
00001756  41F9 0803 2346          lea       _WatchPointAddress.L,A0
0000175A  0182      
0000175C  2A30 0800 2347          move.l    0(A0,D0.L),D5
                    2348   ; for (j = 0; j < (short)(16); j++)
00001760  4243      2349          clr.w     D3
                    2350   DumpRegisters_12:
00001762  0C43 0010 2351          cmp.w     #16,D3
00001766  6C00 007E 2352          bge       DumpRegisters_14
                    2353   ; {
                    2354   ; c = ((char)(BytePointer[j]) & 0x7f);
0000176A  2045      2355          move.l    D5,A0
0000176C  48C3      2356          ext.l     D3
0000176E  1030 3800 2357          move.b    0(A0,D3.L),D0
00001772  C03C 007F 2358          and.b     #127,D0
00001776  1E00      2359          move.b    D0,D7
                    2360   ; if ((c > (char)(0x7f)) || (c < (char)(' ')))
00001778  0C07 007F 2361          cmp.b     #127,D7
0000177C  6206      2362          bhi.s     DumpRegisters_17
0000177E  0C07 0020 2363          cmp.b     #32,D7
00001782  6416      2364          bhs.s     DumpRegisters_15
                    2365   DumpRegisters_17:
                    2366   ; sprintf(TempString, ".");
00001784  4879 0000 2367          pea       @m68kde~1_38.L
00001788  4F2A      
0000178A  4879 0803 2368          pea       _TempString.L
0000178E  04E2      
00001790  4EB9 0000 2369          jsr       _sprintf
00001794  38D8      
00001796  504F      2370          addq.w    #8,A7
00001798  6026      2371          bra.s     DumpRegisters_16
                    2372   DumpRegisters_15:
                    2373   ; else
                    2374   ; sprintf(TempString, "%c", BytePointer[j]);
0000179A  2045      2375          move.l    D5,A0
0000179C  48C3      2376          ext.l     D3
0000179E  1230 3800 2377          move.b    0(A0,D3.L),D1
000017A2  C2BC 0000 2378          and.l     #255,D1
000017A6  00FF      
000017A8  2F01      2379          move.l    D1,-(A7)
000017AA  4879 0000 2380          pea       @m68kde~1_39.L
000017AE  4F2C      
000017B0  4879 0803 2381          pea       _TempString.L
000017B4  04E2      
000017B6  4EB9 0000 2382          jsr       _sprintf
000017BA  38D8      
000017BC  DEFC 000C 2383          add.w     #12,A7
                    2384   DumpRegisters_16:
                    2385   ; strcat(WatchPointString[x], TempString);
000017C0  4879 0803 2386          pea       _TempString.L
000017C4  04E2      
000017C6  220D      2387          move.l    A5,D1
000017C8  48C2      2388          ext.l     D2
000017CA  2F00      2389          move.l    D0,-(A7)
000017CC  2002      2390          move.l    D2,D0
000017CE  C1FC 0064 2391          muls      #100,D0
000017D2  D280      2392          add.l     D0,D1
000017D4  201F      2393          move.l    (A7)+,D0
000017D6  2F01      2394          move.l    D1,-(A7)
000017D8  4EB9 0000 2395          jsr       _strcat
000017DC  390C      
000017DE  504F      2396          addq.w    #8,A7
000017E0  5243      2397          addq.w    #1,D3
000017E2  6000 FF7E 2398          bra       DumpRegisters_12
                    2399   DumpRegisters_14:
000017E6  6020      2400          bra.s     DumpRegisters_5
                    2401   DumpRegisters_4:
                    2402   ; }
                    2403   ; }
                    2404   ; else
                    2405   ; strcpy(WatchPointString[x], "");
000017E8  4879 0000 2406          pea       @m68kde~1_40.L
000017EC  4F30      
000017EE  220D      2407          move.l    A5,D1
000017F0  48C2      2408          ext.l     D2
000017F2  2F00      2409          move.l    D0,-(A7)
000017F4  2002      2410          move.l    D2,D0
000017F6  C1FC 0064 2411          muls      #100,D0
000017FA  D280      2412          add.l     D0,D1
000017FC  201F      2413          move.l    (A7)+,D0
000017FE  2F01      2414          move.l    D1,-(A7)
00001800  4EB9 0000 2415          jsr       _strcpy
00001804  36B2      
00001806  504F      2416          addq.w    #8,A7
                    2417   DumpRegisters_5:
00001808  5242      2418          addq.w    #1,D2
0000180A  6000 FE36 2419          bra       DumpRegisters_1
                    2420   DumpRegisters_3:
                    2421   ; }
                    2422   ; printf("\r\n\r\n D0 = $%08X  A0 = $%08X", d0, a0);
0000180E  2F39 0803 2423          move.l    _a0.L,-(A7)
00001812  0104      
00001814  2F39 0803 2424          move.l    _d0.L,-(A7)
00001818  00E4      
0000181A  4879 0000 2425          pea       @m68kde~1_41.L
0000181E  4F32      
00001820  4E93      2426          jsr       (A3)
00001822  DEFC 000C 2427          add.w     #12,A7
                    2428   ; printf("\r\n D1 = $%08X  A1 = $%08X", d1, a1);
00001826  2F39 0803 2429          move.l    _a1.L,-(A7)
0000182A  0108      
0000182C  2F39 0803 2430          move.l    _d1.L,-(A7)
00001830  00E8      
00001832  4879 0000 2431          pea       @m68kde~1_42.L
00001836  4F4E      
00001838  4E93      2432          jsr       (A3)
0000183A  DEFC 000C 2433          add.w     #12,A7
                    2434   ; printf("\r\n D2 = $%08X  A2 = $%08X", d2, a2);
0000183E  2F39 0803 2435          move.l    _a2.L,-(A7)
00001842  010C      
00001844  2F39 0803 2436          move.l    _d2.L,-(A7)
00001848  00EC      
0000184A  4879 0000 2437          pea       @m68kde~1_43.L
0000184E  4F68      
00001850  4E93      2438          jsr       (A3)
00001852  DEFC 000C 2439          add.w     #12,A7
                    2440   ; printf("\r\n D3 = $%08X  A3 = $%08X", d3, a3);
00001856  2F39 0803 2441          move.l    _a3.L,-(A7)
0000185A  0110      
0000185C  2F39 0803 2442          move.l    _d3.L,-(A7)
00001860  00F0      
00001862  4879 0000 2443          pea       @m68kde~1_44.L
00001866  4F82      
00001868  4E93      2444          jsr       (A3)
0000186A  DEFC 000C 2445          add.w     #12,A7
                    2446   ; printf("\r\n D4 = $%08X  A4 = $%08X", d4, a4);
0000186E  2F39 0803 2447          move.l    _a4.L,-(A7)
00001872  0114      
00001874  2F39 0803 2448          move.l    _d4.L,-(A7)
00001878  00F4      
0000187A  4879 0000 2449          pea       @m68kde~1_45.L
0000187E  4F9C      
00001880  4E93      2450          jsr       (A3)
00001882  DEFC 000C 2451          add.w     #12,A7
                    2452   ; printf("\r\n D5 = $%08X  A5 = $%08X", d5, a5);
00001886  2F39 0803 2453          move.l    _a5.L,-(A7)
0000188A  0118      
0000188C  2F39 0803 2454          move.l    _d5.L,-(A7)
00001890  00F8      
00001892  4879 0000 2455          pea       @m68kde~1_46.L
00001896  4FB6      
00001898  4E93      2456          jsr       (A3)
0000189A  DEFC 000C 2457          add.w     #12,A7
                    2458   ; printf("\r\n D6 = $%08X  A6 = $%08X", d6, a6);
0000189E  2F39 0803 2459          move.l    _a6.L,-(A7)
000018A2  011C      
000018A4  2F39 0803 2460          move.l    _d6.L,-(A7)
000018A8  00FC      
000018AA  4879 0000 2461          pea       @m68kde~1_47.L
000018AE  4FD0      
000018B0  4E93      2462          jsr       (A3)
000018B2  DEFC 000C 2463          add.w     #12,A7
                    2464   ; printf("\r\n D7 = $%08X  A7 = $%08X", d7, ((SR & (unsigned short int)(0x2000)) == ((unsigned short int)(0x2000))) ? SSP : USP);
000018B6  3214      2465          move.w    (A4),D1
000018B8  C27C 2000 2466          and.w     #8192,D1
000018BC  0C41 2000 2467          cmp.w     #8192,D1
000018C0  6608      2468          bne.s     DumpRegisters_18
000018C2  2239 0803 2469          move.l    _SSP.L,D1
000018C6  0124      
000018C8  6006      2470          bra.s     DumpRegisters_19
                    2471   DumpRegisters_18:
000018CA  2239 0803 2472          move.l    _USP.L,D1
000018CE  0128      
                    2473   DumpRegisters_19:
000018D0  2F01      2474          move.l    D1,-(A7)
000018D2  2F39 0803 2475          move.l    _d7.L,-(A7)
000018D6  0100      
000018D8  4879 0000 2476          pea       @m68kde~1_48.L
000018DC  4FEA      
000018DE  4E93      2477          jsr       (A3)
000018E0  DEFC 000C 2478          add.w     #12,A7
                    2479   ; printf("\r\n\r\nUSP = $%08X  (A7) User SP", USP);
000018E4  2F39 0803 2480          move.l    _USP.L,-(A7)
000018E8  0128      
000018EA  4879 0000 2481          pea       @m68kde~1_49.L
000018EE  5004      
000018F0  4E93      2482          jsr       (A3)
000018F2  504F      2483          addq.w    #8,A7
                    2484   ; printf("\r\nSSP = $%08X  (A7) Supervisor SP", SSP);
000018F4  2F39 0803 2485          move.l    _SSP.L,-(A7)
000018F8  0124      
000018FA  4879 0000 2486          pea       @m68kde~1_50.L
000018FE  5022      
00001900  4E93      2487          jsr       (A3)
00001902  504F      2488          addq.w    #8,A7
                    2489   ; printf("\r\n SR = $%04X   ", SR);
00001904  3214      2490          move.w    (A4),D1
00001906  C2BC 0000 2491          and.l     #65535,D1
0000190A  FFFF      
0000190C  2F01      2492          move.l    D1,-(A7)
0000190E  4879 0000 2493          pea       @m68kde~1_51.L
00001912  5044      
00001914  4E93      2494          jsr       (A3)
00001916  504F      2495          addq.w    #8,A7
                    2496   ; // display the status word in characters etc.
                    2497   ; printf("   [");
00001918  4879 0000 2498          pea       @m68kde~1_52.L
0000191C  5056      
0000191E  4E93      2499          jsr       (A3)
00001920  584F      2500          addq.w    #4,A7
                    2501   ; if ((SR & (unsigned short int)(0x8000)) == (unsigned short int)(0x8000)) putchar('T'); else putchar('-');      // Trace bit(bit 15)
00001922  3014      2502          move.w    (A4),D0
00001924  C07C 8000 2503          and.w     #32768,D0
00001928  0C40 8000 2504          cmp.w     #32768,D0
0000192C  660A      2505          bne.s     DumpRegisters_20
0000192E  4878 0054 2506          pea       84
00001932  4E92      2507          jsr       (A2)
00001934  584F      2508          addq.w    #4,A7
00001936  6008      2509          bra.s     DumpRegisters_21
                    2510   DumpRegisters_20:
00001938  4878 002D 2511          pea       45
0000193C  4E92      2512          jsr       (A2)
0000193E  584F      2513          addq.w    #4,A7
                    2514   DumpRegisters_21:
                    2515   ; if ((SR & (unsigned short int)(0x2000)) == (unsigned short int)(0x2000)) putchar('S'); else putchar('U');      // supervisor bit  (bit 13)
00001940  3014      2516          move.w    (A4),D0
00001942  C07C 2000 2517          and.w     #8192,D0
00001946  0C40 2000 2518          cmp.w     #8192,D0
0000194A  660A      2519          bne.s     DumpRegisters_22
0000194C  4878 0053 2520          pea       83
00001950  4E92      2521          jsr       (A2)
00001952  584F      2522          addq.w    #4,A7
00001954  6008      2523          bra.s     DumpRegisters_23
                    2524   DumpRegisters_22:
00001956  4878 0055 2525          pea       85
0000195A  4E92      2526          jsr       (A2)
0000195C  584F      2527          addq.w    #4,A7
                    2528   DumpRegisters_23:
                    2529   ; if ((SR & (unsigned short int)(0x0400)) == (unsigned short int)(0x0400)) putchar('1'); else putchar('0');      // IRQ2 Bit (bit 10)
0000195E  3014      2530          move.w    (A4),D0
00001960  C07C 0400 2531          and.w     #1024,D0
00001964  0C40 0400 2532          cmp.w     #1024,D0
00001968  660A      2533          bne.s     DumpRegisters_24
0000196A  4878 0031 2534          pea       49
0000196E  4E92      2535          jsr       (A2)
00001970  584F      2536          addq.w    #4,A7
00001972  6008      2537          bra.s     DumpRegisters_25
                    2538   DumpRegisters_24:
00001974  4878 0030 2539          pea       48
00001978  4E92      2540          jsr       (A2)
0000197A  584F      2541          addq.w    #4,A7
                    2542   DumpRegisters_25:
                    2543   ; if ((SR & (unsigned short int)(0x0200)) == (unsigned short int)(0x0200)) putchar('1'); else putchar('0');      // IRQ1 Bit (bit 9)
0000197C  3014      2544          move.w    (A4),D0
0000197E  C07C 0200 2545          and.w     #512,D0
00001982  0C40 0200 2546          cmp.w     #512,D0
00001986  660A      2547          bne.s     DumpRegisters_26
00001988  4878 0031 2548          pea       49
0000198C  4E92      2549          jsr       (A2)
0000198E  584F      2550          addq.w    #4,A7
00001990  6008      2551          bra.s     DumpRegisters_27
                    2552   DumpRegisters_26:
00001992  4878 0030 2553          pea       48
00001996  4E92      2554          jsr       (A2)
00001998  584F      2555          addq.w    #4,A7
                    2556   DumpRegisters_27:
                    2557   ; if ((SR & (unsigned short int)(0x0100)) == (unsigned short int)(0x0100)) putchar('1'); else putchar('0');      // IRQ0 Bit (bit 8)
0000199A  3014      2558          move.w    (A4),D0
0000199C  C07C 0100 2559          and.w     #256,D0
000019A0  0C40 0100 2560          cmp.w     #256,D0
000019A4  660A      2561          bne.s     DumpRegisters_28
000019A6  4878 0031 2562          pea       49
000019AA  4E92      2563          jsr       (A2)
000019AC  584F      2564          addq.w    #4,A7
000019AE  6008      2565          bra.s     DumpRegisters_29
                    2566   DumpRegisters_28:
000019B0  4878 0030 2567          pea       48
000019B4  4E92      2568          jsr       (A2)
000019B6  584F      2569          addq.w    #4,A7
                    2570   DumpRegisters_29:
                    2571   ; if ((SR & (unsigned short int)(0x0010)) == (unsigned short int)(0x0010)) putchar('X'); else putchar('-');      // X Bit (bit 4)
000019B8  3014      2572          move.w    (A4),D0
000019BA  C07C 0010 2573          and.w     #16,D0
000019BE  0C40 0010 2574          cmp.w     #16,D0
000019C2  660A      2575          bne.s     DumpRegisters_30
000019C4  4878 0058 2576          pea       88
000019C8  4E92      2577          jsr       (A2)
000019CA  584F      2578          addq.w    #4,A7
000019CC  6008      2579          bra.s     DumpRegisters_31
                    2580   DumpRegisters_30:
000019CE  4878 002D 2581          pea       45
000019D2  4E92      2582          jsr       (A2)
000019D4  584F      2583          addq.w    #4,A7
                    2584   DumpRegisters_31:
                    2585   ; if ((SR & (unsigned short int)(0x0008)) == (unsigned short int)(0x0008)) putchar('N'); else putchar('-');      // N Bit (bit 3)
000019D6  3014      2586          move.w    (A4),D0
000019D8  C07C 0008 2587          and.w     #8,D0
000019DC  0C40 0008 2588          cmp.w     #8,D0
000019E0  660A      2589          bne.s     DumpRegisters_32
000019E2  4878 004E 2590          pea       78
000019E6  4E92      2591          jsr       (A2)
000019E8  584F      2592          addq.w    #4,A7
000019EA  6008      2593          bra.s     DumpRegisters_33
                    2594   DumpRegisters_32:
000019EC  4878 002D 2595          pea       45
000019F0  4E92      2596          jsr       (A2)
000019F2  584F      2597          addq.w    #4,A7
                    2598   DumpRegisters_33:
                    2599   ; if ((SR & (unsigned short int)(0x0004)) == (unsigned short int)(0x0004)) putchar('Z'); else putchar('-');      // Z Bit (bit 2)
000019F4  3014      2600          move.w    (A4),D0
000019F6  C07C 0004 2601          and.w     #4,D0
000019FA  0C40 0004 2602          cmp.w     #4,D0
000019FE  660A      2603          bne.s     DumpRegisters_34
00001A00  4878 005A 2604          pea       90
00001A04  4E92      2605          jsr       (A2)
00001A06  584F      2606          addq.w    #4,A7
00001A08  6008      2607          bra.s     DumpRegisters_35
                    2608   DumpRegisters_34:
00001A0A  4878 002D 2609          pea       45
00001A0E  4E92      2610          jsr       (A2)
00001A10  584F      2611          addq.w    #4,A7
                    2612   DumpRegisters_35:
                    2613   ; if ((SR & (unsigned short int)(0x0002)) == (unsigned short int)(0x0002)) putchar('V'); else putchar('-');      // V Bit (bit 1)
00001A12  3014      2614          move.w    (A4),D0
00001A14  C07C 0002 2615          and.w     #2,D0
00001A18  0C40 0002 2616          cmp.w     #2,D0
00001A1C  660A      2617          bne.s     DumpRegisters_36
00001A1E  4878 0056 2618          pea       86
00001A22  4E92      2619          jsr       (A2)
00001A24  584F      2620          addq.w    #4,A7
00001A26  6008      2621          bra.s     DumpRegisters_37
                    2622   DumpRegisters_36:
00001A28  4878 002D 2623          pea       45
00001A2C  4E92      2624          jsr       (A2)
00001A2E  584F      2625          addq.w    #4,A7
                    2626   DumpRegisters_37:
                    2627   ; if ((SR & (unsigned short int)(0x0001)) == (unsigned short int)(0x0001)) putchar('C'); else putchar('-');      // C Bit (bit 0)
00001A30  3014      2628          move.w    (A4),D0
00001A32  C07C 0001 2629          and.w     #1,D0
00001A36  0C40 0001 2630          cmp.w     #1,D0
00001A3A  660A      2631          bne.s     DumpRegisters_38
00001A3C  4878 0043 2632          pea       67
00001A40  4E92      2633          jsr       (A2)
00001A42  584F      2634          addq.w    #4,A7
00001A44  6008      2635          bra.s     DumpRegisters_39
                    2636   DumpRegisters_38:
00001A46  4878 002D 2637          pea       45
00001A4A  4E92      2638          jsr       (A2)
00001A4C  584F      2639          addq.w    #4,A7
                    2640   DumpRegisters_39:
                    2641   ; putchar(']');
00001A4E  4878 005D 2642          pea       93
00001A52  4E92      2643          jsr       (A2)
00001A54  584F      2644          addq.w    #4,A7
                    2645   ; printf("\r\n PC = $%08X  ", PC);
00001A56  2F39 0803 2646          move.l    _PC.L,-(A7)
00001A5A  0120      
00001A5C  4879 0000 2647          pea       @m68kde~1_53.L
00001A60  505C      
00001A62  4E93      2648          jsr       (A3)
00001A64  504F      2649          addq.w    #8,A7
                    2650   ; if (*(unsigned short int*)(PC) == 0x4e4e)
00001A66  2039 0803 2651          move.l    _PC.L,D0
00001A6A  0120      
00001A6C  2040      2652          move.l    D0,A0
00001A6E  3010      2653          move.w    (A0),D0
00001A70  0C40 4E4E 2654          cmp.w     #20046,D0
00001A74  660A      2655          bne.s     DumpRegisters_40
                    2656   ; printf("[@ BREAKPOINT]");
00001A76  4879 0000 2657          pea       @m68kde~1_54.L
00001A7A  506C      
00001A7C  4E93      2658          jsr       (A3)
00001A7E  584F      2659          addq.w    #4,A7
                    2660   DumpRegisters_40:
                    2661   ; printf("\r\n");
00001A80  4879 0000 2662          pea       @m68kde~1_1.L
00001A84  4B1A      
00001A86  4E93      2663          jsr       (A3)
00001A88  584F      2664          addq.w    #4,A7
                    2665   ; for (i = 0; i < 8; i++) {
00001A8A  4244      2666          clr.w     D4
                    2667   DumpRegisters_42:
00001A8C  0C44 0008 2668          cmp.w     #8,D4
00001A90  6C00 0040 2669          bge       DumpRegisters_44
                    2670   ; if (WatchPointSetOrCleared[i] == 1)
00001A94  48C4      2671          ext.l     D4
00001A96  2004      2672          move.l    D4,D0
00001A98  E588      2673          lsl.l     #2,D0
00001A9A  41F9 0803 2674          lea       _WatchPointSetOrCleared.L,A0
00001A9E  01A2      
00001AA0  2030 0800 2675          move.l    0(A0,D0.L),D0
00001AA4  0C80 0000 2676          cmp.l     #1,D0
00001AA8  0001      
00001AAA  6622      2677          bne.s     DumpRegisters_45
                    2678   ; printf("\r\nWP%d = %s", i, WatchPointString[i]);
00001AAC  220D      2679          move.l    A5,D1
00001AAE  48C4      2680          ext.l     D4
00001AB0  2F00      2681          move.l    D0,-(A7)
00001AB2  2004      2682          move.l    D4,D0
00001AB4  C1FC 0064 2683          muls      #100,D0
00001AB8  D280      2684          add.l     D0,D1
00001ABA  201F      2685          move.l    (A7)+,D0
00001ABC  2F01      2686          move.l    D1,-(A7)
00001ABE  48C4      2687          ext.l     D4
00001AC0  2F04      2688          move.l    D4,-(A7)
00001AC2  4879 0000 2689          pea       @m68kde~1_55.L
00001AC6  507C      
00001AC8  4E93      2690          jsr       (A3)
00001ACA  DEFC 000C 2691          add.w     #12,A7
                    2692   DumpRegisters_45:
00001ACE  5244      2693          addq.w    #1,D4
00001AD0  60BA      2694          bra       DumpRegisters_42
                    2695   DumpRegisters_44:
00001AD2  4CDF 3CFC 2696          movem.l   (A7)+,D2/D3/D4/D5/D6/D7/A2/A3/A4/A5
00001AD6  4E75      2697          rts
                    2698   ; }
                    2699   ; }
                    2700   ; // Trace Exception Handler
                    2701   ; void DumpRegistersandPause(void)
                    2702   ; {
                    2703   _DumpRegistersandPause:
00001AD8  2F0A      2704          move.l    A2,-(A7)
00001ADA  45F9 0000 2705          lea       _printf.L,A2
00001ADE  41E4      
                    2706   ; printf("\r\n\r\n\r\n\r\n\r\n\r\nSingle Step  :[ON]");
00001AE0  4879 0000 2707          pea       @m68kde~1_56.L
00001AE4  5088      
00001AE6  4E92      2708          jsr       (A2)
00001AE8  584F      2709          addq.w    #4,A7
                    2710   ; printf("\r\nBreak Points :[Disabled]");
00001AEA  4879 0000 2711          pea       @m68kde~1_57.L
00001AEE  50A8      
00001AF0  4E92      2712          jsr       (A2)
00001AF2  584F      2713          addq.w    #4,A7
                    2714   ; DumpRegisters();
00001AF4  4EB8 1624 2715          jsr       _DumpRegisters
                    2716   ; printf("\r\nPress <SPACE> to Execute Next Instruction");
00001AF8  4879 0000 2717          pea       @m68kde~1_58.L
00001AFC  50C4      
00001AFE  4E92      2718          jsr       (A2)
00001B00  584F      2719          addq.w    #4,A7
                    2720   ; printf("\r\nPress <ESC> to Resume Program");
00001B02  4879 0000 2721          pea       @m68kde~1_59.L
00001B06  50F0      
00001B08  4E92      2722          jsr       (A2)
00001B0A  584F      2723          addq.w    #4,A7
                    2724   ; menu();
00001B0C  4EB9 0000 2725          jsr       _menu
00001B10  26BC      
00001B12  245F      2726          move.l    (A7)+,A2
00001B14  4E75      2727          rts
                    2728   ; }
                    2729   ; void ChangeRegisters(void)
                    2730   ; {
                    2731   _ChangeRegisters:
00001B16  4E56 FFFC 2732          link      A6,#-4
00001B1A  48E7 303C 2733          movem.l   D2/D3/A2/A3/A4/A5,-(A7)
00001B1E  45F9 0000 2734          lea       _printf.L,A2
00001B22  41E4      
00001B24  47EE FFFC 2735          lea       -4(A6),A3
00001B28  49F8 0CA4 2736          lea       _Get8HexDigits.L,A4
00001B2C  4BF8 0B68 2737          lea       __getch.L,A5
                    2738   ; // get register name d0-d7, a0-a7, up, sp, sr, pc
                    2739   ; int reg_val;
                    2740   ; char c, reg[3];
                    2741   ; reg[0] = tolower(_getch());
00001B30  2F00      2742          move.l    D0,-(A7)
00001B32  4E95      2743          jsr       (A5)
00001B34  2200      2744          move.l    D0,D1
00001B36  201F      2745          move.l    (A7)+,D0
00001B38  2F01      2746          move.l    D1,-(A7)
00001B3A  4EB9 0000 2747          jsr       _tolower
00001B3E  38AC      
00001B40  584F      2748          addq.w    #4,A7
00001B42  1680      2749          move.b    D0,(A3)
                    2750   ; reg[1] = c = tolower(_getch());
00001B44  2F00      2751          move.l    D0,-(A7)
00001B46  4E95      2752          jsr       (A5)
00001B48  2200      2753          move.l    D0,D1
00001B4A  201F      2754          move.l    (A7)+,D0
00001B4C  2F01      2755          move.l    D1,-(A7)
00001B4E  4EB9 0000 2756          jsr       _tolower
00001B52  38AC      
00001B54  584F      2757          addq.w    #4,A7
00001B56  1400      2758          move.b    D0,D2
00001B58  1740 0001 2759          move.b    D0,1(A3)
                    2760   ; if (reg[0] == (char)('d')) {    // change data register
00001B5C  1013      2761          move.b    (A3),D0
00001B5E  0C00 0064 2762          cmp.b     #100,D0
00001B62  6600 00AE 2763          bne       ChangeRegisters_1
                    2764   ; if ((reg[1] > (char)('7')) || (reg[1] < (char)('0'))) {
00001B66  102B 0001 2765          move.b    1(A3),D0
00001B6A  0C00 0037 2766          cmp.b     #55,D0
00001B6E  6E0A      2767          bgt.s     ChangeRegisters_5
00001B70  102B 0001 2768          move.b    1(A3),D0
00001B74  0C00 0030 2769          cmp.b     #48,D0
00001B78  6C0E      2770          bge.s     ChangeRegisters_3
                    2771   ChangeRegisters_5:
                    2772   ; printf("\r\nIllegal Data Register : Use D0-D7.....\r\n");
00001B7A  4879 0000 2773          pea       @m68kde~1_60.L
00001B7E  5110      
00001B80  4E92      2774          jsr       (A2)
00001B82  584F      2775          addq.w    #4,A7
                    2776   ; return;
00001B84  6000 0244 2777          bra       ChangeRegisters_6
                    2778   ChangeRegisters_3:
                    2779   ; }
                    2780   ; else {
                    2781   ; printf("\r\nD%c = ", c);
00001B88  4882      2782          ext.w     D2
00001B8A  48C2      2783          ext.l     D2
00001B8C  2F02      2784          move.l    D2,-(A7)
00001B8E  4879 0000 2785          pea       @m68kde~1_61.L
00001B92  513C      
00001B94  4E92      2786          jsr       (A2)
00001B96  504F      2787          addq.w    #8,A7
                    2788   ; reg_val = Get8HexDigits(0);    // read 32 bit value from user keyboard
00001B98  42A7      2789          clr.l     -(A7)
00001B9A  4E94      2790          jsr       (A4)
00001B9C  584F      2791          addq.w    #4,A7
00001B9E  2600      2792          move.l    D0,D3
                    2793   ; }
                    2794   ; // bit cludgy but d0-d7 not stored as an array for good reason
                    2795   ; if (c == (char)('0'))
00001BA0  0C02 0030 2796          cmp.b     #48,D2
00001BA4  660A      2797          bne.s     ChangeRegisters_7
                    2798   ; d0 = reg_val;
00001BA6  23C3 0803 2799          move.l    D3,_d0.L
00001BAA  00E4      
00001BAC  6000 0060 2800          bra       ChangeRegisters_20
                    2801   ChangeRegisters_7:
                    2802   ; else if (c == (char)('1'))
00001BB0  0C02 0031 2803          cmp.b     #49,D2
00001BB4  660A      2804          bne.s     ChangeRegisters_9
                    2805   ; d1 = reg_val;
00001BB6  23C3 0803 2806          move.l    D3,_d1.L
00001BBA  00E8      
00001BBC  6000 0050 2807          bra       ChangeRegisters_20
                    2808   ChangeRegisters_9:
                    2809   ; else if (c == (char)('2'))
00001BC0  0C02 0032 2810          cmp.b     #50,D2
00001BC4  660A      2811          bne.s     ChangeRegisters_11
                    2812   ; d2 = reg_val;
00001BC6  23C3 0803 2813          move.l    D3,_d2.L
00001BCA  00EC      
00001BCC  6000 0040 2814          bra       ChangeRegisters_20
                    2815   ChangeRegisters_11:
                    2816   ; else if (c == (char)('3'))
00001BD0  0C02 0033 2817          cmp.b     #51,D2
00001BD4  6608      2818          bne.s     ChangeRegisters_13
                    2819   ; d3 = reg_val;
00001BD6  23C3 0803 2820          move.l    D3,_d3.L
00001BDA  00F0      
00001BDC  6030      2821          bra.s     ChangeRegisters_20
                    2822   ChangeRegisters_13:
                    2823   ; else if (c == (char)('4'))
00001BDE  0C02 0034 2824          cmp.b     #52,D2
00001BE2  6608      2825          bne.s     ChangeRegisters_15
                    2826   ; d4 = reg_val;
00001BE4  23C3 0803 2827          move.l    D3,_d4.L
00001BE8  00F4      
00001BEA  6022      2828          bra.s     ChangeRegisters_20
                    2829   ChangeRegisters_15:
                    2830   ; else if (c == (char)('5'))
00001BEC  0C02 0035 2831          cmp.b     #53,D2
00001BF0  6608      2832          bne.s     ChangeRegisters_17
                    2833   ; d5 = reg_val;
00001BF2  23C3 0803 2834          move.l    D3,_d5.L
00001BF6  00F8      
00001BF8  6014      2835          bra.s     ChangeRegisters_20
                    2836   ChangeRegisters_17:
                    2837   ; else if (c == (char)('6'))
00001BFA  0C02 0036 2838          cmp.b     #54,D2
00001BFE  6608      2839          bne.s     ChangeRegisters_19
                    2840   ; d6 = reg_val;
00001C00  23C3 0803 2841          move.l    D3,_d6.L
00001C04  00FC      
00001C06  6006      2842          bra.s     ChangeRegisters_20
                    2843   ChangeRegisters_19:
                    2844   ; else
                    2845   ; d7 = reg_val;
00001C08  23C3 0803 2846          move.l    D3,_d7.L
00001C0C  0100      
                    2847   ChangeRegisters_20:
00001C0E  6000 01B6 2848          bra       ChangeRegisters_51
                    2849   ChangeRegisters_1:
                    2850   ; }
                    2851   ; else if (reg[0] == (char)('a')) {    // change address register, a7 is the user stack pointer, sp is the system stack pointer
00001C12  1013      2852          move.b    (A3),D0
00001C14  0C00 0061 2853          cmp.b     #97,D0
00001C18  6600 00A6 2854          bne       ChangeRegisters_21
                    2855   ; if ((c > (char)('7')) || (c < (char)('0'))) {
00001C1C  0C02 0037 2856          cmp.b     #55,D2
00001C20  6E06      2857          bgt.s     ChangeRegisters_25
00001C22  0C02 0030 2858          cmp.b     #48,D2
00001C26  6C0E      2859          bge.s     ChangeRegisters_23
                    2860   ChangeRegisters_25:
                    2861   ; printf("\r\nIllegal Address Register : Use A0-A7.....\r\n");
00001C28  4879 0000 2862          pea       @m68kde~1_62.L
00001C2C  5146      
00001C2E  4E92      2863          jsr       (A2)
00001C30  584F      2864          addq.w    #4,A7
                    2865   ; return;
00001C32  6000 0196 2866          bra       ChangeRegisters_6
                    2867   ChangeRegisters_23:
                    2868   ; }
                    2869   ; else {
                    2870   ; printf("\r\nA%c = ", c);
00001C36  4882      2871          ext.w     D2
00001C38  48C2      2872          ext.l     D2
00001C3A  2F02      2873          move.l    D2,-(A7)
00001C3C  4879 0000 2874          pea       @m68kde~1_63.L
00001C40  5174      
00001C42  4E92      2875          jsr       (A2)
00001C44  504F      2876          addq.w    #8,A7
                    2877   ; reg_val = Get8HexDigits(0);    // read 32 bit value from user keyboard
00001C46  42A7      2878          clr.l     -(A7)
00001C48  4E94      2879          jsr       (A4)
00001C4A  584F      2880          addq.w    #4,A7
00001C4C  2600      2881          move.l    D0,D3
                    2882   ; }
                    2883   ; // bit cludgy but a0-a7 not stored as an array for good reason
                    2884   ; if (c == (char)('0'))
00001C4E  0C02 0030 2885          cmp.b     #48,D2
00001C52  660A      2886          bne.s     ChangeRegisters_26
                    2887   ; a0 = reg_val;
00001C54  23C3 0803 2888          move.l    D3,_a0.L
00001C58  0104      
00001C5A  6000 0060 2889          bra       ChangeRegisters_39
                    2890   ChangeRegisters_26:
                    2891   ; else if (c == (char)('1'))
00001C5E  0C02 0031 2892          cmp.b     #49,D2
00001C62  660A      2893          bne.s     ChangeRegisters_28
                    2894   ; a1 = reg_val;
00001C64  23C3 0803 2895          move.l    D3,_a1.L
00001C68  0108      
00001C6A  6000 0050 2896          bra       ChangeRegisters_39
                    2897   ChangeRegisters_28:
                    2898   ; else if (c == (char)('2'))
00001C6E  0C02 0032 2899          cmp.b     #50,D2
00001C72  660A      2900          bne.s     ChangeRegisters_30
                    2901   ; a2 = reg_val;
00001C74  23C3 0803 2902          move.l    D3,_a2.L
00001C78  010C      
00001C7A  6000 0040 2903          bra       ChangeRegisters_39
                    2904   ChangeRegisters_30:
                    2905   ; else if (c == (char)('3'))
00001C7E  0C02 0033 2906          cmp.b     #51,D2
00001C82  6608      2907          bne.s     ChangeRegisters_32
                    2908   ; a3 = reg_val;
00001C84  23C3 0803 2909          move.l    D3,_a3.L
00001C88  0110      
00001C8A  6030      2910          bra.s     ChangeRegisters_39
                    2911   ChangeRegisters_32:
                    2912   ; else if (c == (char)('4'))
00001C8C  0C02 0034 2913          cmp.b     #52,D2
00001C90  6608      2914          bne.s     ChangeRegisters_34
                    2915   ; a4 = reg_val;
00001C92  23C3 0803 2916          move.l    D3,_a4.L
00001C96  0114      
00001C98  6022      2917          bra.s     ChangeRegisters_39
                    2918   ChangeRegisters_34:
                    2919   ; else if (c == (char)('5'))
00001C9A  0C02 0035 2920          cmp.b     #53,D2
00001C9E  6608      2921          bne.s     ChangeRegisters_36
                    2922   ; a5 = reg_val;
00001CA0  23C3 0803 2923          move.l    D3,_a5.L
00001CA4  0118      
00001CA6  6014      2924          bra.s     ChangeRegisters_39
                    2925   ChangeRegisters_36:
                    2926   ; else if (c == (char)('6'))
00001CA8  0C02 0036 2927          cmp.b     #54,D2
00001CAC  6608      2928          bne.s     ChangeRegisters_38
                    2929   ; a6 = reg_val;
00001CAE  23C3 0803 2930          move.l    D3,_a6.L
00001CB2  011C      
00001CB4  6006      2931          bra.s     ChangeRegisters_39
                    2932   ChangeRegisters_38:
                    2933   ; else
                    2934   ; USP = reg_val;
00001CB6  23C3 0803 2935          move.l    D3,_USP.L
00001CBA  0128      
                    2936   ChangeRegisters_39:
00001CBC  6000 0108 2937          bra       ChangeRegisters_51
                    2938   ChangeRegisters_21:
                    2939   ; }
                    2940   ; else if ((reg[0] == (char)('u')) && (c == (char)('s'))) {
00001CC0  1013      2941          move.b    (A3),D0
00001CC2  0C00 0075 2942          cmp.b     #117,D0
00001CC6  6600 004E 2943          bne       ChangeRegisters_40
00001CCA  0C02 0073 2944          cmp.b     #115,D2
00001CCE  6600 0046 2945          bne       ChangeRegisters_40
                    2946   ; if (tolower(_getch()) == 'p') {    // change user stack pointer
00001CD2  2F00      2947          move.l    D0,-(A7)
00001CD4  4E95      2948          jsr       (A5)
00001CD6  2200      2949          move.l    D0,D1
00001CD8  201F      2950          move.l    (A7)+,D0
00001CDA  2F01      2951          move.l    D1,-(A7)
00001CDC  4EB9 0000 2952          jsr       _tolower
00001CE0  38AC      
00001CE2  584F      2953          addq.w    #4,A7
00001CE4  0C80 0000 2954          cmp.l     #112,D0
00001CE8  0070      
00001CEA  6618      2955          bne.s     ChangeRegisters_42
                    2956   ; printf("\r\nUser SP = ");
00001CEC  4879 0000 2957          pea       @m68kde~1_64.L
00001CF0  517E      
00001CF2  4E92      2958          jsr       (A2)
00001CF4  584F      2959          addq.w    #4,A7
                    2960   ; USP = Get8HexDigits(0);    // read 32 bit value from user keyboard
00001CF6  42A7      2961          clr.l     -(A7)
00001CF8  4E94      2962          jsr       (A4)
00001CFA  584F      2963          addq.w    #4,A7
00001CFC  23C0 0803 2964          move.l    D0,_USP.L
00001D00  0128      
00001D02  600E      2965          bra.s     ChangeRegisters_43
                    2966   ChangeRegisters_42:
                    2967   ; }
                    2968   ; else {
                    2969   ; printf("\r\nIllegal Register....");
00001D04  4879 0000 2970          pea       @m68kde~1_65.L
00001D08  518C      
00001D0A  4E92      2971          jsr       (A2)
00001D0C  584F      2972          addq.w    #4,A7
                    2973   ; return;
00001D0E  6000 00BA 2974          bra       ChangeRegisters_6
                    2975   ChangeRegisters_43:
00001D12  6000 00B2 2976          bra       ChangeRegisters_51
                    2977   ChangeRegisters_40:
                    2978   ; }
                    2979   ; }
                    2980   ; else if ((reg[0] == (char)('s')) && (c == (char)('s'))) {
00001D16  1013      2981          move.b    (A3),D0
00001D18  0C00 0073 2982          cmp.b     #115,D0
00001D1C  6600 004E 2983          bne       ChangeRegisters_44
00001D20  0C02 0073 2984          cmp.b     #115,D2
00001D24  6600 0046 2985          bne       ChangeRegisters_44
                    2986   ; if (tolower(_getch()) == 'p') {    // change system stack pointer
00001D28  2F00      2987          move.l    D0,-(A7)
00001D2A  4E95      2988          jsr       (A5)
00001D2C  2200      2989          move.l    D0,D1
00001D2E  201F      2990          move.l    (A7)+,D0
00001D30  2F01      2991          move.l    D1,-(A7)
00001D32  4EB9 0000 2992          jsr       _tolower
00001D36  38AC      
00001D38  584F      2993          addq.w    #4,A7
00001D3A  0C80 0000 2994          cmp.l     #112,D0
00001D3E  0070      
00001D40  6618      2995          bne.s     ChangeRegisters_46
                    2996   ; printf("\r\nSystem SP = ");
00001D42  4879 0000 2997          pea       @m68kde~1_66.L
00001D46  51A4      
00001D48  4E92      2998          jsr       (A2)
00001D4A  584F      2999          addq.w    #4,A7
                    3000   ; SSP = Get8HexDigits(0);    // read 32 bit value from user keyboard
00001D4C  42A7      3001          clr.l     -(A7)
00001D4E  4E94      3002          jsr       (A4)
00001D50  584F      3003          addq.w    #4,A7
00001D52  23C0 0803 3004          move.l    D0,_SSP.L
00001D56  0124      
00001D58  600E      3005          bra.s     ChangeRegisters_47
                    3006   ChangeRegisters_46:
                    3007   ; }
                    3008   ; else {
                    3009   ; printf("\r\nIllegal Register....");
00001D5A  4879 0000 3010          pea       @m68kde~1_65.L
00001D5E  518C      
00001D60  4E92      3011          jsr       (A2)
00001D62  584F      3012          addq.w    #4,A7
                    3013   ; return;
00001D64  6000 0064 3014          bra       ChangeRegisters_6
                    3015   ChangeRegisters_47:
00001D68  6000 005C 3016          bra       ChangeRegisters_51
                    3017   ChangeRegisters_44:
                    3018   ; }
                    3019   ; }
                    3020   ; else if ((reg[0] == (char)('p')) && (c == (char)('c'))) {    // change program counter
00001D6C  1013      3021          move.b    (A3),D0
00001D6E  0C00 0070 3022          cmp.b     #112,D0
00001D72  6620      3023          bne.s     ChangeRegisters_48
00001D74  0C02 0063 3024          cmp.b     #99,D2
00001D78  661A      3025          bne.s     ChangeRegisters_48
                    3026   ; printf("\r\nPC = ");
00001D7A  4879 0000 3027          pea       @m68kde~1_67.L
00001D7E  51B4      
00001D80  4E92      3028          jsr       (A2)
00001D82  584F      3029          addq.w    #4,A7
                    3030   ; PC = Get8HexDigits(0);    // read 32 bit value from user keyboard
00001D84  42A7      3031          clr.l     -(A7)
00001D86  4E94      3032          jsr       (A4)
00001D88  584F      3033          addq.w    #4,A7
00001D8A  23C0 0803 3034          move.l    D0,_PC.L
00001D8E  0120      
00001D90  6000 0034 3035          bra       ChangeRegisters_51
                    3036   ChangeRegisters_48:
                    3037   ; }
                    3038   ; else if ((reg[0] == (char)('s')) && (c == (char)('r'))) {    // change status register
00001D94  1013      3039          move.b    (A3),D0
00001D96  0C00 0073 3040          cmp.b     #115,D0
00001D9A  6620      3041          bne.s     ChangeRegisters_50
00001D9C  0C02 0072 3042          cmp.b     #114,D2
00001DA0  661A      3043          bne.s     ChangeRegisters_50
                    3044   ; printf("\r\nSR = ");
00001DA2  4879 0000 3045          pea       @m68kde~1_68.L
00001DA6  51BC      
00001DA8  4E92      3046          jsr       (A2)
00001DAA  584F      3047          addq.w    #4,A7
                    3048   ; SR = Get4HexDigits(0);    // read 16 bit value from user keyboard
00001DAC  42A7      3049          clr.l     -(A7)
00001DAE  4EB8 0C58 3050          jsr       _Get4HexDigits
00001DB2  584F      3051          addq.w    #4,A7
00001DB4  33C0 0803 3052          move.w    D0,_SR.L
00001DB8  012C      
00001DBA  600A      3053          bra.s     ChangeRegisters_51
                    3054   ChangeRegisters_50:
                    3055   ; }
                    3056   ; else
                    3057   ; printf("\r\nIllegal Register: Use A0-A7, D0-D7, SSP, USP, PC or SR\r\n");
00001DBC  4879 0000 3058          pea       @m68kde~1_69.L
00001DC0  51C4      
00001DC2  4E92      3059          jsr       (A2)
00001DC4  584F      3060          addq.w    #4,A7
                    3061   ChangeRegisters_51:
                    3062   ; DumpRegisters();
00001DC6  4EB8 1624 3063          jsr       _DumpRegisters
                    3064   ChangeRegisters_6:
00001DCA  4CDF 3C0C 3065          movem.l   (A7)+,D2/D3/A2/A3/A4/A5
00001DCE  4E5E      3066          unlk      A6
00001DD0  4E75      3067          rts
                    3068   ; }
                    3069   ; void BreakPointDisplay(void)
                    3070   ; {
                    3071   _BreakPointDisplay:
00001DD2  48E7 3030 3072          movem.l   D2/D3/A2/A3,-(A7)
00001DD6  45F9 0000 3073          lea       _printf.L,A2
00001DDA  41E4      
00001DDC  47F9 0803 3074          lea       _BreakPointAddress.L,A3
00001DE0  012E      
                    3075   ; int i, BreakPointsSet = 0;
00001DE2  4283      3076          clr.l     D3
                    3077   ; // any break points  set
                    3078   ; for (i = 0; i < 8; i++) {
00001DE4  4282      3079          clr.l     D2
                    3080   BreakPointDisplay_1:
00001DE6  0C82 0000 3081          cmp.l     #8,D2
00001DEA  0008      
00001DEC  6C1C      3082          bge.s     BreakPointDisplay_3
                    3083   ; if (BreakPointSetOrCleared[i] == 1)
00001DEE  2002      3084          move.l    D2,D0
00001DF0  E588      3085          lsl.l     #2,D0
00001DF2  41F9 0803 3086          lea       _BreakPointSetOrCleared.L,A0
00001DF6  015E      
00001DF8  2030 0800 3087          move.l    0(A0,D0.L),D0
00001DFC  0C80 0000 3088          cmp.l     #1,D0
00001E00  0001      
00001E02  6602      3089          bne.s     BreakPointDisplay_4
                    3090   ; BreakPointsSet = 1;
00001E04  7601      3091          moveq     #1,D3
                    3092   BreakPointDisplay_4:
00001E06  5282      3093          addq.l    #1,D2
00001E08  60DC      3094          bra       BreakPointDisplay_1
                    3095   BreakPointDisplay_3:
                    3096   ; }
                    3097   ; if (BreakPointsSet == 1) {
00001E0A  0C83 0000 3098          cmp.l     #1,D3
00001E0E  0001      
00001E10  6616      3099          bne.s     BreakPointDisplay_6
                    3100   ; printf("\r\n\r\nNum     Address      Instruction");
00001E12  4879 0000 3101          pea       @m68kde~1_70.L
00001E16  5200      
00001E18  4E92      3102          jsr       (A2)
00001E1A  584F      3103          addq.w    #4,A7
                    3104   ; printf("\r\n---     ---------    -----------");
00001E1C  4879 0000 3105          pea       @m68kde~1_71.L
00001E20  5226      
00001E22  4E92      3106          jsr       (A2)
00001E24  584F      3107          addq.w    #4,A7
00001E26  600A      3108          bra.s     BreakPointDisplay_7
                    3109   BreakPointDisplay_6:
                    3110   ; }
                    3111   ; else
                    3112   ; printf("\r\nNo BreakPoints Set");
00001E28  4879 0000 3113          pea       @m68kde~1_72.L
00001E2C  524A      
00001E2E  4E92      3114          jsr       (A2)
00001E30  584F      3115          addq.w    #4,A7
                    3116   BreakPointDisplay_7:
                    3117   ; for (i = 0; i < 8; i++) {
00001E32  4282      3118          clr.l     D2
                    3119   BreakPointDisplay_8:
00001E34  0C82 0000 3120          cmp.l     #8,D2
00001E38  0008      
00001E3A  6C00 005A 3121          bge       BreakPointDisplay_10
                    3122   ; // put opcode back, then put break point back
                    3123   ; if (BreakPointSetOrCleared[i] == 1) {
00001E3E  2002      3124          move.l    D2,D0
00001E40  E588      3125          lsl.l     #2,D0
00001E42  41F9 0803 3126          lea       _BreakPointSetOrCleared.L,A0
00001E46  015E      
00001E48  2030 0800 3127          move.l    0(A0,D0.L),D0
00001E4C  0C80 0000 3128          cmp.l     #1,D0
00001E50  0001      
00001E52  6600 003E 3129          bne       BreakPointDisplay_11
                    3130   ; *(unsigned short int*)(BreakPointAddress[i]) = BreakPointInstruction[i];
00001E56  2002      3131          move.l    D2,D0
00001E58  E388      3132          lsl.l     #1,D0
00001E5A  41F9 0803 3133          lea       _BreakPointInstruction.L,A0
00001E5E  014E      
00001E60  2202      3134          move.l    D2,D1
00001E62  E589      3135          lsl.l     #2,D1
00001E64  2233 1800 3136          move.l    0(A3,D1.L),D1
00001E68  2241      3137          move.l    D1,A1
00001E6A  32B0 0800 3138          move.w    0(A0,D0.L),(A1)
                    3139   ; *(unsigned short int*)(BreakPointAddress[i]) = (unsigned short int)(0x4e4e);
00001E6E  2002      3140          move.l    D2,D0
00001E70  E588      3141          lsl.l     #2,D0
00001E72  2033 0800 3142          move.l    0(A3,D0.L),D0
00001E76  2040      3143          move.l    D0,A0
00001E78  30BC 4E4E 3144          move.w    #20046,(A0)
                    3145   ; printf("\r\n%3d     $%08x", i, BreakPointAddress[i]);
00001E7C  2202      3146          move.l    D2,D1
00001E7E  E589      3147          lsl.l     #2,D1
00001E80  2F33 1800 3148          move.l    0(A3,D1.L),-(A7)
00001E84  2F02      3149          move.l    D2,-(A7)
00001E86  4879 0000 3150          pea       @m68kde~1_73.L
00001E8A  5260      
00001E8C  4E92      3151          jsr       (A2)
00001E8E  DEFC 000C 3152          add.w     #12,A7
                    3153   BreakPointDisplay_11:
00001E92  5282      3154          addq.l    #1,D2
00001E94  609E      3155          bra       BreakPointDisplay_8
                    3156   BreakPointDisplay_10:
                    3157   ; }
                    3158   ; }
                    3159   ; printf("\r\n");
00001E96  4879 0000 3160          pea       @m68kde~1_1.L
00001E9A  4B1A      
00001E9C  4E92      3161          jsr       (A2)
00001E9E  584F      3162          addq.w    #4,A7
00001EA0  4CDF 0C0C 3163          movem.l   (A7)+,D2/D3/A2/A3
00001EA4  4E75      3164          rts
                    3165   ; }
                    3166   ; void WatchPointDisplay(void)
                    3167   ; {
                    3168   _WatchPointDisplay:
00001EA6  48E7 3020 3169          movem.l   D2/D3/A2,-(A7)
00001EAA  45F9 0000 3170          lea       _printf.L,A2
00001EAE  41E4      
                    3171   ; int i;
                    3172   ; int WatchPointsSet = 0;
00001EB0  4283      3173          clr.l     D3
                    3174   ; // any watchpoints set
                    3175   ; for (i = 0; i < 8; i++) {
00001EB2  4282      3176          clr.l     D2
                    3177   WatchPointDisplay_1:
00001EB4  0C82 0000 3178          cmp.l     #8,D2
00001EB8  0008      
00001EBA  6C1C      3179          bge.s     WatchPointDisplay_3
                    3180   ; if (WatchPointSetOrCleared[i] == 1)
00001EBC  2002      3181          move.l    D2,D0
00001EBE  E588      3182          lsl.l     #2,D0
00001EC0  41F9 0803 3183          lea       _WatchPointSetOrCleared.L,A0
00001EC4  01A2      
00001EC6  2030 0800 3184          move.l    0(A0,D0.L),D0
00001ECA  0C80 0000 3185          cmp.l     #1,D0
00001ECE  0001      
00001ED0  6602      3186          bne.s     WatchPointDisplay_4
                    3187   ; WatchPointsSet = 1;
00001ED2  7601      3188          moveq     #1,D3
                    3189   WatchPointDisplay_4:
00001ED4  5282      3190          addq.l    #1,D2
00001ED6  60DC      3191          bra       WatchPointDisplay_1
                    3192   WatchPointDisplay_3:
                    3193   ; }
                    3194   ; if (WatchPointsSet == 1) {
00001ED8  0C83 0000 3195          cmp.l     #1,D3
00001EDC  0001      
00001EDE  6616      3196          bne.s     WatchPointDisplay_6
                    3197   ; printf("\r\nNum     Address");
00001EE0  4879 0000 3198          pea       @m68kde~1_74.L
00001EE4  5270      
00001EE6  4E92      3199          jsr       (A2)
00001EE8  584F      3200          addq.w    #4,A7
                    3201   ; printf("\r\n---     ---------");
00001EEA  4879 0000 3202          pea       @m68kde~1_75.L
00001EEE  5282      
00001EF0  4E92      3203          jsr       (A2)
00001EF2  584F      3204          addq.w    #4,A7
00001EF4  600A      3205          bra.s     WatchPointDisplay_7
                    3206   WatchPointDisplay_6:
                    3207   ; }
                    3208   ; else
                    3209   ; printf("\r\nNo WatchPoints Set");
00001EF6  4879 0000 3210          pea       @m68kde~1_76.L
00001EFA  5296      
00001EFC  4E92      3211          jsr       (A2)
00001EFE  584F      3212          addq.w    #4,A7
                    3213   WatchPointDisplay_7:
                    3214   ; for (i = 0; i < 8; i++) {
00001F00  4282      3215          clr.l     D2
                    3216   WatchPointDisplay_8:
00001F02  0C82 0000 3217          cmp.l     #8,D2
00001F06  0008      
00001F08  6C00 0038 3218          bge       WatchPointDisplay_10
                    3219   ; if (WatchPointSetOrCleared[i] == 1)
00001F0C  2002      3220          move.l    D2,D0
00001F0E  E588      3221          lsl.l     #2,D0
00001F10  41F9 0803 3222          lea       _WatchPointSetOrCleared.L,A0
00001F14  01A2      
00001F16  2030 0800 3223          move.l    0(A0,D0.L),D0
00001F1A  0C80 0000 3224          cmp.l     #1,D0
00001F1E  0001      
00001F20  661C      3225          bne.s     WatchPointDisplay_11
                    3226   ; printf("\r\n%3d     $%08x", i, WatchPointAddress[i]);
00001F22  2202      3227          move.l    D2,D1
00001F24  E589      3228          lsl.l     #2,D1
00001F26  41F9 0803 3229          lea       _WatchPointAddress.L,A0
00001F2A  0182      
00001F2C  2F30 1800 3230          move.l    0(A0,D1.L),-(A7)
00001F30  2F02      3231          move.l    D2,-(A7)
00001F32  4879 0000 3232          pea       @m68kde~1_73.L
00001F36  5260      
00001F38  4E92      3233          jsr       (A2)
00001F3A  DEFC 000C 3234          add.w     #12,A7
                    3235   WatchPointDisplay_11:
00001F3E  5282      3236          addq.l    #1,D2
00001F40  60C0      3237          bra       WatchPointDisplay_8
                    3238   WatchPointDisplay_10:
                    3239   ; }
                    3240   ; printf("\r\n");
00001F42  4879 0000 3241          pea       @m68kde~1_1.L
00001F46  4B1A      
00001F48  4E92      3242          jsr       (A2)
00001F4A  584F      3243          addq.w    #4,A7
00001F4C  4CDF 040C 3244          movem.l   (A7)+,D2/D3/A2
00001F50  4E75      3245          rts
                    3246   ; }
                    3247   ; void BreakPointClear(void)
                    3248   ; {
                    3249   _BreakPointClear:
00001F52  4E56 FFFC 3250          link      A6,#-4
00001F56  48E7 2020 3251          movem.l   D2/A2,-(A7)
00001F5A  45F9 0000 3252          lea       _printf.L,A2
00001F5E  41E4      
                    3253   ; unsigned int i;
                    3254   ; volatile unsigned short int* ProgramBreakPointAddress;
                    3255   ; BreakPointDisplay();
00001F60  4EB8 1DD2 3256          jsr       _BreakPointDisplay
                    3257   ; printf("\r\nEnter Break Point Number: ");
00001F64  4879 0000 3258          pea       @m68kde~1_77.L
00001F68  52AC      
00001F6A  4E92      3259          jsr       (A2)
00001F6C  584F      3260          addq.w    #4,A7
                    3261   ; i = xtod(_getch());           // get break pointer number
00001F6E  2F00      3262          move.l    D0,-(A7)
00001F70  4EB8 0B68 3263          jsr       __getch
00001F74  2200      3264          move.l    D0,D1
00001F76  201F      3265          move.l    (A7)+,D0
00001F78  2F01      3266          move.l    D1,-(A7)
00001F7A  4EB8 0BD2 3267          jsr       _xtod
00001F7E  584F      3268          addq.w    #4,A7
00001F80  C0BC 0000 3269          and.l     #255,D0
00001F84  00FF      
00001F86  2400      3270          move.l    D0,D2
                    3271   ; if ((i < 0) || (i > 7)) {
00001F88  0C82 0000 3272          cmp.l     #0,D2
00001F8C  0000      
00001F8E  6508      3273          blo.s     BreakPointClear_3
00001F90  0C82 0000 3274          cmp.l     #7,D2
00001F94  0007      
00001F96  630E      3275          bls.s     BreakPointClear_1
                    3276   BreakPointClear_3:
                    3277   ; printf("\r\nIllegal Range : Use 0 - 7");
00001F98  4879 0000 3278          pea       @m68kde~1_78.L
00001F9C  52CA      
00001F9E  4E92      3279          jsr       (A2)
00001FA0  584F      3280          addq.w    #4,A7
                    3281   ; return;
00001FA2  6000 0080 3282          bra       BreakPointClear_4
                    3283   BreakPointClear_1:
                    3284   ; }
                    3285   ; if (BreakPointSetOrCleared[i] == 1) {       // if break point set
00001FA6  2002      3286          move.l    D2,D0
00001FA8  E588      3287          lsl.l     #2,D0
00001FAA  41F9 0803 3288          lea       _BreakPointSetOrCleared.L,A0
00001FAE  015E      
00001FB0  2030 0800 3289          move.l    0(A0,D0.L),D0
00001FB4  0C80 0000 3290          cmp.l     #1,D0
00001FB8  0001      
00001FBA  6600 005A 3291          bne       BreakPointClear_5
                    3292   ; ProgramBreakPointAddress = (volatile unsigned short int*)(BreakPointAddress[i]);     // point to the instruction in the user program we are about to change
00001FBE  2002      3293          move.l    D2,D0
00001FC0  E588      3294          lsl.l     #2,D0
00001FC2  41F9 0803 3295          lea       _BreakPointAddress.L,A0
00001FC6  012E      
00001FC8  2D70 0800 3296          move.l    0(A0,D0.L),-4(A6)
00001FCC  FFFC      
                    3297   ; BreakPointAddress[i] = 0;
00001FCE  2002      3298          move.l    D2,D0
00001FD0  E588      3299          lsl.l     #2,D0
00001FD2  41F9 0803 3300          lea       _BreakPointAddress.L,A0
00001FD6  012E      
00001FD8  42B0 0800 3301          clr.l     0(A0,D0.L)
                    3302   ; BreakPointSetOrCleared[i] = 0;
00001FDC  2002      3303          move.l    D2,D0
00001FDE  E588      3304          lsl.l     #2,D0
00001FE0  41F9 0803 3305          lea       _BreakPointSetOrCleared.L,A0
00001FE4  015E      
00001FE6  42B0 0800 3306          clr.l     0(A0,D0.L)
                    3307   ; *ProgramBreakPointAddress = BreakPointInstruction[i];  // put original instruction back
00001FEA  2002      3308          move.l    D2,D0
00001FEC  E388      3309          lsl.l     #1,D0
00001FEE  41F9 0803 3310          lea       _BreakPointInstruction.L,A0
00001FF2  014E      
00001FF4  226E FFFC 3311          move.l    -4(A6),A1
00001FF8  32B0 0800 3312          move.w    0(A0,D0.L),(A1)
                    3313   ; BreakPointInstruction[i] = 0;
00001FFC  2002      3314          move.l    D2,D0
00001FFE  E388      3315          lsl.l     #1,D0
00002000  41F9 0803 3316          lea       _BreakPointInstruction.L,A0
00002004  014E      
00002006  4270 0800 3317          clr.w     0(A0,D0.L)
                    3318   ; printf("\r\nBreak Point Cleared.....\r\n");
0000200A  4879 0000 3319          pea       @m68kde~1_79.L
0000200E  52E6      
00002010  4E92      3320          jsr       (A2)
00002012  584F      3321          addq.w    #4,A7
00002014  600A      3322          bra.s     BreakPointClear_6
                    3323   BreakPointClear_5:
                    3324   ; }
                    3325   ; else
                    3326   ; printf("\r\nBreak Point wasn't Set.....");
00002016  4879 0000 3327          pea       @m68kde~1_80.L
0000201A  5304      
0000201C  4E92      3328          jsr       (A2)
0000201E  584F      3329          addq.w    #4,A7
                    3330   BreakPointClear_6:
                    3331   ; BreakPointDisplay();
00002020  4EB8 1DD2 3332          jsr       _BreakPointDisplay
                    3333   ; return;
                    3334   BreakPointClear_4:
00002024  4CDF 0404 3335          movem.l   (A7)+,D2/A2
00002028  4E5E      3336          unlk      A6
0000202A  4E75      3337          rts
                    3338   ; }
                    3339   ; void WatchPointClear(void)
                    3340   ; {
                    3341   _WatchPointClear:
0000202C  48E7 2020 3342          movem.l   D2/A2,-(A7)
00002030  45F9 0000 3343          lea       _printf.L,A2
00002034  41E4      
                    3344   ; unsigned int i;
                    3345   ; WatchPointDisplay();
00002036  4EB8 1EA6 3346          jsr       _WatchPointDisplay
                    3347   ; printf("\r\nEnter Watch Point Number: ");
0000203A  4879 0000 3348          pea       @m68kde~1_81.L
0000203E  5322      
00002040  4E92      3349          jsr       (A2)
00002042  584F      3350          addq.w    #4,A7
                    3351   ; i = xtod(_getch());           // get watch pointer number
00002044  2F00      3352          move.l    D0,-(A7)
00002046  4EB8 0B68 3353          jsr       __getch
0000204A  2200      3354          move.l    D0,D1
0000204C  201F      3355          move.l    (A7)+,D0
0000204E  2F01      3356          move.l    D1,-(A7)
00002050  4EB8 0BD2 3357          jsr       _xtod
00002054  584F      3358          addq.w    #4,A7
00002056  C0BC 0000 3359          and.l     #255,D0
0000205A  00FF      
0000205C  2400      3360          move.l    D0,D2
                    3361   ; if ((i < 0) || (i > 7)) {
0000205E  0C82 0000 3362          cmp.l     #0,D2
00002062  0000      
00002064  6508      3363          blo.s     WatchPointClear_3
00002066  0C82 0000 3364          cmp.l     #7,D2
0000206A  0007      
0000206C  630E      3365          bls.s     WatchPointClear_1
                    3366   WatchPointClear_3:
                    3367   ; printf("\r\nIllegal Range : Use 0 - 7");
0000206E  4879 0000 3368          pea       @m68kde~1_78.L
00002072  52CA      
00002074  4E92      3369          jsr       (A2)
00002076  584F      3370          addq.w    #4,A7
                    3371   ; return;
00002078  6000 004E 3372          bra       WatchPointClear_4
                    3373   WatchPointClear_1:
                    3374   ; }
                    3375   ; if (WatchPointSetOrCleared[i] == 1) {       // if watch point set
0000207C  2002      3376          move.l    D2,D0
0000207E  E588      3377          lsl.l     #2,D0
00002080  41F9 0803 3378          lea       _WatchPointSetOrCleared.L,A0
00002084  01A2      
00002086  2030 0800 3379          move.l    0(A0,D0.L),D0
0000208A  0C80 0000 3380          cmp.l     #1,D0
0000208E  0001      
00002090  6628      3381          bne.s     WatchPointClear_5
                    3382   ; WatchPointAddress[i] = 0;
00002092  2002      3383          move.l    D2,D0
00002094  E588      3384          lsl.l     #2,D0
00002096  41F9 0803 3385          lea       _WatchPointAddress.L,A0
0000209A  0182      
0000209C  42B0 0800 3386          clr.l     0(A0,D0.L)
                    3387   ; WatchPointSetOrCleared[i] = 0;
000020A0  2002      3388          move.l    D2,D0
000020A2  E588      3389          lsl.l     #2,D0
000020A4  41F9 0803 3390          lea       _WatchPointSetOrCleared.L,A0
000020A8  01A2      
000020AA  42B0 0800 3391          clr.l     0(A0,D0.L)
                    3392   ; printf("\r\nWatch Point Cleared.....\r\n");
000020AE  4879 0000 3393          pea       @m68kde~1_82.L
000020B2  5340      
000020B4  4E92      3394          jsr       (A2)
000020B6  584F      3395          addq.w    #4,A7
000020B8  600A      3396          bra.s     WatchPointClear_6
                    3397   WatchPointClear_5:
                    3398   ; }
                    3399   ; else
                    3400   ; printf("\r\nWatch Point Was not Set.....");
000020BA  4879 0000 3401          pea       @m68kde~1_83.L
000020BE  535E      
000020C0  4E92      3402          jsr       (A2)
000020C2  584F      3403          addq.w    #4,A7
                    3404   WatchPointClear_6:
                    3405   ; WatchPointDisplay();
000020C4  4EB8 1EA6 3406          jsr       _WatchPointDisplay
                    3407   ; return;
                    3408   WatchPointClear_4:
000020C8  4CDF 0404 3409          movem.l   (A7)+,D2/A2
000020CC  4E75      3410          rts
                    3411   ; }
                    3412   ; void DisableBreakPoints(void)
                    3413   ; {
                    3414   _DisableBreakPoints:
000020CE  4E56 FFFC 3415          link      A6,#-4
000020D2  2F02      3416          move.l    D2,-(A7)
                    3417   ; int i;
                    3418   ; volatile unsigned short int* ProgramBreakPointAddress;
                    3419   ; for (i = 0; i < 8; i++) {
000020D4  4282      3420          clr.l     D2
                    3421   DisableBreakPoints_1:
000020D6  0C82 0000 3422          cmp.l     #8,D2
000020DA  0008      
000020DC  6C00 003E 3423          bge       DisableBreakPoints_3
                    3424   ; if (BreakPointSetOrCleared[i] == 1) {                                                    // if break point set
000020E0  2002      3425          move.l    D2,D0
000020E2  E588      3426          lsl.l     #2,D0
000020E4  41F9 0803 3427          lea       _BreakPointSetOrCleared.L,A0
000020E8  015E      
000020EA  2030 0800 3428          move.l    0(A0,D0.L),D0
000020EE  0C80 0000 3429          cmp.l     #1,D0
000020F2  0001      
000020F4  6622      3430          bne.s     DisableBreakPoints_4
                    3431   ; ProgramBreakPointAddress = (volatile unsigned short int*)(BreakPointAddress[i]);     // point to the instruction in the user program where the break point has been set
000020F6  2002      3432          move.l    D2,D0
000020F8  E588      3433          lsl.l     #2,D0
000020FA  41F9 0803 3434          lea       _BreakPointAddress.L,A0
000020FE  012E      
00002100  2D70 0800 3435          move.l    0(A0,D0.L),-4(A6)
00002104  FFFC      
                    3436   ; *ProgramBreakPointAddress = BreakPointInstruction[i];                                  // copy the instruction back to the user program overwritting the $4e4e
00002106  2002      3437          move.l    D2,D0
00002108  E388      3438          lsl.l     #1,D0
0000210A  41F9 0803 3439          lea       _BreakPointInstruction.L,A0
0000210E  014E      
00002110  226E FFFC 3440          move.l    -4(A6),A1
00002114  32B0 0800 3441          move.w    0(A0,D0.L),(A1)
                    3442   DisableBreakPoints_4:
00002118  5282      3443          addq.l    #1,D2
0000211A  60BA      3444          bra       DisableBreakPoints_1
                    3445   DisableBreakPoints_3:
0000211C  241F      3446          move.l    (A7)+,D2
0000211E  4E5E      3447          unlk      A6
00002120  4E75      3448          rts
                    3449   ; }
                    3450   ; }
                    3451   ; }
                    3452   ; void EnableBreakPoints(void)
                    3453   ; {
                    3454   _EnableBreakPoints:
00002122  4E56 FFFC 3455          link      A6,#-4
00002126  2F02      3456          move.l    D2,-(A7)
                    3457   ; int i;
                    3458   ; volatile unsigned short int* ProgramBreakPointAddress;
                    3459   ; for (i = 0; i < 8; i++) {
00002128  4282      3460          clr.l     D2
                    3461   EnableBreakPoints_1:
0000212A  0C82 0000 3462          cmp.l     #8,D2
0000212E  0008      
00002130  6C32      3463          bge.s     EnableBreakPoints_3
                    3464   ; if (BreakPointSetOrCleared[i] == 1) {                                                     // if break point set
00002132  2002      3465          move.l    D2,D0
00002134  E588      3466          lsl.l     #2,D0
00002136  41F9 0803 3467          lea       _BreakPointSetOrCleared.L,A0
0000213A  015E      
0000213C  2030 0800 3468          move.l    0(A0,D0.L),D0
00002140  0C80 0000 3469          cmp.l     #1,D0
00002144  0001      
00002146  6618      3470          bne.s     EnableBreakPoints_4
                    3471   ; ProgramBreakPointAddress = (volatile unsigned short int*)(BreakPointAddress[i]);     // point to the instruction in the user program where the break point has been set
00002148  2002      3472          move.l    D2,D0
0000214A  E588      3473          lsl.l     #2,D0
0000214C  41F9 0803 3474          lea       _BreakPointAddress.L,A0
00002150  012E      
00002152  2D70 0800 3475          move.l    0(A0,D0.L),-4(A6)
00002156  FFFC      
                    3476   ; *ProgramBreakPointAddress = (unsigned short int)(0x4e4e);                              // put the breakpoint back in user program
00002158  206E FFFC 3477          move.l    -4(A6),A0
0000215C  30BC 4E4E 3478          move.w    #20046,(A0)
                    3479   EnableBreakPoints_4:
00002160  5282      3480          addq.l    #1,D2
00002162  60C6      3481          bra       EnableBreakPoints_1
                    3482   EnableBreakPoints_3:
00002164  241F      3483          move.l    (A7)+,D2
00002166  4E5E      3484          unlk      A6
00002168  4E75      3485          rts
                    3486   ; }
                    3487   ; }
                    3488   ; }
                    3489   ; void KillAllBreakPoints(void)
                    3490   ; {
                    3491   _KillAllBreakPoints:
0000216A  4E56 FFFC 3492          link      A6,#-4
0000216E  2F02      3493          move.l    D2,-(A7)
                    3494   ; int i;
                    3495   ; volatile unsigned short int* ProgramBreakPointAddress;
                    3496   ; for (i = 0; i < 8; i++) {
00002170  4282      3497          clr.l     D2
                    3498   KillAllBreakPoints_1:
00002172  0C82 0000 3499          cmp.l     #8,D2
00002176  0008      
00002178  6C00 0052 3500          bge       KillAllBreakPoints_3
                    3501   ; // clear BP
                    3502   ; ProgramBreakPointAddress = (volatile unsigned short int*)(BreakPointAddress[i]);     // point to the instruction in the user program where the break point has been set
0000217C  2002      3503          move.l    D2,D0
0000217E  E588      3504          lsl.l     #2,D0
00002180  41F9 0803 3505          lea       _BreakPointAddress.L,A0
00002184  012E      
00002186  2D70 0800 3506          move.l    0(A0,D0.L),-4(A6)
0000218A  FFFC      
                    3507   ; *ProgramBreakPointAddress = BreakPointInstruction[i];                                  // copy the instruction back to the user program
0000218C  2002      3508          move.l    D2,D0
0000218E  E388      3509          lsl.l     #1,D0
00002190  41F9 0803 3510          lea       _BreakPointInstruction.L,A0
00002194  014E      
00002196  226E FFFC 3511          move.l    -4(A6),A1
0000219A  32B0 0800 3512          move.w    0(A0,D0.L),(A1)
                    3513   ; BreakPointAddress[i] = 0;                                                             // set BP address to NULL
0000219E  2002      3514          move.l    D2,D0
000021A0  E588      3515          lsl.l     #2,D0
000021A2  41F9 0803 3516          lea       _BreakPointAddress.L,A0
000021A6  012E      
000021A8  42B0 0800 3517          clr.l     0(A0,D0.L)
                    3518   ; BreakPointInstruction[i] = 0;
000021AC  2002      3519          move.l    D2,D0
000021AE  E388      3520          lsl.l     #1,D0
000021B0  41F9 0803 3521          lea       _BreakPointInstruction.L,A0
000021B4  014E      
000021B6  4270 0800 3522          clr.w     0(A0,D0.L)
                    3523   ; BreakPointSetOrCleared[i] = 0;                                                        // mark break point as cleared for future setting
000021BA  2002      3524          move.l    D2,D0
000021BC  E588      3525          lsl.l     #2,D0
000021BE  41F9 0803 3526          lea       _BreakPointSetOrCleared.L,A0
000021C2  015E      
000021C4  42B0 0800 3527          clr.l     0(A0,D0.L)
000021C8  5282      3528          addq.l    #1,D2
000021CA  60A6      3529          bra       KillAllBreakPoints_1
                    3530   KillAllBreakPoints_3:
000021CC  241F      3531          move.l    (A7)+,D2
000021CE  4E5E      3532          unlk      A6
000021D0  4E75      3533          rts
                    3534   ; }
                    3535   ; //BreakPointDisplay() ;       // display the break points
                    3536   ; }
                    3537   ; void KillAllWatchPoints(void)
                    3538   ; {
                    3539   _KillAllWatchPoints:
000021D2  2F02      3540          move.l    D2,-(A7)
                    3541   ; int i;
                    3542   ; for (i = 0; i < 8; i++) {
000021D4  4282      3543          clr.l     D2
                    3544   KillAllWatchPoints_1:
000021D6  0C82 0000 3545          cmp.l     #8,D2
000021DA  0008      
000021DC  6C20      3546          bge.s     KillAllWatchPoints_3
                    3547   ; WatchPointAddress[i] = 0;                                                             // set BP address to NULL
000021DE  2002      3548          move.l    D2,D0
000021E0  E588      3549          lsl.l     #2,D0
000021E2  41F9 0803 3550          lea       _WatchPointAddress.L,A0
000021E6  0182      
000021E8  42B0 0800 3551          clr.l     0(A0,D0.L)
                    3552   ; WatchPointSetOrCleared[i] = 0;                                                        // mark break point as cleared for future setting
000021EC  2002      3553          move.l    D2,D0
000021EE  E588      3554          lsl.l     #2,D0
000021F0  41F9 0803 3555          lea       _WatchPointSetOrCleared.L,A0
000021F4  01A2      
000021F6  42B0 0800 3556          clr.l     0(A0,D0.L)
000021FA  5282      3557          addq.l    #1,D2
000021FC  60D8      3558          bra       KillAllWatchPoints_1
                    3559   KillAllWatchPoints_3:
000021FE  241F      3560          move.l    (A7)+,D2
00002200  4E75      3561          rts
                    3562   ; }
                    3563   ; //WatchPointDisplay() ;       // display the break points
                    3564   ; }
                    3565   ; void SetBreakPoint(void)
                    3566   ; {
                    3567   _SetBreakPoint:
00002202  4E56 FFFC 3568          link      A6,#-4
00002206  48E7 3830 3569          movem.l   D2/D3/D4/A2/A3,-(A7)
0000220A  45F9 0000 3570          lea       _printf.L,A2
0000220E  41E4      
00002210  47F9 0803 3571          lea       _BreakPointSetOrCleared.L,A3
00002214  015E      
                    3572   ; int i;
                    3573   ; int BPNumber;
                    3574   ; int BPAddress;
                    3575   ; volatile unsigned short int* ProgramBreakPointAddress;
                    3576   ; // see if any free break points
                    3577   ; for (i = 0; i < 8; i++) {
00002216  4282      3578          clr.l     D2
                    3579   SetBreakPoint_1:
00002218  0C82 0000 3580          cmp.l     #8,D2
0000221C  0008      
0000221E  6C10      3581          bge.s     SetBreakPoint_3
                    3582   ; if (BreakPointSetOrCleared[i] == 0)
00002220  2002      3583          move.l    D2,D0
00002222  E588      3584          lsl.l     #2,D0
00002224  2033 0800 3585          move.l    0(A3,D0.L),D0
00002228  6602      3586          bne.s     SetBreakPoint_4
                    3587   ; break;         // if spare BP found allow user to set it
0000222A  6004      3588          bra.s     SetBreakPoint_3
                    3589   SetBreakPoint_4:
0000222C  5282      3590          addq.l    #1,D2
0000222E  60E8      3591          bra       SetBreakPoint_1
                    3592   SetBreakPoint_3:
                    3593   ; }
                    3594   ; if (i == 8) {
00002230  0C82 0000 3595          cmp.l     #8,D2
00002234  0008      
00002236  660E      3596          bne.s     SetBreakPoint_6
                    3597   ; printf("\r\nNo FREE Break Points.....");
00002238  4879 0000 3598          pea       @m68kde~1_84.L
0000223C  537E      
0000223E  4E92      3599          jsr       (A2)
00002240  584F      3600          addq.w    #4,A7
                    3601   ; return;
00002242  6000 00D6 3602          bra       SetBreakPoint_15
                    3603   SetBreakPoint_6:
                    3604   ; }
                    3605   ; printf("\r\nBreak Point Address: ");
00002246  4879 0000 3606          pea       @m68kde~1_85.L
0000224A  539A      
0000224C  4E92      3607          jsr       (A2)
0000224E  584F      3608          addq.w    #4,A7
                    3609   ; BPAddress = Get8HexDigits(0);
00002250  42A7      3610          clr.l     -(A7)
00002252  4EB8 0CA4 3611          jsr       _Get8HexDigits
00002256  584F      3612          addq.w    #4,A7
00002258  2600      3613          move.l    D0,D3
                    3614   ; ProgramBreakPointAddress = (volatile unsigned short int*)(BPAddress);     // point to the instruction in the user program we are about to change
0000225A  2803      3615          move.l    D3,D4
                    3616   ; if ((BPAddress & 0x00000001) == 0x00000001) {   // cannot set BP at an odd address
0000225C  2003      3617          move.l    D3,D0
0000225E  C0BC 0000 3618          and.l     #1,D0
00002262  0001      
00002264  0C80 0000 3619          cmp.l     #1,D0
00002268  0001      
0000226A  660E      3620          bne.s     SetBreakPoint_9
                    3621   ; printf("\r\nError : Break Points CANNOT be set at ODD addresses");
0000226C  4879 0000 3622          pea       @m68kde~1_86.L
00002270  53B2      
00002272  4E92      3623          jsr       (A2)
00002274  584F      3624          addq.w    #4,A7
                    3625   ; return;
00002276  6000 00A2 3626          bra       SetBreakPoint_15
                    3627   SetBreakPoint_9:
                    3628   ; }
                    3629   ; if (BPAddress < 0x00008000) {   // cannot set BP in ROM
0000227A  0C83 0000 3630          cmp.l     #32768,D3
0000227E  8000      
00002280  640E      3631          bhs.s     SetBreakPoint_11
                    3632   ; printf("\r\nError : Break Points CANNOT be set for ROM in Range : [$0-$00007FFF]");
00002282  4879 0000 3633          pea       @m68kde~1_87.L
00002286  53E8      
00002288  4E92      3634          jsr       (A2)
0000228A  584F      3635          addq.w    #4,A7
                    3636   ; return;
0000228C  6000 008C 3637          bra       SetBreakPoint_15
                    3638   SetBreakPoint_11:
                    3639   ; }
                    3640   ; // search for first free bp or existing same BP
                    3641   ; for (i = 0; i < 8; i++) {
00002290  4282      3642          clr.l     D2
                    3643   SetBreakPoint_13:
00002292  0C82 0000 3644          cmp.l     #8,D2
00002296  0008      
00002298  6C00 0080 3645          bge       SetBreakPoint_15
                    3646   ; if (BreakPointAddress[i] == BPAddress) {
0000229C  2002      3647          move.l    D2,D0
0000229E  E588      3648          lsl.l     #2,D0
000022A0  41F9 0803 3649          lea       _BreakPointAddress.L,A0
000022A4  012E      
000022A6  B6B0 0800 3650          cmp.l     0(A0,D0.L),D3
000022AA  6610      3651          bne.s     SetBreakPoint_16
                    3652   ; printf("\r\nError: Break Point Already Exists at Address : %08x\r\n", BPAddress);
000022AC  2F03      3653          move.l    D3,-(A7)
000022AE  4879 0000 3654          pea       @m68kde~1_88.L
000022B2  5430      
000022B4  4E92      3655          jsr       (A2)
000022B6  504F      3656          addq.w    #8,A7
                    3657   ; return;
000022B8  6000 0060 3658          bra       SetBreakPoint_15
                    3659   SetBreakPoint_16:
                    3660   ; }
                    3661   ; if (BreakPointSetOrCleared[i] == 0) {
000022BC  2002      3662          move.l    D2,D0
000022BE  E588      3663          lsl.l     #2,D0
000022C0  2033 0800 3664          move.l    0(A3,D0.L),D0
000022C4  6600 004E 3665          bne       SetBreakPoint_18
                    3666   ; // set BP here
                    3667   ; BreakPointSetOrCleared[i] = 1;                                 // mark this breakpoint as set
000022C8  2002      3668          move.l    D2,D0
000022CA  E588      3669          lsl.l     #2,D0
000022CC  27BC 0000 3670          move.l    #1,0(A3,D0.L)
000022D0  0001 0800 
                    3671   ; BreakPointInstruction[i] = *ProgramBreakPointAddress;          // copy the user program instruction here so we can put it back afterwards
000022D4  2044      3672          move.l    D4,A0
000022D6  2002      3673          move.l    D2,D0
000022D8  E388      3674          lsl.l     #1,D0
000022DA  43F9 0803 3675          lea       _BreakPointInstruction.L,A1
000022DE  014E      
000022E0  3390 0800 3676          move.w    (A0),0(A1,D0.L)
                    3677   ; printf("\r\nBreak Point Set at Address: [$%08x]", ProgramBreakPointAddress);
000022E4  2F04      3678          move.l    D4,-(A7)
000022E6  4879 0000 3679          pea       @m68kde~1_89.L
000022EA  5468      
000022EC  4E92      3680          jsr       (A2)
000022EE  504F      3681          addq.w    #8,A7
                    3682   ; *ProgramBreakPointAddress = (unsigned short int)(0x4e4e);   // put a Trap14 instruction at the user specified address
000022F0  2044      3683          move.l    D4,A0
000022F2  30BC 4E4E 3684          move.w    #20046,(A0)
                    3685   ; BreakPointAddress[i] = BPAddress;                              // record the address of this break point in the debugger
000022F6  2002      3686          move.l    D2,D0
000022F8  E588      3687          lsl.l     #2,D0
000022FA  41F9 0803 3688          lea       _BreakPointAddress.L,A0
000022FE  012E      
00002300  2183 0800 3689          move.l    D3,0(A0,D0.L)
                    3690   ; printf("\r\n");
00002304  4879 0000 3691          pea       @m68kde~1_1.L
00002308  4B1A      
0000230A  4E92      3692          jsr       (A2)
0000230C  584F      3693          addq.w    #4,A7
                    3694   ; BreakPointDisplay();       // display the break points
0000230E  4EB8 1DD2 3695          jsr       _BreakPointDisplay
                    3696   ; return;
00002312  6006      3697          bra.s     SetBreakPoint_15
                    3698   SetBreakPoint_18:
00002314  5282      3699          addq.l    #1,D2
00002316  6000 FF7A 3700          bra       SetBreakPoint_13
                    3701   SetBreakPoint_15:
0000231A  4CDF 0C1C 3702          movem.l   (A7)+,D2/D3/D4/A2/A3
0000231E  4E5E      3703          unlk      A6
00002320  4E75      3704          rts
                    3705   ; }
                    3706   ; }
                    3707   ; }
                    3708   ; void SetWatchPoint(void)
                    3709   ; {
                    3710   _SetWatchPoint:
00002322  4E56 FFF8 3711          link      A6,#-8
00002326  48E7 3030 3712          movem.l   D2/D3/A2/A3,-(A7)
0000232A  45F9 0000 3713          lea       _printf.L,A2
0000232E  41E4      
00002330  47F9 0803 3714          lea       _WatchPointSetOrCleared.L,A3
00002334  01A2      
                    3715   ; int i;
                    3716   ; int WPNumber;
                    3717   ; int WPAddress;
                    3718   ; volatile unsigned short int* ProgramWatchPointAddress;
                    3719   ; // see if any free break points
                    3720   ; for (i = 0; i < 8; i++) {
00002336  4282      3721          clr.l     D2
                    3722   SetWatchPoint_1:
00002338  0C82 0000 3723          cmp.l     #8,D2
0000233C  0008      
0000233E  6C10      3724          bge.s     SetWatchPoint_3
                    3725   ; if (WatchPointSetOrCleared[i] == 0)
00002340  2002      3726          move.l    D2,D0
00002342  E588      3727          lsl.l     #2,D0
00002344  2033 0800 3728          move.l    0(A3,D0.L),D0
00002348  6602      3729          bne.s     SetWatchPoint_4
                    3730   ; break;         // if spare WP found allow user to set it
0000234A  6004      3731          bra.s     SetWatchPoint_3
                    3732   SetWatchPoint_4:
0000234C  5282      3733          addq.l    #1,D2
0000234E  60E8      3734          bra       SetWatchPoint_1
                    3735   SetWatchPoint_3:
                    3736   ; }
                    3737   ; if (i == 8) {
00002350  0C82 0000 3738          cmp.l     #8,D2
00002354  0008      
00002356  660E      3739          bne.s     SetWatchPoint_6
                    3740   ; printf("\r\nNo FREE Watch Points.....");
00002358  4879 0000 3741          pea       @m68kde~1_90.L
0000235C  548E      
0000235E  4E92      3742          jsr       (A2)
00002360  584F      3743          addq.w    #4,A7
                    3744   ; return;
00002362  6000 008C 3745          bra       SetWatchPoint_11
                    3746   SetWatchPoint_6:
                    3747   ; }
                    3748   ; printf("\r\nWatch Point Address: ");
00002366  4879 0000 3749          pea       @m68kde~1_91.L
0000236A  54AA      
0000236C  4E92      3750          jsr       (A2)
0000236E  584F      3751          addq.w    #4,A7
                    3752   ; WPAddress = Get8HexDigits(0);
00002370  42A7      3753          clr.l     -(A7)
00002372  4EB8 0CA4 3754          jsr       _Get8HexDigits
00002376  584F      3755          addq.w    #4,A7
00002378  2600      3756          move.l    D0,D3
                    3757   ; // search for first free wp or existing same wp
                    3758   ; for (i = 0; i < 8; i++) {
0000237A  4282      3759          clr.l     D2
                    3760   SetWatchPoint_9:
0000237C  0C82 0000 3761          cmp.l     #8,D2
00002380  0008      
00002382  6C00 006C 3762          bge       SetWatchPoint_11
                    3763   ; if (WatchPointAddress[i] == WPAddress && WPAddress != 0) {     //so we can set a wp at 0
00002386  2002      3764          move.l    D2,D0
00002388  E588      3765          lsl.l     #2,D0
0000238A  41F9 0803 3766          lea       _WatchPointAddress.L,A0
0000238E  0182      
00002390  B6B0 0800 3767          cmp.l     0(A0,D0.L),D3
00002394  6614      3768          bne.s     SetWatchPoint_12
00002396  4A83      3769          tst.l     D3
00002398  6710      3770          beq.s     SetWatchPoint_12
                    3771   ; printf("\r\nError: Watch Point Already Set at Address : %08x\r\n", WPAddress);
0000239A  2F03      3772          move.l    D3,-(A7)
0000239C  4879 0000 3773          pea       @m68kde~1_92.L
000023A0  54C2      
000023A2  4E92      3774          jsr       (A2)
000023A4  504F      3775          addq.w    #8,A7
                    3776   ; return;
000023A6  6000 0048 3777          bra       SetWatchPoint_11
                    3778   SetWatchPoint_12:
                    3779   ; }
                    3780   ; if (WatchPointSetOrCleared[i] == 0) {
000023AA  2002      3781          move.l    D2,D0
000023AC  E588      3782          lsl.l     #2,D0
000023AE  2033 0800 3783          move.l    0(A3,D0.L),D0
000023B2  6600 0038 3784          bne       SetWatchPoint_14
                    3785   ; WatchPointSetOrCleared[i] = 1;                                 // mark this watchpoint as set
000023B6  2002      3786          move.l    D2,D0
000023B8  E588      3787          lsl.l     #2,D0
000023BA  27BC 0000 3788          move.l    #1,0(A3,D0.L)
000023BE  0001 0800 
                    3789   ; printf("\r\nWatch Point Set at Address: [$%08x]", WPAddress);
000023C2  2F03      3790          move.l    D3,-(A7)
000023C4  4879 0000 3791          pea       @m68kde~1_93.L
000023C8  54F8      
000023CA  4E92      3792          jsr       (A2)
000023CC  504F      3793          addq.w    #8,A7
                    3794   ; WatchPointAddress[i] = WPAddress;                              // record the address of this watch point in the debugger
000023CE  2002      3795          move.l    D2,D0
000023D0  E588      3796          lsl.l     #2,D0
000023D2  41F9 0803 3797          lea       _WatchPointAddress.L,A0
000023D6  0182      
000023D8  2183 0800 3798          move.l    D3,0(A0,D0.L)
                    3799   ; printf("\r\n");
000023DC  4879 0000 3800          pea       @m68kde~1_1.L
000023E0  4B1A      
000023E2  4E92      3801          jsr       (A2)
000023E4  584F      3802          addq.w    #4,A7
                    3803   ; WatchPointDisplay();       // display the break points
000023E6  4EB8 1EA6 3804          jsr       _WatchPointDisplay
                    3805   ; return;
000023EA  6004      3806          bra.s     SetWatchPoint_11
                    3807   SetWatchPoint_14:
000023EC  5282      3808          addq.l    #1,D2
000023EE  608C      3809          bra       SetWatchPoint_9
                    3810   SetWatchPoint_11:
000023F0  4CDF 0C0C 3811          movem.l   (A7)+,D2/D3/A2/A3
000023F4  4E5E      3812          unlk      A6
000023F6  4E75      3813          rts
                    3814   ; }
                    3815   ; }
                    3816   ; }
                    3817   ; void HandleBreakPoint(void)
                    3818   ; {
                    3819   _HandleBreakPoint:
000023F8  4E56 FFFC 3820          link      A6,#-4
000023FC  48E7 0038 3821          movem.l   A2/A3/A4,-(A7)
00002400  45F9 0803 3822          lea       _i.L,A2
00002404  00C4      
00002406  47F9 0000 3823          lea       _printf.L,A3
0000240A  41E4      
0000240C  49F9 0803 3824          lea       _PC.L,A4
00002410  0120      
                    3825   ; volatile unsigned short int* ProgramBreakPointAddress;
                    3826   ; // now we have to put the break point back to run the instruction
                    3827   ; // PC will contain the address of the TRAP instruction but advanced by two bytes so lets play with that
                    3828   ; PC = PC - 2;  // ready for user to resume after reaching breakpoint
00002412  5594      3829          subq.l    #2,(A4)
                    3830   ; printf("\r\n\r\n\r\n\r\n@BREAKPOINT");
00002414  4879 0000 3831          pea       @m68kde~1_94.L
00002418  551E      
0000241A  4E93      3832          jsr       (A3)
0000241C  584F      3833          addq.w    #4,A7
                    3834   ; printf("\r\nSingle Step : [ON]");
0000241E  4879 0000 3835          pea       @m68kde~1_95.L
00002422  5532      
00002424  4E93      3836          jsr       (A3)
00002426  584F      3837          addq.w    #4,A7
                    3838   ; printf("\r\nBreakPoints : [Enabled]");
00002428  4879 0000 3839          pea       @m68kde~1_96.L
0000242C  5548      
0000242E  4E93      3840          jsr       (A3)
00002430  584F      3841          addq.w    #4,A7
                    3842   ; // now clear the break point (put original instruction back)
                    3843   ; ProgramBreakPointAddress = PC;
00002432  2D54 FFFC 3844          move.l    (A4),-4(A6)
                    3845   ; for (i = 0; i < 8; i++) {
00002436  4292      3846          clr.l     (A2)
                    3847   HandleBreakPoint_1:
00002438  2012      3848          move.l    (A2),D0
0000243A  0C80 0000 3849          cmp.l     #8,D0
0000243E  0008      
00002440  6400 0056 3850          bhs       HandleBreakPoint_3
                    3851   ; if (BreakPointAddress[i] == PC) {        // if we have found the breakpoint
00002444  2012      3852          move.l    (A2),D0
00002446  E588      3853          lsl.l     #2,D0
00002448  41F9 0803 3854          lea       _BreakPointAddress.L,A0
0000244C  012E      
0000244E  2230 0800 3855          move.l    0(A0,D0.L),D1
00002452  B294      3856          cmp.l     (A4),D1
00002454  6600 003E 3857          bne       HandleBreakPoint_4
                    3858   ; BreakPointAddress[i] = 0;
00002458  2012      3859          move.l    (A2),D0
0000245A  E588      3860          lsl.l     #2,D0
0000245C  41F9 0803 3861          lea       _BreakPointAddress.L,A0
00002460  012E      
00002462  42B0 0800 3862          clr.l     0(A0,D0.L)
                    3863   ; BreakPointSetOrCleared[i] = 0;
00002466  2012      3864          move.l    (A2),D0
00002468  E588      3865          lsl.l     #2,D0
0000246A  41F9 0803 3866          lea       _BreakPointSetOrCleared.L,A0
0000246E  015E      
00002470  42B0 0800 3867          clr.l     0(A0,D0.L)
                    3868   ; *ProgramBreakPointAddress = BreakPointInstruction[i];  // put original instruction back
00002474  2012      3869          move.l    (A2),D0
00002476  E388      3870          lsl.l     #1,D0
00002478  41F9 0803 3871          lea       _BreakPointInstruction.L,A0
0000247C  014E      
0000247E  226E FFFC 3872          move.l    -4(A6),A1
00002482  32B0 0800 3873          move.w    0(A0,D0.L),(A1)
                    3874   ; BreakPointInstruction[i] = 0;
00002486  2012      3875          move.l    (A2),D0
00002488  E388      3876          lsl.l     #1,D0
0000248A  41F9 0803 3877          lea       _BreakPointInstruction.L,A0
0000248E  014E      
00002490  4270 0800 3878          clr.w     0(A0,D0.L)
                    3879   HandleBreakPoint_4:
00002494  5292      3880          addq.l    #1,(A2)
00002496  60A0      3881          bra       HandleBreakPoint_1
                    3882   HandleBreakPoint_3:
                    3883   ; }
                    3884   ; }
                    3885   ; DumpRegisters();
00002498  4EB8 1624 3886          jsr       _DumpRegisters
                    3887   ; printf("\r\nPress <SPACE> to Execute Next Instruction");
0000249C  4879 0000 3888          pea       @m68kde~1_58.L
000024A0  50C4      
000024A2  4E93      3889          jsr       (A3)
000024A4  584F      3890          addq.w    #4,A7
                    3891   ; printf("\r\nPress <ESC> to Resume User Program\r\n");
000024A6  4879 0000 3892          pea       @m68kde~1_97.L
000024AA  5562      
000024AC  4E93      3893          jsr       (A3)
000024AE  584F      3894          addq.w    #4,A7
                    3895   ; menu();
000024B0  4EB9 0000 3896          jsr       _menu
000024B4  26BC      
000024B6  4CDF 1C00 3897          movem.l   (A7)+,A2/A3/A4
000024BA  4E5E      3898          unlk      A6
000024BC  4E75      3899          rts
                    3900   ; }
                    3901   ; void UnknownCommand()
                    3902   ; {
                    3903   _UnknownCommand:
                    3904   ; printf("\r\nUnknown Command.....\r\n");
000024BE  4879 0000 3905          pea       @m68kde~1_98.L
000024C2  558A      
000024C4  4EB9 0000 3906          jsr       _printf
000024C8  41E4      
000024CA  584F      3907          addq.w    #4,A7
                    3908   ; Help();
000024CC  4EB9 0000 3909          jsr       _Help
000024D0  25E2      
000024D2  4E75      3910          rts
                    3911   ; }
                    3912   ; // system when the users program executes a TRAP #15 instruction to halt program and return to debug monitor
                    3913   ; void CallDebugMonitor(void)
                    3914   ; {
                    3915   _CallDebugMonitor:
                    3916   ; printf("\r\nProgram Ended (TRAP #15)....");
000024D4  4879 0000 3917          pea       @m68kde~1_99.L
000024D8  55A4      
000024DA  4EB9 0000 3918          jsr       _printf
000024DE  41E4      
000024E0  584F      3919          addq.w    #4,A7
                    3920   ; menu();
000024E2  4EB9 0000 3921          jsr       _menu
000024E6  26BC      
000024E8  4E75      3922          rts
                    3923   ; }
                    3924   ; void Breakpoint(void)
                    3925   ; {
                    3926   _Breakpoint:
000024EA  2F02      3927          move.l    D2,-(A7)
                    3928   ; char c;
                    3929   ; c = toupper(_getch());
000024EC  2F00      3930          move.l    D0,-(A7)
000024EE  4EB8 0B68 3931          jsr       __getch
000024F2  2200      3932          move.l    D0,D1
000024F4  201F      3933          move.l    (A7)+,D0
000024F6  2F01      3934          move.l    D1,-(A7)
000024F8  4EB9 0000 3935          jsr       _toupper
000024FC  3922      
000024FE  584F      3936          addq.w    #4,A7
00002500  1400      3937          move.b    D0,D2
                    3938   ; if (c == (char)('D'))                                      // BreakPoint Display
00002502  0C02 0044 3939          cmp.b     #68,D2
00002506  6608      3940          bne.s     Breakpoint_1
                    3941   ; BreakPointDisplay();
00002508  4EB8 1DD2 3942          jsr       _BreakPointDisplay
0000250C  6000 0054 3943          bra       Breakpoint_10
                    3944   Breakpoint_1:
                    3945   ; else if (c == (char)('K')) {                                 // breakpoint Kill
00002510  0C02 004B 3946          cmp.b     #75,D2
00002514  6630      3947          bne.s     Breakpoint_3
                    3948   ; printf("\r\nKill All Break Points...(y/n)?");
00002516  4879 0000 3949          pea       @m68kde~1_100.L
0000251A  55C4      
0000251C  4EB9 0000 3950          jsr       _printf
00002520  41E4      
00002522  584F      3951          addq.w    #4,A7
                    3952   ; c = toupper(_getch());
00002524  2F00      3953          move.l    D0,-(A7)
00002526  4EB8 0B68 3954          jsr       __getch
0000252A  2200      3955          move.l    D0,D1
0000252C  201F      3956          move.l    (A7)+,D0
0000252E  2F01      3957          move.l    D1,-(A7)
00002530  4EB9 0000 3958          jsr       _toupper
00002534  3922      
00002536  584F      3959          addq.w    #4,A7
00002538  1400      3960          move.b    D0,D2
                    3961   ; if (c == (char)('Y'))
0000253A  0C02 0059 3962          cmp.b     #89,D2
0000253E  6604      3963          bne.s     Breakpoint_5
                    3964   ; KillAllBreakPoints();
00002540  4EB8 216A 3965          jsr       _KillAllBreakPoints
                    3966   Breakpoint_5:
00002544  601C      3967          bra.s     Breakpoint_10
                    3968   Breakpoint_3:
                    3969   ; }
                    3970   ; else if (c == (char)('S')) {
00002546  0C02 0053 3971          cmp.b     #83,D2
0000254A  6606      3972          bne.s     Breakpoint_7
                    3973   ; SetBreakPoint();
0000254C  4EB8 2202 3974          jsr       _SetBreakPoint
00002550  6010      3975          bra.s     Breakpoint_10
                    3976   Breakpoint_7:
                    3977   ; }
                    3978   ; else if (c == (char)('C')) {
00002552  0C02 0043 3979          cmp.b     #67,D2
00002556  6606      3980          bne.s     Breakpoint_9
                    3981   ; BreakPointClear();
00002558  4EB8 1F52 3982          jsr       _BreakPointClear
0000255C  6004      3983          bra.s     Breakpoint_10
                    3984   Breakpoint_9:
                    3985   ; }
                    3986   ; else
                    3987   ; UnknownCommand();
0000255E  4EB8 24BE 3988          jsr       _UnknownCommand
                    3989   Breakpoint_10:
00002562  241F      3990          move.l    (A7)+,D2
00002564  4E75      3991          rts
                    3992   ; }
                    3993   ; void Watchpoint(void)
                    3994   ; {
                    3995   _Watchpoint:
00002566  2F02      3996          move.l    D2,-(A7)
                    3997   ; char c;
                    3998   ; c = toupper(_getch());
00002568  2F00      3999          move.l    D0,-(A7)
0000256A  4EB8 0B68 4000          jsr       __getch
0000256E  2200      4001          move.l    D0,D1
00002570  201F      4002          move.l    (A7)+,D0
00002572  2F01      4003          move.l    D1,-(A7)
00002574  4EB9 0000 4004          jsr       _toupper
00002578  3922      
0000257A  584F      4005          addq.w    #4,A7
0000257C  1400      4006          move.b    D0,D2
                    4007   ; if (c == (char)('D'))                                      // WatchPoint Display
0000257E  0C02 0044 4008          cmp.b     #68,D2
00002582  6608      4009          bne.s     Watchpoint_1
                    4010   ; WatchPointDisplay();
00002584  4EB8 1EA6 4011          jsr       _WatchPointDisplay
00002588  6000 0054 4012          bra       Watchpoint_10
                    4013   Watchpoint_1:
                    4014   ; else if (c == (char)('K')) {                                 // wtahcpoint Kill
0000258C  0C02 004B 4015          cmp.b     #75,D2
00002590  6630      4016          bne.s     Watchpoint_3
                    4017   ; printf("\r\nKill All Watch Points...(y/n)?");
00002592  4879 0000 4018          pea       @m68kde~1_101.L
00002596  55E6      
00002598  4EB9 0000 4019          jsr       _printf
0000259C  41E4      
0000259E  584F      4020          addq.w    #4,A7
                    4021   ; c = toupper(_getch());
000025A0  2F00      4022          move.l    D0,-(A7)
000025A2  4EB8 0B68 4023          jsr       __getch
000025A6  2200      4024          move.l    D0,D1
000025A8  201F      4025          move.l    (A7)+,D0
000025AA  2F01      4026          move.l    D1,-(A7)
000025AC  4EB9 0000 4027          jsr       _toupper
000025B0  3922      
000025B2  584F      4028          addq.w    #4,A7
000025B4  1400      4029          move.b    D0,D2
                    4030   ; if (c == (char)('Y'))
000025B6  0C02 0059 4031          cmp.b     #89,D2
000025BA  6604      4032          bne.s     Watchpoint_5
                    4033   ; KillAllWatchPoints();
000025BC  4EB8 21D2 4034          jsr       _KillAllWatchPoints
                    4035   Watchpoint_5:
000025C0  601C      4036          bra.s     Watchpoint_10
                    4037   Watchpoint_3:
                    4038   ; }
                    4039   ; else if (c == (char)('S')) {
000025C2  0C02 0053 4040          cmp.b     #83,D2
000025C6  6606      4041          bne.s     Watchpoint_7
                    4042   ; SetWatchPoint();
000025C8  4EB8 2322 4043          jsr       _SetWatchPoint
000025CC  6010      4044          bra.s     Watchpoint_10
                    4045   Watchpoint_7:
                    4046   ; }
                    4047   ; else if (c == (char)('C')) {
000025CE  0C02 0043 4048          cmp.b     #67,D2
000025D2  6606      4049          bne.s     Watchpoint_9
                    4050   ; WatchPointClear();
000025D4  4EB8 202C 4051          jsr       _WatchPointClear
000025D8  6004      4052          bra.s     Watchpoint_10
                    4053   Watchpoint_9:
                    4054   ; }
                    4055   ; else
                    4056   ; UnknownCommand();
000025DA  4EB8 24BE 4057          jsr       _UnknownCommand
                    4058   Watchpoint_10:
000025DE  241F      4059          move.l    (A7)+,D2
000025E0  4E75      4060          rts
                    4061   ; }
                    4062   ; void Help(void)
                    4063   ; {
                    4064   _Help:
000025E2  48E7 2020 4065          movem.l   D2/A2,-(A7)
000025E6  45F9 0000 4066          lea       _printf.L,A2
000025EA  41E4      
                    4067   ; char* banner = "\r\n----------------------------------------------------------------";
000025EC  41F9 0000 4068          lea       @m68kde~1_102.L,A0
000025F0  5608      
000025F2  2408      4069          move.l    A0,D2
                    4070   ; printf(banner);
000025F4  2F02      4071          move.l    D2,-(A7)
000025F6  4E92      4072          jsr       (A2)
000025F8  584F      4073          addq.w    #4,A7
                    4074   ; printf("\r\n  Debugger Command Summary");
000025FA  4879 0000 4075          pea       @m68kde~1_103.L
000025FE  564C      
00002600  4E92      4076          jsr       (A2)
00002602  584F      4077          addq.w    #4,A7
                    4078   ; printf(banner);
00002604  2F02      4079          move.l    D2,-(A7)
00002606  4E92      4080          jsr       (A2)
00002608  584F      4081          addq.w    #4,A7
                    4082   ; printf("\r\n  .(reg)       - Change Registers: e.g A0-A7,D0-D7,PC,SSP,USP,SR");
0000260A  4879 0000 4083          pea       @m68kde~1_104.L
0000260E  566A      
00002610  4E92      4084          jsr       (A2)
00002612  584F      4085          addq.w    #4,A7
                    4086   ; printf("\r\n  BD/BS/BC/BK  - Break Point: Display/Set/Clear/Kill");
00002614  4879 0000 4087          pea       @m68kde~1_105.L
00002618  56AE      
0000261A  4E92      4088          jsr       (A2)
0000261C  584F      4089          addq.w    #4,A7
                    4090   ; printf("\r\n  C            - Copy Program from Flash to Main Memory");
0000261E  4879 0000 4091          pea       @m68kde~1_106.L
00002622  56E6      
00002624  4E92      4092          jsr       (A2)
00002626  584F      4093          addq.w    #4,A7
                    4094   ; printf("\r\n  D            - Dump Memory Contents to Screen");
00002628  4879 0000 4095          pea       @m68kde~1_107.L
0000262C  5720      
0000262E  4E92      4096          jsr       (A2)
00002630  584F      4097          addq.w    #4,A7
                    4098   ; printf("\r\n  E            - Enter String into Memory");
00002632  4879 0000 4099          pea       @m68kde~1_108.L
00002636  5752      
00002638  4E92      4100          jsr       (A2)
0000263A  584F      4101          addq.w    #4,A7
                    4102   ; printf("\r\n  F            - Fill Memory with Data");
0000263C  4879 0000 4103          pea       @m68kde~1_109.L
00002640  577E      
00002642  4E92      4104          jsr       (A2)
00002644  584F      4105          addq.w    #4,A7
                    4106   ; printf("\r\n  G            - Go Program Starting at Address: $%08X", PC);
00002646  2F39 0803 4107          move.l    _PC.L,-(A7)
0000264A  0120      
0000264C  4879 0000 4108          pea       @m68kde~1_110.L
00002650  57A8      
00002652  4E92      4109          jsr       (A2)
00002654  504F      4110          addq.w    #8,A7
                    4111   ; printf("\r\n  L            - Load Program (.HEX file) from Laptop");
00002656  4879 0000 4112          pea       @m68kde~1_111.L
0000265A  57E2      
0000265C  4E92      4113          jsr       (A2)
0000265E  584F      4114          addq.w    #4,A7
                    4115   ; printf("\r\n  M            - Memory Examine and Change");
00002660  4879 0000 4116          pea       @m68kde~1_112.L
00002664  581A      
00002666  4E92      4117          jsr       (A2)
00002668  584F      4118          addq.w    #4,A7
                    4119   ; printf("\r\n  P            - Program Flash Memory with User Program");
0000266A  4879 0000 4120          pea       @m68kde~1_113.L
0000266E  5848      
00002670  4E92      4121          jsr       (A2)
00002672  584F      4122          addq.w    #4,A7
                    4123   ; printf("\r\n  R            - Display 68000 Registers");
00002674  4879 0000 4124          pea       @m68kde~1_114.L
00002678  5882      
0000267A  4E92      4125          jsr       (A2)
0000267C  584F      4126          addq.w    #4,A7
                    4127   ; printf("\r\n  S            - Toggle ON/OFF Single Step Mode");
0000267E  4879 0000 4128          pea       @m68kde~1_115.L
00002682  58AE      
00002684  4E92      4129          jsr       (A2)
00002686  584F      4130          addq.w    #4,A7
                    4131   ; printf("\r\n  TM           - Test Memory");
00002688  4879 0000 4132          pea       @m68kde~1_116.L
0000268C  58E0      
0000268E  4E92      4133          jsr       (A2)
00002690  584F      4134          addq.w    #4,A7
                    4135   ; printf("\r\n  TS           - Test Switches: SW7-0");
00002692  4879 0000 4136          pea       @m68kde~1_117.L
00002696  5900      
00002698  4E92      4137          jsr       (A2)
0000269A  584F      4138          addq.w    #4,A7
                    4139   ; printf("\r\n  TD           - Test Displays: LEDs and 7-Segment");
0000269C  4879 0000 4140          pea       @m68kde~1_118.L
000026A0  5928      
000026A2  4E92      4141          jsr       (A2)
000026A4  584F      4142          addq.w    #4,A7
                    4143   ; printf("\r\n  WD/WS/WC/WK  - Watch Point: Display/Set/Clear/Kill");
000026A6  4879 0000 4144          pea       @m68kde~1_119.L
000026AA  595E      
000026AC  4E92      4145          jsr       (A2)
000026AE  584F      4146          addq.w    #4,A7
                    4147   ; printf(banner);
000026B0  2F02      4148          move.l    D2,-(A7)
000026B2  4E92      4149          jsr       (A2)
000026B4  584F      4150          addq.w    #4,A7
000026B6  4CDF 0404 4151          movem.l   (A7)+,D2/A2
000026BA  4E75      4152          rts
                    4153   ; }
                    4154   ; void menu(void)
                    4155   ; {
                    4156   _menu:
000026BC  48E7 303C 4157          movem.l   D2/D3/A2/A3/A4/A5,-(A7)
000026C0  45F9 0000 4158          lea       _printf.L,A2
000026C4  41E4      
000026C6  47F9 0803 4159          lea       _Trace.L,A3
000026CA  00D8      
000026CC  49F9 0803 4160          lea       _x.L,A4
000026D0  00C8      
000026D2  4BF9 0803 4161          lea       _SR.L,A5
000026D6  012C      
                    4162   ; char c, c1;
                    4163   ; while (1) {
                    4164   menu_1:
                    4165   ; FlushKeyboard();               // dump unread characters from keyboard
000026D8  4EB8 0BA6 4166          jsr       _FlushKeyboard
                    4167   ; printf("\r\n#");
000026DC  4879 0000 4168          pea       @m68kde~1_120.L
000026E0  5996      
000026E2  4E92      4169          jsr       (A2)
000026E4  584F      4170          addq.w    #4,A7
                    4171   ; c = toupper(_getch());
000026E6  2F00      4172          move.l    D0,-(A7)
000026E8  4EB8 0B68 4173          jsr       __getch
000026EC  2200      4174          move.l    D0,D1
000026EE  201F      4175          move.l    (A7)+,D0
000026F0  2F01      4176          move.l    D1,-(A7)
000026F2  4EB9 0000 4177          jsr       _toupper
000026F6  3922      
000026F8  584F      4178          addq.w    #4,A7
000026FA  1400      4179          move.b    D0,D2
                    4180   ; if (c == (char)('L'))                  // load s record file
000026FC  0C02 004C 4181          cmp.b     #76,D2
00002700  6608      4182          bne.s     menu_4
                    4183   ; Load_SRecordFile();
00002702  4EB8 0E36 4184          jsr       _Load_SRecordFile
00002706  6000 021E 4185          bra       menu_46
                    4186   menu_4:
                    4187   ; else if (c == (char)('D'))             // dump memory
0000270A  0C02 0044 4188          cmp.b     #68,D2
0000270E  6608      4189          bne.s     menu_6
                    4190   ; DumpMemory();
00002710  4EB8 0CCC 4191          jsr       _DumpMemory
00002714  6000 0210 4192          bra       menu_46
                    4193   menu_6:
                    4194   ; else if (c == (char)('E'))             // Enter String into memory
00002718  0C02 0045 4195          cmp.b     #69,D2
0000271C  660A      4196          bne.s     menu_8
                    4197   ; EnterString();
0000271E  4EB9 0000 4198          jsr       _EnterString
00002722  2A6E      
00002724  6000 0200 4199          bra       menu_46
                    4200   menu_8:
                    4201   ; else if (c == (char)('F'))             // fill memory
00002728  0C02 0046 4202          cmp.b     #70,D2
0000272C  6608      4203          bne.s     menu_10
                    4204   ; FillMemory();
0000272E  4EB8 0DBC 4205          jsr       _FillMemory
00002732  6000 01F2 4206          bra       menu_46
                    4207   menu_10:
                    4208   ; else if (c == (char)('G')) {           // go user program
00002736  0C02 0047 4209          cmp.b     #71,D2
0000273A  6626      4210          bne.s     menu_12
                    4211   ; printf("\r\nProgram Running.....");
0000273C  4879 0000 4212          pea       @m68kde~1_121.L
00002740  599A      
00002742  4E92      4213          jsr       (A2)
00002744  584F      4214          addq.w    #4,A7
                    4215   ; printf("\r\nPress <RESET> button <Key0> on DE1 to stop");
00002746  4879 0000 4216          pea       @m68kde~1_122.L
0000274A  59B2      
0000274C  4E92      4217          jsr       (A2)
0000274E  584F      4218          addq.w    #4,A7
                    4219   ; GoFlag = 1;
00002750  23FC 0000 4220          move.l    #1,_GoFlag.L
00002754  0001 0803 
00002758  00DC      
                    4221   ; go();
0000275A  4EB8 08B8 4222          jsr       _go
0000275E  6000 01C6 4223          bra       menu_46
                    4224   menu_12:
                    4225   ; }
                    4226   ; else if (c == (char)('M'))           // memory examine and modify
00002762  0C02 004D 4227          cmp.b     #77,D2
00002766  6608      4228          bne.s     menu_14
                    4229   ; MemoryChange();
00002768  4EB8 0FC4 4230          jsr       _MemoryChange
0000276C  6000 01B8 4231          bra       menu_46
                    4232   menu_14:
                    4233   ; else if (c == (char)('P'))            // Program Flash Chip
00002770  0C02 0050 4234          cmp.b     #80,D2
00002774  6608      4235          bne.s     menu_16
                    4236   ; ProgramFlashChip();
00002776  4EB8 149A 4237          jsr       _ProgramFlashChip
0000277A  6000 01AA 4238          bra       menu_46
                    4239   menu_16:
                    4240   ; else if (c == (char)('C'))             // copy flash chip to ram and go
0000277E  0C02 0043 4241          cmp.b     #67,D2
00002782  6608      4242          bne.s     menu_18
                    4243   ; LoadFromFlashChip();
00002784  4EB8 1576 4244          jsr       _LoadFromFlashChip
00002788  6000 019C 4245          bra       menu_46
                    4246   menu_18:
                    4247   ; else if (c == (char)('R'))             // dump registers
0000278C  0C02 0052 4248          cmp.b     #82,D2
00002790  6608      4249          bne.s     menu_20
                    4250   ; DumpRegisters();
00002792  4EB8 1624 4251          jsr       _DumpRegisters
00002796  6000 018E 4252          bra       menu_46
                    4253   menu_20:
                    4254   ; else if (c == (char)('.'))           // change registers
0000279A  0C02 002E 4255          cmp.b     #46,D2
0000279E  6608      4256          bne.s     menu_22
                    4257   ; ChangeRegisters();
000027A0  4EB8 1B16 4258          jsr       _ChangeRegisters
000027A4  6000 0180 4259          bra       menu_46
                    4260   menu_22:
                    4261   ; else if (c == (char)('B'))              // breakpoint command
000027A8  0C02 0042 4262          cmp.b     #66,D2
000027AC  6608      4263          bne.s     menu_24
                    4264   ; Breakpoint();
000027AE  4EB8 24EA 4265          jsr       _Breakpoint
000027B2  6000 0172 4266          bra       menu_46
                    4267   menu_24:
                    4268   ; else if (c == (char)('T')) {          // Test command
000027B6  0C02 0054 4269          cmp.b     #84,D2
000027BA  6600 0046 4270          bne       menu_26
                    4271   ; c1 = toupper(_getch());
000027BE  2F00      4272          move.l    D0,-(A7)
000027C0  4EB8 0B68 4273          jsr       __getch
000027C4  2200      4274          move.l    D0,D1
000027C6  201F      4275          move.l    (A7)+,D0
000027C8  2F01      4276          move.l    D1,-(A7)
000027CA  4EB9 0000 4277          jsr       _toupper
000027CE  3922      
000027D0  584F      4278          addq.w    #4,A7
000027D2  1600      4279          move.b    D0,D3
                    4280   ; if (c1 == (char)('M'))                    // memory test
000027D4  0C03 004D 4281          cmp.b     #77,D3
000027D8  6608      4282          bne.s     menu_28
                    4283   ; MemoryTest();
000027DA  4EB9 0000 4284          jsr       _MemoryTest
000027DE  2FBA      
000027E0  601C      4285          bra.s     menu_33
                    4286   menu_28:
                    4287   ; else if (c1 == (char)('S'))              // Switch Test command
000027E2  0C03 0053 4288          cmp.b     #83,D3
000027E6  6606      4289          bne.s     menu_30
                    4290   ; SwitchTest();
000027E8  4EB8 0AA4 4291          jsr       _SwitchTest
000027EC  6010      4292          bra.s     menu_33
                    4293   menu_30:
                    4294   ; else if (c1 == (char)('D'))              // display Test command
000027EE  0C03 0044 4295          cmp.b     #68,D3
000027F2  6606      4296          bne.s     menu_32
                    4297   ; TestLEDS();
000027F4  4EB8 0A50 4298          jsr       _TestLEDS
000027F8  6004      4299          bra.s     menu_33
                    4300   menu_32:
                    4301   ; else
                    4302   ; UnknownCommand();
000027FA  4EB8 24BE 4303          jsr       _UnknownCommand
                    4304   menu_33:
000027FE  6000 0126 4305          bra       menu_46
                    4306   menu_26:
                    4307   ; }
                    4308   ; else if (c == (char)(' ')) {             // Next instruction command
00002802  0C02 0020 4309          cmp.b     #32,D2
00002806  6636      4310          bne.s     menu_34
                    4311   ; DisableBreakPoints();
00002808  4EB8 20CE 4312          jsr       _DisableBreakPoints
                    4313   ; if (Trace == 1 && GoFlag == 1) {    // if the program is running and trace mode on then 'N' is valid
0000280C  2013      4314          move.l    (A3),D0
0000280E  0C80 0000 4315          cmp.l     #1,D0
00002812  0001      
00002814  661A      4316          bne.s     menu_36
00002816  2039 0803 4317          move.l    _GoFlag.L,D0
0000281A  00DC      
0000281C  0C80 0000 4318          cmp.l     #1,D0
00002820  0001      
00002822  660C      4319          bne.s     menu_36
                    4320   ; TraceException = 1;             // generate a trace exception for the next instruction if user wants to single step though next instruction
00002824  13FC 0001 4321          move.b    #1,4194314
00002828  0040 000A 
                    4322   ; return;
0000282C  6000 00FC 4323          bra       menu_38
                    4324   menu_36:
                    4325   ; }
                    4326   ; else
                    4327   ; printf("\r\nError: Press 'G' first to start program");
00002830  4879 0000 4328          pea       @m68kde~1_123.L
00002834  59E0      
00002836  4E92      4329          jsr       (A2)
00002838  584F      4330          addq.w    #4,A7
0000283A  6000 00EA 4331          bra       menu_46
                    4332   menu_34:
                    4333   ; }
                    4334   ; else if (c == (char)('S')) {             // single step
0000283E  0C02 0053 4335          cmp.b     #83,D2
00002842  6600 008C 4336          bne       menu_39
                    4337   ; if (Trace == 0) {
00002846  2013      4338          move.l    (A3),D0
00002848  6600 0050 4339          bne       menu_41
                    4340   ; DisableBreakPoints();
0000284C  4EB8 20CE 4341          jsr       _DisableBreakPoints
                    4342   ; printf("\r\nSingle Step  :[ON]");
00002850  4879 0000 4343          pea       @m68kde~1_124.L
00002854  5A0A      
00002856  4E92      4344          jsr       (A2)
00002858  584F      4345          addq.w    #4,A7
                    4346   ; printf("\r\nBreak Points :[Disabled]");
0000285A  4879 0000 4347          pea       @m68kde~1_57.L
0000285E  50A8      
00002860  4E92      4348          jsr       (A2)
00002862  584F      4349          addq.w    #4,A7
                    4350   ; SR = SR | (unsigned short int)(0x8000);    // set T bit in status register
00002864  0055 8000 4351          or.w      #32768,(A5)
                    4352   ; printf("\r\nPress 'G' to Trace Program from address $%08x.....", PC);
00002868  2F39 0803 4353          move.l    _PC.L,-(A7)
0000286C  0120      
0000286E  4879 0000 4354          pea       @m68kde~1_125.L
00002872  5A20      
00002874  4E92      4355          jsr       (A2)
00002876  504F      4356          addq.w    #8,A7
                    4357   ; printf("\r\nPush <RESET Button> to Stop.....");
00002878  4879 0000 4358          pea       @m68kde~1_126.L
0000287C  5A56      
0000287E  4E92      4359          jsr       (A2)
00002880  584F      4360          addq.w    #4,A7
                    4361   ; DumpRegisters();
00002882  4EB8 1624 4362          jsr       _DumpRegisters
                    4363   ; Trace = 1;
00002886  26BC 0000 4364          move.l    #1,(A3)
0000288A  0001      
                    4365   ; TraceException = 1;
0000288C  13FC 0001 4366          move.b    #1,4194314
00002890  0040 000A 
                    4367   ; x = *(unsigned int*)(0x00000074);       // simulate responding to a Level 5 IRQ by reading vector to reset Trace exception generator
00002894  28B8 0074 4368          move.l    116,(A4)
00002898  6032      4369          bra.s     menu_42
                    4370   menu_41:
                    4371   ; }
                    4372   ; else {
                    4373   ; Trace = 0;
0000289A  4293      4374          clr.l     (A3)
                    4375   ; TraceException = 0;
0000289C  4239 0040 4376          clr.b     4194314
000028A0  000A      
                    4377   ; x = *(unsigned int*)(0x00000074);       // simulate responding to a Level 5 IRQ by reading vector to reset Trace exception generator
000028A2  28B8 0074 4378          move.l    116,(A4)
                    4379   ; EnableBreakPoints();
000028A6  4EB8 2122 4380          jsr       _EnableBreakPoints
                    4381   ; SR = SR & (unsigned short int)(0x7FFF);    // clear T bit in status register
000028AA  0255 7FFF 4382          and.w     #32767,(A5)
                    4383   ; printf("\r\nSingle Step : [OFF]");
000028AE  4879 0000 4384          pea       @m68kde~1_127.L
000028B2  5A7A      
000028B4  4E92      4385          jsr       (A2)
000028B6  584F      4386          addq.w    #4,A7
                    4387   ; printf("\r\nBreak Points :[Enabled]");
000028B8  4879 0000 4388          pea       @m68kde~1_128.L
000028BC  5A90      
000028BE  4E92      4389          jsr       (A2)
000028C0  584F      4390          addq.w    #4,A7
                    4391   ; printf("\r\nPress <ESC> to Resume User Program.....");
000028C2  4879 0000 4392          pea       @m68kde~1_129.L
000028C6  5AAA      
000028C8  4E92      4393          jsr       (A2)
000028CA  584F      4394          addq.w    #4,A7
                    4395   menu_42:
000028CC  6000 0058 4396          bra       menu_46
                    4397   menu_39:
                    4398   ; }
                    4399   ; }
                    4400   ; else if (c == (char)(0x1b)) {   // if user choses to end trace and run program
000028D0  0C02 001B 4401          cmp.b     #27,D2
000028D4  6600 0040 4402          bne       menu_43
                    4403   ; Trace = 0;
000028D8  4293      4404          clr.l     (A3)
                    4405   ; TraceException = 0;
000028DA  4239 0040 4406          clr.b     4194314
000028DE  000A      
                    4407   ; x = *(unsigned int*)(0x00000074);   // read IRQ 5 vector to reset trace vector generator
000028E0  28B8 0074 4408          move.l    116,(A4)
                    4409   ; EnableBreakPoints();
000028E4  4EB8 2122 4410          jsr       _EnableBreakPoints
                    4411   ; SR = SR & (unsigned short int)(0x7FFF);    // clear T bit in status register
000028E8  0255 7FFF 4412          and.w     #32767,(A5)
                    4413   ; printf("\r\nSingle Step  :[OFF]");
000028EC  4879 0000 4414          pea       @m68kde~1_130.L
000028F0  5AD4      
000028F2  4E92      4415          jsr       (A2)
000028F4  584F      4416          addq.w    #4,A7
                    4417   ; printf("\r\nBreak Points :[Enabled]");
000028F6  4879 0000 4418          pea       @m68kde~1_128.L
000028FA  5A90      
000028FC  4E92      4419          jsr       (A2)
000028FE  584F      4420          addq.w    #4,A7
                    4421   ; printf("\r\nProgram Running.....");
00002900  4879 0000 4422          pea       @m68kde~1_121.L
00002904  599A      
00002906  4E92      4423          jsr       (A2)
00002908  584F      4424          addq.w    #4,A7
                    4425   ; printf("\r\nPress <RESET> button <Key0> on DE1 to stop");
0000290A  4879 0000 4426          pea       @m68kde~1_122.L
0000290E  59B2      
00002910  4E92      4427          jsr       (A2)
00002912  584F      4428          addq.w    #4,A7
                    4429   ; return;
00002914  6014      4430          bra.s     menu_38
                    4431   menu_43:
                    4432   ; }
                    4433   ; else if (c == (char)('W'))              // Watchpoint command
00002916  0C02 0057 4434          cmp.b     #87,D2
0000291A  6606      4435          bne.s     menu_45
                    4436   ; Watchpoint();
0000291C  4EB8 2566 4437          jsr       _Watchpoint
00002920  6004      4438          bra.s     menu_46
                    4439   menu_45:
                    4440   ; else
                    4441   ; UnknownCommand();
00002922  4EB8 24BE 4442          jsr       _UnknownCommand
                    4443   menu_46:
00002926  6000 FDB0 4444          bra       menu_1
                    4445   menu_38:
0000292A  4CDF 3C0C 4446          movem.l   (A7)+,D2/D3/A2/A3/A4/A5
0000292E  4E75      4447          rts
                    4448   ; }
                    4449   ; }
                    4450   ; void PrintErrorMessageandAbort(char* string) {
                    4451   _PrintErrorMessageandAbort:
00002930  4E56 0000 4452          link      A6,#0
                    4453   ; printf("\r\n\r\nProgram ABORT !!!!!!\r\n");
00002934  4879 0000 4454          pea       @m68kde~1_131.L
00002938  5AEA      
0000293A  4EB9 0000 4455          jsr       _printf
0000293E  41E4      
00002940  584F      4456          addq.w    #4,A7
                    4457   ; printf("%s\r\n", string);
00002942  2F2E 0008 4458          move.l    8(A6),-(A7)
00002946  4879 0000 4459          pea       @m68kde~1_132.L
0000294A  5B06      
0000294C  4EB9 0000 4460          jsr       _printf
00002950  41E4      
00002952  504F      4461          addq.w    #8,A7
                    4462   ; menu();
00002954  4EB8 26BC 4463          jsr       _menu
00002958  4E5E      4464          unlk      A6
0000295A  4E75      4465          rts
                    4466   ; }
                    4467   ; void IRQMessage(int level) {
                    4468   _IRQMessage:
0000295C  4E56 0000 4469          link      A6,#0
                    4470   ; printf("\r\n\r\nProgram ABORT !!!!!");
00002960  4879 0000 4471          pea       @m68kde~1_133.L
00002964  5B0C      
00002966  4EB9 0000 4472          jsr       _printf
0000296A  41E4      
0000296C  584F      4473          addq.w    #4,A7
                    4474   ; printf("\r\nUnhandled Interrupt: IRQ%d !!!!!", level);
0000296E  2F2E 0008 4475          move.l    8(A6),-(A7)
00002972  4879 0000 4476          pea       @m68kde~1_134.L
00002976  5B24      
00002978  4EB9 0000 4477          jsr       _printf
0000297C  41E4      
0000297E  504F      4478          addq.w    #8,A7
                    4479   ; menu();
00002980  4EB8 26BC 4480          jsr       _menu
00002984  4E5E      4481          unlk      A6
00002986  4E75      4482          rts
                    4483   ; }
                    4484   ; void UnhandledIRQ1(void) {
                    4485   _UnhandledIRQ1:
                    4486   ; IRQMessage(1);
00002988  4878 0001 4487          pea       1
0000298C  4EB8 295C 4488          jsr       _IRQMessage
00002990  584F      4489          addq.w    #4,A7
00002992  4E75      4490          rts
                    4491   ; }
                    4492   ; void UnhandledIRQ2(void) {
                    4493   _UnhandledIRQ2:
                    4494   ; IRQMessage(2);
00002994  4878 0002 4495          pea       2
00002998  4EB8 295C 4496          jsr       _IRQMessage
0000299C  584F      4497          addq.w    #4,A7
0000299E  4E75      4498          rts
                    4499   ; }
                    4500   ; void UnhandledIRQ3(void) {
                    4501   _UnhandledIRQ3:
                    4502   ; IRQMessage(3);
000029A0  4878 0003 4503          pea       3
000029A4  4EB8 295C 4504          jsr       _IRQMessage
000029A8  584F      4505          addq.w    #4,A7
000029AA  4E75      4506          rts
                    4507   ; }
                    4508   ; void UnhandledIRQ4(void) {
                    4509   _UnhandledIRQ4:
                    4510   ; IRQMessage(4);
000029AC  4878 0004 4511          pea       4
000029B0  4EB8 295C 4512          jsr       _IRQMessage
000029B4  584F      4513          addq.w    #4,A7
000029B6  4E75      4514          rts
                    4515   ; }
                    4516   ; void UnhandledIRQ5(void) {
                    4517   _UnhandledIRQ5:
                    4518   ; IRQMessage(5);
000029B8  4878 0005 4519          pea       5
000029BC  4EB8 295C 4520          jsr       _IRQMessage
000029C0  584F      4521          addq.w    #4,A7
000029C2  4E75      4522          rts
                    4523   ; }
                    4524   ; void UnhandledIRQ6(void) {
                    4525   _UnhandledIRQ6:
                    4526   ; PrintErrorMessageandAbort("ADDRESS ERROR: 16 or 32 Bit Transfer to/from an ODD Address....");
000029C4  4879 0000 4527          pea       @m68kde~1_135.L
000029C8  5B48      
000029CA  4EB8 2930 4528          jsr       _PrintErrorMessageandAbort
000029CE  584F      4529          addq.w    #4,A7
                    4530   ; menu();
000029D0  4EB8 26BC 4531          jsr       _menu
000029D4  4E75      4532          rts
                    4533   ; }
                    4534   ; void UnhandledIRQ7(void) {
                    4535   _UnhandledIRQ7:
                    4536   ; IRQMessage(7);
000029D6  4878 0007 4537          pea       7
000029DA  4EB8 295C 4538          jsr       _IRQMessage
000029DE  584F      4539          addq.w    #4,A7
000029E0  4E75      4540          rts
                    4541   ; }
                    4542   ; void UnhandledTrap(void) {
                    4543   _UnhandledTrap:
                    4544   ; PrintErrorMessageandAbort("Unhandled Trap !!!!!");
000029E2  4879 0000 4545          pea       @m68kde~1_136.L
000029E6  5B88      
000029E8  4EB8 2930 4546          jsr       _PrintErrorMessageandAbort
000029EC  584F      4547          addq.w    #4,A7
000029EE  4E75      4548          rts
                    4549   ; }
                    4550   ; void BusError() {
                    4551   _BusError:
                    4552   ; PrintErrorMessageandAbort("BUS Error!");
000029F0  4879 0000 4553          pea       @m68kde~1_137.L
000029F4  5B9E      
000029F6  4EB8 2930 4554          jsr       _PrintErrorMessageandAbort
000029FA  584F      4555          addq.w    #4,A7
000029FC  4E75      4556          rts
                    4557   ; }
                    4558   ; void AddressError() {
                    4559   _AddressError:
                    4560   ; PrintErrorMessageandAbort("ADDRESS Error!");
000029FE  4879 0000 4561          pea       @m68kde~1_138.L
00002A02  5BAA      
00002A04  4EB8 2930 4562          jsr       _PrintErrorMessageandAbort
00002A08  584F      4563          addq.w    #4,A7
00002A0A  4E75      4564          rts
                    4565   ; }
                    4566   ; void IllegalInstruction() {
                    4567   _IllegalInstruction:
                    4568   ; PrintErrorMessageandAbort("ILLEGAL INSTRUCTION");
00002A0C  4879 0000 4569          pea       @m68kde~1_139.L
00002A10  5BBA      
00002A12  4EB8 2930 4570          jsr       _PrintErrorMessageandAbort
00002A16  584F      4571          addq.w    #4,A7
00002A18  4E75      4572          rts
                    4573   ; }
                    4574   ; void Dividebyzero() {
                    4575   _Dividebyzero:
                    4576   ; PrintErrorMessageandAbort("DIVIDE BY ZERO");
00002A1A  4879 0000 4577          pea       @m68kde~1_140.L
00002A1E  5BCE      
00002A20  4EB8 2930 4578          jsr       _PrintErrorMessageandAbort
00002A24  584F      4579          addq.w    #4,A7
00002A26  4E75      4580          rts
                    4581   ; }
                    4582   ; void Check() {
                    4583   _Check:
                    4584   ; PrintErrorMessageandAbort("'CHK' INSTRUCTION");
00002A28  4879 0000 4585          pea       @m68kde~1_141.L
00002A2C  5BDE      
00002A2E  4EB8 2930 4586          jsr       _PrintErrorMessageandAbort
00002A32  584F      4587          addq.w    #4,A7
00002A34  4E75      4588          rts
                    4589   ; }
                    4590   ; void Trapv() {
                    4591   _Trapv:
                    4592   ; PrintErrorMessageandAbort("TRAPV INSTRUCTION");
00002A36  4879 0000 4593          pea       @m68kde~1_142.L
00002A3A  5BF0      
00002A3C  4EB8 2930 4594          jsr       _PrintErrorMessageandAbort
00002A40  584F      4595          addq.w    #4,A7
00002A42  4E75      4596          rts
                    4597   ; }
                    4598   ; void PrivError() {
                    4599   _PrivError:
                    4600   ; PrintErrorMessageandAbort("PRIVILEGE VIOLATION");
00002A44  4879 0000 4601          pea       @m68kde~1_143.L
00002A48  5C02      
00002A4A  4EB8 2930 4602          jsr       _PrintErrorMessageandAbort
00002A4E  584F      4603          addq.w    #4,A7
00002A50  4E75      4604          rts
                    4605   ; }
                    4606   ; void UnitIRQ() {
                    4607   _UnitIRQ:
                    4608   ; PrintErrorMessageandAbort("UNINITIALISED IRQ");
00002A52  4879 0000 4609          pea       @m68kde~1_144.L
00002A56  5C16      
00002A58  4EB8 2930 4610          jsr       _PrintErrorMessageandAbort
00002A5C  584F      4611          addq.w    #4,A7
00002A5E  4E75      4612          rts
                    4613   ; }
                    4614   ; void Spurious() {
                    4615   _Spurious:
                    4616   ; PrintErrorMessageandAbort("SPURIOUS IRQ");
00002A60  4879 0000 4617          pea       @m68kde~1_145.L
00002A64  5C28      
00002A66  4EB8 2930 4618          jsr       _PrintErrorMessageandAbort
00002A6A  584F      4619          addq.w    #4,A7
00002A6C  4E75      4620          rts
                    4621   ; }
                    4622   ; void EnterString(void)
                    4623   ; {
                    4624   _EnterString:
00002A6E  4E56 FFFC 4625          link      A6,#-4
00002A72  2F02      4626          move.l    D2,-(A7)
                    4627   ; unsigned char* Start;
                    4628   ; unsigned char c;
                    4629   ; printf("\r\nStart Address in Memory: ");
00002A74  4879 0000 4630          pea       @m68kde~1_146.L
00002A78  5C36      
00002A7A  4EB9 0000 4631          jsr       _printf
00002A7E  41E4      
00002A80  584F      4632          addq.w    #4,A7
                    4633   ; Start = Get8HexDigits(0);
00002A82  42A7      4634          clr.l     -(A7)
00002A84  4EB8 0CA4 4635          jsr       _Get8HexDigits
00002A88  584F      4636          addq.w    #4,A7
00002A8A  2400      4637          move.l    D0,D2
                    4638   ; printf("\r\nEnter String (ESC to end) :");
00002A8C  4879 0000 4639          pea       @m68kde~1_147.L
00002A90  5C52      
00002A92  4EB9 0000 4640          jsr       _printf
00002A96  41E4      
00002A98  584F      4641          addq.w    #4,A7
                    4642   ; while ((c = getchar()) != 0x1b)
                    4643   EnterString_1:
00002A9A  4EB9 0000 4644          jsr       _getch
00002A9E  3870      
00002AA0  1D40 FFFF 4645          move.b    D0,-1(A6)
00002AA4  0C00 001B 4646          cmp.b     #27,D0
00002AA8  670A      4647          beq.s     EnterString_3
                    4648   ; *Start++ = c;
00002AAA  2042      4649          move.l    D2,A0
00002AAC  5282      4650          addq.l    #1,D2
00002AAE  10AE FFFF 4651          move.b    -1(A6),(A0)
00002AB2  60E6      4652          bra       EnterString_1
                    4653   EnterString_3:
                    4654   ; *Start = 0x00;  // terminate with a null
00002AB4  2042      4655          move.l    D2,A0
00002AB6  4210      4656          clr.b     (A0)
00002AB8  241F      4657          move.l    (A7)+,D2
00002ABA  4E5E      4658          unlk      A6
00002ABC  4E75      4659          rts
                    4660   ; }
                    4661   ; // Memory test helper functions
                    4662   ; int Get2HexDigitsForMemTest(char pat)
                    4663   ; {
                    4664   _Get2HexDigitsForMemTest:
00002ABE  4E56 0000 4665          link      A6,#0
                    4666   ; return (xtod(pat) << 4) | (xtod(pat));
00002AC2  122E 000B 4667          move.b    11(A6),D1
00002AC6  4881      4668          ext.w     D1
00002AC8  48C1      4669          ext.l     D1
00002ACA  2F01      4670          move.l    D1,-(A7)
00002ACC  4EB8 0BD2 4671          jsr       _xtod
00002AD0  584F      4672          addq.w    #4,A7
00002AD2  C0BC 0000 4673          and.l     #255,D0
00002AD6  00FF      
00002AD8  E980      4674          asl.l     #4,D0
00002ADA  2F00      4675          move.l    D0,-(A7)
00002ADC  102E 000B 4676          move.b    11(A6),D0
00002AE0  4880      4677          ext.w     D0
00002AE2  48C0      4678          ext.l     D0
00002AE4  2F00      4679          move.l    D0,-(A7)
00002AE6  4EB8 0BD2 4680          jsr       _xtod
00002AEA  584F      4681          addq.w    #4,A7
00002AEC  2200      4682          move.l    D0,D1
00002AEE  201F      4683          move.l    (A7)+,D0
00002AF0  C2BC 0000 4684          and.l     #255,D1
00002AF4  00FF      
00002AF6  8081      4685          or.l      D1,D0
00002AF8  4E5E      4686          unlk      A6
00002AFA  4E75      4687          rts
                    4688   ; }
                    4689   ; int Get4HexDigitsForMemTest(char pat)
                    4690   ; {
                    4691   _Get4HexDigitsForMemTest:
00002AFC  4E56 0000 4692          link      A6,#0
00002B00  2F02      4693          move.l    D2,-(A7)
00002B02  142E 000B 4694          move.b    11(A6),D2
00002B06  4882      4695          ext.w     D2
00002B08  48C2      4696          ext.l     D2
                    4697   ; return (xtod(pat) << 12) | (xtod(pat) << 8) | (Get2HexDigitsForMemTest(pat));
00002B0A  4882      4698          ext.w     D2
00002B0C  48C2      4699          ext.l     D2
00002B0E  2F02      4700          move.l    D2,-(A7)
00002B10  4EB8 0BD2 4701          jsr       _xtod
00002B14  584F      4702          addq.w    #4,A7
00002B16  E100      4703          asl.b     #8,D0
00002B18  E900      4704          asl.b     #4,D0
00002B1A  2F00      4705          move.l    D0,-(A7)
00002B1C  4882      4706          ext.w     D2
00002B1E  48C2      4707          ext.l     D2
00002B20  2F02      4708          move.l    D2,-(A7)
00002B22  4EB8 0BD2 4709          jsr       _xtod
00002B26  584F      4710          addq.w    #4,A7
00002B28  2200      4711          move.l    D0,D1
00002B2A  201F      4712          move.l    (A7)+,D0
00002B2C  E101      4713          asl.b     #8,D1
00002B2E  8001      4714          or.b      D1,D0
00002B30  4880      4715          ext.w     D0
00002B32  48C0      4716          ext.l     D0
00002B34  2F00      4717          move.l    D0,-(A7)
00002B36  4882      4718          ext.w     D2
00002B38  48C2      4719          ext.l     D2
00002B3A  2F02      4720          move.l    D2,-(A7)
00002B3C  4EB8 2ABE 4721          jsr       _Get2HexDigitsForMemTest
00002B40  584F      4722          addq.w    #4,A7
00002B42  2200      4723          move.l    D0,D1
00002B44  201F      4724          move.l    (A7)+,D0
00002B46  8081      4725          or.l      D1,D0
00002B48  241F      4726          move.l    (A7)+,D2
00002B4A  4E5E      4727          unlk      A6
00002B4C  4E75      4728          rts
                    4729   ; }
                    4730   ; int Get8HexDigitsForMemTest(char pat)
                    4731   ; {
                    4732   _Get8HexDigitsForMemTest:
00002B4E  4E56 0000 4733          link      A6,#0
00002B52  48E7 2020 4734          movem.l   D2/A2,-(A7)
00002B56  142E 000B 4735          move.b    11(A6),D2
00002B5A  4882      4736          ext.w     D2
00002B5C  48C2      4737          ext.l     D2
00002B5E  45F8 0BD2 4738          lea       _xtod.L,A2
                    4739   ; return  (xtod(pat) << 28) | (xtod(pat) << 24) | (xtod(pat) << 20) | (xtod(pat) << 16) | (Get4HexDigitsForMemTest(pat));
00002B62  4882      4740          ext.w     D2
00002B64  48C2      4741          ext.l     D2
00002B66  2F02      4742          move.l    D2,-(A7)
00002B68  4E92      4743          jsr       (A2)
00002B6A  584F      4744          addq.w    #4,A7
00002B6C  E100      4745          asl.b     #8,D0
00002B6E  E100      4746          asl.b     #8,D0
00002B70  E100      4747          asl.b     #8,D0
00002B72  E900      4748          asl.b     #4,D0
00002B74  2F00      4749          move.l    D0,-(A7)
00002B76  4882      4750          ext.w     D2
00002B78  48C2      4751          ext.l     D2
00002B7A  2F02      4752          move.l    D2,-(A7)
00002B7C  4E92      4753          jsr       (A2)
00002B7E  584F      4754          addq.w    #4,A7
00002B80  2200      4755          move.l    D0,D1
00002B82  201F      4756          move.l    (A7)+,D0
00002B84  E101      4757          asl.b     #8,D1
00002B86  E101      4758          asl.b     #8,D1
00002B88  E101      4759          asl.b     #8,D1
00002B8A  8001      4760          or.b      D1,D0
00002B8C  2F00      4761          move.l    D0,-(A7)
00002B8E  4882      4762          ext.w     D2
00002B90  48C2      4763          ext.l     D2
00002B92  2F02      4764          move.l    D2,-(A7)
00002B94  4E92      4765          jsr       (A2)
00002B96  584F      4766          addq.w    #4,A7
00002B98  2200      4767          move.l    D0,D1
00002B9A  201F      4768          move.l    (A7)+,D0
00002B9C  E101      4769          asl.b     #8,D1
00002B9E  E101      4770          asl.b     #8,D1
00002BA0  E901      4771          asl.b     #4,D1
00002BA2  8001      4772          or.b      D1,D0
00002BA4  2F00      4773          move.l    D0,-(A7)
00002BA6  4882      4774          ext.w     D2
00002BA8  48C2      4775          ext.l     D2
00002BAA  2F02      4776          move.l    D2,-(A7)
00002BAC  4E92      4777          jsr       (A2)
00002BAE  584F      4778          addq.w    #4,A7
00002BB0  2200      4779          move.l    D0,D1
00002BB2  201F      4780          move.l    (A7)+,D0
00002BB4  E101      4781          asl.b     #8,D1
00002BB6  E101      4782          asl.b     #8,D1
00002BB8  8001      4783          or.b      D1,D0
00002BBA  4880      4784          ext.w     D0
00002BBC  48C0      4785          ext.l     D0
00002BBE  2F00      4786          move.l    D0,-(A7)
00002BC0  4882      4787          ext.w     D2
00002BC2  48C2      4788          ext.l     D2
00002BC4  2F02      4789          move.l    D2,-(A7)
00002BC6  4EB8 2AFC 4790          jsr       _Get4HexDigitsForMemTest
00002BCA  584F      4791          addq.w    #4,A7
00002BCC  2200      4792          move.l    D0,D1
00002BCE  201F      4793          move.l    (A7)+,D0
00002BD0  8081      4794          or.l      D1,D0
00002BD2  4CDF 0404 4795          movem.l   (A7)+,D2/A2
00002BD6  4E5E      4796          unlk      A6
00002BD8  4E75      4797          rts
                    4798   ; }
                    4799   ; int Get7HexDigitsForMemTest(char one, char two, char three, char four, char five, char six, char seven)
                    4800   ; {
                    4801   _Get7HexDigitsForMemTest:
00002BDA  4E56 0000 4802          link      A6,#0
00002BDE  2F0A      4803          move.l    A2,-(A7)
00002BE0  45F8 0BD2 4804          lea       _xtod.L,A2
                    4805   ; return (xtod(one) << 24) | (xtod(two) << 20) | (xtod(three) << 16) | (xtod(four) << 12) | (xtod(five) << 8) | (xtod(six) << 4) | (xtod(seven));
00002BE4  122E 000B 4806          move.b    11(A6),D1
00002BE8  4881      4807          ext.w     D1
00002BEA  48C1      4808          ext.l     D1
00002BEC  2F01      4809          move.l    D1,-(A7)
00002BEE  4E92      4810          jsr       (A2)
00002BF0  584F      4811          addq.w    #4,A7
00002BF2  C0BC 0000 4812          and.l     #255,D0
00002BF6  00FF      
00002BF8  E180      4813          asl.l     #8,D0
00002BFA  E180      4814          asl.l     #8,D0
00002BFC  E180      4815          asl.l     #8,D0
00002BFE  2F00      4816          move.l    D0,-(A7)
00002C00  102E 000F 4817          move.b    15(A6),D0
00002C04  4880      4818          ext.w     D0
00002C06  48C0      4819          ext.l     D0
00002C08  2F00      4820          move.l    D0,-(A7)
00002C0A  4E92      4821          jsr       (A2)
00002C0C  584F      4822          addq.w    #4,A7
00002C0E  2200      4823          move.l    D0,D1
00002C10  201F      4824          move.l    (A7)+,D0
00002C12  C2BC 0000 4825          and.l     #255,D1
00002C16  00FF      
00002C18  E181      4826          asl.l     #8,D1
00002C1A  E181      4827          asl.l     #8,D1
00002C1C  E981      4828          asl.l     #4,D1
00002C1E  8081      4829          or.l      D1,D0
00002C20  2F00      4830          move.l    D0,-(A7)
00002C22  102E 0013 4831          move.b    19(A6),D0
00002C26  4880      4832          ext.w     D0
00002C28  48C0      4833          ext.l     D0
00002C2A  2F00      4834          move.l    D0,-(A7)
00002C2C  4E92      4835          jsr       (A2)
00002C2E  584F      4836          addq.w    #4,A7
00002C30  2200      4837          move.l    D0,D1
00002C32  201F      4838          move.l    (A7)+,D0
00002C34  C2BC 0000 4839          and.l     #255,D1
00002C38  00FF      
00002C3A  E181      4840          asl.l     #8,D1
00002C3C  E181      4841          asl.l     #8,D1
00002C3E  8081      4842          or.l      D1,D0
00002C40  2F00      4843          move.l    D0,-(A7)
00002C42  102E 0017 4844          move.b    23(A6),D0
00002C46  4880      4845          ext.w     D0
00002C48  48C0      4846          ext.l     D0
00002C4A  2F00      4847          move.l    D0,-(A7)
00002C4C  4E92      4848          jsr       (A2)
00002C4E  584F      4849          addq.w    #4,A7
00002C50  2200      4850          move.l    D0,D1
00002C52  201F      4851          move.l    (A7)+,D0
00002C54  C2BC 0000 4852          and.l     #255,D1
00002C58  00FF      
00002C5A  E181      4853          asl.l     #8,D1
00002C5C  E981      4854          asl.l     #4,D1
00002C5E  8081      4855          or.l      D1,D0
00002C60  2F00      4856          move.l    D0,-(A7)
00002C62  102E 001B 4857          move.b    27(A6),D0
00002C66  4880      4858          ext.w     D0
00002C68  48C0      4859          ext.l     D0
00002C6A  2F00      4860          move.l    D0,-(A7)
00002C6C  4E92      4861          jsr       (A2)
00002C6E  584F      4862          addq.w    #4,A7
00002C70  2200      4863          move.l    D0,D1
00002C72  201F      4864          move.l    (A7)+,D0
00002C74  C2BC 0000 4865          and.l     #255,D1
00002C78  00FF      
00002C7A  E181      4866          asl.l     #8,D1
00002C7C  8081      4867          or.l      D1,D0
00002C7E  2F00      4868          move.l    D0,-(A7)
00002C80  102E 001F 4869          move.b    31(A6),D0
00002C84  4880      4870          ext.w     D0
00002C86  48C0      4871          ext.l     D0
00002C88  2F00      4872          move.l    D0,-(A7)
00002C8A  4E92      4873          jsr       (A2)
00002C8C  584F      4874          addq.w    #4,A7
00002C8E  2200      4875          move.l    D0,D1
00002C90  201F      4876          move.l    (A7)+,D0
00002C92  C2BC 0000 4877          and.l     #255,D1
00002C96  00FF      
00002C98  E981      4878          asl.l     #4,D1
00002C9A  8081      4879          or.l      D1,D0
00002C9C  2F00      4880          move.l    D0,-(A7)
00002C9E  102E 0023 4881          move.b    35(A6),D0
00002CA2  4880      4882          ext.w     D0
00002CA4  48C0      4883          ext.l     D0
00002CA6  2F00      4884          move.l    D0,-(A7)
00002CA8  4E92      4885          jsr       (A2)
00002CAA  584F      4886          addq.w    #4,A7
00002CAC  2200      4887          move.l    D0,D1
00002CAE  201F      4888          move.l    (A7)+,D0
00002CB0  C2BC 0000 4889          and.l     #255,D1
00002CB4  00FF      
00002CB6  8081      4890          or.l      D1,D0
00002CB8  245F      4891          move.l    (A7)+,A2
00002CBA  4E5E      4892          unlk      A6
00002CBC  4E75      4893          rts
                    4894   ; }
                    4895   ; int Get7HexDigits(void)
                    4896   ; {
                    4897   _Get7HexDigits:
00002CBE  48E7 2030 4898          movem.l   D2/A2/A3,-(A7)
00002CC2  45F8 0B68 4899          lea       __getch.L,A2
00002CC6  47F8 0BD2 4900          lea       _xtod.L,A3
                    4901   ; register int i = (xtod(_getch()) << 24) | (xtod(_getch()) << 20) | (xtod(_getch()) << 16) | (xtod(_getch()) << 12) | (xtod(_getch()) << 8) | (xtod(_getch()) << 4) | (xtod(_getch()));
00002CCA  2F00      4902          move.l    D0,-(A7)
00002CCC  4E92      4903          jsr       (A2)
00002CCE  2200      4904          move.l    D0,D1
00002CD0  201F      4905          move.l    (A7)+,D0
00002CD2  2F01      4906          move.l    D1,-(A7)
00002CD4  4E93      4907          jsr       (A3)
00002CD6  584F      4908          addq.w    #4,A7
00002CD8  C0BC 0000 4909          and.l     #255,D0
00002CDC  00FF      
00002CDE  E180      4910          asl.l     #8,D0
00002CE0  E180      4911          asl.l     #8,D0
00002CE2  E180      4912          asl.l     #8,D0
00002CE4  2F00      4913          move.l    D0,-(A7)
00002CE6  2F01      4914          move.l    D1,-(A7)
00002CE8  4E92      4915          jsr       (A2)
00002CEA  221F      4916          move.l    (A7)+,D1
00002CEC  2F00      4917          move.l    D0,-(A7)
00002CEE  4E93      4918          jsr       (A3)
00002CF0  584F      4919          addq.w    #4,A7
00002CF2  2200      4920          move.l    D0,D1
00002CF4  201F      4921          move.l    (A7)+,D0
00002CF6  C2BC 0000 4922          and.l     #255,D1
00002CFA  00FF      
00002CFC  E181      4923          asl.l     #8,D1
00002CFE  E181      4924          asl.l     #8,D1
00002D00  E981      4925          asl.l     #4,D1
00002D02  8081      4926          or.l      D1,D0
00002D04  2F00      4927          move.l    D0,-(A7)
00002D06  2F01      4928          move.l    D1,-(A7)
00002D08  4E92      4929          jsr       (A2)
00002D0A  221F      4930          move.l    (A7)+,D1
00002D0C  2F00      4931          move.l    D0,-(A7)
00002D0E  4E93      4932          jsr       (A3)
00002D10  584F      4933          addq.w    #4,A7
00002D12  2200      4934          move.l    D0,D1
00002D14  201F      4935          move.l    (A7)+,D0
00002D16  C2BC 0000 4936          and.l     #255,D1
00002D1A  00FF      
00002D1C  E181      4937          asl.l     #8,D1
00002D1E  E181      4938          asl.l     #8,D1
00002D20  8081      4939          or.l      D1,D0
00002D22  2F00      4940          move.l    D0,-(A7)
00002D24  2F01      4941          move.l    D1,-(A7)
00002D26  4E92      4942          jsr       (A2)
00002D28  221F      4943          move.l    (A7)+,D1
00002D2A  2F00      4944          move.l    D0,-(A7)
00002D2C  4E93      4945          jsr       (A3)
00002D2E  584F      4946          addq.w    #4,A7
00002D30  2200      4947          move.l    D0,D1
00002D32  201F      4948          move.l    (A7)+,D0
00002D34  C2BC 0000 4949          and.l     #255,D1
00002D38  00FF      
00002D3A  E181      4950          asl.l     #8,D1
00002D3C  E981      4951          asl.l     #4,D1
00002D3E  8081      4952          or.l      D1,D0
00002D40  2F00      4953          move.l    D0,-(A7)
00002D42  2F01      4954          move.l    D1,-(A7)
00002D44  4E92      4955          jsr       (A2)
00002D46  221F      4956          move.l    (A7)+,D1
00002D48  2F00      4957          move.l    D0,-(A7)
00002D4A  4E93      4958          jsr       (A3)
00002D4C  584F      4959          addq.w    #4,A7
00002D4E  2200      4960          move.l    D0,D1
00002D50  201F      4961          move.l    (A7)+,D0
00002D52  C2BC 0000 4962          and.l     #255,D1
00002D56  00FF      
00002D58  E181      4963          asl.l     #8,D1
00002D5A  8081      4964          or.l      D1,D0
00002D5C  2F00      4965          move.l    D0,-(A7)
00002D5E  2F01      4966          move.l    D1,-(A7)
00002D60  4E92      4967          jsr       (A2)
00002D62  221F      4968          move.l    (A7)+,D1
00002D64  2F00      4969          move.l    D0,-(A7)
00002D66  4E93      4970          jsr       (A3)
00002D68  584F      4971          addq.w    #4,A7
00002D6A  2200      4972          move.l    D0,D1
00002D6C  201F      4973          move.l    (A7)+,D0
00002D6E  C2BC 0000 4974          and.l     #255,D1
00002D72  00FF      
00002D74  E981      4975          asl.l     #4,D1
00002D76  8081      4976          or.l      D1,D0
00002D78  2F00      4977          move.l    D0,-(A7)
00002D7A  2F01      4978          move.l    D1,-(A7)
00002D7C  4E92      4979          jsr       (A2)
00002D7E  221F      4980          move.l    (A7)+,D1
00002D80  2F00      4981          move.l    D0,-(A7)
00002D82  4E93      4982          jsr       (A3)
00002D84  584F      4983          addq.w    #4,A7
00002D86  2200      4984          move.l    D0,D1
00002D88  201F      4985          move.l    (A7)+,D0
00002D8A  C2BC 0000 4986          and.l     #255,D1
00002D8E  00FF      
00002D90  8081      4987          or.l      D1,D0
00002D92  2400      4988          move.l    D0,D2
                    4989   ; return i;
00002D94  2002      4990          move.l    D2,D0
00002D96  4CDF 0C04 4991          movem.l   (A7)+,D2/A2/A3
00002D9A  4E75      4992          rts
                    4993   ; }
                    4994   ; void FillMemoryForMemTest(char* StartRamPtr, char* EndRamPtr, unsigned long FillData, int config)
                    4995   ; {
                    4996   _FillMemoryForMemTest:
00002D9C  4E56 0000 4997          link      A6,#0
00002DA0  48E7 3C00 4998          movem.l   D2/D3/D4/D5,-(A7)
00002DA4  262E 000C 4999          move.l    12(A6),D3
00002DA8  282E 0010 5000          move.l    16(A6),D4
00002DAC  2A2E 0014 5001          move.l    20(A6),D5
                    5002   ; char* start = StartRamPtr;
00002DB0  242E 0008 5003          move.l    8(A6),D2
                    5004   ; printf("\r\nFilling Addresses [$%08X - $%08X] with $%02X", StartRamPtr, EndRamPtr, FillData);
00002DB4  2F04      5005          move.l    D4,-(A7)
00002DB6  2F03      5006          move.l    D3,-(A7)
00002DB8  2F2E 0008 5007          move.l    8(A6),-(A7)
00002DBC  4879 0000 5008          pea       @m68kde~1_13.L
00002DC0  4BDA      
00002DC2  4EB9 0000 5009          jsr       _printf
00002DC6  41E4      
00002DC8  DEFC 0010 5010          add.w     #16,A7
                    5011   ; if (config == 1) {
00002DCC  0C85 0000 5012          cmp.l     #1,D5
00002DD0  0001      
00002DD2  660C      5013          bne.s     FillMemoryForMemTest_5
                    5014   ; while (start <= EndRamPtr) {
                    5015   FillMemoryForMemTest_3:
00002DD4  B483      5016          cmp.l     D3,D2
00002DD6  6208      5017          bhi.s     FillMemoryForMemTest_5
                    5018   ; *start++ = FillData;
00002DD8  2042      5019          move.l    D2,A0
00002DDA  5282      5020          addq.l    #1,D2
00002DDC  1084      5021          move.b    D4,(A0)
00002DDE  60F4      5022          bra       FillMemoryForMemTest_3
                    5023   FillMemoryForMemTest_5:
                    5024   ; }
                    5025   ; }
                    5026   ; if (config == 2) {
00002DE0  0C85 0000 5027          cmp.l     #2,D5
00002DE4  0002      
00002DE6  660C      5028          bne.s     FillMemoryForMemTest_10
                    5029   ; while (start <= EndRamPtr) {
                    5030   FillMemoryForMemTest_8:
00002DE8  B483      5031          cmp.l     D3,D2
00002DEA  6208      5032          bhi.s     FillMemoryForMemTest_10
                    5033   ; *start = FillData;
00002DEC  2042      5034          move.l    D2,A0
00002DEE  1084      5035          move.b    D4,(A0)
                    5036   ; start += 1;
00002DF0  5282      5037          addq.l    #1,D2
00002DF2  60F4      5038          bra       FillMemoryForMemTest_8
                    5039   FillMemoryForMemTest_10:
                    5040   ; }
                    5041   ; }
                    5042   ; if (config == 3) {
00002DF4  0C85 0000 5043          cmp.l     #3,D5
00002DF8  0003      
00002DFA  660C      5044          bne.s     FillMemoryForMemTest_15
                    5045   ; while (start <= EndRamPtr) {
                    5046   FillMemoryForMemTest_13:
00002DFC  B483      5047          cmp.l     D3,D2
00002DFE  6208      5048          bhi.s     FillMemoryForMemTest_15
                    5049   ; *start = FillData;
00002E00  2042      5050          move.l    D2,A0
00002E02  1084      5051          move.b    D4,(A0)
                    5052   ; start += 1;
00002E04  5282      5053          addq.l    #1,D2
00002E06  60F4      5054          bra       FillMemoryForMemTest_13
                    5055   FillMemoryForMemTest_15:
00002E08  4CDF 003C 5056          movem.l   (A7)+,D2/D3/D4/D5
00002E0C  4E5E      5057          unlk      A6
00002E0E  4E75      5058          rts
                    5059   ; }
                    5060   ; }
                    5061   ; }
                    5062   ; void ReadMemoryForMemTest(char* StartRamPtr, char* EndRamPtr, unsigned long FillData, int config)
                    5063   ; {
                    5064   _ReadMemoryForMemTest:
00002E10  4E56 0000 5065          link      A6,#0
00002E14  48E7 3F20 5066          movem.l   D2/D3/D4/D5/D6/D7/A2,-(A7)
00002E18  45F9 0000 5067          lea       _printf.L,A2
00002E1C  41E4      
00002E1E  262E 0010 5068          move.l    16(A6),D3
00002E22  2A2E 000C 5069          move.l    12(A6),D5
00002E26  2E2E 0014 5070          move.l    20(A6),D7
                    5071   ; unsigned char* start = StartRamPtr;
00002E2A  242E 0008 5072          move.l    8(A6),D2
                    5073   ; printf("\r\nReading Addresses [$%08X - $%08X] for $%02X", StartRamPtr, EndRamPtr, FillData);
00002E2E  2F03      5074          move.l    D3,-(A7)
00002E30  2F05      5075          move.l    D5,-(A7)
00002E32  2F2E 0008 5076          move.l    8(A6),-(A7)
00002E36  4879 0000 5077          pea       @m68kde~1_148.L
00002E3A  5C70      
00002E3C  4E92      5078          jsr       (A2)
00002E3E  DEFC 0010 5079          add.w     #16,A7
                    5080   ; if (config == 1) {
00002E42  0C87 0000 5081          cmp.l     #1,D7
00002E46  0001      
00002E48  6600 0050 5082          bne       ReadMemoryForMemTest_5
                    5083   ; while (start <= EndRamPtr) {
                    5084   ReadMemoryForMemTest_3:
00002E4C  B485      5085          cmp.l     D5,D2
00002E4E  6200 004A 5086          bhi       ReadMemoryForMemTest_5
                    5087   ; if (*start != FillData)
00002E52  2042      5088          move.l    D2,A0
00002E54  1010      5089          move.b    (A0),D0
00002E56  C0BC 0000 5090          and.l     #255,D0
00002E5A  00FF      
00002E5C  B083      5091          cmp.l     D3,D0
00002E5E  671C      5092          beq.s     ReadMemoryForMemTest_6
                    5093   ; printf("\r\nValue incorrect at addresses $%08X ... should be $%02X but found $%02X", start, FillData, *start);
00002E60  2042      5094          move.l    D2,A0
00002E62  1210      5095          move.b    (A0),D1
00002E64  C2BC 0000 5096          and.l     #255,D1
00002E68  00FF      
00002E6A  2F01      5097          move.l    D1,-(A7)
00002E6C  2F03      5098          move.l    D3,-(A7)
00002E6E  2F02      5099          move.l    D2,-(A7)
00002E70  4879 0000 5100          pea       @m68kde~1_149.L
00002E74  5C9E      
00002E76  4E92      5101          jsr       (A2)
00002E78  DEFC 0010 5102          add.w     #16,A7
                    5103   ReadMemoryForMemTest_6:
                    5104   ; printf("\r\nValue: $%02X found at Address: $%08X", *start, start);
00002E7C  2F02      5105          move.l    D2,-(A7)
00002E7E  2042      5106          move.l    D2,A0
00002E80  1210      5107          move.b    (A0),D1
00002E82  C2BC 0000 5108          and.l     #255,D1
00002E86  00FF      
00002E88  2F01      5109          move.l    D1,-(A7)
00002E8A  4879 0000 5110          pea       @m68kde~1_150.L
00002E8E  5CE8      
00002E90  4E92      5111          jsr       (A2)
00002E92  DEFC 000C 5112          add.w     #12,A7
                    5113   ; start++;
00002E96  5282      5114          addq.l    #1,D2
00002E98  60B2      5115          bra       ReadMemoryForMemTest_3
                    5116   ReadMemoryForMemTest_5:
                    5117   ; }
                    5118   ; }
                    5119   ; if (config == 2) {
00002E9A  0C87 0000 5120          cmp.l     #2,D7
00002E9E  0002      
00002EA0  6600 0064 5121          bne       ReadMemoryForMemTest_12
                    5122   ; while (start <= EndRamPtr) {
                    5123   ReadMemoryForMemTest_10:
00002EA4  B485      5124          cmp.l     D5,D2
00002EA6  6200 005E 5125          bhi       ReadMemoryForMemTest_12
                    5126   ; if (*start != FillData)
00002EAA  2042      5127          move.l    D2,A0
00002EAC  1010      5128          move.b    (A0),D0
00002EAE  C0BC 0000 5129          and.l     #255,D0
00002EB2  00FF      
00002EB4  B083      5130          cmp.l     D3,D0
00002EB6  671C      5131          beq.s     ReadMemoryForMemTest_13
                    5132   ; printf("\r\nValue incorrect at addresses $%08X ... should be $%02X but found $%02X", start, FillData, *start);
00002EB8  2042      5133          move.l    D2,A0
00002EBA  1210      5134          move.b    (A0),D1
00002EBC  C2BC 0000 5135          and.l     #255,D1
00002EC0  00FF      
00002EC2  2F01      5136          move.l    D1,-(A7)
00002EC4  2F03      5137          move.l    D3,-(A7)
00002EC6  2F02      5138          move.l    D2,-(A7)
00002EC8  4879 0000 5139          pea       @m68kde~1_149.L
00002ECC  5C9E      
00002ECE  4E92      5140          jsr       (A2)
00002ED0  DEFC 0010 5141          add.w     #16,A7
                    5142   ReadMemoryForMemTest_13:
                    5143   ; printf("\r\nValue: $%02X $%02X found at Address: $%08X and $%08X", *start, *(start + 1), start, (start + 1));
00002ED4  2202      5144          move.l    D2,D1
00002ED6  5281      5145          addq.l    #1,D1
00002ED8  2F01      5146          move.l    D1,-(A7)
00002EDA  2F02      5147          move.l    D2,-(A7)
00002EDC  2042      5148          move.l    D2,A0
00002EDE  1228 0001 5149          move.b    1(A0),D1
00002EE2  C2BC 0000 5150          and.l     #255,D1
00002EE6  00FF      
00002EE8  2F01      5151          move.l    D1,-(A7)
00002EEA  2042      5152          move.l    D2,A0
00002EEC  1210      5153          move.b    (A0),D1
00002EEE  C2BC 0000 5154          and.l     #255,D1
00002EF2  00FF      
00002EF4  2F01      5155          move.l    D1,-(A7)
00002EF6  4879 0000 5156          pea       @m68kde~1_151.L
00002EFA  5D10      
00002EFC  4E92      5157          jsr       (A2)
00002EFE  DEFC 0014 5158          add.w     #20,A7
                    5159   ; start += 2;
00002F02  5482      5160          addq.l    #2,D2
00002F04  609E      5161          bra       ReadMemoryForMemTest_10
                    5162   ReadMemoryForMemTest_12:
                    5163   ; }
                    5164   ; }
                    5165   ; if (config == 3) {
00002F06  0C87 0000 5166          cmp.l     #3,D7
00002F0A  0003      
00002F0C  6600 00A4 5167          bne       ReadMemoryForMemTest_24
                    5168   ; int count = 0;
00002F10  4284      5169          clr.l     D4
                    5170   ; int noError = 1;
00002F12  7C01      5171          moveq     #1,D6
                    5172   ; while (start <= EndRamPtr) {
                    5173   ReadMemoryForMemTest_17:
00002F14  B485      5174          cmp.l     D5,D2
00002F16  6200 008C 5175          bhi       ReadMemoryForMemTest_19
                    5176   ; if (*start != FillData) {
00002F1A  2042      5177          move.l    D2,A0
00002F1C  1010      5178          move.b    (A0),D0
00002F1E  C0BC 0000 5179          and.l     #255,D0
00002F22  00FF      
00002F24  B083      5180          cmp.l     D3,D0
00002F26  671E      5181          beq.s     ReadMemoryForMemTest_20
                    5182   ; printf("\r\nValue incorrect at addresses $%08X ... should be $%02X but found $%02X", start, FillData, *start);
00002F28  2042      5183          move.l    D2,A0
00002F2A  1210      5184          move.b    (A0),D1
00002F2C  C2BC 0000 5185          and.l     #255,D1
00002F30  00FF      
00002F32  2F01      5186          move.l    D1,-(A7)
00002F34  2F03      5187          move.l    D3,-(A7)
00002F36  2F02      5188          move.l    D2,-(A7)
00002F38  4879 0000 5189          pea       @m68kde~1_149.L
00002F3C  5C9E      
00002F3E  4E92      5190          jsr       (A2)
00002F40  DEFC 0010 5191          add.w     #16,A7
                    5192   ; noError = 0;
00002F44  4286      5193          clr.l     D6
                    5194   ReadMemoryForMemTest_20:
                    5195   ; }
                    5196   ; if (count == 10000) {
00002F46  0C84 0000 5197          cmp.l     #10000,D4
00002F4A  2710      
00002F4C  6600 004E 5198          bne       ReadMemoryForMemTest_22
                    5199   ; count = 0;
00002F50  4284      5200          clr.l     D4
                    5201   ; printf("\r\nValue: $%02X $%02X $%02X $%02X found at Address: $%08X - $%08X", *start, *(start + 1), *(start + 2), *(start + 3), start, (start + 3));
00002F52  2202      5202          move.l    D2,D1
00002F54  5681      5203          addq.l    #3,D1
00002F56  2F01      5204          move.l    D1,-(A7)
00002F58  2F02      5205          move.l    D2,-(A7)
00002F5A  2042      5206          move.l    D2,A0
00002F5C  1228 0003 5207          move.b    3(A0),D1
00002F60  C2BC 0000 5208          and.l     #255,D1
00002F64  00FF      
00002F66  2F01      5209          move.l    D1,-(A7)
00002F68  2042      5210          move.l    D2,A0
00002F6A  1228 0002 5211          move.b    2(A0),D1
00002F6E  C2BC 0000 5212          and.l     #255,D1
00002F72  00FF      
00002F74  2F01      5213          move.l    D1,-(A7)
00002F76  2042      5214          move.l    D2,A0
00002F78  1228 0001 5215          move.b    1(A0),D1
00002F7C  C2BC 0000 5216          and.l     #255,D1
00002F80  00FF      
00002F82  2F01      5217          move.l    D1,-(A7)
00002F84  2042      5218          move.l    D2,A0
00002F86  1210      5219          move.b    (A0),D1
00002F88  C2BC 0000 5220          and.l     #255,D1
00002F8C  00FF      
00002F8E  2F01      5221          move.l    D1,-(A7)
00002F90  4879 0000 5222          pea       @m68kde~1_152.L
00002F94  5D48      
00002F96  4E92      5223          jsr       (A2)
00002F98  DEFC 001C 5224          add.w     #28,A7
                    5225   ReadMemoryForMemTest_22:
                    5226   ; }
                    5227   ; start += 4;
00002F9C  5882      5228          addq.l    #4,D2
                    5229   ; count++;
00002F9E  5284      5230          addq.l    #1,D4
00002FA0  6000 FF72 5231          bra       ReadMemoryForMemTest_17
                    5232   ReadMemoryForMemTest_19:
                    5233   ; }
                    5234   ; if (noError)
00002FA4  4A86      5235          tst.l     D6
00002FA6  670A      5236          beq.s     ReadMemoryForMemTest_24
                    5237   ; printf("\r\nTest passed successfully. Note: the sample data are printed every 10000 addresses");
00002FA8  4879 0000 5238          pea       @m68kde~1_153.L
00002FAC  5D8A      
00002FAE  4E92      5239          jsr       (A2)
00002FB0  584F      5240          addq.w    #4,A7
                    5241   ReadMemoryForMemTest_24:
00002FB2  4CDF 04FC 5242          movem.l   (A7)+,D2/D3/D4/D5/D6/D7/A2
00002FB6  4E5E      5243          unlk      A6
00002FB8  4E75      5244          rts
                    5245   ; }
                    5246   ; }
                    5247   ; void MemoryTest(void)
                    5248   ; {
                    5249   _MemoryTest:
00002FBA  4E56 FFF0 5250          link      A6,#-16
00002FBE  48E7 3F3C 5251          movem.l   D2/D3/D4/D5/D6/D7/A2/A3/A4/A5,-(A7)
00002FC2  45F9 0000 5252          lea       _printf.L,A2
00002FC6  41E4      
00002FC8  49F8 2E10 5253          lea       _ReadMemoryForMemTest.L,A4
00002FCC  4BF8 2ABE 5254          lea       _Get2HexDigitsForMemTest.L,A5
                    5255   ; unsigned int start_boundary = 0x09000000;
00002FD0  2E3C 0900 5256          move.l    #150994944,D7
00002FD4  0000      
                    5257   ; unsigned int end_boundary = 0x097FFFFF;
00002FD6  2C3C 097F 5258          move.l    #159383551,D6
00002FDA  FFFF      
                    5259   ; int test_config = 0;
00002FDC  4285      5260          clr.l     D5
                    5261   ; int test_pattern = 0;
00002FDE  367C 0000 5262          move.w    #0,A3
                    5263   ; char start_addr[7];
                    5264   ; int start_val = 0;
00002FE2  4282      5265          clr.l     D2
                    5266   ; char end_addr[7];
                    5267   ; int end_val = 0;
00002FE4  4283      5268          clr.l     D3
                    5269   ; char digit;
                    5270   ; scanflush();
00002FE6  4EB9 0000 5271          jsr       _scanflush
00002FEA  3BDA      
                    5272   ; // Prompt the user to enter a test configuration
                    5273   ; printf("\r\nEnter memory test configuration(1 - bytes, 2 - words, 3 - long words): ");
00002FEC  4879 0000 5274          pea       @m68kde~1_154.L
00002FF0  5DDE      
00002FF2  4E92      5275          jsr       (A2)
00002FF4  584F      5276          addq.w    #4,A7
                    5277   ; test_config = (int)(xtod(_getch()));
00002FF6  2F00      5278          move.l    D0,-(A7)
00002FF8  4EB8 0B68 5279          jsr       __getch
00002FFC  2200      5280          move.l    D0,D1
00002FFE  201F      5281          move.l    (A7)+,D0
00003000  2F01      5282          move.l    D1,-(A7)
00003002  4EB8 0BD2 5283          jsr       _xtod
00003006  584F      5284          addq.w    #4,A7
00003008  4880      5285          ext.w     D0
0000300A  48C0      5286          ext.l     D0
0000300C  2A00      5287          move.l    D0,D5
                    5288   ; // Check for invalid configuration entry and re-prompt if needed
                    5289   ; while (test_config > 3 || test_config < 1) {
                    5290   MemoryTest_1:
0000300E  0C85 0000 5291          cmp.l     #3,D5
00003012  0003      
00003014  6E0A      5292          bgt.s     MemoryTest_4
00003016  0C85 0000 5293          cmp.l     #1,D5
0000301A  0001      
0000301C  6C00 0032 5294          bge       MemoryTest_3
                    5295   MemoryTest_4:
                    5296   ; printf("\r\nConfiguration invalid %d, try again", test_config);
00003020  2F05      5297          move.l    D5,-(A7)
00003022  4879 0000 5298          pea       @m68kde~1_155.L
00003026  5E28      
00003028  4E92      5299          jsr       (A2)
0000302A  504F      5300          addq.w    #8,A7
                    5301   ; printf("\r\nEnter memory test configuration(1 - bytes, 2 - words, 3 - long words): ");
0000302C  4879 0000 5302          pea       @m68kde~1_154.L
00003030  5DDE      
00003032  4E92      5303          jsr       (A2)
00003034  584F      5304          addq.w    #4,A7
                    5305   ; test_config = (int)(xtod(_getch()));
00003036  2F00      5306          move.l    D0,-(A7)
00003038  4EB8 0B68 5307          jsr       __getch
0000303C  2200      5308          move.l    D0,D1
0000303E  201F      5309          move.l    (A7)+,D0
00003040  2F01      5310          move.l    D1,-(A7)
00003042  4EB8 0BD2 5311          jsr       _xtod
00003046  584F      5312          addq.w    #4,A7
00003048  4880      5313          ext.w     D0
0000304A  48C0      5314          ext.l     D0
0000304C  2A00      5315          move.l    D0,D5
0000304E  60BE      5316          bra       MemoryTest_1
                    5317   MemoryTest_3:
                    5318   ; //scanf("%d", &test_config);
                    5319   ; }
                    5320   ; // Prompt the user to enter a test pattern
                    5321   ; printf("\r\nChoose between different memory test patterns(1 - 5, 2 - A, 3 - F, 4 - 0): ");
00003050  4879 0000 5322          pea       @m68kde~1_156.L
00003054  5E4E      
00003056  4E92      5323          jsr       (A2)
00003058  584F      5324          addq.w    #4,A7
                    5325   ; test_pattern = (int)(xtod(_getch()));
0000305A  2F00      5326          move.l    D0,-(A7)
0000305C  4EB8 0B68 5327          jsr       __getch
00003060  2200      5328          move.l    D0,D1
00003062  201F      5329          move.l    (A7)+,D0
00003064  2F01      5330          move.l    D1,-(A7)
00003066  4EB8 0BD2 5331          jsr       _xtod
0000306A  584F      5332          addq.w    #4,A7
0000306C  4880      5333          ext.w     D0
0000306E  48C0      5334          ext.l     D0
00003070  2640      5335          move.l    D0,A3
                    5336   ; // Check for invalid pattern entry and re-prompt if needed
                    5337   ; while (test_pattern > 4 || test_pattern < 1) {
                    5338   MemoryTest_5:
00003072  200B      5339          move.l    A3,D0
00003074  0C80 0000 5340          cmp.l     #4,D0
00003078  0004      
0000307A  6E0C      5341          bgt.s     MemoryTest_8
0000307C  200B      5342          move.l    A3,D0
0000307E  0C80 0000 5343          cmp.l     #1,D0
00003082  0001      
00003084  6C00 0030 5344          bge       MemoryTest_7
                    5345   MemoryTest_8:
                    5346   ; printf("\r\nPattern invalid, try again");
00003088  4879 0000 5347          pea       @m68kde~1_157.L
0000308C  5E9C      
0000308E  4E92      5348          jsr       (A2)
00003090  584F      5349          addq.w    #4,A7
                    5350   ; printf("\r\nChoose between different memory test patterns(1 - 5, 2 - A, 3 - F, 4 - 0): ");
00003092  4879 0000 5351          pea       @m68kde~1_156.L
00003096  5E4E      
00003098  4E92      5352          jsr       (A2)
0000309A  584F      5353          addq.w    #4,A7
                    5354   ; //scanf("%d", &test_pattern);
                    5355   ; test_pattern = (int)(xtod(_getch()));
0000309C  2F00      5356          move.l    D0,-(A7)
0000309E  4EB8 0B68 5357          jsr       __getch
000030A2  2200      5358          move.l    D0,D1
000030A4  201F      5359          move.l    (A7)+,D0
000030A6  2F01      5360          move.l    D1,-(A7)
000030A8  4EB8 0BD2 5361          jsr       _xtod
000030AC  584F      5362          addq.w    #4,A7
000030AE  4880      5363          ext.w     D0
000030B0  48C0      5364          ext.l     D0
000030B2  2640      5365          move.l    D0,A3
000030B4  60BC      5366          bra       MemoryTest_5
                    5367   MemoryTest_7:
                    5368   ; }
                    5369   ; // Prompt the user to enter a starting address
                    5370   ; printf("\r\nEnter starting address(%08X - %08X inclusive): ", start_boundary, end_boundary);
000030B6  2F06      5371          move.l    D6,-(A7)
000030B8  2F07      5372          move.l    D7,-(A7)
000030BA  4879 0000 5373          pea       @m68kde~1_158.L
000030BE  5EBA      
000030C0  4E92      5374          jsr       (A2)
000030C2  DEFC 000C 5375          add.w     #12,A7
                    5376   ; start_val = Get8HexDigits(0);
000030C6  42A7      5377          clr.l     -(A7)
000030C8  4EB8 0CA4 5378          jsr       _Get8HexDigits
000030CC  584F      5379          addq.w    #4,A7
000030CE  2400      5380          move.l    D0,D2
                    5381   ; // Check for invalid start address and re-prompt if needed
                    5382   ; // Check for illegal address, start address must be even if writing words or long words to memory
                    5383   ; while (start_val < start_boundary || start_val > end_boundary || (start_val % 2 != 0 && test_config != 1))
                    5384   MemoryTest_9:
000030D0  B487      5385          cmp.l     D7,D2
000030D2  6522      5386          blo.s     MemoryTest_12
000030D4  B486      5387          cmp.l     D6,D2
000030D6  621E      5388          bhi.s     MemoryTest_12
000030D8  2F02      5389          move.l    D2,-(A7)
000030DA  4878 0002 5390          pea       2
000030DE  4EB9 0000 5391          jsr       LDIV
000030E2  36D4      
000030E4  202F 0004 5392          move.l    4(A7),D0
000030E8  504F      5393          addq.w    #8,A7
000030EA  4A80      5394          tst.l     D0
000030EC  672E      5395          beq.s     MemoryTest_11
000030EE  0C85 0000 5396          cmp.l     #1,D5
000030F2  0001      
000030F4  6726      5397          beq.s     MemoryTest_11
                    5398   MemoryTest_12:
                    5399   ; { // start address must be 7 chars and within bounds
                    5400   ; printf("\r\nInvalid starting address.. try again");
000030F6  4879 0000 5401          pea       @m68kde~1_159.L
000030FA  5EEC      
000030FC  4E92      5402          jsr       (A2)
000030FE  584F      5403          addq.w    #4,A7
                    5404   ; //printf("\r\nStarting address out of bounds.. try again");
                    5405   ; printf("\r\nEnter starting address(%08X - %08X inclusive): ", start_boundary, end_boundary);
00003100  2F06      5406          move.l    D6,-(A7)
00003102  2F07      5407          move.l    D7,-(A7)
00003104  4879 0000 5408          pea       @m68kde~1_158.L
00003108  5EBA      
0000310A  4E92      5409          jsr       (A2)
0000310C  DEFC 000C 5410          add.w     #12,A7
                    5411   ; start_val = Get8HexDigits(0);
00003110  42A7      5412          clr.l     -(A7)
00003112  4EB8 0CA4 5413          jsr       _Get8HexDigits
00003116  584F      5414          addq.w    #4,A7
00003118  2400      5415          move.l    D0,D2
0000311A  60B4      5416          bra       MemoryTest_9
                    5417   MemoryTest_11:
                    5418   ; }
                    5419   ; // Prompt the user to enter an ending address
                    5420   ; printf("\r\nEnter ending address(%08X - %08X inclusive): ", start_boundary, end_boundary);
0000311C  2F06      5421          move.l    D6,-(A7)
0000311E  2F07      5422          move.l    D7,-(A7)
00003120  4879 0000 5423          pea       @m68kde~1_160.L
00003124  5F14      
00003126  4E92      5424          jsr       (A2)
00003128  DEFC 000C 5425          add.w     #12,A7
                    5426   ; end_val = Get8HexDigits(0);
0000312C  42A7      5427          clr.l     -(A7)
0000312E  4EB8 0CA4 5428          jsr       _Get8HexDigits
00003132  584F      5429          addq.w    #4,A7
00003134  2600      5430          move.l    D0,D3
                    5431   ; // When writing words, the given address range should be a multiple of 2 bytes (size of a word)
                    5432   ; // When writing long words, the given address range should be a multiple of 4 bytes (size of a long word)
                    5433   ; while (end_val < start_boundary || end_val > end_boundary ||
                    5434   MemoryTest_13:
00003136  B687      5435          cmp.l     D7,D3
00003138  6500 0056 5436          blo       MemoryTest_16
0000313C  B686      5437          cmp.l     D6,D3
0000313E  6200 0050 5438          bhi       MemoryTest_16
00003142  B682      5439          cmp.l     D2,D3
00003144  6D00 004A 5440          blt       MemoryTest_16
00003148  2003      5441          move.l    D3,D0
0000314A  9082      5442          sub.l     D2,D0
0000314C  5280      5443          addq.l    #1,D0
0000314E  2F00      5444          move.l    D0,-(A7)
00003150  4878 0002 5445          pea       2
00003154  4EB9 0000 5446          jsr       LDIV
00003158  36D4      
0000315A  202F 0004 5447          move.l    4(A7),D0
0000315E  504F      5448          addq.w    #8,A7
00003160  4A80      5449          tst.l     D0
00003162  6708      5450          beq.s     MemoryTest_17
00003164  0C85 0000 5451          cmp.l     #2,D5
00003168  0002      
0000316A  6724      5452          beq.s     MemoryTest_16
                    5453   MemoryTest_17:
0000316C  2003      5454          move.l    D3,D0
0000316E  9082      5455          sub.l     D2,D0
00003170  5280      5456          addq.l    #1,D0
00003172  2F00      5457          move.l    D0,-(A7)
00003174  4878 0004 5458          pea       4
00003178  4EB9 0000 5459          jsr       LDIV
0000317C  36D4      
0000317E  202F 0004 5460          move.l    4(A7),D0
00003182  504F      5461          addq.w    #8,A7
00003184  4A80      5462          tst.l     D0
00003186  672E      5463          beq.s     MemoryTest_15
00003188  0C85 0000 5464          cmp.l     #3,D5
0000318C  0003      
0000318E  6626      5465          bne.s     MemoryTest_15
                    5466   MemoryTest_16:
                    5467   ; end_val < start_val || ((end_val - start_val + 1) % 2 != 0 && test_config == 2) ||
                    5468   ; ((end_val - start_val + 1) % 4 != 0 && test_config == 3))
                    5469   ; { // end address must be 7 chars and within bounds
                    5470   ; printf("\r\nEnding address out of bounds.. try again");
00003190  4879 0000 5471          pea       @m68kde~1_161.L
00003194  5F44      
00003196  4E92      5472          jsr       (A2)
00003198  584F      5473          addq.w    #4,A7
                    5474   ; printf("\r\nEnter ending address(%08X - %08X inclusive): ", start_boundary, end_boundary);
0000319A  2F06      5475          move.l    D6,-(A7)
0000319C  2F07      5476          move.l    D7,-(A7)
0000319E  4879 0000 5477          pea       @m68kde~1_160.L
000031A2  5F14      
000031A4  4E92      5478          jsr       (A2)
000031A6  DEFC 000C 5479          add.w     #12,A7
                    5480   ; end_val = Get8HexDigits(0);
000031AA  42A7      5481          clr.l     -(A7)
000031AC  4EB8 0CA4 5482          jsr       _Get8HexDigits
000031B0  584F      5483          addq.w    #4,A7
000031B2  2600      5484          move.l    D0,D3
000031B4  6080      5485          bra       MemoryTest_13
                    5486   MemoryTest_15:
                    5487   ; }
                    5488   ; printf("\r\nWriting to SRAM ...");
000031B6  4879 0000 5489          pea       @m68kde~1_162.L
000031BA  5F70      
000031BC  4E92      5490          jsr       (A2)
000031BE  584F      5491          addq.w    #4,A7
                    5492   ; printf("\r\n............................................................................................................");
000031C0  4879 0000 5493          pea       @m68kde~1_163.L
000031C4  5F86      
000031C6  4E92      5494          jsr       (A2)
000031C8  584F      5495          addq.w    #4,A7
                    5496   ; printf("\r\n............................................................................................................");
000031CA  4879 0000 5497          pea       @m68kde~1_163.L
000031CE  5F86      
000031D0  4E92      5498          jsr       (A2)
000031D2  584F      5499          addq.w    #4,A7
                    5500   ; printf("\r\n............................................................................................................");
000031D4  4879 0000 5501          pea       @m68kde~1_163.L
000031D8  5F86      
000031DA  4E92      5502          jsr       (A2)
000031DC  584F      5503          addq.w    #4,A7
                    5504   ; switch (test_pattern) {
000031DE  200B      5505          move.l    A3,D0
000031E0  5380      5506          subq.l    #1,D0
000031E2  6500 002C 5507          blo       MemoryTest_18
000031E6  0C80 0000 5508          cmp.l     #4,D0
000031EA  0004      
000031EC  6422      5509          bhs.s     MemoryTest_18
000031EE  E380      5510          asl.l     #1,D0
000031F0  303B 0806 5511          move.w    MemoryTest_20(PC,D0.L),D0
000031F4  4EFB 0002 5512          jmp       MemoryTest_20(PC,D0.W)
                    5513   MemoryTest_20:
000031F8  0008      5514          dc.w      MemoryTest_21-MemoryTest_20
000031FA  000C      5515          dc.w      MemoryTest_22-MemoryTest_20
000031FC  0010      5516          dc.w      MemoryTest_23-MemoryTest_20
000031FE  0014      5517          dc.w      MemoryTest_24-MemoryTest_20
                    5518   MemoryTest_21:
                    5519   ; case 1: digit = '5';
00003200  7835      5520          moveq     #53,D4
                    5521   ; break;
00003202  600E      5522          bra.s     MemoryTest_19
                    5523   MemoryTest_22:
                    5524   ; case 2: digit = 'A';
00003204  7841      5525          moveq     #65,D4
                    5526   ; break;
00003206  600A      5527          bra.s     MemoryTest_19
                    5528   MemoryTest_23:
                    5529   ; case 3: digit = 'F';
00003208  7846      5530          moveq     #70,D4
                    5531   ; break;
0000320A  6006      5532          bra.s     MemoryTest_19
                    5533   MemoryTest_24:
                    5534   ; case 4: digit = '0';
0000320C  7830      5535          moveq     #48,D4
                    5536   ; break;
0000320E  6002      5537          bra.s     MemoryTest_19
                    5538   MemoryTest_18:
                    5539   ; default: digit = '5';
00003210  7835      5540          moveq     #53,D4
                    5541   MemoryTest_19:
                    5542   ; }
                    5543   ; switch (test_config) {
00003212  0C85 0000 5544          cmp.l     #2,D5
00003216  0002      
00003218  6700 0044 5545          beq       MemoryTest_29
0000321C  6E0C      5546          bgt.s     MemoryTest_32
0000321E  0C85 0000 5547          cmp.l     #1,D5
00003222  0001      
00003224  6712      5548          beq.s     MemoryTest_28
00003226  6000 0084 5549          bra       MemoryTest_26
                    5550   MemoryTest_32:
0000322A  0C85 0000 5551          cmp.l     #3,D5
0000322E  0003      
00003230  6700 0054 5552          beq       MemoryTest_30
00003234  6000 0076 5553          bra       MemoryTest_26
                    5554   MemoryTest_28:
                    5555   ; case 1: FillMemoryForMemTest(start_val, end_val, Get2HexDigitsForMemTest(digit), 1);
00003238  4878 0001 5556          pea       1
0000323C  2F00      5557          move.l    D0,-(A7)
0000323E  4884      5558          ext.w     D4
00003240  48C4      5559          ext.l     D4
00003242  2F04      5560          move.l    D4,-(A7)
00003244  4E95      5561          jsr       (A5)
00003246  584F      5562          addq.w    #4,A7
00003248  2200      5563          move.l    D0,D1
0000324A  201F      5564          move.l    (A7)+,D0
0000324C  2F01      5565          move.l    D1,-(A7)
0000324E  2F03      5566          move.l    D3,-(A7)
00003250  2F02      5567          move.l    D2,-(A7)
00003252  4EB8 2D9C 5568          jsr       _FillMemoryForMemTest
00003256  DEFC 0010 5569          add.w     #16,A7
                    5570   ; break;
0000325A  6000 0072 5571          bra       MemoryTest_27
                    5572   MemoryTest_29:
                    5573   ; case 2: FillMemoryForMemTest(start_val, end_val, Get4HexDigitsForMemTest(digit), 2);
0000325E  4878 0002 5574          pea       2
00003262  2F00      5575          move.l    D0,-(A7)
00003264  4884      5576          ext.w     D4
00003266  48C4      5577          ext.l     D4
00003268  2F04      5578          move.l    D4,-(A7)
0000326A  4EB8 2AFC 5579          jsr       _Get4HexDigitsForMemTest
0000326E  584F      5580          addq.w    #4,A7
00003270  2200      5581          move.l    D0,D1
00003272  201F      5582          move.l    (A7)+,D0
00003274  2F01      5583          move.l    D1,-(A7)
00003276  2F03      5584          move.l    D3,-(A7)
00003278  2F02      5585          move.l    D2,-(A7)
0000327A  4EB8 2D9C 5586          jsr       _FillMemoryForMemTest
0000327E  DEFC 0010 5587          add.w     #16,A7
                    5588   ; break;
00003282  6000 004A 5589          bra       MemoryTest_27
                    5590   MemoryTest_30:
                    5591   ; case 3: FillMemoryForMemTest(start_val, end_val, Get8HexDigitsForMemTest(digit), 3);
00003286  4878 0003 5592          pea       3
0000328A  2F00      5593          move.l    D0,-(A7)
0000328C  4884      5594          ext.w     D4
0000328E  48C4      5595          ext.l     D4
00003290  2F04      5596          move.l    D4,-(A7)
00003292  4EB8 2B4E 5597          jsr       _Get8HexDigitsForMemTest
00003296  584F      5598          addq.w    #4,A7
00003298  2200      5599          move.l    D0,D1
0000329A  201F      5600          move.l    (A7)+,D0
0000329C  2F01      5601          move.l    D1,-(A7)
0000329E  2F03      5602          move.l    D3,-(A7)
000032A0  2F02      5603          move.l    D2,-(A7)
000032A2  4EB8 2D9C 5604          jsr       _FillMemoryForMemTest
000032A6  DEFC 0010 5605          add.w     #16,A7
                    5606   ; break;
000032AA  6022      5607          bra.s     MemoryTest_27
                    5608   MemoryTest_26:
                    5609   ; default: FillMemoryForMemTest(start_val, end_val, Get2HexDigitsForMemTest(digit), 1);;
000032AC  4878 0001 5610          pea       1
000032B0  2F00      5611          move.l    D0,-(A7)
000032B2  4884      5612          ext.w     D4
000032B4  48C4      5613          ext.l     D4
000032B6  2F04      5614          move.l    D4,-(A7)
000032B8  4E95      5615          jsr       (A5)
000032BA  584F      5616          addq.w    #4,A7
000032BC  2200      5617          move.l    D0,D1
000032BE  201F      5618          move.l    (A7)+,D0
000032C0  2F01      5619          move.l    D1,-(A7)
000032C2  2F03      5620          move.l    D3,-(A7)
000032C4  2F02      5621          move.l    D2,-(A7)
000032C6  4EB8 2D9C 5622          jsr       _FillMemoryForMemTest
000032CA  DEFC 0010 5623          add.w     #16,A7
                    5624   MemoryTest_27:
                    5625   ; }
                    5626   ; printf("\r\nFinished writing to SRAM .");
000032CE  4879 0000 5627          pea       @m68kde~1_164.L
000032D2  5FF6      
000032D4  4E92      5628          jsr       (A2)
000032D6  584F      5629          addq.w    #4,A7
                    5630   ; printf("\r\nCheck SRAM content");
000032D8  4879 0000 5631          pea       @m68kde~1_165.L
000032DC  6014      
000032DE  4E92      5632          jsr       (A2)
000032E0  584F      5633          addq.w    #4,A7
                    5634   ; printf("\r\nReading from SRAM ...");
000032E2  4879 0000 5635          pea       @m68kde~1_166.L
000032E6  602A      
000032E8  4E92      5636          jsr       (A2)
000032EA  584F      5637          addq.w    #4,A7
                    5638   ; printf("\r\n............................................................................................................");
000032EC  4879 0000 5639          pea       @m68kde~1_163.L
000032F0  5F86      
000032F2  4E92      5640          jsr       (A2)
000032F4  584F      5641          addq.w    #4,A7
                    5642   ; printf("\r\n............................................................................................................");
000032F6  4879 0000 5643          pea       @m68kde~1_163.L
000032FA  5F86      
000032FC  4E92      5644          jsr       (A2)
000032FE  584F      5645          addq.w    #4,A7
                    5646   ; printf("\r\n............................................................................................................");
00003300  4879 0000 5647          pea       @m68kde~1_163.L
00003304  5F86      
00003306  4E92      5648          jsr       (A2)
00003308  584F      5649          addq.w    #4,A7
                    5650   ; printf("\r\n....................... begin reading");
0000330A  4879 0000 5651          pea       @m68kde~1_167.L
0000330E  6042      
00003310  4E92      5652          jsr       (A2)
00003312  584F      5653          addq.w    #4,A7
                    5654   ; switch (test_config) {
00003314  0C85 0000 5655          cmp.l     #2,D5
00003318  0002      
0000331A  6700 0042 5656          beq       MemoryTest_36
0000331E  6E0C      5657          bgt.s     MemoryTest_39
00003320  0C85 0000 5658          cmp.l     #1,D5
00003324  0001      
00003326  6712      5659          beq.s     MemoryTest_35
00003328  6000 007E 5660          bra       MemoryTest_33
                    5661   MemoryTest_39:
0000332C  0C85 0000 5662          cmp.l     #3,D5
00003330  0003      
00003332  6700 0050 5663          beq       MemoryTest_37
00003336  6000 0070 5664          bra       MemoryTest_33
                    5665   MemoryTest_35:
                    5666   ; case 1: ReadMemoryForMemTest(start_val, end_val, Get2HexDigitsForMemTest(digit), 1);
0000333A  4878 0001 5667          pea       1
0000333E  2F00      5668          move.l    D0,-(A7)
00003340  4884      5669          ext.w     D4
00003342  48C4      5670          ext.l     D4
00003344  2F04      5671          move.l    D4,-(A7)
00003346  4E95      5672          jsr       (A5)
00003348  584F      5673          addq.w    #4,A7
0000334A  2200      5674          move.l    D0,D1
0000334C  201F      5675          move.l    (A7)+,D0
0000334E  2F01      5676          move.l    D1,-(A7)
00003350  2F03      5677          move.l    D3,-(A7)
00003352  2F02      5678          move.l    D2,-(A7)
00003354  4E94      5679          jsr       (A4)
00003356  DEFC 0010 5680          add.w     #16,A7
                    5681   ; break;
0000335A  6000 006C 5682          bra       MemoryTest_34
                    5683   MemoryTest_36:
                    5684   ; case 2: ReadMemoryForMemTest(start_val, end_val, Get4HexDigitsForMemTest(digit), 2);
0000335E  4878 0002 5685          pea       2
00003362  2F00      5686          move.l    D0,-(A7)
00003364  4884      5687          ext.w     D4
00003366  48C4      5688          ext.l     D4
00003368  2F04      5689          move.l    D4,-(A7)
0000336A  4EB8 2AFC 5690          jsr       _Get4HexDigitsForMemTest
0000336E  584F      5691          addq.w    #4,A7
00003370  2200      5692          move.l    D0,D1
00003372  201F      5693          move.l    (A7)+,D0
00003374  2F01      5694          move.l    D1,-(A7)
00003376  2F03      5695          move.l    D3,-(A7)
00003378  2F02      5696          move.l    D2,-(A7)
0000337A  4E94      5697          jsr       (A4)
0000337C  DEFC 0010 5698          add.w     #16,A7
                    5699   ; break;
00003380  6000 0046 5700          bra       MemoryTest_34
                    5701   MemoryTest_37:
                    5702   ; case 3: ReadMemoryForMemTest(start_val, end_val, Get8HexDigitsForMemTest(digit), 3);
00003384  4878 0003 5703          pea       3
00003388  2F00      5704          move.l    D0,-(A7)
0000338A  4884      5705          ext.w     D4
0000338C  48C4      5706          ext.l     D4
0000338E  2F04      5707          move.l    D4,-(A7)
00003390  4EB8 2B4E 5708          jsr       _Get8HexDigitsForMemTest
00003394  584F      5709          addq.w    #4,A7
00003396  2200      5710          move.l    D0,D1
00003398  201F      5711          move.l    (A7)+,D0
0000339A  2F01      5712          move.l    D1,-(A7)
0000339C  2F03      5713          move.l    D3,-(A7)
0000339E  2F02      5714          move.l    D2,-(A7)
000033A0  4E94      5715          jsr       (A4)
000033A2  DEFC 0010 5716          add.w     #16,A7
                    5717   ; break;
000033A6  6020      5718          bra.s     MemoryTest_34
                    5719   MemoryTest_33:
                    5720   ; default: ReadMemoryForMemTest(start_val, end_val, Get2HexDigitsForMemTest(digit), 1);;
000033A8  4878 0001 5721          pea       1
000033AC  2F00      5722          move.l    D0,-(A7)
000033AE  4884      5723          ext.w     D4
000033B0  48C4      5724          ext.l     D4
000033B2  2F04      5725          move.l    D4,-(A7)
000033B4  4E95      5726          jsr       (A5)
000033B6  584F      5727          addq.w    #4,A7
000033B8  2200      5728          move.l    D0,D1
000033BA  201F      5729          move.l    (A7)+,D0
000033BC  2F01      5730          move.l    D1,-(A7)
000033BE  2F03      5731          move.l    D3,-(A7)
000033C0  2F02      5732          move.l    D2,-(A7)
000033C2  4E94      5733          jsr       (A4)
000033C4  DEFC 0010 5734          add.w     #16,A7
                    5735   MemoryTest_34:
                    5736   ; }
                    5737   ; printf("\r\nFinished reading from SRAM ...");
000033C8  4879 0000 5738          pea       @m68kde~1_168.L
000033CC  606A      
000033CE  4E92      5739          jsr       (A2)
000033D0  584F      5740          addq.w    #4,A7
                    5741   ; printf("\r\nend of program ...");
000033D2  4879 0000 5742          pea       @m68kde~1_169.L
000033D6  608C      
000033D8  4E92      5743          jsr       (A2)
000033DA  584F      5744          addq.w    #4,A7
                    5745   ; printf("\r\n............................................................................................................");
000033DC  4879 0000 5746          pea       @m68kde~1_163.L
000033E0  5F86      
000033E2  4E92      5747          jsr       (A2)
000033E4  584F      5748          addq.w    #4,A7
                    5749   ; printf("\r\n............................................................................................................");
000033E6  4879 0000 5750          pea       @m68kde~1_163.L
000033EA  5F86      
000033EC  4E92      5751          jsr       (A2)
000033EE  584F      5752          addq.w    #4,A7
000033F0  4CDF 3CFC 5753          movem.l   (A7)+,D2/D3/D4/D5/D6/D7/A2/A3/A4/A5
000033F4  4E5E      5754          unlk      A6
000033F6  4E75      5755          rts
                    5756   ; }
                    5757   ; void main(void)
                    5758   ; {
                    5759   _main:
000033F8  4E56 FFF0 5760          link      A6,#-16
000033FC  48E7 3030 5761          movem.l   D2/D3/A2/A3,-(A7)
00003400  45F8 0A30 5762          lea       _InstallExceptionHandler.L,A2
00003404  47F9 0000 5763          lea       _printf.L,A3
00003408  41E4      
                    5764   ; char c;
                    5765   ; int i, j;
                    5766   ; char* BugMessage = "DE1-68k Bug V1.77";
0000340A  41F9 0000 5767          lea       @m68kde~1_170.L,A0
0000340E  60A2      
00003410  2608      5768          move.l    A0,D3
                    5769   ; char* CopyrightMessage = "Copyright (C) PJ Davies 2016";
00003412  41F9 0000 5770          lea       @m68kde~1_171.L,A0
00003416  60B4      
00003418  2D48 FFF6 5771          move.l    A0,-10(A6)
                    5772   ; int test;
                    5773   ; char value;
                    5774   ; KillAllBreakPoints();
0000341C  4EB8 216A 5775          jsr       _KillAllBreakPoints
                    5776   ; i = x = y = z = PortA_Count = 0;
00003420  42B9 0803 5777          clr.l     _PortA_Count.L
00003424  00D4      
00003426  42B9 0803 5778          clr.l     _z.L
0000342A  00D0      
0000342C  42B9 0803 5779          clr.l     _y.L
00003430  00CC      
00003432  42B9 0803 5780          clr.l     _x.L
00003436  00C8      
00003438  4282      5781          clr.l     D2
                    5782   ; Trace = GoFlag = 0;                       // used in tracing/single stepping
0000343A  42B9 0803 5783          clr.l     _GoFlag.L
0000343E  00DC      
00003440  42B9 0803 5784          clr.l     _Trace.L
00003444  00D8      
                    5785   ; Echo = 1;
00003446  23FC 0000 5786          move.l    #1,_Echo.L
0000344A  0001 0803 
0000344E  00E0      
                    5787   ; d0 = d1 = d2 = d3 = d4 = d5 = d6 = d7 = 0;
00003450  42B9 0803 5788          clr.l     _d7.L
00003454  0100      
00003456  42B9 0803 5789          clr.l     _d6.L
0000345A  00FC      
0000345C  42B9 0803 5790          clr.l     _d5.L
00003460  00F8      
00003462  42B9 0803 5791          clr.l     _d4.L
00003466  00F4      
00003468  42B9 0803 5792          clr.l     _d3.L
0000346C  00F0      
0000346E  42B9 0803 5793          clr.l     _d2.L
00003472  00EC      
00003474  42B9 0803 5794          clr.l     _d1.L
00003478  00E8      
0000347A  42B9 0803 5795          clr.l     _d0.L
0000347E  00E4      
                    5796   ; a0 = a1 = a2 = a3 = a4 = a5 = a6 = 0;
00003480  42B9 0803 5797          clr.l     _a6.L
00003484  011C      
00003486  42B9 0803 5798          clr.l     _a5.L
0000348A  0118      
0000348C  42B9 0803 5799          clr.l     _a4.L
00003490  0114      
00003492  42B9 0803 5800          clr.l     _a3.L
00003496  0110      
00003498  42B9 0803 5801          clr.l     _a2.L
0000349C  010C      
0000349E  42B9 0803 5802          clr.l     _a1.L
000034A2  0108      
000034A4  42B9 0803 5803          clr.l     _a0.L
000034A8  0104      
                    5804   ; PC = ProgramStart, SSP = TopOfStack, USP = TopOfStack;
000034AA  23FC 0800 5805          move.l    #134217728,_PC.L
000034AE  0000 0803 
000034B2  0120      
000034B4  23FC 0C00 5806          move.l    #201326592,_SSP.L
000034B8  0000 0803 
000034BC  0124      
000034BE  23FC 0C00 5807          move.l    #201326592,_USP.L
000034C2  0000 0803 
000034C6  0128      
                    5808   ; SR = 0x2000;                            // clear interrupts enable tracing  uses IRQ6
000034C8  33FC 2000 5809          move.w    #8192,_SR.L
000034CC  0803 012C 
                    5810   ; // Initialise Breakpoint variables
                    5811   ; for (i = 0; i < 8; i++) {
000034D0  4282      5812          clr.l     D2
                    5813   main_1:
000034D2  0C82 0000 5814          cmp.l     #8,D2
000034D6  0008      
000034D8  6C00 004C 5815          bge       main_3
                    5816   ; BreakPointAddress[i] = 0;               //array of 8 breakpoint addresses
000034DC  2002      5817          move.l    D2,D0
000034DE  E588      5818          lsl.l     #2,D0
000034E0  41F9 0803 5819          lea       _BreakPointAddress.L,A0
000034E4  012E      
000034E6  42B0 0800 5820          clr.l     0(A0,D0.L)
                    5821   ; WatchPointAddress[i] = 0;
000034EA  2002      5822          move.l    D2,D0
000034EC  E588      5823          lsl.l     #2,D0
000034EE  41F9 0803 5824          lea       _WatchPointAddress.L,A0
000034F2  0182      
000034F4  42B0 0800 5825          clr.l     0(A0,D0.L)
                    5826   ; BreakPointInstruction[i] = 0;           // to hold the instruction at the break point
000034F8  2002      5827          move.l    D2,D0
000034FA  E388      5828          lsl.l     #1,D0
000034FC  41F9 0803 5829          lea       _BreakPointInstruction.L,A0
00003500  014E      
00003502  4270 0800 5830          clr.w     0(A0,D0.L)
                    5831   ; BreakPointSetOrCleared[i] = 0;          // indicates if break point set
00003506  2002      5832          move.l    D2,D0
00003508  E588      5833          lsl.l     #2,D0
0000350A  41F9 0803 5834          lea       _BreakPointSetOrCleared.L,A0
0000350E  015E      
00003510  42B0 0800 5835          clr.l     0(A0,D0.L)
                    5836   ; WatchPointSetOrCleared[i] = 0;
00003514  2002      5837          move.l    D2,D0
00003516  E588      5838          lsl.l     #2,D0
00003518  41F9 0803 5839          lea       _WatchPointSetOrCleared.L,A0
0000351C  01A2      
0000351E  42B0 0800 5840          clr.l     0(A0,D0.L)
00003522  5282      5841          addq.l    #1,D2
00003524  60AC      5842          bra       main_1
                    5843   main_3:
                    5844   ; }
                    5845   ; Init_RS232();     // initialise the RS232 port
00003526  4EB8 0B12 5846          jsr       _Init_RS232
                    5847   ; Init_LCD();
0000352A  4EB8 095E 5848          jsr       _Init_LCD
                    5849   ; for (i = 32; i < 48; i++)
0000352E  7420      5850          moveq     #32,D2
                    5851   main_4:
00003530  0C82 0000 5852          cmp.l     #48,D2
00003534  0030      
00003536  6C0E      5853          bge.s     main_6
                    5854   ; InstallExceptionHandler(UnhandledTrap, i);		        // install Trap exception handler on vector 32-47
00003538  2F02      5855          move.l    D2,-(A7)
0000353A  4878 29E2 5856          pea       _UnhandledTrap.L
0000353E  4E92      5857          jsr       (A2)
00003540  504F      5858          addq.w    #8,A7
00003542  5282      5859          addq.l    #1,D2
00003544  60EA      5860          bra       main_4
                    5861   main_6:
                    5862   ; InstallExceptionHandler(menu, 47);		                   // TRAP #15 call debug and end program
00003546  4878 002F 5863          pea       47
0000354A  4878 26BC 5864          pea       _menu.L
0000354E  4E92      5865          jsr       (A2)
00003550  504F      5866          addq.w    #8,A7
                    5867   ; InstallExceptionHandler(UnhandledIRQ1, 25);		      // install handler for interrupts
00003552  4878 0019 5868          pea       25
00003556  4878 2988 5869          pea       _UnhandledIRQ1.L
0000355A  4E92      5870          jsr       (A2)
0000355C  504F      5871          addq.w    #8,A7
                    5872   ; InstallExceptionHandler(UnhandledIRQ2, 26);		      // install handler for interrupts
0000355E  4878 001A 5873          pea       26
00003562  4878 2994 5874          pea       _UnhandledIRQ2.L
00003566  4E92      5875          jsr       (A2)
00003568  504F      5876          addq.w    #8,A7
                    5877   ; InstallExceptionHandler(UnhandledIRQ3, 27);		      // install handler for interrupts
0000356A  4878 001B 5878          pea       27
0000356E  4878 29A0 5879          pea       _UnhandledIRQ3.L
00003572  4E92      5880          jsr       (A2)
00003574  504F      5881          addq.w    #8,A7
                    5882   ; InstallExceptionHandler(UnhandledIRQ4, 28);		      // install handler for interrupts
00003576  4878 001C 5883          pea       28
0000357A  4878 29AC 5884          pea       _UnhandledIRQ4.L
0000357E  4E92      5885          jsr       (A2)
00003580  504F      5886          addq.w    #8,A7
                    5887   ; InstallExceptionHandler(UnhandledIRQ5, 29);		      // install handler for interrupts
00003582  4878 001D 5888          pea       29
00003586  4878 29B8 5889          pea       _UnhandledIRQ5.L
0000358A  4E92      5890          jsr       (A2)
0000358C  504F      5891          addq.w    #8,A7
                    5892   ; InstallExceptionHandler(UnhandledIRQ6, 30);		      // install handler for interrupts
0000358E  4878 001E 5893          pea       30
00003592  4878 29C4 5894          pea       _UnhandledIRQ6.L
00003596  4E92      5895          jsr       (A2)
00003598  504F      5896          addq.w    #8,A7
                    5897   ; InstallExceptionHandler(UnhandledIRQ7, 31);		      // install handler for interrupts
0000359A  4878 001F 5898          pea       31
0000359E  4878 29D6 5899          pea       _UnhandledIRQ7.L
000035A2  4E92      5900          jsr       (A2)
000035A4  504F      5901          addq.w    #8,A7
                    5902   ; InstallExceptionHandler(HandleBreakPoint, 46);		           // install Trap 14 Break Point exception handler on vector 46
000035A6  4878 002E 5903          pea       46
000035AA  4878 23F8 5904          pea       _HandleBreakPoint.L
000035AE  4E92      5905          jsr       (A2)
000035B0  504F      5906          addq.w    #8,A7
                    5907   ; InstallExceptionHandler(DumpRegistersandPause, 29);		   // install TRACE handler for IRQ5 on vector 29
000035B2  4878 001D 5908          pea       29
000035B6  4878 1AD8 5909          pea       _DumpRegistersandPause.L
000035BA  4E92      5910          jsr       (A2)
000035BC  504F      5911          addq.w    #8,A7
                    5912   ; InstallExceptionHandler(BusError, 2);                          // install Bus error handler
000035BE  4878 0002 5913          pea       2
000035C2  4878 29F0 5914          pea       _BusError.L
000035C6  4E92      5915          jsr       (A2)
000035C8  504F      5916          addq.w    #8,A7
                    5917   ; InstallExceptionHandler(AddressError, 3);                      // install address error handler (doesn't work on soft core 68k implementation)
000035CA  4878 0003 5918          pea       3
000035CE  4878 29FE 5919          pea       _AddressError.L
000035D2  4E92      5920          jsr       (A2)
000035D4  504F      5921          addq.w    #8,A7
                    5922   ; InstallExceptionHandler(IllegalInstruction, 4);                // install illegal instruction exception handler
000035D6  4878 0004 5923          pea       4
000035DA  4878 2A0C 5924          pea       _IllegalInstruction.L
000035DE  4E92      5925          jsr       (A2)
000035E0  504F      5926          addq.w    #8,A7
                    5927   ; InstallExceptionHandler(Dividebyzero, 5);                      // install /0 exception handler
000035E2  4878 0005 5928          pea       5
000035E6  4878 2A1A 5929          pea       _Dividebyzero.L
000035EA  4E92      5930          jsr       (A2)
000035EC  504F      5931          addq.w    #8,A7
                    5932   ; InstallExceptionHandler(Check, 6);                             // install check instruction exception handler
000035EE  4878 0006 5933          pea       6
000035F2  4878 2A28 5934          pea       _Check.L
000035F6  4E92      5935          jsr       (A2)
000035F8  504F      5936          addq.w    #8,A7
                    5937   ; InstallExceptionHandler(Trapv, 7);                             // install trapv instruction exception handler
000035FA  4878 0007 5938          pea       7
000035FE  4878 2A36 5939          pea       _Trapv.L
00003602  4E92      5940          jsr       (A2)
00003604  504F      5941          addq.w    #8,A7
                    5942   ; InstallExceptionHandler(PrivError, 8);                         // install Priv Violation exception handler
00003606  4878 0008 5943          pea       8
0000360A  4878 2A44 5944          pea       _PrivError.L
0000360E  4E92      5945          jsr       (A2)
00003610  504F      5946          addq.w    #8,A7
                    5947   ; InstallExceptionHandler(UnitIRQ, 15);                          // install uninitialised IRQ exception handler
00003612  4878 000F 5948          pea       15
00003616  4878 2A52 5949          pea       _UnitIRQ.L
0000361A  4E92      5950          jsr       (A2)
0000361C  504F      5951          addq.w    #8,A7
                    5952   ; InstallExceptionHandler(Check, 24);                            // install spurious IRQ exception handler
0000361E  4878 0018 5953          pea       24
00003622  4878 2A28 5954          pea       _Check.L
00003626  4E92      5955          jsr       (A2)
00003628  504F      5956          addq.w    #8,A7
                    5957   ; FlushKeyboard();                        // dump unread characters from keyboard
0000362A  4EB8 0BA6 5958          jsr       _FlushKeyboard
                    5959   ; TraceException = 0;                     // clear trace exception port to remove any software generated single step/trace
0000362E  4239 0040 5960          clr.b     4194314
00003632  000A      
                    5961   ; // test for auto flash boot and run from Flash by reading switch 9 on DE1-soc board. If set, copy program from flash into Dram and run
                    5962   ; while (((char)(PortB & 0x02)) == (char)(0x02)) {
                    5963   main_7:
00003634  1039 0040 5964          move.b    4194306,D0
00003638  0002      
0000363A  C03C 0002 5965          and.b     #2,D0
0000363E  0C00 0002 5966          cmp.b     #2,D0
00003642  662A      5967          bne.s     main_9
                    5968   ; LoadFromFlashChip();
00003644  4EB8 1576 5969          jsr       _LoadFromFlashChip
                    5970   ; printf("\r\nRunning.....");
00003648  4879 0000 5971          pea       @m68kde~1_172.L
0000364C  60D2      
0000364E  4E93      5972          jsr       (A3)
00003650  584F      5973          addq.w    #4,A7
                    5974   ; Oline1("Running.....");
00003652  4879 0000 5975          pea       @m68kde~1_173.L
00003656  60E2      
00003658  4EB8 0A02 5976          jsr       _Oline1
0000365C  584F      5977          addq.w    #4,A7
                    5978   ; GoFlag = 1;
0000365E  23FC 0000 5979          move.l    #1,_GoFlag.L
00003662  0001 0803 
00003666  00DC      
                    5980   ; go();
00003668  4EB8 08B8 5981          jsr       _go
0000366C  60C6      5982          bra       main_7
                    5983   main_9:
                    5984   ; }
                    5985   ; // otherwise start the debug monitor
                    5986   ; Oline0(BugMessage);
0000366E  2F03      5987          move.l    D3,-(A7)
00003670  4EB8 09D4 5988          jsr       _Oline0
00003674  584F      5989          addq.w    #4,A7
                    5990   ; Oline1("By: PJ Davies");
00003676  4879 0000 5991          pea       @m68kde~1_174.L
0000367A  60F0      
0000367C  4EB8 0A02 5992          jsr       _Oline1
00003680  584F      5993          addq.w    #4,A7
                    5994   ; printf("\r\n%s", BugMessage);
00003682  2F03      5995          move.l    D3,-(A7)
00003684  4879 0000 5996          pea       @m68kde~1_175.L
00003688  60FE      
0000368A  4E93      5997          jsr       (A3)
0000368C  504F      5998          addq.w    #8,A7
                    5999   ; printf("\r\n%s", CopyrightMessage);
0000368E  2F2E FFF6 6000          move.l    -10(A6),-(A7)
00003692  4879 0000 6001          pea       @m68kde~1_175.L
00003696  60FE      
00003698  4E93      6002          jsr       (A3)
0000369A  504F      6003          addq.w    #8,A7
                    6004   ; printf("\r\nNancy Makar - 33464918 and Steven Chin - 40108540");
0000369C  4879 0000 6005          pea       @m68kde~1_176.L
000036A0  6104      
000036A2  4E93      6006          jsr       (A3)
000036A4  584F      6007          addq.w    #4,A7
                    6008   ; menu();
000036A6  4EB8 26BC 6009          jsr       _menu
000036AA  4CDF 0C0C 6010          movem.l   (A7)+,D2/D3/A2/A3
000036AE  4E5E      6011          unlk      A6
000036B0  4E75      6012          rts
                    6013   ; }
                    6014   _strcpy:
000036B2  206F 0004 6015          move.l    (4,A7),A0
000036B6  226F 0008 6016          move.l    (8,A7),A1
000036BA  2008      6017          move.l    A0,D0
                    6018   strcpy_1:
000036BC  10D9      6019          move.b    (A1)+,(A0)+
000036BE  66FC      6020          bne       strcpy_1
000036C0  4E75      6021          rts
                    6022   ULDIV:
000036C2  4E56 0000 6023          link    A6,#0
000036C6  48E7 C000 6024          movem.l D0/D1,-(A7)
000036CA  222E 0008 6025          move.l  8(A6),D1
000036CE  202E 000C 6026          move.l  12(A6),D0
000036D2  6036      6027          bra.s   ldiv_3
                    6028   LDIV:
000036D4  4E56 0000 6029          link    A6,#0
000036D8  48E7 C000 6030          movem.l D0/D1,-(A7)
000036DC  222E 0008 6031          move.l  8(A6),D1
000036E0  202E 000C 6032          move.l  12(A6),D0
000036E4  4A80      6033          tst.l   D0
000036E6  6A0E      6034          bpl.s   ldiv_1
000036E8  4480      6035          neg.l   D0
000036EA  4A81      6036          tst.l   D1
000036EC  6A14      6037          bpl.s   ldiv_2
000036EE  4481      6038          neg.l   D1
000036F0  612A      6039          bsr.s   dodiv
000036F2  4481      6040          neg.l   D1
000036F4  6016      6041          bra.s   ldiv_4
                    6042   ldiv_1:
000036F6  4A81      6043          tst.l   D1
000036F8  6A10      6044          bpl.s   ldiv_3
000036FA  4481      6045          neg.l   D1
000036FC  611E      6046          bsr.s   dodiv
000036FE  4480      6047          neg.l   D0
00003700  600A      6048          bra.s   ldiv_4
                    6049   ldiv_2:
00003702  6118      6050          bsr.s   dodiv
00003704  4480      6051          neg.l   D0
00003706  4481      6052          neg.l   D1
00003708  6002      6053          bra.s   ldiv_4
                    6054   ldiv_3:
0000370A  6110      6055          bsr.s   dodiv
                    6056   ldiv_4:
0000370C  2D40 0008 6057          move.l  D0,8(A6)
00003710  2D41 000C 6058          move.l  D1,12(A6)
00003714  4CDF 0003 6059          movem.l (A7)+,D0/D1
00003718  4E5E      6060          unlk    A6
0000371A  4E75      6061          rts
                    6062   dodiv:
0000371C  0C81 0000 6063          cmpi.l  #$FFFF,D1
00003720  FFFF      
00003722  6236      6064          bhi.s   dodiv_2
00003724  0C80 0000 6065          cmpi.l  #$FFFF,D0
00003728  FFFF      
0000372A  6210      6066          bhi.s   dodiv_1
0000372C  80C1      6067          divu    D1,D0
0000372E  2200      6068          move.l  D0,D1
00003730  4241      6069          clr.w   D1
00003732  4841      6070          swap    D1
00003734  0280 0000 6071          andi.l  #$FFFF,D0
00003738  FFFF      
0000373A  4E75      6072          rts
                    6073   dodiv_1:
0000373C  48A7 A000 6074          movem.w D0/D2,-(A7)
00003740  4240      6075          clr.w   D0
00003742  4840      6076          swap    D0
00003744  80C1      6077          divu    D1,D0
00003746  3400      6078          move.w  D0,D2
00003748  301F      6079          move.w  (A7)+,D0
0000374A  80C1      6080          divu    D1,D0
0000374C  4840      6081          swap    D0
0000374E  4281      6082          clr.l   D1
00003750  3200      6083          move.w  D0,D1
00003752  3002      6084          move.w  D2,D0
00003754  4840      6085          swap    D0
00003756  341F      6086          move.w  (A7)+,D2
00003758  4E75      6087          rts
                    6088   dodiv_2:
0000375A  48E7 3800 6089          movem.l D2/D3/D4,-(A7)
0000375E  2401      6090          move.l  D1,D2
00003760  4242      6091          clr.w   D2
00003762  4842      6092          swap    D2
00003764  5282      6093          addq.l  #1,D2
00003766  2600      6094          move.l  D0,D3
00003768  2801      6095          move.l  D1,D4
0000376A  2202      6096          move.l  D2,D1
0000376C  61CE      6097          bsr.s   dodiv_1
0000376E  2204      6098          move.l  D4,D1
00003770  82C2      6099          divu    D2,D1
00003772  80C1      6100          divu    D1,D0
00003774  0280 0000 6101          andi.l  #$FFFF,D0
00003778  FFFF      
                    6102   dodiv_3:
0000377A  2204      6103          move.l  D4,D1
0000377C  2404      6104          move.l  D4,D2
0000377E  4842      6105          swap    D2
00003780  C2C0      6106          mulu    D0,D1
00003782  C4C0      6107          mulu    D0,D2
00003784  4842      6108          swap    D2
00003786  D282      6109          add.l   D2,D1
00003788  9283      6110          sub.l   D3,D1
0000378A  620A      6111          bhi.s   dodiv_4
0000378C  4481      6112          neg.l   D1
0000378E  B881      6113          cmp.l   D1,D4
00003790  6208      6114          bhi.s   dodiv_5
00003792  5280      6115          addq.l  #1,D0
00003794  60E4      6116          bra.s   dodiv_3
                    6117   dodiv_4:
00003796  5380      6118          subq.l  #1,D0
00003798  60E0      6119          bra.s   dodiv_3
                    6120   dodiv_5:
0000379A  4CDF 001C 6121          movem.l (A7)+,D2/D3/D4
0000379E  4E75      6122          rts
                    6123   ULMUL:
000037A0  4E56 0000 6124          link    A6,#0
000037A4  48E7 C000 6125          movem.l D0/D1,-(A7)
000037A8  222E 0008 6126          move.l  8(A6),D1
000037AC  202E 000C 6127          move.l  12(A6),D0
000037B0  602C      6128          bra.s   lmul_3
                    6129   LMUL:
000037B2  4E56 0000 6130          link    A6,#0
000037B6  48E7 C000 6131          movem.l D0/D1,-(A7)
000037BA  222E 0008 6132          move.l  8(A6),D1
000037BE  202E 000C 6133          move.l  12(A6),D0
000037C2  4A80      6134          tst.l   D0
000037C4  6A0A      6135          bpl.s   lmul_1
000037C6  4480      6136          neg.l   D0
000037C8  4A81      6137          tst.l   D1
000037CA  6A0A      6138          bpl.s   lmul_2
000037CC  4481      6139          neg.l   D1
000037CE  600E      6140          bra.s   lmul_3
                    6141   lmul_1:
000037D0  4A81      6142          tst.l   D1
000037D2  6A0A      6143          bpl.s   lmul_3
000037D4  4481      6144          neg.l   D1
                    6145   lmul_2:
000037D6  6114      6146          bsr.s   domul
000037D8  4481      6147          neg.l   D1
000037DA  4080      6148          negx.l  D0
000037DC  6002      6149          bra.s   lmul_4
                    6150   lmul_3:
000037DE  610C      6151          bsr.s   domul
                    6152   lmul_4:
000037E0  2D41 0008 6153          move.l  D1,8(A6)
000037E4  4CDF 0003 6154          movem.l (A7)+,D0/D1
000037E8  4E5E      6155          unlk    A6
000037EA  4E75      6156          rts
                    6157   domul:
000037EC  0C81 0000 6158          cmpi.l  #$FFFF,D1
000037F0  FFFF      
000037F2  620C      6159          bhi.s   domul_1
000037F4  0C80 0000 6160          cmpi.l  #$FFFF,D0
000037F8  FFFF      
000037FA  620E      6161          bhi.s   domul_2
000037FC  C2C0      6162          mulu    D0,D1
000037FE  4E75      6163          rts
                    6164   domul_1:
00003800  0C80 0000 6165          cmpi.l  #$FFFF,D0
00003804  FFFF      
00003806  6218      6166          bhi.s   domul_4
00003808  6002      6167          bra.s   domul_3
                    6168   domul_2
0000380A  C141      6169          exg     D0,D1
                    6170   domul_3:
0000380C  2F02      6171          move.l  D2,-(A7)
0000380E  2401      6172          move.l  D1,D2
00003810  4842      6173          swap    D2
00003812  C2C0      6174          mulu    D0,D1
00003814  C4C0      6175          mulu    D0,D2
00003816  4842      6176          swap    D2
00003818  4242      6177          clr.w   D2
0000381A  D282      6178          add.l   D2,D1
0000381C  241F      6179          move.l  (A7)+,D2
0000381E  4E75      6180          rts
                    6181   domul_4:
00003820  48E7 3000 6182          movem.l D2/D3,-(A7)
00003824  2401      6183          move.l  D1,D2
00003826  2601      6184          move.l  D1,D3
00003828  C2C0      6185          mulu    D0,D1
0000382A  4842      6186          swap    D2
0000382C  C4C0      6187          mulu    D0,D2
0000382E  4840      6188          swap    D0
00003830  C6C0      6189          mulu    D0,D3
00003832  D483      6190          add.l   D3,D2
00003834  4842      6191          swap    D2
00003836  4242      6192          clr.w   D2
00003838  D282      6193          add.l   D2,D1
0000383A  4CDF 000C 6194          movem.l (A7)+,D2/D3
0000383E  4E75      6195          rts
                    6196   _putch:
00003840  4E56 0000 6197          link      A6,#0
00003844  48E7 2000 6198          movem.l   D2,-(A7)
00003848  242E 0008 6199          move.l    8(A6),D2
0000384C  0C82 0000 6200          cmp.l     #10,D2
00003850  000A      
00003852  660A      6201          bne.s     putch_1
00003854  4878 000D 6202          pea       13
00003858  6100 D2E2 6203          bsr       __putch
0000385C  584F      6204          addq.w    #4,A7
                    6205   putch_1:
0000385E  2F02      6206          move.l    D2,-(A7)
00003860  6100 D2DA 6207          bsr       __putch
00003864  584F      6208          addq.w    #4,A7
00003866  2002      6209          move.l    D2,D0
00003868  4CDF 0004 6210          movem.l   (A7)+,D2
0000386C  4E5E      6211          unlk      A6
0000386E  4E75      6212          rts
                    6213   _getch:
00003870  48E7 2000 6214          movem.l   D2,-(A7)
00003874  2439 0803 6215          move.l    __ungetbuf,D2
00003878  00C0      
0000387A  2039 0803 6216          move.l    __ungetbuf,D0
0000387E  00C0      
00003880  0C80 FFFF 6217          cmp.l     #-1,D0
00003884  FFFF      
00003886  670C      6218          beq.s     getch_1
00003888  23FC FFFF 6219          move.l    #-1,__ungetbuf
0000388C  FFFF 0803 
00003890  00C0      
00003892  6010      6220          bra.s     getch_3
                    6221   getch_1:
00003894  6100 D2D2 6222          bsr       __getch
00003898  2400      6223          move.l    D0,D2
0000389A  0C80 0000 6224          cmp.l     #13,D0
0000389E  000D      
000038A0  6602      6225          bne.s     getch_3
000038A2  740A      6226          moveq     #10,D2
                    6227   getch_3:
000038A4  2002      6228          move.l    D2,D0
000038A6  4CDF 0004 6229          movem.l   (A7)+,D2
000038AA  4E75      6230          rts
                    6231   _tolower:
000038AC  4E56 0000 6232          link      A6,#0
000038B0  48E7 2000 6233          movem.l   D2,-(A7)
000038B4  242E 0008 6234          move.l    8(A6),D2
000038B8  0C82 0000 6235          cmp.l     #65,D2
000038BC  0041      
000038BE  6D0E      6236          blt.s     tolower_1
000038C0  0C82 0000 6237          cmp.l     #90,D2
000038C4  005A      
000038C6  6E06      6238          bgt.s     tolower_1
000038C8  84BC 0000 6239          or.l      #32,D2
000038CC  0020      
                    6240   tolower_1:
000038CE  2002      6241          move.l    D2,D0
000038D0  4CDF 0004 6242          movem.l   (A7)+,D2
000038D4  4E5E      6243          unlk      A6
000038D6  4E75      6244          rts
                    6245   _sprintf:
000038D8  4E56 FFFC 6246          link      A6,#-4
000038DC  48E7 2000 6247          movem.l   D2,-(A7)
000038E0  41EE 000C 6248          lea       12(A6),A0
000038E4  5848      6249          addq.w    #4,A0
000038E6  2408      6250          move.l    A0,D2
000038E8  2F02      6251          move.l    D2,-(A7)
000038EA  2F2E 000C 6252          move.l    12(A6),-(A7)
000038EE  2F2E 0008 6253          move.l    8(A6),-(A7)
000038F2  6100 09D4 6254          bsr       _vsprintf
000038F6  DEFC 000C 6255          add.w     #12,A7
000038FA  2D40 FFFC 6256          move.l    D0,-4(A6)
000038FE  4282      6257          clr.l     D2
00003900  202E FFFC 6258          move.l    -4(A6),D0
00003904  4CDF 0004 6259          movem.l   (A7)+,D2
00003908  4E5E      6260          unlk      A6
0000390A  4E75      6261          rts
                    6262   _strcat:
0000390C  206F 0004 6263          move.l    (4,A7),A0	
00003910  226F 0008 6264          move.l    (8,A7),A1	
00003914  2008      6265          move.l    A0,D0		
                    6266   strcat_0:
00003916  4A18      6267          tst.b     (A0)+
00003918  66FC      6268          bne       strcat_0
0000391A  5348      6269          subq      #1,A0
                    6270   strcat_1:
0000391C  10D9      6271          move.b    (A1)+,(A0)+
0000391E  66FC      6272          bne       strcat_1
00003920  4E75      6273          rts
                    6274   _toupper:
00003922  4E56 0000 6275          link      A6,#0
00003926  48E7 2000 6276          movem.l   D2,-(A7)
0000392A  242E 0008 6277          move.l    8(A6),D2
0000392E  0C82 0000 6278          cmp.l     #97,D2
00003932  0061      
00003934  6D0E      6279          blt.s     toupper_1
00003936  0C82 0000 6280          cmp.l     #122,D2
0000393A  007A      
0000393C  6E06      6281          bgt.s     toupper_1
0000393E  C4BC 0000 6282          and.l     #95,D2
00003942  005F      
                    6283   toupper_1:
00003944  2002      6284          move.l    D2,D0
00003946  4CDF 0004 6285          movem.l   (A7)+,D2
0000394A  4E5E      6286          unlk      A6
0000394C  4E75      6287          rts
                    6288   @vsscanf_scanread:
0000394E  4E56 FFFC 6289          link      A6,#-4
00003952  48E7 0020 6290          movem.l   A2,-(A7)
00003956  45F9 0000 6291          lea       @vsscanf_bufx,A2
0000395A  6138      
0000395C  4AAE 0008 6292          tst.l     8(A6)
00003960  6722      6293          beq.s     @vsscanf_scanread_1
00003962  206E 0008 6294          move.l    8(A6),A0
00003966  58AE 0008 6295          addq.l    #4,8(A6)
0000396A  2050      6296          move.l    (A0),A0
0000396C  1010      6297          move.b    (A0),D0
0000396E  4880      6298          ext.w     D0
00003970  48C0      6299          ext.l     D0
00003972  2D40 FFFC 6300          move.l    D0,-4(A6)
00003976  6706      6301          beq.s     @vsscanf_scanread_3
00003978  202E FFFC 6302          move.l    -4(A6),D0
0000397C  6002      6303          bra.s     @vsscanf_scanread_4
                    6304   @vsscanf_scanread_3:
0000397E  70FF      6305          moveq     #-1,D0
                    6306   @vsscanf_scanread_4:
00003980  6000 0032 6307          bra       @vsscanf_scanread_5
                    6308   @vsscanf_scanread_1:
00003984  2052      6309          move.l    (A2),A0
00003986  1010      6310          move.b    (A0),D0
00003988  6620      6311          bne.s     @vsscanf_scanread_6
0000398A  4879 0803 6312          pea       @vsscanf_buf
0000398E  0546      
00003990  6100 0F98 6313          bsr       _gets
00003994  584F      6314          addq.w    #4,A7
00003996  2480      6315          move.l    D0,(A2)
00003998  4879 0000 6316          pea       @vsscanf_1
0000399C  613C      
0000399E  4879 0803 6317          pea       @vsscanf_buf
000039A2  0546      
000039A4  6100 FF66 6318          bsr       _strcat
000039A8  504F      6319          addq.w    #8,A7
                    6320   @vsscanf_scanread_6:
000039AA  2052      6321          move.l    (A2),A0
000039AC  5292      6322          addq.l    #1,(A2)
000039AE  1010      6323          move.b    (A0),D0
000039B0  4880      6324          ext.w     D0
000039B2  48C0      6325          ext.l     D0
                    6326   @vsscanf_scanread_5:
000039B4  4CDF 0400 6327          movem.l   (A7)+,A2
000039B8  4E5E      6328          unlk      A6
000039BA  4E75      6329          rts
                    6330   @vsscanf_scanputback:
000039BC  4E56 0000 6331          link      A6,#0
000039C0  48E7 3000 6332          movem.l   D2/D3,-(A7)
000039C4  242E 000C 6333          move.l    12(A6),D2
000039C8  262E 0008 6334          move.l    8(A6),D3
000039CC  6718      6335          beq.s     @vsscanf_scanputback_1
000039CE  0C82 FFFF 6336          cmp.l     #-1,D2
000039D2  FFFF      
000039D4  670A      6337          beq.s     @vsscanf_scanputback_3
000039D6  5983      6338          subq.l    #4,D3
000039D8  2043      6339          move.l    D3,A0
000039DA  2050      6340          move.l    (A0),A0
000039DC  1082      6341          move.b    D2,(A0)
000039DE  6004      6342          bra.s     @vsscanf_scanputback_4
                    6343   @vsscanf_scanputback_3:
000039E0  2043      6344          move.l    D3,A0
000039E2  5390      6345          subq.l    #1,(A0)
                    6346   @vsscanf_scanputback_4:
000039E4  602E      6347          bra.s     @vsscanf_scanputback_6
                    6348   @vsscanf_scanputback_1:
000039E6  41F9 0803 6349          lea       @vsscanf_buf,A0
000039EA  0546      
000039EC  2008      6350          move.l    A0,D0
000039EE  B0B9 0000 6351          cmp.l     @vsscanf_bufx,D0
000039F2  6138      
000039F4  6610      6352          bne.s     @vsscanf_scanputback_5
000039F6  4239 0803 6353          clr.b     @vsscanf_buf
000039FA  0546      
000039FC  2F02      6354          move.l    D2,-(A7)
000039FE  6100 0F9C 6355          bsr       _ungetch
00003A02  584F      6356          addq.w    #4,A7
00003A04  600E      6357          bra.s     @vsscanf_scanputback_6
                    6358   @vsscanf_scanputback_5:
00003A06  53B9 0000 6359          subq.l    #1,@vsscanf_bufx
00003A0A  6138      
00003A0C  2079 0000 6360          move.l    @vsscanf_bufx,A0
00003A10  6138      
00003A12  1082      6361          move.b    D2,(A0)
                    6362   @vsscanf_scanputback_6:
00003A14  2002      6363          move.l    D2,D0
00003A16  4CDF 000C 6364          movem.l   (A7)+,D2/D3
00003A1A  4E5E      6365          unlk      A6
00003A1C  4E75      6366          rts
                    6367   @vsscanf_scanspace:
00003A1E  4E56 0000 6368          link      A6,#0
00003A22  48E7 2000 6369          movem.l   D2,-(A7)
                    6370   @vsscanf_scanspace_1:
00003A26  2F2E 0008 6371          move.l    8(A6),-(A7)
00003A2A  6100 FF22 6372          bsr       @vsscanf_scanread
00003A2E  584F      6373          addq.w    #4,A7
00003A30  2400      6374          move.l    D0,D2
00003A32  206E 000C 6375          move.l    12(A6),A0
00003A36  5290      6376          addq.l    #1,(A0)
00003A38  2042      6377          move.l    D2,A0
00003A3A  43F9 0000 6378          lea       __ctype,A1
00003A3E  613E      
00003A40  1030 9801 6379          move.b    1(A0,A1.L),D0
00003A44  C03C 0010 6380          and.b     #16,D0
00003A48  66DC      6381          bne       @vsscanf_scanspace_1
00003A4A  2002      6382          move.l    D2,D0
00003A4C  4CDF 0004 6383          movem.l   (A7)+,D2
00003A50  4E5E      6384          unlk      A6
00003A52  4E75      6385          rts
                    6386   @vsscanf_scanselect:
00003A54  4E56 0000 6387          link      A6,#0
00003A58  48E7 3F20 6388          movem.l   D2/D3/D4/D5/D6/D7/A2,-(A7)
00003A5C  262E 000C 6389          move.l    12(A6),D3
00003A60  2C2E 0018 6390          move.l    24(A6),D6
00003A64  2E2E 0014 6391          move.l    20(A6),D7
00003A68  2043      6392          move.l    D3,A0
00003A6A  1010      6393          move.b    (A0),D0
00003A6C  4880      6394          ext.w     D0
00003A6E  48C0      6395          ext.l     D0
00003A70  0C80 0000 6396          cmp.l     #94,D0
00003A74  005E      
00003A76  6608      6397          bne.s     @vsscanf_scanselect_1
00003A78  347C 0001 6398          move.w    #1,A2
00003A7C  5283      6399          addq.l    #1,D3
00003A7E  6004      6400          bra.s     @vsscanf_scanselect_2
                    6401   @vsscanf_scanselect_1:
00003A80  347C 0000 6402          move.w    #0,A2
                    6403   @vsscanf_scanselect_2:
00003A84  202E 0010 6404          move.l    16(A6),D0
00003A88  53AE 0010 6405          subq.l    #1,16(A6)
00003A8C  4A80      6406          tst.l     D0
00003A8E  6700 0108 6407          beq       @vsscanf_scanselect_5
00003A92  2F2E 0008 6408          move.l    8(A6),-(A7)
00003A96  6100 FEB6 6409          bsr       @vsscanf_scanread
00003A9A  584F      6410          addq.w    #4,A7
00003A9C  2800      6411          move.l    D0,D4
00003A9E  0C84 FFFF 6412          cmp.l     #-1,D4
00003AA2  FFFF      
00003AA4  6604      6413          bne.s     @vsscanf_scanselect_6
00003AA6  6000 00F0 6414          bra       @vsscanf_scanselect_5
                    6415   @vsscanf_scanselect_6:
00003AAA  206E 001C 6416          move.l    28(A6),A0
00003AAE  5290      6417          addq.l    #1,(A0)
00003AB0  4285      6418          clr.l     D5
00003AB2  4282      6419          clr.l     D2
                    6420   @vsscanf_scanselect_8:
00003AB4  2043      6421          move.l    D3,A0
00003AB6  1030 2800 6422          move.b    0(A0,D2.L),D0
00003ABA  4880      6423          ext.w     D0
00003ABC  48C0      6424          ext.l     D0
00003ABE  0C80 0000 6425          cmp.l     #93,D0
00003AC2  005D      
00003AC4  6700 008E 6426          beq       @vsscanf_scanselect_10
00003AC8  4A82      6427          tst.l     D2
00003ACA  6716      6428          beq.s     @vsscanf_scanselect_11
00003ACC  2043      6429          move.l    D3,A0
00003ACE  1030 2800 6430          move.b    0(A0,D2.L),D0
00003AD2  4880      6431          ext.w     D0
00003AD4  48C0      6432          ext.l     D0
00003AD6  0C80 0000 6433          cmp.l     #93,D0
00003ADA  005D      
00003ADC  6604      6434          bne.s     @vsscanf_scanselect_11
00003ADE  6000 0074 6435          bra       @vsscanf_scanselect_10
                    6436   @vsscanf_scanselect_11:
00003AE2  4A82      6437          tst.l     D2
00003AE4  6700 0058 6438          beq       @vsscanf_scanselect_15
00003AE8  2043      6439          move.l    D3,A0
00003AEA  1030 2800 6440          move.b    0(A0,D2.L),D0
00003AEE  4880      6441          ext.w     D0
00003AF0  48C0      6442          ext.l     D0
00003AF2  0C80 0000 6443          cmp.l     #45,D0
00003AF6  002D      
00003AF8  6600 0044 6444          bne       @vsscanf_scanselect_15
00003AFC  2043      6445          move.l    D3,A0
00003AFE  2002      6446          move.l    D2,D0
00003B00  5380      6447          subq.l    #1,D0
00003B02  2243      6448          move.l    D3,A1
00003B04  2F08      6449          move.l    A0,-(A7)
00003B06  2042      6450          move.l    D2,A0
00003B08  1230 0800 6451          move.b    0(A0,D0.L),D1
00003B0C  B230 9801 6452          cmp.b     1(A0,A1.L),D1
00003B10  6C00 002C 6453          bge       @vsscanf_scanselect_15
00003B14  205F      6454          move.l    (A7)+,A0
00003B16  2043      6455          move.l    D3,A0
00003B18  2002      6456          move.l    D2,D0
00003B1A  5380      6457          subq.l    #1,D0
00003B1C  1030 0800 6458          move.b    0(A0,D0.L),D0
00003B20  4880      6459          ext.w     D0
00003B22  48C0      6460          ext.l     D0
00003B24  B880      6461          cmp.l     D0,D4
00003B26  6D12      6462          blt.s     @vsscanf_scanselect_17
00003B28  2043      6463          move.l    D3,A0
00003B2A  2242      6464          move.l    D2,A1
00003B2C  1031 8801 6465          move.b    1(A1,A0.L),D0
00003B30  4880      6466          ext.w     D0
00003B32  48C0      6467          ext.l     D0
00003B34  B880      6468          cmp.l     D0,D4
00003B36  6E02      6469          bgt.s     @vsscanf_scanselect_17
00003B38  601A      6470          bra.s     @vsscanf_scanselect_10
                    6471   @vsscanf_scanselect_17:
00003B3A  5282      6472          addq.l    #1,D2
00003B3C  6010      6473          bra.s     @vsscanf_scanselect_19
                    6474   @vsscanf_scanselect_15:
00003B3E  2043      6475          move.l    D3,A0
00003B40  1030 2800 6476          move.b    0(A0,D2.L),D0
00003B44  4880      6477          ext.w     D0
00003B46  48C0      6478          ext.l     D0
00003B48  B880      6479          cmp.l     D0,D4
00003B4A  6602      6480          bne.s     @vsscanf_scanselect_19
00003B4C  6006      6481          bra.s     @vsscanf_scanselect_10
                    6482   @vsscanf_scanselect_19:
00003B4E  5282      6483          addq.l    #1,D2
00003B50  6000 FF62 6484          bra       @vsscanf_scanselect_8
                    6485   @vsscanf_scanselect_10:
00003B54  4A82      6486          tst.l     D2
00003B56  6712      6487          beq.s     @vsscanf_scanselect_23
00003B58  2043      6488          move.l    D3,A0
00003B5A  1030 2800 6489          move.b    0(A0,D2.L),D0
00003B5E  4880      6490          ext.w     D0
00003B60  48C0      6491          ext.l     D0
00003B62  0C80 0000 6492          cmp.l     #93,D0
00003B66  005D      
00003B68  6702      6493          beq.s     @vsscanf_scanselect_21
                    6494   @vsscanf_scanselect_23:
00003B6A  7A01      6495          moveq     #1,D5
                    6496   @vsscanf_scanselect_21:
00003B6C  200A      6497          move.l    A2,D0
00003B6E  6712      6498          beq.s     @vsscanf_scanselect_24
00003B70  4A85      6499          tst.l     D5
00003B72  660C      6500          bne.s     @vsscanf_scanselect_26
00003B74  4A87      6501          tst.l     D7
00003B76  6606      6502          bne.s     @vsscanf_scanselect_28
00003B78  2046      6503          move.l    D6,A0
00003B7A  5286      6504          addq.l    #1,D6
00003B7C  1084      6505          move.b    D4,(A0)
                    6506   @vsscanf_scanselect_28:
00003B7E  6014      6507          bra.s     @vsscanf_scanselect_4
                    6508   @vsscanf_scanselect_26:
00003B80  6016      6509          bra.s     @vsscanf_scanselect_5
                    6510   @vsscanf_scanselect_24:
00003B82  4A85      6511          tst.l     D5
00003B84  670C      6512          beq.s     @vsscanf_scanselect_30
00003B86  4A87      6513          tst.l     D7
00003B88  6606      6514          bne.s     @vsscanf_scanselect_32
00003B8A  2046      6515          move.l    D6,A0
00003B8C  5286      6516          addq.l    #1,D6
00003B8E  1084      6517          move.b    D4,(A0)
                    6518   @vsscanf_scanselect_32:
00003B90  6002      6519          bra.s     @vsscanf_scanselect_4
                    6520   @vsscanf_scanselect_30:
00003B92  6004      6521          bra.s     @vsscanf_scanselect_5
                    6522   @vsscanf_scanselect_4:
00003B94  6000 FEEE 6523          bra       @vsscanf_scanselect_2
                    6524   @vsscanf_scanselect_5:
00003B98  0C84 FFFF 6525          cmp.l     #-1,D4
00003B9C  FFFF      
00003B9E  6712      6526          beq.s     @vsscanf_scanselect_34
00003BA0  2F04      6527          move.l    D4,-(A7)
00003BA2  2F2E 0008 6528          move.l    8(A6),-(A7)
00003BA6  6100 FE14 6529          bsr       @vsscanf_scanputback
00003BAA  504F      6530          addq.w    #8,A7
00003BAC  206E 001C 6531          move.l    28(A6),A0
00003BB0  5390      6532          subq.l    #1,(A0)
                    6533   @vsscanf_scanselect_34:
00003BB2  4A87      6534          tst.l     D7
00003BB4  6604      6535          bne.s     @vsscanf_scanselect_36
00003BB6  2046      6536          move.l    D6,A0
00003BB8  4210      6537          clr.b     (A0)
                    6538   @vsscanf_scanselect_36:
00003BBA  5283      6539          addq.l    #1,D3
00003BBC  2043      6540          move.l    D3,A0
00003BBE  1010      6541          move.b    (A0),D0
00003BC0  4880      6542          ext.w     D0
00003BC2  48C0      6543          ext.l     D0
00003BC4  0C80 0000 6544          cmp.l     #93,D0
00003BC8  005D      
00003BCA  6702      6545          beq.s     @vsscanf_scanselect_40
00003BCC  60EC      6546          bra       @vsscanf_scanselect_36
                    6547   @vsscanf_scanselect_40:
00003BCE  5283      6548          addq.l    #1,D3
00003BD0  2003      6549          move.l    D3,D0
00003BD2  4CDF 04FC 6550          movem.l   (A7)+,D2/D3/D4/D5/D6/D7/A2
00003BD6  4E5E      6551          unlk      A6
00003BD8  4E75      6552          rts
                    6553   _scanflush:
00003BDA  41F9 0803 6554          lea       @vsscanf_buf,A0
00003BDE  0546      
00003BE0  23C8 0000 6555          move.l    A0,@vsscanf_bufx
00003BE4  6138      
00003BE6  4239 0803 6556          clr.b     @vsscanf_buf
00003BEA  0546      
00003BEC  4878 FFFF 6557          pea       -1
00003BF0  6100 0DAA 6558          bsr       _ungetch
00003BF4  584F      6559          addq.w    #4,A7
00003BF6  4E75      6560          rts
                    6561   _vsscanf:
00003BF8  4E56 FF88 6562          link      A6,#-120
00003BFC  48E7 3F3C 6563          movem.l   D2/D3/D4/D5/D6/D7/A2/A3/A4/A5,-(A7)
00003C00  47F8 394E 6564          lea       @vsscanf_scanread,A3
00003C04  4AAE 0008 6565          tst.l     8(A6)
00003C08  6706      6566          beq.s     vsscanf_1
00003C0A  41EE 0008 6567          lea       8(A6),A0
00003C0E  6004      6568          bra.s     vsscanf_2
                    6569   vsscanf_1:
00003C10  4280      6570          clr.l     D0
00003C12  2040      6571          move.l    D0,A0
                    6572   vsscanf_2:
00003C14  2A08      6573          move.l    A0,D5
00003C16  42AE FFE4 6574          clr.l     -28(A6)
00003C1A  4284      6575          clr.l     D4
                    6576   vsscanf_3:
00003C1C  206E 000C 6577          move.l    12(A6),A0
00003C20  52AE 000C 6578          addq.l    #1,12(A6)
00003C24  1010      6579          move.b    (A0),D0
00003C26  4880      6580          ext.w     D0
00003C28  48C0      6581          ext.l     D0
00003C2A  2600      6582          move.l    D0,D3
00003C2C  6700 05AC 6583          beq       vsscanf_5
00003C30  4286      6584          clr.l     D6
00003C32  387C 0000 6585          move.w    #0,A4
00003C36  0C83 0000 6586          cmp.l     #32,D3
00003C3A  0020      
00003C3C  6712      6587          beq.s     vsscanf_8
00003C3E  0C83 0000 6588          cmp.l     #9,D3
00003C42  0009      
00003C44  670A      6589          beq.s     vsscanf_8
00003C46  0C83 0000 6590          cmp.l     #10,D3
00003C4A  000A      
00003C4C  6600 0048 6591          bne       vsscanf_6
                    6592   vsscanf_8:
00003C50  2F05      6593          move.l    D5,-(A7)
00003C52  4E93      6594          jsr       (A3)
00003C54  584F      6595          addq.w    #4,A7
00003C56  2400      6596          move.l    D0,D2
00003C58  52AE FFE4 6597          addq.l    #1,-28(A6)
00003C5C  0C82 FFFF 6598          cmp.l     #-1,D2
00003C60  FFFF      
00003C62  660E      6599          bne.s     vsscanf_11
00003C64  4A84      6600          tst.l     D4
00003C66  6704      6601          beq.s     vsscanf_13
00003C68  2004      6602          move.l    D4,D0
00003C6A  6002      6603          bra.s     vsscanf_14
                    6604   vsscanf_13:
00003C6C  70FF      6605          moveq     #-1,D0
                    6606   vsscanf_14:
00003C6E  6000 056C 6607          bra       vsscanf_15
                    6608   vsscanf_11:
00003C72  2042      6609          move.l    D2,A0
00003C74  43F9 0000 6610          lea       __ctype,A1
00003C78  613E      
00003C7A  1030 9801 6611          move.b    1(A0,A1.L),D0
00003C7E  C03C 0010 6612          and.b     #16,D0
00003C82  66CC      6613          bne       vsscanf_8
00003C84  53AE FFE4 6614          subq.l    #1,-28(A6)
00003C88  2F02      6615          move.l    D2,-(A7)
00003C8A  2F05      6616          move.l    D5,-(A7)
00003C8C  6100 FD2E 6617          bsr       @vsscanf_scanputback
00003C90  504F      6618          addq.w    #8,A7
00003C92  6000 0542 6619          bra       vsscanf_139
                    6620   vsscanf_6:
00003C96  0C83 0000 6621          cmp.l     #37,D3
00003C9A  0025      
00003C9C  6600 0502 6622          bne       vsscanf_127
00003CA0  206E 000C 6623          move.l    12(A6),A0
00003CA4  52AE 000C 6624          addq.l    #1,12(A6)
00003CA8  1010      6625          move.b    (A0),D0
00003CAA  4880      6626          ext.w     D0
00003CAC  48C0      6627          ext.l     D0
00003CAE  2600      6628          move.l    D0,D3
00003CB0  42AE FFEC 6629          clr.l     -20(A6)
00003CB4  4286      6630          clr.l     D6
00003CB6  42AE FFE8 6631          clr.l     -24(A6)
00003CBA  347C 7FFF 6632          move.w    #32767,A2
00003CBE  0C83 0000 6633          cmp.l     #42,D3
00003CC2  002A      
00003CC4  6612      6634          bne.s     vsscanf_18
00003CC6  7C01      6635          moveq     #1,D6
00003CC8  206E 000C 6636          move.l    12(A6),A0
00003CCC  52AE 000C 6637          addq.l    #1,12(A6)
00003CD0  1010      6638          move.b    (A0),D0
00003CD2  4880      6639          ext.w     D0
00003CD4  48C0      6640          ext.l     D0
00003CD6  2600      6641          move.l    D0,D3
                    6642   vsscanf_18:
00003CD8  2043      6643          move.l    D3,A0
00003CDA  43F9 0000 6644          lea       __ctype,A1
00003CDE  613E      
00003CE0  1030 9801 6645          move.b    1(A0,A1.L),D0
00003CE4  C03C 0004 6646          and.b     #4,D0
00003CE8  6700 004E 6647          beq       vsscanf_24
00003CEC  2003      6648          move.l    D3,D0
00003CEE  0480 0000 6649          sub.l     #48,D0
00003CF2  0030      
00003CF4  2440      6650          move.l    D0,A2
                    6651   vsscanf_22:
00003CF6  206E 000C 6652          move.l    12(A6),A0
00003CFA  52AE 000C 6653          addq.l    #1,12(A6)
00003CFE  1010      6654          move.b    (A0),D0
00003D00  4880      6655          ext.w     D0
00003D02  48C0      6656          ext.l     D0
00003D04  2600      6657          move.l    D0,D3
00003D06  2040      6658          move.l    D0,A0
00003D08  43F9 0000 6659          lea       __ctype,A1
00003D0C  613E      
00003D0E  1030 9801 6660          move.b    1(A0,A1.L),D0
00003D12  C0BC 0000 6661          and.l     #255,D0
00003D16  00FF      
00003D18  C0BC 0000 6662          and.l     #4,D0
00003D1C  0004      
00003D1E  6718      6663          beq.s     vsscanf_24
00003D20  70D0      6664          moveq     #-48,D0
00003D22  2F0A      6665          move.l    A2,-(A7)
00003D24  4878 000A 6666          pea       10
00003D28  6100 FA88 6667          bsr       LMUL
00003D2C  2217      6668          move.l    (A7),D1
00003D2E  504F      6669          addq.w    #8,A7
00003D30  D283      6670          add.l     D3,D1
00003D32  D081      6671          add.l     D1,D0
00003D34  2440      6672          move.l    D0,A2
00003D36  60BE      6673          bra       vsscanf_22
                    6674   vsscanf_24:
00003D38  0C83 0000 6675          cmp.l     #108,D3
00003D3C  006C      
00003D3E  6708      6676          beq.s     vsscanf_27
00003D40  0C83 0000 6677          cmp.l     #76,D3
00003D44  004C      
00003D46  661A      6678          bne.s     vsscanf_25
                    6679   vsscanf_27:
00003D48  2D7C 0000 6680          move.l    #1,-24(A6)
00003D4C  0001 FFE8 
00003D50  206E 000C 6681          move.l    12(A6),A0
00003D54  52AE 000C 6682          addq.l    #1,12(A6)
00003D58  1010      6683          move.b    (A0),D0
00003D5A  4880      6684          ext.w     D0
00003D5C  48C0      6685          ext.l     D0
00003D5E  2600      6686          move.l    D0,D3
00003D60  6020      6687          bra.s     vsscanf_28
                    6688   vsscanf_25:
00003D62  0C83 0000 6689          cmp.l     #104,D3
00003D66  0068      
00003D68  6618      6690          bne.s     vsscanf_28
00003D6A  2D7C 0000 6691          move.l    #1,-20(A6)
00003D6E  0001 FFEC 
00003D72  206E 000C 6692          move.l    12(A6),A0
00003D76  52AE 000C 6693          addq.l    #1,12(A6)
00003D7A  1010      6694          move.b    (A0),D0
00003D7C  4880      6695          ext.w     D0
00003D7E  48C0      6696          ext.l     D0
00003D80  2600      6697          move.l    D0,D3
                    6698   vsscanf_28:
00003D82  0C83 0000 6699          cmp.l     #91,D3
00003D86  005B      
00003D88  6600 0036 6700          bne       vsscanf_30
00003D8C  4A86      6701          tst.l     D6
00003D8E  660A      6702          bne.s     vsscanf_32
00003D90  206E 0010 6703          move.l    16(A6),A0
00003D94  58AE 0010 6704          addq.l    #4,16(A6)
00003D98  2E10      6705          move.l    (A0),D7
                    6706   vsscanf_32:
00003D9A  486E FFE4 6707          pea       -28(A6)
00003D9E  2F07      6708          move.l    D7,-(A7)
00003DA0  2F06      6709          move.l    D6,-(A7)
00003DA2  2F0A      6710          move.l    A2,-(A7)
00003DA4  2F2E 000C 6711          move.l    12(A6),-(A7)
00003DA8  2F05      6712          move.l    D5,-(A7)
00003DAA  6100 FCA8 6713          bsr       @vsscanf_scanselect
00003DAE  DEFC 0018 6714          add.w     #24,A7
00003DB2  2D40 000C 6715          move.l    D0,12(A6)
00003DB6  4A86      6716          tst.l     D6
00003DB8  6602      6717          bne.s     vsscanf_34
00003DBA  5284      6718          addq.l    #1,D4
                    6719   vsscanf_34:
00003DBC  6000 0418 6720          bra       vsscanf_139
                    6721   vsscanf_30:
00003DC0  0C83 0000 6722          cmp.l     #110,D3
00003DC4  006E      
00003DC6  661A      6723          bne.s     vsscanf_36
00003DC8  4A86      6724          tst.l     D6
00003DCA  6612      6725          bne.s     vsscanf_38
00003DCC  206E 0010 6726          move.l    16(A6),A0
00003DD0  58AE 0010 6727          addq.l    #4,16(A6)
00003DD4  2E10      6728          move.l    (A0),D7
00003DD6  2047      6729          move.l    D7,A0
00003DD8  20AE FFE4 6730          move.l    -28(A6),(A0)
00003DDC  5284      6731          addq.l    #1,D4
                    6732   vsscanf_38:
00003DDE  6000 03F6 6733          bra       vsscanf_139
                    6734   vsscanf_36:
00003DE2  0C83 0000 6735          cmp.l     #115,D3
00003DE6  0073      
00003DE8  6600 00AC 6736          bne       vsscanf_40
00003DEC  486E FFE4 6737          pea       -28(A6)
00003DF0  2F05      6738          move.l    D5,-(A7)
00003DF2  6100 FC2A 6739          bsr       @vsscanf_scanspace
00003DF6  504F      6740          addq.w    #8,A7
00003DF8  2400      6741          move.l    D0,D2
00003DFA  4A86      6742          tst.l     D6
00003DFC  660A      6743          bne.s     vsscanf_42
00003DFE  206E 0010 6744          move.l    16(A6),A0
00003E02  58AE 0010 6745          addq.l    #4,16(A6)
00003E06  2E10      6746          move.l    (A0),D7
                    6747   vsscanf_42:
00003E08  52AE FFE4 6748          addq.l    #1,-28(A6)
                    6749   vsscanf_44:
00003E0C  200A      6750          move.l    A2,D0
00003E0E  534A      6751          subq.w    #1,A2
00003E10  4A80      6752          tst.l     D0
00003E12  6700 0038 6753          beq       vsscanf_46
00003E16  2042      6754          move.l    D2,A0
00003E18  43F9 0000 6755          lea       __ctype,A1
00003E1C  613E      
00003E1E  1030 9801 6756          move.b    1(A0,A1.L),D0
00003E22  C03C 0010 6757          and.b     #16,D0
00003E26  6624      6758          bne.s     vsscanf_46
00003E28  0C82 FFFF 6759          cmp.l     #-1,D2
00003E2C  FFFF      
00003E2E  671C      6760          beq.s     vsscanf_46
00003E30  387C 0001 6761          move.w    #1,A4
00003E34  4A86      6762          tst.l     D6
00003E36  6606      6763          bne.s     vsscanf_47
00003E38  2047      6764          move.l    D7,A0
00003E3A  5287      6765          addq.l    #1,D7
00003E3C  1082      6766          move.b    D2,(A0)
                    6767   vsscanf_47:
00003E3E  2F05      6768          move.l    D5,-(A7)
00003E40  4E93      6769          jsr       (A3)
00003E42  584F      6770          addq.w    #4,A7
00003E44  2400      6771          move.l    D0,D2
00003E46  52AE FFE4 6772          addq.l    #1,-28(A6)
00003E4A  60C0      6773          bra       vsscanf_44
                    6774   vsscanf_46:
00003E4C  4A86      6775          tst.l     D6
00003E4E  660A      6776          bne.s     vsscanf_51
00003E50  2047      6777          move.l    D7,A0
00003E52  4210      6778          clr.b     (A0)
00003E54  200C      6779          move.l    A4,D0
00003E56  6702      6780          beq.s     vsscanf_51
00003E58  5284      6781          addq.l    #1,D4
                    6782   vsscanf_51:
00003E5A  0C82 FFFF 6783          cmp.l     #-1,D2
00003E5E  FFFF      
00003E60  6708      6784          beq.s     vsscanf_55
00003E62  4A86      6785          tst.l     D6
00003E64  661E      6786          bne.s     vsscanf_53
00003E66  200C      6787          move.l    A4,D0
00003E68  661A      6788          bne.s     vsscanf_53
                    6789   vsscanf_55:
00003E6A  4A84      6790          tst.l     D4
00003E6C  6704      6791          beq.s     vsscanf_56
00003E6E  2004      6792          move.l    D4,D0
00003E70  600E      6793          bra.s     vsscanf_59
                    6794   vsscanf_56:
00003E72  0C82 FFFF 6795          cmp.l     #-1,D2
00003E76  FFFF      
00003E78  6604      6796          bne.s     vsscanf_58
00003E7A  70FF      6797          moveq     #-1,D0
00003E7C  6002      6798          bra.s     vsscanf_59
                    6799   vsscanf_58:
00003E7E  2004      6800          move.l    D4,D0
                    6801   vsscanf_59:
00003E80  6000 035A 6802          bra       vsscanf_15
                    6803   vsscanf_53:
00003E84  53AE FFE4 6804          subq.l    #1,-28(A6)
00003E88  2F02      6805          move.l    D2,-(A7)
00003E8A  2F05      6806          move.l    D5,-(A7)
00003E8C  6100 FB2E 6807          bsr       @vsscanf_scanputback
00003E90  504F      6808          addq.w    #8,A7
00003E92  6000 0342 6809          bra       vsscanf_139
                    6810   vsscanf_40:
00003E96  0C83 0000 6811          cmp.l     #99,D3
00003E9A  0063      
00003E9C  6600 008E 6812          bne       vsscanf_60
00003EA0  4A86      6813          tst.l     D6
00003EA2  660A      6814          bne.s     vsscanf_62
00003EA4  206E 0010 6815          move.l    16(A6),A0
00003EA8  58AE 0010 6816          addq.l    #4,16(A6)
00003EAC  2E10      6817          move.l    (A0),D7
                    6818   vsscanf_62:
00003EAE  2F05      6819          move.l    D5,-(A7)
00003EB0  4E93      6820          jsr       (A3)
00003EB2  584F      6821          addq.w    #4,A7
00003EB4  2400      6822          move.l    D0,D2
00003EB6  52AE FFE4 6823          addq.l    #1,-28(A6)
00003EBA  200A      6824          move.l    A2,D0
00003EBC  0C80 0000 6825          cmp.l     #32767,D0
00003EC0  7FFF      
00003EC2  6604      6826          bne.s     vsscanf_64
00003EC4  347C 0001 6827          move.w    #1,A2
                    6828   vsscanf_64:
00003EC8  0C82 FFFF 6829          cmp.l     #-1,D2
00003ECC  FFFF      
00003ECE  6606      6830          bne.s     vsscanf_66
00003ED0  4A86      6831          tst.l     D6
00003ED2  6602      6832          bne.s     vsscanf_66
00003ED4  5384      6833          subq.l    #1,D4
                    6834   vsscanf_66:
00003ED6  200A      6835          move.l    A2,D0
00003ED8  534A      6836          subq.w    #1,A2
00003EDA  4A80      6837          tst.l     D0
00003EDC  6720      6838          beq.s     vsscanf_70
00003EDE  0C82 FFFF 6839          cmp.l     #-1,D2
00003EE2  FFFF      
00003EE4  6718      6840          beq.s     vsscanf_70
00003EE6  4A86      6841          tst.l     D6
00003EE8  6606      6842          bne.s     vsscanf_71
00003EEA  2047      6843          move.l    D7,A0
00003EEC  5287      6844          addq.l    #1,D7
00003EEE  1082      6845          move.b    D2,(A0)
                    6846   vsscanf_71:
00003EF0  2F05      6847          move.l    D5,-(A7)
00003EF2  4E93      6848          jsr       (A3)
00003EF4  584F      6849          addq.w    #4,A7
00003EF6  2400      6850          move.l    D0,D2
00003EF8  52AE FFE4 6851          addq.l    #1,-28(A6)
00003EFC  60D8      6852          bra       vsscanf_66
                    6853   vsscanf_70:
00003EFE  0C82 FFFF 6854          cmp.l     #-1,D2
00003F02  FFFF      
00003F04  660E      6855          bne.s     vsscanf_73
00003F06  4A84      6856          tst.l     D4
00003F08  6704      6857          beq.s     vsscanf_75
00003F0A  2004      6858          move.l    D4,D0
00003F0C  6002      6859          bra.s     vsscanf_76
                    6860   vsscanf_75:
00003F0E  70FF      6861          moveq     #-1,D0
                    6862   vsscanf_76:
00003F10  6000 02CA 6863          bra       vsscanf_15
                    6864   vsscanf_73:
00003F14  4A86      6865          tst.l     D6
00003F16  6602      6866          bne.s     vsscanf_77
00003F18  5284      6867          addq.l    #1,D4
                    6868   vsscanf_77:
00003F1A  53AE FFE4 6869          subq.l    #1,-28(A6)
00003F1E  2F02      6870          move.l    D2,-(A7)
00003F20  2F05      6871          move.l    D5,-(A7)
00003F22  6100 FA98 6872          bsr       @vsscanf_scanputback
00003F26  504F      6873          addq.w    #8,A7
00003F28  6000 02AC 6874          bra       vsscanf_139
                    6875   vsscanf_60:
00003F2C  0C83 0000 6876          cmp.l     #105,D3
00003F30  0069      
00003F32  6600 0060 6877          bne       vsscanf_82
00003F36  486E FFE4 6878          pea       -28(A6)
00003F3A  2F05      6879          move.l    D5,-(A7)
00003F3C  6100 FAE0 6880          bsr       @vsscanf_scanspace
00003F40  504F      6881          addq.w    #8,A7
00003F42  2400      6882          move.l    D0,D2
00003F44  0C82 0000 6883          cmp.l     #48,D2
00003F48  0030      
00003F4A  6600 0038 6884          bne       vsscanf_81
00003F4E  387C 0001 6885          move.w    #1,A4
00003F52  2F05      6886          move.l    D5,-(A7)
00003F54  4E93      6887          jsr       (A3)
00003F56  584F      6888          addq.w    #4,A7
00003F58  2400      6889          move.l    D0,D2
00003F5A  2F02      6890          move.l    D2,-(A7)
00003F5C  6100 F94E 6891          bsr       _tolower
00003F60  584F      6892          addq.w    #4,A7
00003F62  0C80 0000 6893          cmp.l     #120,D0
00003F66  0078      
00003F68  6604      6894          bne.s     vsscanf_83
00003F6A  7678      6895          moveq     #120,D3
00003F6C  6010      6896          bra.s     vsscanf_84
                    6897   vsscanf_83:
00003F6E  53AE FFE4 6898          subq.l    #1,-28(A6)
00003F72  2F02      6899          move.l    D2,-(A7)
00003F74  2F05      6900          move.l    D5,-(A7)
00003F76  6100 FA44 6901          bsr       @vsscanf_scanputback
00003F7A  504F      6902          addq.w    #8,A7
00003F7C  766F      6903          moveq     #111,D3
                    6904   vsscanf_84:
00003F7E  52AE FFE4 6905          addq.l    #1,-28(A6)
00003F82  6010      6906          bra.s     vsscanf_82
                    6907   vsscanf_81:
00003F84  53AE FFE4 6908          subq.l    #1,-28(A6)
00003F88  2F02      6909          move.l    D2,-(A7)
00003F8A  2F05      6910          move.l    D5,-(A7)
00003F8C  6100 FA2E 6911          bsr       @vsscanf_scanputback
00003F90  504F      6912          addq.w    #8,A7
00003F92  7664      6913          moveq     #100,D3
                    6914   vsscanf_82:
00003F94  0C83 0000 6915          cmp.l     #100,D3
00003F98  0064      
00003F9A  671A      6916          beq.s     vsscanf_87
00003F9C  0C83 0000 6917          cmp.l     #117,D3
00003FA0  0075      
00003FA2  6712      6918          beq.s     vsscanf_87
00003FA4  0C83 0000 6919          cmp.l     #120,D3
00003FA8  0078      
00003FAA  670A      6920          beq.s     vsscanf_87
00003FAC  0C83 0000 6921          cmp.l     #111,D3
00003FB0  006F      
00003FB2  6600 01A4 6922          bne       vsscanf_85
                    6923   vsscanf_87:
00003FB6  486E FFE4 6924          pea       -28(A6)
00003FBA  2F05      6925          move.l    D5,-(A7)
00003FBC  6100 FA60 6926          bsr       @vsscanf_scanspace
00003FC0  504F      6927          addq.w    #8,A7
00003FC2  2400      6928          move.l    D0,D2
00003FC4  2D7C 0000 6929          move.l    #10,-4(A6)
00003FC8  000A FFFC 
00003FCC  0C83 0000 6930          cmp.l     #120,D3
00003FD0  0078      
00003FD2  6608      6931          bne.s     vsscanf_88
00003FD4  2D7C 0000 6932          move.l    #16,-4(A6)
00003FD8  0010 FFFC 
                    6933   vsscanf_88:
00003FDC  0C83 0000 6934          cmp.l     #111,D3
00003FE0  006F      
00003FE2  6608      6935          bne.s     vsscanf_90
00003FE4  2D7C 0000 6936          move.l    #8,-4(A6)
00003FE8  0008 FFFC 
                    6937   vsscanf_90:
00003FEC  4A86      6938          tst.l     D6
00003FEE  660A      6939          bne.s     vsscanf_92
00003FF0  206E 0010 6940          move.l    16(A6),A0
00003FF4  58AE 0010 6941          addq.l    #4,16(A6)
00003FF8  2E10      6942          move.l    (A0),D7
                    6943   vsscanf_92:
00003FFA  42AE FFE0 6944          clr.l     -32(A6)
00003FFE  52AE FFE4 6945          addq.l    #1,-28(A6)
00004002  0C83 0000 6946          cmp.l     #117,D3
00004006  0075      
00004008  6720      6947          beq.s     vsscanf_94
0000400A  0C82 0000 6948          cmp.l     #45,D2
0000400E  002D      
00004010  6618      6949          bne.s     vsscanf_94
00004012  2F05      6950          move.l    D5,-(A7)
00004014  4E93      6951          jsr       (A3)
00004016  584F      6952          addq.w    #4,A7
00004018  2400      6953          move.l    D0,D2
0000401A  52AE FFE4 6954          addq.l    #1,-28(A6)
0000401E  2D7C 0000 6955          move.l    #1,-32(A6)
00004022  0001 FFE0 
00004026  387C 0001 6956          move.w    #1,A4
                    6957   vsscanf_94:
0000402A  3A7C 0000 6958          move.w    #0,A5
0000402E  0C82 FFFF 6959          cmp.l     #-1,D2
00004032  FFFF      
00004034  660E      6960          bne.s     vsscanf_96
00004036  4A84      6961          tst.l     D4
00004038  6704      6962          beq.s     vsscanf_98
0000403A  2004      6963          move.l    D4,D0
0000403C  6002      6964          bra.s     vsscanf_99
                    6965   vsscanf_98:
0000403E  70FF      6966          moveq     #-1,D0
                    6967   vsscanf_99:
00004040  6000 019A 6968          bra       vsscanf_15
                    6969   vsscanf_96:
00004044  200A      6970          move.l    A2,D0
00004046  534A      6971          subq.w    #1,A2
00004048  4A80      6972          tst.l     D0
0000404A  6700 0090 6973          beq       vsscanf_102
0000404E  0C83 0000 6974          cmp.l     #120,D3
00004052  0078      
00004054  6620      6975          bne.s     vsscanf_104
00004056  2F02      6976          move.l    D2,-(A7)
00004058  6100 F8C8 6977          bsr       _toupper
0000405C  584F      6978          addq.w    #4,A7
0000405E  0C80 0000 6979          cmp.l     #65,D0
00004062  0041      
00004064  6D10      6980          blt.s     vsscanf_104
00004066  2F02      6981          move.l    D2,-(A7)
00004068  6100 F8B8 6982          bsr       _toupper
0000406C  584F      6983          addq.w    #4,A7
0000406E  0C80 0000 6984          cmp.l     #70,D0
00004072  0046      
00004074  6F14      6985          ble.s     vsscanf_103
                    6986   vsscanf_104:
00004076  2042      6987          move.l    D2,A0
00004078  43F9 0000 6988          lea       __ctype,A1
0000407C  613E      
0000407E  1030 9801 6989          move.b    1(A0,A1.L),D0
00004082  C03C 0004 6990          and.b     #4,D0
00004086  6700 0054 6991          beq       vsscanf_102
                    6992   vsscanf_103:
0000408A  2042      6993          move.l    D2,A0
0000408C  43F9 0000 6994          lea       __ctype,A1
00004090  613E      
00004092  1030 9801 6995          move.b    1(A0,A1.L),D0
00004096  C03C 0004 6996          and.b     #4,D0
0000409A  6614      6997          bne.s     vsscanf_105
0000409C  70F9      6998          moveq     #-7,D0
0000409E  2F00      6999          move.l    D0,-(A7)
000040A0  2F02      7000          move.l    D2,-(A7)
000040A2  6100 F87E 7001          bsr       _toupper
000040A6  584F      7002          addq.w    #4,A7
000040A8  2200      7003          move.l    D0,D1
000040AA  201F      7004          move.l    (A7)+,D0
000040AC  D081      7005          add.l     D1,D0
000040AE  2400      7006          move.l    D0,D2
                    7007   vsscanf_105:
000040B0  2F0D      7008          move.l    A5,-(A7)
000040B2  2F2E FFFC 7009          move.l    -4(A6),-(A7)
000040B6  6100 F6FA 7010          bsr       LMUL
000040BA  2017      7011          move.l    (A7),D0
000040BC  504F      7012          addq.w    #8,A7
000040BE  D082      7013          add.l     D2,D0
000040C0  0480 0000 7014          sub.l     #48,D0
000040C4  0030      
000040C6  2A40      7015          move.l    D0,A5
000040C8  2F05      7016          move.l    D5,-(A7)
000040CA  4E93      7017          jsr       (A3)
000040CC  584F      7018          addq.w    #4,A7
000040CE  2400      7019          move.l    D0,D2
000040D0  52AE FFE4 7020          addq.l    #1,-28(A6)
000040D4  387C 0001 7021          move.w    #1,A4
000040D8  6000 FF6A 7022          bra       vsscanf_96
                    7023   vsscanf_102:
000040DC  0C82 FFFF 7024          cmp.l     #-1,D2
000040E0  FFFF      
000040E2  671A      7025          beq.s     vsscanf_107
000040E4  2F02      7026          move.l    D2,-(A7)
000040E6  2F05      7027          move.l    D5,-(A7)
000040E8  6100 F8D2 7028          bsr       @vsscanf_scanputback
000040EC  504F      7029          addq.w    #8,A7
000040EE  53AE FFE4 7030          subq.l    #1,-28(A6)
000040F2  200C      7031          move.l    A4,D0
000040F4  6606      7032          bne.s     vsscanf_109
000040F6  2004      7033          move.l    D4,D0
000040F8  6000 00E2 7034          bra       vsscanf_15
                    7035   vsscanf_109:
000040FC  6012      7036          bra.s     vsscanf_111
                    7037   vsscanf_107:
000040FE  200C      7038          move.l    A4,D0
00004100  660E      7039          bne.s     vsscanf_111
00004102  4A84      7040          tst.l     D4
00004104  6704      7041          beq.s     vsscanf_113
00004106  2004      7042          move.l    D4,D0
00004108  6002      7043          bra.s     vsscanf_114
                    7044   vsscanf_113:
0000410A  70FF      7045          moveq     #-1,D0
                    7046   vsscanf_114:
0000410C  6000 00CE 7047          bra       vsscanf_15
                    7048   vsscanf_111:
00004110  4AAE FFE0 7049          tst.l     -32(A6)
00004114  6706      7050          beq.s     vsscanf_115
00004116  200D      7051          move.l    A5,D0
00004118  4480      7052          neg.l     D0
0000411A  2A40      7053          move.l    D0,A5
                    7054   vsscanf_115:
0000411C  4A86      7055          tst.l     D6
0000411E  661E      7056          bne.s     vsscanf_117
00004120  4AAE FFE8 7057          tst.l     -24(A6)
00004124  6706      7058          beq.s     vsscanf_119
00004126  2047      7059          move.l    D7,A0
00004128  208D      7060          move.l    A5,(A0)
0000412A  6010      7061          bra.s     vsscanf_122
                    7062   vsscanf_119:
0000412C  4AAE FFEC 7063          tst.l     -20(A6)
00004130  6706      7064          beq.s     vsscanf_121
00004132  2047      7065          move.l    D7,A0
00004134  308D      7066          move.w    A5,(A0)
00004136  6004      7067          bra.s     vsscanf_122
                    7068   vsscanf_121:
00004138  2047      7069          move.l    D7,A0
0000413A  208D      7070          move.l    A5,(A0)
                    7071   vsscanf_122:
0000413C  5284      7072          addq.l    #1,D4
                    7073   vsscanf_117:
0000413E  0C82 FFFF 7074          cmp.l     #-1,D2
00004142  FFFF      
00004144  660E      7075          bne.s     vsscanf_123
00004146  4A84      7076          tst.l     D4
00004148  6704      7077          beq.s     vsscanf_125
0000414A  2004      7078          move.l    D4,D0
0000414C  6002      7079          bra.s     vsscanf_126
                    7080   vsscanf_125:
0000414E  70FF      7081          moveq     #-1,D0
                    7082   vsscanf_126:
00004150  6000 008A 7083          bra       vsscanf_15
                    7084   vsscanf_123:
00004154  6000 0080 7085          bra       vsscanf_139
                    7086   vsscanf_85:
00004158  0C83 0000 7087          cmp.l     #37,D3
0000415C  0025      
0000415E  6600 0040 7088          bne       vsscanf_127
00004162  2F05      7089          move.l    D5,-(A7)
00004164  4E93      7090          jsr       (A3)
00004166  584F      7091          addq.w    #4,A7
00004168  2400      7092          move.l    D0,D2
0000416A  0C82 FFFF 7093          cmp.l     #-1,D2
0000416E  FFFF      
00004170  660E      7094          bne.s     vsscanf_129
00004172  4A84      7095          tst.l     D4
00004174  6704      7096          beq.s     vsscanf_131
00004176  2004      7097          move.l    D4,D0
00004178  6002      7098          bra.s     vsscanf_132
                    7099   vsscanf_131:
0000417A  70FF      7100          moveq     #-1,D0
                    7101   vsscanf_132:
0000417C  6000 005E 7102          bra       vsscanf_15
                    7103   vsscanf_129:
00004180  52AE FFE4 7104          addq.l    #1,-28(A6)
00004184  B483      7105          cmp.l     D3,D2
00004186  6714      7106          beq.s     vsscanf_133
00004188  2F02      7107          move.l    D2,-(A7)
0000418A  2F05      7108          move.l    D5,-(A7)
0000418C  6100 F82E 7109          bsr       @vsscanf_scanputback
00004190  504F      7110          addq.w    #8,A7
00004192  53AE FFE4 7111          subq.l    #1,-28(A6)
00004196  2004      7112          move.l    D4,D0
00004198  6000 0042 7113          bra       vsscanf_15
                    7114   vsscanf_133:
0000419C  6000 0038 7115          bra       vsscanf_139
                    7116   vsscanf_127:
000041A0  2F05      7117          move.l    D5,-(A7)
000041A2  4E93      7118          jsr       (A3)
000041A4  584F      7119          addq.w    #4,A7
000041A6  2400      7120          move.l    D0,D2
000041A8  52AE FFE4 7121          addq.l    #1,-28(A6)
000041AC  0C82 FFFF 7122          cmp.l     #-1,D2
000041B0  FFFF      
000041B2  660C      7123          bne.s     vsscanf_135
000041B4  4A84      7124          tst.l     D4
000041B6  6704      7125          beq.s     vsscanf_137
000041B8  2004      7126          move.l    D4,D0
000041BA  6002      7127          bra.s     vsscanf_138
                    7128   vsscanf_137:
000041BC  70FF      7129          moveq     #-1,D0
                    7130   vsscanf_138:
000041BE  601C      7131          bra.s     vsscanf_15
                    7132   vsscanf_135:
000041C0  B483      7133          cmp.l     D3,D2
000041C2  6712      7134          beq.s     vsscanf_139
000041C4  2F02      7135          move.l    D2,-(A7)
000041C6  2F05      7136          move.l    D5,-(A7)
000041C8  6100 F7F2 7137          bsr       @vsscanf_scanputback
000041CC  504F      7138          addq.w    #8,A7
000041CE  53AE FFE4 7139          subq.l    #1,-28(A6)
000041D2  2004      7140          move.l    D4,D0
000041D4  6006      7141          bra.s     vsscanf_15
                    7142   vsscanf_139:
000041D6  6000 FA44 7143          bra       vsscanf_3
                    7144   vsscanf_5:
000041DA  2004      7145          move.l    D4,D0
                    7146   vsscanf_15:
000041DC  4CDF 3CFC 7147          movem.l   (A7)+,D2/D3/D4/D5/D6/D7/A2/A3/A4/A5
000041E0  4E5E      7148          unlk      A6
000041E2  4E75      7149          rts
                    7150   _printf:
000041E4  4E56 FFFC 7151          link      A6,#-4
000041E8  48E7 2000 7152          movem.l   D2,-(A7)
000041EC  41EE 0008 7153          lea       8(A6),A0
000041F0  5848      7154          addq.w    #4,A0
000041F2  2408      7155          move.l    A0,D2
000041F4  2F02      7156          move.l    D2,-(A7)
000041F6  2F2E 0008 7157          move.l    8(A6),-(A7)
000041FA  42A7      7158          clr.l     -(A7)
000041FC  6100 00CA 7159          bsr       _vsprintf
00004200  DEFC 000C 7160          add.w     #12,A7
00004204  2D40 FFFC 7161          move.l    D0,-4(A6)
00004208  4282      7162          clr.l     D2
0000420A  202E FFFC 7163          move.l    -4(A6),D0
0000420E  4CDF 0004 7164          movem.l   (A7)+,D2
00004212  4E5E      7165          unlk      A6
00004214  4E75      7166          rts
                    7167   @vsprintf_copy:
00004216  4E56 0000 7168          link      A6,#0
0000421A  206E 0008 7169          move.l    8(A6),A0
0000421E  4A90      7170          tst.l     (A0)
00004220  6710      7171          beq.s     @vsprintf_copy_1
00004222  202E 000C 7172          move.l    12(A6),D0
00004226  206E 0008 7173          move.l    8(A6),A0
0000422A  2250      7174          move.l    (A0),A1
0000422C  5290      7175          addq.l    #1,(A0)
0000422E  1280      7176          move.b    D0,(A1)
00004230  600A      7177          bra.s     @vsprintf_copy_2
                    7178   @vsprintf_copy_1:
00004232  2F2E 000C 7179          move.l    12(A6),-(A7)
00004236  6100 F608 7180          bsr       _putch
0000423A  584F      7181          addq.w    #4,A7
                    7182   @vsprintf_copy_2:
0000423C  4E5E      7183          unlk      A6
0000423E  4E75      7184          rts
                    7185   @vsprintf_getval:
00004240  4E56 0000 7186          link      A6,#0
00004244  48E7 3000 7187          movem.l   D2/D3,-(A7)
00004248  242E 0008 7188          move.l    8(A6),D2
0000424C  4283      7189          clr.l     D3
0000424E  2042      7190          move.l    D2,A0
00004250  2050      7191          move.l    (A0),A0
00004252  1010      7192          move.b    (A0),D0
00004254  4880      7193          ext.w     D0
00004256  48C0      7194          ext.l     D0
00004258  0C80 0000 7195          cmp.l     #42,D0
0000425C  002A      
0000425E  6612      7196          bne.s     @vsprintf_getval_1
00004260  206E 000C 7197          move.l    12(A6),A0
00004264  2250      7198          move.l    (A0),A1
00004266  5890      7199          addq.l    #4,(A0)
00004268  2611      7200          move.l    (A1),D3
0000426A  2042      7201          move.l    D2,A0
0000426C  5290      7202          addq.l    #1,(A0)
0000426E  6000 004E 7203          bra       @vsprintf_getval_5
                    7204   @vsprintf_getval_1:
00004272  2042      7205          move.l    D2,A0
00004274  2050      7206          move.l    (A0),A0
00004276  1010      7207          move.b    (A0),D0
00004278  4880      7208          ext.w     D0
0000427A  48C0      7209          ext.l     D0
0000427C  0C80 0000 7210          cmp.l     #48,D0
00004280  0030      
00004282  6D00 003A 7211          blt       @vsprintf_getval_5
00004286  2042      7212          move.l    D2,A0
00004288  2050      7213          move.l    (A0),A0
0000428A  1010      7214          move.b    (A0),D0
0000428C  4880      7215          ext.w     D0
0000428E  48C0      7216          ext.l     D0
00004290  0C80 0000 7217          cmp.l     #57,D0
00004294  0039      
00004296  6E26      7218          bgt.s     @vsprintf_getval_5
00004298  2F03      7219          move.l    D3,-(A7)
0000429A  4878 000A 7220          pea       10
0000429E  6100 F512 7221          bsr       LMUL
000042A2  2017      7222          move.l    (A7),D0
000042A4  504F      7223          addq.w    #8,A7
000042A6  2042      7224          move.l    D2,A0
000042A8  2250      7225          move.l    (A0),A1
000042AA  5290      7226          addq.l    #1,(A0)
000042AC  1211      7227          move.b    (A1),D1
000042AE  4881      7228          ext.w     D1
000042B0  48C1      7229          ext.l     D1
000042B2  D081      7230          add.l     D1,D0
000042B4  0480 0000 7231          sub.l     #48,D0
000042B8  0030      
000042BA  2600      7232          move.l    D0,D3
000042BC  60B4      7233          bra       @vsprintf_getval_1
                    7234   @vsprintf_getval_5:
000042BE  2003      7235          move.l    D3,D0
000042C0  4CDF 000C 7236          movem.l   (A7)+,D2/D3
000042C4  4E5E      7237          unlk      A6
000042C6  4E75      7238          rts
                    7239   _vsprintf:
000042C8  4E56 FFCC 7240          link      A6,#-52
000042CC  48E7 3F3C 7241          movem.l   D2/D3/D4/D5/D6/D7/A2/A3/A4/A5,-(A7)
000042D0  45EE 0008 7242          lea       8(A6),A2
000042D4  47F8 4216 7243          lea       @vsprintf_copy,A3
000042D8  49F9 0000 7244          lea       _ultoa,A4
000042DC  4AA6      
000042DE  4286      7245          clr.l     D6
                    7246   vsprintf_1:
000042E0  206E 000C 7247          move.l    12(A6),A0
000042E4  4A10      7248          tst.b     (A0)
000042E6  6700 0624 7249          beq       vsprintf_3
000042EA  206E 000C 7250          move.l    12(A6),A0
000042EE  1010      7251          move.b    (A0),D0
000042F0  4880      7252          ext.w     D0
000042F2  48C0      7253          ext.l     D0
000042F4  0C80 0000 7254          cmp.l     #37,D0
000042F8  0025      
000042FA  671C      7255          beq.s     vsprintf_4
000042FC  206E 000C 7256          move.l    12(A6),A0
00004300  52AE 000C 7257          addq.l    #1,12(A6)
00004304  1210      7258          move.b    (A0),D1
00004306  4881      7259          ext.w     D1
00004308  48C1      7260          ext.l     D1
0000430A  2F01      7261          move.l    D1,-(A7)
0000430C  2F0A      7262          move.l    A2,-(A7)
0000430E  4E93      7263          jsr       (A3)
00004310  504F      7264          addq.w    #8,A7
00004312  5286      7265          addq.l    #1,D6
00004314  6000 05F2 7266          bra       vsprintf_2
                    7267   vsprintf_4:
00004318  52AE 000C 7268          addq.l    #1,12(A6)
0000431C  422E FFD3 7269          clr.b     -45(A6)
00004320  422E FFD2 7270          clr.b     -46(A6)
00004324  422E FFD0 7271          clr.b     -48(A6)
00004328  422E FFCF 7272          clr.b     -49(A6)
0000432C  422E FFCE 7273          clr.b     -50(A6)
00004330  422E FFCD 7274          clr.b     -51(A6)
00004334  42AE FFFC 7275          clr.l     -4(A6)
00004338  7AFF      7276          moveq     #-1,D5
0000433A  41EE FFDC 7277          lea       -36(A6),A0
0000433E  2608      7278          move.l    A0,D3
00004340  2408      7279          move.l    A0,D2
                    7280   vsprintf_6:
00004342  206E 000C 7281          move.l    12(A6),A0
00004346  1010      7282          move.b    (A0),D0
00004348  4880      7283          ext.w     D0
0000434A  48C0      7284          ext.l     D0
0000434C  0C80 0000 7285          cmp.l     #43,D0
00004350  002B      
00004352  6730      7286          beq.s     vsprintf_12
00004354  6E18      7287          bgt.s     vsprintf_15
00004356  0C80 0000 7288          cmp.l     #35,D0
0000435A  0023      
0000435C  6700 003E 7289          beq       vsprintf_14
00004360  6E00 0046 7290          bgt       vsprintf_9
00004364  0C80 0000 7291          cmp.l     #32,D0
00004368  0020      
0000436A  6724      7292          beq.s     vsprintf_13
0000436C  603A      7293          bra.s     vsprintf_9
                    7294   vsprintf_15:
0000436E  0C80 0000 7295          cmp.l     #45,D0
00004372  002D      
00004374  6702      7296          beq.s     vsprintf_11
00004376  6030      7297          bra.s     vsprintf_9
                    7298   vsprintf_11:
00004378  1D7C 0001 7299          move.b    #1,-51(A6)
0000437C  FFCD      
0000437E  52AE 000C 7300          addq.l    #1,12(A6)
00004382  6026      7301          bra.s     vsprintf_7
                    7302   vsprintf_12:
00004384  1D7C 0001 7303          move.b    #1,-50(A6)
00004388  FFCE      
0000438A  52AE 000C 7304          addq.l    #1,12(A6)
0000438E  601A      7305          bra.s     vsprintf_7
                    7306   vsprintf_13:
00004390  1D7C 0001 7307          move.b    #1,-49(A6)
00004394  FFCF      
00004396  52AE 000C 7308          addq.l    #1,12(A6)
0000439A  600E      7309          bra.s     vsprintf_7
                    7310   vsprintf_14:
0000439C  1D7C 0001 7311          move.b    #1,-48(A6)
000043A0  FFD0      
000043A2  52AE 000C 7312          addq.l    #1,12(A6)
000043A6  6002      7313          bra.s     vsprintf_7
                    7314   vsprintf_9:
000043A8  6002      7315          bra.s     vsprintf_8
                    7316   vsprintf_7:
000043AA  6096      7317          bra       vsprintf_6
                    7318   vsprintf_8:
000043AC  206E 000C 7319          move.l    12(A6),A0
000043B0  1010      7320          move.b    (A0),D0
000043B2  4880      7321          ext.w     D0
000043B4  48C0      7322          ext.l     D0
000043B6  0C80 0000 7323          cmp.l     #48,D0
000043BA  0030      
000043BC  660A      7324          bne.s     vsprintf_16
000043BE  52AE 000C 7325          addq.l    #1,12(A6)
000043C2  1D7C 0001 7326          move.b    #1,-46(A6)
000043C6  FFD2      
                    7327   vsprintf_16:
000043C8  486E 0010 7328          pea       16(A6)
000043CC  486E 000C 7329          pea       12(A6)
000043D0  6100 FE6E 7330          bsr       @vsprintf_getval
000043D4  504F      7331          addq.w    #8,A7
000043D6  2A40      7332          move.l    D0,A5
000043D8  206E 000C 7333          move.l    12(A6),A0
000043DC  1010      7334          move.b    (A0),D0
000043DE  4880      7335          ext.w     D0
000043E0  48C0      7336          ext.l     D0
000043E2  0C80 0000 7337          cmp.l     #46,D0
000043E6  002E      
000043E8  6614      7338          bne.s     vsprintf_18
000043EA  52AE 000C 7339          addq.l    #1,12(A6)
000043EE  486E 0010 7340          pea       16(A6)
000043F2  486E 000C 7341          pea       12(A6)
000043F6  6100 FE48 7342          bsr       @vsprintf_getval
000043FA  504F      7343          addq.w    #8,A7
000043FC  2A00      7344          move.l    D0,D5
                    7345   vsprintf_18:
000043FE  206E 000C 7346          move.l    12(A6),A0
00004402  1010      7347          move.b    (A0),D0
00004404  4880      7348          ext.w     D0
00004406  48C0      7349          ext.l     D0
00004408  0C80 0000 7350          cmp.l     #108,D0
0000440C  006C      
0000440E  660A      7351          bne.s     vsprintf_20
00004410  52AE 000C 7352          addq.l    #1,12(A6)
00004414  1D7C 0001 7353          move.b    #1,-45(A6)
00004418  FFD3      
                    7354   vsprintf_20:
0000441A  206E 000C 7355          move.l    12(A6),A0
0000441E  1010      7356          move.b    (A0),D0
00004420  4880      7357          ext.w     D0
00004422  48C0      7358          ext.l     D0
00004424  0C80 0000 7359          cmp.l     #111,D0
00004428  006F      
0000442A  6700 00D4 7360          beq       vsprintf_27
0000442E  6E34      7361          bgt.s     vsprintf_33
00004430  0C80 0000 7362          cmp.l     #100,D0
00004434  0064      
00004436  6700 0054 7363          beq       vsprintf_24
0000443A  6E1C      7364          bgt.s     vsprintf_34
0000443C  0C80 0000 7365          cmp.l     #99,D0
00004440  0063      
00004442  6700 012C 7366          beq       vsprintf_30
00004446  6E00 016A 7367          bgt       vsprintf_22
0000444A  0C80 0000 7368          cmp.l     #88,D0
0000444E  0058      
00004450  6700 00E6 7369          beq       vsprintf_28
00004454  6000 015C 7370          bra       vsprintf_22
                    7371   vsprintf_34:
00004458  0C80 0000 7372          cmp.l     #105,D0
0000445C  0069      
0000445E  672C      7373          beq.s     vsprintf_24
00004460  6000 0150 7374          bra       vsprintf_22
                    7375   vsprintf_33:
00004464  0C80 0000 7376          cmp.l     #117,D0
00004468  0075      
0000446A  6700 005C 7377          beq       vsprintf_26
0000446E  6E0E      7378          bgt.s     vsprintf_35
00004470  0C80 0000 7379          cmp.l     #115,D0
00004474  0073      
00004476  6700 011C 7380          beq       vsprintf_31
0000447A  6000 0136 7381          bra       vsprintf_22
                    7382   vsprintf_35:
0000447E  0C80 0000 7383          cmp.l     #120,D0
00004482  0078      
00004484  6700 00B2 7384          beq       vsprintf_28
00004488  6000 0128 7385          bra       vsprintf_22
                    7386   vsprintf_24:
0000448C  4A2E FFD3 7387          tst.b     -45(A6)
00004490  671A      7388          beq.s     vsprintf_36
00004492  4878 000A 7389          pea       10
00004496  2F03      7390          move.l    D3,-(A7)
00004498  206E 0010 7391          move.l    16(A6),A0
0000449C  58AE 0010 7392          addq.l    #4,16(A6)
000044A0  2F10      7393          move.l    (A0),-(A7)
000044A2  6100 057E 7394          bsr       _ltoa
000044A6  DEFC 000C 7395          add.w     #12,A7
000044AA  6018      7396          bra.s     vsprintf_37
                    7397   vsprintf_36:
000044AC  4878 000A 7398          pea       10
000044B0  2F03      7399          move.l    D3,-(A7)
000044B2  206E 0010 7400          move.l    16(A6),A0
000044B6  58AE 0010 7401          addq.l    #4,16(A6)
000044BA  2F10      7402          move.l    (A0),-(A7)
000044BC  6100 0564 7403          bsr       _ltoa
000044C0  DEFC 000C 7404          add.w     #12,A7
                    7405   vsprintf_37:
000044C4  6000 00FA 7406          bra       vsprintf_23
                    7407   vsprintf_26:
000044C8  4A2E FFD3 7408          tst.b     -45(A6)
000044CC  6718      7409          beq.s     vsprintf_38
000044CE  4878 000A 7410          pea       10
000044D2  2F03      7411          move.l    D3,-(A7)
000044D4  206E 0010 7412          move.l    16(A6),A0
000044D8  58AE 0010 7413          addq.l    #4,16(A6)
000044DC  2F10      7414          move.l    (A0),-(A7)
000044DE  4E94      7415          jsr       (A4)
000044E0  DEFC 000C 7416          add.w     #12,A7
000044E4  6016      7417          bra.s     vsprintf_39
                    7418   vsprintf_38:
000044E6  4878 000A 7419          pea       10
000044EA  2F03      7420          move.l    D3,-(A7)
000044EC  206E 0010 7421          move.l    16(A6),A0
000044F0  58AE 0010 7422          addq.l    #4,16(A6)
000044F4  2F10      7423          move.l    (A0),-(A7)
000044F6  4E94      7424          jsr       (A4)
000044F8  DEFC 000C 7425          add.w     #12,A7
                    7426   vsprintf_39:
000044FC  6000 00C2 7427          bra       vsprintf_23
                    7428   vsprintf_27:
00004500  4A2E FFD3 7429          tst.b     -45(A6)
00004504  6718      7430          beq.s     vsprintf_40
00004506  4878 0008 7431          pea       8
0000450A  2F03      7432          move.l    D3,-(A7)
0000450C  206E 0010 7433          move.l    16(A6),A0
00004510  58AE 0010 7434          addq.l    #4,16(A6)
00004514  2F10      7435          move.l    (A0),-(A7)
00004516  4E94      7436          jsr       (A4)
00004518  DEFC 000C 7437          add.w     #12,A7
0000451C  6016      7438          bra.s     vsprintf_41
                    7439   vsprintf_40:
0000451E  4878 0008 7440          pea       8
00004522  2F03      7441          move.l    D3,-(A7)
00004524  206E 0010 7442          move.l    16(A6),A0
00004528  58AE 0010 7443          addq.l    #4,16(A6)
0000452C  2F10      7444          move.l    (A0),-(A7)
0000452E  4E94      7445          jsr       (A4)
00004530  DEFC 000C 7446          add.w     #12,A7
                    7447   vsprintf_41:
00004534  6000 008A 7448          bra       vsprintf_23
                    7449   vsprintf_28:
00004538  4A2E FFD3 7450          tst.b     -45(A6)
0000453C  6718      7451          beq.s     vsprintf_42
0000453E  4878 0010 7452          pea       16
00004542  2F03      7453          move.l    D3,-(A7)
00004544  206E 0010 7454          move.l    16(A6),A0
00004548  58AE 0010 7455          addq.l    #4,16(A6)
0000454C  2F10      7456          move.l    (A0),-(A7)
0000454E  4E94      7457          jsr       (A4)
00004550  DEFC 000C 7458          add.w     #12,A7
00004554  6016      7459          bra.s     vsprintf_43
                    7460   vsprintf_42:
00004556  4878 0010 7461          pea       16
0000455A  2F03      7462          move.l    D3,-(A7)
0000455C  206E 0010 7463          move.l    16(A6),A0
00004560  58AE 0010 7464          addq.l    #4,16(A6)
00004564  2F10      7465          move.l    (A0),-(A7)
00004566  4E94      7466          jsr       (A4)
00004568  DEFC 000C 7467          add.w     #12,A7
                    7468   vsprintf_43:
0000456C  6000 0052 7469          bra       vsprintf_23
                    7470   vsprintf_30:
00004570  206E 0010 7471          move.l    16(A6),A0
00004574  58AE 0010 7472          addq.l    #4,16(A6)
00004578  2010      7473          move.l    (A0),D0
0000457A  2042      7474          move.l    D2,A0
0000457C  5282      7475          addq.l    #1,D2
0000457E  1080      7476          move.b    D0,(A0)
00004580  2042      7477          move.l    D2,A0
00004582  4210      7478          clr.b     (A0)
00004584  200D      7479          move.l    A5,D0
00004586  6704      7480          beq.s     vsprintf_44
00004588  200D      7481          move.l    A5,D0
0000458A  6002      7482          bra.s     vsprintf_45
                    7483   vsprintf_44:
0000458C  7001      7484          moveq     #1,D0
                    7485   vsprintf_45:
0000458E  2A00      7486          move.l    D0,D5
00004590  6000 002E 7487          bra       vsprintf_23
                    7488   vsprintf_31:
00004594  206E 0010 7489          move.l    16(A6),A0
00004598  58AE 0010 7490          addq.l    #4,16(A6)
0000459C  2610      7491          move.l    (A0),D3
0000459E  0C85 FFFF 7492          cmp.l     #-1,D5
000045A2  FFFF      
000045A4  660A      7493          bne.s     vsprintf_46
000045A6  2F03      7494          move.l    D3,-(A7)
000045A8  6100 055E 7495          bsr       _strlen
000045AC  584F      7496          addq.w    #4,A7
000045AE  2A00      7497          move.l    D0,D5
                    7498   vsprintf_46:
000045B0  600E      7499          bra.s     vsprintf_23
                    7500   vsprintf_22:
000045B2  206E 000C 7501          move.l    12(A6),A0
000045B6  2242      7502          move.l    D2,A1
000045B8  5282      7503          addq.l    #1,D2
000045BA  1290      7504          move.b    (A0),(A1)
000045BC  2042      7505          move.l    D2,A0
000045BE  4210      7506          clr.b     (A0)
                    7507   vsprintf_23:
000045C0  2F03      7508          move.l    D3,-(A7)
000045C2  6100 0544 7509          bsr       _strlen
000045C6  584F      7510          addq.w    #4,A7
000045C8  1800      7511          move.b    D0,D4
000045CA  206E 000C 7512          move.l    12(A6),A0
000045CE  1010      7513          move.b    (A0),D0
000045D0  4880      7514          ext.w     D0
000045D2  48C0      7515          ext.l     D0
000045D4  0C80 0000 7516          cmp.l     #115,D0
000045D8  0073      
000045DA  6618      7517          bne.s     vsprintf_48
000045DC  0C85 0000 7518          cmp.l     #0,D5
000045E0  0000      
000045E2  6D10      7519          blt.s     vsprintf_48
000045E4  4884      7520          ext.w     D4
000045E6  48C4      7521          ext.l     D4
000045E8  B885      7522          cmp.l     D5,D4
000045EA  6F04      7523          ble.s     vsprintf_50
000045EC  1005      7524          move.b    D5,D0
000045EE  6002      7525          bra.s     vsprintf_51
                    7526   vsprintf_50:
000045F0  1004      7527          move.b    D4,D0
                    7528   vsprintf_51:
000045F2  1800      7529          move.b    D0,D4
                    7530   vsprintf_48:
000045F4  206E 000C 7531          move.l    12(A6),A0
000045F8  1010      7532          move.b    (A0),D0
000045FA  4880      7533          ext.w     D0
000045FC  48C0      7534          ext.l     D0
000045FE  0C80 0000 7535          cmp.l     #88,D0
00004602  0058      
00004604  6600 0026 7536          bne       vsprintf_56
00004608  41EE FFDC 7537          lea       -36(A6),A0
0000460C  2408      7538          move.l    A0,D2
                    7539   vsprintf_54:
0000460E  2042      7540          move.l    D2,A0
00004610  4A10      7541          tst.b     (A0)
00004612  6718      7542          beq.s     vsprintf_56
00004614  2042      7543          move.l    D2,A0
00004616  1210      7544          move.b    (A0),D1
00004618  4881      7545          ext.w     D1
0000461A  48C1      7546          ext.l     D1
0000461C  2F01      7547          move.l    D1,-(A7)
0000461E  6100 F302 7548          bsr       _toupper
00004622  584F      7549          addq.w    #4,A7
00004624  2042      7550          move.l    D2,A0
00004626  1080      7551          move.b    D0,(A0)
00004628  5282      7552          addq.l    #1,D2
0000462A  60E2      7553          bra       vsprintf_54
                    7554   vsprintf_56:
0000462C  7E00      7555          moveq     #0,D7
0000462E  41EE FFD4 7556          lea       -44(A6),A0
00004632  2408      7557          move.l    A0,D2
00004634  206E 000C 7558          move.l    12(A6),A0
00004638  1010      7559          move.b    (A0),D0
0000463A  4880      7560          ext.w     D0
0000463C  48C0      7561          ext.l     D0
0000463E  0C80 0000 7562          cmp.l     #100,D0
00004642  0064      
00004644  6714      7563          beq.s     vsprintf_59
00004646  206E 000C 7564          move.l    12(A6),A0
0000464A  1010      7565          move.b    (A0),D0
0000464C  4880      7566          ext.w     D0
0000464E  48C0      7567          ext.l     D0
00004650  0C80 0000 7568          cmp.l     #105,D0
00004654  0069      
00004656  6600 0076 7569          bne       vsprintf_65
                    7570   vsprintf_59:
0000465A  4A2E FFCE 7571          tst.b     -50(A6)
0000465E  6612      7572          bne.s     vsprintf_62
00004660  2043      7573          move.l    D3,A0
00004662  1010      7574          move.b    (A0),D0
00004664  4880      7575          ext.w     D0
00004666  48C0      7576          ext.l     D0
00004668  0C80 0000 7577          cmp.l     #45,D0
0000466C  002D      
0000466E  6600 002E 7578          bne       vsprintf_60
                    7579   vsprintf_62:
00004672  2043      7580          move.l    D3,A0
00004674  1010      7581          move.b    (A0),D0
00004676  4880      7582          ext.w     D0
00004678  48C0      7583          ext.l     D0
0000467A  0C80 0000 7584          cmp.l     #45,D0
0000467E  002D      
00004680  660E      7585          bne.s     vsprintf_63
00004682  2043      7586          move.l    D3,A0
00004684  5283      7587          addq.l    #1,D3
00004686  2242      7588          move.l    D2,A1
00004688  5282      7589          addq.l    #1,D2
0000468A  1290      7590          move.b    (A0),(A1)
0000468C  5304      7591          subq.b    #1,D4
0000468E  6008      7592          bra.s     vsprintf_64
                    7593   vsprintf_63:
00004690  2042      7594          move.l    D2,A0
00004692  5282      7595          addq.l    #1,D2
00004694  10BC 002B 7596          move.b    #43,(A0)
                    7597   vsprintf_64:
00004698  5287      7598          addq.l    #1,D7
0000469A  6000 0032 7599          bra       vsprintf_65
                    7600   vsprintf_60:
0000469E  4A2E FFCF 7601          tst.b     -49(A6)
000046A2  6700 002A 7602          beq       vsprintf_65
000046A6  2043      7603          move.l    D3,A0
000046A8  1010      7604          move.b    (A0),D0
000046AA  4880      7605          ext.w     D0
000046AC  48C0      7606          ext.l     D0
000046AE  0C80 0000 7607          cmp.l     #45,D0
000046B2  002D      
000046B4  660E      7608          bne.s     vsprintf_67
000046B6  2043      7609          move.l    D3,A0
000046B8  5283      7610          addq.l    #1,D3
000046BA  2242      7611          move.l    D2,A1
000046BC  5282      7612          addq.l    #1,D2
000046BE  1290      7613          move.b    (A0),(A1)
000046C0  5304      7614          subq.b    #1,D4
000046C2  6008      7615          bra.s     vsprintf_68
                    7616   vsprintf_67:
000046C4  2042      7617          move.l    D2,A0
000046C6  5282      7618          addq.l    #1,D2
000046C8  10BC 0020 7619          move.b    #32,(A0)
                    7620   vsprintf_68:
000046CC  5287      7621          addq.l    #1,D7
                    7622   vsprintf_65:
000046CE  4A2E FFD0 7623          tst.b     -48(A6)
000046D2  6700 0066 7624          beq       vsprintf_77
000046D6  206E 000C 7625          move.l    12(A6),A0
000046DA  1010      7626          move.b    (A0),D0
000046DC  4880      7627          ext.w     D0
000046DE  48C0      7628          ext.l     D0
000046E0  0C80 0000 7629          cmp.l     #111,D0
000046E4  006F      
000046E6  671A      7630          beq.s     vsprintf_73
000046E8  6E0C      7631          bgt.s     vsprintf_76
000046EA  0C80 0000 7632          cmp.l     #88,D0
000046EE  0058      
000046F0  6710      7633          beq.s     vsprintf_73
000046F2  6000 0046 7634          bra       vsprintf_77
                    7635   vsprintf_76:
000046F6  0C80 0000 7636          cmp.l     #120,D0
000046FA  0078      
000046FC  6704      7637          beq.s     vsprintf_73
000046FE  6000 003A 7638          bra       vsprintf_77
                    7639   vsprintf_73:
00004702  2042      7640          move.l    D2,A0
00004704  5282      7641          addq.l    #1,D2
00004706  10BC 0030 7642          move.b    #48,(A0)
0000470A  5287      7643          addq.l    #1,D7
0000470C  206E 000C 7644          move.l    12(A6),A0
00004710  1010      7645          move.b    (A0),D0
00004712  4880      7646          ext.w     D0
00004714  48C0      7647          ext.l     D0
00004716  0C80 0000 7648          cmp.l     #120,D0
0000471A  0078      
0000471C  6712      7649          beq.s     vsprintf_79
0000471E  206E 000C 7650          move.l    12(A6),A0
00004722  1010      7651          move.b    (A0),D0
00004724  4880      7652          ext.w     D0
00004726  48C0      7653          ext.l     D0
00004728  0C80 0000 7654          cmp.l     #88,D0
0000472C  0058      
0000472E  660A      7655          bne.s     vsprintf_77
                    7656   vsprintf_79:
00004730  2042      7657          move.l    D2,A0
00004732  5282      7658          addq.l    #1,D2
00004734  10BC 0078 7659          move.b    #120,(A0)
00004738  5287      7660          addq.l    #1,D7
                    7661   vsprintf_77:
0000473A  2042      7662          move.l    D2,A0
0000473C  4210      7663          clr.b     (A0)
0000473E  206E 000C 7664          move.l    12(A6),A0
00004742  1010      7665          move.b    (A0),D0
00004744  4880      7666          ext.w     D0
00004746  48C0      7667          ext.l     D0
00004748  0C80 0000 7668          cmp.l     #105,D0
0000474C  0069      
0000474E  6700 0076 7669          beq       vsprintf_82
00004752  6E42      7670          bgt.s     vsprintf_93
00004754  0C80 0000 7671          cmp.l     #99,D0
00004758  0063      
0000475A  6700 0084 7672          beq       vsprintf_96
0000475E  6E1C      7673          bgt.s     vsprintf_94
00004760  0C80 0000 7674          cmp.l     #88,D0
00004764  0058      
00004766  6700 005E 7675          beq       vsprintf_82
0000476A  6E00 0184 7676          bgt       vsprintf_80
0000476E  0C80 0000 7677          cmp.l     #69,D0
00004772  0045      
00004774  6700 0050 7678          beq       vsprintf_82
00004778  6000 0176 7679          bra       vsprintf_80
                    7680   vsprintf_94:
0000477C  0C80 0000 7681          cmp.l     #101,D0
00004780  0065      
00004782  6700 0042 7682          beq       vsprintf_82
00004786  6E00 0168 7683          bgt       vsprintf_80
0000478A  0C80 0000 7684          cmp.l     #100,D0
0000478E  0064      
00004790  6734      7685          beq.s     vsprintf_82
00004792  6000 015C 7686          bra       vsprintf_80
                    7687   vsprintf_93:
00004796  0C80 0000 7688          cmp.l     #117,D0
0000479A  0075      
0000479C  6728      7689          beq.s     vsprintf_82
0000479E  6E1A      7690          bgt.s     vsprintf_95
000047A0  0C80 0000 7691          cmp.l     #115,D0
000047A4  0073      
000047A6  6700 0038 7692          beq       vsprintf_96
000047AA  6E00 0144 7693          bgt       vsprintf_80
000047AE  0C80 0000 7694          cmp.l     #111,D0
000047B2  006F      
000047B4  6710      7695          beq.s     vsprintf_82
000047B6  6000 0138 7696          bra       vsprintf_80
                    7697   vsprintf_95:
000047BA  0C80 0000 7698          cmp.l     #120,D0
000047BE  0078      
000047C0  6704      7699          beq.s     vsprintf_82
000047C2  6000 012C 7700          bra       vsprintf_80
                    7701   vsprintf_82:
000047C6  4A2E FFD2 7702          tst.b     -46(A6)
000047CA  6714      7703          beq.s     vsprintf_96
000047CC  4A2E FFCD 7704          tst.b     -51(A6)
000047D0  660E      7705          bne.s     vsprintf_96
000047D2  200D      7706          move.l    A5,D0
000047D4  9087      7707          sub.l     D7,D0
000047D6  4884      7708          ext.w     D4
000047D8  48C4      7709          ext.l     D4
000047DA  9084      7710          sub.l     D4,D0
000047DC  2D40 FFFC 7711          move.l    D0,-4(A6)
                    7712   vsprintf_96:
000047E0  202E FFFC 7713          move.l    -4(A6),D0
000047E4  0C80 0000 7714          cmp.l     #0,D0
000047E8  0000      
000047EA  6C04      7715          bge.s     vsprintf_98
000047EC  42AE FFFC 7716          clr.l     -4(A6)
                    7717   vsprintf_98:
000047F0  4A2E FFCD 7718          tst.b     -51(A6)
000047F4  6600 0030 7719          bne       vsprintf_104
000047F8  4884      7720          ext.w     D4
000047FA  48C4      7721          ext.l     D4
000047FC  2004      7722          move.l    D4,D0
000047FE  D0AE FFFC 7723          add.l     -4(A6),D0
00004802  D087      7724          add.l     D7,D0
00004804  1D40 FFD1 7725          move.b    D0,-47(A6)
                    7726   vsprintf_102:
00004808  102E FFD1 7727          move.b    -47(A6),D0
0000480C  4880      7728          ext.w     D0
0000480E  48C0      7729          ext.l     D0
00004810  220D      7730          move.l    A5,D1
00004812  534D      7731          subq.w    #1,A5
00004814  B081      7732          cmp.l     D1,D0
00004816  6C0E      7733          bge.s     vsprintf_104
00004818  4878 0020 7734          pea       32
0000481C  2F0A      7735          move.l    A2,-(A7)
0000481E  4E93      7736          jsr       (A3)
00004820  504F      7737          addq.w    #8,A7
00004822  5286      7738          addq.l    #1,D6
00004824  60E2      7739          bra       vsprintf_102
                    7740   vsprintf_104:
00004826  41EE FFD4 7741          lea       -44(A6),A0
0000482A  2408      7742          move.l    A0,D2
                    7743   vsprintf_105:
0000482C  2042      7744          move.l    D2,A0
0000482E  4A10      7745          tst.b     (A0)
00004830  6716      7746          beq.s     vsprintf_107
00004832  2042      7747          move.l    D2,A0
00004834  5282      7748          addq.l    #1,D2
00004836  1210      7749          move.b    (A0),D1
00004838  4881      7750          ext.w     D1
0000483A  48C1      7751          ext.l     D1
0000483C  2F01      7752          move.l    D1,-(A7)
0000483E  2F0A      7753          move.l    A2,-(A7)
00004840  4E93      7754          jsr       (A3)
00004842  504F      7755          addq.w    #8,A7
00004844  5286      7756          addq.l    #1,D6
00004846  60E4      7757          bra       vsprintf_105
                    7758   vsprintf_107:
00004848  202E FFFC 7759          move.l    -4(A6),D0
0000484C  1D40 FFD1 7760          move.b    D0,-47(A6)
                    7761   vsprintf_108:
00004850  102E FFD1 7762          move.b    -47(A6),D0
00004854  532E FFD1 7763          subq.b    #1,-47(A6)
00004858  4A00      7764          tst.b     D0
0000485A  670E      7765          beq.s     vsprintf_110
0000485C  4878 0030 7766          pea       48
00004860  2F0A      7767          move.l    A2,-(A7)
00004862  4E93      7768          jsr       (A3)
00004864  504F      7769          addq.w    #8,A7
00004866  5286      7770          addq.l    #1,D6
00004868  60E6      7771          bra       vsprintf_108
                    7772   vsprintf_110:
0000486A  2043      7773          move.l    D3,A0
0000486C  4A10      7774          tst.b     (A0)
0000486E  6700 0048 7775          beq       vsprintf_113
00004872  206E 000C 7776          move.l    12(A6),A0
00004876  1010      7777          move.b    (A0),D0
00004878  4880      7778          ext.w     D0
0000487A  48C0      7779          ext.l     D0
0000487C  0C80 0000 7780          cmp.l     #115,D0
00004880  0073      
00004882  670C      7781          beq.s     vsprintf_116
00004884  6E18      7782          bgt.s     vsprintf_119
00004886  0C80 0000 7783          cmp.l     #99,D0
0000488A  0063      
0000488C  6702      7784          beq.s     vsprintf_116
0000488E  600E      7785          bra.s     vsprintf_119
                    7786   vsprintf_116:
00004890  2005      7787          move.l    D5,D0
00004892  5385      7788          subq.l    #1,D5
00004894  0C80 0000 7789          cmp.l     #0,D0
00004898  0000      
0000489A  6E02      7790          bgt.s     vsprintf_119
0000489C  6016      7791          bra.s     vsprintf_115
                    7792   vsprintf_119:
0000489E  2043      7793          move.l    D3,A0
000048A0  5283      7794          addq.l    #1,D3
000048A2  1210      7795          move.b    (A0),D1
000048A4  4881      7796          ext.w     D1
000048A6  48C1      7797          ext.l     D1
000048A8  2F01      7798          move.l    D1,-(A7)
000048AA  2F0A      7799          move.l    A2,-(A7)
000048AC  4E93      7800          jsr       (A3)
000048AE  504F      7801          addq.w    #8,A7
000048B0  5286      7802          addq.l    #1,D6
000048B2  6002      7803          bra.s     vsprintf_112
                    7804   vsprintf_115:
000048B4  6002      7805          bra.s     vsprintf_113
                    7806   vsprintf_112:
000048B6  60B2      7807          bra       vsprintf_110
                    7808   vsprintf_113:
000048B8  4A2E FFCD 7809          tst.b     -51(A6)
000048BC  6700 0030 7810          beq       vsprintf_125
000048C0  4884      7811          ext.w     D4
000048C2  48C4      7812          ext.l     D4
000048C4  2004      7813          move.l    D4,D0
000048C6  D0AE FFFC 7814          add.l     -4(A6),D0
000048CA  D087      7815          add.l     D7,D0
000048CC  1D40 FFD1 7816          move.b    D0,-47(A6)
                    7817   vsprintf_123:
000048D0  102E FFD1 7818          move.b    -47(A6),D0
000048D4  4880      7819          ext.w     D0
000048D6  48C0      7820          ext.l     D0
000048D8  220D      7821          move.l    A5,D1
000048DA  534D      7822          subq.w    #1,A5
000048DC  B081      7823          cmp.l     D1,D0
000048DE  6C0E      7824          bge.s     vsprintf_125
000048E0  4878 0020 7825          pea       32
000048E4  2F0A      7826          move.l    A2,-(A7)
000048E6  4E93      7827          jsr       (A3)
000048E8  504F      7828          addq.w    #8,A7
000048EA  5386      7829          subq.l    #1,D6
000048EC  60E2      7830          bra       vsprintf_123
                    7831   vsprintf_125:
000048EE  6014      7832          bra.s     vsprintf_81
                    7833   vsprintf_80:
000048F0  206E 000C 7834          move.l    12(A6),A0
000048F4  1210      7835          move.b    (A0),D1
000048F6  4881      7836          ext.w     D1
000048F8  48C1      7837          ext.l     D1
000048FA  2F01      7838          move.l    D1,-(A7)
000048FC  2F0A      7839          move.l    A2,-(A7)
000048FE  4E93      7840          jsr       (A3)
00004900  504F      7841          addq.w    #8,A7
00004902  5286      7842          addq.l    #1,D6
                    7843   vsprintf_81:
00004904  52AE 000C 7844          addq.l    #1,12(A6)
                    7845   vsprintf_2:
00004908  6000 F9D6 7846          bra       vsprintf_1
                    7847   vsprintf_3:
0000490C  4A92      7848          tst.l     (A2)
0000490E  6710      7849          beq.s     vsprintf_126
00004910  4201      7850          clr.b     D1
00004912  C2BC 0000 7851          and.l     #255,D1
00004916  00FF      
00004918  2F01      7852          move.l    D1,-(A7)
0000491A  2F0A      7853          move.l    A2,-(A7)
0000491C  4E93      7854          jsr       (A3)
0000491E  504F      7855          addq.w    #8,A7
                    7856   vsprintf_126:
00004920  2006      7857          move.l    D6,D0
00004922  4CDF 3CFC 7858          movem.l   (A7)+,D2/D3/D4/D5/D6/D7/A2/A3/A4/A5
00004926  4E5E      7859          unlk      A6
00004928  4E75      7860          rts
                    7861   _gets:
0000492A  4E56 0000 7862          link      A6,#0
0000492E  48E7 3820 7863          movem.l   D2/D3/D4/A2,-(A7)
00004932  45F8 3840 7864          lea       _putch,A2
00004936  282E 0008 7865          move.l    8(A6),D4
0000493A  2404      7866          move.l    D4,D2
                    7867   gets_1:
0000493C  6100 EF32 7868          bsr       _getch
00004940  2600      7869          move.l    D0,D3
00004942  0C80 0000 7870          cmp.l     #10,D0
00004946  000A      
00004948  6700 003C 7871          beq       gets_3
0000494C  0C83 0000 7872          cmp.l     #8,D3
00004950  0008      
00004952  6712      7873          beq.s     gets_4
00004954  2042      7874          move.l    D2,A0
00004956  5282      7875          addq.l    #1,D2
00004958  1083      7876          move.b    D3,(A0)
0000495A  4883      7877          ext.w     D3
0000495C  48C3      7878          ext.l     D3
0000495E  2F03      7879          move.l    D3,-(A7)
00004960  4E92      7880          jsr       (A2)
00004962  584F      7881          addq.w    #4,A7
00004964  601E      7882          bra.s     gets_6
                    7883   gets_4:
00004966  B484      7884          cmp.l     D4,D2
00004968  631A      7885          bls.s     gets_6
0000496A  4878 0008 7886          pea       8
0000496E  4E92      7887          jsr       (A2)
00004970  584F      7888          addq.w    #4,A7
00004972  4878 0020 7889          pea       32
00004976  4E92      7890          jsr       (A2)
00004978  584F      7891          addq.w    #4,A7
0000497A  4878 0008 7892          pea       8
0000497E  4E92      7893          jsr       (A2)
00004980  584F      7894          addq.w    #4,A7
00004982  5382      7895          subq.l    #1,D2
                    7896   gets_6:
00004984  60B6      7897          bra       gets_1
                    7898   gets_3:
00004986  4878 000A 7899          pea       10
0000498A  4E92      7900          jsr       (A2)
0000498C  584F      7901          addq.w    #4,A7
0000498E  2042      7902          move.l    D2,A0
00004990  4210      7903          clr.b     (A0)
00004992  2004      7904          move.l    D4,D0
00004994  4CDF 041C 7905          movem.l   (A7)+,D2/D3/D4/A2
00004998  4E5E      7906          unlk      A6
0000499A  4E75      7907          rts
                    7908   _ungetch:
0000499C  4E56 0000 7909          link      A6,#0
000049A0  23EE 0008 7910          move.l    8(A6),__ungetbuf
000049A4  0803 00C0 
000049A8  202E 0008 7911          move.l    8(A6),D0
000049AC  4E5E      7912          unlk      A6
000049AE  4E75      7913          rts
                    7914   @itoa_convert:
000049B0  4E56 0000 7915          link      A6,#0
000049B4  48E7 3C00 7916          movem.l   D2/D3/D4/D5,-(A7)
000049B8  242E 0008 7917          move.l    8(A6),D2
000049BC  262E 0010 7918          move.l    16(A6),D3
000049C0  2A2E 000C 7919          move.l    12(A6),D5
000049C4  2F05      7920          move.l    D5,-(A7)
000049C6  2F03      7921          move.l    D3,-(A7)
000049C8  6100 ECF8 7922          bsr       ULDIV
000049CC  202F 0004 7923          move.l    4(A7),D0
000049D0  504F      7924          addq.w    #8,A7
000049D2  2800      7925          move.l    D0,D4
000049D4  BA83      7926          cmp.l     D3,D5
000049D6  651A      7927          blo.s     @itoa_convert_1
000049D8  2F03      7928          move.l    D3,-(A7)
000049DA  2F05      7929          move.l    D5,-(A7)
000049DC  2F03      7930          move.l    D3,-(A7)
000049DE  6100 ECE2 7931          bsr       ULDIV
000049E2  2217      7932          move.l    (A7),D1
000049E4  504F      7933          addq.w    #8,A7
000049E6  2F01      7934          move.l    D1,-(A7)
000049E8  2F02      7935          move.l    D2,-(A7)
000049EA  61C4      7936          bsr       @itoa_convert
000049EC  DEFC 000C 7937          add.w     #12,A7
000049F0  2400      7938          move.l    D0,D2
                    7939   @itoa_convert_1:
000049F2  0C84 0000 7940          cmp.l     #9,D4
000049F6  0009      
000049F8  6E0A      7941          bgt.s     @itoa_convert_3
000049FA  2004      7942          move.l    D4,D0
000049FC  0680 0000 7943          add.l     #48,D0
00004A00  0030      
00004A02  600E      7944          bra.s     @itoa_convert_4
                    7945   @itoa_convert_3:
00004A04  2004      7946          move.l    D4,D0
00004A06  0680 0000 7947          add.l     #97,D0
00004A0A  0061      
00004A0C  0480 0000 7948          sub.l     #10,D0
00004A10  000A      
                    7949   @itoa_convert_4:
00004A12  2042      7950          move.l    D2,A0
00004A14  1080      7951          move.b    D0,(A0)
00004A16  2002      7952          move.l    D2,D0
00004A18  5280      7953          addq.l    #1,D0
00004A1A  4CDF 003C 7954          movem.l   (A7)+,D2/D3/D4/D5
00004A1E  4E5E      7955          unlk      A6
00004A20  4E75      7956          rts
                    7957   _ltoa:
00004A22  4E56 0000 7958          link      A6,#0
00004A26  48E7 3C00 7959          movem.l   D2/D3/D4/D5,-(A7)
00004A2A  242E 0008 7960          move.l    8(A6),D2
00004A2E  262E 000C 7961          move.l    12(A6),D3
00004A32  2A2E 0010 7962          move.l    16(A6),D5
00004A36  2803      7963          move.l    D3,D4
00004A38  0C85 0000 7964          cmp.l     #2,D5
00004A3C  0002      
00004A3E  6D08      7965          blt.s     ltoa_3
00004A40  0C85 0000 7966          cmp.l     #36,D5
00004A44  0024      
00004A46  6F06      7967          ble.s     ltoa_1
                    7968   ltoa_3:
00004A48  2003      7969          move.l    D3,D0
00004A4A  6000 0052 7970          bra       ltoa_4
                    7971   ltoa_1:
00004A4E  0C85 0000 7972          cmp.l     #10,D5
00004A52  000A      
00004A54  6600 0032 7973          bne       ltoa_5
00004A58  0C82 0000 7974          cmp.l     #0,D2
00004A5C  0000      
00004A5E  6C28      7975          bge.s     ltoa_5
00004A60  2002      7976          move.l    D2,D0
00004A62  4480      7977          neg.l     D0
00004A64  2400      7978          move.l    D0,D2
00004A66  0C82 0000 7979          cmp.l     #0,D2
00004A6A  0000      
00004A6C  6C12      7980          bge.s     ltoa_7
00004A6E  4879 0000 7981          pea       @itoa_1
00004A72  6240      
00004A74  2F03      7982          move.l    D3,-(A7)
00004A76  6100 EC3A 7983          bsr       _strcpy
00004A7A  504F      7984          addq.w    #8,A7
00004A7C  2003      7985          move.l    D3,D0
00004A7E  601E      7986          bra.s     ltoa_4
                    7987   ltoa_7:
00004A80  2044      7988          move.l    D4,A0
00004A82  5284      7989          addq.l    #1,D4
00004A84  10BC 002D 7990          move.b    #45,(A0)
                    7991   ltoa_5:
00004A88  2F05      7992          move.l    D5,-(A7)
00004A8A  2F02      7993          move.l    D2,-(A7)
00004A8C  2F04      7994          move.l    D4,-(A7)
00004A8E  6100 FF20 7995          bsr       @itoa_convert
00004A92  DEFC 000C 7996          add.w     #12,A7
00004A96  2800      7997          move.l    D0,D4
00004A98  2044      7998          move.l    D4,A0
00004A9A  4210      7999          clr.b     (A0)
00004A9C  2003      8000          move.l    D3,D0
                    8001   ltoa_4:
00004A9E  4CDF 003C 8002          movem.l   (A7)+,D2/D3/D4/D5
00004AA2  4E5E      8003          unlk      A6
00004AA4  4E75      8004          rts
                    8005   _ultoa:
00004AA6  4E56 0000 8006          link      A6,#0
00004AAA  48E7 3800 8007          movem.l   D2/D3/D4,-(A7)
00004AAE  262E 0010 8008          move.l    16(A6),D3
00004AB2  282E 000C 8009          move.l    12(A6),D4
00004AB6  2404      8010          move.l    D4,D2
00004AB8  0C83 0000 8011          cmp.l     #2,D3
00004ABC  0002      
00004ABE  6D08      8012          blt.s     ultoa_3
00004AC0  0C83 0000 8013          cmp.l     #36,D3
00004AC4  0024      
00004AC6  6F04      8014          ble.s     ultoa_1
                    8015   ultoa_3:
00004AC8  2004      8016          move.l    D4,D0
00004ACA  6018      8017          bra.s     ultoa_4
                    8018   ultoa_1:
00004ACC  2F03      8019          move.l    D3,-(A7)
00004ACE  2F2E 0008 8020          move.l    8(A6),-(A7)
00004AD2  2F02      8021          move.l    D2,-(A7)
00004AD4  6100 FEDA 8022          bsr       @itoa_convert
00004AD8  DEFC 000C 8023          add.w     #12,A7
00004ADC  2400      8024          move.l    D0,D2
00004ADE  2042      8025          move.l    D2,A0
00004AE0  4210      8026          clr.b     (A0)
00004AE2  2004      8027          move.l    D4,D0
                    8028   ultoa_4:
00004AE4  4CDF 001C 8029          movem.l   (A7)+,D2/D3/D4
00004AE8  4E5E      8030          unlk      A6
00004AEA  4E75      8031          rts
                    8032   _itoa:
00004AEC  4E56 0000 8033          link      A6,#0
00004AF0  2F2E 0010 8034          move.l    16(A6),-(A7)
00004AF4  2F2E 000C 8035          move.l    12(A6),-(A7)
00004AF8  2F2E 0008 8036          move.l    8(A6),-(A7)
00004AFC  6100 FF24 8037          bsr       _ltoa
00004B00  DEFC 000C 8038          add.w     #12,A7
00004B04  4E5E      8039          unlk      A6
00004B06  4E75      8040          rts
                    8041   _strlen:
00004B08  206F 0004 8042          move.l    (4,A7),A0
00004B0C  2248      8043          move.l    A0,A1
                    8044   strlen_1:
00004B0E  4A19      8045          tst.b     (A1)+
00004B10  66FC      8046          bne       strlen_1
00004B12  2009      8047          move.l    A1,D0
00004B14  9088      8048          sub.l     A0,D0
00004B16  5380      8049          subq.l    #1,D0
00004B18  4E75      8050          rts
                    8051          section   const
                    8052   
                    8053   @m68kde~1_1:
00004B1A  0D0A 00   8054          dc.b      13,10,0
                    8055   @m68kde~1_2:
00004B1E  0D53 7769 8056          dc.b      13,83,119,105,116,99,104,101,115,32,83,87,91
00004B22  7463 6865 
00004B26  7320 5357 
00004B2A  5B        
00004B2B  372D 305D 8057          dc.b      55,45,48,93,32,61,32,0
00004B2F  203D 2000 
                    8058   @m68kde~1_3:
00004B34  3000      8059          dc.b      48,0
                    8060   @m68kde~1_4:
00004B36  3100      8061          dc.b      49,0
                    8062   @m68kde~1_5:
00004B38  0D0A 4475 8063          dc.b      13,10,68,117,109,112,32,77,101,109,111,114,121
00004B3C  6D70 204D 
00004B40  656D 6F72 
00004B44  79        
00004B45  2042 6C6F 8064          dc.b      32,66,108,111,99,107,58,32,60,69,83,67,62,32
00004B49  636B 3A20 
00004B4D  3C45 5343 
00004B51  3E20      
00004B53  746F 2041 8065          dc.b      116,111,32,65,98,111,114,116,44,32,60,83,80
00004B57  626F 7274 
00004B5B  2C20 3C53 
00004B5F  50        
00004B60  4143 453E 8066          dc.b      65,67,69,62,32,116,111,32,67,111,110,116,105
00004B64  2074 6F20 
00004B68  436F 6E74 
00004B6C  69        
00004B6D  6E75 6500 8067          dc.b      110,117,101,0
                    8068   @m68kde~1_6:
00004B72  0D0A 456E 8069          dc.b      13,10,69,110,116,101,114,32,83,116,97,114,116
00004B76  7465 7220 
00004B7A  5374 6172 
00004B7E  74        
00004B7F  2041 6464 8070          dc.b      32,65,100,100,114,101,115,115,58,32,0
00004B83  7265 7373 
00004B87  3A20 00   
                    8071   @m68kde~1_7:
00004B8A  0D0A 2530 8072          dc.b      13,10,37,48,56,120,32,0
00004B8E  3878 2000 
                    8073   @m68kde~1_8:
00004B92  2530 3258 8074          dc.b      37,48,50,88,0
00004B96  00        
                    8075   @m68kde~1_9:
00004B98  2020 00   8076          dc.b      32,32,0
                    8077   @m68kde~1_10:
00004B9C  0D0A 4669 8078          dc.b      13,10,70,105,108,108,32,77,101,109,111,114,121
00004BA0  6C6C 204D 
00004BA4  656D 6F72 
00004BA8  79        
00004BA9  2042 6C6F 8079          dc.b      32,66,108,111,99,107,0
00004BAD  636B 00   
                    8080   @m68kde~1_11:
00004BB0  0D0A 456E 8081          dc.b      13,10,69,110,116,101,114,32,69,110,100,32,65
00004BB4  7465 7220 
00004BB8  456E 6420 
00004BBC  41        
00004BBD  6464 7265 8082          dc.b      100,100,114,101,115,115,58,32,0
00004BC1  7373 3A20 
00004BC5  00        
                    8083   @m68kde~1_12:
00004BC6  0D0A 456E 8084          dc.b      13,10,69,110,116,101,114,32,70,105,108,108,32
00004BCA  7465 7220 
00004BCE  4669 6C6C 
00004BD2  20        
00004BD3  4461 7461 8085          dc.b      68,97,116,97,58,32,0
00004BD7  3A20 00   
                    8086   @m68kde~1_13:
00004BDA  0D0A 4669 8087          dc.b      13,10,70,105,108,108,105,110,103,32,65,100,100
00004BDE  6C6C 696E 
00004BE2  6720 4164 
00004BE6  64        
00004BE7  7265 7373 8088          dc.b      114,101,115,115,101,115,32,91,36,37,48,56,88
00004BEB  6573 205B 
00004BEF  2425 3038 
00004BF3  58        
00004BF4  202D 2024 8089          dc.b      32,45,32,36,37,48,56,88,93,32,119,105,116,104
00004BF8  2530 3858 
00004BFC  5D20 7769 
00004C00  7468      
00004C02  2024 2530 8090          dc.b      32,36,37,48,50,88,0
00004C06  3258 00   
                    8091   @m68kde~1_14:
00004C0A  0D0A 5573 8092          dc.b      13,10,85,115,101,32,72,121,112,101,114,84,101
00004C0E  6520 4879 
00004C12  7065 7254 
00004C16  65        
00004C17  726D 696E 8093          dc.b      114,109,105,110,97,108,32,116,111,32,83,101
00004C1B  616C 2074 
00004C1F  6F20 5365 
00004C23  6E64 2054 8094          dc.b      110,100,32,84,101,120,116,32,70,105,108,101
00004C27  6578 7420 
00004C2B  4669 6C65 
00004C2F  2028 2E68 8095          dc.b      32,40,46,104,101,120,41,13,10,0
00004C33  6578 290D 
00004C37  0A00      
                    8096   @m68kde~1_15:
00004C3A  0D0A 4C6F 8097          dc.b      13,10,76,111,97,100,32,70,97,105,108,101,100
00004C3E  6164 2046 
00004C42  6169 6C65 
00004C46  64        
00004C47  2061 7420 8098          dc.b      32,97,116,32,65,100,100,114,101,115,115,32,61
00004C4B  4164 6472 
00004C4F  6573 7320 
00004C53  3D        
00004C54  205B 2425 8099          dc.b      32,91,36,37,48,56,88,93,13,10,0
00004C58  3038 585D 
00004C5C  0D0A 00   
                    8100   @m68kde~1_16:
00004C60  0D0A 5375 8101          dc.b      13,10,83,117,99,99,101,115,115,58,32,68,111
00004C64  6363 6573 
00004C68  733A 2044 
00004C6C  6F        
00004C6D  776E 6C6F 8102          dc.b      119,110,108,111,97,100,101,100,32,37,100,32
00004C71  6164 6564 
00004C75  2025 6420 
00004C79  6279 7465 8103          dc.b      98,121,116,101,115,13,10,0
00004C7D  730D 0A00 
                    8104   @m68kde~1_17:
00004C82  0D0A 4578 8105          dc.b      13,10,69,120,97,109,105,110,101,32,97,110,100
00004C86  616D 696E 
00004C8A  6520 616E 
00004C8E  64        
00004C8F  2043 6861 8106          dc.b      32,67,104,97,110,103,101,32,77,101,109,111,114
00004C93  6E67 6520 
00004C97  4D65 6D6F 
00004C9B  72        
00004C9C  7900      8107          dc.b      121,0
                    8108   @m68kde~1_18:
00004C9E  0D0A 3C45 8109          dc.b      13,10,60,69,83,67,62,32,116,111,32,83,116,111
00004CA2  5343 3E20 
00004CA6  746F 2053 
00004CAA  746F      
00004CAC  702C 203C 8110          dc.b      112,44,32,60,83,80,65,67,69,62,32,116,111,32
00004CB0  5350 4143 
00004CB4  453E 2074 
00004CB8  6F20      
00004CBA  4164 7661 8111          dc.b      65,100,118,97,110,99,101,44,32,39,45,39,32,116
00004CBE  6E63 652C 
00004CC2  2027 2D27 
00004CC6  2074      
00004CC8  6F20 476F 8112          dc.b      111,32,71,111,32,66,97,99,107,44,32,60,68,65
00004CCC  2042 6163 
00004CD0  6B2C 203C 
00004CD4  4441      
00004CD6  5441 3E20 8113          dc.b      84,65,62,32,116,111,32,99,104,97,110,103,101
00004CDA  746F 2063 
00004CDE  6861 6E67 
00004CE2  65        
00004CE3  00        8114          dc.b      0
                    8115   @m68kde~1_19:
00004CE4  0D0A 456E 8116          dc.b      13,10,69,110,116,101,114,32,65,100,100,114,101
00004CE8  7465 7220 
00004CEC  4164 6472 
00004CF0  65        
00004CF1  7373 3A20 8117          dc.b      115,115,58,32,0
00004CF5  00        
                    8118   @m68kde~1_20:
00004CF6  0D0A 5B25 8119          dc.b      13,10,91,37,48,56,120,93,32,58,32,37,48,50,120
00004CFA  3038 785D 
00004CFE  203A 2025 
00004D02  3032 78   
00004D05  2020 00   8120          dc.b      32,32,0
                    8121   @m68kde~1_21:
00004D08  0D0A 5761 8122          dc.b      13,10,87,97,114,110,105,110,103,32,67,104,97
00004D0C  726E 696E 
00004D10  6720 4368 
00004D14  61        
00004D15  6E67 6520 8123          dc.b      110,103,101,32,70,97,105,108,101,100,58,32,87
00004D19  4661 696C 
00004D1D  6564 3A20 
00004D21  57        
00004D22  726F 7465 8124          dc.b      114,111,116,101,32,91,37,48,50,120,93,44,32
00004D26  205B 2530 
00004D2A  3278 5D2C 
00004D2E  20        
00004D2F  5265 6164 8125          dc.b      82,101,97,100,32,91,37,48,50,120,93,0
00004D33  205B 2530 
00004D37  3278 5D00 
                    8126   @m68kde~1_22:
00004D3C  0D0A 0A4D 8127          dc.b      13,10,10,77,97,110,117,102,97,99,116,111,114
00004D40  616E 7566 
00004D44  6163 746F 
00004D48  72        
00004D49  6572 2049 8128          dc.b      101,114,32,73,68,58,32,37,48,50,120,32,0
00004D4D  443A 2025 
00004D51  3032 7820 
00004D55  00        
                    8129   @m68kde~1_23:
00004D56  0D0A 0A44 8130          dc.b      13,10,10,68,101,118,105,99,101,32,73,68,58,32
00004D5A  6576 6963 
00004D5E  6520 4944 
00004D62  3A20      
00004D64  2530 3278 8131          dc.b      37,48,50,120,32,0
00004D68  2000      
                    8132   @m68kde~1_24:
00004D6A  0D0A 4461 8133          dc.b      13,10,68,97,116,97,32,102,114,111,109,32,102
00004D6E  7461 2066 
00004D72  726F 6D20 
00004D76  66        
00004D77  6C61 7368 8134          dc.b      108,97,115,104,32,97,116,32,97,100,100,114,101
00004D7B  2061 7420 
00004D7F  6164 6472 
00004D83  65        
00004D84  7373 2025 8135          dc.b      115,115,32,37,48,56,88,13,10,0
00004D88  3038 580D 
00004D8C  0A00      
                    8136   @m68kde~1_25:
00004D8E  2530 3258 8137          dc.b      37,48,50,88,32,0
00004D92  2000      
                    8138   @m68kde~1_26:
00004D94  0D0A 0A0A 8139          dc.b      13,10,10,10,0
00004D98  00        
                    8140   @m68kde~1_27:
00004D9A  0D0A 436F 8141          dc.b      13,10,67,111,109,112,97,114,105,110,103,32,100
00004D9E  6D70 6172 
00004DA2  696E 6720 
00004DA6  64        
00004DA7  6174 6120 8142          dc.b      97,116,97,32,102,114,111,109,32,102,108,97,115
00004DAB  6672 6F6D 
00004DAF  2066 6C61 
00004DB3  73        
00004DB4  6820 7374 8143          dc.b      104,32,115,116,97,114,116,105,110,103,32,97
00004DB8  6172 7469 
00004DBC  6E67 2061 
00004DC0  7420 6164 8144          dc.b      116,32,97,100,100,114,101,115,115,32,37,48,56
00004DC4  6472 6573 
00004DC8  7320 2530 
00004DCC  38        
00004DCD  580D 0A00 8145          dc.b      88,13,10,0
                    8146   @m68kde~1_28:
00004DD2  0D0A 2045 8147          dc.b      13,10,32,69,114,114,111,114,32,97,116,32,97
00004DD6  7272 6F72 
00004DDA  2061 7420 
00004DDE  61        
00004DDF  6464 7265 8148          dc.b      100,100,114,101,115,115,32,37,48,56,88,0
00004DE3  7373 2025 
00004DE7  3038 5800 
                    8149   @m68kde~1_29:
00004DEC  0D0A 2045 8150          dc.b      13,10,32,69,120,112,101,99,116,101,100,32,37
00004DF0  7870 6563 
00004DF4  7465 6420 
00004DF8  25        
00004DF9  3032 5820 8151          dc.b      48,50,88,32,98,117,116,32,102,111,117,110,100
00004DFD  6275 7420 
00004E01  666F 756E 
00004E05  64        
00004E06  2025 3032 8152          dc.b      32,37,48,50,88,0
00004E0A  5800      
                    8153   @m68kde~1_30:
00004E0C  0D0A 5350 8154          dc.b      13,10,83,80,73,32,70,108,97,115,104,32,80,114
00004E10  4920 466C 
00004E14  6173 6820 
00004E18  5072      
00004E1A  6F67 7261 8155          dc.b      111,103,114,97,109,109,101,115,32,83,117,99
00004E1E  6D6D 6573 
00004E22  2053 7563 
00004E26  6365 7373 8156          dc.b      99,101,115,115,102,117,108,108,121,33,0
00004E2A  6675 6C6C 
00004E2E  7921 00   
                    8157   @m68kde~1_31:
00004E32  0D0A 4461 8158          dc.b      13,10,68,97,116,97,32,105,110,32,83,80,73,32
00004E36  7461 2069 
00004E3A  6E20 5350 
00004E3E  4920      
00004E40  466C 6173 8159          dc.b      70,108,97,115,104,32,109,97,116,99,104,101,115
00004E44  6820 6D61 
00004E48  7463 6865 
00004E4C  73        
00004E4D  2074 6865 8160          dc.b      32,116,104,101,32,102,105,114,115,116,32,50
00004E51  2066 6972 
00004E55  7374 2032 
00004E59  3536 6B20 8161          dc.b      53,54,107,32,66,121,116,101,115,32,105,110,32
00004E5D  4279 7465 
00004E61  7320 696E 
00004E65  20        
00004E66  5261 6D20 8162          dc.b      82,97,109,32,115,116,97,114,116,105,110,103
00004E6A  7374 6172 
00004E6E  7469 6E67 
00004E72  2061 7420 8163          dc.b      32,97,116,32,48,120,48,56,48,48,48,48,48,48
00004E76  3078 3038 
00004E7A  3030 3030 
00004E7E  3030      
00004E80  00        8164          dc.b      0
                    8165   @m68kde~1_32:
00004E82  0D0A 5072 8166          dc.b      13,10,80,114,111,103,114,97,109,109,105,110
00004E86  6F67 7261 
00004E8A  6D6D 696E 
00004E8E  6720 666C 8167          dc.b      103,32,102,108,97,115,104,32,99,104,105,112
00004E92  6173 6820 
00004E96  6368 6970 
00004E9A  00        8168          dc.b      0
                    8169   @m68kde~1_33:
00004E9C  0D0A 5772 8170          dc.b      13,10,87,114,105,116,105,110,103,32,100,97,116
00004EA0  6974 696E 
00004EA4  6720 6461 
00004EA8  74        
00004EA9  6120 6672 8171          dc.b      97,32,102,114,111,109,32,97,100,100,114,101
00004EAD  6F6D 2061 
00004EB1  6464 7265 
00004EB5  7373 2030 8172          dc.b      115,115,32,48,120,48,48,48,48,48,48,48,48,32
00004EB9  7830 3030 
00004EBD  3030 3030 
00004EC1  3020      
00004EC3  746F 2030 8173          dc.b      116,111,32,48,120,48,48,48,51,68,48,57,48,32
00004EC7  7830 3030 
00004ECB  3344 3039 
00004ECF  3020      
00004ED1  696E 2066 8174          dc.b      105,110,32,102,108,97,115,104,32,109,101,109
00004ED5  6C61 7368 
00004ED9  206D 656D 
00004EDD  6F72 790A 8175          dc.b      111,114,121,10,0
00004EE1  00        
                    8176   @m68kde~1_34:
00004EE2  0D0A 4C6F 8177          dc.b      13,10,76,111,97,100,105,110,103,32,80,114,111
00004EE6  6164 696E 
00004EEA  6720 5072 
00004EEE  6F        
00004EEF  6772 616D 8178          dc.b      103,114,97,109,32,70,114,111,109,32,83,80,73
00004EF3  2046 726F 
00004EF7  6D20 5350 
00004EFB  49        
00004EFC  2046 6C61 8179          dc.b      32,70,108,97,115,104,10,0
00004F00  7368 0A00 
                    8180   @m68kde~1_35:
00004F04  0D0A 4461 8181          dc.b      13,10,68,97,116,97,32,76,111,97,100,101,100
00004F08  7461 204C 
00004F0C  6F61 6465 
00004F10  64        
00004F11  2053 7563 8182          dc.b      32,83,117,99,99,101,115,115,102,117,108,108
00004F15  6365 7373 
00004F19  6675 6C6C 
00004F1D  7900      8183          dc.b      121,0
                    8184   @m68kde~1_36:
00004F20  2425 3038 8185          dc.b      36,37,48,56,88,32,32,0
00004F24  5820 2000 
                    8186   @m68kde~1_37:
00004F28  2000      8187          dc.b      32,0
                    8188   @m68kde~1_38:
00004F2A  2E00      8189          dc.b      46,0
                    8190   @m68kde~1_39:
00004F2C  2563 00   8191          dc.b      37,99,0
                    8192   @m68kde~1_40:
00004F30  00        8193          dc.b      0
                    8194   @m68kde~1_41:
00004F32  0D0A 0D0A 8195          dc.b      13,10,13,10,32,68,48,32,61,32,36,37,48,56,88
00004F36  2044 3020 
00004F3A  3D20 2425 
00004F3E  3038 58   
00004F41  2020 4130 8196          dc.b      32,32,65,48,32,61,32,36,37,48,56,88,0
00004F45  203D 2024 
00004F49  2530 3858 
00004F4D  00        
                    8197   @m68kde~1_42:
00004F4E  0D0A 2044 8198          dc.b      13,10,32,68,49,32,61,32,36,37,48,56,88,32,32
00004F52  3120 3D20 
00004F56  2425 3038 
00004F5A  5820 20   
00004F5D  4131 203D 8199          dc.b      65,49,32,61,32,36,37,48,56,88,0
00004F61  2024 2530 
00004F65  3858 00   
                    8200   @m68kde~1_43:
00004F68  0D0A 2044 8201          dc.b      13,10,32,68,50,32,61,32,36,37,48,56,88,32,32
00004F6C  3220 3D20 
00004F70  2425 3038 
00004F74  5820 20   
00004F77  4132 203D 8202          dc.b      65,50,32,61,32,36,37,48,56,88,0
00004F7B  2024 2530 
00004F7F  3858 00   
                    8203   @m68kde~1_44:
00004F82  0D0A 2044 8204          dc.b      13,10,32,68,51,32,61,32,36,37,48,56,88,32,32
00004F86  3320 3D20 
00004F8A  2425 3038 
00004F8E  5820 20   
00004F91  4133 203D 8205          dc.b      65,51,32,61,32,36,37,48,56,88,0
00004F95  2024 2530 
00004F99  3858 00   
                    8206   @m68kde~1_45:
00004F9C  0D0A 2044 8207          dc.b      13,10,32,68,52,32,61,32,36,37,48,56,88,32,32
00004FA0  3420 3D20 
00004FA4  2425 3038 
00004FA8  5820 20   
00004FAB  4134 203D 8208          dc.b      65,52,32,61,32,36,37,48,56,88,0
00004FAF  2024 2530 
00004FB3  3858 00   
                    8209   @m68kde~1_46:
00004FB6  0D0A 2044 8210          dc.b      13,10,32,68,53,32,61,32,36,37,48,56,88,32,32
00004FBA  3520 3D20 
00004FBE  2425 3038 
00004FC2  5820 20   
00004FC5  4135 203D 8211          dc.b      65,53,32,61,32,36,37,48,56,88,0
00004FC9  2024 2530 
00004FCD  3858 00   
                    8212   @m68kde~1_47:
00004FD0  0D0A 2044 8213          dc.b      13,10,32,68,54,32,61,32,36,37,48,56,88,32,32
00004FD4  3620 3D20 
00004FD8  2425 3038 
00004FDC  5820 20   
00004FDF  4136 203D 8214          dc.b      65,54,32,61,32,36,37,48,56,88,0
00004FE3  2024 2530 
00004FE7  3858 00   
                    8215   @m68kde~1_48:
00004FEA  0D0A 2044 8216          dc.b      13,10,32,68,55,32,61,32,36,37,48,56,88,32,32
00004FEE  3720 3D20 
00004FF2  2425 3038 
00004FF6  5820 20   
00004FF9  4137 203D 8217          dc.b      65,55,32,61,32,36,37,48,56,88,0
00004FFD  2024 2530 
00005001  3858 00   
                    8218   @m68kde~1_49:
00005004  0D0A 0D0A 8219          dc.b      13,10,13,10,85,83,80,32,61,32,36,37,48,56,88
00005008  5553 5020 
0000500C  3D20 2425 
00005010  3038 58   
00005013  2020 2841 8220          dc.b      32,32,40,65,55,41,32,85,115,101,114,32,83,80
00005017  3729 2055 
0000501B  7365 7220 
0000501F  5350      
00005021  00        8221          dc.b      0
                    8222   @m68kde~1_50:
00005022  0D0A 5353 8223          dc.b      13,10,83,83,80,32,61,32,36,37,48,56,88,32,32
00005026  5020 3D20 
0000502A  2425 3038 
0000502E  5820 20   
00005031  2841 3729 8224          dc.b      40,65,55,41,32,83,117,112,101,114,118,105,115
00005035  2053 7570 
00005039  6572 7669 
0000503D  73        
0000503E  6F72 2053 8225          dc.b      111,114,32,83,80,0
00005042  5000      
                    8226   @m68kde~1_51:
00005044  0D0A 2053 8227          dc.b      13,10,32,83,82,32,61,32,36,37,48,52,88,32,32
00005048  5220 3D20 
0000504C  2425 3034 
00005050  5820 20   
00005053  2000      8228          dc.b      32,0
                    8229   @m68kde~1_52:
00005056  2020 205B 8230          dc.b      32,32,32,91,0
0000505A  00        
                    8231   @m68kde~1_53:
0000505C  0D0A 2050 8232          dc.b      13,10,32,80,67,32,61,32,36,37,48,56,88,32,32
00005060  4320 3D20 
00005064  2425 3038 
00005068  5820 20   
0000506B  00        8233          dc.b      0
                    8234   @m68kde~1_54:
0000506C  5B40 2042 8235          dc.b      91,64,32,66,82,69,65,75,80,79,73,78,84,93,0
00005070  5245 414B 
00005074  504F 494E 
00005078  545D 00   
                    8236   @m68kde~1_55:
0000507C  0D0A 5750 8237          dc.b      13,10,87,80,37,100,32,61,32,37,115,0
00005080  2564 203D 
00005084  2025 7300 
                    8238   @m68kde~1_56:
00005088  0D0A 0D0A 8239          dc.b      13,10,13,10,13,10,13,10,13,10,13,10,83,105,110
0000508C  0D0A 0D0A 
00005090  0D0A 0D0A 
00005094  5369 6E   
00005097  676C 6520 8240          dc.b      103,108,101,32,83,116,101,112,32,32,58,91,79
0000509B  5374 6570 
0000509F  2020 3A5B 
000050A3  4F        
000050A4  4E5D 00   8241          dc.b      78,93,0
                    8242   @m68kde~1_57:
000050A8  0D0A 4272 8243          dc.b      13,10,66,114,101,97,107,32,80,111,105,110,116
000050AC  6561 6B20 
000050B0  506F 696E 
000050B4  74        
000050B5  7320 3A5B 8244          dc.b      115,32,58,91,68,105,115,97,98,108,101,100,93
000050B9  4469 7361 
000050BD  626C 6564 
000050C1  5D        
000050C2  00        8245          dc.b      0
                    8246   @m68kde~1_58:
000050C4  0D0A 5072 8247          dc.b      13,10,80,114,101,115,115,32,60,83,80,65,67,69
000050C8  6573 7320 
000050CC  3C53 5041 
000050D0  4345      
000050D2  3E20 746F 8248          dc.b      62,32,116,111,32,69,120,101,99,117,116,101,32
000050D6  2045 7865 
000050DA  6375 7465 
000050DE  20        
000050DF  4E65 7874 8249          dc.b      78,101,120,116,32,73,110,115,116,114,117,99
000050E3  2049 6E73 
000050E7  7472 7563 
000050EB  7469 6F6E 8250          dc.b      116,105,111,110,0
000050EF  00        
                    8251   @m68kde~1_59:
000050F0  0D0A 5072 8252          dc.b      13,10,80,114,101,115,115,32,60,69,83,67,62,32
000050F4  6573 7320 
000050F8  3C45 5343 
000050FC  3E20      
000050FE  746F 2052 8253          dc.b      116,111,32,82,101,115,117,109,101,32,80,114
00005102  6573 756D 
00005106  6520 5072 
0000510A  6F67 7261 8254          dc.b      111,103,114,97,109,0
0000510E  6D00      
                    8255   @m68kde~1_60:
00005110  0D0A 496C 8256          dc.b      13,10,73,108,108,101,103,97,108,32,68,97,116
00005114  6C65 6761 
00005118  6C20 4461 
0000511C  74        
0000511D  6120 5265 8257          dc.b      97,32,82,101,103,105,115,116,101,114,32,58,32
00005121  6769 7374 
00005125  6572 203A 
00005129  20        
0000512A  5573 6520 8258          dc.b      85,115,101,32,68,48,45,68,55,46,46,46,46,46
0000512E  4430 2D44 
00005132  372E 2E2E 
00005136  2E2E      
00005138  0D0A 00   8259          dc.b      13,10,0
                    8260   @m68kde~1_61:
0000513C  0D0A 4425 8261          dc.b      13,10,68,37,99,32,61,32,0
00005140  6320 3D20 
00005144  00        
                    8262   @m68kde~1_62:
00005146  0D0A 496C 8263          dc.b      13,10,73,108,108,101,103,97,108,32,65,100,100
0000514A  6C65 6761 
0000514E  6C20 4164 
00005152  64        
00005153  7265 7373 8264          dc.b      114,101,115,115,32,82,101,103,105,115,116,101
00005157  2052 6567 
0000515B  6973 7465 
0000515F  7220 3A20 8265          dc.b      114,32,58,32,85,115,101,32,65,48,45,65,55,46
00005163  5573 6520 
00005167  4130 2D41 
0000516B  372E      
0000516D  2E2E 2E2E 8266          dc.b      46,46,46,46,13,10,0
00005171  0D0A 00   
                    8267   @m68kde~1_63:
00005174  0D0A 4125 8268          dc.b      13,10,65,37,99,32,61,32,0
00005178  6320 3D20 
0000517C  00        
                    8269   @m68kde~1_64:
0000517E  0D0A 5573 8270          dc.b      13,10,85,115,101,114,32,83,80,32,61,32,0
00005182  6572 2053 
00005186  5020 3D20 
0000518A  00        
                    8271   @m68kde~1_65:
0000518C  0D0A 496C 8272          dc.b      13,10,73,108,108,101,103,97,108,32,82,101,103
00005190  6C65 6761 
00005194  6C20 5265 
00005198  67        
00005199  6973 7465 8273          dc.b      105,115,116,101,114,46,46,46,46,0
0000519D  722E 2E2E 
000051A1  2E00      
                    8274   @m68kde~1_66:
000051A4  0D0A 5379 8275          dc.b      13,10,83,121,115,116,101,109,32,83,80,32,61
000051A8  7374 656D 
000051AC  2053 5020 
000051B0  3D        
000051B1  2000      8276          dc.b      32,0
                    8277   @m68kde~1_67:
000051B4  0D0A 5043 8278          dc.b      13,10,80,67,32,61,32,0
000051B8  203D 2000 
                    8279   @m68kde~1_68:
000051BC  0D0A 5352 8280          dc.b      13,10,83,82,32,61,32,0
000051C0  203D 2000 
                    8281   @m68kde~1_69:
000051C4  0D0A 496C 8282          dc.b      13,10,73,108,108,101,103,97,108,32,82,101,103
000051C8  6C65 6761 
000051CC  6C20 5265 
000051D0  67        
000051D1  6973 7465 8283          dc.b      105,115,116,101,114,58,32,85,115,101,32,65,48
000051D5  723A 2055 
000051D9  7365 2041 
000051DD  30        
000051DE  2D41 372C 8284          dc.b      45,65,55,44,32,68,48,45,68,55,44,32,83,83,80
000051E2  2044 302D 
000051E6  4437 2C20 
000051EA  5353 50   
000051ED  2C20 5553 8285          dc.b      44,32,85,83,80,44,32,80,67,32,111,114,32,83
000051F1  502C 2050 
000051F5  4320 6F72 
000051F9  2053      
000051FB  520D 0A00 8286          dc.b      82,13,10,0
                    8287   @m68kde~1_70:
00005200  0D0A 0D0A 8288          dc.b      13,10,13,10,78,117,109,32,32,32,32,32,65,100
00005204  4E75 6D20 
00005208  2020 2020 
0000520C  4164      
0000520E  6472 6573 8289          dc.b      100,114,101,115,115,32,32,32,32,32,32,73,110
00005212  7320 2020 
00005216  2020 2049 
0000521A  6E        
0000521B  7374 7275 8290          dc.b      115,116,114,117,99,116,105,111,110,0
0000521F  6374 696F 
00005223  6E00      
                    8291   @m68kde~1_71:
00005226  0D0A 2D2D 8292          dc.b      13,10,45,45,45,32,32,32,32,32,45,45,45,45,45
0000522A  2D20 2020 
0000522E  2020 2D2D 
00005232  2D2D 2D   
00005235  2D2D 2D2D 8293          dc.b      45,45,45,45,32,32,32,32,45,45,45,45,45,45,45
00005239  2020 2020 
0000523D  2D2D 2D2D 
00005241  2D2D 2D   
00005244  2D2D 2D2D 8294          dc.b      45,45,45,45,0
00005248  00        
                    8295   @m68kde~1_72:
0000524A  0D0A 4E6F 8296          dc.b      13,10,78,111,32,66,114,101,97,107,80,111,105
0000524E  2042 7265 
00005252  616B 506F 
00005256  69        
00005257  6E74 7320 8297          dc.b      110,116,115,32,83,101,116,0
0000525B  5365 7400 
                    8298   @m68kde~1_73:
00005260  0D0A 2533 8299          dc.b      13,10,37,51,100,32,32,32,32,32,36,37,48,56,120
00005264  6420 2020 
00005268  2020 2425 
0000526C  3038 78   
0000526F  00        8300          dc.b      0
                    8301   @m68kde~1_74:
00005270  0D0A 4E75 8302          dc.b      13,10,78,117,109,32,32,32,32,32,65,100,100,114
00005274  6D20 2020 
00005278  2020 4164 
0000527C  6472      
0000527E  6573 7300 8303          dc.b      101,115,115,0
                    8304   @m68kde~1_75:
00005282  0D0A 2D2D 8305          dc.b      13,10,45,45,45,32,32,32,32,32,45,45,45,45,45
00005286  2D20 2020 
0000528A  2020 2D2D 
0000528E  2D2D 2D   
00005291  2D2D 2D2D 8306          dc.b      45,45,45,45,0
00005295  00        
                    8307   @m68kde~1_76:
00005296  0D0A 4E6F 8308          dc.b      13,10,78,111,32,87,97,116,99,104,80,111,105
0000529A  2057 6174 
0000529E  6368 506F 
000052A2  69        
000052A3  6E74 7320 8309          dc.b      110,116,115,32,83,101,116,0
000052A7  5365 7400 
                    8310   @m68kde~1_77:
000052AC  0D0A 456E 8311          dc.b      13,10,69,110,116,101,114,32,66,114,101,97,107
000052B0  7465 7220 
000052B4  4272 6561 
000052B8  6B        
000052B9  2050 6F69 8312          dc.b      32,80,111,105,110,116,32,78,117,109,98,101,114
000052BD  6E74 204E 
000052C1  756D 6265 
000052C5  72        
000052C6  3A20 00   8313          dc.b      58,32,0
                    8314   @m68kde~1_78:
000052CA  0D0A 496C 8315          dc.b      13,10,73,108,108,101,103,97,108,32,82,97,110
000052CE  6C65 6761 
000052D2  6C20 5261 
000052D6  6E        
000052D7  6765 203A 8316          dc.b      103,101,32,58,32,85,115,101,32,48,32,45,32,55
000052DB  2055 7365 
000052DF  2030 202D 
000052E3  2037      
000052E5  00        8317          dc.b      0
                    8318   @m68kde~1_79:
000052E6  0D0A 4272 8319          dc.b      13,10,66,114,101,97,107,32,80,111,105,110,116
000052EA  6561 6B20 
000052EE  506F 696E 
000052F2  74        
000052F3  2043 6C65 8320          dc.b      32,67,108,101,97,114,101,100,46,46,46,46,46
000052F7  6172 6564 
000052FB  2E2E 2E2E 
000052FF  2E        
00005300  0D0A 00   8321          dc.b      13,10,0
                    8322   @m68kde~1_80:
00005304  0D0A 4272 8323          dc.b      13,10,66,114,101,97,107,32,80,111,105,110,116
00005308  6561 6B20 
0000530C  506F 696E 
00005310  74        
00005311  2077 6173 8324          dc.b      32,119,97,115,110,39,116,32,83,101,116,46,46
00005315  6E27 7420 
00005319  5365 742E 
0000531D  2E        
0000531E  2E2E 2E00 8325          dc.b      46,46,46,0
                    8326   @m68kde~1_81:
00005322  0D0A 456E 8327          dc.b      13,10,69,110,116,101,114,32,87,97,116,99,104
00005326  7465 7220 
0000532A  5761 7463 
0000532E  68        
0000532F  2050 6F69 8328          dc.b      32,80,111,105,110,116,32,78,117,109,98,101,114
00005333  6E74 204E 
00005337  756D 6265 
0000533B  72        
0000533C  3A20 00   8329          dc.b      58,32,0
                    8330   @m68kde~1_82:
00005340  0D0A 5761 8331          dc.b      13,10,87,97,116,99,104,32,80,111,105,110,116
00005344  7463 6820 
00005348  506F 696E 
0000534C  74        
0000534D  2043 6C65 8332          dc.b      32,67,108,101,97,114,101,100,46,46,46,46,46
00005351  6172 6564 
00005355  2E2E 2E2E 
00005359  2E        
0000535A  0D0A 00   8333          dc.b      13,10,0
                    8334   @m68kde~1_83:
0000535E  0D0A 5761 8335          dc.b      13,10,87,97,116,99,104,32,80,111,105,110,116
00005362  7463 6820 
00005366  506F 696E 
0000536A  74        
0000536B  2057 6173 8336          dc.b      32,87,97,115,32,110,111,116,32,83,101,116,46
0000536F  206E 6F74 
00005373  2053 6574 
00005377  2E        
00005378  2E2E 2E2E 8337          dc.b      46,46,46,46,0
0000537C  00        
                    8338   @m68kde~1_84:
0000537E  0D0A 4E6F 8339          dc.b      13,10,78,111,32,70,82,69,69,32,66,114,101,97
00005382  2046 5245 
00005386  4520 4272 
0000538A  6561      
0000538C  6B20 506F 8340          dc.b      107,32,80,111,105,110,116,115,46,46,46,46,46
00005390  696E 7473 
00005394  2E2E 2E2E 
00005398  2E        
00005399  00        8341          dc.b      0
                    8342   @m68kde~1_85:
0000539A  0D0A 4272 8343          dc.b      13,10,66,114,101,97,107,32,80,111,105,110,116
0000539E  6561 6B20 
000053A2  506F 696E 
000053A6  74        
000053A7  2041 6464 8344          dc.b      32,65,100,100,114,101,115,115,58,32,0
000053AB  7265 7373 
000053AF  3A20 00   
                    8345   @m68kde~1_86:
000053B2  0D0A 4572 8346          dc.b      13,10,69,114,114,111,114,32,58,32,66,114,101
000053B6  726F 7220 
000053BA  3A20 4272 
000053BE  65        
000053BF  616B 2050 8347          dc.b      97,107,32,80,111,105,110,116,115,32,67,65,78
000053C3  6F69 6E74 
000053C7  7320 4341 
000053CB  4E        
000053CC  4E4F 5420 8348          dc.b      78,79,84,32,98,101,32,115,101,116,32,97,116
000053D0  6265 2073 
000053D4  6574 2061 
000053D8  74        
000053D9  204F 4444 8349          dc.b      32,79,68,68,32,97,100,100,114,101,115,115,101
000053DD  2061 6464 
000053E1  7265 7373 
000053E5  65        
000053E6  7300      8350          dc.b      115,0
                    8351   @m68kde~1_87:
000053E8  0D0A 4572 8352          dc.b      13,10,69,114,114,111,114,32,58,32,66,114,101
000053EC  726F 7220 
000053F0  3A20 4272 
000053F4  65        
000053F5  616B 2050 8353          dc.b      97,107,32,80,111,105,110,116,115,32,67,65,78
000053F9  6F69 6E74 
000053FD  7320 4341 
00005401  4E        
00005402  4E4F 5420 8354          dc.b      78,79,84,32,98,101,32,115,101,116,32,102,111
00005406  6265 2073 
0000540A  6574 2066 
0000540E  6F        
0000540F  7220 524F 8355          dc.b      114,32,82,79,77,32,105,110,32,82,97,110,103
00005413  4D20 696E 
00005417  2052 616E 
0000541B  67        
0000541C  6520 3A20 8356          dc.b      101,32,58,32,91,36,48,45,36,48,48,48,48,55,70
00005420  5B24 302D 
00005424  2430 3030 
00005428  3037 46   
0000542B  4646 5D00 8357          dc.b      70,70,93,0
                    8358   @m68kde~1_88:
00005430  0D0A 4572 8359          dc.b      13,10,69,114,114,111,114,58,32,66,114,101,97
00005434  726F 723A 
00005438  2042 7265 
0000543C  61        
0000543D  6B20 506F 8360          dc.b      107,32,80,111,105,110,116,32,65,108,114,101
00005441  696E 7420 
00005445  416C 7265 
00005449  6164 7920 8361          dc.b      97,100,121,32,69,120,105,115,116,115,32,97,116
0000544D  4578 6973 
00005451  7473 2061 
00005455  74        
00005456  2041 6464 8362          dc.b      32,65,100,100,114,101,115,115,32,58,32,37,48
0000545A  7265 7373 
0000545E  203A 2025 
00005462  30        
00005463  3878 0D0A 8363          dc.b      56,120,13,10,0
00005467  00        
                    8364   @m68kde~1_89:
00005468  0D0A 4272 8365          dc.b      13,10,66,114,101,97,107,32,80,111,105,110,116
0000546C  6561 6B20 
00005470  506F 696E 
00005474  74        
00005475  2053 6574 8366          dc.b      32,83,101,116,32,97,116,32,65,100,100,114,101
00005479  2061 7420 
0000547D  4164 6472 
00005481  65        
00005482  7373 3A20 8367          dc.b      115,115,58,32,91,36,37,48,56,120,93,0
00005486  5B24 2530 
0000548A  3878 5D00 
                    8368   @m68kde~1_90:
0000548E  0D0A 4E6F 8369          dc.b      13,10,78,111,32,70,82,69,69,32,87,97,116,99
00005492  2046 5245 
00005496  4520 5761 
0000549A  7463      
0000549C  6820 506F 8370          dc.b      104,32,80,111,105,110,116,115,46,46,46,46,46
000054A0  696E 7473 
000054A4  2E2E 2E2E 
000054A8  2E        
000054A9  00        8371          dc.b      0
                    8372   @m68kde~1_91:
000054AA  0D0A 5761 8373          dc.b      13,10,87,97,116,99,104,32,80,111,105,110,116
000054AE  7463 6820 
000054B2  506F 696E 
000054B6  74        
000054B7  2041 6464 8374          dc.b      32,65,100,100,114,101,115,115,58,32,0
000054BB  7265 7373 
000054BF  3A20 00   
                    8375   @m68kde~1_92:
000054C2  0D0A 4572 8376          dc.b      13,10,69,114,114,111,114,58,32,87,97,116,99
000054C6  726F 723A 
000054CA  2057 6174 
000054CE  63        
000054CF  6820 506F 8377          dc.b      104,32,80,111,105,110,116,32,65,108,114,101
000054D3  696E 7420 
000054D7  416C 7265 
000054DB  6164 7920 8378          dc.b      97,100,121,32,83,101,116,32,97,116,32,65,100
000054DF  5365 7420 
000054E3  6174 2041 
000054E7  64        
000054E8  6472 6573 8379          dc.b      100,114,101,115,115,32,58,32,37,48,56,120,13
000054EC  7320 3A20 
000054F0  2530 3878 
000054F4  0D        
000054F5  0A00      8380          dc.b      10,0
                    8381   @m68kde~1_93:
000054F8  0D0A 5761 8382          dc.b      13,10,87,97,116,99,104,32,80,111,105,110,116
000054FC  7463 6820 
00005500  506F 696E 
00005504  74        
00005505  2053 6574 8383          dc.b      32,83,101,116,32,97,116,32,65,100,100,114,101
00005509  2061 7420 
0000550D  4164 6472 
00005511  65        
00005512  7373 3A20 8384          dc.b      115,115,58,32,91,36,37,48,56,120,93,0
00005516  5B24 2530 
0000551A  3878 5D00 
                    8385   @m68kde~1_94:
0000551E  0D0A 0D0A 8386          dc.b      13,10,13,10,13,10,13,10,64,66,82,69,65,75,80
00005522  0D0A 0D0A 
00005526  4042 5245 
0000552A  414B 50   
0000552D  4F49 4E54 8387          dc.b      79,73,78,84,0
00005531  00        
                    8388   @m68kde~1_95:
00005532  0D0A 5369 8389          dc.b      13,10,83,105,110,103,108,101,32,83,116,101,112
00005536  6E67 6C65 
0000553A  2053 7465 
0000553E  70        
0000553F  203A 205B 8390          dc.b      32,58,32,91,79,78,93,0
00005543  4F4E 5D00 
                    8391   @m68kde~1_96:
00005548  0D0A 4272 8392          dc.b      13,10,66,114,101,97,107,80,111,105,110,116,115
0000554C  6561 6B50 
00005550  6F69 6E74 
00005554  73        
00005555  203A 205B 8393          dc.b      32,58,32,91,69,110,97,98,108,101,100,93,0
00005559  456E 6162 
0000555D  6C65 645D 
00005561  00        
                    8394   @m68kde~1_97:
00005562  0D0A 5072 8395          dc.b      13,10,80,114,101,115,115,32,60,69,83,67,62,32
00005566  6573 7320 
0000556A  3C45 5343 
0000556E  3E20      
00005570  746F 2052 8396          dc.b      116,111,32,82,101,115,117,109,101,32,85,115
00005574  6573 756D 
00005578  6520 5573 
0000557C  6572 2050 8397          dc.b      101,114,32,80,114,111,103,114,97,109,13,10,0
00005580  726F 6772 
00005584  616D 0D0A 
00005588  00        
                    8398   @m68kde~1_98:
0000558A  0D0A 556E 8399          dc.b      13,10,85,110,107,110,111,119,110,32,67,111,109
0000558E  6B6E 6F77 
00005592  6E20 436F 
00005596  6D        
00005597  6D61 6E64 8400          dc.b      109,97,110,100,46,46,46,46,46,13,10,0
0000559B  2E2E 2E2E 
0000559F  2E0D 0A00 
                    8401   @m68kde~1_99:
000055A4  0D0A 5072 8402          dc.b      13,10,80,114,111,103,114,97,109,32,69,110,100
000055A8  6F67 7261 
000055AC  6D20 456E 
000055B0  64        
000055B1  6564 2028 8403          dc.b      101,100,32,40,84,82,65,80,32,35,49,53,41,46
000055B5  5452 4150 
000055B9  2023 3135 
000055BD  292E      
000055BF  2E2E 2E00 8404          dc.b      46,46,46,0
                    8405   @m68kde~1_100:
000055C4  0D0A 4B69 8406          dc.b      13,10,75,105,108,108,32,65,108,108,32,66,114
000055C8  6C6C 2041 
000055CC  6C6C 2042 
000055D0  72        
000055D1  6561 6B20 8407          dc.b      101,97,107,32,80,111,105,110,116,115,46,46,46
000055D5  506F 696E 
000055D9  7473 2E2E 
000055DD  2E        
000055DE  2879 2F6E 8408          dc.b      40,121,47,110,41,63,0
000055E2  293F 00   
                    8409   @m68kde~1_101:
000055E6  0D0A 4B69 8410          dc.b      13,10,75,105,108,108,32,65,108,108,32,87,97
000055EA  6C6C 2041 
000055EE  6C6C 2057 
000055F2  61        
000055F3  7463 6820 8411          dc.b      116,99,104,32,80,111,105,110,116,115,46,46,46
000055F7  506F 696E 
000055FB  7473 2E2E 
000055FF  2E        
00005600  2879 2F6E 8412          dc.b      40,121,47,110,41,63,0
00005604  293F 00   
                    8413   @m68kde~1_102:
00005608  0D0A 2D2D 8414          dc.b      13,10,45,45,45,45,45,45,45,45,45,45,45,45,45
0000560C  2D2D 2D2D 
00005610  2D2D 2D2D 
00005614  2D2D 2D   
00005617  2D2D 2D2D 8415          dc.b      45,45,45,45,45,45,45,45,45,45,45,45,45,45,45
0000561B  2D2D 2D2D 
0000561F  2D2D 2D2D 
00005623  2D2D 2D   
00005626  2D2D 2D2D 8416          dc.b      45,45,45,45,45,45,45,45,45,45,45,45,45,45,45
0000562A  2D2D 2D2D 
0000562E  2D2D 2D2D 
00005632  2D2D 2D   
00005635  2D2D 2D2D 8417          dc.b      45,45,45,45,45,45,45,45,45,45,45,45,45,45,45
00005639  2D2D 2D2D 
0000563D  2D2D 2D2D 
00005641  2D2D 2D   
00005644  2D2D 2D2D 8418          dc.b      45,45,45,45,45,45,0
00005648  2D2D 00   
                    8419   @m68kde~1_103:
0000564C  0D0A 2020 8420          dc.b      13,10,32,32,68,101,98,117,103,103,101,114,32
00005650  4465 6275 
00005654  6767 6572 
00005658  20        
00005659  436F 6D6D 8421          dc.b      67,111,109,109,97,110,100,32,83,117,109,109
0000565D  616E 6420 
00005661  5375 6D6D 
00005665  6172 7900 8422          dc.b      97,114,121,0
                    8423   @m68kde~1_104:
0000566A  0D0A 2020 8424          dc.b      13,10,32,32,46,40,114,101,103,41,32,32,32,32
0000566E  2E28 7265 
00005672  6729 2020 
00005676  2020      
00005678  2020 202D 8425          dc.b      32,32,32,45,32,67,104,97,110,103,101,32,82,101
0000567C  2043 6861 
00005680  6E67 6520 
00005684  5265      
00005686  6769 7374 8426          dc.b      103,105,115,116,101,114,115,58,32,101,46,103
0000568A  6572 733A 
0000568E  2065 2E67 
00005692  2041 302D 8427          dc.b      32,65,48,45,65,55,44,68,48,45,68,55,44,80,67
00005696  4137 2C44 
0000569A  302D 4437 
0000569E  2C50 43   
000056A1  2C53 5350 8428          dc.b      44,83,83,80,44,85,83,80,44,83,82,0
000056A5  2C55 5350 
000056A9  2C53 5200 
                    8429   @m68kde~1_105:
000056AE  0D0A 2020 8430          dc.b      13,10,32,32,66,68,47,66,83,47,66,67,47,66,75
000056B2  4244 2F42 
000056B6  532F 4243 
000056BA  2F42 4B   
000056BD  2020 2D20 8431          dc.b      32,32,45,32,66,114,101,97,107,32,80,111,105
000056C1  4272 6561 
000056C5  6B20 506F 
000056C9  69        
000056CA  6E74 3A20 8432          dc.b      110,116,58,32,68,105,115,112,108,97,121,47,83
000056CE  4469 7370 
000056D2  6C61 792F 
000056D6  53        
000056D7  6574 2F43 8433          dc.b      101,116,47,67,108,101,97,114,47,75,105,108,108
000056DB  6C65 6172 
000056DF  2F4B 696C 
000056E3  6C        
000056E4  00        8434          dc.b      0
                    8435   @m68kde~1_106:
000056E6  0D0A 2020 8436          dc.b      13,10,32,32,67,32,32,32,32,32,32,32,32,32,32
000056EA  4320 2020 
000056EE  2020 2020 
000056F2  2020 20   
000056F5  2020 2D20 8437          dc.b      32,32,45,32,67,111,112,121,32,80,114,111,103
000056F9  436F 7079 
000056FD  2050 726F 
00005701  67        
00005702  7261 6D20 8438          dc.b      114,97,109,32,102,114,111,109,32,70,108,97,115
00005706  6672 6F6D 
0000570A  2046 6C61 
0000570E  73        
0000570F  6820 746F 8439          dc.b      104,32,116,111,32,77,97,105,110,32,77,101,109
00005713  204D 6169 
00005717  6E20 4D65 
0000571B  6D        
0000571C  6F72 7900 8440          dc.b      111,114,121,0
                    8441   @m68kde~1_107:
00005720  0D0A 2020 8442          dc.b      13,10,32,32,68,32,32,32,32,32,32,32,32,32,32
00005724  4420 2020 
00005728  2020 2020 
0000572C  2020 20   
0000572F  2020 2D20 8443          dc.b      32,32,45,32,68,117,109,112,32,77,101,109,111
00005733  4475 6D70 
00005737  204D 656D 
0000573B  6F        
0000573C  7279 2043 8444          dc.b      114,121,32,67,111,110,116,101,110,116,115,32
00005740  6F6E 7465 
00005744  6E74 7320 
00005748  746F 2053 8445          dc.b      116,111,32,83,99,114,101,101,110,0
0000574C  6372 6565 
00005750  6E00      
                    8446   @m68kde~1_108:
00005752  0D0A 2020 8447          dc.b      13,10,32,32,69,32,32,32,32,32,32,32,32,32,32
00005756  4520 2020 
0000575A  2020 2020 
0000575E  2020 20   
00005761  2020 2D20 8448          dc.b      32,32,45,32,69,110,116,101,114,32,83,116,114
00005765  456E 7465 
00005769  7220 5374 
0000576D  72        
0000576E  696E 6720 8449          dc.b      105,110,103,32,105,110,116,111,32,77,101,109
00005772  696E 746F 
00005776  204D 656D 
0000577A  6F72 7900 8450          dc.b      111,114,121,0
                    8451   @m68kde~1_109:
0000577E  0D0A 2020 8452          dc.b      13,10,32,32,70,32,32,32,32,32,32,32,32,32,32
00005782  4620 2020 
00005786  2020 2020 
0000578A  2020 20   
0000578D  2020 2D20 8453          dc.b      32,32,45,32,70,105,108,108,32,77,101,109,111
00005791  4669 6C6C 
00005795  204D 656D 
00005799  6F        
0000579A  7279 2077 8454          dc.b      114,121,32,119,105,116,104,32,68,97,116,97,0
0000579E  6974 6820 
000057A2  4461 7461 
000057A6  00        
                    8455   @m68kde~1_110:
000057A8  0D0A 2020 8456          dc.b      13,10,32,32,71,32,32,32,32,32,32,32,32,32,32
000057AC  4720 2020 
000057B0  2020 2020 
000057B4  2020 20   
000057B7  2020 2D20 8457          dc.b      32,32,45,32,71,111,32,80,114,111,103,114,97
000057BB  476F 2050 
000057BF  726F 6772 
000057C3  61        
000057C4  6D20 5374 8458          dc.b      109,32,83,116,97,114,116,105,110,103,32,97,116
000057C8  6172 7469 
000057CC  6E67 2061 
000057D0  74        
000057D1  2041 6464 8459          dc.b      32,65,100,100,114,101,115,115,58,32,36,37,48
000057D5  7265 7373 
000057D9  3A20 2425 
000057DD  30        
000057DE  3858 00   8460          dc.b      56,88,0
                    8461   @m68kde~1_111:
000057E2  0D0A 2020 8462          dc.b      13,10,32,32,76,32,32,32,32,32,32,32,32,32,32
000057E6  4C20 2020 
000057EA  2020 2020 
000057EE  2020 20   
000057F1  2020 2D20 8463          dc.b      32,32,45,32,76,111,97,100,32,80,114,111,103
000057F5  4C6F 6164 
000057F9  2050 726F 
000057FD  67        
000057FE  7261 6D20 8464          dc.b      114,97,109,32,40,46,72,69,88,32,102,105,108
00005802  282E 4845 
00005806  5820 6669 
0000580A  6C        
0000580B  6529 2066 8465          dc.b      101,41,32,102,114,111,109,32,76,97,112,116,111
0000580F  726F 6D20 
00005813  4C61 7074 
00005817  6F        
00005818  7000      8466          dc.b      112,0
                    8467   @m68kde~1_112:
0000581A  0D0A 2020 8468          dc.b      13,10,32,32,77,32,32,32,32,32,32,32,32,32,32
0000581E  4D20 2020 
00005822  2020 2020 
00005826  2020 20   
00005829  2020 2D20 8469          dc.b      32,32,45,32,77,101,109,111,114,121,32,69,120
0000582D  4D65 6D6F 
00005831  7279 2045 
00005835  78        
00005836  616D 696E 8470          dc.b      97,109,105,110,101,32,97,110,100,32,67,104,97
0000583A  6520 616E 
0000583E  6420 4368 
00005842  61        
00005843  6E67 6500 8471          dc.b      110,103,101,0
                    8472   @m68kde~1_113:
00005848  0D0A 2020 8473          dc.b      13,10,32,32,80,32,32,32,32,32,32,32,32,32,32
0000584C  5020 2020 
00005850  2020 2020 
00005854  2020 20   
00005857  2020 2D20 8474          dc.b      32,32,45,32,80,114,111,103,114,97,109,32,70
0000585B  5072 6F67 
0000585F  7261 6D20 
00005863  46        
00005864  6C61 7368 8475          dc.b      108,97,115,104,32,77,101,109,111,114,121,32
00005868  204D 656D 
0000586C  6F72 7920 
00005870  7769 7468 8476          dc.b      119,105,116,104,32,85,115,101,114,32,80,114
00005874  2055 7365 
00005878  7220 5072 
0000587C  6F67 7261 8477          dc.b      111,103,114,97,109,0
00005880  6D00      
                    8478   @m68kde~1_114:
00005882  0D0A 2020 8479          dc.b      13,10,32,32,82,32,32,32,32,32,32,32,32,32,32
00005886  5220 2020 
0000588A  2020 2020 
0000588E  2020 20   
00005891  2020 2D20 8480          dc.b      32,32,45,32,68,105,115,112,108,97,121,32,54
00005895  4469 7370 
00005899  6C61 7920 
0000589D  36        
0000589E  3830 3030 8481          dc.b      56,48,48,48,32,82,101,103,105,115,116,101,114
000058A2  2052 6567 
000058A6  6973 7465 
000058AA  72        
000058AB  7300      8482          dc.b      115,0
                    8483   @m68kde~1_115:
000058AE  0D0A 2020 8484          dc.b      13,10,32,32,83,32,32,32,32,32,32,32,32,32,32
000058B2  5320 2020 
000058B6  2020 2020 
000058BA  2020 20   
000058BD  2020 2D20 8485          dc.b      32,32,45,32,84,111,103,103,108,101,32,79,78
000058C1  546F 6767 
000058C5  6C65 204F 
000058C9  4E        
000058CA  2F4F 4646 8486          dc.b      47,79,70,70,32,83,105,110,103,108,101,32,83
000058CE  2053 696E 
000058D2  676C 6520 
000058D6  53        
000058D7  7465 7020 8487          dc.b      116,101,112,32,77,111,100,101,0
000058DB  4D6F 6465 
000058DF  00        
                    8488   @m68kde~1_116:
000058E0  0D0A 2020 8489          dc.b      13,10,32,32,84,77,32,32,32,32,32,32,32,32,32
000058E4  544D 2020 
000058E8  2020 2020 
000058EC  2020 20   
000058EF  2020 2D20 8490          dc.b      32,32,45,32,84,101,115,116,32,77,101,109,111
000058F3  5465 7374 
000058F7  204D 656D 
000058FB  6F        
000058FC  7279 00   8491          dc.b      114,121,0
                    8492   @m68kde~1_117:
00005900  0D0A 2020 8493          dc.b      13,10,32,32,84,83,32,32,32,32,32,32,32,32,32
00005904  5453 2020 
00005908  2020 2020 
0000590C  2020 20   
0000590F  2020 2D20 8494          dc.b      32,32,45,32,84,101,115,116,32,83,119,105,116
00005913  5465 7374 
00005917  2053 7769 
0000591B  74        
0000591C  6368 6573 8495          dc.b      99,104,101,115,58,32,83,87,55,45,48,0
00005920  3A20 5357 
00005924  372D 3000 
                    8496   @m68kde~1_118:
00005928  0D0A 2020 8497          dc.b      13,10,32,32,84,68,32,32,32,32,32,32,32,32,32
0000592C  5444 2020 
00005930  2020 2020 
00005934  2020 20   
00005937  2020 2D20 8498          dc.b      32,32,45,32,84,101,115,116,32,68,105,115,112
0000593B  5465 7374 
0000593F  2044 6973 
00005943  70        
00005944  6C61 7973 8499          dc.b      108,97,121,115,58,32,76,69,68,115,32,97,110
00005948  3A20 4C45 
0000594C  4473 2061 
00005950  6E        
00005951  6420 372D 8500          dc.b      100,32,55,45,83,101,103,109,101,110,116,0
00005955  5365 676D 
00005959  656E 7400 
                    8501   @m68kde~1_119:
0000595E  0D0A 2020 8502          dc.b      13,10,32,32,87,68,47,87,83,47,87,67,47,87,75
00005962  5744 2F57 
00005966  532F 5743 
0000596A  2F57 4B   
0000596D  2020 2D20 8503          dc.b      32,32,45,32,87,97,116,99,104,32,80,111,105,110
00005971  5761 7463 
00005975  6820 506F 
00005979  696E      
0000597B  743A 2044 8504          dc.b      116,58,32,68,105,115,112,108,97,121,47,83,101
0000597F  6973 706C 
00005983  6179 2F53 
00005987  65        
00005988  742F 436C 8505          dc.b      116,47,67,108,101,97,114,47,75,105,108,108,0
0000598C  6561 722F 
00005990  4B69 6C6C 
00005994  00        
                    8506   @m68kde~1_120:
00005996  0D0A 2300 8507          dc.b      13,10,35,0
                    8508   @m68kde~1_121:
0000599A  0D0A 5072 8509          dc.b      13,10,80,114,111,103,114,97,109,32,82,117,110
0000599E  6F67 7261 
000059A2  6D20 5275 
000059A6  6E        
000059A7  6E69 6E67 8510          dc.b      110,105,110,103,46,46,46,46,46,0
000059AB  2E2E 2E2E 
000059AF  2E00      
                    8511   @m68kde~1_122:
000059B2  0D0A 5072 8512          dc.b      13,10,80,114,101,115,115,32,60,82,69,83,69,84
000059B6  6573 7320 
000059BA  3C52 4553 
000059BE  4554      
000059C0  3E20 6275 8513          dc.b      62,32,98,117,116,116,111,110,32,60,75,101,121
000059C4  7474 6F6E 
000059C8  203C 4B65 
000059CC  79        
000059CD  303E 206F 8514          dc.b      48,62,32,111,110,32,68,69,49,32,116,111,32,115
000059D1  6E20 4445 
000059D5  3120 746F 
000059D9  2073      
000059DB  746F 7000 8515          dc.b      116,111,112,0
                    8516   @m68kde~1_123:
000059E0  0D0A 4572 8517          dc.b      13,10,69,114,114,111,114,58,32,80,114,101,115
000059E4  726F 723A 
000059E8  2050 7265 
000059EC  73        
000059ED  7320 2747 8518          dc.b      115,32,39,71,39,32,102,105,114,115,116,32,116
000059F1  2720 6669 
000059F5  7273 7420 
000059F9  74        
000059FA  6F20 7374 8519          dc.b      111,32,115,116,97,114,116,32,112,114,111,103
000059FE  6172 7420 
00005A02  7072 6F67 
00005A06  7261 6D00 8520          dc.b      114,97,109,0
                    8521   @m68kde~1_124:
00005A0A  0D0A 5369 8522          dc.b      13,10,83,105,110,103,108,101,32,83,116,101,112
00005A0E  6E67 6C65 
00005A12  2053 7465 
00005A16  70        
00005A17  2020 3A5B 8523          dc.b      32,32,58,91,79,78,93,0
00005A1B  4F4E 5D00 
                    8524   @m68kde~1_125:
00005A20  0D0A 5072 8525          dc.b      13,10,80,114,101,115,115,32,39,71,39,32,116
00005A24  6573 7320 
00005A28  2747 2720 
00005A2C  74        
00005A2D  6F20 5472 8526          dc.b      111,32,84,114,97,99,101,32,80,114,111,103,114
00005A31  6163 6520 
00005A35  5072 6F67 
00005A39  72        
00005A3A  616D 2066 8527          dc.b      97,109,32,102,114,111,109,32,97,100,100,114
00005A3E  726F 6D20 
00005A42  6164 6472 
00005A46  6573 7320 8528          dc.b      101,115,115,32,36,37,48,56,120,46,46,46,46,46
00005A4A  2425 3038 
00005A4E  782E 2E2E 
00005A52  2E2E      
00005A54  00        8529          dc.b      0
                    8530   @m68kde~1_126:
00005A56  0D0A 5075 8531          dc.b      13,10,80,117,115,104,32,60,82,69,83,69,84,32
00005A5A  7368 203C 
00005A5E  5245 5345 
00005A62  5420      
00005A64  4275 7474 8532          dc.b      66,117,116,116,111,110,62,32,116,111,32,83,116
00005A68  6F6E 3E20 
00005A6C  746F 2053 
00005A70  74        
00005A71  6F70 2E2E 8533          dc.b      111,112,46,46,46,46,46,0
00005A75  2E2E 2E00 
                    8534   @m68kde~1_127:
00005A7A  0D0A 5369 8535          dc.b      13,10,83,105,110,103,108,101,32,83,116,101,112
00005A7E  6E67 6C65 
00005A82  2053 7465 
00005A86  70        
00005A87  203A 205B 8536          dc.b      32,58,32,91,79,70,70,93,0
00005A8B  4F46 465D 
00005A8F  00        
                    8537   @m68kde~1_128:
00005A90  0D0A 4272 8538          dc.b      13,10,66,114,101,97,107,32,80,111,105,110,116
00005A94  6561 6B20 
00005A98  506F 696E 
00005A9C  74        
00005A9D  7320 3A5B 8539          dc.b      115,32,58,91,69,110,97,98,108,101,100,93,0
00005AA1  456E 6162 
00005AA5  6C65 645D 
00005AA9  00        
                    8540   @m68kde~1_129:
00005AAA  0D0A 5072 8541          dc.b      13,10,80,114,101,115,115,32,60,69,83,67,62,32
00005AAE  6573 7320 
00005AB2  3C45 5343 
00005AB6  3E20      
00005AB8  746F 2052 8542          dc.b      116,111,32,82,101,115,117,109,101,32,85,115
00005ABC  6573 756D 
00005AC0  6520 5573 
00005AC4  6572 2050 8543          dc.b      101,114,32,80,114,111,103,114,97,109,46,46,46
00005AC8  726F 6772 
00005ACC  616D 2E2E 
00005AD0  2E        
00005AD1  2E2E 00   8544          dc.b      46,46,0
                    8545   @m68kde~1_130:
00005AD4  0D0A 5369 8546          dc.b      13,10,83,105,110,103,108,101,32,83,116,101,112
00005AD8  6E67 6C65 
00005ADC  2053 7465 
00005AE0  70        
00005AE1  2020 3A5B 8547          dc.b      32,32,58,91,79,70,70,93,0
00005AE5  4F46 465D 
00005AE9  00        
                    8548   @m68kde~1_131:
00005AEA  0D0A 0D0A 8549          dc.b      13,10,13,10,80,114,111,103,114,97,109,32,65
00005AEE  5072 6F67 
00005AF2  7261 6D20 
00005AF6  41        
00005AF7  424F 5254 8550          dc.b      66,79,82,84,32,33,33,33,33,33,33,13,10,0
00005AFB  2021 2121 
00005AFF  2121 210D 
00005B03  0A00      
                    8551   @m68kde~1_132:
00005B06  2573 0D0A 8552          dc.b      37,115,13,10,0
00005B0A  00        
                    8553   @m68kde~1_133:
00005B0C  0D0A 0D0A 8554          dc.b      13,10,13,10,80,114,111,103,114,97,109,32,65
00005B10  5072 6F67 
00005B14  7261 6D20 
00005B18  41        
00005B19  424F 5254 8555          dc.b      66,79,82,84,32,33,33,33,33,33,0
00005B1D  2021 2121 
00005B21  2121 00   
                    8556   @m68kde~1_134:
00005B24  0D0A 556E 8557          dc.b      13,10,85,110,104,97,110,100,108,101,100,32,73
00005B28  6861 6E64 
00005B2C  6C65 6420 
00005B30  49        
00005B31  6E74 6572 8558          dc.b      110,116,101,114,114,117,112,116,58,32,73,82
00005B35  7275 7074 
00005B39  3A20 4952 
00005B3D  5125 6420 8559          dc.b      81,37,100,32,33,33,33,33,33,0
00005B41  2121 2121 
00005B45  2100      
                    8560   @m68kde~1_135:
00005B48  4144 4452 8561          dc.b      65,68,68,82,69,83,83,32,69,82,82,79,82,58,32
00005B4C  4553 5320 
00005B50  4552 524F 
00005B54  523A 20   
00005B57  3136 206F 8562          dc.b      49,54,32,111,114,32,51,50,32,66,105,116,32,84
00005B5B  7220 3332 
00005B5F  2042 6974 
00005B63  2054      
00005B65  7261 6E73 8563          dc.b      114,97,110,115,102,101,114,32,116,111,47,102
00005B69  6665 7220 
00005B6D  746F 2F66 
00005B71  726F 6D20 8564          dc.b      114,111,109,32,97,110,32,79,68,68,32,65,100
00005B75  616E 204F 
00005B79  4444 2041 
00005B7D  64        
00005B7E  6472 6573 8565          dc.b      100,114,101,115,115,46,46,46,46,0
00005B82  732E 2E2E 
00005B86  2E00      
                    8566   @m68kde~1_136:
00005B88  556E 6861 8567          dc.b      85,110,104,97,110,100,108,101,100,32,84,114
00005B8C  6E64 6C65 
00005B90  6420 5472 
00005B94  6170 2021 8568          dc.b      97,112,32,33,33,33,33,33,0
00005B98  2121 2121 
00005B9C  00        
                    8569   @m68kde~1_137:
00005B9E  4255 5320 8570          dc.b      66,85,83,32,69,114,114,111,114,33,0
00005BA2  4572 726F 
00005BA6  7221 00   
                    8571   @m68kde~1_138:
00005BAA  4144 4452 8572          dc.b      65,68,68,82,69,83,83,32,69,114,114,111,114,33
00005BAE  4553 5320 
00005BB2  4572 726F 
00005BB6  7221      
00005BB8  00        8573          dc.b      0
                    8574   @m68kde~1_139:
00005BBA  494C 4C45 8575          dc.b      73,76,76,69,71,65,76,32,73,78,83,84,82,85,67
00005BBE  4741 4C20 
00005BC2  494E 5354 
00005BC6  5255 43   
00005BC9  5449 4F4E 8576          dc.b      84,73,79,78,0
00005BCD  00        
                    8577   @m68kde~1_140:
00005BCE  4449 5649 8578          dc.b      68,73,86,73,68,69,32,66,89,32,90,69,82,79,0
00005BD2  4445 2042 
00005BD6  5920 5A45 
00005BDA  524F 00   
                    8579   @m68kde~1_141:
00005BDE  2743 484B 8580          dc.b      39,67,72,75,39,32,73,78,83,84,82,85,67,84,73
00005BE2  2720 494E 
00005BE6  5354 5255 
00005BEA  4354 49   
00005BED  4F4E 00   8581          dc.b      79,78,0
                    8582   @m68kde~1_142:
00005BF0  5452 4150 8583          dc.b      84,82,65,80,86,32,73,78,83,84,82,85,67,84,73
00005BF4  5620 494E 
00005BF8  5354 5255 
00005BFC  4354 49   
00005BFF  4F4E 00   8584          dc.b      79,78,0
                    8585   @m68kde~1_143:
00005C02  5052 4956 8586          dc.b      80,82,73,86,73,76,69,71,69,32,86,73,79,76,65
00005C06  494C 4547 
00005C0A  4520 5649 
00005C0E  4F4C 41   
00005C11  5449 4F4E 8587          dc.b      84,73,79,78,0
00005C15  00        
                    8588   @m68kde~1_144:
00005C16  554E 494E 8589          dc.b      85,78,73,78,73,84,73,65,76,73,83,69,68,32,73
00005C1A  4954 4941 
00005C1E  4C49 5345 
00005C22  4420 49   
00005C25  5251 00   8590          dc.b      82,81,0
                    8591   @m68kde~1_145:
00005C28  5350 5552 8592          dc.b      83,80,85,82,73,79,85,83,32,73,82,81,0
00005C2C  494F 5553 
00005C30  2049 5251 
00005C34  00        
                    8593   @m68kde~1_146:
00005C36  0D0A 5374 8594          dc.b      13,10,83,116,97,114,116,32,65,100,100,114,101
00005C3A  6172 7420 
00005C3E  4164 6472 
00005C42  65        
00005C43  7373 2069 8595          dc.b      115,115,32,105,110,32,77,101,109,111,114,121
00005C47  6E20 4D65 
00005C4B  6D6F 7279 
00005C4F  3A20 00   8596          dc.b      58,32,0
                    8597   @m68kde~1_147:
00005C52  0D0A 456E 8598          dc.b      13,10,69,110,116,101,114,32,83,116,114,105,110
00005C56  7465 7220 
00005C5A  5374 7269 
00005C5E  6E        
00005C5F  6720 2845 8599          dc.b      103,32,40,69,83,67,32,116,111,32,101,110,100
00005C63  5343 2074 
00005C67  6F20 656E 
00005C6B  64        
00005C6C  2920 3A00 8600          dc.b      41,32,58,0
                    8601   @m68kde~1_148:
00005C70  0D0A 5265 8602          dc.b      13,10,82,101,97,100,105,110,103,32,65,100,100
00005C74  6164 696E 
00005C78  6720 4164 
00005C7C  64        
00005C7D  7265 7373 8603          dc.b      114,101,115,115,101,115,32,91,36,37,48,56,88
00005C81  6573 205B 
00005C85  2425 3038 
00005C89  58        
00005C8A  202D 2024 8604          dc.b      32,45,32,36,37,48,56,88,93,32,102,111,114,32
00005C8E  2530 3858 
00005C92  5D20 666F 
00005C96  7220      
00005C98  2425 3032 8605          dc.b      36,37,48,50,88,0
00005C9C  5800      
                    8606   @m68kde~1_149:
00005C9E  0D0A 5661 8607          dc.b      13,10,86,97,108,117,101,32,105,110,99,111,114
00005CA2  6C75 6520 
00005CA6  696E 636F 
00005CAA  72        
00005CAB  7265 6374 8608          dc.b      114,101,99,116,32,97,116,32,97,100,100,114,101
00005CAF  2061 7420 
00005CB3  6164 6472 
00005CB7  65        
00005CB8  7373 6573 8609          dc.b      115,115,101,115,32,36,37,48,56,88,32,46,46,46
00005CBC  2024 2530 
00005CC0  3858 202E 
00005CC4  2E2E      
00005CC6  2073 686F 8610          dc.b      32,115,104,111,117,108,100,32,98,101,32,36,37
00005CCA  756C 6420 
00005CCE  6265 2024 
00005CD2  25        
00005CD3  3032 5820 8611          dc.b      48,50,88,32,98,117,116,32,102,111,117,110,100
00005CD7  6275 7420 
00005CDB  666F 756E 
00005CDF  64        
00005CE0  2024 2530 8612          dc.b      32,36,37,48,50,88,0
00005CE4  3258 00   
                    8613   @m68kde~1_150:
00005CE8  0D0A 5661 8614          dc.b      13,10,86,97,108,117,101,58,32,36,37,48,50,88
00005CEC  6C75 653A 
00005CF0  2024 2530 
00005CF4  3258      
00005CF6  2066 6F75 8615          dc.b      32,102,111,117,110,100,32,97,116,32,65,100,100
00005CFA  6E64 2061 
00005CFE  7420 4164 
00005D02  64        
00005D03  7265 7373 8616          dc.b      114,101,115,115,58,32,36,37,48,56,88,0
00005D07  3A20 2425 
00005D0B  3038 5800 
                    8617   @m68kde~1_151:
00005D10  0D0A 5661 8618          dc.b      13,10,86,97,108,117,101,58,32,36,37,48,50,88
00005D14  6C75 653A 
00005D18  2024 2530 
00005D1C  3258      
00005D1E  2024 2530 8619          dc.b      32,36,37,48,50,88,32,102,111,117,110,100,32
00005D22  3258 2066 
00005D26  6F75 6E64 
00005D2A  20        
00005D2B  6174 2041 8620          dc.b      97,116,32,65,100,100,114,101,115,115,58,32,36
00005D2F  6464 7265 
00005D33  7373 3A20 
00005D37  24        
00005D38  2530 3858 8621          dc.b      37,48,56,88,32,97,110,100,32,36,37,48,56,88
00005D3C  2061 6E64 
00005D40  2024 2530 
00005D44  3858      
00005D46  00        8622          dc.b      0
                    8623   @m68kde~1_152:
00005D48  0D0A 5661 8624          dc.b      13,10,86,97,108,117,101,58,32,36,37,48,50,88
00005D4C  6C75 653A 
00005D50  2024 2530 
00005D54  3258      
00005D56  2024 2530 8625          dc.b      32,36,37,48,50,88,32,36,37,48,50,88,32,36,37
00005D5A  3258 2024 
00005D5E  2530 3258 
00005D62  2024 25   
00005D65  3032 5820 8626          dc.b      48,50,88,32,102,111,117,110,100,32,97,116,32
00005D69  666F 756E 
00005D6D  6420 6174 
00005D71  20        
00005D72  4164 6472 8627          dc.b      65,100,100,114,101,115,115,58,32,36,37,48,56
00005D76  6573 733A 
00005D7A  2024 2530 
00005D7E  38        
00005D7F  5820 2D20 8628          dc.b      88,32,45,32,36,37,48,56,88,0
00005D83  2425 3038 
00005D87  5800      
                    8629   @m68kde~1_153:
00005D8A  0D0A 5465 8630          dc.b      13,10,84,101,115,116,32,112,97,115,115,101,100
00005D8E  7374 2070 
00005D92  6173 7365 
00005D96  64        
00005D97  2073 7563 8631          dc.b      32,115,117,99,99,101,115,115,102,117,108,108
00005D9B  6365 7373 
00005D9F  6675 6C6C 
00005DA3  792E 204E 8632          dc.b      121,46,32,78,111,116,101,58,32,116,104,101,32
00005DA7  6F74 653A 
00005DAB  2074 6865 
00005DAF  20        
00005DB0  7361 6D70 8633          dc.b      115,97,109,112,108,101,32,100,97,116,97,32,97
00005DB4  6C65 2064 
00005DB8  6174 6120 
00005DBC  61        
00005DBD  7265 2070 8634          dc.b      114,101,32,112,114,105,110,116,101,100,32,101
00005DC1  7269 6E74 
00005DC5  6564 2065 
00005DC9  7665 7279 8635          dc.b      118,101,114,121,32,49,48,48,48,48,32,97,100
00005DCD  2031 3030 
00005DD1  3030 2061 
00005DD5  64        
00005DD6  6472 6573 8636          dc.b      100,114,101,115,115,101,115,0
00005DDA  7365 7300 
                    8637   @m68kde~1_154:
00005DDE  0D0A 456E 8638          dc.b      13,10,69,110,116,101,114,32,109,101,109,111
00005DE2  7465 7220 
00005DE6  6D65 6D6F 
00005DEA  7279 2074 8639          dc.b      114,121,32,116,101,115,116,32,99,111,110,102
00005DEE  6573 7420 
00005DF2  636F 6E66 
00005DF6  6967 7572 8640          dc.b      105,103,117,114,97,116,105,111,110,40,49,32
00005DFA  6174 696F 
00005DFE  6E28 3120 
00005E02  2D20 6279 8641          dc.b      45,32,98,121,116,101,115,44,32,50,32,45,32,119
00005E06  7465 732C 
00005E0A  2032 202D 
00005E0E  2077      
00005E10  6F72 6473 8642          dc.b      111,114,100,115,44,32,51,32,45,32,108,111,110
00005E14  2C20 3320 
00005E18  2D20 6C6F 
00005E1C  6E        
00005E1D  6720 776F 8643          dc.b      103,32,119,111,114,100,115,41,58,32,0
00005E21  7264 7329 
00005E25  3A20 00   
                    8644   @m68kde~1_155:
00005E28  0D0A 436F 8645          dc.b      13,10,67,111,110,102,105,103,117,114,97,116
00005E2C  6E66 6967 
00005E30  7572 6174 
00005E34  696F 6E20 8646          dc.b      105,111,110,32,105,110,118,97,108,105,100,32
00005E38  696E 7661 
00005E3C  6C69 6420 
00005E40  2564 2C20 8647          dc.b      37,100,44,32,116,114,121,32,97,103,97,105,110
00005E44  7472 7920 
00005E48  6167 6169 
00005E4C  6E        
00005E4D  00        8648          dc.b      0
                    8649   @m68kde~1_156:
00005E4E  0D0A 4368 8650          dc.b      13,10,67,104,111,111,115,101,32,98,101,116,119
00005E52  6F6F 7365 
00005E56  2062 6574 
00005E5A  77        
00005E5B  6565 6E20 8651          dc.b      101,101,110,32,100,105,102,102,101,114,101,110
00005E5F  6469 6666 
00005E63  6572 656E 
00005E67  7420 6D65 8652          dc.b      116,32,109,101,109,111,114,121,32,116,101,115
00005E6B  6D6F 7279 
00005E6F  2074 6573 
00005E73  7420 7061 8653          dc.b      116,32,112,97,116,116,101,114,110,115,40,49
00005E77  7474 6572 
00005E7B  6E73 2831 
00005E7F  202D 2035 8654          dc.b      32,45,32,53,44,32,50,32,45,32,65,44,32,51,32
00005E83  2C20 3220 
00005E87  2D20 412C 
00005E8B  2033 20   
00005E8E  2D20 462C 8655          dc.b      45,32,70,44,32,52,32,45,32,48,41,58,32,0
00005E92  2034 202D 
00005E96  2030 293A 
00005E9A  2000      
                    8656   @m68kde~1_157:
00005E9C  0D0A 5061 8657          dc.b      13,10,80,97,116,116,101,114,110,32,105,110,118
00005EA0  7474 6572 
00005EA4  6E20 696E 
00005EA8  76        
00005EA9  616C 6964 8658          dc.b      97,108,105,100,44,32,116,114,121,32,97,103,97
00005EAD  2C20 7472 
00005EB1  7920 6167 
00005EB5  61        
00005EB6  696E 00   8659          dc.b      105,110,0
                    8660   @m68kde~1_158:
00005EBA  0D0A 456E 8661          dc.b      13,10,69,110,116,101,114,32,115,116,97,114,116
00005EBE  7465 7220 
00005EC2  7374 6172 
00005EC6  74        
00005EC7  696E 6720 8662          dc.b      105,110,103,32,97,100,100,114,101,115,115,40
00005ECB  6164 6472 
00005ECF  6573 7328 
00005ED3  2530 3858 8663          dc.b      37,48,56,88,32,45,32,37,48,56,88,32,105,110
00005ED7  202D 2025 
00005EDB  3038 5820 
00005EDF  696E      
00005EE1  636C 7573 8664          dc.b      99,108,117,115,105,118,101,41,58,32,0
00005EE5  6976 6529 
00005EE9  3A20 00   
                    8665   @m68kde~1_159:
00005EEC  0D0A 496E 8666          dc.b      13,10,73,110,118,97,108,105,100,32,115,116,97
00005EF0  7661 6C69 
00005EF4  6420 7374 
00005EF8  61        
00005EF9  7274 696E 8667          dc.b      114,116,105,110,103,32,97,100,100,114,101,115
00005EFD  6720 6164 
00005F01  6472 6573 
00005F05  732E 2E20 8668          dc.b      115,46,46,32,116,114,121,32,97,103,97,105,110
00005F09  7472 7920 
00005F0D  6167 6169 
00005F11  6E        
00005F12  00        8669          dc.b      0
                    8670   @m68kde~1_160:
00005F14  0D0A 456E 8671          dc.b      13,10,69,110,116,101,114,32,101,110,100,105
00005F18  7465 7220 
00005F1C  656E 6469 
00005F20  6E67 2061 8672          dc.b      110,103,32,97,100,100,114,101,115,115,40,37
00005F24  6464 7265 
00005F28  7373 2825 
00005F2C  3038 5820 8673          dc.b      48,56,88,32,45,32,37,48,56,88,32,105,110,99
00005F30  2D20 2530 
00005F34  3858 2069 
00005F38  6E63      
00005F3A  6C75 7369 8674          dc.b      108,117,115,105,118,101,41,58,32,0
00005F3E  7665 293A 
00005F42  2000      
                    8675   @m68kde~1_161:
00005F44  0D0A 456E 8676          dc.b      13,10,69,110,100,105,110,103,32,97,100,100,114
00005F48  6469 6E67 
00005F4C  2061 6464 
00005F50  72        
00005F51  6573 7320 8677          dc.b      101,115,115,32,111,117,116,32,111,102,32,98
00005F55  6F75 7420 
00005F59  6F66 2062 
00005F5D  6F75 6E64 8678          dc.b      111,117,110,100,115,46,46,32,116,114,121,32
00005F61  732E 2E20 
00005F65  7472 7920 
00005F69  6167 6169 8679          dc.b      97,103,97,105,110,0
00005F6D  6E00      
                    8680   @m68kde~1_162:
00005F70  0D0A 5772 8681          dc.b      13,10,87,114,105,116,105,110,103,32,116,111
00005F74  6974 696E 
00005F78  6720 746F 
00005F7C  2053 5241 8682          dc.b      32,83,82,65,77,32,46,46,46,0
00005F80  4D20 2E2E 
00005F84  2E00      
                    8683   @m68kde~1_163:
00005F86  0D0A 2E2E 8684          dc.b      13,10,46,46,46,46,46,46,46,46,46,46,46,46,46
00005F8A  2E2E 2E2E 
00005F8E  2E2E 2E2E 
00005F92  2E2E 2E   
00005F95  2E2E 2E2E 8685          dc.b      46,46,46,46,46,46,46,46,46,46,46,46,46,46,46
00005F99  2E2E 2E2E 
00005F9D  2E2E 2E2E 
00005FA1  2E2E 2E   
00005FA4  2E2E 2E2E 8686          dc.b      46,46,46,46,46,46,46,46,46,46,46,46,46,46,46
00005FA8  2E2E 2E2E 
00005FAC  2E2E 2E2E 
00005FB0  2E2E 2E   
00005FB3  2E2E 2E2E 8687          dc.b      46,46,46,46,46,46,46,46,46,46,46,46,46,46,46
00005FB7  2E2E 2E2E 
00005FBB  2E2E 2E2E 
00005FBF  2E2E 2E   
00005FC2  2E2E 2E2E 8688          dc.b      46,46,46,46,46,46,46,46,46,46,46,46,46,46,46
00005FC6  2E2E 2E2E 
00005FCA  2E2E 2E2E 
00005FCE  2E2E 2E   
00005FD1  2E2E 2E2E 8689          dc.b      46,46,46,46,46,46,46,46,46,46,46,46,46,46,46
00005FD5  2E2E 2E2E 
00005FD9  2E2E 2E2E 
00005FDD  2E2E 2E   
00005FE0  2E2E 2E2E 8690          dc.b      46,46,46,46,46,46,46,46,46,46,46,46,46,46,46
00005FE4  2E2E 2E2E 
00005FE8  2E2E 2E2E 
00005FEC  2E2E 2E   
00005FEF  2E2E 2E2E 8691          dc.b      46,46,46,46,46,0
00005FF3  2E00      
                    8692   @m68kde~1_164:
00005FF6  0D0A 4669 8693          dc.b      13,10,70,105,110,105,115,104,101,100,32,119
00005FFA  6E69 7368 
00005FFE  6564 2077 
00006002  7269 7469 8694          dc.b      114,105,116,105,110,103,32,116,111,32,83,82
00006006  6E67 2074 
0000600A  6F20 5352 
0000600E  414D 202E 8695          dc.b      65,77,32,46,0
00006012  00        
                    8696   @m68kde~1_165:
00006014  0D0A 4368 8697          dc.b      13,10,67,104,101,99,107,32,83,82,65,77,32,99
00006018  6563 6B20 
0000601C  5352 414D 
00006020  2063      
00006022  6F6E 7465 8698          dc.b      111,110,116,101,110,116,0
00006026  6E74 00   
                    8699   @m68kde~1_166:
0000602A  0D0A 5265 8700          dc.b      13,10,82,101,97,100,105,110,103,32,102,114,111
0000602E  6164 696E 
00006032  6720 6672 
00006036  6F        
00006037  6D20 5352 8701          dc.b      109,32,83,82,65,77,32,46,46,46,0
0000603B  414D 202E 
0000603F  2E2E 00   
                    8702   @m68kde~1_167:
00006042  0D0A 2E2E 8703          dc.b      13,10,46,46,46,46,46,46,46,46,46,46,46,46,46
00006046  2E2E 2E2E 
0000604A  2E2E 2E2E 
0000604E  2E2E 2E   
00006051  2E2E 2E2E 8704          dc.b      46,46,46,46,46,46,46,46,46,46,32,98,101,103
00006055  2E2E 2E2E 
00006059  2E2E 2062 
0000605D  6567      
0000605F  696E 2072 8705          dc.b      105,110,32,114,101,97,100,105,110,103,0
00006063  6561 6469 
00006067  6E67 00   
                    8706   @m68kde~1_168:
0000606A  0D0A 4669 8707          dc.b      13,10,70,105,110,105,115,104,101,100,32,114
0000606E  6E69 7368 
00006072  6564 2072 
00006076  6561 6469 8708          dc.b      101,97,100,105,110,103,32,102,114,111,109,32
0000607A  6E67 2066 
0000607E  726F 6D20 
00006082  5352 414D 8709          dc.b      83,82,65,77,32,46,46,46,0
00006086  202E 2E2E 
0000608A  00        
                    8710   @m68kde~1_169:
0000608C  0D0A 656E 8711          dc.b      13,10,101,110,100,32,111,102,32,112,114,111
00006090  6420 6F66 
00006094  2070 726F 
00006098  6772 616D 8712          dc.b      103,114,97,109,32,46,46,46,0
0000609C  202E 2E2E 
000060A0  00        
                    8713   @m68kde~1_170:
000060A2  4445 312D 8714          dc.b      68,69,49,45,54,56,107,32,66,117,103,32,86,49
000060A6  3638 6B20 
000060AA  4275 6720 
000060AE  5631      
000060B0  2E37 3700 8715          dc.b      46,55,55,0
                    8716   @m68kde~1_171:
000060B4  436F 7079 8717          dc.b      67,111,112,121,114,105,103,104,116,32,40,67
000060B8  7269 6768 
000060BC  7420 2843 
000060C0  2920 504A 8718          dc.b      41,32,80,74,32,68,97,118,105,101,115,32,50,48
000060C4  2044 6176 
000060C8  6965 7320 
000060CC  3230      
000060CE  3136 00   8719          dc.b      49,54,0
                    8720   @m68kde~1_172:
000060D2  0D0A 5275 8721          dc.b      13,10,82,117,110,110,105,110,103,46,46,46,46
000060D6  6E6E 696E 
000060DA  672E 2E2E 
000060DE  2E        
000060DF  2E00      8722          dc.b      46,0
                    8723   @m68kde~1_173:
000060E2  5275 6E6E 8724          dc.b      82,117,110,110,105,110,103,46,46,46,46,46,0
000060E6  696E 672E 
000060EA  2E2E 2E2E 
000060EE  00        
                    8725   @m68kde~1_174:
000060F0  4279 3A20 8726          dc.b      66,121,58,32,80,74,32,68,97,118,105,101,115
000060F4  504A 2044 
000060F8  6176 6965 
000060FC  73        
000060FD  00        8727          dc.b      0
                    8728   @m68kde~1_175:
000060FE  0D0A 2573 8729          dc.b      13,10,37,115,0
00006102  00        
                    8730   @m68kde~1_176:
00006104  0D0A 4E61 8731          dc.b      13,10,78,97,110,99,121,32,77,97,107,97,114,32
00006108  6E63 7920 
0000610C  4D61 6B61 
00006110  7220      
00006112  2D20 3333 8732          dc.b      45,32,51,51,52,54,52,57,49,56,32,97,110,100
00006116  3436 3439 
0000611A  3138 2061 
0000611E  6E64      
00006120  2053 7465 8733          dc.b      32,83,116,101,118,101,110,32,67,104,105,110
00006124  7665 6E20 
00006128  4368 696E 
0000612C  202D 2034 8734          dc.b      32,45,32,52,48,49,48,56,53,52,48,0
00006130  3031 3038 
00006134  3534 3000 
                    8735          section   data
00006138            8736                   align
          0000 6138 8737   DataStart       equ       *
                    8738   
                    8739   *********************************************************************************************************
                    8740   * Data Section for Initialised Data - these will be placed in rom as constants and have to be copied
                    8741   * to ram as part of the CStart routine in this file
                    8742   *********************************************************************************************************
                    8743   
                    8744   @vsscanf_bufx:
00006138  0803 0546 8745          dc.l      @vsscanf_buf
                    8746   @vsscanf_1:
0000613C  0A00      8747          dc.b      10,0
                    8748   __ctype:
0000613E  0040 4040 8749          dc.b      0,64,64,64,64,64,64,64,64,64,80,80,80,80,80
00006142  4040 4040 
00006146  4040 5050 
0000614A  5050 50   
0000614D  4040 4040 8750          dc.b      64,64,64,64,64,64,64,64,64,64,64,64,64,64,64
00006151  4040 4040 
00006155  4040 4040 
00006159  4040 40   
0000615C  4040 40D0 8751          dc.b      64,64,64,208,160,160,160,160,160,160,160,160
00006160  A0A0 A0A0 
00006164  A0A0 A0A0 
00006168  A0A0 A0A0 8752          dc.b      160,160,160,160,160,160,160,140,140,140,140
0000616C  A0A0 A08C 
00006170  8C8C 8C   
00006173  8C8C 8C8C 8753          dc.b      140,140,140,140,140,140,160,160,160,160,160
00006177  8C8C A0A0 
0000617B  A0A0 A0   
0000617E  A0A0 8A8A 8754          dc.b      160,160,138,138,138,138,138,138,130,130,130
00006182  8A8A 8A8A 
00006186  8282 82   
00006189  8282 8282 8755          dc.b      130,130,130,130,130,130,130,130,130,130,130
0000618D  8282 8282 
00006191  8282 82   
00006194  8282 8282 8756          dc.b      130,130,130,130,130,130,160,160,160,160,160
00006198  8282 A0A0 
0000619C  A0A0 A0   
0000619F  A089 8989 8757          dc.b      160,137,137,137,137,137,137,129,129,129,129
000061A3  8989 8981 
000061A7  8181 81   
000061AA  8181 8181 8758          dc.b      129,129,129,129,129,129,129,129,129,129,129
000061AE  8181 8181 
000061B2  8181 81   
000061B5  8181 8181 8759          dc.b      129,129,129,129,129,160,160,160,160,64,0,0,0
000061B9  81A0 A0A0 
000061BD  A040 0000 
000061C1  00        
000061C2  0000 0000 8760          dc.b      0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
000061C6  0000 0000 
000061CA  0000 0000 
000061CE  0000 0000 
000061D2  0000 0000 
000061D6  0000      
000061D8  0000 0000 8761          dc.b      0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
000061DC  0000 0000 
000061E0  0000 0000 
000061E4  0000 0000 
000061E8  0000 0000 
000061EC  0000      
000061EE  0000 0000 8762          dc.b      0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
000061F2  0000 0000 
000061F6  0000 0000 
000061FA  0000 0000 
000061FE  0000 0000 
00006202  0000      
00006204  0000 0000 8763          dc.b      0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
00006208  0000 0000 
0000620C  0000 0000 
00006210  0000 0000 
00006214  0000 0000 
00006218  0000      
0000621A  0000 0000 8764          dc.b      0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0000621E  0000 0000 
00006222  0000 0000 
00006226  0000 0000 
0000622A  0000 0000 
0000622E  0000      
00006230  0000 0000 8765          dc.b      0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
00006234  0000 0000 
00006238  0000 0000 
0000623C  0000 00   
                    8766   @itoa_1:
00006240  2D32 3134 8767          dc.b      45,50,49,52,55,52,56,51,54,52,56,0
00006244  3734 3833 
00006248  3634 3800 
                    8768          section   bss
0000624C            8769                   align
          0000 624C 8770   DataEnd         equ     *                       this label will equate to the address of the last byte of global variable in it
                    8771   
                    8772   *********************************************************************************************************
                    8773   * Section for Uninitialised Data held in ROM as constants
                    8774   *********************************************************************************************************
                    8775   
08030000            8776                   org     RamVectorTable          Ram based vector table must be stored here otherwise InstallException Handler will not work
          0000 0114 8777   DataLength      equ     DataEnd-DataStart       length of data needed to copy to Ram on bootup
                    8778   
                    8779   
08030000            8780   bss             org       bss
                    8781   
                    8782   *********************************************************************************************************
                    8783   * Build a ram based vector table for interrupts so we can install our own Exception Handlers in C code at run time
                    8784   * install the exception handler using the C function InstallExceptionHandler()
                    8785   *********************************************************************************************************
                    8786   
                    8787   
                    8788   
08030000            8789   VInitialSP       ds.l    1      dummy as we can't really install a handler for this
08030004            8790   VInitialPC       ds.l    1      dummy as we can't reallin install a handler for this
08030008            8791   VBusError        ds.l    1      storage for address of Bus Error Handler
0803000C            8792   VAddressError    ds.l    1      storage for address of Address Error Handler
08030010            8793   VIllegalInstr    ds.l    1      storage for address of Illegal Instruction handler
08030014            8794   VDividebyZero    ds.l    1      storage for address of divide by zero handler
08030018            8795   VCheck           ds.l    1      ditto
0803001C            8796   VTrapV           ds.l    1      ditto
08030020            8797   VPrivilege       ds.l    1      ditto
08030024            8798   VTrace           ds.l    1
08030028            8799   VLine1010emul    ds.l    1
0803002C            8800   VLine1111emul    ds.l    1
08030030            8801   VUnassigned1     ds.l    1
08030034            8802   VUnassigned2     ds.l    1
08030038            8803   VUnassigned3     ds.l    1
0803003C            8804   VUninit_IRQ      ds.l    1
08030040            8805   VUnassigned4     ds.l    1
08030044            8806   VUnassigned5     ds.l    1
08030048            8807   VUnassigned6     ds.l    1
0803004C            8808   VUnassigned7     ds.l    1
08030050            8809   VUnassigned8     ds.l    1
08030054            8810   VUnassigned9     ds.l    1
08030058            8811   VUnassigned10    ds.l    1
0803005C            8812   VUnassigned11    ds.l    1
08030060            8813   VSpuriousIRQ     ds.l    1
                    8814   
                    8815   * Interrupt handlers Vector 25-31
08030064            8816   VL1IRQ           ds.l    1       storage for 4 byte address of IRQ handler in your C program - install the handler using the C function InstallExceptionHandler()
08030068            8817   VL2IRQ           ds.l    1       storage for 4 byte address of IRQ handler in your C program - install the handler using the C function InstallExceptionHandler()
0803006C            8818   VL3IRQ           ds.l    1       storage for 4 byte address of IRQ handler in your C program - install the handler using the C function InstallExceptionHandler()
08030070            8819   VL4IRQ           ds.l    1       storage for 4 byte address of IRQ handler in your C program - install the handler using the C function InstallExceptionHandler()
08030074            8820   VL5IRQ           ds.l    1       storage for 4 byte address of IRQ handler in your C program - install the handler using the C function InstallExceptionHandler()
08030078            8821   VL6IRQ           ds.l    1       storage for 4 byte address of IRQ handler in your C program - install the handler using the C function InstallExceptionHandler()
0803007C            8822   VL7IRQ           ds.l    1       storage for 4 byte address of IRQ handler in your C program - install the handler using the C function InstallExceptionHandler()
                    8823   
                    8824   * Trap Handler vectors 32-47
08030080            8825   VTrap0           ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
08030084            8826   VTrap1           ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
08030088            8827   VTrap2           ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
0803008C            8828   VTrap3           ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
08030090            8829   VTrap4           ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
08030094            8830   VTrap5           ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
08030098            8831   VTrap6           ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
0803009C            8832   VTrap7           ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
080300A0            8833   VTrap8           ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
080300A4            8834   VTrap9           ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
080300A8            8835   VTrap10          ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
080300AC            8836   VTrap11          ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
080300B0            8837   VTrap12          ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
080300B4            8838   VTrap13          ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
080300B8            8839   VTrap14          ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
080300BC            8840   VTrap15          ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
                    8841   
                    8842   * the remaining exceptions are unassigned in the 68000 so no need to allocate storage for them here
                    8843   
                    8844   ***********************************************************************************************************
                    8845   * Other Variables
                    8846   ***********************************************************************************************************
                    8847   *__DebugA5       ds.l    1
                    8848   *__UserA5        ds.l    1
                    8849   
                    8850   ***********************************************************************************************************
080300C0            8851   __ungetbuf:     ds.l    1       ; ungetbuffer for stdio functions
080300C4            8852   __allocp:       ds.l    0       ; start of allocation units
080300C4            8853   __heap:         ds.l    0       ; pointers for malloc functions
                    8854   
                    8855   *__himem:       ds.l    himem            ; highest memory location + 1
                    8856   *__stklen:      ds.l    stklen           ; default stack size
                    8857   
                    8858   *********************************************************************************************************
                    8859   * Section for Heap
                    8860   *********************************************************************************************************
                    8861   
                    8862   _i:
080300C4            8863          ds.b      4
                    8864   _x:
080300C8            8865          ds.b      4
                    8866   _y:
080300CC            8867          ds.b      4
                    8868   _z:
080300D0            8869          ds.b      4
                    8870   _PortA_Count:
080300D4            8871          ds.b      4
                    8872   _Trace:
080300D8            8873          ds.b      4
                    8874   _GoFlag:
080300DC            8875          ds.b      4
                    8876   _Echo:
080300E0            8877          ds.b      4
                    8878   _d0:
080300E4            8879          ds.b      4
                    8880   _d1:
080300E8            8881          ds.b      4
                    8882   _d2:
080300EC            8883          ds.b      4
                    8884   _d3:
080300F0            8885          ds.b      4
                    8886   _d4:
080300F4            8887          ds.b      4
                    8888   _d5:
080300F8            8889          ds.b      4
                    8890   _d6:
080300FC            8891          ds.b      4
                    8892   _d7:
08030100            8893          ds.b      4
                    8894   _a0:
08030104            8895          ds.b      4
                    8896   _a1:
08030108            8897          ds.b      4
                    8898   _a2:
0803010C            8899          ds.b      4
                    8900   _a3:
08030110            8901          ds.b      4
                    8902   _a4:
08030114            8903          ds.b      4
                    8904   _a5:
08030118            8905          ds.b      4
                    8906   _a6:
0803011C            8907          ds.b      4
                    8908   _PC:
08030120            8909          ds.b      4
                    8910   _SSP:
08030124            8911          ds.b      4
                    8912   _USP:
08030128            8913          ds.b      4
                    8914   _SR:
0803012C            8915          ds.b      2
                    8916   _BreakPointAddress:
0803012E            8917          ds.b      32
                    8918   _BreakPointInstruction:
0803014E            8919          ds.b      16
                    8920   _BreakPointSetOrCleared:
0803015E            8921          ds.b      32
                    8922   _InstructionSize:
0803017E            8923          ds.b      4
                    8924   _WatchPointAddress:
08030182            8925          ds.b      32
                    8926   _WatchPointSetOrCleared:
080301A2            8927          ds.b      32
                    8928   _WatchPointString:
080301C2            8929          ds.b      800
                    8930   _TempString:
080304E2            8931          ds.b      100
                    8932   @vsscanf_buf:
08030546            8933          ds.b      80
                    8934          section   heap
08030596            8935                   align
          0803 0596 8936   bssEnd          equ *                   end of storage space for unitialised variables
                    8937   *                                       we have to copy all initialised variable from rom to here at startup
          0803 0596 8938   heap   equ       *
08030596            8939                    align
          0000 0000

Assembly errors: 0
