680x0 MACRO ASSEMBLER   Version 5.00   (c) 1992-2005 Peter J. Fondse

Date: 09 Feb 2023      Time: 16:50:21          Source: C:\CPEN412\GITHUB_STEUP\M68KV6.0 - 800BY480\PROGRAMS\DEBUGMONITORCODE\M68KDEBUGMONITOR.SRC

                       1          section   code
                       2   ; for initial stack use $08040000 if your system uses SRAM for main memory (top of 256kbyte SRAM space)
                       3   ; When your system is converted to use DRAM for main memory set this constant to $0C000000 (top of 64MByte DRAM space
                       4   
                       5   ;StackPointerVal     equ $08040000      when using sram
          0C00 0000    6   StackPointerVal     equ $0C000000      when using dram
                       7   
                       8   ; define RamVectorTable as $0803000 if your system uses SRAM for main memory
                       9   ; When your system is converted to use DRAM for main memory define RamVectorTable constant as $0B000000 (top of 64MByte DRAM space)
                      10   
                      11   ;RamVectorTable      equ $08030000      when using sram
          0B00 0000   12   RamVectorTable      equ $0B000000      when using dram
                      13   
                      14   
                      15   
                      16   ; CSTART.ASM  -  C startup-code for Debug Monitor
00000000              17                   align
                      18   
00000000              19                   org $00000000          ;start of rom based vector table, 68k hard wired to expect this at $0
                      20   
00000000  0C00 0000   21   InitialSP       dc.l StackPointerVal   ;initial supervisor state stack pointer(stack decrements first before being used)
00000004  0000 0400   22   InitialPC       dc.l start             ;address of 1st instruction of program after a reset
00000008  0000 0802   23   BusError        dc.l E_BErro           ;bus error - stop program
0000000C  0000 0814   24   AddressError    dc.l E_AErro           ;address error - stop program
00000010  0000 0826   25   IllegalInstr    dc.l E_IInst           ;illegal instruction - stop program
00000014  0000 0838   26   DividebyZero    dc.l E_DZero           ;divide by zero error - stop program
00000018  0000 084A   27   Check           dc.l E_Check           ;Check instruction - stop program
0000001C  0000 085C   28   TrapV           dc.l E_Trapv           ;Trapv instruction - stop program
00000020  0000 086E   29   Privilege       dc.l E_Priv            ;privilige violation - stop program
00000024  0000 0880   30   Trace           dc.l E_Trace           ;stop on trace
00000028  0000 0892   31   Line1010emul    dc.l E_1010            ;1010 instructions stop
0000002C  0000 08A4   32   Line1111emul    dc.l E_1111            ;1111 instructions stop
00000030  0000 08B6   33   Unassigned1     dc.l E_Unnas1           ;unassigned vector
00000034  0000 08B6   34   Unassigned2     dc.l E_Unnas2           ;unassigned vector
00000038  0000 08B6   35   Unassigned3     dc.l E_Unnas3           ;unassigned vector
0000003C  0000 08B6   36   Uninit_IRQ      dc.l E_UnitI           ;uninitialised interrupt
00000040  0000 08B6   37   Unassigned4     dc.l E_Unnas4           ;unassigned vector
00000044  0000 08B6   38   Unassigned5     dc.l E_Unnas5           ;unassigned vector
00000048  0000 08B6   39   Unassigned6     dc.l E_Unnas6           ;unassigned vector
0000004C  0000 08B6   40   Unassigned7     dc.l E_Unnas7           ;unassigned vector
00000050  0000 08B6   41   Unassigned8     dc.l E_Unnas8           ;unassigned vector
00000054  0000 08B6   42   Unassigned9     dc.l E_Unnas9           ;unassigned vector
00000058  0000 08B6   43   Unassigned10    dc.l E_Unnas10           ;unassigned vector
0000005C  0000 08B6   44   Unassigned11    dc.l E_Unnas11           ;unassigned vector
00000060  0000 08B6   45   SpuriousIRQ     dc.l E_Spuri           ;stop on spurious irq
                      46   *
                      47   *
00000064  0000 049A   48   Level1IRQ       dc.l Level1RamISR
00000068  0000 04AC   49   Level2IRQ       dc.l Level2RamISR
0000006C  0000 04BE   50   Level3IRQ       dc.l Level3RamISR
00000070  0000 04D0   51   Level4IRQ       dc.l Level4RamISR
00000074  0000 04E2   52   Level5IRQ       dc.l Level5RamISR
00000078  0000 05EC   53   Level6IRQ       dc.l Level6RamISR
0000007C  0000 05FE   54   Level7IRQ       dc.l Level7RamISR
                      55   *
                      56   *
00000080  0000 0610   57   Trap0           dc.l Trap0RamISR        ; User installed trap handler
00000084  0000 0622   58   Trap1           dc.l Trap1RamISR        ; User installed trap handler
00000088  0000 0634   59   Trap2           dc.l Trap2RamISR        ; User installed trap handler
0000008C  0000 0646   60   Trap3           dc.l Trap3RamISR        ; User installed trap handler
00000090  0000 0658   61   Trap4           dc.l Trap4RamISR        ; User installed trap handler
00000094  0000 066A   62   Trap5           dc.l Trap5RamISR        ; User installed trap handler
00000098  0000 067C   63   Trap6           dc.l Trap6RamISR        ; User installed trap handler
0000009C  0000 068E   64   Trap7           dc.l Trap7RamISR        ; User installed trap handler
000000A0  0000 06A0   65   Trap8           dc.l Trap8RamISR        ; User installed trap handler
000000A4  0000 06B2   66   Trap9           dc.l Trap9RamISR        ; User installed trap handler
000000A8  0000 06C4   67   Trap10          dc.l Trap10RamISR       ; User installed trap handler
000000AC  0000 06D6   68   Trap11          dc.l Trap11RamISR       ; User installed trap handler
000000B0  0000 06E8   69   Trap12          dc.l Trap12RamISR       ; User installed trap handler
000000B4  0000 06FA   70   Trap13          dc.l Trap13RamISR       ; User installed trap handler
000000B8  0000 070C   71   Trap14          dc.l Trap14RamISR       ; User installed trap handler
000000BC  0000 07FC   72   Trap15          dc.l Trap15RamISR       ; User installed trap handler
                      73   
                      74   *
                      75   * Other vectors 64-255 are users vectors for autovectored IO device (not implemented in TG68)
                      76   *
                      77   
00000400              78                   org       $00000400
                      79   
00000400  46FC 2700   80   start:          move.w     #$2700,SR             set interrupts to disable until later
                      81   
                      82   *************************************************************************************
                      83   ** add some 68000 instruction to read and write to memory, IO etc. This doesn't do anything
                      84   ** important, it just creates read and write bus cycles to specific addresses which
                      85   ** help with debugging hardware in Quartus simulations
                      86   **************************************************************************************
                      87   
                      88                   ; perform some dummy read/write of 32 bit values to memory to see waveforms during a simulation
                      89   
00000404  23FC 1122   90                   move.l     #$11223344,$08060000 write 32 bits, to memory
00000408  3344 0806 
0000040C  0000      
0000040E  2039 0806   91                   move.l     $08060000,d0         read 32 bits back
00000412  0000      
00000414  13FC 0000   92                   move.b     #$00,$00400000         write to the output ports
00000418  0040 0000 
0000041C  13FC 0000   93                   move.b     #$00,$00400002         write to the output ports
00000420  0040 0002 
00000424  13FC 0000   94                   move.b     #$00,$00400004         write to the output ports
00000428  0040 0004 
0000042C  13FC 0000   95                   move.b     #$00,$00400006         write to the output ports
00000430  0040 0006 
00000434  13FC 0000   96                   move.b     #$00,$00400008         write to the output ports
00000438  0040 0008 
0000043C  13FC 0000   97                   move.b     #$00,$00400010         write to the hex display ports
00000440  0040 0010 
00000444  13FC 0000   98                   move.b     #$00,$00400012         write to the hex display ports
00000448  0040 0012 
0000044C  13FC 0000   99                   move.b     #$00,$00400014         write to the hex display ports
00000450  0040 0014 
00000454  13FC 0000  100                   move.b     #0,$00400020         write to the LCD
00000458  0040 0020 
0000045C  13FC 0000  101                   move.b     #0,$00400022         write to the LCD
00000460  0040 0022 
00000464  13FC 0000  102                   move.b     #0,$00400030         write to the Timer1 Data
00000468  0040 0030 
0000046C  13FC 0000  103                   move.b     #0,$00400032         write to the Timer1 Control
00000470  0040 0032 
                     104   
                     105                   ; some important initialisation do not modify
00000474  23FC FFFF  106                   move.l    #-1,__ungetbuf  ; unget-buffer for keyboard input
00000478  FFFF 0B00 
0000047C  00C0      
0000047E  23FC 0000  107                   move.l    #0,__allocp     ; pointer to allocated memory for malloc-function
00000482  0000 0B00 
00000486  00C4      
00000488  23FC 0B00  108                   move.l    #heap,__heap    ; pointer to free memory
0000048C  0596 0B00 
00000490  00C4      
                     109   
                     110   
00000492  4EB9 0000  111   mainloop        jsr       _main
00000496  2EAA      
00000498  60F8       112                   bra       mainloop
                     113   
                     114   *********************************************************************************************************
                     115   * Code to call Ram Based Interrupt handler and other exeception handler code
                     116   *********************************************************************************************************
0000049A  48E7 FFFE  117   Level1RamISR    movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
0000049E  2079 0B00  118                   move.l    VL1IRQ,a0               get ram based address into a0
000004A2  0064      
000004A4  4E90       119                   jsr       0(a0)                   jump to the subroutine that is the interrupt handler, using ram based address
000004A6  4CDF 7FFF  120                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
000004AA  4E73       121                   rte
000004AC  48E7 FFFE  122   Level2RamISR    movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
000004B0  2079 0B00  123                   move.l    VL2IRQ,a0               get ram based address into a0
000004B4  0068      
000004B6  4E90       124                   jsr       0(a0)                   jump to the subroutine that is the interrupt handler, using ram based address
000004B8  4CDF 7FFF  125                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
000004BC  4E73       126                   rte
000004BE  48E7 FFFE  127   Level3RamISR    movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
000004C2  2079 0B00  128                   move.l    VL3IRQ,a0               get ram based address into a0
000004C6  006C      
000004C8  4E90       129                   jsr       0(a0)                   jump to the subroutine that is the interrupt handler, using ram based address
000004CA  4CDF 7FFF  130                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
000004CE  4E73       131                   rte
000004D0  48E7 FFFE  132   Level4RamISR    movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
000004D4  2079 0B00  133                   move.l    VL4IRQ,a0               get ram based address into a0
000004D8  0070      
000004DA  4E90       134                   jsr       0(a0)                   jump to the subroutine that is the interrupt handler, using ram based address
000004DC  4CDF 7FFF  135                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
000004E0  4E73       136                   rte
                     137   
                     138   * Trace trap Handler
                     139   
                     140   Level5RamISR
                     141   *
                     142   **         Copy 68000 registers from debug monitor Variables,
                     143   *
                     144   *
000004E2  23FC 0000  145                   move.l    #1,_Trace              switch on Trace Mode
000004E6  0001 0B00 
000004EA  00D8      
000004EC  13FC 0000  146                   move.b    #$0,$0040000A          turn off a trace exception so we don't when generate a trace when disassembling instruction in the register dump (disassembling causes access to use program)
000004F0  0040 000A 
000004F4  33DF 0B00  147                   move.w    (sp)+,_SR              get at the users status register pointed to by stack pointer and copy
000004F8  012C      
000004FA  23DF 0B00  148                   move.l    (sp)+,_PC              get at the users program counter and copy
000004FE  0120      
                     149   *
00000500  23CF 0B00  150                   move.l    SP,_SSP                copy system stack pointer to debug monitor variable
00000504  0124      
00000506  23C0 0B00  151                   move.l    d0,_d0
0000050A  00E4      
0000050C  23C1 0B00  152                   move.l    d1,_d1
00000510  00E8      
00000512  23C2 0B00  153                   move.l    d2,_d2
00000516  00EC      
00000518  23C3 0B00  154                   move.l    d3,_d3
0000051C  00F0      
0000051E  23C4 0B00  155                   move.l    d4,_d4
00000522  00F4      
00000524  23C5 0B00  156                   move.l    d5,_d5
00000528  00F8      
0000052A  23C6 0B00  157                   move.l    d6,_d6
0000052E  00FC      
00000530  23C7 0B00  158                   move.l    d7,_d7
00000534  0100      
                     159   *
00000536  23C8 0B00  160                   move.l    a0,_a0
0000053A  0104      
0000053C  23C9 0B00  161                   move.l    a1,_a1
00000540  0108      
00000542  23CA 0B00  162                   move.l    a2,_a2
00000546  010C      
00000548  23CB 0B00  163                   move.l    a3,_a3
0000054C  0110      
0000054E  23CC 0B00  164                   move.l    a4,_a4
00000552  0114      
00000554  23CD 0B00  165                   move.l    a5,_a5
00000558  0118      
0000055A  23CE 0B00  166                   move.l    a6,_a6
0000055E  011C      
00000560  4E68       167                   move.l    usp,a0
00000562  23C8 0B00  168                   move.l    a0,_USP
00000566  0128      
                     169   *
00000568  2079 0B00  170                   move.l    VL5IRQ,a0              get ram based address into a0, trace exception for next instruction will be generated in Menu SPACE command
0000056C  0074      
0000056E  4E90       171                   jsr       0(a0)                  jump to the subroutine that is the trap handler, using ram based address
                     172   
                     173   ** After trace, reload 68000 registers with new values before continuing
                     174   
00000570  2039 0B00  175                   move.l   _d0,d0
00000574  00E4      
00000576  2239 0B00  176                   move.l   _d1,d1
0000057A  00E8      
0000057C  2439 0B00  177                   move.l   _d2,d2
00000580  00EC      
00000582  2639 0B00  178                   move.l   _d3,d3
00000586  00F0      
00000588  2839 0B00  179                   move.l   _d4,d4
0000058C  00F4      
0000058E  2A39 0B00  180                   move.l   _d5,d5
00000592  00F8      
00000594  2C39 0B00  181                   move.l   _d6,d6
00000598  00FC      
0000059A  2E39 0B00  182                   move.l   _d7,d7
0000059E  0100      
                     183   
000005A0  2079 0B00  184                   move.l   _USP,a0
000005A4  0128      
000005A6  4E60       185                   move.l   a0,USP                     load user stack pointer
000005A8  2079 0B00  186                   move.l   _a0,a0
000005AC  0104      
000005AE  2279 0B00  187                   move.l   _a1,a1
000005B2  0108      
000005B4  2479 0B00  188                   move.l   _a2,a2
000005B8  010C      
000005BA  2679 0B00  189                   move.l   _a3,a3
000005BE  0110      
000005C0  2879 0B00  190                   move.l   _a4,a4
000005C4  0114      
000005C6  2A79 0B00  191                   move.l   _a5,a5
000005CA  0118      
000005CC  2C79 0B00  192                   move.l   _a6,a6
000005D0  011C      
                     193   
000005D2  2E79 0B00  194                   move.l   _SSP,sp
000005D6  0124      
000005D8  2F39 0B00  195                   move.l   _PC,-(sp)
000005DC  0120      
000005DE  3F39 0B00  196                   move.w   _SR,-(sp)
000005E2  012C      
000005E4  11F8 0074  197                   move.b    $00000074,$0	          read trace exception vector after accessing disassembly to reset the trace request causes by disassembling program above
000005E8  0000      
000005EA  4E73       198                   rte
                     199   
                     200   * address trap handler
                     201   
000005EC  48E7 FFFE  202   Level6RamISR    movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
000005F0  2079 0B00  203                   move.l    VL6IRQ,a0               get ram based address into a0
000005F4  0078      
000005F6  4E90       204                   jsr       0(a0)                   jump to the subroutine that is the interrupt handler, using ram based address
000005F8  4CDF 7FFF  205                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
000005FC  4E73       206                   rte
                     207   
000005FE  48E7 FFFE  208   Level7RamISR    movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000602  2079 0B00  209                   move.l    VL7IRQ,a0               get ram based address into a0
00000606  007C      
00000608  4E90       210                   jsr       0(a0)                   jump to the subroutine that is the interrupt handler, using ram based address
0000060A  4CDF 7FFF  211                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
0000060E  4E73       212                   rte
                     213   
                     214   
                     215   ********************************************************************************************************
                     216   * Ram based Trap handler and other exeception handler code
                     217   *********************************************************************************************************
                     218   
00000610  48E7 FFFE  219   Trap0RamISR     movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000614  2079 0B00  220                   move.l    VTrap0,a0                get ram based address into a0
00000618  0080      
0000061A  4E90       221                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
0000061C  4CDF 7FFF  222                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
00000620  4E73       223                   rte
                     224   
00000622  48E7 FFFE  225   Trap1RamISR     movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000626  2079 0B00  226                   move.l    VTrap1,a0                get ram based address into a0
0000062A  0084      
0000062C  4E90       227                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
0000062E  4CDF 7FFF  228                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
00000632  4E73       229                   rte
                     230   
00000634  48E7 FFFE  231   Trap2RamISR     movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000638  2079 0B00  232                   move.l    VTrap2,a0                get ram based address into a0
0000063C  0088      
0000063E  4E90       233                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
00000640  4CDF 7FFF  234                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
00000644  4E73       235                   rte
                     236   
00000646  48E7 FFFE  237   Trap3RamISR     movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
0000064A  2079 0B00  238                   move.l    VTrap3,a0                get ram based address into a0
0000064E  008C      
00000650  4E90       239                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
00000652  4CDF 7FFF  240                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
00000656  4E73       241                   rte
                     242   
00000658  48E7 FFFE  243   Trap4RamISR     movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
0000065C  2079 0B00  244                   move.l    VTrap4,a0                get ram based address into a0
00000660  0090      
00000662  4E90       245                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
00000664  4CDF 7FFF  246                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
00000668  4E73       247                   rte
                     248   
0000066A  48E7 FFFE  249   Trap5RamISR     movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
0000066E  2079 0B00  250                   move.l    VTrap5,a0                get ram based address into a0
00000672  0094      
00000674  4E90       251                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
00000676  4CDF 7FFF  252                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
0000067A  4E73       253                   rte
                     254   
0000067C  48E7 FFFE  255   Trap6RamISR     movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000680  2079 0B00  256                   move.l    VTrap6,a0                get ram based address into a0
00000684  0098      
00000686  4E90       257                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
00000688  4CDF 7FFF  258                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
0000068C  4E73       259                   rte
                     260   
0000068E  48E7 FFFE  261   Trap7RamISR     movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000692  2079 0B00  262                   move.l    VTrap7,a0                get ram based address into a0
00000696  009C      
00000698  4E90       263                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
0000069A  4CDF 7FFF  264                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
0000069E  4E73       265                   rte
                     266   
000006A0  48E7 FFFE  267   Trap8RamISR     movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
000006A4  2079 0B00  268                   move.l    VTrap8,a0                get ram based address into a0
000006A8  00A0      
000006AA  4E90       269                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
000006AC  4CDF 7FFF  270                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
000006B0  4E73       271                   rte
                     272   
000006B2  48E7 FFFE  273   Trap9RamISR     movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
000006B6  2079 0B00  274                   move.l    VTrap9,a0                get ram based address into a0
000006BA  00A4      
000006BC  4E90       275                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
000006BE  4CDF 7FFF  276                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
000006C2  4E73       277                   rte
                     278   
000006C4  48E7 FFFE  279   Trap10RamISR    movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
000006C8  2079 0B00  280                   move.l    VTrap10,a0                get ram based address into a0
000006CC  00A8      
000006CE  4E90       281                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
000006D0  4CDF 7FFF  282                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
000006D4  4E73       283                   rte
                     284   
000006D6  48E7 FFFE  285   Trap11RamISR    movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
000006DA  2079 0B00  286                   move.l    VTrap11,a0                get ram based address into a0
000006DE  00AC      
000006E0  4E90       287                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
000006E2  4CDF 7FFF  288                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
000006E6  4E73       289                   rte
                     290   
000006E8  48E7 FFFE  291   Trap12RamISR    movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
000006EC  2079 0B00  292                   move.l    VTrap12,a0                get ram based address into a0
000006F0  00B0      
000006F2  4E90       293                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
000006F4  4CDF 7FFF  294                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
000006F8  4E73       295                   rte
                     296   
000006FA  48E7 FFFE  297   Trap13RamISR    movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
000006FE  2079 0B00  298                   move.l    VTrap13,a0                get ram based address into a0
00000702  00B4      
00000704  4E90       299                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
00000706  4CDF 7FFF  300                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
0000070A  4E73       301                   rte
                     302   
                     303   Trap14RamISR    ;Break Point Handler
                     304   *
                     305   **         Copy 68000 registers from debug monitor Variables
                     306   *
0000070C  23FC 0000  307                   move.l    #1,_Trace      switch on Trace Mode
00000710  0001 0B00 
00000714  00D8      
00000716  33DF 0B00  308                   move.w    (sp)+,_SR       get at the users status register pointed to by stack pointer and copy
0000071A  012C      
0000071C  23DF 0B00  309                   move.l    (sp)+,_PC      get at the users program counter and copy
00000720  0120      
                     310   *
00000722  23C0 0B00  311                   move.l    d0,_d0
00000726  00E4      
00000728  23C1 0B00  312                   move.l    d1,_d1
0000072C  00E8      
0000072E  23C2 0B00  313                   move.l    d2,_d2
00000732  00EC      
00000734  23C3 0B00  314                   move.l    d3,_d3
00000738  00F0      
0000073A  23C4 0B00  315                   move.l    d4,_d4
0000073E  00F4      
00000740  23C5 0B00  316                   move.l    d5,_d5
00000744  00F8      
00000746  23C6 0B00  317                   move.l    d6,_d6
0000074A  00FC      
0000074C  23C7 0B00  318                   move.l    d7,_d7
00000750  0100      
                     319   *
00000752  23C8 0B00  320                   move.l    a0,_a0
00000756  0104      
00000758  23C9 0B00  321                   move.l    a1,_a1
0000075C  0108      
0000075E  23CA 0B00  322                   move.l    a2,_a2
00000762  010C      
00000764  23CB 0B00  323                   move.l    a3,_a3
00000768  0110      
0000076A  23CC 0B00  324                   move.l    a4,_a4
0000076E  0114      
00000770  23CD 0B00  325                   move.l    a5,_a5
00000774  0118      
00000776  23CE 0B00  326                   move.l    a6,_a6
0000077A  011C      
0000077C  4E68       327                   move.l    USP,a0
0000077E  23C8 0B00  328                   move.l    a0,_USP
00000782  0128      
                     329   *
00000784  2079 0B00  330                   move.l    VTrap14,a0             get ram based address into a0
00000788  00B8      
0000078A  4E90       331                   jsr       0(a0)                  jump to the subroutine that is the trap handler, using ram based address
                     332   
                     333   ** After breakpoint reload 68000 registers with new values before continuing
                     334   
                     335   *                move.b    #$ff,$0040000A     generate a trace exception for the next instruction
0000078C  2039 0B00  336                   move.l   _d0,d0
00000790  00E4      
00000792  2239 0B00  337                   move.l   _d1,d1
00000796  00E8      
00000798  2439 0B00  338                   move.l   _d2,d2
0000079C  00EC      
0000079E  2639 0B00  339                   move.l   _d3,d3
000007A2  00F0      
000007A4  2839 0B00  340                   move.l   _d4,d4
000007A8  00F4      
000007AA  2A39 0B00  341                   move.l   _d5,d5
000007AE  00F8      
000007B0  2C39 0B00  342                   move.l   _d6,d6
000007B4  00FC      
000007B6  2E39 0B00  343                   move.l   _d7,d7
000007BA  0100      
                     344   
000007BC  2079 0B00  345                   move.l   _USP,a0
000007C0  0128      
000007C2  4E60       346                   move.l   a0,USP        load user stack pointer A7
000007C4  2079 0B00  347                   move.l   _a0,a0
000007C8  0104      
000007CA  2279 0B00  348                   move.l   _a1,a1
000007CE  0108      
000007D0  2479 0B00  349                   move.l   _a2,a2
000007D4  010C      
000007D6  2679 0B00  350                   move.l   _a3,a3
000007DA  0110      
000007DC  2879 0B00  351                   move.l   _a4,a4
000007E0  0114      
000007E2  2A79 0B00  352                   move.l   _a5,a5
000007E6  0118      
000007E8  2C79 0B00  353                   move.l   _a6,a6
000007EC  011C      
                     354   
000007EE  2F39 0B00  355                   move.l   _PC,-(sp)
000007F2  0120      
000007F4  3F39 0B00  356                   move.w   _SR,-(sp)
000007F8  012C      
000007FA  4E73       357                   rte
                     358   
000007FC  4EF9 0000  359   Trap15RamISR    jmp     _CallDebugMonitor
00000800  1F86      
                     360   *                movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
                     361   *                move.l    VTrap15,a0                get ram based address into a0
                     362   *                jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
                     363   *                movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
                     364   *                rte
                     365   
                     366   *********************************************************************************************************
                     367   *Default exception handler for everything without a specific handler
                     368   *********************************************************************************************************
                     369   
                     370   *
                     371   **              Jump here for each unhandled exception
                     372   **              If you need to, MAKE SURE YOU SAVE ALL IMPORTANT REGISTERS AND RESTORE THEM BEFORE RETURNING (IF APPROPRIATE)
                     373   *
                     374   
00000802  48E7 FFFE  375   E_BErro         movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000806  2079 0B00  376                   move.l    VBusError,a0            get ram based address into a0
0000080A  0008      
0000080C  4E90       377                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
0000080E  4CDF 7FFF  378                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
00000812  4E73       379                   rte
00000814  48E7 FFFE  380   E_AErro         movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000818  2079 0B00  381                   move.l    VAddressError,a0        get ram based address into a0
0000081C  000C      
0000081E  4E90       382                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
00000820  4CDF 7FFF  383                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
00000824  4E73       384                   rte
00000826  48E7 FFFE  385   E_IInst         movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
0000082A  2079 0B00  386                   move.l    VIllegalInstr,a0        get ram based address into a0
0000082E  0010      
00000830  4E90       387                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
00000832  4CDF 7FFF  388                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
00000836  4E73       389                   rte
00000838  48E7 FFFE  390   E_DZero         movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
0000083C  2079 0B00  391                   move.l    VDividebyZero,a0        get ram based address into a0
00000840  0014      
00000842  4E90       392                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
00000844  4CDF 7FFF  393                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
00000848  4E73       394                   rte
0000084A  48E7 FFFE  395   E_Check         movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
0000084E  2079 0B00  396                   move.l    VCheck,a0               get ram based address into a0
00000852  0018      
00000854  4E90       397                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
00000856  4CDF 7FFF  398                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
0000085A  4E73       399                   rte
0000085C  48E7 FFFE  400   E_Trapv         movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000860  2079 0B00  401                   move.l    VTrapV,a0               get ram based address into a0
00000864  001C      
00000866  4E90       402                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
00000868  4CDF 7FFF  403                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
0000086C  4E73       404                   rte
0000086E  48E7 FFFE  405   E_Priv          movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000872  2079 0B00  406                   move.l    VPrivilege,a0           get ram based address into a0
00000876  0020      
00000878  4E90       407                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
0000087A  4CDF 7FFF  408                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
0000087E  4E73       409                   rte
00000880  48E7 FFFE  410   E_Trace         movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000884  2079 0B00  411                   move.l    VTrace,a0               get ram based address into a0
00000888  0024      
0000088A  4E90       412                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
0000088C  4CDF 7FFF  413                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
00000890  4E73       414                   rte
00000892  48E7 FFFE  415   E_1010          movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000896  2079 0B00  416                   move.l    VLine1010emul,a0        get ram based address into a0
0000089A  0028      
0000089C  4E90       417                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
0000089E  4CDF 7FFF  418                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
000008A2  4E73       419                   rte
000008A4  48E7 FFFE  420   E_1111          movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
000008A8  2079 0B00  421                   move.l    VLine1111emul,a0        get ram based address into a0
000008AC  002C      
000008AE  4E90       422                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
000008B0  4CDF 7FFF  423                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
000008B4  4E73       424                   rte
                     425   E_Unnas1
                     426   E_Unnas2
                     427   E_Unnas3
                     428   E_UnitI
                     429   E_Unnas4
                     430   E_Unnas5
                     431   E_Unnas6
                     432   E_Unnas7
                     433   E_Unnas8
                     434   E_Unnas9
                     435   E_Unnas10
                     436   E_Unnas11
                     437   E_Spuri
000008B6  60FE       438   _stop            bra _stop                         stop
                     439   ***************************************************************************************************
                     440   * Go() function in debug monitor
                     441   ***************************************************************************************************
                     442   _go
000008B8  2E79 0B00  443                   move.l   _SSP,a7        load system stack pointer (remember we are in supervisor mode when running this so a7 is the System stack pointer)
000008BC  0124      
000008BE  2F39 0B00  444                   move.l   _PC,-(sp)      copy debug monitor PC variable to the stack
000008C2  0120      
000008C4  3F39 0B00  445                   move.w   _SR,-(sp)      copy debug monitor status reg to the stack
000008C8  012C      
                     446   
000008CA  1038 0078  447                   move.b   $00000078,d0  remove any spurious address exception arising after power on
000008CE  2039 0B00  448                   move.l   _d0,d0
000008D2  00E4      
000008D4  2239 0B00  449                   move.l   _d1,d1
000008D8  00E8      
000008DA  2439 0B00  450                   move.l   _d2,d2
000008DE  00EC      
000008E0  2639 0B00  451                   move.l   _d3,d3
000008E4  00F0      
000008E6  2839 0B00  452                   move.l   _d4,d4
000008EA  00F4      
000008EC  2A39 0B00  453                   move.l   _d5,d5
000008F0  00F8      
000008F2  2C39 0B00  454                   move.l   _d6,d6
000008F6  00FC      
000008F8  2E39 0B00  455                   move.l   _d7,d7
000008FC  0100      
                     456   
000008FE  2079 0B00  457                   move.l   _USP,a0
00000902  0128      
00000904  4E60       458                   move.l   a0,USP        load user stack pointer (remember we are in supervisor mode when running this, so a7 is the System stack pointer)
00000906  2079 0B00  459                   move.l   _a0,a0
0000090A  0104      
0000090C  2279 0B00  460                   move.l   _a1,a1
00000910  0108      
00000912  2479 0B00  461                   move.l   _a2,a2
00000916  010C      
00000918  2679 0B00  462                   move.l   _a3,a3
0000091C  0110      
0000091E  2879 0B00  463                   move.l   _a4,a4
00000922  0114      
00000924  2A79 0B00  464                   move.l   _a5,a5
00000928  0118      
0000092A  2C79 0B00  465                   move.l   _a6,a6
0000092E  011C      
00000930  4E73       466                   rte                    load the status reg and PC from the stack and commence running
                     467                                          *used to be rte but this didn't load the status byte
                     468   
                     469   ; C:\CPEN412\GITHUB_STEUP\M68KV6.0 - 800BY480\PROGRAMS\DEBUGMONITORCODE\M68KDEBUG (NO DISASSEMBLER).C - Compiled by CC68K  Version 5.00 (c) 1991-2005  Peter J. Fondse
                     470   ; #include "DebugMonitor.h"
                     471   ; // use 08030000 for a system running from sram or 0B000000 for system running from dram
                     472   ; //#define StartOfExceptionVectorTable 0x08030000
                     473   ; #define StartOfExceptionVectorTable 0x0B000000
                     474   ; // use 0C000000 for dram or hex 08040000 for sram
                     475   ; //#define TopOfStack 0x08040000
                     476   ; #define TopOfStack 0x0C000000
                     477   ; /* DO NOT INITIALISE GLOBAL VARIABLES - DO IT in MAIN() */
                     478   ; unsigned int i, x, y, z, PortA_Count;
                     479   ; int     Trace, GoFlag, Echo;                       // used in tracing/single stepping
                     480   ; // 68000 register dump and preintialise value (these can be changed by the user program when it is running, e.g. stack pointer, registers etc
                     481   ; unsigned int d0,d1,d2,d3,d4,d5,d6,d7 ;
                     482   ; unsigned int a0,a1,a2,a3,a4,a5,a6 ;
                     483   ; unsigned int PC, SSP, USP ;
                     484   ; unsigned short int SR;
                     485   ; // Breakpoint variables
                     486   ; unsigned int BreakPointAddress[8];                      //array of 8 breakpoint addresses
                     487   ; unsigned short int BreakPointInstruction[8] ;           // to hold the instruction opcode at the breakpoint
                     488   ; unsigned int BreakPointSetOrCleared[8] ;
                     489   ; unsigned int InstructionSize ;
                     490   ; // watchpoint variables
                     491   ; unsigned int WatchPointAddress[8];                      //array of 8 breakpoint addresses
                     492   ; unsigned int WatchPointSetOrCleared[8] ;
                     493   ; char WatchPointString[8][100] ;
                     494   ; char    TempString[100] ;
                     495   ; /************************************************************************************
                     496   ; *Subroutine to give the 68000 something useless to do to waste 1 mSec
                     497   ; ************************************************************************************/
                     498   ; void Wait1ms(void)
                     499   ; {
                     500   _Wait1ms:
00000932  2F02       501          move.l    D2,-(A7)
                     502   ; long int  i ;
                     503   ; for(i = 0; i < 1000; i ++)
00000934  4282       504          clr.l     D2
                     505   Wait1ms_1:
00000936  0C82 0000  506          cmp.l     #1000,D2
0000093A  03E8      
0000093C  6C04       507          bge.s     Wait1ms_3
0000093E  5282       508          addq.l    #1,D2
00000940  60F4       509          bra       Wait1ms_1
                     510   Wait1ms_3:
00000942  241F       511          move.l    (A7)+,D2
00000944  4E75       512          rts
                     513   ; ;
                     514   ; }
                     515   ; /************************************************************************************
                     516   ; *Subroutine to give the 68000 something useless to do to waste 3 mSec
                     517   ; **************************************************************************************/
                     518   ; void Wait3ms(void)
                     519   ; {
                     520   _Wait3ms:
00000946  2F02       521          move.l    D2,-(A7)
                     522   ; int i ;
                     523   ; for(i = 0; i < 3; i++)
00000948  4282       524          clr.l     D2
                     525   Wait3ms_1:
0000094A  0C82 0000  526          cmp.l     #3,D2
0000094E  0003      
00000950  6C08       527          bge.s     Wait3ms_3
                     528   ; Wait1ms() ;
00000952  4EB8 0932  529          jsr       _Wait1ms
00000956  5282       530          addq.l    #1,D2
00000958  60F0       531          bra       Wait3ms_1
                     532   Wait3ms_3:
0000095A  241F       533          move.l    (A7)+,D2
0000095C  4E75       534          rts
                     535   ; }
                     536   ; /*********************************************************************************************
                     537   ; *Subroutine to initialise the display by writing some commands to the LCD internal registers
                     538   ; *********************************************************************************************/
                     539   ; void Init_LCD(void)
                     540   ; {
                     541   _Init_LCD:
                     542   ; LCDcommand = (char)(0x0c) ;
0000095E  13FC 000C  543          move.b    #12,4194336
00000962  0040 0020 
                     544   ; Wait3ms() ;
00000966  4EB8 0946  545          jsr       _Wait3ms
                     546   ; LCDcommand = (char)(0x38) ;
0000096A  13FC 0038  547          move.b    #56,4194336
0000096E  0040 0020 
                     548   ; Wait3ms() ;
00000972  4EB8 0946  549          jsr       _Wait3ms
00000976  4E75       550          rts
                     551   ; }
                     552   ; /******************************************************************************
                     553   ; *subroutine to output a single character held in d1 to the LCD display
                     554   ; *it is assumed the character is an ASCII code and it will be displayed at the
                     555   ; *current cursor position
                     556   ; *******************************************************************************/
                     557   ; void Outchar(int c)
                     558   ; {
                     559   _Outchar:
00000978  4E56 0000  560          link      A6,#0
                     561   ; LCDdata = (char)(c);
0000097C  202E 0008  562          move.l    8(A6),D0
00000980  13C0 0040  563          move.b    D0,4194338
00000984  0022      
                     564   ; Wait1ms() ;
00000986  4EB8 0932  565          jsr       _Wait1ms
0000098A  4E5E       566          unlk      A6
0000098C  4E75       567          rts
                     568   ; }
                     569   ; /**********************************************************************************
                     570   ; *subroutine to output a message at the current cursor position of the LCD display
                     571   ; ************************************************************************************/
                     572   ; void OutMess(char *theMessage)
                     573   ; {
                     574   _OutMess:
0000098E  4E56 FFFC  575          link      A6,#-4
                     576   ; char c ;
                     577   ; while((c = *theMessage++) != (char)(0))
                     578   OutMess_1:
00000992  206E 0008  579          move.l    8(A6),A0
00000996  52AE 0008  580          addq.l    #1,8(A6)
0000099A  1D50 FFFF  581          move.b    (A0),-1(A6)
0000099E  1010       582          move.b    (A0),D0
000009A0  6712       583          beq.s     OutMess_3
                     584   ; Outchar(c) ;
000009A2  122E FFFF  585          move.b    -1(A6),D1
000009A6  4881       586          ext.w     D1
000009A8  48C1       587          ext.l     D1
000009AA  2F01       588          move.l    D1,-(A7)
000009AC  4EB8 0978  589          jsr       _Outchar
000009B0  584F       590          addq.w    #4,A7
000009B2  60DE       591          bra       OutMess_1
                     592   OutMess_3:
000009B4  4E5E       593          unlk      A6
000009B6  4E75       594          rts
                     595   ; }
                     596   ; /******************************************************************************
                     597   ; *subroutine to clear the line by issuing 24 space characters
                     598   ; *******************************************************************************/
                     599   ; void Clearln(void)
                     600   ; {
                     601   _Clearln:
000009B8  2F02       602          move.l    D2,-(A7)
                     603   ; unsigned char i ;
                     604   ; for(i = 0; i < 24; i ++)
000009BA  4202       605          clr.b     D2
                     606   Clearln_1:
000009BC  0C02 0018  607          cmp.b     #24,D2
000009C0  640E       608          bhs.s     Clearln_3
                     609   ; Outchar(' ') ;  /* write a space char to the LCD display */
000009C2  4878 0020  610          pea       32
000009C6  4EB8 0978  611          jsr       _Outchar
000009CA  584F       612          addq.w    #4,A7
000009CC  5202       613          addq.b    #1,D2
000009CE  60EC       614          bra       Clearln_1
                     615   Clearln_3:
000009D0  241F       616          move.l    (A7)+,D2
000009D2  4E75       617          rts
                     618   ; }
                     619   ; /******************************************************************************
                     620   ; *subroutine to move the cursor to the start of line 1 and clear that line
                     621   ; *******************************************************************************/
                     622   ; void Oline0(char *theMessage)
                     623   ; {
                     624   _Oline0:
000009D4  4E56 0000  625          link      A6,#0
                     626   ; LCDcommand = (char)(0x80) ;
000009D8  13FC 0080  627          move.b    #128,4194336
000009DC  0040 0020 
                     628   ; Wait3ms();
000009E0  4EB8 0946  629          jsr       _Wait3ms
                     630   ; Clearln() ;
000009E4  4EB8 09B8  631          jsr       _Clearln
                     632   ; LCDcommand = (char)(0x80) ;
000009E8  13FC 0080  633          move.b    #128,4194336
000009EC  0040 0020 
                     634   ; Wait3ms() ;
000009F0  4EB8 0946  635          jsr       _Wait3ms
                     636   ; OutMess(theMessage) ;
000009F4  2F2E 0008  637          move.l    8(A6),-(A7)
000009F8  4EB8 098E  638          jsr       _OutMess
000009FC  584F       639          addq.w    #4,A7
000009FE  4E5E       640          unlk      A6
00000A00  4E75       641          rts
                     642   ; }
                     643   ; /******************************************************************************
                     644   ; *subroutine to move the cursor to the start of line 2 and clear that line
                     645   ; *******************************************************************************/
                     646   ; void Oline1(char *theMessage)
                     647   ; {
                     648   _Oline1:
00000A02  4E56 0000  649          link      A6,#0
                     650   ; LCDcommand = (char)(0xC0) ;
00000A06  13FC 00C0  651          move.b    #192,4194336
00000A0A  0040 0020 
                     652   ; Wait3ms();
00000A0E  4EB8 0946  653          jsr       _Wait3ms
                     654   ; Clearln() ;
00000A12  4EB8 09B8  655          jsr       _Clearln
                     656   ; LCDcommand = (char)(0xC0) ;
00000A16  13FC 00C0  657          move.b    #192,4194336
00000A1A  0040 0020 
                     658   ; Wait3ms() ;
00000A1E  4EB8 0946  659          jsr       _Wait3ms
                     660   ; OutMess(theMessage) ;
00000A22  2F2E 0008  661          move.l    8(A6),-(A7)
00000A26  4EB8 098E  662          jsr       _OutMess
00000A2A  584F       663          addq.w    #4,A7
00000A2C  4E5E       664          unlk      A6
00000A2E  4E75       665          rts
                     666   ; }
                     667   ; void InstallExceptionHandler( void (*function_ptr)(), int level)
                     668   ; {
                     669   _InstallExceptionHandler:
00000A30  4E56 FFFC  670          link      A6,#-4
                     671   ; volatile long int *RamVectorAddress = (volatile long int *)(StartOfExceptionVectorTable) ;   // pointer to the Ram based interrupt vector table created in Cstart in debug monitor
00000A34  2D7C 0B00  672          move.l    #184549376,-4(A6)
00000A38  0000 FFFC 
                     673   ; RamVectorAddress[level] = (long int *)(function_ptr);
00000A3C  206E FFFC  674          move.l    -4(A6),A0
00000A40  202E 000C  675          move.l    12(A6),D0
00000A44  E588       676          lsl.l     #2,D0
00000A46  21AE 0008  677          move.l    8(A6),0(A0,D0.L)
00000A4A  0800      
00000A4C  4E5E       678          unlk      A6
00000A4E  4E75       679          rts
                     680   ; }
                     681   ; void TestLEDS(void)
                     682   ; {
                     683   _TestLEDS:
00000A50  48E7 3000  684          movem.l   D2/D3,-(A7)
                     685   ; int delay ;
                     686   ; unsigned char count = 0 ;
00000A54  4202       687          clr.b     D2
                     688   ; while(1)    {
                     689   TestLEDS_1:
                     690   ; PortA = PortB = PortC = PortD = HEX_A = HEX_B = HEX_C = HEX_D = ((count << 4) + (count & 0x0f)) ;
00000A56  1002       691          move.b    D2,D0
00000A58  E908       692          lsl.b     #4,D0
00000A5A  1202       693          move.b    D2,D1
00000A5C  C23C 000F  694          and.b     #15,D1
00000A60  D001       695          add.b     D1,D0
00000A62  13C0 0040  696          move.b    D0,4194326
00000A66  0016      
00000A68  13C0 0040  697          move.b    D0,4194324
00000A6C  0014      
00000A6E  13C0 0040  698          move.b    D0,4194322
00000A72  0012      
00000A74  13C0 0040  699          move.b    D0,4194320
00000A78  0010      
00000A7A  13C0 0040  700          move.b    D0,4194310
00000A7E  0006      
00000A80  13C0 0040  701          move.b    D0,4194308
00000A84  0004      
00000A86  13C0 0040  702          move.b    D0,4194306
00000A8A  0002      
00000A8C  13C0 0040  703          move.b    D0,4194304
00000A90  0000      
                     704   ; for(delay = 0; delay < 200000; delay ++)
00000A92  4283       705          clr.l     D3
                     706   TestLEDS_4:
00000A94  0C83 0003  707          cmp.l     #200000,D3
00000A98  0D40      
00000A9A  6C04       708          bge.s     TestLEDS_6
00000A9C  5283       709          addq.l    #1,D3
00000A9E  60F4       710          bra       TestLEDS_4
                     711   TestLEDS_6:
                     712   ; ;
                     713   ; count ++;
00000AA0  5202       714          addq.b    #1,D2
00000AA2  60B2       715          bra       TestLEDS_1
                     716   ; }
                     717   ; }
                     718   ; void SwitchTest(void)
                     719   ; {
                     720   _SwitchTest:
00000AA4  48E7 3020  721          movem.l   D2/D3/A2,-(A7)
00000AA8  45F9 0000  722          lea       _printf.L,A2
00000AAC  3BF6      
                     723   ; int i, switches = 0 ;
00000AAE  4283       724          clr.l     D3
                     725   ; printf("\r\n") ;
00000AB0  4879 0000  726          pea       @m68kde~1_1.L
00000AB4  45CC      
00000AB6  4E92       727          jsr       (A2)
00000AB8  584F       728          addq.w    #4,A7
                     729   ; while(1)    {
                     730   SwitchTest_1:
                     731   ; switches = (PortB << 8) | (PortA) ;
00000ABA  1039 0040  732          move.b    4194306,D0
00000ABE  0002      
00000AC0  C0BC 0000  733          and.l     #255,D0
00000AC4  00FF      
00000AC6  E188       734          lsl.l     #8,D0
00000AC8  1239 0040  735          move.b    4194304,D1
00000ACC  0000      
00000ACE  C2BC 0000  736          and.l     #255,D1
00000AD2  00FF      
00000AD4  8081       737          or.l      D1,D0
00000AD6  2600       738          move.l    D0,D3
                     739   ; printf("\rSwitches SW[7-0] = ") ;
00000AD8  4879 0000  740          pea       @m68kde~1_2.L
00000ADC  45D0      
00000ADE  4E92       741          jsr       (A2)
00000AE0  584F       742          addq.w    #4,A7
                     743   ; for( i = (int)(0x00000080); i > 0; i = i >> 1)  {
00000AE2  243C 0000  744          move.l    #128,D2
00000AE6  0080      
                     745   SwitchTest_4:
00000AE8  0C82 0000  746          cmp.l     #0,D2
00000AEC  0000      
00000AEE  6F20       747          ble.s     SwitchTest_6
                     748   ; if((switches & i) == 0)
00000AF0  2003       749          move.l    D3,D0
00000AF2  C082       750          and.l     D2,D0
00000AF4  660C       751          bne.s     SwitchTest_7
                     752   ; printf("0") ;
00000AF6  4879 0000  753          pea       @m68kde~1_3.L
00000AFA  45E6      
00000AFC  4E92       754          jsr       (A2)
00000AFE  584F       755          addq.w    #4,A7
00000B00  600A       756          bra.s     SwitchTest_8
                     757   SwitchTest_7:
                     758   ; else
                     759   ; printf("1") ;
00000B02  4879 0000  760          pea       @m68kde~1_4.L
00000B06  45E8      
00000B08  4E92       761          jsr       (A2)
00000B0A  584F       762          addq.w    #4,A7
                     763   SwitchTest_8:
00000B0C  E282       764          asr.l     #1,D2
00000B0E  60D8       765          bra       SwitchTest_4
                     766   SwitchTest_6:
00000B10  60A8       767          bra       SwitchTest_1
                     768   ; }
                     769   ; }
                     770   ; }
                     771   ; /*********************************************************************************************
                     772   ; *Subroutine to initialise the RS232 Port by writing some commands to the internal registers
                     773   ; *********************************************************************************************/
                     774   ; void Init_RS232(void)
                     775   ; {
                     776   _Init_RS232:
                     777   ; RS232_Control = (char)(0x15) ; //  %00010101    divide by 16 clock, set rts low, 8 bits no parity, 1 stop bit transmitter interrupt disabled
00000B12  13FC 0015  778          move.b    #21,4194368
00000B16  0040 0040 
                     779   ; RS232_Baud = (char)(0x1) ;      // program baud rate generator 000 = 230k, 001 = 115k, 010 = 57.6k, 011 = 38.4k, 100 = 19.2, all others = 9600
00000B1A  13FC 0001  780          move.b    #1,4194372
00000B1E  0040 0044 
00000B22  4E75       781          rts
                     782   ; }
                     783   ; int kbhit(void)
                     784   ; {
                     785   _kbhit:
                     786   ; if(((char)(RS232_Status) & (char)(0x01)) == (char)(0x01))    // wait for Rx bit in status register to be '1'
00000B24  1039 0040  787          move.b    4194368,D0
00000B28  0040      
00000B2A  C03C 0001  788          and.b     #1,D0
00000B2E  0C00 0001  789          cmp.b     #1,D0
00000B32  6604       790          bne.s     kbhit_1
                     791   ; return 1 ;
00000B34  7001       792          moveq     #1,D0
00000B36  6002       793          bra.s     kbhit_3
                     794   kbhit_1:
                     795   ; else
                     796   ; return 0 ;
00000B38  4280       797          clr.l     D0
                     798   kbhit_3:
00000B3A  4E75       799          rts
                     800   ; }
                     801   ; /*********************************************************************************************************
                     802   ; **  Subroutine to provide a low level output function to 6850 ACIA
                     803   ; **  This routine provides the basic functionality to output a single character to the serial Port
                     804   ; **  to allow the board to communicate with HyperTerminal Program
                     805   ; **
                     806   ; **  NOTE you do not call this function directly, instead you call the normal putchar() function
                     807   ; **  which in turn calls _putch() below). Other functions like puts(), printf() call putchar() so will
                     808   ; **  call _putch() also
                     809   ; *********************************************************************************************************/
                     810   ; int _putch( int c)
                     811   ; {
                     812   __putch:
00000B3C  4E56 0000  813          link      A6,#0
                     814   ; while(((char)(RS232_Status) & (char)(0x02)) != (char)(0x02))    // wait for Tx bit in status register or 6850 serial comms chip to be '1'
                     815   _putch_1:
00000B40  1039 0040  816          move.b    4194368,D0
00000B44  0040      
00000B46  C03C 0002  817          and.b     #2,D0
00000B4A  0C00 0002  818          cmp.b     #2,D0
00000B4E  6702       819          beq.s     _putch_3
00000B50  60EE       820          bra       _putch_1
                     821   _putch_3:
                     822   ; ;
                     823   ; (char)(RS232_TxData) = ((char)(c) & (char)(0x7f));                      // write to the data register to output the character (mask off bit 8 to keep it 7 bit ASCII)
00000B52  202E 0008  824          move.l    8(A6),D0
00000B56  C03C 007F  825          and.b     #127,D0
00000B5A  13C0 0040  826          move.b    D0,4194370
00000B5E  0042      
                     827   ; return c ;                                              // putchar() expects the character to be returned
00000B60  202E 0008  828          move.l    8(A6),D0
00000B64  4E5E       829          unlk      A6
00000B66  4E75       830          rts
                     831   ; }
                     832   ; /*********************************************************************************************************
                     833   ; **  Subroutine to provide a low level input function to 6850 ACIA
                     834   ; **  This routine provides the basic functionality to input a single character from the serial Port
                     835   ; **  to allow the board to communicate with HyperTerminal Program Keyboard (your PC)
                     836   ; **
                     837   ; **  NOTE you do not call this function directly, instead you call the normal _getch() function
                     838   ; **  which in turn calls _getch() below). Other functions like gets(), scanf() call _getch() so will
                     839   ; **  call _getch() also
                     840   ; *********************************************************************************************************/
                     841   ; int _getch( void )
                     842   ; {
                     843   __getch:
00000B68  2F02       844          move.l    D2,-(A7)
                     845   ; int c ;
                     846   ; while(((char)(RS232_Status) & (char)(0x01)) != (char)(0x01))    // wait for Rx bit in 6850 serial comms chip status register to be '1'
                     847   _getch_1:
00000B6A  1039 0040  848          move.b    4194368,D0
00000B6E  0040      
00000B70  C03C 0001  849          and.b     #1,D0
00000B74  0C00 0001  850          cmp.b     #1,D0
00000B78  6702       851          beq.s     _getch_3
00000B7A  60EE       852          bra       _getch_1
                     853   _getch_3:
                     854   ; ;
                     855   ; c = (RS232_RxData & (char)(0x7f));                   // read received character, mask off top bit and return as 7 bit ASCII character
00000B7C  1039 0040  856          move.b    4194370,D0
00000B80  0042      
00000B82  C0BC 0000  857          and.l     #255,D0
00000B86  00FF      
00000B88  C0BC 0000  858          and.l     #127,D0
00000B8C  007F      
00000B8E  2400       859          move.l    D0,D2
                     860   ; // shall we echo the character? Echo is set to TRUE at reset, but for speed we don't want to echo when downloading code with the 'L' debugger command
                     861   ; if(Echo)
00000B90  4AB9 0B00  862          tst.l     _Echo.L
00000B94  00E0      
00000B96  6708       863          beq.s     _getch_4
                     864   ; _putch(c);
00000B98  2F02       865          move.l    D2,-(A7)
00000B9A  4EB8 0B3C  866          jsr       __putch
00000B9E  584F       867          addq.w    #4,A7
                     868   _getch_4:
                     869   ; return c ;
00000BA0  2002       870          move.l    D2,D0
00000BA2  241F       871          move.l    (A7)+,D2
00000BA4  4E75       872          rts
                     873   ; }
                     874   ; // flush the input stream for any unread characters
                     875   ; void FlushKeyboard(void)
                     876   ; {
                     877   _FlushKeyboard:
00000BA6  4E56 FFFC  878          link      A6,#-4
                     879   ; char c ;
                     880   ; while(1)    {
                     881   FlushKeyboard_1:
                     882   ; if(((char)(RS232_Status) & (char)(0x01)) == (char)(0x01))    // if Rx bit in status register is '1'
00000BAA  1039 0040  883          move.b    4194368,D0
00000BAE  0040      
00000BB0  C03C 0001  884          and.b     #1,D0
00000BB4  0C00 0001  885          cmp.b     #1,D0
00000BB8  6610       886          bne.s     FlushKeyboard_4
                     887   ; c = ((char)(RS232_RxData) & (char)(0x7f)) ;
00000BBA  1039 0040  888          move.b    4194370,D0
00000BBE  0042      
00000BC0  C03C 007F  889          and.b     #127,D0
00000BC4  1D40 FFFF  890          move.b    D0,-1(A6)
00000BC8  6002       891          bra.s     FlushKeyboard_5
                     892   FlushKeyboard_4:
                     893   ; else
                     894   ; return ;
00000BCA  6002       895          bra.s     FlushKeyboard_6
                     896   FlushKeyboard_5:
00000BCC  60DC       897          bra       FlushKeyboard_1
                     898   FlushKeyboard_6:
00000BCE  4E5E       899          unlk      A6
00000BD0  4E75       900          rts
                     901   ; }
                     902   ; }
                     903   ; // converts hex char to 4 bit binary equiv in range 0000-1111 (0-F)
                     904   ; // char assumed to be a valid hex char 0-9, a-f, A-F
                     905   ; char xtod(int c)
                     906   ; {
                     907   _xtod:
00000BD2  4E56 0000  908          link      A6,#0
00000BD6  2F02       909          move.l    D2,-(A7)
00000BD8  242E 0008  910          move.l    8(A6),D2
                     911   ; if ((char)(c) <= (char)('9'))
00000BDC  0C02 0039  912          cmp.b     #57,D2
00000BE0  6E08       913          bgt.s     xtod_1
                     914   ; return c - (char)(0x30);    // 0 - 9 = 0x30 - 0x39 so convert to number by sutracting 0x30
00000BE2  1002       915          move.b    D2,D0
00000BE4  0400 0030  916          sub.b     #48,D0
00000BE8  6014       917          bra.s     xtod_3
                     918   xtod_1:
                     919   ; else if((char)(c) > (char)('F'))    // assume lower case
00000BEA  0C02 0046  920          cmp.b     #70,D2
00000BEE  6F08       921          ble.s     xtod_4
                     922   ; return c - (char)(0x57);    // a-f = 0x61-66 so needs to be converted to 0x0A - 0x0F so subtract 0x57
00000BF0  1002       923          move.b    D2,D0
00000BF2  0400 0057  924          sub.b     #87,D0
00000BF6  6006       925          bra.s     xtod_3
                     926   xtod_4:
                     927   ; else
                     928   ; return c - (char)(0x37);    // A-F = 0x41-46 so needs to be converted to 0x0A - 0x0F so subtract 0x37
00000BF8  1002       929          move.b    D2,D0
00000BFA  0400 0037  930          sub.b     #55,D0
                     931   xtod_3:
00000BFE  241F       932          move.l    (A7)+,D2
00000C00  4E5E       933          unlk      A6
00000C02  4E75       934          rts
                     935   ; }
                     936   ; int Get2HexDigits(char *CheckSumPtr)
                     937   ; {
                     938   _Get2HexDigits:
00000C04  4E56 0000  939          link      A6,#0
00000C08  2F02       940          move.l    D2,-(A7)
                     941   ; register int i = (xtod(_getch()) << 4) | (xtod(_getch()));
00000C0A  2F00       942          move.l    D0,-(A7)
00000C0C  4EB8 0B68  943          jsr       __getch
00000C10  2200       944          move.l    D0,D1
00000C12  201F       945          move.l    (A7)+,D0
00000C14  2F01       946          move.l    D1,-(A7)
00000C16  4EB8 0BD2  947          jsr       _xtod
00000C1A  584F       948          addq.w    #4,A7
00000C1C  C0BC 0000  949          and.l     #255,D0
00000C20  00FF      
00000C22  E980       950          asl.l     #4,D0
00000C24  2F00       951          move.l    D0,-(A7)
00000C26  2F01       952          move.l    D1,-(A7)
00000C28  4EB8 0B68  953          jsr       __getch
00000C2C  221F       954          move.l    (A7)+,D1
00000C2E  2F00       955          move.l    D0,-(A7)
00000C30  4EB8 0BD2  956          jsr       _xtod
00000C34  584F       957          addq.w    #4,A7
00000C36  2200       958          move.l    D0,D1
00000C38  201F       959          move.l    (A7)+,D0
00000C3A  C2BC 0000  960          and.l     #255,D1
00000C3E  00FF      
00000C40  8081       961          or.l      D1,D0
00000C42  2400       962          move.l    D0,D2
                     963   ; if(CheckSumPtr)
00000C44  4AAE 0008  964          tst.l     8(A6)
00000C48  6706       965          beq.s     Get2HexDigits_1
                     966   ; *CheckSumPtr += i ;
00000C4A  206E 0008  967          move.l    8(A6),A0
00000C4E  D510       968          add.b     D2,(A0)
                     969   Get2HexDigits_1:
                     970   ; return i ;
00000C50  2002       971          move.l    D2,D0
00000C52  241F       972          move.l    (A7)+,D2
00000C54  4E5E       973          unlk      A6
00000C56  4E75       974          rts
                     975   ; }
                     976   ; int Get4HexDigits(char *CheckSumPtr)
                     977   ; {
                     978   _Get4HexDigits:
00000C58  4E56 0000  979          link      A6,#0
                     980   ; return (Get2HexDigits(CheckSumPtr) << 8) | (Get2HexDigits(CheckSumPtr));
00000C5C  2F2E 0008  981          move.l    8(A6),-(A7)
00000C60  4EB8 0C04  982          jsr       _Get2HexDigits
00000C64  584F       983          addq.w    #4,A7
00000C66  E180       984          asl.l     #8,D0
00000C68  2F00       985          move.l    D0,-(A7)
00000C6A  2F2E 0008  986          move.l    8(A6),-(A7)
00000C6E  4EB8 0C04  987          jsr       _Get2HexDigits
00000C72  584F       988          addq.w    #4,A7
00000C74  2200       989          move.l    D0,D1
00000C76  201F       990          move.l    (A7)+,D0
00000C78  8081       991          or.l      D1,D0
00000C7A  4E5E       992          unlk      A6
00000C7C  4E75       993          rts
                     994   ; }
                     995   ; int Get6HexDigits(char *CheckSumPtr)
                     996   ; {
                     997   _Get6HexDigits:
00000C7E  4E56 0000  998          link      A6,#0
                     999   ; return (Get4HexDigits(CheckSumPtr) << 8) | (Get2HexDigits(CheckSumPtr));
00000C82  2F2E 0008 1000          move.l    8(A6),-(A7)
00000C86  4EB8 0C58 1001          jsr       _Get4HexDigits
00000C8A  584F      1002          addq.w    #4,A7
00000C8C  E180      1003          asl.l     #8,D0
00000C8E  2F00      1004          move.l    D0,-(A7)
00000C90  2F2E 0008 1005          move.l    8(A6),-(A7)
00000C94  4EB8 0C04 1006          jsr       _Get2HexDigits
00000C98  584F      1007          addq.w    #4,A7
00000C9A  2200      1008          move.l    D0,D1
00000C9C  201F      1009          move.l    (A7)+,D0
00000C9E  8081      1010          or.l      D1,D0
00000CA0  4E5E      1011          unlk      A6
00000CA2  4E75      1012          rts
                    1013   ; }
                    1014   ; int Get8HexDigits(char *CheckSumPtr)
                    1015   ; {
                    1016   _Get8HexDigits:
00000CA4  4E56 0000 1017          link      A6,#0
                    1018   ; return (Get4HexDigits(CheckSumPtr) << 16) | (Get4HexDigits(CheckSumPtr));
00000CA8  2F2E 0008 1019          move.l    8(A6),-(A7)
00000CAC  4EB8 0C58 1020          jsr       _Get4HexDigits
00000CB0  584F      1021          addq.w    #4,A7
00000CB2  E180      1022          asl.l     #8,D0
00000CB4  E180      1023          asl.l     #8,D0
00000CB6  2F00      1024          move.l    D0,-(A7)
00000CB8  2F2E 0008 1025          move.l    8(A6),-(A7)
00000CBC  4EB8 0C58 1026          jsr       _Get4HexDigits
00000CC0  584F      1027          addq.w    #4,A7
00000CC2  2200      1028          move.l    D0,D1
00000CC4  201F      1029          move.l    (A7)+,D0
00000CC6  8081      1030          or.l      D1,D0
00000CC8  4E5E      1031          unlk      A6
00000CCA  4E75      1032          rts
                    1033   ; }
                    1034   ; void DumpMemory(void)   // simple dump memory fn
                    1035   ; {
                    1036   _DumpMemory:
00000CCC  48E7 3C30 1037          movem.l   D2/D3/D4/D5/A2/A3,-(A7)
00000CD0  45F9 0000 1038          lea       _printf.L,A2
00000CD4  3BF6      
00000CD6  47F9 0000 1039          lea       _putch.L,A3
00000CDA  3252      
                    1040   ; int i, j ;
                    1041   ; unsigned char *RamPtr,c ; // pointer to where the program is download (assumed)
                    1042   ; printf("\r\nDump Memory Block: <ESC> to Abort, <SPACE> to Continue") ;
00000CDC  4879 0000 1043          pea       @m68kde~1_5.L
00000CE0  45EA      
00000CE2  4E92      1044          jsr       (A2)
00000CE4  584F      1045          addq.w    #4,A7
                    1046   ; printf("\r\nEnter Start Address: ") ;
00000CE6  4879 0000 1047          pea       @m68kde~1_6.L
00000CEA  4624      
00000CEC  4E92      1048          jsr       (A2)
00000CEE  584F      1049          addq.w    #4,A7
                    1050   ; RamPtr = Get8HexDigits(0);
00000CF0  42A7      1051          clr.l     -(A7)
00000CF2  4EB8 0CA4 1052          jsr       _Get8HexDigits
00000CF6  584F      1053          addq.w    #4,A7
00000CF8  2600      1054          move.l    D0,D3
                    1055   ; while(1)    {
                    1056   DumpMemory_1:
                    1057   ; for(i = 0; i < 16; i ++)    {
00000CFA  4285      1058          clr.l     D5
                    1059   DumpMemory_4:
00000CFC  0C85 0000 1060          cmp.l     #16,D5
00000D00  0010      
00000D02  6C00 0096 1061          bge       DumpMemory_6
                    1062   ; printf("\r\n%08x ", RamPtr) ;
00000D06  2F03      1063          move.l    D3,-(A7)
00000D08  4879 0000 1064          pea       @m68kde~1_7.L
00000D0C  463C      
00000D0E  4E92      1065          jsr       (A2)
00000D10  504F      1066          addq.w    #8,A7
                    1067   ; for(j=0; j < 16; j ++)  {
00000D12  4282      1068          clr.l     D2
                    1069   DumpMemory_7:
00000D14  0C82 0000 1070          cmp.l     #16,D2
00000D18  0010      
00000D1A  6C24      1071          bge.s     DumpMemory_9
                    1072   ; printf("%02X",RamPtr[j]) ;
00000D1C  2043      1073          move.l    D3,A0
00000D1E  1230 2800 1074          move.b    0(A0,D2.L),D1
00000D22  C2BC 0000 1075          and.l     #255,D1
00000D26  00FF      
00000D28  2F01      1076          move.l    D1,-(A7)
00000D2A  4879 0000 1077          pea       @m68kde~1_8.L
00000D2E  4644      
00000D30  4E92      1078          jsr       (A2)
00000D32  504F      1079          addq.w    #8,A7
                    1080   ; putchar(' ') ;
00000D34  4878 0020 1081          pea       32
00000D38  4E93      1082          jsr       (A3)
00000D3A  584F      1083          addq.w    #4,A7
00000D3C  5282      1084          addq.l    #1,D2
00000D3E  60D4      1085          bra       DumpMemory_7
                    1086   DumpMemory_9:
                    1087   ; }
                    1088   ; // now display the data as ASCII at the end
                    1089   ; printf("  ") ;
00000D40  4879 0000 1090          pea       @m68kde~1_9.L
00000D44  464A      
00000D46  4E92      1091          jsr       (A2)
00000D48  584F      1092          addq.w    #4,A7
                    1093   ; for(j = 0; j < 16; j++) {
00000D4A  4282      1094          clr.l     D2
                    1095   DumpMemory_10:
00000D4C  0C82 0000 1096          cmp.l     #16,D2
00000D50  0010      
00000D52  6C00 003A 1097          bge       DumpMemory_12
                    1098   ; c = ((char)(RamPtr[j]) & 0x7f) ;
00000D56  2043      1099          move.l    D3,A0
00000D58  1030 2800 1100          move.b    0(A0,D2.L),D0
00000D5C  C03C 007F 1101          and.b     #127,D0
00000D60  1800      1102          move.b    D0,D4
                    1103   ; if((c > (char)(0x7f)) || (c < ' '))
00000D62  0C04 007F 1104          cmp.b     #127,D4
00000D66  6206      1105          bhi.s     DumpMemory_15
00000D68  0C04 0020 1106          cmp.b     #32,D4
00000D6C  640A      1107          bhs.s     DumpMemory_13
                    1108   DumpMemory_15:
                    1109   ; putchar('.') ;
00000D6E  4878 002E 1110          pea       46
00000D72  4E93      1111          jsr       (A3)
00000D74  584F      1112          addq.w    #4,A7
00000D76  6012      1113          bra.s     DumpMemory_14
                    1114   DumpMemory_13:
                    1115   ; else
                    1116   ; putchar(RamPtr[j]) ;
00000D78  2043      1117          move.l    D3,A0
00000D7A  1230 2800 1118          move.b    0(A0,D2.L),D1
00000D7E  C2BC 0000 1119          and.l     #255,D1
00000D82  00FF      
00000D84  2F01      1120          move.l    D1,-(A7)
00000D86  4E93      1121          jsr       (A3)
00000D88  584F      1122          addq.w    #4,A7
                    1123   DumpMemory_14:
00000D8A  5282      1124          addq.l    #1,D2
00000D8C  60BE      1125          bra       DumpMemory_10
                    1126   DumpMemory_12:
                    1127   ; }
                    1128   ; RamPtr = RamPtr + 16 ;
00000D8E  0683 0000 1129          add.l     #16,D3
00000D92  0010      
00000D94  5285      1130          addq.l    #1,D5
00000D96  6000 FF64 1131          bra       DumpMemory_4
                    1132   DumpMemory_6:
                    1133   ; }
                    1134   ; printf("\r\n") ;
00000D9A  4879 0000 1135          pea       @m68kde~1_1.L
00000D9E  45CC      
00000DA0  4E92      1136          jsr       (A2)
00000DA2  584F      1137          addq.w    #4,A7
                    1138   ; c = _getch() ;
00000DA4  4EB8 0B68 1139          jsr       __getch
00000DA8  1800      1140          move.b    D0,D4
                    1141   ; if(c == 0x1b)          // break on ESC
00000DAA  0C04 001B 1142          cmp.b     #27,D4
00000DAE  6602      1143          bne.s     DumpMemory_16
                    1144   ; break ;
00000DB0  6004      1145          bra.s     DumpMemory_3
                    1146   DumpMemory_16:
00000DB2  6000 FF46 1147          bra       DumpMemory_1
                    1148   DumpMemory_3:
00000DB6  4CDF 0C3C 1149          movem.l   (A7)+,D2/D3/D4/D5/A2/A3
00000DBA  4E75      1150          rts
                    1151   ; }
                    1152   ; }
                    1153   ; void FillMemory()
                    1154   ; {
                    1155   _FillMemory:
00000DBC  48E7 3820 1156          movem.l   D2/D3/D4/A2,-(A7)
00000DC0  45F9 0000 1157          lea       _printf.L,A2
00000DC4  3BF6      
                    1158   ; char *StartRamPtr, *EndRamPtr ;
                    1159   ; unsigned char FillData ;
                    1160   ; printf("\r\nFill Memory Block") ;
00000DC6  4879 0000 1161          pea       @m68kde~1_10.L
00000DCA  464E      
00000DCC  4E92      1162          jsr       (A2)
00000DCE  584F      1163          addq.w    #4,A7
                    1164   ; printf("\r\nEnter Start Address: ") ;
00000DD0  4879 0000 1165          pea       @m68kde~1_6.L
00000DD4  4624      
00000DD6  4E92      1166          jsr       (A2)
00000DD8  584F      1167          addq.w    #4,A7
                    1168   ; StartRamPtr = Get8HexDigits(0) ;
00000DDA  42A7      1169          clr.l     -(A7)
00000DDC  4EB8 0CA4 1170          jsr       _Get8HexDigits
00000DE0  584F      1171          addq.w    #4,A7
00000DE2  2400      1172          move.l    D0,D2
                    1173   ; printf("\r\nEnter End Address: ") ;
00000DE4  4879 0000 1174          pea       @m68kde~1_11.L
00000DE8  4662      
00000DEA  4E92      1175          jsr       (A2)
00000DEC  584F      1176          addq.w    #4,A7
                    1177   ; EndRamPtr = Get8HexDigits(0) ;
00000DEE  42A7      1178          clr.l     -(A7)
00000DF0  4EB8 0CA4 1179          jsr       _Get8HexDigits
00000DF4  584F      1180          addq.w    #4,A7
00000DF6  2800      1181          move.l    D0,D4
                    1182   ; printf("\r\nEnter Fill Data: ") ;
00000DF8  4879 0000 1183          pea       @m68kde~1_12.L
00000DFC  4678      
00000DFE  4E92      1184          jsr       (A2)
00000E00  584F      1185          addq.w    #4,A7
                    1186   ; FillData = Get2HexDigits(0) ;
00000E02  42A7      1187          clr.l     -(A7)
00000E04  4EB8 0C04 1188          jsr       _Get2HexDigits
00000E08  584F      1189          addq.w    #4,A7
00000E0A  1600      1190          move.b    D0,D3
                    1191   ; printf("\r\nFilling Addresses [$%08X - $%08X] with $%02X", StartRamPtr, EndRamPtr, FillData) ;
00000E0C  C6BC 0000 1192          and.l     #255,D3
00000E10  00FF      
00000E12  2F03      1193          move.l    D3,-(A7)
00000E14  2F04      1194          move.l    D4,-(A7)
00000E16  2F02      1195          move.l    D2,-(A7)
00000E18  4879 0000 1196          pea       @m68kde~1_13.L
00000E1C  468C      
00000E1E  4E92      1197          jsr       (A2)
00000E20  DEFC 0010 1198          add.w     #16,A7
                    1199   ; while(StartRamPtr < EndRamPtr)
                    1200   FillMemory_1:
00000E24  B484      1201          cmp.l     D4,D2
00000E26  6408      1202          bhs.s     FillMemory_3
                    1203   ; *StartRamPtr++ = FillData ;
00000E28  2042      1204          move.l    D2,A0
00000E2A  5282      1205          addq.l    #1,D2
00000E2C  1083      1206          move.b    D3,(A0)
00000E2E  60F4      1207          bra       FillMemory_1
                    1208   FillMemory_3:
00000E30  4CDF 041C 1209          movem.l   (A7)+,D2/D3/D4/A2
00000E34  4E75      1210          rts
                    1211   ; }
                    1212   ; void Load_SRecordFile()
                    1213   ; {
                    1214   _Load_SRecordFile:
00000E36  4E56 FFDC 1215          link      A6,#-36
00000E3A  48E7 3F3C 1216          movem.l   D2/D3/D4/D5/D6/D7/A2/A3/A4/A5,-(A7)
00000E3E  45EE FFFA 1217          lea       -6(A6),A2
00000E42  47F8 0C04 1218          lea       _Get2HexDigits.L,A3
00000E46  49F9 0000 1219          lea       _printf.L,A4
00000E4A  3BF6      
                    1220   ; int i, Address, AddressSize, DataByte, NumDataBytesToRead, LoadFailed, FailedAddress, AddressFail, SRecordCount = 0, ByteTotal = 0 ;
00000E4C  42AE FFEE 1221          clr.l     -18(A6)
00000E50  3A7C 0000 1222          move.w    #0,A5
                    1223   ; int result, ByteCount ;
                    1224   ; char c, CheckSum, ReadCheckSum, HeaderType ;
                    1225   ; char *RamPtr ;                          // pointer to Memory where downloaded program will be stored
                    1226   ; LoadFailed = 0 ;                        //assume LOAD operation will pass
00000E54  7E00      1227          moveq     #0,D7
                    1228   ; AddressFail = 0 ;
00000E56  42AE FFEA 1229          clr.l     -22(A6)
                    1230   ; Echo = 0 ;                              // don't echo S records during download
00000E5A  42B9 0B00 1231          clr.l     _Echo.L
00000E5E  00E0      
                    1232   ; printf("\r\nUse HyperTerminal to Send Text File (.hex)\r\n") ;
00000E60  4879 0000 1233          pea       @m68kde~1_14.L
00000E64  46BC      
00000E66  4E94      1234          jsr       (A4)
00000E68  584F      1235          addq.w    #4,A7
                    1236   ; while(1)    {
                    1237   Load_SRecordFile_1:
                    1238   ; CheckSum = 0 ;
00000E6A  4212      1239          clr.b     (A2)
                    1240   ; do {
                    1241   Load_SRecordFile_4:
                    1242   ; c = toupper(_getch()) ;
00000E6C  2F00      1243          move.l    D0,-(A7)
00000E6E  4EB8 0B68 1244          jsr       __getch
00000E72  2200      1245          move.l    D0,D1
00000E74  201F      1246          move.l    (A7)+,D0
00000E76  2F01      1247          move.l    D1,-(A7)
00000E78  4EB9 0000 1248          jsr       _toupper
00000E7C  3334      
00000E7E  584F      1249          addq.w    #4,A7
00000E80  1C00      1250          move.b    D0,D6
                    1251   ; if(c == 0x1b )      // if break
00000E82  0C06 001B 1252          cmp.b     #27,D6
00000E86  6604      1253          bne.s     Load_SRecordFile_6
                    1254   ; return;
00000E88  6000 0132 1255          bra       Load_SRecordFile_8
                    1256   Load_SRecordFile_6:
00000E8C  0C06 0053 1257          cmp.b     #83,D6
00000E90  66DA      1258          bne       Load_SRecordFile_4
                    1259   ; }while(c != (char)('S'));   // wait for S start of header
                    1260   ; HeaderType = _getch() ;
00000E92  4EB8 0B68 1261          jsr       __getch
00000E96  1600      1262          move.b    D0,D3
                    1263   ; if(HeaderType == (char)('0') || HeaderType == (char)('5'))       // ignore s0, s5 records
00000E98  0C03 0030 1264          cmp.b     #48,D3
00000E9C  6706      1265          beq.s     Load_SRecordFile_11
00000E9E  0C03 0035 1266          cmp.b     #53,D3
00000EA2  6604      1267          bne.s     Load_SRecordFile_9
                    1268   Load_SRecordFile_11:
                    1269   ; continue ;
00000EA4  6000 00D2 1270          bra       Load_SRecordFile_23
                    1271   Load_SRecordFile_9:
                    1272   ; if(HeaderType >= (char)('7'))
00000EA8  0C03 0037 1273          cmp.b     #55,D3
00000EAC  6D04      1274          blt.s     Load_SRecordFile_12
                    1275   ; break ;                 // end load on s7,s8,s9 records
00000EAE  6000 00CC 1276          bra       Load_SRecordFile_3
                    1277   Load_SRecordFile_12:
                    1278   ; // get the bytecount
                    1279   ; ByteCount = Get2HexDigits(&CheckSum) ;
00000EB2  2F0A      1280          move.l    A2,-(A7)
00000EB4  4E93      1281          jsr       (A3)
00000EB6  584F      1282          addq.w    #4,A7
00000EB8  2D40 FFF6 1283          move.l    D0,-10(A6)
                    1284   ; // get the address, 4 digits for s1, 6 digits for s2, and 8 digits for s3 record
                    1285   ; if(HeaderType == (char)('1')) {
00000EBC  0C03 0031 1286          cmp.b     #49,D3
00000EC0  660E      1287          bne.s     Load_SRecordFile_14
                    1288   ; AddressSize = 2 ;       // 2 byte address
00000EC2  7A02      1289          moveq     #2,D5
                    1290   ; Address = Get4HexDigits(&CheckSum);
00000EC4  2F0A      1291          move.l    A2,-(A7)
00000EC6  4EB8 0C58 1292          jsr       _Get4HexDigits
00000ECA  584F      1293          addq.w    #4,A7
00000ECC  2800      1294          move.l    D0,D4
00000ECE  6020      1295          bra.s     Load_SRecordFile_17
                    1296   Load_SRecordFile_14:
                    1297   ; }
                    1298   ; else if (HeaderType == (char)('2')) {
00000ED0  0C03 0032 1299          cmp.b     #50,D3
00000ED4  660E      1300          bne.s     Load_SRecordFile_16
                    1301   ; AddressSize = 3 ;       // 3 byte address
00000ED6  7A03      1302          moveq     #3,D5
                    1303   ; Address = Get6HexDigits(&CheckSum) ;
00000ED8  2F0A      1304          move.l    A2,-(A7)
00000EDA  4EB8 0C7E 1305          jsr       _Get6HexDigits
00000EDE  584F      1306          addq.w    #4,A7
00000EE0  2800      1307          move.l    D0,D4
00000EE2  600C      1308          bra.s     Load_SRecordFile_17
                    1309   Load_SRecordFile_16:
                    1310   ; }
                    1311   ; else    {
                    1312   ; AddressSize = 4 ;       // 4 byte address
00000EE4  7A04      1313          moveq     #4,D5
                    1314   ; Address = Get8HexDigits(&CheckSum) ;
00000EE6  2F0A      1315          move.l    A2,-(A7)
00000EE8  4EB8 0CA4 1316          jsr       _Get8HexDigits
00000EEC  584F      1317          addq.w    #4,A7
00000EEE  2800      1318          move.l    D0,D4
                    1319   Load_SRecordFile_17:
                    1320   ; }
                    1321   ; RamPtr = (char *)(Address) ;                            // point to download area
00000EF0  2D44 FFFC 1322          move.l    D4,-4(A6)
                    1323   ; NumDataBytesToRead = ByteCount - AddressSize - 1 ;
00000EF4  202E FFF6 1324          move.l    -10(A6),D0
00000EF8  9085      1325          sub.l     D5,D0
00000EFA  5380      1326          subq.l    #1,D0
00000EFC  2D40 FFE2 1327          move.l    D0,-30(A6)
                    1328   ; for(i = 0; i < NumDataBytesToRead; i ++) {     // read in remaining data bytes (ignore address and checksum at the end
00000F00  4282      1329          clr.l     D2
                    1330   Load_SRecordFile_18:
00000F02  B4AE FFE2 1331          cmp.l     -30(A6),D2
00000F06  6C1E      1332          bge.s     Load_SRecordFile_20
                    1333   ; DataByte = Get2HexDigits(&CheckSum) ;
00000F08  2F0A      1334          move.l    A2,-(A7)
00000F0A  4E93      1335          jsr       (A3)
00000F0C  584F      1336          addq.w    #4,A7
00000F0E  2D40 FFDE 1337          move.l    D0,-34(A6)
                    1338   ; *RamPtr++ = DataByte ;                      // store downloaded byte in Ram at specified address
00000F12  202E FFDE 1339          move.l    -34(A6),D0
00000F16  206E FFFC 1340          move.l    -4(A6),A0
00000F1A  52AE FFFC 1341          addq.l    #1,-4(A6)
00000F1E  1080      1342          move.b    D0,(A0)
                    1343   ; ByteTotal++;
00000F20  524D      1344          addq.w    #1,A5
00000F22  5282      1345          addq.l    #1,D2
00000F24  60DC      1346          bra       Load_SRecordFile_18
                    1347   Load_SRecordFile_20:
                    1348   ; }
                    1349   ; // checksum is the 1's complement of the sum of all data pairs following the bytecount, i.e. it includes the address and the data itself
                    1350   ; ReadCheckSum = Get2HexDigits(0) ;
00000F26  42A7      1351          clr.l     -(A7)
00000F28  4E93      1352          jsr       (A3)
00000F2A  584F      1353          addq.w    #4,A7
00000F2C  1D40 FFFB 1354          move.b    D0,-5(A6)
                    1355   ; if((~CheckSum&0Xff) != (ReadCheckSum&0Xff))   {
00000F30  1012      1356          move.b    (A2),D0
00000F32  4600      1357          not.b     D0
00000F34  4880      1358          ext.w     D0
00000F36  C07C 00FF 1359          and.w     #255,D0
00000F3A  122E FFFB 1360          move.b    -5(A6),D1
00000F3E  4881      1361          ext.w     D1
00000F40  C27C 00FF 1362          and.w     #255,D1
00000F44  B041      1363          cmp.w     D1,D0
00000F46  6708      1364          beq.s     Load_SRecordFile_21
                    1365   ; LoadFailed = 1 ;
00000F48  7E01      1366          moveq     #1,D7
                    1367   ; FailedAddress = Address ;
00000F4A  2D44 FFE6 1368          move.l    D4,-26(A6)
                    1369   ; break;
00000F4E  602C      1370          bra.s     Load_SRecordFile_3
                    1371   Load_SRecordFile_21:
                    1372   ; }
                    1373   ; SRecordCount++ ;
00000F50  52AE FFEE 1374          addq.l    #1,-18(A6)
                    1375   ; // display feedback on progress
                    1376   ; if(SRecordCount % 25 == 0)
00000F54  2F2E FFEE 1377          move.l    -18(A6),-(A7)
00000F58  4878 0019 1378          pea       25
00000F5C  4EB9 0000 1379          jsr       LDIV
00000F60  3186      
00000F62  202F 0004 1380          move.l    4(A7),D0
00000F66  504F      1381          addq.w    #8,A7
00000F68  4A80      1382          tst.l     D0
00000F6A  660C      1383          bne.s     Load_SRecordFile_23
                    1384   ; putchar('.') ;
00000F6C  4878 002E 1385          pea       46
00000F70  4EB9 0000 1386          jsr       _putch
00000F74  3252      
00000F76  584F      1387          addq.w    #4,A7
                    1388   Load_SRecordFile_23:
00000F78  6000 FEF0 1389          bra       Load_SRecordFile_1
                    1390   Load_SRecordFile_3:
                    1391   ; }
                    1392   ; if(LoadFailed == 1) {
00000F7C  0C87 0000 1393          cmp.l     #1,D7
00000F80  0001      
00000F82  6610      1394          bne.s     Load_SRecordFile_25
                    1395   ; printf("\r\nLoad Failed at Address = [$%08X]\r\n", FailedAddress) ;
00000F84  2F2E FFE6 1396          move.l    -26(A6),-(A7)
00000F88  4879 0000 1397          pea       @m68kde~1_15.L
00000F8C  46EC      
00000F8E  4E94      1398          jsr       (A4)
00000F90  504F      1399          addq.w    #8,A7
00000F92  600C      1400          bra.s     Load_SRecordFile_26
                    1401   Load_SRecordFile_25:
                    1402   ; }
                    1403   ; else
                    1404   ; printf("\r\nSuccess: Downloaded %d bytes\r\n", ByteTotal) ;
00000F94  2F0D      1405          move.l    A5,-(A7)
00000F96  4879 0000 1406          pea       @m68kde~1_16.L
00000F9A  4712      
00000F9C  4E94      1407          jsr       (A4)
00000F9E  504F      1408          addq.w    #8,A7
                    1409   Load_SRecordFile_26:
                    1410   ; // pause at the end to wait for download to finish transmitting at the end of S8 etc
                    1411   ; for(i = 0; i < 400000; i ++)
00000FA0  4282      1412          clr.l     D2
                    1413   Load_SRecordFile_27:
00000FA2  0C82 0006 1414          cmp.l     #400000,D2
00000FA6  1A80      
00000FA8  6C04      1415          bge.s     Load_SRecordFile_29
00000FAA  5282      1416          addq.l    #1,D2
00000FAC  60F4      1417          bra       Load_SRecordFile_27
                    1418   Load_SRecordFile_29:
                    1419   ; ;
                    1420   ; FlushKeyboard() ;
00000FAE  4EB8 0BA6 1421          jsr       _FlushKeyboard
                    1422   ; Echo = 1;
00000FB2  23FC 0000 1423          move.l    #1,_Echo.L
00000FB6  0001 0B00 
00000FBA  00E0      
                    1424   Load_SRecordFile_8:
00000FBC  4CDF 3CFC 1425          movem.l   (A7)+,D2/D3/D4/D5/D6/D7/A2/A3/A4/A5
00000FC0  4E5E      1426          unlk      A6
00000FC2  4E75      1427          rts
                    1428   ; }
                    1429   ; void MemoryChange(void)
                    1430   ; {
                    1431   _MemoryChange:
00000FC4  48E7 3820 1432          movem.l   D2/D3/D4/A2,-(A7)
00000FC8  45F9 0000 1433          lea       _printf.L,A2
00000FCC  3BF6      
                    1434   ; unsigned char *RamPtr,c ; // pointer to memory
                    1435   ; int Data ;
                    1436   ; printf("\r\nExamine and Change Memory") ;
00000FCE  4879 0000 1437          pea       @m68kde~1_17.L
00000FD2  4734      
00000FD4  4E92      1438          jsr       (A2)
00000FD6  584F      1439          addq.w    #4,A7
                    1440   ; printf("\r\n<ESC> to Stop, <SPACE> to Advance, '-' to Go Back, <DATA> to change") ;
00000FD8  4879 0000 1441          pea       @m68kde~1_18.L
00000FDC  4750      
00000FDE  4E92      1442          jsr       (A2)
00000FE0  584F      1443          addq.w    #4,A7
                    1444   ; printf("\r\nEnter Address: ") ;
00000FE2  4879 0000 1445          pea       @m68kde~1_19.L
00000FE6  4796      
00000FE8  4E92      1446          jsr       (A2)
00000FEA  584F      1447          addq.w    #4,A7
                    1448   ; RamPtr = Get8HexDigits(0) ;
00000FEC  42A7      1449          clr.l     -(A7)
00000FEE  4EB8 0CA4 1450          jsr       _Get8HexDigits
00000FF2  584F      1451          addq.w    #4,A7
00000FF4  2600      1452          move.l    D0,D3
                    1453   ; while(1)    {
                    1454   MemoryChange_1:
                    1455   ; printf("\r\n[%08x] : %02x  ", RamPtr, *RamPtr) ;
00000FF6  2043      1456          move.l    D3,A0
00000FF8  1210      1457          move.b    (A0),D1
00000FFA  C2BC 0000 1458          and.l     #255,D1
00000FFE  00FF      
00001000  2F01      1459          move.l    D1,-(A7)
00001002  2F03      1460          move.l    D3,-(A7)
00001004  4879 0000 1461          pea       @m68kde~1_20.L
00001008  47A8      
0000100A  4E92      1462          jsr       (A2)
0000100C  DEFC 000C 1463          add.w     #12,A7
                    1464   ; c = tolower(_getch()) ;
00001010  2F00      1465          move.l    D0,-(A7)
00001012  4EB8 0B68 1466          jsr       __getch
00001016  2200      1467          move.l    D0,D1
00001018  201F      1468          move.l    (A7)+,D0
0000101A  2F01      1469          move.l    D1,-(A7)
0000101C  4EB9 0000 1470          jsr       _tolower
00001020  32BE      
00001022  584F      1471          addq.w    #4,A7
00001024  1400      1472          move.b    D0,D2
                    1473   ; if(c == (char)(0x1b))
00001026  0C02 001B 1474          cmp.b     #27,D2
0000102A  6604      1475          bne.s     MemoryChange_4
                    1476   ; return ;                                // abort on escape
0000102C  6000 0090 1477          bra       MemoryChange_6
                    1478   MemoryChange_4:
                    1479   ; else if((c >= '0' && c <= '9') || (c >= 'a' && c <= 'f')) {  // are we trying to change data at this location by entering a hex char
00001030  0C02 0030 1480          cmp.b     #48,D2
00001034  6506      1481          blo.s     MemoryChange_10
00001036  0C02 0039 1482          cmp.b     #57,D2
0000103A  6310      1483          bls.s     MemoryChange_9
                    1484   MemoryChange_10:
0000103C  0C02 0061 1485          cmp.b     #97,D2
00001040  6500 006E 1486          blo       MemoryChange_7
00001044  0C02 0066 1487          cmp.b     #102,D2
00001048  6200 0066 1488          bhi       MemoryChange_7
                    1489   MemoryChange_9:
                    1490   ; Data = (xtod(c) << 4) | (xtod(_getch()));
0000104C  C4BC 0000 1491          and.l     #255,D2
00001050  00FF      
00001052  2F02      1492          move.l    D2,-(A7)
00001054  4EB8 0BD2 1493          jsr       _xtod
00001058  584F      1494          addq.w    #4,A7
0000105A  C0BC 0000 1495          and.l     #255,D0
0000105E  00FF      
00001060  E980      1496          asl.l     #4,D0
00001062  2F00      1497          move.l    D0,-(A7)
00001064  2F01      1498          move.l    D1,-(A7)
00001066  4EB8 0B68 1499          jsr       __getch
0000106A  221F      1500          move.l    (A7)+,D1
0000106C  2F00      1501          move.l    D0,-(A7)
0000106E  4EB8 0BD2 1502          jsr       _xtod
00001072  584F      1503          addq.w    #4,A7
00001074  2200      1504          move.l    D0,D1
00001076  201F      1505          move.l    (A7)+,D0
00001078  C2BC 0000 1506          and.l     #255,D1
0000107C  00FF      
0000107E  8081      1507          or.l      D1,D0
00001080  2800      1508          move.l    D0,D4
                    1509   ; *RamPtr = (char)(Data) ;
00001082  2043      1510          move.l    D3,A0
00001084  1084      1511          move.b    D4,(A0)
                    1512   ; if(*RamPtr != Data) {
00001086  2043      1513          move.l    D3,A0
00001088  1010      1514          move.b    (A0),D0
0000108A  C0BC 0000 1515          and.l     #255,D0
0000108E  00FF      
00001090  B084      1516          cmp.l     D4,D0
00001092  671A      1517          beq.s     MemoryChange_11
                    1518   ; printf("\r\nWarning Change Failed: Wrote [%02x], Read [%02x]", Data, *RamPtr) ;
00001094  2043      1519          move.l    D3,A0
00001096  1210      1520          move.b    (A0),D1
00001098  C2BC 0000 1521          and.l     #255,D1
0000109C  00FF      
0000109E  2F01      1522          move.l    D1,-(A7)
000010A0  2F04      1523          move.l    D4,-(A7)
000010A2  4879 0000 1524          pea       @m68kde~1_21.L
000010A6  47BA      
000010A8  4E92      1525          jsr       (A2)
000010AA  DEFC 000C 1526          add.w     #12,A7
                    1527   MemoryChange_11:
000010AE  6008      1528          bra.s     MemoryChange_13
                    1529   MemoryChange_7:
                    1530   ; }
                    1531   ; }
                    1532   ; else if(c == (char)('-'))
000010B0  0C02 002D 1533          cmp.b     #45,D2
000010B4  6602      1534          bne.s     MemoryChange_13
                    1535   ; RamPtr -= 2 ; ;
000010B6  5583      1536          subq.l    #2,D3
                    1537   MemoryChange_13:
                    1538   ; RamPtr ++ ;
000010B8  5283      1539          addq.l    #1,D3
000010BA  6000 FF3A 1540          bra       MemoryChange_1
                    1541   MemoryChange_6:
000010BE  4CDF 041C 1542          movem.l   (A7)+,D2/D3/D4/A2
000010C2  4E75      1543          rts
                    1544   ; }
                    1545   ; }
                    1546   ; /*******************************************************************
                    1547   ; ** Write a program to SPI Flash Chip from memory and verify by reading back
                    1548   ; ********************************************************************/
                    1549   ; void ProgramFlashChip(void)
                    1550   ; {
                    1551   _ProgramFlashChip:
000010C4  4E75      1552          rts
                    1553   ; //
                    1554   ; // TODO : put your code here to program the 1st 256k of ram (where user program is held at hex 08000000) to SPI flash chip
                    1555   ; // TODO : then verify by reading it back and comparing to memory
                    1556   ; //
                    1557   ; }
                    1558   ; /*************************************************************************
                    1559   ; ** Load a program from SPI Flash Chip and copy to Dram
                    1560   ; **************************************************************************/
                    1561   ; void LoadFromFlashChip(void)
                    1562   ; {
                    1563   _LoadFromFlashChip:
                    1564   ; printf("\r\nLoading Program From SPI Flash....") ;
000010C6  4879 0000 1565          pea       @m68kde~1_22.L
000010CA  47EE      
000010CC  4EB9 0000 1566          jsr       _printf
000010D0  3BF6      
000010D2  584F      1567          addq.w    #4,A7
000010D4  4E75      1568          rts
                    1569   ; //
                    1570   ; // TODO : put your code here to read 256k of data from SPI flash chip and store in user ram starting at hex 08000000
                    1571   ; //
                    1572   ; }
                    1573   ; //////////////////////////////////////////////////////////////////////////////////////////////////
                    1574   ; // IMPORTANT
                    1575   ; // TG68 does not support the Native Trace mode of the original 68000 so tracing
                    1576   ; // has to be done with an interrupt (IRQ Level 6)
                    1577   ; //
                    1578   ; // To allow the 68000 to execute one more instruction after each pseudo trace (IRQ6)
                    1579   ; // the IRQ is removed in hardware once the TG68 reads the IRQ autovector (i.e. acknowledges the IRQ)
                    1580   ; //
                    1581   ; // on return from the IRQ service handler, the first access to the user memory program space
                    1582   ; // generates a fresh IRQ (in hardware) to generate a new trace, this allows the tg68 to
                    1583   ; // execute one more new instruction (without it the TG68 would trace on the same instruction
                    1584   ; // each time and not after the next one). It also means it doesn't simgle step outside the user
                    1585   ; // program area
                    1586   ; //
                    1587   ; // The bottom line is the Trace handler, which includes the Dump registers below
                    1588   ; // cannot access the user memory to display for example the Instruction Opcode or to disassemble etc
                    1589   ; // as this would lead to a new IRQ being reset and the TG68 would trace on same instruction
                    1590   ; // NOT SURE THIS IS TRUE NOW THAT TRACE HANDLER HAS BEEN MODIVIED TO NOT AUTOMATICALLY GENERATE A TRACE EXCEPTION
                    1591   ; // INSTEAD IT IS DONE IN THE 'N' COMMAND FOR NEXT
                    1592   ; /////////////////////////////////////////////////////////////////////////////////////////////////////
                    1593   ; void DumpRegisters()
                    1594   ; {
                    1595   _DumpRegisters:
000010D6  48E7 3F3C 1596          movem.l   D2/D3/D4/D5/D6/D7/A2/A3/A4/A5,-(A7)
000010DA  45F9 0000 1597          lea       _putch.L,A2
000010DE  3252      
000010E0  47F9 0000 1598          lea       _printf.L,A3
000010E4  3BF6      
000010E6  49F9 0B00 1599          lea       _SR.L,A4
000010EA  012C      
000010EC  4BF9 0B00 1600          lea       _WatchPointString.L,A5
000010F0  01C2      
                    1601   ; short i, x, j, k ;
                    1602   ; unsigned char c, *BytePointer;
                    1603   ; // buld up strings for displaying watchpoints
                    1604   ; for(x = 0; x < (short)(8); x++)
000010F2  4242      1605          clr.w     D2
                    1606   DumpRegisters_1:
000010F4  0C42 0008 1607          cmp.w     #8,D2
000010F8  6C00 01C6 1608          bge       DumpRegisters_3
                    1609   ; {
                    1610   ; if(WatchPointSetOrCleared[x] == 1)
000010FC  48C2      1611          ext.l     D2
000010FE  2002      1612          move.l    D2,D0
00001100  E588      1613          lsl.l     #2,D0
00001102  41F9 0B00 1614          lea       _WatchPointSetOrCleared.L,A0
00001106  01A2      
00001108  2030 0800 1615          move.l    0(A0,D0.L),D0
0000110C  0C80 0000 1616          cmp.l     #1,D0
00001110  0001      
00001112  6600 0186 1617          bne       DumpRegisters_4
                    1618   ; {
                    1619   ; sprintf(WatchPointString[x], "$%08X  ", WatchPointAddress[x]) ;
00001116  48C2      1620          ext.l     D2
00001118  2202      1621          move.l    D2,D1
0000111A  E589      1622          lsl.l     #2,D1
0000111C  41F9 0B00 1623          lea       _WatchPointAddress.L,A0
00001120  0182      
00001122  2F30 1800 1624          move.l    0(A0,D1.L),-(A7)
00001126  4879 0000 1625          pea       @m68kde~1_23.L
0000112A  4814      
0000112C  220D      1626          move.l    A5,D1
0000112E  48C2      1627          ext.l     D2
00001130  2F00      1628          move.l    D0,-(A7)
00001132  2002      1629          move.l    D2,D0
00001134  C1FC 0064 1630          muls      #100,D0
00001138  D280      1631          add.l     D0,D1
0000113A  201F      1632          move.l    (A7)+,D0
0000113C  2F01      1633          move.l    D1,-(A7)
0000113E  4EB9 0000 1634          jsr       _sprintf
00001142  32EA      
00001144  DEFC 000C 1635          add.w     #12,A7
                    1636   ; BytePointer = (char *)(WatchPointAddress[x]) ;
00001148  48C2      1637          ext.l     D2
0000114A  2002      1638          move.l    D2,D0
0000114C  E588      1639          lsl.l     #2,D0
0000114E  41F9 0B00 1640          lea       _WatchPointAddress.L,A0
00001152  0182      
00001154  2A30 0800 1641          move.l    0(A0,D0.L),D5
                    1642   ; for(j = 0; j < (short)(16); j+=2)
00001158  4243      1643          clr.w     D3
                    1644   DumpRegisters_6:
0000115A  0C43 0010 1645          cmp.w     #16,D3
0000115E  6C00 0082 1646          bge       DumpRegisters_8
                    1647   ; {
                    1648   ; for(k = 0; k < (short)(2); k++)
00001162  4246      1649          clr.w     D6
                    1650   DumpRegisters_9:
00001164  0C46 0002 1651          cmp.w     #2,D6
00001168  6C00 0052 1652          bge       DumpRegisters_11
                    1653   ; {
                    1654   ; sprintf(TempString, "%02X", BytePointer[j+k]) ;
0000116C  2045      1655          move.l    D5,A0
0000116E  48C3      1656          ext.l     D3
00001170  2203      1657          move.l    D3,D1
00001172  48C6      1658          ext.l     D6
00001174  D286      1659          add.l     D6,D1
00001176  1230 1800 1660          move.b    0(A0,D1.L),D1
0000117A  C2BC 0000 1661          and.l     #255,D1
0000117E  00FF      
00001180  2F01      1662          move.l    D1,-(A7)
00001182  4879 0000 1663          pea       @m68kde~1_8.L
00001186  4644      
00001188  4879 0B00 1664          pea       _TempString.L
0000118C  04E2      
0000118E  4EB9 0000 1665          jsr       _sprintf
00001192  32EA      
00001194  DEFC 000C 1666          add.w     #12,A7
                    1667   ; strcat(WatchPointString[x], TempString) ;
00001198  4879 0B00 1668          pea       _TempString.L
0000119C  04E2      
0000119E  220D      1669          move.l    A5,D1
000011A0  48C2      1670          ext.l     D2
000011A2  2F00      1671          move.l    D0,-(A7)
000011A4  2002      1672          move.l    D2,D0
000011A6  C1FC 0064 1673          muls      #100,D0
000011AA  D280      1674          add.l     D0,D1
000011AC  201F      1675          move.l    (A7)+,D0
000011AE  2F01      1676          move.l    D1,-(A7)
000011B0  4EB9 0000 1677          jsr       _strcat
000011B4  331E      
000011B6  504F      1678          addq.w    #8,A7
000011B8  5246      1679          addq.w    #1,D6
000011BA  60A8      1680          bra       DumpRegisters_9
                    1681   DumpRegisters_11:
                    1682   ; }
                    1683   ; strcat(WatchPointString[x]," ") ;
000011BC  4879 0000 1684          pea       @m68kde~1_24.L
000011C0  481C      
000011C2  220D      1685          move.l    A5,D1
000011C4  48C2      1686          ext.l     D2
000011C6  2F00      1687          move.l    D0,-(A7)
000011C8  2002      1688          move.l    D2,D0
000011CA  C1FC 0064 1689          muls      #100,D0
000011CE  D280      1690          add.l     D0,D1
000011D0  201F      1691          move.l    (A7)+,D0
000011D2  2F01      1692          move.l    D1,-(A7)
000011D4  4EB9 0000 1693          jsr       _strcat
000011D8  331E      
000011DA  504F      1694          addq.w    #8,A7
000011DC  5443      1695          addq.w    #2,D3
000011DE  6000 FF7A 1696          bra       DumpRegisters_6
                    1697   DumpRegisters_8:
                    1698   ; }
                    1699   ; strcat(WatchPointString[x], "  ") ;
000011E2  4879 0000 1700          pea       @m68kde~1_9.L
000011E6  464A      
000011E8  220D      1701          move.l    A5,D1
000011EA  48C2      1702          ext.l     D2
000011EC  2F00      1703          move.l    D0,-(A7)
000011EE  2002      1704          move.l    D2,D0
000011F0  C1FC 0064 1705          muls      #100,D0
000011F4  D280      1706          add.l     D0,D1
000011F6  201F      1707          move.l    (A7)+,D0
000011F8  2F01      1708          move.l    D1,-(A7)
000011FA  4EB9 0000 1709          jsr       _strcat
000011FE  331E      
00001200  504F      1710          addq.w    #8,A7
                    1711   ; BytePointer = (char *)(WatchPointAddress[x]) ;
00001202  48C2      1712          ext.l     D2
00001204  2002      1713          move.l    D2,D0
00001206  E588      1714          lsl.l     #2,D0
00001208  41F9 0B00 1715          lea       _WatchPointAddress.L,A0
0000120C  0182      
0000120E  2A30 0800 1716          move.l    0(A0,D0.L),D5
                    1717   ; for(j = 0; j < (short)(16); j++)
00001212  4243      1718          clr.w     D3
                    1719   DumpRegisters_12:
00001214  0C43 0010 1720          cmp.w     #16,D3
00001218  6C00 007E 1721          bge       DumpRegisters_14
                    1722   ; {
                    1723   ; c = ((char)(BytePointer[j]) & 0x7f) ;
0000121C  2045      1724          move.l    D5,A0
0000121E  48C3      1725          ext.l     D3
00001220  1030 3800 1726          move.b    0(A0,D3.L),D0
00001224  C03C 007F 1727          and.b     #127,D0
00001228  1E00      1728          move.b    D0,D7
                    1729   ; if((c > (char)(0x7f)) || (c < (char)(' ')))
0000122A  0C07 007F 1730          cmp.b     #127,D7
0000122E  6206      1731          bhi.s     DumpRegisters_17
00001230  0C07 0020 1732          cmp.b     #32,D7
00001234  6416      1733          bhs.s     DumpRegisters_15
                    1734   DumpRegisters_17:
                    1735   ; sprintf(TempString, ".") ;
00001236  4879 0000 1736          pea       @m68kde~1_25.L
0000123A  481E      
0000123C  4879 0B00 1737          pea       _TempString.L
00001240  04E2      
00001242  4EB9 0000 1738          jsr       _sprintf
00001246  32EA      
00001248  504F      1739          addq.w    #8,A7
0000124A  6026      1740          bra.s     DumpRegisters_16
                    1741   DumpRegisters_15:
                    1742   ; else
                    1743   ; sprintf(TempString, "%c", BytePointer[j]) ;
0000124C  2045      1744          move.l    D5,A0
0000124E  48C3      1745          ext.l     D3
00001250  1230 3800 1746          move.b    0(A0,D3.L),D1
00001254  C2BC 0000 1747          and.l     #255,D1
00001258  00FF      
0000125A  2F01      1748          move.l    D1,-(A7)
0000125C  4879 0000 1749          pea       @m68kde~1_26.L
00001260  4820      
00001262  4879 0B00 1750          pea       _TempString.L
00001266  04E2      
00001268  4EB9 0000 1751          jsr       _sprintf
0000126C  32EA      
0000126E  DEFC 000C 1752          add.w     #12,A7
                    1753   DumpRegisters_16:
                    1754   ; strcat(WatchPointString[x], TempString) ;
00001272  4879 0B00 1755          pea       _TempString.L
00001276  04E2      
00001278  220D      1756          move.l    A5,D1
0000127A  48C2      1757          ext.l     D2
0000127C  2F00      1758          move.l    D0,-(A7)
0000127E  2002      1759          move.l    D2,D0
00001280  C1FC 0064 1760          muls      #100,D0
00001284  D280      1761          add.l     D0,D1
00001286  201F      1762          move.l    (A7)+,D0
00001288  2F01      1763          move.l    D1,-(A7)
0000128A  4EB9 0000 1764          jsr       _strcat
0000128E  331E      
00001290  504F      1765          addq.w    #8,A7
00001292  5243      1766          addq.w    #1,D3
00001294  6000 FF7E 1767          bra       DumpRegisters_12
                    1768   DumpRegisters_14:
00001298  6020      1769          bra.s     DumpRegisters_5
                    1770   DumpRegisters_4:
                    1771   ; }
                    1772   ; }
                    1773   ; else
                    1774   ; strcpy(WatchPointString[x], "") ;
0000129A  4879 0000 1775          pea       @m68kde~1_27.L
0000129E  4824      
000012A0  220D      1776          move.l    A5,D1
000012A2  48C2      1777          ext.l     D2
000012A4  2F00      1778          move.l    D0,-(A7)
000012A6  2002      1779          move.l    D2,D0
000012A8  C1FC 0064 1780          muls      #100,D0
000012AC  D280      1781          add.l     D0,D1
000012AE  201F      1782          move.l    (A7)+,D0
000012B0  2F01      1783          move.l    D1,-(A7)
000012B2  4EB9 0000 1784          jsr       _strcpy
000012B6  3164      
000012B8  504F      1785          addq.w    #8,A7
                    1786   DumpRegisters_5:
000012BA  5242      1787          addq.w    #1,D2
000012BC  6000 FE36 1788          bra       DumpRegisters_1
                    1789   DumpRegisters_3:
                    1790   ; }
                    1791   ; printf("\r\n\r\n D0 = $%08X  A0 = $%08X",d0,a0) ;
000012C0  2F39 0B00 1792          move.l    _a0.L,-(A7)
000012C4  0104      
000012C6  2F39 0B00 1793          move.l    _d0.L,-(A7)
000012CA  00E4      
000012CC  4879 0000 1794          pea       @m68kde~1_28.L
000012D0  4826      
000012D2  4E93      1795          jsr       (A3)
000012D4  DEFC 000C 1796          add.w     #12,A7
                    1797   ; printf("\r\n D1 = $%08X  A1 = $%08X",d1,a1) ;
000012D8  2F39 0B00 1798          move.l    _a1.L,-(A7)
000012DC  0108      
000012DE  2F39 0B00 1799          move.l    _d1.L,-(A7)
000012E2  00E8      
000012E4  4879 0000 1800          pea       @m68kde~1_29.L
000012E8  4842      
000012EA  4E93      1801          jsr       (A3)
000012EC  DEFC 000C 1802          add.w     #12,A7
                    1803   ; printf("\r\n D2 = $%08X  A2 = $%08X",d2,a2) ;
000012F0  2F39 0B00 1804          move.l    _a2.L,-(A7)
000012F4  010C      
000012F6  2F39 0B00 1805          move.l    _d2.L,-(A7)
000012FA  00EC      
000012FC  4879 0000 1806          pea       @m68kde~1_30.L
00001300  485C      
00001302  4E93      1807          jsr       (A3)
00001304  DEFC 000C 1808          add.w     #12,A7
                    1809   ; printf("\r\n D3 = $%08X  A3 = $%08X",d3,a3) ;
00001308  2F39 0B00 1810          move.l    _a3.L,-(A7)
0000130C  0110      
0000130E  2F39 0B00 1811          move.l    _d3.L,-(A7)
00001312  00F0      
00001314  4879 0000 1812          pea       @m68kde~1_31.L
00001318  4876      
0000131A  4E93      1813          jsr       (A3)
0000131C  DEFC 000C 1814          add.w     #12,A7
                    1815   ; printf("\r\n D4 = $%08X  A4 = $%08X",d4,a4) ;
00001320  2F39 0B00 1816          move.l    _a4.L,-(A7)
00001324  0114      
00001326  2F39 0B00 1817          move.l    _d4.L,-(A7)
0000132A  00F4      
0000132C  4879 0000 1818          pea       @m68kde~1_32.L
00001330  4890      
00001332  4E93      1819          jsr       (A3)
00001334  DEFC 000C 1820          add.w     #12,A7
                    1821   ; printf("\r\n D5 = $%08X  A5 = $%08X",d5,a5) ;
00001338  2F39 0B00 1822          move.l    _a5.L,-(A7)
0000133C  0118      
0000133E  2F39 0B00 1823          move.l    _d5.L,-(A7)
00001342  00F8      
00001344  4879 0000 1824          pea       @m68kde~1_33.L
00001348  48AA      
0000134A  4E93      1825          jsr       (A3)
0000134C  DEFC 000C 1826          add.w     #12,A7
                    1827   ; printf("\r\n D6 = $%08X  A6 = $%08X",d6,a6) ;
00001350  2F39 0B00 1828          move.l    _a6.L,-(A7)
00001354  011C      
00001356  2F39 0B00 1829          move.l    _d6.L,-(A7)
0000135A  00FC      
0000135C  4879 0000 1830          pea       @m68kde~1_34.L
00001360  48C4      
00001362  4E93      1831          jsr       (A3)
00001364  DEFC 000C 1832          add.w     #12,A7
                    1833   ; printf("\r\n D7 = $%08X  A7 = $%08X",d7,((SR & (unsigned short int)(0x2000)) == ((unsigned short int)(0x2000))) ? SSP : USP) ;
00001368  3214      1834          move.w    (A4),D1
0000136A  C27C 2000 1835          and.w     #8192,D1
0000136E  0C41 2000 1836          cmp.w     #8192,D1
00001372  6608      1837          bne.s     DumpRegisters_18
00001374  2239 0B00 1838          move.l    _SSP.L,D1
00001378  0124      
0000137A  6006      1839          bra.s     DumpRegisters_19
                    1840   DumpRegisters_18:
0000137C  2239 0B00 1841          move.l    _USP.L,D1
00001380  0128      
                    1842   DumpRegisters_19:
00001382  2F01      1843          move.l    D1,-(A7)
00001384  2F39 0B00 1844          move.l    _d7.L,-(A7)
00001388  0100      
0000138A  4879 0000 1845          pea       @m68kde~1_35.L
0000138E  48DE      
00001390  4E93      1846          jsr       (A3)
00001392  DEFC 000C 1847          add.w     #12,A7
                    1848   ; printf("\r\n\r\nUSP = $%08X  (A7) User SP", USP ) ;
00001396  2F39 0B00 1849          move.l    _USP.L,-(A7)
0000139A  0128      
0000139C  4879 0000 1850          pea       @m68kde~1_36.L
000013A0  48F8      
000013A2  4E93      1851          jsr       (A3)
000013A4  504F      1852          addq.w    #8,A7
                    1853   ; printf("\r\nSSP = $%08X  (A7) Supervisor SP", SSP) ;
000013A6  2F39 0B00 1854          move.l    _SSP.L,-(A7)
000013AA  0124      
000013AC  4879 0000 1855          pea       @m68kde~1_37.L
000013B0  4916      
000013B2  4E93      1856          jsr       (A3)
000013B4  504F      1857          addq.w    #8,A7
                    1858   ; printf("\r\n SR = $%04X   ",SR) ;
000013B6  3214      1859          move.w    (A4),D1
000013B8  C2BC 0000 1860          and.l     #65535,D1
000013BC  FFFF      
000013BE  2F01      1861          move.l    D1,-(A7)
000013C0  4879 0000 1862          pea       @m68kde~1_38.L
000013C4  4938      
000013C6  4E93      1863          jsr       (A3)
000013C8  504F      1864          addq.w    #8,A7
                    1865   ; // display the status word in characters etc.
                    1866   ; printf("   [") ;
000013CA  4879 0000 1867          pea       @m68kde~1_39.L
000013CE  494A      
000013D0  4E93      1868          jsr       (A3)
000013D2  584F      1869          addq.w    #4,A7
                    1870   ; if((SR & (unsigned short int)(0x8000)) == (unsigned short int)(0x8000)) putchar('T') ; else putchar('-') ;      // Trace bit(bit 15)
000013D4  3014      1871          move.w    (A4),D0
000013D6  C07C 8000 1872          and.w     #32768,D0
000013DA  0C40 8000 1873          cmp.w     #32768,D0
000013DE  660A      1874          bne.s     DumpRegisters_20
000013E0  4878 0054 1875          pea       84
000013E4  4E92      1876          jsr       (A2)
000013E6  584F      1877          addq.w    #4,A7
000013E8  6008      1878          bra.s     DumpRegisters_21
                    1879   DumpRegisters_20:
000013EA  4878 002D 1880          pea       45
000013EE  4E92      1881          jsr       (A2)
000013F0  584F      1882          addq.w    #4,A7
                    1883   DumpRegisters_21:
                    1884   ; if((SR & (unsigned short int)(0x2000)) == (unsigned short int)(0x2000)) putchar('S') ; else putchar('U') ;      // supervisor bit  (bit 13)
000013F2  3014      1885          move.w    (A4),D0
000013F4  C07C 2000 1886          and.w     #8192,D0
000013F8  0C40 2000 1887          cmp.w     #8192,D0
000013FC  660A      1888          bne.s     DumpRegisters_22
000013FE  4878 0053 1889          pea       83
00001402  4E92      1890          jsr       (A2)
00001404  584F      1891          addq.w    #4,A7
00001406  6008      1892          bra.s     DumpRegisters_23
                    1893   DumpRegisters_22:
00001408  4878 0055 1894          pea       85
0000140C  4E92      1895          jsr       (A2)
0000140E  584F      1896          addq.w    #4,A7
                    1897   DumpRegisters_23:
                    1898   ; if((SR & (unsigned short int)(0x0400)) == (unsigned short int)(0x0400)) putchar('1') ; else putchar('0') ;      // IRQ2 Bit (bit 10)
00001410  3014      1899          move.w    (A4),D0
00001412  C07C 0400 1900          and.w     #1024,D0
00001416  0C40 0400 1901          cmp.w     #1024,D0
0000141A  660A      1902          bne.s     DumpRegisters_24
0000141C  4878 0031 1903          pea       49
00001420  4E92      1904          jsr       (A2)
00001422  584F      1905          addq.w    #4,A7
00001424  6008      1906          bra.s     DumpRegisters_25
                    1907   DumpRegisters_24:
00001426  4878 0030 1908          pea       48
0000142A  4E92      1909          jsr       (A2)
0000142C  584F      1910          addq.w    #4,A7
                    1911   DumpRegisters_25:
                    1912   ; if((SR & (unsigned short int)(0x0200)) == (unsigned short int)(0x0200)) putchar('1') ; else putchar('0') ;      // IRQ1 Bit (bit 9)
0000142E  3014      1913          move.w    (A4),D0
00001430  C07C 0200 1914          and.w     #512,D0
00001434  0C40 0200 1915          cmp.w     #512,D0
00001438  660A      1916          bne.s     DumpRegisters_26
0000143A  4878 0031 1917          pea       49
0000143E  4E92      1918          jsr       (A2)
00001440  584F      1919          addq.w    #4,A7
00001442  6008      1920          bra.s     DumpRegisters_27
                    1921   DumpRegisters_26:
00001444  4878 0030 1922          pea       48
00001448  4E92      1923          jsr       (A2)
0000144A  584F      1924          addq.w    #4,A7
                    1925   DumpRegisters_27:
                    1926   ; if((SR & (unsigned short int)(0x0100)) == (unsigned short int)(0x0100)) putchar('1') ; else putchar('0') ;      // IRQ0 Bit (bit 8)
0000144C  3014      1927          move.w    (A4),D0
0000144E  C07C 0100 1928          and.w     #256,D0
00001452  0C40 0100 1929          cmp.w     #256,D0
00001456  660A      1930          bne.s     DumpRegisters_28
00001458  4878 0031 1931          pea       49
0000145C  4E92      1932          jsr       (A2)
0000145E  584F      1933          addq.w    #4,A7
00001460  6008      1934          bra.s     DumpRegisters_29
                    1935   DumpRegisters_28:
00001462  4878 0030 1936          pea       48
00001466  4E92      1937          jsr       (A2)
00001468  584F      1938          addq.w    #4,A7
                    1939   DumpRegisters_29:
                    1940   ; if((SR & (unsigned short int)(0x0010)) == (unsigned short int)(0x0010)) putchar('X') ; else putchar('-') ;      // X Bit (bit 4)
0000146A  3014      1941          move.w    (A4),D0
0000146C  C07C 0010 1942          and.w     #16,D0
00001470  0C40 0010 1943          cmp.w     #16,D0
00001474  660A      1944          bne.s     DumpRegisters_30
00001476  4878 0058 1945          pea       88
0000147A  4E92      1946          jsr       (A2)
0000147C  584F      1947          addq.w    #4,A7
0000147E  6008      1948          bra.s     DumpRegisters_31
                    1949   DumpRegisters_30:
00001480  4878 002D 1950          pea       45
00001484  4E92      1951          jsr       (A2)
00001486  584F      1952          addq.w    #4,A7
                    1953   DumpRegisters_31:
                    1954   ; if((SR & (unsigned short int)(0x0008)) == (unsigned short int)(0x0008)) putchar('N') ; else putchar('-') ;      // N Bit (bit 3)
00001488  3014      1955          move.w    (A4),D0
0000148A  C07C 0008 1956          and.w     #8,D0
0000148E  0C40 0008 1957          cmp.w     #8,D0
00001492  660A      1958          bne.s     DumpRegisters_32
00001494  4878 004E 1959          pea       78
00001498  4E92      1960          jsr       (A2)
0000149A  584F      1961          addq.w    #4,A7
0000149C  6008      1962          bra.s     DumpRegisters_33
                    1963   DumpRegisters_32:
0000149E  4878 002D 1964          pea       45
000014A2  4E92      1965          jsr       (A2)
000014A4  584F      1966          addq.w    #4,A7
                    1967   DumpRegisters_33:
                    1968   ; if((SR & (unsigned short int)(0x0004)) == (unsigned short int)(0x0004)) putchar('Z') ; else putchar('-') ;      // Z Bit (bit 2)
000014A6  3014      1969          move.w    (A4),D0
000014A8  C07C 0004 1970          and.w     #4,D0
000014AC  0C40 0004 1971          cmp.w     #4,D0
000014B0  660A      1972          bne.s     DumpRegisters_34
000014B2  4878 005A 1973          pea       90
000014B6  4E92      1974          jsr       (A2)
000014B8  584F      1975          addq.w    #4,A7
000014BA  6008      1976          bra.s     DumpRegisters_35
                    1977   DumpRegisters_34:
000014BC  4878 002D 1978          pea       45
000014C0  4E92      1979          jsr       (A2)
000014C2  584F      1980          addq.w    #4,A7
                    1981   DumpRegisters_35:
                    1982   ; if((SR & (unsigned short int)(0x0002)) == (unsigned short int)(0x0002)) putchar('V') ; else putchar('-') ;      // V Bit (bit 1)
000014C4  3014      1983          move.w    (A4),D0
000014C6  C07C 0002 1984          and.w     #2,D0
000014CA  0C40 0002 1985          cmp.w     #2,D0
000014CE  660A      1986          bne.s     DumpRegisters_36
000014D0  4878 0056 1987          pea       86
000014D4  4E92      1988          jsr       (A2)
000014D6  584F      1989          addq.w    #4,A7
000014D8  6008      1990          bra.s     DumpRegisters_37
                    1991   DumpRegisters_36:
000014DA  4878 002D 1992          pea       45
000014DE  4E92      1993          jsr       (A2)
000014E0  584F      1994          addq.w    #4,A7
                    1995   DumpRegisters_37:
                    1996   ; if((SR & (unsigned short int)(0x0001)) == (unsigned short int)(0x0001)) putchar('C') ; else putchar('-') ;      // C Bit (bit 0)
000014E2  3014      1997          move.w    (A4),D0
000014E4  C07C 0001 1998          and.w     #1,D0
000014E8  0C40 0001 1999          cmp.w     #1,D0
000014EC  660A      2000          bne.s     DumpRegisters_38
000014EE  4878 0043 2001          pea       67
000014F2  4E92      2002          jsr       (A2)
000014F4  584F      2003          addq.w    #4,A7
000014F6  6008      2004          bra.s     DumpRegisters_39
                    2005   DumpRegisters_38:
000014F8  4878 002D 2006          pea       45
000014FC  4E92      2007          jsr       (A2)
000014FE  584F      2008          addq.w    #4,A7
                    2009   DumpRegisters_39:
                    2010   ; putchar(']') ;
00001500  4878 005D 2011          pea       93
00001504  4E92      2012          jsr       (A2)
00001506  584F      2013          addq.w    #4,A7
                    2014   ; printf("\r\n PC = $%08X  ", PC) ;
00001508  2F39 0B00 2015          move.l    _PC.L,-(A7)
0000150C  0120      
0000150E  4879 0000 2016          pea       @m68kde~1_40.L
00001512  4950      
00001514  4E93      2017          jsr       (A3)
00001516  504F      2018          addq.w    #8,A7
                    2019   ; if(*(unsigned short int *)(PC) == 0x4e4e)
00001518  2039 0B00 2020          move.l    _PC.L,D0
0000151C  0120      
0000151E  2040      2021          move.l    D0,A0
00001520  3010      2022          move.w    (A0),D0
00001522  0C40 4E4E 2023          cmp.w     #20046,D0
00001526  660A      2024          bne.s     DumpRegisters_40
                    2025   ; printf("[@ BREAKPOINT]") ;
00001528  4879 0000 2026          pea       @m68kde~1_41.L
0000152C  4960      
0000152E  4E93      2027          jsr       (A3)
00001530  584F      2028          addq.w    #4,A7
                    2029   DumpRegisters_40:
                    2030   ; printf("\r\n") ;
00001532  4879 0000 2031          pea       @m68kde~1_1.L
00001536  45CC      
00001538  4E93      2032          jsr       (A3)
0000153A  584F      2033          addq.w    #4,A7
                    2034   ; for(i=0; i < 8; i++)    {
0000153C  4244      2035          clr.w     D4
                    2036   DumpRegisters_42:
0000153E  0C44 0008 2037          cmp.w     #8,D4
00001542  6C00 0040 2038          bge       DumpRegisters_44
                    2039   ; if(WatchPointSetOrCleared[i] == 1)
00001546  48C4      2040          ext.l     D4
00001548  2004      2041          move.l    D4,D0
0000154A  E588      2042          lsl.l     #2,D0
0000154C  41F9 0B00 2043          lea       _WatchPointSetOrCleared.L,A0
00001550  01A2      
00001552  2030 0800 2044          move.l    0(A0,D0.L),D0
00001556  0C80 0000 2045          cmp.l     #1,D0
0000155A  0001      
0000155C  6622      2046          bne.s     DumpRegisters_45
                    2047   ; printf("\r\nWP%d = %s", i, WatchPointString[i]) ;
0000155E  220D      2048          move.l    A5,D1
00001560  48C4      2049          ext.l     D4
00001562  2F00      2050          move.l    D0,-(A7)
00001564  2004      2051          move.l    D4,D0
00001566  C1FC 0064 2052          muls      #100,D0
0000156A  D280      2053          add.l     D0,D1
0000156C  201F      2054          move.l    (A7)+,D0
0000156E  2F01      2055          move.l    D1,-(A7)
00001570  48C4      2056          ext.l     D4
00001572  2F04      2057          move.l    D4,-(A7)
00001574  4879 0000 2058          pea       @m68kde~1_42.L
00001578  4970      
0000157A  4E93      2059          jsr       (A3)
0000157C  DEFC 000C 2060          add.w     #12,A7
                    2061   DumpRegisters_45:
00001580  5244      2062          addq.w    #1,D4
00001582  60BA      2063          bra       DumpRegisters_42
                    2064   DumpRegisters_44:
00001584  4CDF 3CFC 2065          movem.l   (A7)+,D2/D3/D4/D5/D6/D7/A2/A3/A4/A5
00001588  4E75      2066          rts
                    2067   ; }
                    2068   ; }
                    2069   ; // Trace Exception Handler
                    2070   ; void DumpRegistersandPause(void)
                    2071   ; {
                    2072   _DumpRegistersandPause:
0000158A  2F0A      2073          move.l    A2,-(A7)
0000158C  45F9 0000 2074          lea       _printf.L,A2
00001590  3BF6      
                    2075   ; printf("\r\n\r\n\r\n\r\n\r\n\r\nSingle Step  :[ON]") ;
00001592  4879 0000 2076          pea       @m68kde~1_43.L
00001596  497C      
00001598  4E92      2077          jsr       (A2)
0000159A  584F      2078          addq.w    #4,A7
                    2079   ; printf("\r\nBreak Points :[Disabled]") ;
0000159C  4879 0000 2080          pea       @m68kde~1_44.L
000015A0  499C      
000015A2  4E92      2081          jsr       (A2)
000015A4  584F      2082          addq.w    #4,A7
                    2083   ; DumpRegisters() ;
000015A6  4EB8 10D6 2084          jsr       _DumpRegisters
                    2085   ; printf("\r\nPress <SPACE> to Execute Next Instruction");
000015AA  4879 0000 2086          pea       @m68kde~1_45.L
000015AE  49B8      
000015B0  4E92      2087          jsr       (A2)
000015B2  584F      2088          addq.w    #4,A7
                    2089   ; printf("\r\nPress <ESC> to Resume Program") ;
000015B4  4879 0000 2090          pea       @m68kde~1_46.L
000015B8  49E4      
000015BA  4E92      2091          jsr       (A2)
000015BC  584F      2092          addq.w    #4,A7
                    2093   ; menu() ;
000015BE  4EB9 0000 2094          jsr       _menu
000015C2  216E      
000015C4  245F      2095          move.l    (A7)+,A2
000015C6  4E75      2096          rts
                    2097   ; }
                    2098   ; void ChangeRegisters(void)
                    2099   ; {
                    2100   _ChangeRegisters:
000015C8  4E56 FFFC 2101          link      A6,#-4
000015CC  48E7 303C 2102          movem.l   D2/D3/A2/A3/A4/A5,-(A7)
000015D0  45F9 0000 2103          lea       _printf.L,A2
000015D4  3BF6      
000015D6  47EE FFFC 2104          lea       -4(A6),A3
000015DA  49F8 0CA4 2105          lea       _Get8HexDigits.L,A4
000015DE  4BF8 0B68 2106          lea       __getch.L,A5
                    2107   ; // get register name d0-d7, a0-a7, up, sp, sr, pc
                    2108   ; int reg_val ;
                    2109   ; char c, reg[3] ;
                    2110   ; reg[0] = tolower(_getch()) ;
000015E2  2F00      2111          move.l    D0,-(A7)
000015E4  4E95      2112          jsr       (A5)
000015E6  2200      2113          move.l    D0,D1
000015E8  201F      2114          move.l    (A7)+,D0
000015EA  2F01      2115          move.l    D1,-(A7)
000015EC  4EB9 0000 2116          jsr       _tolower
000015F0  32BE      
000015F2  584F      2117          addq.w    #4,A7
000015F4  1680      2118          move.b    D0,(A3)
                    2119   ; reg[1] = c = tolower(_getch()) ;
000015F6  2F00      2120          move.l    D0,-(A7)
000015F8  4E95      2121          jsr       (A5)
000015FA  2200      2122          move.l    D0,D1
000015FC  201F      2123          move.l    (A7)+,D0
000015FE  2F01      2124          move.l    D1,-(A7)
00001600  4EB9 0000 2125          jsr       _tolower
00001604  32BE      
00001606  584F      2126          addq.w    #4,A7
00001608  1400      2127          move.b    D0,D2
0000160A  1740 0001 2128          move.b    D0,1(A3)
                    2129   ; if(reg[0] == (char)('d'))  {    // change data register
0000160E  1013      2130          move.b    (A3),D0
00001610  0C00 0064 2131          cmp.b     #100,D0
00001614  6600 00AE 2132          bne       ChangeRegisters_1
                    2133   ; if((reg[1] > (char)('7')) || (reg[1] < (char)('0'))) {
00001618  102B 0001 2134          move.b    1(A3),D0
0000161C  0C00 0037 2135          cmp.b     #55,D0
00001620  6E0A      2136          bgt.s     ChangeRegisters_5
00001622  102B 0001 2137          move.b    1(A3),D0
00001626  0C00 0030 2138          cmp.b     #48,D0
0000162A  6C0E      2139          bge.s     ChangeRegisters_3
                    2140   ChangeRegisters_5:
                    2141   ; printf("\r\nIllegal Data Register : Use D0-D7.....\r\n") ;
0000162C  4879 0000 2142          pea       @m68kde~1_47.L
00001630  4A04      
00001632  4E92      2143          jsr       (A2)
00001634  584F      2144          addq.w    #4,A7
                    2145   ; return ;
00001636  6000 0244 2146          bra       ChangeRegisters_6
                    2147   ChangeRegisters_3:
                    2148   ; }
                    2149   ; else {
                    2150   ; printf("\r\nD%c = ", c) ;
0000163A  4882      2151          ext.w     D2
0000163C  48C2      2152          ext.l     D2
0000163E  2F02      2153          move.l    D2,-(A7)
00001640  4879 0000 2154          pea       @m68kde~1_48.L
00001644  4A30      
00001646  4E92      2155          jsr       (A2)
00001648  504F      2156          addq.w    #8,A7
                    2157   ; reg_val = Get8HexDigits(0) ;    // read 32 bit value from user keyboard
0000164A  42A7      2158          clr.l     -(A7)
0000164C  4E94      2159          jsr       (A4)
0000164E  584F      2160          addq.w    #4,A7
00001650  2600      2161          move.l    D0,D3
                    2162   ; }
                    2163   ; // bit cludgy but d0-d7 not stored as an array for good reason
                    2164   ; if(c == (char)('0'))
00001652  0C02 0030 2165          cmp.b     #48,D2
00001656  660A      2166          bne.s     ChangeRegisters_7
                    2167   ; d0 = reg_val ;
00001658  23C3 0B00 2168          move.l    D3,_d0.L
0000165C  00E4      
0000165E  6000 0060 2169          bra       ChangeRegisters_20
                    2170   ChangeRegisters_7:
                    2171   ; else if(c == (char)('1'))
00001662  0C02 0031 2172          cmp.b     #49,D2
00001666  660A      2173          bne.s     ChangeRegisters_9
                    2174   ; d1 = reg_val ;
00001668  23C3 0B00 2175          move.l    D3,_d1.L
0000166C  00E8      
0000166E  6000 0050 2176          bra       ChangeRegisters_20
                    2177   ChangeRegisters_9:
                    2178   ; else if(c == (char)('2'))
00001672  0C02 0032 2179          cmp.b     #50,D2
00001676  660A      2180          bne.s     ChangeRegisters_11
                    2181   ; d2 = reg_val ;
00001678  23C3 0B00 2182          move.l    D3,_d2.L
0000167C  00EC      
0000167E  6000 0040 2183          bra       ChangeRegisters_20
                    2184   ChangeRegisters_11:
                    2185   ; else if(c == (char)('3'))
00001682  0C02 0033 2186          cmp.b     #51,D2
00001686  6608      2187          bne.s     ChangeRegisters_13
                    2188   ; d3 = reg_val ;
00001688  23C3 0B00 2189          move.l    D3,_d3.L
0000168C  00F0      
0000168E  6030      2190          bra.s     ChangeRegisters_20
                    2191   ChangeRegisters_13:
                    2192   ; else if(c == (char)('4'))
00001690  0C02 0034 2193          cmp.b     #52,D2
00001694  6608      2194          bne.s     ChangeRegisters_15
                    2195   ; d4 = reg_val ;
00001696  23C3 0B00 2196          move.l    D3,_d4.L
0000169A  00F4      
0000169C  6022      2197          bra.s     ChangeRegisters_20
                    2198   ChangeRegisters_15:
                    2199   ; else if(c == (char)('5'))
0000169E  0C02 0035 2200          cmp.b     #53,D2
000016A2  6608      2201          bne.s     ChangeRegisters_17
                    2202   ; d5 = reg_val ;
000016A4  23C3 0B00 2203          move.l    D3,_d5.L
000016A8  00F8      
000016AA  6014      2204          bra.s     ChangeRegisters_20
                    2205   ChangeRegisters_17:
                    2206   ; else if(c == (char)('6'))
000016AC  0C02 0036 2207          cmp.b     #54,D2
000016B0  6608      2208          bne.s     ChangeRegisters_19
                    2209   ; d6 = reg_val ;
000016B2  23C3 0B00 2210          move.l    D3,_d6.L
000016B6  00FC      
000016B8  6006      2211          bra.s     ChangeRegisters_20
                    2212   ChangeRegisters_19:
                    2213   ; else
                    2214   ; d7 = reg_val ;
000016BA  23C3 0B00 2215          move.l    D3,_d7.L
000016BE  0100      
                    2216   ChangeRegisters_20:
000016C0  6000 01B6 2217          bra       ChangeRegisters_51
                    2218   ChangeRegisters_1:
                    2219   ; }
                    2220   ; else if(reg[0] == (char)('a'))  {    // change address register, a7 is the user stack pointer, sp is the system stack pointer
000016C4  1013      2221          move.b    (A3),D0
000016C6  0C00 0061 2222          cmp.b     #97,D0
000016CA  6600 00A6 2223          bne       ChangeRegisters_21
                    2224   ; if((c > (char)('7')) || (c < (char)('0'))) {
000016CE  0C02 0037 2225          cmp.b     #55,D2
000016D2  6E06      2226          bgt.s     ChangeRegisters_25
000016D4  0C02 0030 2227          cmp.b     #48,D2
000016D8  6C0E      2228          bge.s     ChangeRegisters_23
                    2229   ChangeRegisters_25:
                    2230   ; printf("\r\nIllegal Address Register : Use A0-A7.....\r\n") ;
000016DA  4879 0000 2231          pea       @m68kde~1_49.L
000016DE  4A3A      
000016E0  4E92      2232          jsr       (A2)
000016E2  584F      2233          addq.w    #4,A7
                    2234   ; return ;
000016E4  6000 0196 2235          bra       ChangeRegisters_6
                    2236   ChangeRegisters_23:
                    2237   ; }
                    2238   ; else {
                    2239   ; printf("\r\nA%c = ", c) ;
000016E8  4882      2240          ext.w     D2
000016EA  48C2      2241          ext.l     D2
000016EC  2F02      2242          move.l    D2,-(A7)
000016EE  4879 0000 2243          pea       @m68kde~1_50.L
000016F2  4A68      
000016F4  4E92      2244          jsr       (A2)
000016F6  504F      2245          addq.w    #8,A7
                    2246   ; reg_val = Get8HexDigits(0) ;    // read 32 bit value from user keyboard
000016F8  42A7      2247          clr.l     -(A7)
000016FA  4E94      2248          jsr       (A4)
000016FC  584F      2249          addq.w    #4,A7
000016FE  2600      2250          move.l    D0,D3
                    2251   ; }
                    2252   ; // bit cludgy but a0-a7 not stored as an array for good reason
                    2253   ; if(c == (char)('0'))
00001700  0C02 0030 2254          cmp.b     #48,D2
00001704  660A      2255          bne.s     ChangeRegisters_26
                    2256   ; a0 = reg_val ;
00001706  23C3 0B00 2257          move.l    D3,_a0.L
0000170A  0104      
0000170C  6000 0060 2258          bra       ChangeRegisters_39
                    2259   ChangeRegisters_26:
                    2260   ; else if(c == (char)('1'))
00001710  0C02 0031 2261          cmp.b     #49,D2
00001714  660A      2262          bne.s     ChangeRegisters_28
                    2263   ; a1 = reg_val ;
00001716  23C3 0B00 2264          move.l    D3,_a1.L
0000171A  0108      
0000171C  6000 0050 2265          bra       ChangeRegisters_39
                    2266   ChangeRegisters_28:
                    2267   ; else if(c == (char)('2'))
00001720  0C02 0032 2268          cmp.b     #50,D2
00001724  660A      2269          bne.s     ChangeRegisters_30
                    2270   ; a2 = reg_val ;
00001726  23C3 0B00 2271          move.l    D3,_a2.L
0000172A  010C      
0000172C  6000 0040 2272          bra       ChangeRegisters_39
                    2273   ChangeRegisters_30:
                    2274   ; else if(c == (char)('3'))
00001730  0C02 0033 2275          cmp.b     #51,D2
00001734  6608      2276          bne.s     ChangeRegisters_32
                    2277   ; a3 = reg_val ;
00001736  23C3 0B00 2278          move.l    D3,_a3.L
0000173A  0110      
0000173C  6030      2279          bra.s     ChangeRegisters_39
                    2280   ChangeRegisters_32:
                    2281   ; else if(c == (char)('4'))
0000173E  0C02 0034 2282          cmp.b     #52,D2
00001742  6608      2283          bne.s     ChangeRegisters_34
                    2284   ; a4 = reg_val ;
00001744  23C3 0B00 2285          move.l    D3,_a4.L
00001748  0114      
0000174A  6022      2286          bra.s     ChangeRegisters_39
                    2287   ChangeRegisters_34:
                    2288   ; else if(c == (char)('5'))
0000174C  0C02 0035 2289          cmp.b     #53,D2
00001750  6608      2290          bne.s     ChangeRegisters_36
                    2291   ; a5 = reg_val ;
00001752  23C3 0B00 2292          move.l    D3,_a5.L
00001756  0118      
00001758  6014      2293          bra.s     ChangeRegisters_39
                    2294   ChangeRegisters_36:
                    2295   ; else if(c == (char)('6'))
0000175A  0C02 0036 2296          cmp.b     #54,D2
0000175E  6608      2297          bne.s     ChangeRegisters_38
                    2298   ; a6 = reg_val ;
00001760  23C3 0B00 2299          move.l    D3,_a6.L
00001764  011C      
00001766  6006      2300          bra.s     ChangeRegisters_39
                    2301   ChangeRegisters_38:
                    2302   ; else
                    2303   ; USP = reg_val ;
00001768  23C3 0B00 2304          move.l    D3,_USP.L
0000176C  0128      
                    2305   ChangeRegisters_39:
0000176E  6000 0108 2306          bra       ChangeRegisters_51
                    2307   ChangeRegisters_21:
                    2308   ; }
                    2309   ; else if((reg[0] == (char)('u')) && (c == (char)('s')))  {
00001772  1013      2310          move.b    (A3),D0
00001774  0C00 0075 2311          cmp.b     #117,D0
00001778  6600 004E 2312          bne       ChangeRegisters_40
0000177C  0C02 0073 2313          cmp.b     #115,D2
00001780  6600 0046 2314          bne       ChangeRegisters_40
                    2315   ; if(tolower(_getch()) == 'p')  {    // change user stack pointer
00001784  2F00      2316          move.l    D0,-(A7)
00001786  4E95      2317          jsr       (A5)
00001788  2200      2318          move.l    D0,D1
0000178A  201F      2319          move.l    (A7)+,D0
0000178C  2F01      2320          move.l    D1,-(A7)
0000178E  4EB9 0000 2321          jsr       _tolower
00001792  32BE      
00001794  584F      2322          addq.w    #4,A7
00001796  0C80 0000 2323          cmp.l     #112,D0
0000179A  0070      
0000179C  6618      2324          bne.s     ChangeRegisters_42
                    2325   ; printf("\r\nUser SP = ") ;
0000179E  4879 0000 2326          pea       @m68kde~1_51.L
000017A2  4A72      
000017A4  4E92      2327          jsr       (A2)
000017A6  584F      2328          addq.w    #4,A7
                    2329   ; USP = Get8HexDigits(0) ;    // read 32 bit value from user keyboard
000017A8  42A7      2330          clr.l     -(A7)
000017AA  4E94      2331          jsr       (A4)
000017AC  584F      2332          addq.w    #4,A7
000017AE  23C0 0B00 2333          move.l    D0,_USP.L
000017B2  0128      
000017B4  600E      2334          bra.s     ChangeRegisters_43
                    2335   ChangeRegisters_42:
                    2336   ; }
                    2337   ; else {
                    2338   ; printf("\r\nIllegal Register....") ;
000017B6  4879 0000 2339          pea       @m68kde~1_52.L
000017BA  4A80      
000017BC  4E92      2340          jsr       (A2)
000017BE  584F      2341          addq.w    #4,A7
                    2342   ; return ;
000017C0  6000 00BA 2343          bra       ChangeRegisters_6
                    2344   ChangeRegisters_43:
000017C4  6000 00B2 2345          bra       ChangeRegisters_51
                    2346   ChangeRegisters_40:
                    2347   ; }
                    2348   ; }
                    2349   ; else if((reg[0] == (char)('s')) && (c == (char)('s')))  {
000017C8  1013      2350          move.b    (A3),D0
000017CA  0C00 0073 2351          cmp.b     #115,D0
000017CE  6600 004E 2352          bne       ChangeRegisters_44
000017D2  0C02 0073 2353          cmp.b     #115,D2
000017D6  6600 0046 2354          bne       ChangeRegisters_44
                    2355   ; if(tolower(_getch()) == 'p')  {    // change system stack pointer
000017DA  2F00      2356          move.l    D0,-(A7)
000017DC  4E95      2357          jsr       (A5)
000017DE  2200      2358          move.l    D0,D1
000017E0  201F      2359          move.l    (A7)+,D0
000017E2  2F01      2360          move.l    D1,-(A7)
000017E4  4EB9 0000 2361          jsr       _tolower
000017E8  32BE      
000017EA  584F      2362          addq.w    #4,A7
000017EC  0C80 0000 2363          cmp.l     #112,D0
000017F0  0070      
000017F2  6618      2364          bne.s     ChangeRegisters_46
                    2365   ; printf("\r\nSystem SP = ") ;
000017F4  4879 0000 2366          pea       @m68kde~1_53.L
000017F8  4A98      
000017FA  4E92      2367          jsr       (A2)
000017FC  584F      2368          addq.w    #4,A7
                    2369   ; SSP = Get8HexDigits(0) ;    // read 32 bit value from user keyboard
000017FE  42A7      2370          clr.l     -(A7)
00001800  4E94      2371          jsr       (A4)
00001802  584F      2372          addq.w    #4,A7
00001804  23C0 0B00 2373          move.l    D0,_SSP.L
00001808  0124      
0000180A  600E      2374          bra.s     ChangeRegisters_47
                    2375   ChangeRegisters_46:
                    2376   ; }
                    2377   ; else {
                    2378   ; printf("\r\nIllegal Register....") ;
0000180C  4879 0000 2379          pea       @m68kde~1_52.L
00001810  4A80      
00001812  4E92      2380          jsr       (A2)
00001814  584F      2381          addq.w    #4,A7
                    2382   ; return ;
00001816  6000 0064 2383          bra       ChangeRegisters_6
                    2384   ChangeRegisters_47:
0000181A  6000 005C 2385          bra       ChangeRegisters_51
                    2386   ChangeRegisters_44:
                    2387   ; }
                    2388   ; }
                    2389   ; else if((reg[0] == (char)('p')) && (c == (char)('c')))  {    // change program counter
0000181E  1013      2390          move.b    (A3),D0
00001820  0C00 0070 2391          cmp.b     #112,D0
00001824  6620      2392          bne.s     ChangeRegisters_48
00001826  0C02 0063 2393          cmp.b     #99,D2
0000182A  661A      2394          bne.s     ChangeRegisters_48
                    2395   ; printf("\r\nPC = ") ;
0000182C  4879 0000 2396          pea       @m68kde~1_54.L
00001830  4AA8      
00001832  4E92      2397          jsr       (A2)
00001834  584F      2398          addq.w    #4,A7
                    2399   ; PC = Get8HexDigits(0) ;    // read 32 bit value from user keyboard
00001836  42A7      2400          clr.l     -(A7)
00001838  4E94      2401          jsr       (A4)
0000183A  584F      2402          addq.w    #4,A7
0000183C  23C0 0B00 2403          move.l    D0,_PC.L
00001840  0120      
00001842  6000 0034 2404          bra       ChangeRegisters_51
                    2405   ChangeRegisters_48:
                    2406   ; }
                    2407   ; else if((reg[0] == (char)('s')) && (c == (char)('r')))  {    // change status register
00001846  1013      2408          move.b    (A3),D0
00001848  0C00 0073 2409          cmp.b     #115,D0
0000184C  6620      2410          bne.s     ChangeRegisters_50
0000184E  0C02 0072 2411          cmp.b     #114,D2
00001852  661A      2412          bne.s     ChangeRegisters_50
                    2413   ; printf("\r\nSR = ") ;
00001854  4879 0000 2414          pea       @m68kde~1_55.L
00001858  4AB0      
0000185A  4E92      2415          jsr       (A2)
0000185C  584F      2416          addq.w    #4,A7
                    2417   ; SR = Get4HexDigits(0) ;    // read 16 bit value from user keyboard
0000185E  42A7      2418          clr.l     -(A7)
00001860  4EB8 0C58 2419          jsr       _Get4HexDigits
00001864  584F      2420          addq.w    #4,A7
00001866  33C0 0B00 2421          move.w    D0,_SR.L
0000186A  012C      
0000186C  600A      2422          bra.s     ChangeRegisters_51
                    2423   ChangeRegisters_50:
                    2424   ; }
                    2425   ; else
                    2426   ; printf("\r\nIllegal Register: Use A0-A7, D0-D7, SSP, USP, PC or SR\r\n") ;
0000186E  4879 0000 2427          pea       @m68kde~1_56.L
00001872  4AB8      
00001874  4E92      2428          jsr       (A2)
00001876  584F      2429          addq.w    #4,A7
                    2430   ChangeRegisters_51:
                    2431   ; DumpRegisters() ;
00001878  4EB8 10D6 2432          jsr       _DumpRegisters
                    2433   ChangeRegisters_6:
0000187C  4CDF 3C0C 2434          movem.l   (A7)+,D2/D3/A2/A3/A4/A5
00001880  4E5E      2435          unlk      A6
00001882  4E75      2436          rts
                    2437   ; }
                    2438   ; void BreakPointDisplay(void)
                    2439   ; {
                    2440   _BreakPointDisplay:
00001884  48E7 3030 2441          movem.l   D2/D3/A2/A3,-(A7)
00001888  45F9 0000 2442          lea       _printf.L,A2
0000188C  3BF6      
0000188E  47F9 0B00 2443          lea       _BreakPointAddress.L,A3
00001892  012E      
                    2444   ; int i, BreakPointsSet = 0 ;
00001894  4283      2445          clr.l     D3
                    2446   ; // any break points  set
                    2447   ; for(i = 0; i < 8; i++)  {
00001896  4282      2448          clr.l     D2
                    2449   BreakPointDisplay_1:
00001898  0C82 0000 2450          cmp.l     #8,D2
0000189C  0008      
0000189E  6C1C      2451          bge.s     BreakPointDisplay_3
                    2452   ; if(BreakPointSetOrCleared[i] == 1)
000018A0  2002      2453          move.l    D2,D0
000018A2  E588      2454          lsl.l     #2,D0
000018A4  41F9 0B00 2455          lea       _BreakPointSetOrCleared.L,A0
000018A8  015E      
000018AA  2030 0800 2456          move.l    0(A0,D0.L),D0
000018AE  0C80 0000 2457          cmp.l     #1,D0
000018B2  0001      
000018B4  6602      2458          bne.s     BreakPointDisplay_4
                    2459   ; BreakPointsSet = 1;
000018B6  7601      2460          moveq     #1,D3
                    2461   BreakPointDisplay_4:
000018B8  5282      2462          addq.l    #1,D2
000018BA  60DC      2463          bra       BreakPointDisplay_1
                    2464   BreakPointDisplay_3:
                    2465   ; }
                    2466   ; if(BreakPointsSet == 1) {
000018BC  0C83 0000 2467          cmp.l     #1,D3
000018C0  0001      
000018C2  6616      2468          bne.s     BreakPointDisplay_6
                    2469   ; printf("\r\n\r\nNum     Address      Instruction") ;
000018C4  4879 0000 2470          pea       @m68kde~1_57.L
000018C8  4AF4      
000018CA  4E92      2471          jsr       (A2)
000018CC  584F      2472          addq.w    #4,A7
                    2473   ; printf("\r\n---     ---------    -----------") ;
000018CE  4879 0000 2474          pea       @m68kde~1_58.L
000018D2  4B1A      
000018D4  4E92      2475          jsr       (A2)
000018D6  584F      2476          addq.w    #4,A7
000018D8  600A      2477          bra.s     BreakPointDisplay_7
                    2478   BreakPointDisplay_6:
                    2479   ; }
                    2480   ; else
                    2481   ; printf("\r\nNo BreakPoints Set") ;
000018DA  4879 0000 2482          pea       @m68kde~1_59.L
000018DE  4B3E      
000018E0  4E92      2483          jsr       (A2)
000018E2  584F      2484          addq.w    #4,A7
                    2485   BreakPointDisplay_7:
                    2486   ; for(i = 0; i < 8; i++)  {
000018E4  4282      2487          clr.l     D2
                    2488   BreakPointDisplay_8:
000018E6  0C82 0000 2489          cmp.l     #8,D2
000018EA  0008      
000018EC  6C00 005A 2490          bge       BreakPointDisplay_10
                    2491   ; // put opcode back, then put break point back
                    2492   ; if(BreakPointSetOrCleared[i] == 1)  {
000018F0  2002      2493          move.l    D2,D0
000018F2  E588      2494          lsl.l     #2,D0
000018F4  41F9 0B00 2495          lea       _BreakPointSetOrCleared.L,A0
000018F8  015E      
000018FA  2030 0800 2496          move.l    0(A0,D0.L),D0
000018FE  0C80 0000 2497          cmp.l     #1,D0
00001902  0001      
00001904  6600 003E 2498          bne       BreakPointDisplay_11
                    2499   ; *(unsigned short int *)(BreakPointAddress[i]) = BreakPointInstruction[i];
00001908  2002      2500          move.l    D2,D0
0000190A  E388      2501          lsl.l     #1,D0
0000190C  41F9 0B00 2502          lea       _BreakPointInstruction.L,A0
00001910  014E      
00001912  2202      2503          move.l    D2,D1
00001914  E589      2504          lsl.l     #2,D1
00001916  2233 1800 2505          move.l    0(A3,D1.L),D1
0000191A  2241      2506          move.l    D1,A1
0000191C  32B0 0800 2507          move.w    0(A0,D0.L),(A1)
                    2508   ; *(unsigned short int *)(BreakPointAddress[i]) = (unsigned short int)(0x4e4e) ;
00001920  2002      2509          move.l    D2,D0
00001922  E588      2510          lsl.l     #2,D0
00001924  2033 0800 2511          move.l    0(A3,D0.L),D0
00001928  2040      2512          move.l    D0,A0
0000192A  30BC 4E4E 2513          move.w    #20046,(A0)
                    2514   ; printf("\r\n%3d     $%08x",i, BreakPointAddress[i]) ;
0000192E  2202      2515          move.l    D2,D1
00001930  E589      2516          lsl.l     #2,D1
00001932  2F33 1800 2517          move.l    0(A3,D1.L),-(A7)
00001936  2F02      2518          move.l    D2,-(A7)
00001938  4879 0000 2519          pea       @m68kde~1_60.L
0000193C  4B54      
0000193E  4E92      2520          jsr       (A2)
00001940  DEFC 000C 2521          add.w     #12,A7
                    2522   BreakPointDisplay_11:
00001944  5282      2523          addq.l    #1,D2
00001946  609E      2524          bra       BreakPointDisplay_8
                    2525   BreakPointDisplay_10:
                    2526   ; }
                    2527   ; }
                    2528   ; printf("\r\n") ;
00001948  4879 0000 2529          pea       @m68kde~1_1.L
0000194C  45CC      
0000194E  4E92      2530          jsr       (A2)
00001950  584F      2531          addq.w    #4,A7
00001952  4CDF 0C0C 2532          movem.l   (A7)+,D2/D3/A2/A3
00001956  4E75      2533          rts
                    2534   ; }
                    2535   ; void WatchPointDisplay(void)
                    2536   ; {
                    2537   _WatchPointDisplay:
00001958  48E7 3020 2538          movem.l   D2/D3/A2,-(A7)
0000195C  45F9 0000 2539          lea       _printf.L,A2
00001960  3BF6      
                    2540   ; int i ;
                    2541   ; int WatchPointsSet = 0 ;
00001962  4283      2542          clr.l     D3
                    2543   ; // any watchpoints set
                    2544   ; for(i = 0; i < 8; i++)  {
00001964  4282      2545          clr.l     D2
                    2546   WatchPointDisplay_1:
00001966  0C82 0000 2547          cmp.l     #8,D2
0000196A  0008      
0000196C  6C1C      2548          bge.s     WatchPointDisplay_3
                    2549   ; if(WatchPointSetOrCleared[i] == 1)
0000196E  2002      2550          move.l    D2,D0
00001970  E588      2551          lsl.l     #2,D0
00001972  41F9 0B00 2552          lea       _WatchPointSetOrCleared.L,A0
00001976  01A2      
00001978  2030 0800 2553          move.l    0(A0,D0.L),D0
0000197C  0C80 0000 2554          cmp.l     #1,D0
00001980  0001      
00001982  6602      2555          bne.s     WatchPointDisplay_4
                    2556   ; WatchPointsSet = 1;
00001984  7601      2557          moveq     #1,D3
                    2558   WatchPointDisplay_4:
00001986  5282      2559          addq.l    #1,D2
00001988  60DC      2560          bra       WatchPointDisplay_1
                    2561   WatchPointDisplay_3:
                    2562   ; }
                    2563   ; if(WatchPointsSet == 1) {
0000198A  0C83 0000 2564          cmp.l     #1,D3
0000198E  0001      
00001990  6616      2565          bne.s     WatchPointDisplay_6
                    2566   ; printf("\r\nNum     Address") ;
00001992  4879 0000 2567          pea       @m68kde~1_61.L
00001996  4B64      
00001998  4E92      2568          jsr       (A2)
0000199A  584F      2569          addq.w    #4,A7
                    2570   ; printf("\r\n---     ---------") ;
0000199C  4879 0000 2571          pea       @m68kde~1_62.L
000019A0  4B76      
000019A2  4E92      2572          jsr       (A2)
000019A4  584F      2573          addq.w    #4,A7
000019A6  600A      2574          bra.s     WatchPointDisplay_7
                    2575   WatchPointDisplay_6:
                    2576   ; }
                    2577   ; else
                    2578   ; printf("\r\nNo WatchPoints Set") ;
000019A8  4879 0000 2579          pea       @m68kde~1_63.L
000019AC  4B8A      
000019AE  4E92      2580          jsr       (A2)
000019B0  584F      2581          addq.w    #4,A7
                    2582   WatchPointDisplay_7:
                    2583   ; for(i = 0; i < 8; i++)  {
000019B2  4282      2584          clr.l     D2
                    2585   WatchPointDisplay_8:
000019B4  0C82 0000 2586          cmp.l     #8,D2
000019B8  0008      
000019BA  6C00 0038 2587          bge       WatchPointDisplay_10
                    2588   ; if(WatchPointSetOrCleared[i] == 1)
000019BE  2002      2589          move.l    D2,D0
000019C0  E588      2590          lsl.l     #2,D0
000019C2  41F9 0B00 2591          lea       _WatchPointSetOrCleared.L,A0
000019C6  01A2      
000019C8  2030 0800 2592          move.l    0(A0,D0.L),D0
000019CC  0C80 0000 2593          cmp.l     #1,D0
000019D0  0001      
000019D2  661C      2594          bne.s     WatchPointDisplay_11
                    2595   ; printf("\r\n%3d     $%08x",i, WatchPointAddress[i]) ;
000019D4  2202      2596          move.l    D2,D1
000019D6  E589      2597          lsl.l     #2,D1
000019D8  41F9 0B00 2598          lea       _WatchPointAddress.L,A0
000019DC  0182      
000019DE  2F30 1800 2599          move.l    0(A0,D1.L),-(A7)
000019E2  2F02      2600          move.l    D2,-(A7)
000019E4  4879 0000 2601          pea       @m68kde~1_60.L
000019E8  4B54      
000019EA  4E92      2602          jsr       (A2)
000019EC  DEFC 000C 2603          add.w     #12,A7
                    2604   WatchPointDisplay_11:
000019F0  5282      2605          addq.l    #1,D2
000019F2  60C0      2606          bra       WatchPointDisplay_8
                    2607   WatchPointDisplay_10:
                    2608   ; }
                    2609   ; printf("\r\n") ;
000019F4  4879 0000 2610          pea       @m68kde~1_1.L
000019F8  45CC      
000019FA  4E92      2611          jsr       (A2)
000019FC  584F      2612          addq.w    #4,A7
000019FE  4CDF 040C 2613          movem.l   (A7)+,D2/D3/A2
00001A02  4E75      2614          rts
                    2615   ; }
                    2616   ; void BreakPointClear(void)
                    2617   ; {
                    2618   _BreakPointClear:
00001A04  4E56 FFFC 2619          link      A6,#-4
00001A08  48E7 2020 2620          movem.l   D2/A2,-(A7)
00001A0C  45F9 0000 2621          lea       _printf.L,A2
00001A10  3BF6      
                    2622   ; unsigned int i ;
                    2623   ; volatile unsigned short int *ProgramBreakPointAddress ;
                    2624   ; BreakPointDisplay() ;
00001A12  4EB8 1884 2625          jsr       _BreakPointDisplay
                    2626   ; printf("\r\nEnter Break Point Number: ") ;
00001A16  4879 0000 2627          pea       @m68kde~1_64.L
00001A1A  4BA0      
00001A1C  4E92      2628          jsr       (A2)
00001A1E  584F      2629          addq.w    #4,A7
                    2630   ; i = xtod(_getch()) ;           // get break pointer number
00001A20  2F00      2631          move.l    D0,-(A7)
00001A22  4EB8 0B68 2632          jsr       __getch
00001A26  2200      2633          move.l    D0,D1
00001A28  201F      2634          move.l    (A7)+,D0
00001A2A  2F01      2635          move.l    D1,-(A7)
00001A2C  4EB8 0BD2 2636          jsr       _xtod
00001A30  584F      2637          addq.w    #4,A7
00001A32  C0BC 0000 2638          and.l     #255,D0
00001A36  00FF      
00001A38  2400      2639          move.l    D0,D2
                    2640   ; if((i < 0) || (i > 7))   {
00001A3A  0C82 0000 2641          cmp.l     #0,D2
00001A3E  0000      
00001A40  6508      2642          blo.s     BreakPointClear_3
00001A42  0C82 0000 2643          cmp.l     #7,D2
00001A46  0007      
00001A48  630E      2644          bls.s     BreakPointClear_1
                    2645   BreakPointClear_3:
                    2646   ; printf("\r\nIllegal Range : Use 0 - 7") ;
00001A4A  4879 0000 2647          pea       @m68kde~1_65.L
00001A4E  4BBE      
00001A50  4E92      2648          jsr       (A2)
00001A52  584F      2649          addq.w    #4,A7
                    2650   ; return ;
00001A54  6000 0080 2651          bra       BreakPointClear_4
                    2652   BreakPointClear_1:
                    2653   ; }
                    2654   ; if(BreakPointSetOrCleared[i] == 1)  {       // if break point set
00001A58  2002      2655          move.l    D2,D0
00001A5A  E588      2656          lsl.l     #2,D0
00001A5C  41F9 0B00 2657          lea       _BreakPointSetOrCleared.L,A0
00001A60  015E      
00001A62  2030 0800 2658          move.l    0(A0,D0.L),D0
00001A66  0C80 0000 2659          cmp.l     #1,D0
00001A6A  0001      
00001A6C  6600 005A 2660          bne       BreakPointClear_5
                    2661   ; ProgramBreakPointAddress = (volatile unsigned short int *)(BreakPointAddress[i]) ;     // point to the instruction in the user program we are about to change
00001A70  2002      2662          move.l    D2,D0
00001A72  E588      2663          lsl.l     #2,D0
00001A74  41F9 0B00 2664          lea       _BreakPointAddress.L,A0
00001A78  012E      
00001A7A  2D70 0800 2665          move.l    0(A0,D0.L),-4(A6)
00001A7E  FFFC      
                    2666   ; BreakPointAddress[i] = 0 ;
00001A80  2002      2667          move.l    D2,D0
00001A82  E588      2668          lsl.l     #2,D0
00001A84  41F9 0B00 2669          lea       _BreakPointAddress.L,A0
00001A88  012E      
00001A8A  42B0 0800 2670          clr.l     0(A0,D0.L)
                    2671   ; BreakPointSetOrCleared[i] = 0 ;
00001A8E  2002      2672          move.l    D2,D0
00001A90  E588      2673          lsl.l     #2,D0
00001A92  41F9 0B00 2674          lea       _BreakPointSetOrCleared.L,A0
00001A96  015E      
00001A98  42B0 0800 2675          clr.l     0(A0,D0.L)
                    2676   ; *ProgramBreakPointAddress = BreakPointInstruction[i] ;  // put original instruction back
00001A9C  2002      2677          move.l    D2,D0
00001A9E  E388      2678          lsl.l     #1,D0
00001AA0  41F9 0B00 2679          lea       _BreakPointInstruction.L,A0
00001AA4  014E      
00001AA6  226E FFFC 2680          move.l    -4(A6),A1
00001AAA  32B0 0800 2681          move.w    0(A0,D0.L),(A1)
                    2682   ; BreakPointInstruction[i] = 0 ;
00001AAE  2002      2683          move.l    D2,D0
00001AB0  E388      2684          lsl.l     #1,D0
00001AB2  41F9 0B00 2685          lea       _BreakPointInstruction.L,A0
00001AB6  014E      
00001AB8  4270 0800 2686          clr.w     0(A0,D0.L)
                    2687   ; printf("\r\nBreak Point Cleared.....\r\n") ;
00001ABC  4879 0000 2688          pea       @m68kde~1_66.L
00001AC0  4BDA      
00001AC2  4E92      2689          jsr       (A2)
00001AC4  584F      2690          addq.w    #4,A7
00001AC6  600A      2691          bra.s     BreakPointClear_6
                    2692   BreakPointClear_5:
                    2693   ; }
                    2694   ; else
                    2695   ; printf("\r\nBreak Point wasn't Set.....") ;
00001AC8  4879 0000 2696          pea       @m68kde~1_67.L
00001ACC  4BF8      
00001ACE  4E92      2697          jsr       (A2)
00001AD0  584F      2698          addq.w    #4,A7
                    2699   BreakPointClear_6:
                    2700   ; BreakPointDisplay() ;
00001AD2  4EB8 1884 2701          jsr       _BreakPointDisplay
                    2702   ; return ;
                    2703   BreakPointClear_4:
00001AD6  4CDF 0404 2704          movem.l   (A7)+,D2/A2
00001ADA  4E5E      2705          unlk      A6
00001ADC  4E75      2706          rts
                    2707   ; }
                    2708   ; void WatchPointClear(void)
                    2709   ; {
                    2710   _WatchPointClear:
00001ADE  48E7 2020 2711          movem.l   D2/A2,-(A7)
00001AE2  45F9 0000 2712          lea       _printf.L,A2
00001AE6  3BF6      
                    2713   ; unsigned int i ;
                    2714   ; WatchPointDisplay() ;
00001AE8  4EB8 1958 2715          jsr       _WatchPointDisplay
                    2716   ; printf("\r\nEnter Watch Point Number: ") ;
00001AEC  4879 0000 2717          pea       @m68kde~1_68.L
00001AF0  4C16      
00001AF2  4E92      2718          jsr       (A2)
00001AF4  584F      2719          addq.w    #4,A7
                    2720   ; i = xtod(_getch()) ;           // get watch pointer number
00001AF6  2F00      2721          move.l    D0,-(A7)
00001AF8  4EB8 0B68 2722          jsr       __getch
00001AFC  2200      2723          move.l    D0,D1
00001AFE  201F      2724          move.l    (A7)+,D0
00001B00  2F01      2725          move.l    D1,-(A7)
00001B02  4EB8 0BD2 2726          jsr       _xtod
00001B06  584F      2727          addq.w    #4,A7
00001B08  C0BC 0000 2728          and.l     #255,D0
00001B0C  00FF      
00001B0E  2400      2729          move.l    D0,D2
                    2730   ; if((i < 0) || (i > 7))   {
00001B10  0C82 0000 2731          cmp.l     #0,D2
00001B14  0000      
00001B16  6508      2732          blo.s     WatchPointClear_3
00001B18  0C82 0000 2733          cmp.l     #7,D2
00001B1C  0007      
00001B1E  630E      2734          bls.s     WatchPointClear_1
                    2735   WatchPointClear_3:
                    2736   ; printf("\r\nIllegal Range : Use 0 - 7") ;
00001B20  4879 0000 2737          pea       @m68kde~1_65.L
00001B24  4BBE      
00001B26  4E92      2738          jsr       (A2)
00001B28  584F      2739          addq.w    #4,A7
                    2740   ; return ;
00001B2A  6000 004E 2741          bra       WatchPointClear_4
                    2742   WatchPointClear_1:
                    2743   ; }
                    2744   ; if(WatchPointSetOrCleared[i] == 1)  {       // if watch point set
00001B2E  2002      2745          move.l    D2,D0
00001B30  E588      2746          lsl.l     #2,D0
00001B32  41F9 0B00 2747          lea       _WatchPointSetOrCleared.L,A0
00001B36  01A2      
00001B38  2030 0800 2748          move.l    0(A0,D0.L),D0
00001B3C  0C80 0000 2749          cmp.l     #1,D0
00001B40  0001      
00001B42  6628      2750          bne.s     WatchPointClear_5
                    2751   ; WatchPointAddress[i] = 0 ;
00001B44  2002      2752          move.l    D2,D0
00001B46  E588      2753          lsl.l     #2,D0
00001B48  41F9 0B00 2754          lea       _WatchPointAddress.L,A0
00001B4C  0182      
00001B4E  42B0 0800 2755          clr.l     0(A0,D0.L)
                    2756   ; WatchPointSetOrCleared[i] = 0 ;
00001B52  2002      2757          move.l    D2,D0
00001B54  E588      2758          lsl.l     #2,D0
00001B56  41F9 0B00 2759          lea       _WatchPointSetOrCleared.L,A0
00001B5A  01A2      
00001B5C  42B0 0800 2760          clr.l     0(A0,D0.L)
                    2761   ; printf("\r\nWatch Point Cleared.....\r\n") ;
00001B60  4879 0000 2762          pea       @m68kde~1_69.L
00001B64  4C34      
00001B66  4E92      2763          jsr       (A2)
00001B68  584F      2764          addq.w    #4,A7
00001B6A  600A      2765          bra.s     WatchPointClear_6
                    2766   WatchPointClear_5:
                    2767   ; }
                    2768   ; else
                    2769   ; printf("\r\nWatch Point Was not Set.....") ;
00001B6C  4879 0000 2770          pea       @m68kde~1_70.L
00001B70  4C52      
00001B72  4E92      2771          jsr       (A2)
00001B74  584F      2772          addq.w    #4,A7
                    2773   WatchPointClear_6:
                    2774   ; WatchPointDisplay() ;
00001B76  4EB8 1958 2775          jsr       _WatchPointDisplay
                    2776   ; return ;
                    2777   WatchPointClear_4:
00001B7A  4CDF 0404 2778          movem.l   (A7)+,D2/A2
00001B7E  4E75      2779          rts
                    2780   ; }
                    2781   ; void DisableBreakPoints(void)
                    2782   ; {
                    2783   _DisableBreakPoints:
00001B80  4E56 FFFC 2784          link      A6,#-4
00001B84  2F02      2785          move.l    D2,-(A7)
                    2786   ; int i ;
                    2787   ; volatile unsigned short int *ProgramBreakPointAddress ;
                    2788   ; for(i = 0; i < 8; i++)  {
00001B86  4282      2789          clr.l     D2
                    2790   DisableBreakPoints_1:
00001B88  0C82 0000 2791          cmp.l     #8,D2
00001B8C  0008      
00001B8E  6C00 003E 2792          bge       DisableBreakPoints_3
                    2793   ; if(BreakPointSetOrCleared[i] == 1)    {                                                    // if break point set
00001B92  2002      2794          move.l    D2,D0
00001B94  E588      2795          lsl.l     #2,D0
00001B96  41F9 0B00 2796          lea       _BreakPointSetOrCleared.L,A0
00001B9A  015E      
00001B9C  2030 0800 2797          move.l    0(A0,D0.L),D0
00001BA0  0C80 0000 2798          cmp.l     #1,D0
00001BA4  0001      
00001BA6  6622      2799          bne.s     DisableBreakPoints_4
                    2800   ; ProgramBreakPointAddress = (volatile unsigned short int *)(BreakPointAddress[i]) ;     // point to the instruction in the user program where the break point has been set
00001BA8  2002      2801          move.l    D2,D0
00001BAA  E588      2802          lsl.l     #2,D0
00001BAC  41F9 0B00 2803          lea       _BreakPointAddress.L,A0
00001BB0  012E      
00001BB2  2D70 0800 2804          move.l    0(A0,D0.L),-4(A6)
00001BB6  FFFC      
                    2805   ; *ProgramBreakPointAddress = BreakPointInstruction[i];                                  // copy the instruction back to the user program overwritting the $4e4e
00001BB8  2002      2806          move.l    D2,D0
00001BBA  E388      2807          lsl.l     #1,D0
00001BBC  41F9 0B00 2808          lea       _BreakPointInstruction.L,A0
00001BC0  014E      
00001BC2  226E FFFC 2809          move.l    -4(A6),A1
00001BC6  32B0 0800 2810          move.w    0(A0,D0.L),(A1)
                    2811   DisableBreakPoints_4:
00001BCA  5282      2812          addq.l    #1,D2
00001BCC  60BA      2813          bra       DisableBreakPoints_1
                    2814   DisableBreakPoints_3:
00001BCE  241F      2815          move.l    (A7)+,D2
00001BD0  4E5E      2816          unlk      A6
00001BD2  4E75      2817          rts
                    2818   ; }
                    2819   ; }
                    2820   ; }
                    2821   ; void EnableBreakPoints(void)
                    2822   ; {
                    2823   _EnableBreakPoints:
00001BD4  4E56 FFFC 2824          link      A6,#-4
00001BD8  2F02      2825          move.l    D2,-(A7)
                    2826   ; int i ;
                    2827   ; volatile unsigned short int *ProgramBreakPointAddress ;
                    2828   ; for(i = 0; i < 8; i++)  {
00001BDA  4282      2829          clr.l     D2
                    2830   EnableBreakPoints_1:
00001BDC  0C82 0000 2831          cmp.l     #8,D2
00001BE0  0008      
00001BE2  6C32      2832          bge.s     EnableBreakPoints_3
                    2833   ; if(BreakPointSetOrCleared[i] == 1)    {                                                     // if break point set
00001BE4  2002      2834          move.l    D2,D0
00001BE6  E588      2835          lsl.l     #2,D0
00001BE8  41F9 0B00 2836          lea       _BreakPointSetOrCleared.L,A0
00001BEC  015E      
00001BEE  2030 0800 2837          move.l    0(A0,D0.L),D0
00001BF2  0C80 0000 2838          cmp.l     #1,D0
00001BF6  0001      
00001BF8  6618      2839          bne.s     EnableBreakPoints_4
                    2840   ; ProgramBreakPointAddress = (volatile unsigned short int *)(BreakPointAddress[i]) ;     // point to the instruction in the user program where the break point has been set
00001BFA  2002      2841          move.l    D2,D0
00001BFC  E588      2842          lsl.l     #2,D0
00001BFE  41F9 0B00 2843          lea       _BreakPointAddress.L,A0
00001C02  012E      
00001C04  2D70 0800 2844          move.l    0(A0,D0.L),-4(A6)
00001C08  FFFC      
                    2845   ; *ProgramBreakPointAddress = (unsigned short int)(0x4e4e);                              // put the breakpoint back in user program
00001C0A  206E FFFC 2846          move.l    -4(A6),A0
00001C0E  30BC 4E4E 2847          move.w    #20046,(A0)
                    2848   EnableBreakPoints_4:
00001C12  5282      2849          addq.l    #1,D2
00001C14  60C6      2850          bra       EnableBreakPoints_1
                    2851   EnableBreakPoints_3:
00001C16  241F      2852          move.l    (A7)+,D2
00001C18  4E5E      2853          unlk      A6
00001C1A  4E75      2854          rts
                    2855   ; }
                    2856   ; }
                    2857   ; }
                    2858   ; void KillAllBreakPoints(void)
                    2859   ; {
                    2860   _KillAllBreakPoints:
00001C1C  4E56 FFFC 2861          link      A6,#-4
00001C20  2F02      2862          move.l    D2,-(A7)
                    2863   ; int i ;
                    2864   ; volatile unsigned short int *ProgramBreakPointAddress ;
                    2865   ; for(i = 0; i < 8; i++)  {
00001C22  4282      2866          clr.l     D2
                    2867   KillAllBreakPoints_1:
00001C24  0C82 0000 2868          cmp.l     #8,D2
00001C28  0008      
00001C2A  6C00 0052 2869          bge       KillAllBreakPoints_3
                    2870   ; // clear BP
                    2871   ; ProgramBreakPointAddress = (volatile unsigned short int *)(BreakPointAddress[i]) ;     // point to the instruction in the user program where the break point has been set
00001C2E  2002      2872          move.l    D2,D0
00001C30  E588      2873          lsl.l     #2,D0
00001C32  41F9 0B00 2874          lea       _BreakPointAddress.L,A0
00001C36  012E      
00001C38  2D70 0800 2875          move.l    0(A0,D0.L),-4(A6)
00001C3C  FFFC      
                    2876   ; *ProgramBreakPointAddress = BreakPointInstruction[i];                                  // copy the instruction back to the user program
00001C3E  2002      2877          move.l    D2,D0
00001C40  E388      2878          lsl.l     #1,D0
00001C42  41F9 0B00 2879          lea       _BreakPointInstruction.L,A0
00001C46  014E      
00001C48  226E FFFC 2880          move.l    -4(A6),A1
00001C4C  32B0 0800 2881          move.w    0(A0,D0.L),(A1)
                    2882   ; BreakPointAddress[i] = 0 ;                                                             // set BP address to NULL
00001C50  2002      2883          move.l    D2,D0
00001C52  E588      2884          lsl.l     #2,D0
00001C54  41F9 0B00 2885          lea       _BreakPointAddress.L,A0
00001C58  012E      
00001C5A  42B0 0800 2886          clr.l     0(A0,D0.L)
                    2887   ; BreakPointInstruction[i] = 0 ;
00001C5E  2002      2888          move.l    D2,D0
00001C60  E388      2889          lsl.l     #1,D0
00001C62  41F9 0B00 2890          lea       _BreakPointInstruction.L,A0
00001C66  014E      
00001C68  4270 0800 2891          clr.w     0(A0,D0.L)
                    2892   ; BreakPointSetOrCleared[i] = 0 ;                                                        // mark break point as cleared for future setting
00001C6C  2002      2893          move.l    D2,D0
00001C6E  E588      2894          lsl.l     #2,D0
00001C70  41F9 0B00 2895          lea       _BreakPointSetOrCleared.L,A0
00001C74  015E      
00001C76  42B0 0800 2896          clr.l     0(A0,D0.L)
00001C7A  5282      2897          addq.l    #1,D2
00001C7C  60A6      2898          bra       KillAllBreakPoints_1
                    2899   KillAllBreakPoints_3:
00001C7E  241F      2900          move.l    (A7)+,D2
00001C80  4E5E      2901          unlk      A6
00001C82  4E75      2902          rts
                    2903   ; }
                    2904   ; //BreakPointDisplay() ;       // display the break points
                    2905   ; }
                    2906   ; void KillAllWatchPoints(void)
                    2907   ; {
                    2908   _KillAllWatchPoints:
00001C84  2F02      2909          move.l    D2,-(A7)
                    2910   ; int i ;
                    2911   ; for(i = 0; i < 8; i++)  {
00001C86  4282      2912          clr.l     D2
                    2913   KillAllWatchPoints_1:
00001C88  0C82 0000 2914          cmp.l     #8,D2
00001C8C  0008      
00001C8E  6C20      2915          bge.s     KillAllWatchPoints_3
                    2916   ; WatchPointAddress[i] = 0 ;                                                             // set BP address to NULL
00001C90  2002      2917          move.l    D2,D0
00001C92  E588      2918          lsl.l     #2,D0
00001C94  41F9 0B00 2919          lea       _WatchPointAddress.L,A0
00001C98  0182      
00001C9A  42B0 0800 2920          clr.l     0(A0,D0.L)
                    2921   ; WatchPointSetOrCleared[i] = 0 ;                                                        // mark break point as cleared for future setting
00001C9E  2002      2922          move.l    D2,D0
00001CA0  E588      2923          lsl.l     #2,D0
00001CA2  41F9 0B00 2924          lea       _WatchPointSetOrCleared.L,A0
00001CA6  01A2      
00001CA8  42B0 0800 2925          clr.l     0(A0,D0.L)
00001CAC  5282      2926          addq.l    #1,D2
00001CAE  60D8      2927          bra       KillAllWatchPoints_1
                    2928   KillAllWatchPoints_3:
00001CB0  241F      2929          move.l    (A7)+,D2
00001CB2  4E75      2930          rts
                    2931   ; }
                    2932   ; //WatchPointDisplay() ;       // display the break points
                    2933   ; }
                    2934   ; void SetBreakPoint(void)
                    2935   ; {
                    2936   _SetBreakPoint:
00001CB4  4E56 FFFC 2937          link      A6,#-4
00001CB8  48E7 3830 2938          movem.l   D2/D3/D4/A2/A3,-(A7)
00001CBC  45F9 0000 2939          lea       _printf.L,A2
00001CC0  3BF6      
00001CC2  47F9 0B00 2940          lea       _BreakPointSetOrCleared.L,A3
00001CC6  015E      
                    2941   ; int i ;
                    2942   ; int BPNumber;
                    2943   ; int BPAddress;
                    2944   ; volatile unsigned short int *ProgramBreakPointAddress ;
                    2945   ; // see if any free break points
                    2946   ; for(i = 0; i < 8; i ++) {
00001CC8  4282      2947          clr.l     D2
                    2948   SetBreakPoint_1:
00001CCA  0C82 0000 2949          cmp.l     #8,D2
00001CCE  0008      
00001CD0  6C10      2950          bge.s     SetBreakPoint_3
                    2951   ; if( BreakPointSetOrCleared[i] == 0)
00001CD2  2002      2952          move.l    D2,D0
00001CD4  E588      2953          lsl.l     #2,D0
00001CD6  2033 0800 2954          move.l    0(A3,D0.L),D0
00001CDA  6602      2955          bne.s     SetBreakPoint_4
                    2956   ; break ;         // if spare BP found allow user to set it
00001CDC  6004      2957          bra.s     SetBreakPoint_3
                    2958   SetBreakPoint_4:
00001CDE  5282      2959          addq.l    #1,D2
00001CE0  60E8      2960          bra       SetBreakPoint_1
                    2961   SetBreakPoint_3:
                    2962   ; }
                    2963   ; if(i == 8) {
00001CE2  0C82 0000 2964          cmp.l     #8,D2
00001CE6  0008      
00001CE8  660E      2965          bne.s     SetBreakPoint_6
                    2966   ; printf("\r\nNo FREE Break Points.....") ;
00001CEA  4879 0000 2967          pea       @m68kde~1_71.L
00001CEE  4C72      
00001CF0  4E92      2968          jsr       (A2)
00001CF2  584F      2969          addq.w    #4,A7
                    2970   ; return ;
00001CF4  6000 00D6 2971          bra       SetBreakPoint_15
                    2972   SetBreakPoint_6:
                    2973   ; }
                    2974   ; printf("\r\nBreak Point Address: ") ;
00001CF8  4879 0000 2975          pea       @m68kde~1_72.L
00001CFC  4C8E      
00001CFE  4E92      2976          jsr       (A2)
00001D00  584F      2977          addq.w    #4,A7
                    2978   ; BPAddress = Get8HexDigits(0) ;
00001D02  42A7      2979          clr.l     -(A7)
00001D04  4EB8 0CA4 2980          jsr       _Get8HexDigits
00001D08  584F      2981          addq.w    #4,A7
00001D0A  2600      2982          move.l    D0,D3
                    2983   ; ProgramBreakPointAddress = (volatile unsigned short int *)(BPAddress) ;     // point to the instruction in the user program we are about to change
00001D0C  2803      2984          move.l    D3,D4
                    2985   ; if((BPAddress & 0x00000001) == 0x00000001)  {   // cannot set BP at an odd address
00001D0E  2003      2986          move.l    D3,D0
00001D10  C0BC 0000 2987          and.l     #1,D0
00001D14  0001      
00001D16  0C80 0000 2988          cmp.l     #1,D0
00001D1A  0001      
00001D1C  660E      2989          bne.s     SetBreakPoint_9
                    2990   ; printf("\r\nError : Break Points CANNOT be set at ODD addresses") ;
00001D1E  4879 0000 2991          pea       @m68kde~1_73.L
00001D22  4CA6      
00001D24  4E92      2992          jsr       (A2)
00001D26  584F      2993          addq.w    #4,A7
                    2994   ; return ;
00001D28  6000 00A2 2995          bra       SetBreakPoint_15
                    2996   SetBreakPoint_9:
                    2997   ; }
                    2998   ; if(BPAddress < 0x00008000)  {   // cannot set BP in ROM
00001D2C  0C83 0000 2999          cmp.l     #32768,D3
00001D30  8000      
00001D32  640E      3000          bhs.s     SetBreakPoint_11
                    3001   ; printf("\r\nError : Break Points CANNOT be set for ROM in Range : [$0-$00007FFF]") ;
00001D34  4879 0000 3002          pea       @m68kde~1_74.L
00001D38  4CDC      
00001D3A  4E92      3003          jsr       (A2)
00001D3C  584F      3004          addq.w    #4,A7
                    3005   ; return ;
00001D3E  6000 008C 3006          bra       SetBreakPoint_15
                    3007   SetBreakPoint_11:
                    3008   ; }
                    3009   ; // search for first free bp or existing same BP
                    3010   ; for(i = 0; i < 8; i++)  {
00001D42  4282      3011          clr.l     D2
                    3012   SetBreakPoint_13:
00001D44  0C82 0000 3013          cmp.l     #8,D2
00001D48  0008      
00001D4A  6C00 0080 3014          bge       SetBreakPoint_15
                    3015   ; if(BreakPointAddress[i] == BPAddress)   {
00001D4E  2002      3016          move.l    D2,D0
00001D50  E588      3017          lsl.l     #2,D0
00001D52  41F9 0B00 3018          lea       _BreakPointAddress.L,A0
00001D56  012E      
00001D58  B6B0 0800 3019          cmp.l     0(A0,D0.L),D3
00001D5C  6610      3020          bne.s     SetBreakPoint_16
                    3021   ; printf("\r\nError: Break Point Already Exists at Address : %08x\r\n", BPAddress) ;
00001D5E  2F03      3022          move.l    D3,-(A7)
00001D60  4879 0000 3023          pea       @m68kde~1_75.L
00001D64  4D24      
00001D66  4E92      3024          jsr       (A2)
00001D68  504F      3025          addq.w    #8,A7
                    3026   ; return ;
00001D6A  6000 0060 3027          bra       SetBreakPoint_15
                    3028   SetBreakPoint_16:
                    3029   ; }
                    3030   ; if(BreakPointSetOrCleared[i] == 0) {
00001D6E  2002      3031          move.l    D2,D0
00001D70  E588      3032          lsl.l     #2,D0
00001D72  2033 0800 3033          move.l    0(A3,D0.L),D0
00001D76  6600 004E 3034          bne       SetBreakPoint_18
                    3035   ; // set BP here
                    3036   ; BreakPointSetOrCleared[i] = 1 ;                                 // mark this breakpoint as set
00001D7A  2002      3037          move.l    D2,D0
00001D7C  E588      3038          lsl.l     #2,D0
00001D7E  27BC 0000 3039          move.l    #1,0(A3,D0.L)
00001D82  0001 0800 
                    3040   ; BreakPointInstruction[i] = *ProgramBreakPointAddress ;          // copy the user program instruction here so we can put it back afterwards
00001D86  2044      3041          move.l    D4,A0
00001D88  2002      3042          move.l    D2,D0
00001D8A  E388      3043          lsl.l     #1,D0
00001D8C  43F9 0B00 3044          lea       _BreakPointInstruction.L,A1
00001D90  014E      
00001D92  3390 0800 3045          move.w    (A0),0(A1,D0.L)
                    3046   ; printf("\r\nBreak Point Set at Address: [$%08x]", ProgramBreakPointAddress) ;
00001D96  2F04      3047          move.l    D4,-(A7)
00001D98  4879 0000 3048          pea       @m68kde~1_76.L
00001D9C  4D5C      
00001D9E  4E92      3049          jsr       (A2)
00001DA0  504F      3050          addq.w    #8,A7
                    3051   ; *ProgramBreakPointAddress = (unsigned short int)(0x4e4e)    ;   // put a Trap14 instruction at the user specified address
00001DA2  2044      3052          move.l    D4,A0
00001DA4  30BC 4E4E 3053          move.w    #20046,(A0)
                    3054   ; BreakPointAddress[i] = BPAddress ;                              // record the address of this break point in the debugger
00001DA8  2002      3055          move.l    D2,D0
00001DAA  E588      3056          lsl.l     #2,D0
00001DAC  41F9 0B00 3057          lea       _BreakPointAddress.L,A0
00001DB0  012E      
00001DB2  2183 0800 3058          move.l    D3,0(A0,D0.L)
                    3059   ; printf("\r\n") ;
00001DB6  4879 0000 3060          pea       @m68kde~1_1.L
00001DBA  45CC      
00001DBC  4E92      3061          jsr       (A2)
00001DBE  584F      3062          addq.w    #4,A7
                    3063   ; BreakPointDisplay() ;       // display the break points
00001DC0  4EB8 1884 3064          jsr       _BreakPointDisplay
                    3065   ; return ;
00001DC4  6006      3066          bra.s     SetBreakPoint_15
                    3067   SetBreakPoint_18:
00001DC6  5282      3068          addq.l    #1,D2
00001DC8  6000 FF7A 3069          bra       SetBreakPoint_13
                    3070   SetBreakPoint_15:
00001DCC  4CDF 0C1C 3071          movem.l   (A7)+,D2/D3/D4/A2/A3
00001DD0  4E5E      3072          unlk      A6
00001DD2  4E75      3073          rts
                    3074   ; }
                    3075   ; }
                    3076   ; }
                    3077   ; void SetWatchPoint(void)
                    3078   ; {
                    3079   _SetWatchPoint:
00001DD4  4E56 FFF8 3080          link      A6,#-8
00001DD8  48E7 3030 3081          movem.l   D2/D3/A2/A3,-(A7)
00001DDC  45F9 0000 3082          lea       _printf.L,A2
00001DE0  3BF6      
00001DE2  47F9 0B00 3083          lea       _WatchPointSetOrCleared.L,A3
00001DE6  01A2      
                    3084   ; int i ;
                    3085   ; int WPNumber;
                    3086   ; int WPAddress;
                    3087   ; volatile unsigned short int *ProgramWatchPointAddress ;
                    3088   ; // see if any free break points
                    3089   ; for(i = 0; i < 8; i ++) {
00001DE8  4282      3090          clr.l     D2
                    3091   SetWatchPoint_1:
00001DEA  0C82 0000 3092          cmp.l     #8,D2
00001DEE  0008      
00001DF0  6C10      3093          bge.s     SetWatchPoint_3
                    3094   ; if( WatchPointSetOrCleared[i] == 0)
00001DF2  2002      3095          move.l    D2,D0
00001DF4  E588      3096          lsl.l     #2,D0
00001DF6  2033 0800 3097          move.l    0(A3,D0.L),D0
00001DFA  6602      3098          bne.s     SetWatchPoint_4
                    3099   ; break ;         // if spare WP found allow user to set it
00001DFC  6004      3100          bra.s     SetWatchPoint_3
                    3101   SetWatchPoint_4:
00001DFE  5282      3102          addq.l    #1,D2
00001E00  60E8      3103          bra       SetWatchPoint_1
                    3104   SetWatchPoint_3:
                    3105   ; }
                    3106   ; if(i == 8) {
00001E02  0C82 0000 3107          cmp.l     #8,D2
00001E06  0008      
00001E08  660E      3108          bne.s     SetWatchPoint_6
                    3109   ; printf("\r\nNo FREE Watch Points.....") ;
00001E0A  4879 0000 3110          pea       @m68kde~1_77.L
00001E0E  4D82      
00001E10  4E92      3111          jsr       (A2)
00001E12  584F      3112          addq.w    #4,A7
                    3113   ; return ;
00001E14  6000 008C 3114          bra       SetWatchPoint_11
                    3115   SetWatchPoint_6:
                    3116   ; }
                    3117   ; printf("\r\nWatch Point Address: ") ;
00001E18  4879 0000 3118          pea       @m68kde~1_78.L
00001E1C  4D9E      
00001E1E  4E92      3119          jsr       (A2)
00001E20  584F      3120          addq.w    #4,A7
                    3121   ; WPAddress = Get8HexDigits(0) ;
00001E22  42A7      3122          clr.l     -(A7)
00001E24  4EB8 0CA4 3123          jsr       _Get8HexDigits
00001E28  584F      3124          addq.w    #4,A7
00001E2A  2600      3125          move.l    D0,D3
                    3126   ; // search for first free wp or existing same wp
                    3127   ; for(i = 0; i < 8; i++)  {
00001E2C  4282      3128          clr.l     D2
                    3129   SetWatchPoint_9:
00001E2E  0C82 0000 3130          cmp.l     #8,D2
00001E32  0008      
00001E34  6C00 006C 3131          bge       SetWatchPoint_11
                    3132   ; if(WatchPointAddress[i] == WPAddress && WPAddress != 0)   {     //so we can set a wp at 0
00001E38  2002      3133          move.l    D2,D0
00001E3A  E588      3134          lsl.l     #2,D0
00001E3C  41F9 0B00 3135          lea       _WatchPointAddress.L,A0
00001E40  0182      
00001E42  B6B0 0800 3136          cmp.l     0(A0,D0.L),D3
00001E46  6614      3137          bne.s     SetWatchPoint_12
00001E48  4A83      3138          tst.l     D3
00001E4A  6710      3139          beq.s     SetWatchPoint_12
                    3140   ; printf("\r\nError: Watch Point Already Set at Address : %08x\r\n", WPAddress) ;
00001E4C  2F03      3141          move.l    D3,-(A7)
00001E4E  4879 0000 3142          pea       @m68kde~1_79.L
00001E52  4DB6      
00001E54  4E92      3143          jsr       (A2)
00001E56  504F      3144          addq.w    #8,A7
                    3145   ; return ;
00001E58  6000 0048 3146          bra       SetWatchPoint_11
                    3147   SetWatchPoint_12:
                    3148   ; }
                    3149   ; if(WatchPointSetOrCleared[i] == 0) {
00001E5C  2002      3150          move.l    D2,D0
00001E5E  E588      3151          lsl.l     #2,D0
00001E60  2033 0800 3152          move.l    0(A3,D0.L),D0
00001E64  6600 0038 3153          bne       SetWatchPoint_14
                    3154   ; WatchPointSetOrCleared[i] = 1 ;                                 // mark this watchpoint as set
00001E68  2002      3155          move.l    D2,D0
00001E6A  E588      3156          lsl.l     #2,D0
00001E6C  27BC 0000 3157          move.l    #1,0(A3,D0.L)
00001E70  0001 0800 
                    3158   ; printf("\r\nWatch Point Set at Address: [$%08x]", WPAddress) ;
00001E74  2F03      3159          move.l    D3,-(A7)
00001E76  4879 0000 3160          pea       @m68kde~1_80.L
00001E7A  4DEC      
00001E7C  4E92      3161          jsr       (A2)
00001E7E  504F      3162          addq.w    #8,A7
                    3163   ; WatchPointAddress[i] = WPAddress ;                              // record the address of this watch point in the debugger
00001E80  2002      3164          move.l    D2,D0
00001E82  E588      3165          lsl.l     #2,D0
00001E84  41F9 0B00 3166          lea       _WatchPointAddress.L,A0
00001E88  0182      
00001E8A  2183 0800 3167          move.l    D3,0(A0,D0.L)
                    3168   ; printf("\r\n") ;
00001E8E  4879 0000 3169          pea       @m68kde~1_1.L
00001E92  45CC      
00001E94  4E92      3170          jsr       (A2)
00001E96  584F      3171          addq.w    #4,A7
                    3172   ; WatchPointDisplay() ;       // display the break points
00001E98  4EB8 1958 3173          jsr       _WatchPointDisplay
                    3174   ; return ;
00001E9C  6004      3175          bra.s     SetWatchPoint_11
                    3176   SetWatchPoint_14:
00001E9E  5282      3177          addq.l    #1,D2
00001EA0  608C      3178          bra       SetWatchPoint_9
                    3179   SetWatchPoint_11:
00001EA2  4CDF 0C0C 3180          movem.l   (A7)+,D2/D3/A2/A3
00001EA6  4E5E      3181          unlk      A6
00001EA8  4E75      3182          rts
                    3183   ; }
                    3184   ; }
                    3185   ; }
                    3186   ; void HandleBreakPoint(void)
                    3187   ; {
                    3188   _HandleBreakPoint:
00001EAA  4E56 FFFC 3189          link      A6,#-4
00001EAE  48E7 0038 3190          movem.l   A2/A3/A4,-(A7)
00001EB2  45F9 0B00 3191          lea       _i.L,A2
00001EB6  00C4      
00001EB8  47F9 0000 3192          lea       _printf.L,A3
00001EBC  3BF6      
00001EBE  49F9 0B00 3193          lea       _PC.L,A4
00001EC2  0120      
                    3194   ; volatile unsigned short int *ProgramBreakPointAddress ;
                    3195   ; // now we have to put the break point back to run the instruction
                    3196   ; // PC will contain the address of the TRAP instruction but advanced by two bytes so lets play with that
                    3197   ; PC = PC - 2 ;  // ready for user to resume after reaching breakpoint
00001EC4  5594      3198          subq.l    #2,(A4)
                    3199   ; printf("\r\n\r\n\r\n\r\n@BREAKPOINT") ;
00001EC6  4879 0000 3200          pea       @m68kde~1_81.L
00001ECA  4E12      
00001ECC  4E93      3201          jsr       (A3)
00001ECE  584F      3202          addq.w    #4,A7
                    3203   ; printf("\r\nSingle Step : [ON]") ;
00001ED0  4879 0000 3204          pea       @m68kde~1_82.L
00001ED4  4E26      
00001ED6  4E93      3205          jsr       (A3)
00001ED8  584F      3206          addq.w    #4,A7
                    3207   ; printf("\r\nBreakPoints : [Enabled]") ;
00001EDA  4879 0000 3208          pea       @m68kde~1_83.L
00001EDE  4E3C      
00001EE0  4E93      3209          jsr       (A3)
00001EE2  584F      3210          addq.w    #4,A7
                    3211   ; // now clear the break point (put original instruction back)
                    3212   ; ProgramBreakPointAddress = PC ;
00001EE4  2D54 FFFC 3213          move.l    (A4),-4(A6)
                    3214   ; for(i = 0; i < 8; i ++) {
00001EE8  4292      3215          clr.l     (A2)
                    3216   HandleBreakPoint_1:
00001EEA  2012      3217          move.l    (A2),D0
00001EEC  0C80 0000 3218          cmp.l     #8,D0
00001EF0  0008      
00001EF2  6400 0056 3219          bhs       HandleBreakPoint_3
                    3220   ; if(BreakPointAddress[i] == PC) {        // if we have found the breakpoint
00001EF6  2012      3221          move.l    (A2),D0
00001EF8  E588      3222          lsl.l     #2,D0
00001EFA  41F9 0B00 3223          lea       _BreakPointAddress.L,A0
00001EFE  012E      
00001F00  2230 0800 3224          move.l    0(A0,D0.L),D1
00001F04  B294      3225          cmp.l     (A4),D1
00001F06  6600 003E 3226          bne       HandleBreakPoint_4
                    3227   ; BreakPointAddress[i] = 0 ;
00001F0A  2012      3228          move.l    (A2),D0
00001F0C  E588      3229          lsl.l     #2,D0
00001F0E  41F9 0B00 3230          lea       _BreakPointAddress.L,A0
00001F12  012E      
00001F14  42B0 0800 3231          clr.l     0(A0,D0.L)
                    3232   ; BreakPointSetOrCleared[i] = 0 ;
00001F18  2012      3233          move.l    (A2),D0
00001F1A  E588      3234          lsl.l     #2,D0
00001F1C  41F9 0B00 3235          lea       _BreakPointSetOrCleared.L,A0
00001F20  015E      
00001F22  42B0 0800 3236          clr.l     0(A0,D0.L)
                    3237   ; *ProgramBreakPointAddress = BreakPointInstruction[i] ;  // put original instruction back
00001F26  2012      3238          move.l    (A2),D0
00001F28  E388      3239          lsl.l     #1,D0
00001F2A  41F9 0B00 3240          lea       _BreakPointInstruction.L,A0
00001F2E  014E      
00001F30  226E FFFC 3241          move.l    -4(A6),A1
00001F34  32B0 0800 3242          move.w    0(A0,D0.L),(A1)
                    3243   ; BreakPointInstruction[i] = 0 ;
00001F38  2012      3244          move.l    (A2),D0
00001F3A  E388      3245          lsl.l     #1,D0
00001F3C  41F9 0B00 3246          lea       _BreakPointInstruction.L,A0
00001F40  014E      
00001F42  4270 0800 3247          clr.w     0(A0,D0.L)
                    3248   HandleBreakPoint_4:
00001F46  5292      3249          addq.l    #1,(A2)
00001F48  60A0      3250          bra       HandleBreakPoint_1
                    3251   HandleBreakPoint_3:
                    3252   ; }
                    3253   ; }
                    3254   ; DumpRegisters() ;
00001F4A  4EB8 10D6 3255          jsr       _DumpRegisters
                    3256   ; printf("\r\nPress <SPACE> to Execute Next Instruction");
00001F4E  4879 0000 3257          pea       @m68kde~1_45.L
00001F52  49B8      
00001F54  4E93      3258          jsr       (A3)
00001F56  584F      3259          addq.w    #4,A7
                    3260   ; printf("\r\nPress <ESC> to Resume User Program\r\n") ;
00001F58  4879 0000 3261          pea       @m68kde~1_84.L
00001F5C  4E56      
00001F5E  4E93      3262          jsr       (A3)
00001F60  584F      3263          addq.w    #4,A7
                    3264   ; menu() ;
00001F62  4EB9 0000 3265          jsr       _menu
00001F66  216E      
00001F68  4CDF 1C00 3266          movem.l   (A7)+,A2/A3/A4
00001F6C  4E5E      3267          unlk      A6
00001F6E  4E75      3268          rts
                    3269   ; }
                    3270   ; void UnknownCommand()
                    3271   ; {
                    3272   _UnknownCommand:
                    3273   ; printf("\r\nUnknown Command.....\r\n") ;
00001F70  4879 0000 3274          pea       @m68kde~1_85.L
00001F74  4E7E      
00001F76  4EB9 0000 3275          jsr       _printf
00001F7A  3BF6      
00001F7C  584F      3276          addq.w    #4,A7
                    3277   ; Help() ;
00001F7E  4EB9 0000 3278          jsr       _Help
00001F82  2094      
00001F84  4E75      3279          rts
                    3280   ; }
                    3281   ; // system when the users program executes a TRAP #15 instruction to halt program and return to debug monitor
                    3282   ; void CallDebugMonitor(void)
                    3283   ; {
                    3284   _CallDebugMonitor:
                    3285   ; printf("\r\nProgram Ended (TRAP #15)....") ;
00001F86  4879 0000 3286          pea       @m68kde~1_86.L
00001F8A  4E98      
00001F8C  4EB9 0000 3287          jsr       _printf
00001F90  3BF6      
00001F92  584F      3288          addq.w    #4,A7
                    3289   ; menu();
00001F94  4EB9 0000 3290          jsr       _menu
00001F98  216E      
00001F9A  4E75      3291          rts
                    3292   ; }
                    3293   ; void Breakpoint(void)
                    3294   ; {
                    3295   _Breakpoint:
00001F9C  2F02      3296          move.l    D2,-(A7)
                    3297   ; char c;
                    3298   ; c = toupper(_getch());
00001F9E  2F00      3299          move.l    D0,-(A7)
00001FA0  4EB8 0B68 3300          jsr       __getch
00001FA4  2200      3301          move.l    D0,D1
00001FA6  201F      3302          move.l    (A7)+,D0
00001FA8  2F01      3303          move.l    D1,-(A7)
00001FAA  4EB9 0000 3304          jsr       _toupper
00001FAE  3334      
00001FB0  584F      3305          addq.w    #4,A7
00001FB2  1400      3306          move.b    D0,D2
                    3307   ; if( c == (char)('D'))                                      // BreakPoint Display
00001FB4  0C02 0044 3308          cmp.b     #68,D2
00001FB8  6608      3309          bne.s     Breakpoint_1
                    3310   ; BreakPointDisplay() ;
00001FBA  4EB8 1884 3311          jsr       _BreakPointDisplay
00001FBE  6000 0054 3312          bra       Breakpoint_10
                    3313   Breakpoint_1:
                    3314   ; else if(c == (char)('K')) {                                 // breakpoint Kill
00001FC2  0C02 004B 3315          cmp.b     #75,D2
00001FC6  6630      3316          bne.s     Breakpoint_3
                    3317   ; printf("\r\nKill All Break Points...(y/n)?") ;
00001FC8  4879 0000 3318          pea       @m68kde~1_87.L
00001FCC  4EB8      
00001FCE  4EB9 0000 3319          jsr       _printf
00001FD2  3BF6      
00001FD4  584F      3320          addq.w    #4,A7
                    3321   ; c = toupper(_getch());
00001FD6  2F00      3322          move.l    D0,-(A7)
00001FD8  4EB8 0B68 3323          jsr       __getch
00001FDC  2200      3324          move.l    D0,D1
00001FDE  201F      3325          move.l    (A7)+,D0
00001FE0  2F01      3326          move.l    D1,-(A7)
00001FE2  4EB9 0000 3327          jsr       _toupper
00001FE6  3334      
00001FE8  584F      3328          addq.w    #4,A7
00001FEA  1400      3329          move.b    D0,D2
                    3330   ; if(c == (char)('Y'))
00001FEC  0C02 0059 3331          cmp.b     #89,D2
00001FF0  6604      3332          bne.s     Breakpoint_5
                    3333   ; KillAllBreakPoints() ;
00001FF2  4EB8 1C1C 3334          jsr       _KillAllBreakPoints
                    3335   Breakpoint_5:
00001FF6  601C      3336          bra.s     Breakpoint_10
                    3337   Breakpoint_3:
                    3338   ; }
                    3339   ; else if(c == (char)('S')) {
00001FF8  0C02 0053 3340          cmp.b     #83,D2
00001FFC  6606      3341          bne.s     Breakpoint_7
                    3342   ; SetBreakPoint() ;
00001FFE  4EB8 1CB4 3343          jsr       _SetBreakPoint
00002002  6010      3344          bra.s     Breakpoint_10
                    3345   Breakpoint_7:
                    3346   ; }
                    3347   ; else if(c == (char)('C')) {
00002004  0C02 0043 3348          cmp.b     #67,D2
00002008  6606      3349          bne.s     Breakpoint_9
                    3350   ; BreakPointClear() ;
0000200A  4EB8 1A04 3351          jsr       _BreakPointClear
0000200E  6004      3352          bra.s     Breakpoint_10
                    3353   Breakpoint_9:
                    3354   ; }
                    3355   ; else
                    3356   ; UnknownCommand() ;
00002010  4EB8 1F70 3357          jsr       _UnknownCommand
                    3358   Breakpoint_10:
00002014  241F      3359          move.l    (A7)+,D2
00002016  4E75      3360          rts
                    3361   ; }
                    3362   ; void Watchpoint(void)
                    3363   ; {
                    3364   _Watchpoint:
00002018  2F02      3365          move.l    D2,-(A7)
                    3366   ; char c;
                    3367   ; c = toupper(_getch());
0000201A  2F00      3368          move.l    D0,-(A7)
0000201C  4EB8 0B68 3369          jsr       __getch
00002020  2200      3370          move.l    D0,D1
00002022  201F      3371          move.l    (A7)+,D0
00002024  2F01      3372          move.l    D1,-(A7)
00002026  4EB9 0000 3373          jsr       _toupper
0000202A  3334      
0000202C  584F      3374          addq.w    #4,A7
0000202E  1400      3375          move.b    D0,D2
                    3376   ; if( c == (char)('D'))                                      // WatchPoint Display
00002030  0C02 0044 3377          cmp.b     #68,D2
00002034  6608      3378          bne.s     Watchpoint_1
                    3379   ; WatchPointDisplay() ;
00002036  4EB8 1958 3380          jsr       _WatchPointDisplay
0000203A  6000 0054 3381          bra       Watchpoint_10
                    3382   Watchpoint_1:
                    3383   ; else if(c == (char)('K')) {                                 // wtahcpoint Kill
0000203E  0C02 004B 3384          cmp.b     #75,D2
00002042  6630      3385          bne.s     Watchpoint_3
                    3386   ; printf("\r\nKill All Watch Points...(y/n)?") ;
00002044  4879 0000 3387          pea       @m68kde~1_88.L
00002048  4EDA      
0000204A  4EB9 0000 3388          jsr       _printf
0000204E  3BF6      
00002050  584F      3389          addq.w    #4,A7
                    3390   ; c = toupper(_getch());
00002052  2F00      3391          move.l    D0,-(A7)
00002054  4EB8 0B68 3392          jsr       __getch
00002058  2200      3393          move.l    D0,D1
0000205A  201F      3394          move.l    (A7)+,D0
0000205C  2F01      3395          move.l    D1,-(A7)
0000205E  4EB9 0000 3396          jsr       _toupper
00002062  3334      
00002064  584F      3397          addq.w    #4,A7
00002066  1400      3398          move.b    D0,D2
                    3399   ; if(c == (char)('Y'))
00002068  0C02 0059 3400          cmp.b     #89,D2
0000206C  6604      3401          bne.s     Watchpoint_5
                    3402   ; KillAllWatchPoints() ;
0000206E  4EB8 1C84 3403          jsr       _KillAllWatchPoints
                    3404   Watchpoint_5:
00002072  601C      3405          bra.s     Watchpoint_10
                    3406   Watchpoint_3:
                    3407   ; }
                    3408   ; else if(c == (char)('S')) {
00002074  0C02 0053 3409          cmp.b     #83,D2
00002078  6606      3410          bne.s     Watchpoint_7
                    3411   ; SetWatchPoint() ;
0000207A  4EB8 1DD4 3412          jsr       _SetWatchPoint
0000207E  6010      3413          bra.s     Watchpoint_10
                    3414   Watchpoint_7:
                    3415   ; }
                    3416   ; else if(c == (char)('C')) {
00002080  0C02 0043 3417          cmp.b     #67,D2
00002084  6606      3418          bne.s     Watchpoint_9
                    3419   ; WatchPointClear() ;
00002086  4EB8 1ADE 3420          jsr       _WatchPointClear
0000208A  6004      3421          bra.s     Watchpoint_10
                    3422   Watchpoint_9:
                    3423   ; }
                    3424   ; else
                    3425   ; UnknownCommand() ;
0000208C  4EB8 1F70 3426          jsr       _UnknownCommand
                    3427   Watchpoint_10:
00002090  241F      3428          move.l    (A7)+,D2
00002092  4E75      3429          rts
                    3430   ; }
                    3431   ; void Help(void)
                    3432   ; {
                    3433   _Help:
00002094  48E7 2020 3434          movem.l   D2/A2,-(A7)
00002098  45F9 0000 3435          lea       _printf.L,A2
0000209C  3BF6      
                    3436   ; char *banner = "\r\n----------------------------------------------------------------" ;
0000209E  41F9 0000 3437          lea       @m68kde~1_89.L,A0
000020A2  4EFC      
000020A4  2408      3438          move.l    A0,D2
                    3439   ; printf(banner) ;
000020A6  2F02      3440          move.l    D2,-(A7)
000020A8  4E92      3441          jsr       (A2)
000020AA  584F      3442          addq.w    #4,A7
                    3443   ; printf("\r\n  Debugger Command Summary") ;
000020AC  4879 0000 3444          pea       @m68kde~1_90.L
000020B0  4F40      
000020B2  4E92      3445          jsr       (A2)
000020B4  584F      3446          addq.w    #4,A7
                    3447   ; printf(banner) ;
000020B6  2F02      3448          move.l    D2,-(A7)
000020B8  4E92      3449          jsr       (A2)
000020BA  584F      3450          addq.w    #4,A7
                    3451   ; printf("\r\n  .(reg)       - Change Registers: e.g A0-A7,D0-D7,PC,SSP,USP,SR");
000020BC  4879 0000 3452          pea       @m68kde~1_91.L
000020C0  4F5E      
000020C2  4E92      3453          jsr       (A2)
000020C4  584F      3454          addq.w    #4,A7
                    3455   ; printf("\r\n  BD/BS/BC/BK  - Break Point: Display/Set/Clear/Kill") ;
000020C6  4879 0000 3456          pea       @m68kde~1_92.L
000020CA  4FA2      
000020CC  4E92      3457          jsr       (A2)
000020CE  584F      3458          addq.w    #4,A7
                    3459   ; printf("\r\n  C            - Copy Program from Flash to Main Memory") ;
000020D0  4879 0000 3460          pea       @m68kde~1_93.L
000020D4  4FDA      
000020D6  4E92      3461          jsr       (A2)
000020D8  584F      3462          addq.w    #4,A7
                    3463   ; printf("\r\n  D            - Dump Memory Contents to Screen") ;
000020DA  4879 0000 3464          pea       @m68kde~1_94.L
000020DE  5014      
000020E0  4E92      3465          jsr       (A2)
000020E2  584F      3466          addq.w    #4,A7
                    3467   ; printf("\r\n  E            - Enter String into Memory") ;
000020E4  4879 0000 3468          pea       @m68kde~1_95.L
000020E8  5046      
000020EA  4E92      3469          jsr       (A2)
000020EC  584F      3470          addq.w    #4,A7
                    3471   ; printf("\r\n  F            - Fill Memory with Data") ;
000020EE  4879 0000 3472          pea       @m68kde~1_96.L
000020F2  5072      
000020F4  4E92      3473          jsr       (A2)
000020F6  584F      3474          addq.w    #4,A7
                    3475   ; printf("\r\n  G            - Go Program Starting at Address: $%08X", PC) ;
000020F8  2F39 0B00 3476          move.l    _PC.L,-(A7)
000020FC  0120      
000020FE  4879 0000 3477          pea       @m68kde~1_97.L
00002102  509C      
00002104  4E92      3478          jsr       (A2)
00002106  504F      3479          addq.w    #8,A7
                    3480   ; printf("\r\n  L            - Load Program (.HEX file) from Laptop") ;
00002108  4879 0000 3481          pea       @m68kde~1_98.L
0000210C  50D6      
0000210E  4E92      3482          jsr       (A2)
00002110  584F      3483          addq.w    #4,A7
                    3484   ; printf("\r\n  M            - Memory Examine and Change");
00002112  4879 0000 3485          pea       @m68kde~1_99.L
00002116  510E      
00002118  4E92      3486          jsr       (A2)
0000211A  584F      3487          addq.w    #4,A7
                    3488   ; printf("\r\n  P            - Program Flash Memory with User Program") ;
0000211C  4879 0000 3489          pea       @m68kde~1_100.L
00002120  513C      
00002122  4E92      3490          jsr       (A2)
00002124  584F      3491          addq.w    #4,A7
                    3492   ; printf("\r\n  R            - Display 68000 Registers") ;
00002126  4879 0000 3493          pea       @m68kde~1_101.L
0000212A  5176      
0000212C  4E92      3494          jsr       (A2)
0000212E  584F      3495          addq.w    #4,A7
                    3496   ; printf("\r\n  S            - Toggle ON/OFF Single Step Mode") ;
00002130  4879 0000 3497          pea       @m68kde~1_102.L
00002134  51A2      
00002136  4E92      3498          jsr       (A2)
00002138  584F      3499          addq.w    #4,A7
                    3500   ; printf("\r\n  TM           - Test Memory") ;
0000213A  4879 0000 3501          pea       @m68kde~1_103.L
0000213E  51D4      
00002140  4E92      3502          jsr       (A2)
00002142  584F      3503          addq.w    #4,A7
                    3504   ; printf("\r\n  TS           - Test Switches: SW7-0") ;
00002144  4879 0000 3505          pea       @m68kde~1_104.L
00002148  51F4      
0000214A  4E92      3506          jsr       (A2)
0000214C  584F      3507          addq.w    #4,A7
                    3508   ; printf("\r\n  TD           - Test Displays: LEDs and 7-Segment") ;
0000214E  4879 0000 3509          pea       @m68kde~1_105.L
00002152  521C      
00002154  4E92      3510          jsr       (A2)
00002156  584F      3511          addq.w    #4,A7
                    3512   ; printf("\r\n  WD/WS/WC/WK  - Watch Point: Display/Set/Clear/Kill") ;
00002158  4879 0000 3513          pea       @m68kde~1_106.L
0000215C  5252      
0000215E  4E92      3514          jsr       (A2)
00002160  584F      3515          addq.w    #4,A7
                    3516   ; printf(banner) ;
00002162  2F02      3517          move.l    D2,-(A7)
00002164  4E92      3518          jsr       (A2)
00002166  584F      3519          addq.w    #4,A7
00002168  4CDF 0404 3520          movem.l   (A7)+,D2/A2
0000216C  4E75      3521          rts
                    3522   ; }
                    3523   ; void menu(void)
                    3524   ; {
                    3525   _menu:
0000216E  48E7 303C 3526          movem.l   D2/D3/A2/A3/A4/A5,-(A7)
00002172  45F9 0000 3527          lea       _printf.L,A2
00002176  3BF6      
00002178  47F9 0B00 3528          lea       _Trace.L,A3
0000217C  00D8      
0000217E  49F9 0B00 3529          lea       _x.L,A4
00002182  00C8      
00002184  4BF9 0B00 3530          lea       _SR.L,A5
00002188  012C      
                    3531   ; char c,c1 ;
                    3532   ; while(1)    {
                    3533   menu_1:
                    3534   ; FlushKeyboard() ;               // dump unread characters from keyboard
0000218A  4EB8 0BA6 3535          jsr       _FlushKeyboard
                    3536   ; printf("\r\n#") ;
0000218E  4879 0000 3537          pea       @m68kde~1_107.L
00002192  528A      
00002194  4E92      3538          jsr       (A2)
00002196  584F      3539          addq.w    #4,A7
                    3540   ; c = toupper(_getch());
00002198  2F00      3541          move.l    D0,-(A7)
0000219A  4EB8 0B68 3542          jsr       __getch
0000219E  2200      3543          move.l    D0,D1
000021A0  201F      3544          move.l    (A7)+,D0
000021A2  2F01      3545          move.l    D1,-(A7)
000021A4  4EB9 0000 3546          jsr       _toupper
000021A8  3334      
000021AA  584F      3547          addq.w    #4,A7
000021AC  1400      3548          move.b    D0,D2
                    3549   ; if( c == (char)('L'))                  // load s record file
000021AE  0C02 004C 3550          cmp.b     #76,D2
000021B2  6608      3551          bne.s     menu_4
                    3552   ; Load_SRecordFile() ;
000021B4  4EB8 0E36 3553          jsr       _Load_SRecordFile
000021B8  6000 021E 3554          bra       menu_46
                    3555   menu_4:
                    3556   ; else if( c == (char)('D'))             // dump memory
000021BC  0C02 0044 3557          cmp.b     #68,D2
000021C0  6608      3558          bne.s     menu_6
                    3559   ; DumpMemory() ;
000021C2  4EB8 0CCC 3560          jsr       _DumpMemory
000021C6  6000 0210 3561          bra       menu_46
                    3562   menu_6:
                    3563   ; else if( c == (char)('E'))             // Enter String into memory
000021CA  0C02 0045 3564          cmp.b     #69,D2
000021CE  660A      3565          bne.s     menu_8
                    3566   ; EnterString() ;
000021D0  4EB9 0000 3567          jsr       _EnterString
000021D4  2520      
000021D6  6000 0200 3568          bra       menu_46
                    3569   menu_8:
                    3570   ; else if( c == (char)('F'))             // fill memory
000021DA  0C02 0046 3571          cmp.b     #70,D2
000021DE  6608      3572          bne.s     menu_10
                    3573   ; FillMemory() ;
000021E0  4EB8 0DBC 3574          jsr       _FillMemory
000021E4  6000 01F2 3575          bra       menu_46
                    3576   menu_10:
                    3577   ; else if( c == (char)('G'))  {           // go user program
000021E8  0C02 0047 3578          cmp.b     #71,D2
000021EC  6626      3579          bne.s     menu_12
                    3580   ; printf("\r\nProgram Running.....") ;
000021EE  4879 0000 3581          pea       @m68kde~1_108.L
000021F2  528E      
000021F4  4E92      3582          jsr       (A2)
000021F6  584F      3583          addq.w    #4,A7
                    3584   ; printf("\r\nPress <RESET> button <Key0> on DE1 to stop") ;
000021F8  4879 0000 3585          pea       @m68kde~1_109.L
000021FC  52A6      
000021FE  4E92      3586          jsr       (A2)
00002200  584F      3587          addq.w    #4,A7
                    3588   ; GoFlag = 1 ;
00002202  23FC 0000 3589          move.l    #1,_GoFlag.L
00002206  0001 0B00 
0000220A  00DC      
                    3590   ; go() ;
0000220C  4EB8 08B8 3591          jsr       _go
00002210  6000 01C6 3592          bra       menu_46
                    3593   menu_12:
                    3594   ; }
                    3595   ; else if( c == (char)('M'))           // memory examine and modify
00002214  0C02 004D 3596          cmp.b     #77,D2
00002218  6608      3597          bne.s     menu_14
                    3598   ; MemoryChange() ;
0000221A  4EB8 0FC4 3599          jsr       _MemoryChange
0000221E  6000 01B8 3600          bra       menu_46
                    3601   menu_14:
                    3602   ; else if( c == (char)('P'))            // Program Flash Chip
00002222  0C02 0050 3603          cmp.b     #80,D2
00002226  6608      3604          bne.s     menu_16
                    3605   ; ProgramFlashChip() ;
00002228  4EB8 10C4 3606          jsr       _ProgramFlashChip
0000222C  6000 01AA 3607          bra       menu_46
                    3608   menu_16:
                    3609   ; else if( c == (char)('C'))             // copy flash chip to ram and go
00002230  0C02 0043 3610          cmp.b     #67,D2
00002234  6608      3611          bne.s     menu_18
                    3612   ; LoadFromFlashChip();
00002236  4EB8 10C6 3613          jsr       _LoadFromFlashChip
0000223A  6000 019C 3614          bra       menu_46
                    3615   menu_18:
                    3616   ; else if( c == (char)('R'))             // dump registers
0000223E  0C02 0052 3617          cmp.b     #82,D2
00002242  6608      3618          bne.s     menu_20
                    3619   ; DumpRegisters() ;
00002244  4EB8 10D6 3620          jsr       _DumpRegisters
00002248  6000 018E 3621          bra       menu_46
                    3622   menu_20:
                    3623   ; else if( c == (char)('.'))           // change registers
0000224C  0C02 002E 3624          cmp.b     #46,D2
00002250  6608      3625          bne.s     menu_22
                    3626   ; ChangeRegisters() ;
00002252  4EB8 15C8 3627          jsr       _ChangeRegisters
00002256  6000 0180 3628          bra       menu_46
                    3629   menu_22:
                    3630   ; else if( c == (char)('B'))              // breakpoint command
0000225A  0C02 0042 3631          cmp.b     #66,D2
0000225E  6608      3632          bne.s     menu_24
                    3633   ; Breakpoint() ;
00002260  4EB8 1F9C 3634          jsr       _Breakpoint
00002264  6000 0172 3635          bra       menu_46
                    3636   menu_24:
                    3637   ; else if( c == (char)('T'))  {          // Test command
00002268  0C02 0054 3638          cmp.b     #84,D2
0000226C  6600 0046 3639          bne       menu_26
                    3640   ; c1 = toupper(_getch()) ;
00002270  2F00      3641          move.l    D0,-(A7)
00002272  4EB8 0B68 3642          jsr       __getch
00002276  2200      3643          move.l    D0,D1
00002278  201F      3644          move.l    (A7)+,D0
0000227A  2F01      3645          move.l    D1,-(A7)
0000227C  4EB9 0000 3646          jsr       _toupper
00002280  3334      
00002282  584F      3647          addq.w    #4,A7
00002284  1600      3648          move.b    D0,D3
                    3649   ; if(c1 == (char)('M'))                    // memory test
00002286  0C03 004D 3650          cmp.b     #77,D3
0000228A  6608      3651          bne.s     menu_28
                    3652   ; MemoryTest() ;
0000228C  4EB9 0000 3653          jsr       _MemoryTest
00002290  2A6C      
00002292  601C      3654          bra.s     menu_33
                    3655   menu_28:
                    3656   ; else if( c1 == (char)('S'))              // Switch Test command
00002294  0C03 0053 3657          cmp.b     #83,D3
00002298  6606      3658          bne.s     menu_30
                    3659   ; SwitchTest() ;
0000229A  4EB8 0AA4 3660          jsr       _SwitchTest
0000229E  6010      3661          bra.s     menu_33
                    3662   menu_30:
                    3663   ; else if( c1 == (char)('D'))              // display Test command
000022A0  0C03 0044 3664          cmp.b     #68,D3
000022A4  6606      3665          bne.s     menu_32
                    3666   ; TestLEDS() ;
000022A6  4EB8 0A50 3667          jsr       _TestLEDS
000022AA  6004      3668          bra.s     menu_33
                    3669   menu_32:
                    3670   ; else
                    3671   ; UnknownCommand() ;
000022AC  4EB8 1F70 3672          jsr       _UnknownCommand
                    3673   menu_33:
000022B0  6000 0126 3674          bra       menu_46
                    3675   menu_26:
                    3676   ; }
                    3677   ; else if( c == (char)(' ')) {             // Next instruction command
000022B4  0C02 0020 3678          cmp.b     #32,D2
000022B8  6636      3679          bne.s     menu_34
                    3680   ; DisableBreakPoints() ;
000022BA  4EB8 1B80 3681          jsr       _DisableBreakPoints
                    3682   ; if(Trace == 1 && GoFlag == 1)   {    // if the program is running and trace mode on then 'N' is valid
000022BE  2013      3683          move.l    (A3),D0
000022C0  0C80 0000 3684          cmp.l     #1,D0
000022C4  0001      
000022C6  661A      3685          bne.s     menu_36
000022C8  2039 0B00 3686          move.l    _GoFlag.L,D0
000022CC  00DC      
000022CE  0C80 0000 3687          cmp.l     #1,D0
000022D2  0001      
000022D4  660C      3688          bne.s     menu_36
                    3689   ; TraceException = 1 ;             // generate a trace exception for the next instruction if user wants to single step though next instruction
000022D6  13FC 0001 3690          move.b    #1,4194314
000022DA  0040 000A 
                    3691   ; return ;
000022DE  6000 00FC 3692          bra       menu_38
                    3693   menu_36:
                    3694   ; }
                    3695   ; else
                    3696   ; printf("\r\nError: Press 'G' first to start program") ;
000022E2  4879 0000 3697          pea       @m68kde~1_110.L
000022E6  52D4      
000022E8  4E92      3698          jsr       (A2)
000022EA  584F      3699          addq.w    #4,A7
000022EC  6000 00EA 3700          bra       menu_46
                    3701   menu_34:
                    3702   ; }
                    3703   ; else if( c == (char)('S')) {             // single step
000022F0  0C02 0053 3704          cmp.b     #83,D2
000022F4  6600 008C 3705          bne       menu_39
                    3706   ; if(Trace == 0) {
000022F8  2013      3707          move.l    (A3),D0
000022FA  6600 0050 3708          bne       menu_41
                    3709   ; DisableBreakPoints() ;
000022FE  4EB8 1B80 3710          jsr       _DisableBreakPoints
                    3711   ; printf("\r\nSingle Step  :[ON]") ;
00002302  4879 0000 3712          pea       @m68kde~1_111.L
00002306  52FE      
00002308  4E92      3713          jsr       (A2)
0000230A  584F      3714          addq.w    #4,A7
                    3715   ; printf("\r\nBreak Points :[Disabled]") ;
0000230C  4879 0000 3716          pea       @m68kde~1_44.L
00002310  499C      
00002312  4E92      3717          jsr       (A2)
00002314  584F      3718          addq.w    #4,A7
                    3719   ; SR = SR | (unsigned short int)(0x8000) ;    // set T bit in status register
00002316  0055 8000 3720          or.w      #32768,(A5)
                    3721   ; printf("\r\nPress 'G' to Trace Program from address $%08x.....",PC) ;
0000231A  2F39 0B00 3722          move.l    _PC.L,-(A7)
0000231E  0120      
00002320  4879 0000 3723          pea       @m68kde~1_112.L
00002324  5314      
00002326  4E92      3724          jsr       (A2)
00002328  504F      3725          addq.w    #8,A7
                    3726   ; printf("\r\nPush <RESET Button> to Stop.....") ;
0000232A  4879 0000 3727          pea       @m68kde~1_113.L
0000232E  534A      
00002330  4E92      3728          jsr       (A2)
00002332  584F      3729          addq.w    #4,A7
                    3730   ; DumpRegisters() ;
00002334  4EB8 10D6 3731          jsr       _DumpRegisters
                    3732   ; Trace = 1;
00002338  26BC 0000 3733          move.l    #1,(A3)
0000233C  0001      
                    3734   ; TraceException = 1;
0000233E  13FC 0001 3735          move.b    #1,4194314
00002342  0040 000A 
                    3736   ; x = *(unsigned int *)(0x00000074) ;       // simulate responding to a Level 5 IRQ by reading vector to reset Trace exception generator
00002346  28B8 0074 3737          move.l    116,(A4)
0000234A  6032      3738          bra.s     menu_42
                    3739   menu_41:
                    3740   ; }
                    3741   ; else {
                    3742   ; Trace = 0 ;
0000234C  4293      3743          clr.l     (A3)
                    3744   ; TraceException = 0 ;
0000234E  4239 0040 3745          clr.b     4194314
00002352  000A      
                    3746   ; x = *(unsigned int *)(0x00000074) ;       // simulate responding to a Level 5 IRQ by reading vector to reset Trace exception generator
00002354  28B8 0074 3747          move.l    116,(A4)
                    3748   ; EnableBreakPoints() ;
00002358  4EB8 1BD4 3749          jsr       _EnableBreakPoints
                    3750   ; SR = SR & (unsigned short int)(0x7FFF) ;    // clear T bit in status register
0000235C  0255 7FFF 3751          and.w     #32767,(A5)
                    3752   ; printf("\r\nSingle Step : [OFF]") ;
00002360  4879 0000 3753          pea       @m68kde~1_114.L
00002364  536E      
00002366  4E92      3754          jsr       (A2)
00002368  584F      3755          addq.w    #4,A7
                    3756   ; printf("\r\nBreak Points :[Enabled]") ;
0000236A  4879 0000 3757          pea       @m68kde~1_115.L
0000236E  5384      
00002370  4E92      3758          jsr       (A2)
00002372  584F      3759          addq.w    #4,A7
                    3760   ; printf("\r\nPress <ESC> to Resume User Program.....") ;
00002374  4879 0000 3761          pea       @m68kde~1_116.L
00002378  539E      
0000237A  4E92      3762          jsr       (A2)
0000237C  584F      3763          addq.w    #4,A7
                    3764   menu_42:
0000237E  6000 0058 3765          bra       menu_46
                    3766   menu_39:
                    3767   ; }
                    3768   ; }
                    3769   ; else if(c == (char)(0x1b))  {   // if user choses to end trace and run program
00002382  0C02 001B 3770          cmp.b     #27,D2
00002386  6600 0040 3771          bne       menu_43
                    3772   ; Trace = 0;
0000238A  4293      3773          clr.l     (A3)
                    3774   ; TraceException = 0;
0000238C  4239 0040 3775          clr.b     4194314
00002390  000A      
                    3776   ; x = *(unsigned int *)(0x00000074) ;   // read IRQ 5 vector to reset trace vector generator
00002392  28B8 0074 3777          move.l    116,(A4)
                    3778   ; EnableBreakPoints() ;
00002396  4EB8 1BD4 3779          jsr       _EnableBreakPoints
                    3780   ; SR = SR & (unsigned short int)(0x7FFF) ;    // clear T bit in status register
0000239A  0255 7FFF 3781          and.w     #32767,(A5)
                    3782   ; printf("\r\nSingle Step  :[OFF]") ;
0000239E  4879 0000 3783          pea       @m68kde~1_117.L
000023A2  53C8      
000023A4  4E92      3784          jsr       (A2)
000023A6  584F      3785          addq.w    #4,A7
                    3786   ; printf("\r\nBreak Points :[Enabled]");
000023A8  4879 0000 3787          pea       @m68kde~1_115.L
000023AC  5384      
000023AE  4E92      3788          jsr       (A2)
000023B0  584F      3789          addq.w    #4,A7
                    3790   ; printf("\r\nProgram Running.....") ;
000023B2  4879 0000 3791          pea       @m68kde~1_108.L
000023B6  528E      
000023B8  4E92      3792          jsr       (A2)
000023BA  584F      3793          addq.w    #4,A7
                    3794   ; printf("\r\nPress <RESET> button <Key0> on DE1 to stop") ;
000023BC  4879 0000 3795          pea       @m68kde~1_109.L
000023C0  52A6      
000023C2  4E92      3796          jsr       (A2)
000023C4  584F      3797          addq.w    #4,A7
                    3798   ; return ;
000023C6  6014      3799          bra.s     menu_38
                    3800   menu_43:
                    3801   ; }
                    3802   ; else if( c == (char)('W'))              // Watchpoint command
000023C8  0C02 0057 3803          cmp.b     #87,D2
000023CC  6606      3804          bne.s     menu_45
                    3805   ; Watchpoint() ;
000023CE  4EB8 2018 3806          jsr       _Watchpoint
000023D2  6004      3807          bra.s     menu_46
                    3808   menu_45:
                    3809   ; else
                    3810   ; UnknownCommand() ;
000023D4  4EB8 1F70 3811          jsr       _UnknownCommand
                    3812   menu_46:
000023D8  6000 FDB0 3813          bra       menu_1
                    3814   menu_38:
000023DC  4CDF 3C0C 3815          movem.l   (A7)+,D2/D3/A2/A3/A4/A5
000023E0  4E75      3816          rts
                    3817   ; }
                    3818   ; }
                    3819   ; void PrintErrorMessageandAbort(char *string) {
                    3820   _PrintErrorMessageandAbort:
000023E2  4E56 0000 3821          link      A6,#0
                    3822   ; printf("\r\n\r\nProgram ABORT !!!!!!\r\n") ;
000023E6  4879 0000 3823          pea       @m68kde~1_118.L
000023EA  53DE      
000023EC  4EB9 0000 3824          jsr       _printf
000023F0  3BF6      
000023F2  584F      3825          addq.w    #4,A7
                    3826   ; printf("%s\r\n", string) ;
000023F4  2F2E 0008 3827          move.l    8(A6),-(A7)
000023F8  4879 0000 3828          pea       @m68kde~1_119.L
000023FC  53FA      
000023FE  4EB9 0000 3829          jsr       _printf
00002402  3BF6      
00002404  504F      3830          addq.w    #8,A7
                    3831   ; menu() ;
00002406  4EB8 216E 3832          jsr       _menu
0000240A  4E5E      3833          unlk      A6
0000240C  4E75      3834          rts
                    3835   ; }
                    3836   ; void IRQMessage(int level) {
                    3837   _IRQMessage:
0000240E  4E56 0000 3838          link      A6,#0
                    3839   ; printf("\r\n\r\nProgram ABORT !!!!!");
00002412  4879 0000 3840          pea       @m68kde~1_120.L
00002416  5400      
00002418  4EB9 0000 3841          jsr       _printf
0000241C  3BF6      
0000241E  584F      3842          addq.w    #4,A7
                    3843   ; printf("\r\nUnhandled Interrupt: IRQ%d !!!!!", level) ;
00002420  2F2E 0008 3844          move.l    8(A6),-(A7)
00002424  4879 0000 3845          pea       @m68kde~1_121.L
00002428  5418      
0000242A  4EB9 0000 3846          jsr       _printf
0000242E  3BF6      
00002430  504F      3847          addq.w    #8,A7
                    3848   ; menu() ;
00002432  4EB8 216E 3849          jsr       _menu
00002436  4E5E      3850          unlk      A6
00002438  4E75      3851          rts
                    3852   ; }
                    3853   ; void UnhandledIRQ1(void) {
                    3854   _UnhandledIRQ1:
                    3855   ; IRQMessage(1);
0000243A  4878 0001 3856          pea       1
0000243E  4EB8 240E 3857          jsr       _IRQMessage
00002442  584F      3858          addq.w    #4,A7
00002444  4E75      3859          rts
                    3860   ; }
                    3861   ; void UnhandledIRQ2(void) {
                    3862   _UnhandledIRQ2:
                    3863   ; IRQMessage(2);
00002446  4878 0002 3864          pea       2
0000244A  4EB8 240E 3865          jsr       _IRQMessage
0000244E  584F      3866          addq.w    #4,A7
00002450  4E75      3867          rts
                    3868   ; }
                    3869   ; void UnhandledIRQ3(void){
                    3870   _UnhandledIRQ3:
                    3871   ; IRQMessage(3);
00002452  4878 0003 3872          pea       3
00002456  4EB8 240E 3873          jsr       _IRQMessage
0000245A  584F      3874          addq.w    #4,A7
0000245C  4E75      3875          rts
                    3876   ; }
                    3877   ; void UnhandledIRQ4(void) {
                    3878   _UnhandledIRQ4:
                    3879   ; IRQMessage(4);
0000245E  4878 0004 3880          pea       4
00002462  4EB8 240E 3881          jsr       _IRQMessage
00002466  584F      3882          addq.w    #4,A7
00002468  4E75      3883          rts
                    3884   ; }
                    3885   ; void UnhandledIRQ5(void) {
                    3886   _UnhandledIRQ5:
                    3887   ; IRQMessage(5);
0000246A  4878 0005 3888          pea       5
0000246E  4EB8 240E 3889          jsr       _IRQMessage
00002472  584F      3890          addq.w    #4,A7
00002474  4E75      3891          rts
                    3892   ; }
                    3893   ; void UnhandledIRQ6(void) {
                    3894   _UnhandledIRQ6:
                    3895   ; PrintErrorMessageandAbort("ADDRESS ERROR: 16 or 32 Bit Transfer to/from an ODD Address....") ;
00002476  4879 0000 3896          pea       @m68kde~1_122.L
0000247A  543C      
0000247C  4EB8 23E2 3897          jsr       _PrintErrorMessageandAbort
00002480  584F      3898          addq.w    #4,A7
                    3899   ; menu() ;
00002482  4EB8 216E 3900          jsr       _menu
00002486  4E75      3901          rts
                    3902   ; }
                    3903   ; void UnhandledIRQ7(void) {
                    3904   _UnhandledIRQ7:
                    3905   ; IRQMessage(7);
00002488  4878 0007 3906          pea       7
0000248C  4EB8 240E 3907          jsr       _IRQMessage
00002490  584F      3908          addq.w    #4,A7
00002492  4E75      3909          rts
                    3910   ; }
                    3911   ; void UnhandledTrap(void) {
                    3912   _UnhandledTrap:
                    3913   ; PrintErrorMessageandAbort("Unhandled Trap !!!!!") ;
00002494  4879 0000 3914          pea       @m68kde~1_123.L
00002498  547C      
0000249A  4EB8 23E2 3915          jsr       _PrintErrorMessageandAbort
0000249E  584F      3916          addq.w    #4,A7
000024A0  4E75      3917          rts
                    3918   ; }
                    3919   ; void BusError() {
                    3920   _BusError:
                    3921   ; PrintErrorMessageandAbort("BUS Error!") ;
000024A2  4879 0000 3922          pea       @m68kde~1_124.L
000024A6  5492      
000024A8  4EB8 23E2 3923          jsr       _PrintErrorMessageandAbort
000024AC  584F      3924          addq.w    #4,A7
000024AE  4E75      3925          rts
                    3926   ; }
                    3927   ; void AddressError() {
                    3928   _AddressError:
                    3929   ; PrintErrorMessageandAbort("ADDRESS Error!") ;
000024B0  4879 0000 3930          pea       @m68kde~1_125.L
000024B4  549E      
000024B6  4EB8 23E2 3931          jsr       _PrintErrorMessageandAbort
000024BA  584F      3932          addq.w    #4,A7
000024BC  4E75      3933          rts
                    3934   ; }
                    3935   ; void IllegalInstruction() {
                    3936   _IllegalInstruction:
                    3937   ; PrintErrorMessageandAbort("ILLEGAL INSTRUCTION") ;
000024BE  4879 0000 3938          pea       @m68kde~1_126.L
000024C2  54AE      
000024C4  4EB8 23E2 3939          jsr       _PrintErrorMessageandAbort
000024C8  584F      3940          addq.w    #4,A7
000024CA  4E75      3941          rts
                    3942   ; }
                    3943   ; void Dividebyzero() {
                    3944   _Dividebyzero:
                    3945   ; PrintErrorMessageandAbort("DIVIDE BY ZERO") ;
000024CC  4879 0000 3946          pea       @m68kde~1_127.L
000024D0  54C2      
000024D2  4EB8 23E2 3947          jsr       _PrintErrorMessageandAbort
000024D6  584F      3948          addq.w    #4,A7
000024D8  4E75      3949          rts
                    3950   ; }
                    3951   ; void Check() {
                    3952   _Check:
                    3953   ; PrintErrorMessageandAbort("'CHK' INSTRUCTION") ;
000024DA  4879 0000 3954          pea       @m68kde~1_128.L
000024DE  54D2      
000024E0  4EB8 23E2 3955          jsr       _PrintErrorMessageandAbort
000024E4  584F      3956          addq.w    #4,A7
000024E6  4E75      3957          rts
                    3958   ; }
                    3959   ; void Trapv() {
                    3960   _Trapv:
                    3961   ; PrintErrorMessageandAbort("TRAPV INSTRUCTION") ;
000024E8  4879 0000 3962          pea       @m68kde~1_129.L
000024EC  54E4      
000024EE  4EB8 23E2 3963          jsr       _PrintErrorMessageandAbort
000024F2  584F      3964          addq.w    #4,A7
000024F4  4E75      3965          rts
                    3966   ; }
                    3967   ; void PrivError() {
                    3968   _PrivError:
                    3969   ; PrintErrorMessageandAbort("PRIVILEGE VIOLATION") ;
000024F6  4879 0000 3970          pea       @m68kde~1_130.L
000024FA  54F6      
000024FC  4EB8 23E2 3971          jsr       _PrintErrorMessageandAbort
00002500  584F      3972          addq.w    #4,A7
00002502  4E75      3973          rts
                    3974   ; }
                    3975   ; void UnitIRQ() {
                    3976   _UnitIRQ:
                    3977   ; PrintErrorMessageandAbort("UNINITIALISED IRQ") ;
00002504  4879 0000 3978          pea       @m68kde~1_131.L
00002508  550A      
0000250A  4EB8 23E2 3979          jsr       _PrintErrorMessageandAbort
0000250E  584F      3980          addq.w    #4,A7
00002510  4E75      3981          rts
                    3982   ; }
                    3983   ; void Spurious() {
                    3984   _Spurious:
                    3985   ; PrintErrorMessageandAbort("SPURIOUS IRQ") ;
00002512  4879 0000 3986          pea       @m68kde~1_132.L
00002516  551C      
00002518  4EB8 23E2 3987          jsr       _PrintErrorMessageandAbort
0000251C  584F      3988          addq.w    #4,A7
0000251E  4E75      3989          rts
                    3990   ; }
                    3991   ; void EnterString(void)
                    3992   ; {
                    3993   _EnterString:
00002520  4E56 FFFC 3994          link      A6,#-4
00002524  2F02      3995          move.l    D2,-(A7)
                    3996   ; unsigned char *Start;
                    3997   ; unsigned char c;
                    3998   ; printf("\r\nStart Address in Memory: ") ;
00002526  4879 0000 3999          pea       @m68kde~1_133.L
0000252A  552A      
0000252C  4EB9 0000 4000          jsr       _printf
00002530  3BF6      
00002532  584F      4001          addq.w    #4,A7
                    4002   ; Start = Get8HexDigits(0) ;
00002534  42A7      4003          clr.l     -(A7)
00002536  4EB8 0CA4 4004          jsr       _Get8HexDigits
0000253A  584F      4005          addq.w    #4,A7
0000253C  2400      4006          move.l    D0,D2
                    4007   ; printf("\r\nEnter String (ESC to end) :") ;
0000253E  4879 0000 4008          pea       @m68kde~1_134.L
00002542  5546      
00002544  4EB9 0000 4009          jsr       _printf
00002548  3BF6      
0000254A  584F      4010          addq.w    #4,A7
                    4011   ; while((c = getchar()) != 0x1b)
                    4012   EnterString_1:
0000254C  4EB9 0000 4013          jsr       _getch
00002550  3282      
00002552  1D40 FFFF 4014          move.b    D0,-1(A6)
00002556  0C00 001B 4015          cmp.b     #27,D0
0000255A  670A      4016          beq.s     EnterString_3
                    4017   ; *Start++ = c ;
0000255C  2042      4018          move.l    D2,A0
0000255E  5282      4019          addq.l    #1,D2
00002560  10AE FFFF 4020          move.b    -1(A6),(A0)
00002564  60E6      4021          bra       EnterString_1
                    4022   EnterString_3:
                    4023   ; *Start = 0x00;  // terminate with a null
00002566  2042      4024          move.l    D2,A0
00002568  4210      4025          clr.b     (A0)
0000256A  241F      4026          move.l    (A7)+,D2
0000256C  4E5E      4027          unlk      A6
0000256E  4E75      4028          rts
                    4029   ; }
                    4030   ; // Memory test helper functions
                    4031   ; int Get2HexDigitsForMemTest(char pat)
                    4032   ; {
                    4033   _Get2HexDigitsForMemTest:
00002570  4E56 0000 4034          link      A6,#0
                    4035   ; return (xtod(pat) << 4) | (xtod(pat));
00002574  122E 000B 4036          move.b    11(A6),D1
00002578  4881      4037          ext.w     D1
0000257A  48C1      4038          ext.l     D1
0000257C  2F01      4039          move.l    D1,-(A7)
0000257E  4EB8 0BD2 4040          jsr       _xtod
00002582  584F      4041          addq.w    #4,A7
00002584  C0BC 0000 4042          and.l     #255,D0
00002588  00FF      
0000258A  E980      4043          asl.l     #4,D0
0000258C  2F00      4044          move.l    D0,-(A7)
0000258E  102E 000B 4045          move.b    11(A6),D0
00002592  4880      4046          ext.w     D0
00002594  48C0      4047          ext.l     D0
00002596  2F00      4048          move.l    D0,-(A7)
00002598  4EB8 0BD2 4049          jsr       _xtod
0000259C  584F      4050          addq.w    #4,A7
0000259E  2200      4051          move.l    D0,D1
000025A0  201F      4052          move.l    (A7)+,D0
000025A2  C2BC 0000 4053          and.l     #255,D1
000025A6  00FF      
000025A8  8081      4054          or.l      D1,D0
000025AA  4E5E      4055          unlk      A6
000025AC  4E75      4056          rts
                    4057   ; }
                    4058   ; int Get4HexDigitsForMemTest(char pat)
                    4059   ; {
                    4060   _Get4HexDigitsForMemTest:
000025AE  4E56 0000 4061          link      A6,#0
000025B2  2F02      4062          move.l    D2,-(A7)
000025B4  142E 000B 4063          move.b    11(A6),D2
000025B8  4882      4064          ext.w     D2
000025BA  48C2      4065          ext.l     D2
                    4066   ; return (xtod(pat) << 12) | (xtod(pat) << 8) |(Get2HexDigitsForMemTest(pat));
000025BC  4882      4067          ext.w     D2
000025BE  48C2      4068          ext.l     D2
000025C0  2F02      4069          move.l    D2,-(A7)
000025C2  4EB8 0BD2 4070          jsr       _xtod
000025C6  584F      4071          addq.w    #4,A7
000025C8  E100      4072          asl.b     #8,D0
000025CA  E900      4073          asl.b     #4,D0
000025CC  2F00      4074          move.l    D0,-(A7)
000025CE  4882      4075          ext.w     D2
000025D0  48C2      4076          ext.l     D2
000025D2  2F02      4077          move.l    D2,-(A7)
000025D4  4EB8 0BD2 4078          jsr       _xtod
000025D8  584F      4079          addq.w    #4,A7
000025DA  2200      4080          move.l    D0,D1
000025DC  201F      4081          move.l    (A7)+,D0
000025DE  E101      4082          asl.b     #8,D1
000025E0  8001      4083          or.b      D1,D0
000025E2  4880      4084          ext.w     D0
000025E4  48C0      4085          ext.l     D0
000025E6  2F00      4086          move.l    D0,-(A7)
000025E8  4882      4087          ext.w     D2
000025EA  48C2      4088          ext.l     D2
000025EC  2F02      4089          move.l    D2,-(A7)
000025EE  4EB8 2570 4090          jsr       _Get2HexDigitsForMemTest
000025F2  584F      4091          addq.w    #4,A7
000025F4  2200      4092          move.l    D0,D1
000025F6  201F      4093          move.l    (A7)+,D0
000025F8  8081      4094          or.l      D1,D0
000025FA  241F      4095          move.l    (A7)+,D2
000025FC  4E5E      4096          unlk      A6
000025FE  4E75      4097          rts
                    4098   ; }
                    4099   ; int Get8HexDigitsForMemTest(char pat)
                    4100   ; {
                    4101   _Get8HexDigitsForMemTest:
00002600  4E56 0000 4102          link      A6,#0
00002604  48E7 2020 4103          movem.l   D2/A2,-(A7)
00002608  142E 000B 4104          move.b    11(A6),D2
0000260C  4882      4105          ext.w     D2
0000260E  48C2      4106          ext.l     D2
00002610  45F8 0BD2 4107          lea       _xtod.L,A2
                    4108   ; return  (xtod(pat) << 28) | (xtod(pat) << 24) | (xtod(pat) << 20) | (xtod(pat) << 16) |(Get4HexDigitsForMemTest(pat));
00002614  4882      4109          ext.w     D2
00002616  48C2      4110          ext.l     D2
00002618  2F02      4111          move.l    D2,-(A7)
0000261A  4E92      4112          jsr       (A2)
0000261C  584F      4113          addq.w    #4,A7
0000261E  E100      4114          asl.b     #8,D0
00002620  E100      4115          asl.b     #8,D0
00002622  E100      4116          asl.b     #8,D0
00002624  E900      4117          asl.b     #4,D0
00002626  2F00      4118          move.l    D0,-(A7)
00002628  4882      4119          ext.w     D2
0000262A  48C2      4120          ext.l     D2
0000262C  2F02      4121          move.l    D2,-(A7)
0000262E  4E92      4122          jsr       (A2)
00002630  584F      4123          addq.w    #4,A7
00002632  2200      4124          move.l    D0,D1
00002634  201F      4125          move.l    (A7)+,D0
00002636  E101      4126          asl.b     #8,D1
00002638  E101      4127          asl.b     #8,D1
0000263A  E101      4128          asl.b     #8,D1
0000263C  8001      4129          or.b      D1,D0
0000263E  2F00      4130          move.l    D0,-(A7)
00002640  4882      4131          ext.w     D2
00002642  48C2      4132          ext.l     D2
00002644  2F02      4133          move.l    D2,-(A7)
00002646  4E92      4134          jsr       (A2)
00002648  584F      4135          addq.w    #4,A7
0000264A  2200      4136          move.l    D0,D1
0000264C  201F      4137          move.l    (A7)+,D0
0000264E  E101      4138          asl.b     #8,D1
00002650  E101      4139          asl.b     #8,D1
00002652  E901      4140          asl.b     #4,D1
00002654  8001      4141          or.b      D1,D0
00002656  2F00      4142          move.l    D0,-(A7)
00002658  4882      4143          ext.w     D2
0000265A  48C2      4144          ext.l     D2
0000265C  2F02      4145          move.l    D2,-(A7)
0000265E  4E92      4146          jsr       (A2)
00002660  584F      4147          addq.w    #4,A7
00002662  2200      4148          move.l    D0,D1
00002664  201F      4149          move.l    (A7)+,D0
00002666  E101      4150          asl.b     #8,D1
00002668  E101      4151          asl.b     #8,D1
0000266A  8001      4152          or.b      D1,D0
0000266C  4880      4153          ext.w     D0
0000266E  48C0      4154          ext.l     D0
00002670  2F00      4155          move.l    D0,-(A7)
00002672  4882      4156          ext.w     D2
00002674  48C2      4157          ext.l     D2
00002676  2F02      4158          move.l    D2,-(A7)
00002678  4EB8 25AE 4159          jsr       _Get4HexDigitsForMemTest
0000267C  584F      4160          addq.w    #4,A7
0000267E  2200      4161          move.l    D0,D1
00002680  201F      4162          move.l    (A7)+,D0
00002682  8081      4163          or.l      D1,D0
00002684  4CDF 0404 4164          movem.l   (A7)+,D2/A2
00002688  4E5E      4165          unlk      A6
0000268A  4E75      4166          rts
                    4167   ; }
                    4168   ; int Get7HexDigitsForMemTest(char one, char two, char three, char four, char five, char six, char seven)
                    4169   ; {
                    4170   _Get7HexDigitsForMemTest:
0000268C  4E56 0000 4171          link      A6,#0
00002690  2F0A      4172          move.l    A2,-(A7)
00002692  45F8 0BD2 4173          lea       _xtod.L,A2
                    4174   ; return (xtod(one) << 24) | (xtod(two) << 20) | (xtod(three) << 16) | (xtod(four) << 12) | (xtod(five) << 8) | (xtod(six) << 4) | (xtod(seven));
00002696  122E 000B 4175          move.b    11(A6),D1
0000269A  4881      4176          ext.w     D1
0000269C  48C1      4177          ext.l     D1
0000269E  2F01      4178          move.l    D1,-(A7)
000026A0  4E92      4179          jsr       (A2)
000026A2  584F      4180          addq.w    #4,A7
000026A4  C0BC 0000 4181          and.l     #255,D0
000026A8  00FF      
000026AA  E180      4182          asl.l     #8,D0
000026AC  E180      4183          asl.l     #8,D0
000026AE  E180      4184          asl.l     #8,D0
000026B0  2F00      4185          move.l    D0,-(A7)
000026B2  102E 000F 4186          move.b    15(A6),D0
000026B6  4880      4187          ext.w     D0
000026B8  48C0      4188          ext.l     D0
000026BA  2F00      4189          move.l    D0,-(A7)
000026BC  4E92      4190          jsr       (A2)
000026BE  584F      4191          addq.w    #4,A7
000026C0  2200      4192          move.l    D0,D1
000026C2  201F      4193          move.l    (A7)+,D0
000026C4  C2BC 0000 4194          and.l     #255,D1
000026C8  00FF      
000026CA  E181      4195          asl.l     #8,D1
000026CC  E181      4196          asl.l     #8,D1
000026CE  E981      4197          asl.l     #4,D1
000026D0  8081      4198          or.l      D1,D0
000026D2  2F00      4199          move.l    D0,-(A7)
000026D4  102E 0013 4200          move.b    19(A6),D0
000026D8  4880      4201          ext.w     D0
000026DA  48C0      4202          ext.l     D0
000026DC  2F00      4203          move.l    D0,-(A7)
000026DE  4E92      4204          jsr       (A2)
000026E0  584F      4205          addq.w    #4,A7
000026E2  2200      4206          move.l    D0,D1
000026E4  201F      4207          move.l    (A7)+,D0
000026E6  C2BC 0000 4208          and.l     #255,D1
000026EA  00FF      
000026EC  E181      4209          asl.l     #8,D1
000026EE  E181      4210          asl.l     #8,D1
000026F0  8081      4211          or.l      D1,D0
000026F2  2F00      4212          move.l    D0,-(A7)
000026F4  102E 0017 4213          move.b    23(A6),D0
000026F8  4880      4214          ext.w     D0
000026FA  48C0      4215          ext.l     D0
000026FC  2F00      4216          move.l    D0,-(A7)
000026FE  4E92      4217          jsr       (A2)
00002700  584F      4218          addq.w    #4,A7
00002702  2200      4219          move.l    D0,D1
00002704  201F      4220          move.l    (A7)+,D0
00002706  C2BC 0000 4221          and.l     #255,D1
0000270A  00FF      
0000270C  E181      4222          asl.l     #8,D1
0000270E  E981      4223          asl.l     #4,D1
00002710  8081      4224          or.l      D1,D0
00002712  2F00      4225          move.l    D0,-(A7)
00002714  102E 001B 4226          move.b    27(A6),D0
00002718  4880      4227          ext.w     D0
0000271A  48C0      4228          ext.l     D0
0000271C  2F00      4229          move.l    D0,-(A7)
0000271E  4E92      4230          jsr       (A2)
00002720  584F      4231          addq.w    #4,A7
00002722  2200      4232          move.l    D0,D1
00002724  201F      4233          move.l    (A7)+,D0
00002726  C2BC 0000 4234          and.l     #255,D1
0000272A  00FF      
0000272C  E181      4235          asl.l     #8,D1
0000272E  8081      4236          or.l      D1,D0
00002730  2F00      4237          move.l    D0,-(A7)
00002732  102E 001F 4238          move.b    31(A6),D0
00002736  4880      4239          ext.w     D0
00002738  48C0      4240          ext.l     D0
0000273A  2F00      4241          move.l    D0,-(A7)
0000273C  4E92      4242          jsr       (A2)
0000273E  584F      4243          addq.w    #4,A7
00002740  2200      4244          move.l    D0,D1
00002742  201F      4245          move.l    (A7)+,D0
00002744  C2BC 0000 4246          and.l     #255,D1
00002748  00FF      
0000274A  E981      4247          asl.l     #4,D1
0000274C  8081      4248          or.l      D1,D0
0000274E  2F00      4249          move.l    D0,-(A7)
00002750  102E 0023 4250          move.b    35(A6),D0
00002754  4880      4251          ext.w     D0
00002756  48C0      4252          ext.l     D0
00002758  2F00      4253          move.l    D0,-(A7)
0000275A  4E92      4254          jsr       (A2)
0000275C  584F      4255          addq.w    #4,A7
0000275E  2200      4256          move.l    D0,D1
00002760  201F      4257          move.l    (A7)+,D0
00002762  C2BC 0000 4258          and.l     #255,D1
00002766  00FF      
00002768  8081      4259          or.l      D1,D0
0000276A  245F      4260          move.l    (A7)+,A2
0000276C  4E5E      4261          unlk      A6
0000276E  4E75      4262          rts
                    4263   ; }
                    4264   ; int Get7HexDigits(void)
                    4265   ; {
                    4266   _Get7HexDigits:
00002770  48E7 2030 4267          movem.l   D2/A2/A3,-(A7)
00002774  45F8 0B68 4268          lea       __getch.L,A2
00002778  47F8 0BD2 4269          lea       _xtod.L,A3
                    4270   ; register int i = (xtod(_getch()) << 24) | (xtod(_getch()) << 20) | (xtod(_getch()) << 16) | (xtod(_getch()) << 12) | (xtod(_getch()) << 8) | (xtod(_getch()) << 4) | (xtod(_getch()));
0000277C  2F00      4271          move.l    D0,-(A7)
0000277E  4E92      4272          jsr       (A2)
00002780  2200      4273          move.l    D0,D1
00002782  201F      4274          move.l    (A7)+,D0
00002784  2F01      4275          move.l    D1,-(A7)
00002786  4E93      4276          jsr       (A3)
00002788  584F      4277          addq.w    #4,A7
0000278A  C0BC 0000 4278          and.l     #255,D0
0000278E  00FF      
00002790  E180      4279          asl.l     #8,D0
00002792  E180      4280          asl.l     #8,D0
00002794  E180      4281          asl.l     #8,D0
00002796  2F00      4282          move.l    D0,-(A7)
00002798  2F01      4283          move.l    D1,-(A7)
0000279A  4E92      4284          jsr       (A2)
0000279C  221F      4285          move.l    (A7)+,D1
0000279E  2F00      4286          move.l    D0,-(A7)
000027A0  4E93      4287          jsr       (A3)
000027A2  584F      4288          addq.w    #4,A7
000027A4  2200      4289          move.l    D0,D1
000027A6  201F      4290          move.l    (A7)+,D0
000027A8  C2BC 0000 4291          and.l     #255,D1
000027AC  00FF      
000027AE  E181      4292          asl.l     #8,D1
000027B0  E181      4293          asl.l     #8,D1
000027B2  E981      4294          asl.l     #4,D1
000027B4  8081      4295          or.l      D1,D0
000027B6  2F00      4296          move.l    D0,-(A7)
000027B8  2F01      4297          move.l    D1,-(A7)
000027BA  4E92      4298          jsr       (A2)
000027BC  221F      4299          move.l    (A7)+,D1
000027BE  2F00      4300          move.l    D0,-(A7)
000027C0  4E93      4301          jsr       (A3)
000027C2  584F      4302          addq.w    #4,A7
000027C4  2200      4303          move.l    D0,D1
000027C6  201F      4304          move.l    (A7)+,D0
000027C8  C2BC 0000 4305          and.l     #255,D1
000027CC  00FF      
000027CE  E181      4306          asl.l     #8,D1
000027D0  E181      4307          asl.l     #8,D1
000027D2  8081      4308          or.l      D1,D0
000027D4  2F00      4309          move.l    D0,-(A7)
000027D6  2F01      4310          move.l    D1,-(A7)
000027D8  4E92      4311          jsr       (A2)
000027DA  221F      4312          move.l    (A7)+,D1
000027DC  2F00      4313          move.l    D0,-(A7)
000027DE  4E93      4314          jsr       (A3)
000027E0  584F      4315          addq.w    #4,A7
000027E2  2200      4316          move.l    D0,D1
000027E4  201F      4317          move.l    (A7)+,D0
000027E6  C2BC 0000 4318          and.l     #255,D1
000027EA  00FF      
000027EC  E181      4319          asl.l     #8,D1
000027EE  E981      4320          asl.l     #4,D1
000027F0  8081      4321          or.l      D1,D0
000027F2  2F00      4322          move.l    D0,-(A7)
000027F4  2F01      4323          move.l    D1,-(A7)
000027F6  4E92      4324          jsr       (A2)
000027F8  221F      4325          move.l    (A7)+,D1
000027FA  2F00      4326          move.l    D0,-(A7)
000027FC  4E93      4327          jsr       (A3)
000027FE  584F      4328          addq.w    #4,A7
00002800  2200      4329          move.l    D0,D1
00002802  201F      4330          move.l    (A7)+,D0
00002804  C2BC 0000 4331          and.l     #255,D1
00002808  00FF      
0000280A  E181      4332          asl.l     #8,D1
0000280C  8081      4333          or.l      D1,D0
0000280E  2F00      4334          move.l    D0,-(A7)
00002810  2F01      4335          move.l    D1,-(A7)
00002812  4E92      4336          jsr       (A2)
00002814  221F      4337          move.l    (A7)+,D1
00002816  2F00      4338          move.l    D0,-(A7)
00002818  4E93      4339          jsr       (A3)
0000281A  584F      4340          addq.w    #4,A7
0000281C  2200      4341          move.l    D0,D1
0000281E  201F      4342          move.l    (A7)+,D0
00002820  C2BC 0000 4343          and.l     #255,D1
00002824  00FF      
00002826  E981      4344          asl.l     #4,D1
00002828  8081      4345          or.l      D1,D0
0000282A  2F00      4346          move.l    D0,-(A7)
0000282C  2F01      4347          move.l    D1,-(A7)
0000282E  4E92      4348          jsr       (A2)
00002830  221F      4349          move.l    (A7)+,D1
00002832  2F00      4350          move.l    D0,-(A7)
00002834  4E93      4351          jsr       (A3)
00002836  584F      4352          addq.w    #4,A7
00002838  2200      4353          move.l    D0,D1
0000283A  201F      4354          move.l    (A7)+,D0
0000283C  C2BC 0000 4355          and.l     #255,D1
00002840  00FF      
00002842  8081      4356          or.l      D1,D0
00002844  2400      4357          move.l    D0,D2
                    4358   ; return i;
00002846  2002      4359          move.l    D2,D0
00002848  4CDF 0C04 4360          movem.l   (A7)+,D2/A2/A3
0000284C  4E75      4361          rts
                    4362   ; }
                    4363   ; void FillMemoryForMemTest(char* StartRamPtr, char* EndRamPtr, unsigned long FillData, int config)
                    4364   ; {
                    4365   _FillMemoryForMemTest:
0000284E  4E56 0000 4366          link      A6,#0
00002852  48E7 3C00 4367          movem.l   D2/D3/D4/D5,-(A7)
00002856  262E 000C 4368          move.l    12(A6),D3
0000285A  282E 0010 4369          move.l    16(A6),D4
0000285E  2A2E 0014 4370          move.l    20(A6),D5
                    4371   ; char* start = StartRamPtr;
00002862  242E 0008 4372          move.l    8(A6),D2
                    4373   ; printf("\r\nFilling Addresses [$%08X - $%08X] with $%02X", StartRamPtr, EndRamPtr, FillData);
00002866  2F04      4374          move.l    D4,-(A7)
00002868  2F03      4375          move.l    D3,-(A7)
0000286A  2F2E 0008 4376          move.l    8(A6),-(A7)
0000286E  4879 0000 4377          pea       @m68kde~1_13.L
00002872  468C      
00002874  4EB9 0000 4378          jsr       _printf
00002878  3BF6      
0000287A  DEFC 0010 4379          add.w     #16,A7
                    4380   ; if (config == 1) {
0000287E  0C85 0000 4381          cmp.l     #1,D5
00002882  0001      
00002884  660C      4382          bne.s     FillMemoryForMemTest_5
                    4383   ; while (start <= EndRamPtr){
                    4384   FillMemoryForMemTest_3:
00002886  B483      4385          cmp.l     D3,D2
00002888  6208      4386          bhi.s     FillMemoryForMemTest_5
                    4387   ; *start++ = FillData;
0000288A  2042      4388          move.l    D2,A0
0000288C  5282      4389          addq.l    #1,D2
0000288E  1084      4390          move.b    D4,(A0)
00002890  60F4      4391          bra       FillMemoryForMemTest_3
                    4392   FillMemoryForMemTest_5:
                    4393   ; }
                    4394   ; }
                    4395   ; if (config == 2) {
00002892  0C85 0000 4396          cmp.l     #2,D5
00002896  0002      
00002898  660C      4397          bne.s     FillMemoryForMemTest_10
                    4398   ; while (start <= EndRamPtr) {
                    4399   FillMemoryForMemTest_8:
0000289A  B483      4400          cmp.l     D3,D2
0000289C  6208      4401          bhi.s     FillMemoryForMemTest_10
                    4402   ; *start = FillData;
0000289E  2042      4403          move.l    D2,A0
000028A0  1084      4404          move.b    D4,(A0)
                    4405   ; start += 1;
000028A2  5282      4406          addq.l    #1,D2
000028A4  60F4      4407          bra       FillMemoryForMemTest_8
                    4408   FillMemoryForMemTest_10:
                    4409   ; }
                    4410   ; }
                    4411   ; if (config == 3) {
000028A6  0C85 0000 4412          cmp.l     #3,D5
000028AA  0003      
000028AC  660C      4413          bne.s     FillMemoryForMemTest_15
                    4414   ; while (start <= EndRamPtr) {
                    4415   FillMemoryForMemTest_13:
000028AE  B483      4416          cmp.l     D3,D2
000028B0  6208      4417          bhi.s     FillMemoryForMemTest_15
                    4418   ; *start = FillData;
000028B2  2042      4419          move.l    D2,A0
000028B4  1084      4420          move.b    D4,(A0)
                    4421   ; start += 1;
000028B6  5282      4422          addq.l    #1,D2
000028B8  60F4      4423          bra       FillMemoryForMemTest_13
                    4424   FillMemoryForMemTest_15:
000028BA  4CDF 003C 4425          movem.l   (A7)+,D2/D3/D4/D5
000028BE  4E5E      4426          unlk      A6
000028C0  4E75      4427          rts
                    4428   ; }
                    4429   ; }
                    4430   ; }
                    4431   ; void ReadMemoryForMemTest(char* StartRamPtr, char* EndRamPtr, unsigned long FillData, int config)
                    4432   ; {
                    4433   _ReadMemoryForMemTest:
000028C2  4E56 0000 4434          link      A6,#0
000028C6  48E7 3F20 4435          movem.l   D2/D3/D4/D5/D6/D7/A2,-(A7)
000028CA  45F9 0000 4436          lea       _printf.L,A2
000028CE  3BF6      
000028D0  262E 0010 4437          move.l    16(A6),D3
000028D4  2A2E 000C 4438          move.l    12(A6),D5
000028D8  2E2E 0014 4439          move.l    20(A6),D7
                    4440   ; unsigned char* start = StartRamPtr;
000028DC  242E 0008 4441          move.l    8(A6),D2
                    4442   ; printf("\r\nReading Addresses [$%08X - $%08X] for $%02X", StartRamPtr, EndRamPtr, FillData);
000028E0  2F03      4443          move.l    D3,-(A7)
000028E2  2F05      4444          move.l    D5,-(A7)
000028E4  2F2E 0008 4445          move.l    8(A6),-(A7)
000028E8  4879 0000 4446          pea       @m68kde~1_135.L
000028EC  5564      
000028EE  4E92      4447          jsr       (A2)
000028F0  DEFC 0010 4448          add.w     #16,A7
                    4449   ; if (config == 1) {
000028F4  0C87 0000 4450          cmp.l     #1,D7
000028F8  0001      
000028FA  6600 0050 4451          bne       ReadMemoryForMemTest_5
                    4452   ; while (start <= EndRamPtr) {
                    4453   ReadMemoryForMemTest_3:
000028FE  B485      4454          cmp.l     D5,D2
00002900  6200 004A 4455          bhi       ReadMemoryForMemTest_5
                    4456   ; if (*start != FillData)
00002904  2042      4457          move.l    D2,A0
00002906  1010      4458          move.b    (A0),D0
00002908  C0BC 0000 4459          and.l     #255,D0
0000290C  00FF      
0000290E  B083      4460          cmp.l     D3,D0
00002910  671C      4461          beq.s     ReadMemoryForMemTest_6
                    4462   ; printf("\r\nValue incorrect at addresses $%08X ... should be $%02X but found $%02X", start, FillData, *start);
00002912  2042      4463          move.l    D2,A0
00002914  1210      4464          move.b    (A0),D1
00002916  C2BC 0000 4465          and.l     #255,D1
0000291A  00FF      
0000291C  2F01      4466          move.l    D1,-(A7)
0000291E  2F03      4467          move.l    D3,-(A7)
00002920  2F02      4468          move.l    D2,-(A7)
00002922  4879 0000 4469          pea       @m68kde~1_136.L
00002926  5592      
00002928  4E92      4470          jsr       (A2)
0000292A  DEFC 0010 4471          add.w     #16,A7
                    4472   ReadMemoryForMemTest_6:
                    4473   ; printf("\r\nValue: $%02X found at Address: $%08X", *start, start);
0000292E  2F02      4474          move.l    D2,-(A7)
00002930  2042      4475          move.l    D2,A0
00002932  1210      4476          move.b    (A0),D1
00002934  C2BC 0000 4477          and.l     #255,D1
00002938  00FF      
0000293A  2F01      4478          move.l    D1,-(A7)
0000293C  4879 0000 4479          pea       @m68kde~1_137.L
00002940  55DC      
00002942  4E92      4480          jsr       (A2)
00002944  DEFC 000C 4481          add.w     #12,A7
                    4482   ; start++;
00002948  5282      4483          addq.l    #1,D2
0000294A  60B2      4484          bra       ReadMemoryForMemTest_3
                    4485   ReadMemoryForMemTest_5:
                    4486   ; }
                    4487   ; }
                    4488   ; if (config == 2) {
0000294C  0C87 0000 4489          cmp.l     #2,D7
00002950  0002      
00002952  6600 0064 4490          bne       ReadMemoryForMemTest_12
                    4491   ; while (start <= EndRamPtr) {
                    4492   ReadMemoryForMemTest_10:
00002956  B485      4493          cmp.l     D5,D2
00002958  6200 005E 4494          bhi       ReadMemoryForMemTest_12
                    4495   ; if(*start != FillData)
0000295C  2042      4496          move.l    D2,A0
0000295E  1010      4497          move.b    (A0),D0
00002960  C0BC 0000 4498          and.l     #255,D0
00002964  00FF      
00002966  B083      4499          cmp.l     D3,D0
00002968  671C      4500          beq.s     ReadMemoryForMemTest_13
                    4501   ; printf("\r\nValue incorrect at addresses $%08X ... should be $%02X but found $%02X", start, FillData, *start);
0000296A  2042      4502          move.l    D2,A0
0000296C  1210      4503          move.b    (A0),D1
0000296E  C2BC 0000 4504          and.l     #255,D1
00002972  00FF      
00002974  2F01      4505          move.l    D1,-(A7)
00002976  2F03      4506          move.l    D3,-(A7)
00002978  2F02      4507          move.l    D2,-(A7)
0000297A  4879 0000 4508          pea       @m68kde~1_136.L
0000297E  5592      
00002980  4E92      4509          jsr       (A2)
00002982  DEFC 0010 4510          add.w     #16,A7
                    4511   ReadMemoryForMemTest_13:
                    4512   ; printf("\r\nValue: $%02X $%02X found at Address: $%08X and $%08X", *start, *(start + 1), start, (start + 1));
00002986  2202      4513          move.l    D2,D1
00002988  5281      4514          addq.l    #1,D1
0000298A  2F01      4515          move.l    D1,-(A7)
0000298C  2F02      4516          move.l    D2,-(A7)
0000298E  2042      4517          move.l    D2,A0
00002990  1228 0001 4518          move.b    1(A0),D1
00002994  C2BC 0000 4519          and.l     #255,D1
00002998  00FF      
0000299A  2F01      4520          move.l    D1,-(A7)
0000299C  2042      4521          move.l    D2,A0
0000299E  1210      4522          move.b    (A0),D1
000029A0  C2BC 0000 4523          and.l     #255,D1
000029A4  00FF      
000029A6  2F01      4524          move.l    D1,-(A7)
000029A8  4879 0000 4525          pea       @m68kde~1_138.L
000029AC  5604      
000029AE  4E92      4526          jsr       (A2)
000029B0  DEFC 0014 4527          add.w     #20,A7
                    4528   ; start += 2;
000029B4  5482      4529          addq.l    #2,D2
000029B6  609E      4530          bra       ReadMemoryForMemTest_10
                    4531   ReadMemoryForMemTest_12:
                    4532   ; }
                    4533   ; }
                    4534   ; if (config == 3) {
000029B8  0C87 0000 4535          cmp.l     #3,D7
000029BC  0003      
000029BE  6600 00A4 4536          bne       ReadMemoryForMemTest_24
                    4537   ; int count = 0;
000029C2  4284      4538          clr.l     D4
                    4539   ; int noError = 1;
000029C4  7C01      4540          moveq     #1,D6
                    4541   ; while (start <= EndRamPtr) {
                    4542   ReadMemoryForMemTest_17:
000029C6  B485      4543          cmp.l     D5,D2
000029C8  6200 008C 4544          bhi       ReadMemoryForMemTest_19
                    4545   ; if (*start != FillData){
000029CC  2042      4546          move.l    D2,A0
000029CE  1010      4547          move.b    (A0),D0
000029D0  C0BC 0000 4548          and.l     #255,D0
000029D4  00FF      
000029D6  B083      4549          cmp.l     D3,D0
000029D8  671E      4550          beq.s     ReadMemoryForMemTest_20
                    4551   ; printf("\r\nValue incorrect at addresses $%08X ... should be $%02X but found $%02X", start, FillData, *start);
000029DA  2042      4552          move.l    D2,A0
000029DC  1210      4553          move.b    (A0),D1
000029DE  C2BC 0000 4554          and.l     #255,D1
000029E2  00FF      
000029E4  2F01      4555          move.l    D1,-(A7)
000029E6  2F03      4556          move.l    D3,-(A7)
000029E8  2F02      4557          move.l    D2,-(A7)
000029EA  4879 0000 4558          pea       @m68kde~1_136.L
000029EE  5592      
000029F0  4E92      4559          jsr       (A2)
000029F2  DEFC 0010 4560          add.w     #16,A7
                    4561   ; noError = 0;
000029F6  4286      4562          clr.l     D6
                    4563   ReadMemoryForMemTest_20:
                    4564   ; }
                    4565   ; if(count == 1000) {
000029F8  0C84 0000 4566          cmp.l     #1000,D4
000029FC  03E8      
000029FE  6600 004E 4567          bne       ReadMemoryForMemTest_22
                    4568   ; count = 0;
00002A02  4284      4569          clr.l     D4
                    4570   ; printf("\r\nValue: $%02X $%02X $%02X $%02X found at Address: $%08X - $%08X", *start, *(start + 1), *(start + 2), *(start + 3), start, (start + 3));
00002A04  2202      4571          move.l    D2,D1
00002A06  5681      4572          addq.l    #3,D1
00002A08  2F01      4573          move.l    D1,-(A7)
00002A0A  2F02      4574          move.l    D2,-(A7)
00002A0C  2042      4575          move.l    D2,A0
00002A0E  1228 0003 4576          move.b    3(A0),D1
00002A12  C2BC 0000 4577          and.l     #255,D1
00002A16  00FF      
00002A18  2F01      4578          move.l    D1,-(A7)
00002A1A  2042      4579          move.l    D2,A0
00002A1C  1228 0002 4580          move.b    2(A0),D1
00002A20  C2BC 0000 4581          and.l     #255,D1
00002A24  00FF      
00002A26  2F01      4582          move.l    D1,-(A7)
00002A28  2042      4583          move.l    D2,A0
00002A2A  1228 0001 4584          move.b    1(A0),D1
00002A2E  C2BC 0000 4585          and.l     #255,D1
00002A32  00FF      
00002A34  2F01      4586          move.l    D1,-(A7)
00002A36  2042      4587          move.l    D2,A0
00002A38  1210      4588          move.b    (A0),D1
00002A3A  C2BC 0000 4589          and.l     #255,D1
00002A3E  00FF      
00002A40  2F01      4590          move.l    D1,-(A7)
00002A42  4879 0000 4591          pea       @m68kde~1_139.L
00002A46  563C      
00002A48  4E92      4592          jsr       (A2)
00002A4A  DEFC 001C 4593          add.w     #28,A7
                    4594   ReadMemoryForMemTest_22:
                    4595   ; }
                    4596   ; start += 4;
00002A4E  5882      4597          addq.l    #4,D2
                    4598   ; count++;
00002A50  5284      4599          addq.l    #1,D4
00002A52  6000 FF72 4600          bra       ReadMemoryForMemTest_17
                    4601   ReadMemoryForMemTest_19:
                    4602   ; }
                    4603   ; if (noError)
00002A56  4A86      4604          tst.l     D6
00002A58  670A      4605          beq.s     ReadMemoryForMemTest_24
                    4606   ; printf("\r\nTest passed successfully. Note: the sample data are printed every 1000 addresses");
00002A5A  4879 0000 4607          pea       @m68kde~1_140.L
00002A5E  567E      
00002A60  4E92      4608          jsr       (A2)
00002A62  584F      4609          addq.w    #4,A7
                    4610   ReadMemoryForMemTest_24:
00002A64  4CDF 04FC 4611          movem.l   (A7)+,D2/D3/D4/D5/D6/D7/A2
00002A68  4E5E      4612          unlk      A6
00002A6A  4E75      4613          rts
                    4614   ; }
                    4615   ; }
                    4616   ; void MemoryTest(void)
                    4617   ; {
                    4618   _MemoryTest:
00002A6C  4E56 FFF0 4619          link      A6,#-16
00002A70  48E7 3F3C 4620          movem.l   D2/D3/D4/D5/D6/D7/A2/A3/A4/A5,-(A7)
00002A74  45F9 0000 4621          lea       _printf.L,A2
00002A78  3BF6      
00002A7A  49F8 28C2 4622          lea       _ReadMemoryForMemTest.L,A4
00002A7E  4BF8 2570 4623          lea       _Get2HexDigitsForMemTest.L,A5
                    4624   ; unsigned int start_boundary = 0x09000000;
00002A82  2E3C 0900 4625          move.l    #150994944,D7
00002A86  0000      
                    4626   ; unsigned int end_boundary = 0x097FFFFF;
00002A88  2C3C 097F 4627          move.l    #159383551,D6
00002A8C  FFFF      
                    4628   ; int test_config = 0;
00002A8E  4285      4629          clr.l     D5
                    4630   ; int test_pattern = 0;
00002A90  367C 0000 4631          move.w    #0,A3
                    4632   ; char start_addr[7];
                    4633   ; int start_val = 0;
00002A94  4282      4634          clr.l     D2
                    4635   ; char end_addr[7];
                    4636   ; int end_val = 0;
00002A96  4283      4637          clr.l     D3
                    4638   ; char digit;
                    4639   ; scanflush();
00002A98  4EB9 0000 4640          jsr       _scanflush
00002A9C  35EC      
                    4641   ; // Prompt the user to enter a test configuration
                    4642   ; printf("\r\nEnter memory test configuration(1 - bytes, 2 - words, 3 - long words): ");
00002A9E  4879 0000 4643          pea       @m68kde~1_141.L
00002AA2  56D2      
00002AA4  4E92      4644          jsr       (A2)
00002AA6  584F      4645          addq.w    #4,A7
                    4646   ; test_config = (int)(xtod(_getch()));
00002AA8  2F00      4647          move.l    D0,-(A7)
00002AAA  4EB8 0B68 4648          jsr       __getch
00002AAE  2200      4649          move.l    D0,D1
00002AB0  201F      4650          move.l    (A7)+,D0
00002AB2  2F01      4651          move.l    D1,-(A7)
00002AB4  4EB8 0BD2 4652          jsr       _xtod
00002AB8  584F      4653          addq.w    #4,A7
00002ABA  4880      4654          ext.w     D0
00002ABC  48C0      4655          ext.l     D0
00002ABE  2A00      4656          move.l    D0,D5
                    4657   ; // Check for invalid configuration entry and re-prompt if needed
                    4658   ; while (test_config > 3 || test_config < 1) {
                    4659   MemoryTest_1:
00002AC0  0C85 0000 4660          cmp.l     #3,D5
00002AC4  0003      
00002AC6  6E0A      4661          bgt.s     MemoryTest_4
00002AC8  0C85 0000 4662          cmp.l     #1,D5
00002ACC  0001      
00002ACE  6C00 0032 4663          bge       MemoryTest_3
                    4664   MemoryTest_4:
                    4665   ; printf("\r\nConfiguration invalid %d, try again", test_config);
00002AD2  2F05      4666          move.l    D5,-(A7)
00002AD4  4879 0000 4667          pea       @m68kde~1_142.L
00002AD8  571C      
00002ADA  4E92      4668          jsr       (A2)
00002ADC  504F      4669          addq.w    #8,A7
                    4670   ; printf("\r\nEnter memory test configuration(1 - bytes, 2 - words, 3 - long words): ");
00002ADE  4879 0000 4671          pea       @m68kde~1_141.L
00002AE2  56D2      
00002AE4  4E92      4672          jsr       (A2)
00002AE6  584F      4673          addq.w    #4,A7
                    4674   ; test_config = (int)(xtod(_getch()));
00002AE8  2F00      4675          move.l    D0,-(A7)
00002AEA  4EB8 0B68 4676          jsr       __getch
00002AEE  2200      4677          move.l    D0,D1
00002AF0  201F      4678          move.l    (A7)+,D0
00002AF2  2F01      4679          move.l    D1,-(A7)
00002AF4  4EB8 0BD2 4680          jsr       _xtod
00002AF8  584F      4681          addq.w    #4,A7
00002AFA  4880      4682          ext.w     D0
00002AFC  48C0      4683          ext.l     D0
00002AFE  2A00      4684          move.l    D0,D5
00002B00  60BE      4685          bra       MemoryTest_1
                    4686   MemoryTest_3:
                    4687   ; //scanf("%d", &test_config);
                    4688   ; }
                    4689   ; // Prompt the user to enter a test pattern
                    4690   ; printf("\r\nChoose between different memory test patterns(1 - 5, 2 - A, 3 - F, 4 - 0): ");
00002B02  4879 0000 4691          pea       @m68kde~1_143.L
00002B06  5742      
00002B08  4E92      4692          jsr       (A2)
00002B0A  584F      4693          addq.w    #4,A7
                    4694   ; test_pattern = (int)(xtod(_getch()));
00002B0C  2F00      4695          move.l    D0,-(A7)
00002B0E  4EB8 0B68 4696          jsr       __getch
00002B12  2200      4697          move.l    D0,D1
00002B14  201F      4698          move.l    (A7)+,D0
00002B16  2F01      4699          move.l    D1,-(A7)
00002B18  4EB8 0BD2 4700          jsr       _xtod
00002B1C  584F      4701          addq.w    #4,A7
00002B1E  4880      4702          ext.w     D0
00002B20  48C0      4703          ext.l     D0
00002B22  2640      4704          move.l    D0,A3
                    4705   ; // Check for invalid pattern entry and re-prompt if needed
                    4706   ; while (test_pattern > 4 || test_pattern < 1) {
                    4707   MemoryTest_5:
00002B24  200B      4708          move.l    A3,D0
00002B26  0C80 0000 4709          cmp.l     #4,D0
00002B2A  0004      
00002B2C  6E0C      4710          bgt.s     MemoryTest_8
00002B2E  200B      4711          move.l    A3,D0
00002B30  0C80 0000 4712          cmp.l     #1,D0
00002B34  0001      
00002B36  6C00 0030 4713          bge       MemoryTest_7
                    4714   MemoryTest_8:
                    4715   ; printf("\r\nPattern invalid, try again");
00002B3A  4879 0000 4716          pea       @m68kde~1_144.L
00002B3E  5790      
00002B40  4E92      4717          jsr       (A2)
00002B42  584F      4718          addq.w    #4,A7
                    4719   ; printf("\r\nChoose between different memory test patterns(1 - 5, 2 - A, 3 - F, 4 - 0): ");
00002B44  4879 0000 4720          pea       @m68kde~1_143.L
00002B48  5742      
00002B4A  4E92      4721          jsr       (A2)
00002B4C  584F      4722          addq.w    #4,A7
                    4723   ; //scanf("%d", &test_pattern);
                    4724   ; test_pattern = (int)(xtod(_getch()));
00002B4E  2F00      4725          move.l    D0,-(A7)
00002B50  4EB8 0B68 4726          jsr       __getch
00002B54  2200      4727          move.l    D0,D1
00002B56  201F      4728          move.l    (A7)+,D0
00002B58  2F01      4729          move.l    D1,-(A7)
00002B5A  4EB8 0BD2 4730          jsr       _xtod
00002B5E  584F      4731          addq.w    #4,A7
00002B60  4880      4732          ext.w     D0
00002B62  48C0      4733          ext.l     D0
00002B64  2640      4734          move.l    D0,A3
00002B66  60BC      4735          bra       MemoryTest_5
                    4736   MemoryTest_7:
                    4737   ; }
                    4738   ; // Prompt the user to enter a starting address
                    4739   ; printf("\r\nEnter starting address(%08X - %08X inclusive): ", start_boundary, end_boundary);
00002B68  2F06      4740          move.l    D6,-(A7)
00002B6A  2F07      4741          move.l    D7,-(A7)
00002B6C  4879 0000 4742          pea       @m68kde~1_145.L
00002B70  57AE      
00002B72  4E92      4743          jsr       (A2)
00002B74  DEFC 000C 4744          add.w     #12,A7
                    4745   ; start_val = Get8HexDigits(0);
00002B78  42A7      4746          clr.l     -(A7)
00002B7A  4EB8 0CA4 4747          jsr       _Get8HexDigits
00002B7E  584F      4748          addq.w    #4,A7
00002B80  2400      4749          move.l    D0,D2
                    4750   ; // Check for invalid start address and re-prompt if needed
                    4751   ; // Check for illegal address, start address must be even if writing words or long words to memory
                    4752   ; while (start_val < start_boundary || start_val > end_boundary || (start_val % 2 != 0 && test_config != 1))
                    4753   MemoryTest_9:
00002B82  B487      4754          cmp.l     D7,D2
00002B84  6522      4755          blo.s     MemoryTest_12
00002B86  B486      4756          cmp.l     D6,D2
00002B88  621E      4757          bhi.s     MemoryTest_12
00002B8A  2F02      4758          move.l    D2,-(A7)
00002B8C  4878 0002 4759          pea       2
00002B90  4EB9 0000 4760          jsr       LDIV
00002B94  3186      
00002B96  202F 0004 4761          move.l    4(A7),D0
00002B9A  504F      4762          addq.w    #8,A7
00002B9C  4A80      4763          tst.l     D0
00002B9E  672E      4764          beq.s     MemoryTest_11
00002BA0  0C85 0000 4765          cmp.l     #1,D5
00002BA4  0001      
00002BA6  6726      4766          beq.s     MemoryTest_11
                    4767   MemoryTest_12:
                    4768   ; { // start address must be 7 chars and within bounds
                    4769   ; printf("\r\nInvalid starting address.. try again");
00002BA8  4879 0000 4770          pea       @m68kde~1_146.L
00002BAC  57E0      
00002BAE  4E92      4771          jsr       (A2)
00002BB0  584F      4772          addq.w    #4,A7
                    4773   ; //printf("\r\nStarting address out of bounds.. try again");
                    4774   ; printf("\r\nEnter starting address(%08X - %08X inclusive): ", start_boundary, end_boundary);
00002BB2  2F06      4775          move.l    D6,-(A7)
00002BB4  2F07      4776          move.l    D7,-(A7)
00002BB6  4879 0000 4777          pea       @m68kde~1_145.L
00002BBA  57AE      
00002BBC  4E92      4778          jsr       (A2)
00002BBE  DEFC 000C 4779          add.w     #12,A7
                    4780   ; start_val = Get8HexDigits(0);
00002BC2  42A7      4781          clr.l     -(A7)
00002BC4  4EB8 0CA4 4782          jsr       _Get8HexDigits
00002BC8  584F      4783          addq.w    #4,A7
00002BCA  2400      4784          move.l    D0,D2
00002BCC  60B4      4785          bra       MemoryTest_9
                    4786   MemoryTest_11:
                    4787   ; }
                    4788   ; // Prompt the user to enter an ending address
                    4789   ; printf("\r\nEnter ending address(%08X - %08X inclusive): ", start_boundary, end_boundary);
00002BCE  2F06      4790          move.l    D6,-(A7)
00002BD0  2F07      4791          move.l    D7,-(A7)
00002BD2  4879 0000 4792          pea       @m68kde~1_147.L
00002BD6  5808      
00002BD8  4E92      4793          jsr       (A2)
00002BDA  DEFC 000C 4794          add.w     #12,A7
                    4795   ; end_val = Get8HexDigits(0);
00002BDE  42A7      4796          clr.l     -(A7)
00002BE0  4EB8 0CA4 4797          jsr       _Get8HexDigits
00002BE4  584F      4798          addq.w    #4,A7
00002BE6  2600      4799          move.l    D0,D3
                    4800   ; // When writing words, the given address range should be a multiple of 2 bytes (size of a word)
                    4801   ; // When writing long words, the given address range should be a multiple of 4 bytes (size of a long word)
                    4802   ; while (end_val < start_boundary || end_val > end_boundary ||
                    4803   MemoryTest_13:
00002BE8  B687      4804          cmp.l     D7,D3
00002BEA  6500 0056 4805          blo       MemoryTest_16
00002BEE  B686      4806          cmp.l     D6,D3
00002BF0  6200 0050 4807          bhi       MemoryTest_16
00002BF4  B682      4808          cmp.l     D2,D3
00002BF6  6D00 004A 4809          blt       MemoryTest_16
00002BFA  2003      4810          move.l    D3,D0
00002BFC  9082      4811          sub.l     D2,D0
00002BFE  5280      4812          addq.l    #1,D0
00002C00  2F00      4813          move.l    D0,-(A7)
00002C02  4878 0002 4814          pea       2
00002C06  4EB9 0000 4815          jsr       LDIV
00002C0A  3186      
00002C0C  202F 0004 4816          move.l    4(A7),D0
00002C10  504F      4817          addq.w    #8,A7
00002C12  4A80      4818          tst.l     D0
00002C14  6708      4819          beq.s     MemoryTest_17
00002C16  0C85 0000 4820          cmp.l     #2,D5
00002C1A  0002      
00002C1C  6724      4821          beq.s     MemoryTest_16
                    4822   MemoryTest_17:
00002C1E  2003      4823          move.l    D3,D0
00002C20  9082      4824          sub.l     D2,D0
00002C22  5280      4825          addq.l    #1,D0
00002C24  2F00      4826          move.l    D0,-(A7)
00002C26  4878 0004 4827          pea       4
00002C2A  4EB9 0000 4828          jsr       LDIV
00002C2E  3186      
00002C30  202F 0004 4829          move.l    4(A7),D0
00002C34  504F      4830          addq.w    #8,A7
00002C36  4A80      4831          tst.l     D0
00002C38  672E      4832          beq.s     MemoryTest_15
00002C3A  0C85 0000 4833          cmp.l     #3,D5
00002C3E  0003      
00002C40  6626      4834          bne.s     MemoryTest_15
                    4835   MemoryTest_16:
                    4836   ; end_val < start_val || ((end_val - start_val + 1) % 2 != 0 && test_config == 2) ||
                    4837   ; ((end_val - start_val + 1) % 4 != 0 && test_config == 3))
                    4838   ; { // end address must be 7 chars and within bounds
                    4839   ; printf("\r\nEnding address out of bounds.. try again");
00002C42  4879 0000 4840          pea       @m68kde~1_148.L
00002C46  5838      
00002C48  4E92      4841          jsr       (A2)
00002C4A  584F      4842          addq.w    #4,A7
                    4843   ; printf("\r\nEnter ending address(%08X - %08X inclusive): ", start_boundary, end_boundary);
00002C4C  2F06      4844          move.l    D6,-(A7)
00002C4E  2F07      4845          move.l    D7,-(A7)
00002C50  4879 0000 4846          pea       @m68kde~1_147.L
00002C54  5808      
00002C56  4E92      4847          jsr       (A2)
00002C58  DEFC 000C 4848          add.w     #12,A7
                    4849   ; end_val = Get8HexDigits(0);
00002C5C  42A7      4850          clr.l     -(A7)
00002C5E  4EB8 0CA4 4851          jsr       _Get8HexDigits
00002C62  584F      4852          addq.w    #4,A7
00002C64  2600      4853          move.l    D0,D3
00002C66  6080      4854          bra       MemoryTest_13
                    4855   MemoryTest_15:
                    4856   ; }
                    4857   ; printf("\r\nWriting to SRAM ...");
00002C68  4879 0000 4858          pea       @m68kde~1_149.L
00002C6C  5864      
00002C6E  4E92      4859          jsr       (A2)
00002C70  584F      4860          addq.w    #4,A7
                    4861   ; printf("\r\n............................................................................................................");
00002C72  4879 0000 4862          pea       @m68kde~1_150.L
00002C76  587A      
00002C78  4E92      4863          jsr       (A2)
00002C7A  584F      4864          addq.w    #4,A7
                    4865   ; printf("\r\n............................................................................................................");
00002C7C  4879 0000 4866          pea       @m68kde~1_150.L
00002C80  587A      
00002C82  4E92      4867          jsr       (A2)
00002C84  584F      4868          addq.w    #4,A7
                    4869   ; printf("\r\n............................................................................................................");
00002C86  4879 0000 4870          pea       @m68kde~1_150.L
00002C8A  587A      
00002C8C  4E92      4871          jsr       (A2)
00002C8E  584F      4872          addq.w    #4,A7
                    4873   ; switch (test_pattern) {
00002C90  200B      4874          move.l    A3,D0
00002C92  5380      4875          subq.l    #1,D0
00002C94  6500 002C 4876          blo       MemoryTest_18
00002C98  0C80 0000 4877          cmp.l     #4,D0
00002C9C  0004      
00002C9E  6422      4878          bhs.s     MemoryTest_18
00002CA0  E380      4879          asl.l     #1,D0
00002CA2  303B 0806 4880          move.w    MemoryTest_20(PC,D0.L),D0
00002CA6  4EFB 0002 4881          jmp       MemoryTest_20(PC,D0.W)
                    4882   MemoryTest_20:
00002CAA  0008      4883          dc.w      MemoryTest_21-MemoryTest_20
00002CAC  000C      4884          dc.w      MemoryTest_22-MemoryTest_20
00002CAE  0010      4885          dc.w      MemoryTest_23-MemoryTest_20
00002CB0  0014      4886          dc.w      MemoryTest_24-MemoryTest_20
                    4887   MemoryTest_21:
                    4888   ; case 1: digit = '5';
00002CB2  7835      4889          moveq     #53,D4
                    4890   ; break;
00002CB4  600E      4891          bra.s     MemoryTest_19
                    4892   MemoryTest_22:
                    4893   ; case 2: digit = 'A';
00002CB6  7841      4894          moveq     #65,D4
                    4895   ; break;
00002CB8  600A      4896          bra.s     MemoryTest_19
                    4897   MemoryTest_23:
                    4898   ; case 3: digit = 'F';
00002CBA  7846      4899          moveq     #70,D4
                    4900   ; break;
00002CBC  6006      4901          bra.s     MemoryTest_19
                    4902   MemoryTest_24:
                    4903   ; case 4: digit = '0';
00002CBE  7830      4904          moveq     #48,D4
                    4905   ; break;
00002CC0  6002      4906          bra.s     MemoryTest_19
                    4907   MemoryTest_18:
                    4908   ; default: digit = '5';
00002CC2  7835      4909          moveq     #53,D4
                    4910   MemoryTest_19:
                    4911   ; }
                    4912   ; switch (test_config) {
00002CC4  0C85 0000 4913          cmp.l     #2,D5
00002CC8  0002      
00002CCA  6700 0044 4914          beq       MemoryTest_29
00002CCE  6E0C      4915          bgt.s     MemoryTest_32
00002CD0  0C85 0000 4916          cmp.l     #1,D5
00002CD4  0001      
00002CD6  6712      4917          beq.s     MemoryTest_28
00002CD8  6000 0084 4918          bra       MemoryTest_26
                    4919   MemoryTest_32:
00002CDC  0C85 0000 4920          cmp.l     #3,D5
00002CE0  0003      
00002CE2  6700 0054 4921          beq       MemoryTest_30
00002CE6  6000 0076 4922          bra       MemoryTest_26
                    4923   MemoryTest_28:
                    4924   ; case 1: FillMemoryForMemTest(start_val, end_val, Get2HexDigitsForMemTest(digit), 1);
00002CEA  4878 0001 4925          pea       1
00002CEE  2F00      4926          move.l    D0,-(A7)
00002CF0  4884      4927          ext.w     D4
00002CF2  48C4      4928          ext.l     D4
00002CF4  2F04      4929          move.l    D4,-(A7)
00002CF6  4E95      4930          jsr       (A5)
00002CF8  584F      4931          addq.w    #4,A7
00002CFA  2200      4932          move.l    D0,D1
00002CFC  201F      4933          move.l    (A7)+,D0
00002CFE  2F01      4934          move.l    D1,-(A7)
00002D00  2F03      4935          move.l    D3,-(A7)
00002D02  2F02      4936          move.l    D2,-(A7)
00002D04  4EB8 284E 4937          jsr       _FillMemoryForMemTest
00002D08  DEFC 0010 4938          add.w     #16,A7
                    4939   ; break;
00002D0C  6000 0072 4940          bra       MemoryTest_27
                    4941   MemoryTest_29:
                    4942   ; case 2: FillMemoryForMemTest(start_val, end_val, Get4HexDigitsForMemTest(digit), 2);
00002D10  4878 0002 4943          pea       2
00002D14  2F00      4944          move.l    D0,-(A7)
00002D16  4884      4945          ext.w     D4
00002D18  48C4      4946          ext.l     D4
00002D1A  2F04      4947          move.l    D4,-(A7)
00002D1C  4EB8 25AE 4948          jsr       _Get4HexDigitsForMemTest
00002D20  584F      4949          addq.w    #4,A7
00002D22  2200      4950          move.l    D0,D1
00002D24  201F      4951          move.l    (A7)+,D0
00002D26  2F01      4952          move.l    D1,-(A7)
00002D28  2F03      4953          move.l    D3,-(A7)
00002D2A  2F02      4954          move.l    D2,-(A7)
00002D2C  4EB8 284E 4955          jsr       _FillMemoryForMemTest
00002D30  DEFC 0010 4956          add.w     #16,A7
                    4957   ; break;
00002D34  6000 004A 4958          bra       MemoryTest_27
                    4959   MemoryTest_30:
                    4960   ; case 3: FillMemoryForMemTest(start_val, end_val, Get8HexDigitsForMemTest(digit), 3);
00002D38  4878 0003 4961          pea       3
00002D3C  2F00      4962          move.l    D0,-(A7)
00002D3E  4884      4963          ext.w     D4
00002D40  48C4      4964          ext.l     D4
00002D42  2F04      4965          move.l    D4,-(A7)
00002D44  4EB8 2600 4966          jsr       _Get8HexDigitsForMemTest
00002D48  584F      4967          addq.w    #4,A7
00002D4A  2200      4968          move.l    D0,D1
00002D4C  201F      4969          move.l    (A7)+,D0
00002D4E  2F01      4970          move.l    D1,-(A7)
00002D50  2F03      4971          move.l    D3,-(A7)
00002D52  2F02      4972          move.l    D2,-(A7)
00002D54  4EB8 284E 4973          jsr       _FillMemoryForMemTest
00002D58  DEFC 0010 4974          add.w     #16,A7
                    4975   ; break;
00002D5C  6022      4976          bra.s     MemoryTest_27
                    4977   MemoryTest_26:
                    4978   ; default: FillMemoryForMemTest(start_val, end_val, Get2HexDigitsForMemTest(digit), 1);;
00002D5E  4878 0001 4979          pea       1
00002D62  2F00      4980          move.l    D0,-(A7)
00002D64  4884      4981          ext.w     D4
00002D66  48C4      4982          ext.l     D4
00002D68  2F04      4983          move.l    D4,-(A7)
00002D6A  4E95      4984          jsr       (A5)
00002D6C  584F      4985          addq.w    #4,A7
00002D6E  2200      4986          move.l    D0,D1
00002D70  201F      4987          move.l    (A7)+,D0
00002D72  2F01      4988          move.l    D1,-(A7)
00002D74  2F03      4989          move.l    D3,-(A7)
00002D76  2F02      4990          move.l    D2,-(A7)
00002D78  4EB8 284E 4991          jsr       _FillMemoryForMemTest
00002D7C  DEFC 0010 4992          add.w     #16,A7
                    4993   MemoryTest_27:
                    4994   ; }
                    4995   ; printf("\r\nFinished writing to SRAM .");
00002D80  4879 0000 4996          pea       @m68kde~1_151.L
00002D84  58EA      
00002D86  4E92      4997          jsr       (A2)
00002D88  584F      4998          addq.w    #4,A7
                    4999   ; printf("\r\nCheck SRAM content");
00002D8A  4879 0000 5000          pea       @m68kde~1_152.L
00002D8E  5908      
00002D90  4E92      5001          jsr       (A2)
00002D92  584F      5002          addq.w    #4,A7
                    5003   ; printf("\r\nReading from SRAM ...");
00002D94  4879 0000 5004          pea       @m68kde~1_153.L
00002D98  591E      
00002D9A  4E92      5005          jsr       (A2)
00002D9C  584F      5006          addq.w    #4,A7
                    5007   ; printf("\r\n............................................................................................................");
00002D9E  4879 0000 5008          pea       @m68kde~1_150.L
00002DA2  587A      
00002DA4  4E92      5009          jsr       (A2)
00002DA6  584F      5010          addq.w    #4,A7
                    5011   ; printf("\r\n............................................................................................................");
00002DA8  4879 0000 5012          pea       @m68kde~1_150.L
00002DAC  587A      
00002DAE  4E92      5013          jsr       (A2)
00002DB0  584F      5014          addq.w    #4,A7
                    5015   ; printf("\r\n............................................................................................................");
00002DB2  4879 0000 5016          pea       @m68kde~1_150.L
00002DB6  587A      
00002DB8  4E92      5017          jsr       (A2)
00002DBA  584F      5018          addq.w    #4,A7
                    5019   ; printf("\r\n....................... begin reading");
00002DBC  4879 0000 5020          pea       @m68kde~1_154.L
00002DC0  5936      
00002DC2  4E92      5021          jsr       (A2)
00002DC4  584F      5022          addq.w    #4,A7
                    5023   ; switch (test_config) {
00002DC6  0C85 0000 5024          cmp.l     #2,D5
00002DCA  0002      
00002DCC  6700 0042 5025          beq       MemoryTest_36
00002DD0  6E0C      5026          bgt.s     MemoryTest_39
00002DD2  0C85 0000 5027          cmp.l     #1,D5
00002DD6  0001      
00002DD8  6712      5028          beq.s     MemoryTest_35
00002DDA  6000 007E 5029          bra       MemoryTest_33
                    5030   MemoryTest_39:
00002DDE  0C85 0000 5031          cmp.l     #3,D5
00002DE2  0003      
00002DE4  6700 0050 5032          beq       MemoryTest_37
00002DE8  6000 0070 5033          bra       MemoryTest_33
                    5034   MemoryTest_35:
                    5035   ; case 1: ReadMemoryForMemTest(start_val, end_val, Get2HexDigitsForMemTest(digit), 1);
00002DEC  4878 0001 5036          pea       1
00002DF0  2F00      5037          move.l    D0,-(A7)
00002DF2  4884      5038          ext.w     D4
00002DF4  48C4      5039          ext.l     D4
00002DF6  2F04      5040          move.l    D4,-(A7)
00002DF8  4E95      5041          jsr       (A5)
00002DFA  584F      5042          addq.w    #4,A7
00002DFC  2200      5043          move.l    D0,D1
00002DFE  201F      5044          move.l    (A7)+,D0
00002E00  2F01      5045          move.l    D1,-(A7)
00002E02  2F03      5046          move.l    D3,-(A7)
00002E04  2F02      5047          move.l    D2,-(A7)
00002E06  4E94      5048          jsr       (A4)
00002E08  DEFC 0010 5049          add.w     #16,A7
                    5050   ; break;
00002E0C  6000 006C 5051          bra       MemoryTest_34
                    5052   MemoryTest_36:
                    5053   ; case 2: ReadMemoryForMemTest(start_val, end_val, Get4HexDigitsForMemTest(digit), 2);
00002E10  4878 0002 5054          pea       2
00002E14  2F00      5055          move.l    D0,-(A7)
00002E16  4884      5056          ext.w     D4
00002E18  48C4      5057          ext.l     D4
00002E1A  2F04      5058          move.l    D4,-(A7)
00002E1C  4EB8 25AE 5059          jsr       _Get4HexDigitsForMemTest
00002E20  584F      5060          addq.w    #4,A7
00002E22  2200      5061          move.l    D0,D1
00002E24  201F      5062          move.l    (A7)+,D0
00002E26  2F01      5063          move.l    D1,-(A7)
00002E28  2F03      5064          move.l    D3,-(A7)
00002E2A  2F02      5065          move.l    D2,-(A7)
00002E2C  4E94      5066          jsr       (A4)
00002E2E  DEFC 0010 5067          add.w     #16,A7
                    5068   ; break;
00002E32  6000 0046 5069          bra       MemoryTest_34
                    5070   MemoryTest_37:
                    5071   ; case 3: ReadMemoryForMemTest(start_val, end_val, Get8HexDigitsForMemTest(digit), 3);
00002E36  4878 0003 5072          pea       3
00002E3A  2F00      5073          move.l    D0,-(A7)
00002E3C  4884      5074          ext.w     D4
00002E3E  48C4      5075          ext.l     D4
00002E40  2F04      5076          move.l    D4,-(A7)
00002E42  4EB8 2600 5077          jsr       _Get8HexDigitsForMemTest
00002E46  584F      5078          addq.w    #4,A7
00002E48  2200      5079          move.l    D0,D1
00002E4A  201F      5080          move.l    (A7)+,D0
00002E4C  2F01      5081          move.l    D1,-(A7)
00002E4E  2F03      5082          move.l    D3,-(A7)
00002E50  2F02      5083          move.l    D2,-(A7)
00002E52  4E94      5084          jsr       (A4)
00002E54  DEFC 0010 5085          add.w     #16,A7
                    5086   ; break;
00002E58  6020      5087          bra.s     MemoryTest_34
                    5088   MemoryTest_33:
                    5089   ; default: ReadMemoryForMemTest(start_val, end_val, Get2HexDigitsForMemTest(digit), 1);;
00002E5A  4878 0001 5090          pea       1
00002E5E  2F00      5091          move.l    D0,-(A7)
00002E60  4884      5092          ext.w     D4
00002E62  48C4      5093          ext.l     D4
00002E64  2F04      5094          move.l    D4,-(A7)
00002E66  4E95      5095          jsr       (A5)
00002E68  584F      5096          addq.w    #4,A7
00002E6A  2200      5097          move.l    D0,D1
00002E6C  201F      5098          move.l    (A7)+,D0
00002E6E  2F01      5099          move.l    D1,-(A7)
00002E70  2F03      5100          move.l    D3,-(A7)
00002E72  2F02      5101          move.l    D2,-(A7)
00002E74  4E94      5102          jsr       (A4)
00002E76  DEFC 0010 5103          add.w     #16,A7
                    5104   MemoryTest_34:
                    5105   ; }
                    5106   ; printf("\r\nFinished reading from SRAM ...");
00002E7A  4879 0000 5107          pea       @m68kde~1_155.L
00002E7E  595E      
00002E80  4E92      5108          jsr       (A2)
00002E82  584F      5109          addq.w    #4,A7
                    5110   ; printf("\r\nend of program ...");
00002E84  4879 0000 5111          pea       @m68kde~1_156.L
00002E88  5980      
00002E8A  4E92      5112          jsr       (A2)
00002E8C  584F      5113          addq.w    #4,A7
                    5114   ; printf("\r\n............................................................................................................");
00002E8E  4879 0000 5115          pea       @m68kde~1_150.L
00002E92  587A      
00002E94  4E92      5116          jsr       (A2)
00002E96  584F      5117          addq.w    #4,A7
                    5118   ; printf("\r\n............................................................................................................");
00002E98  4879 0000 5119          pea       @m68kde~1_150.L
00002E9C  587A      
00002E9E  4E92      5120          jsr       (A2)
00002EA0  584F      5121          addq.w    #4,A7
00002EA2  4CDF 3CFC 5122          movem.l   (A7)+,D2/D3/D4/D5/D6/D7/A2/A3/A4/A5
00002EA6  4E5E      5123          unlk      A6
00002EA8  4E75      5124          rts
                    5125   ; }
                    5126   ; void main(void)
                    5127   ; {
                    5128   _main:
00002EAA  4E56 FFF4 5129          link      A6,#-12
00002EAE  48E7 3030 5130          movem.l   D2/D3/A2/A3,-(A7)
00002EB2  45F8 0A30 5131          lea       _InstallExceptionHandler.L,A2
00002EB6  47F9 0000 5132          lea       _printf.L,A3
00002EBA  3BF6      
                    5133   ; char c ;
                    5134   ; int i, j ;
                    5135   ; char *BugMessage = "DE1-68k Bug V1.77";
00002EBC  41F9 0000 5136          lea       @m68kde~1_157.L,A0
00002EC0  5996      
00002EC2  2608      5137          move.l    A0,D3
                    5138   ; char *CopyrightMessage = "Copyright (C) PJ Davies 2016";
00002EC4  41F9 0000 5139          lea       @m68kde~1_158.L,A0
00002EC8  59A8      
00002ECA  2D48 FFFC 5140          move.l    A0,-4(A6)
                    5141   ; KillAllBreakPoints() ;
00002ECE  4EB8 1C1C 5142          jsr       _KillAllBreakPoints
                    5143   ; i = x = y = z = PortA_Count = 0;
00002ED2  42B9 0B00 5144          clr.l     _PortA_Count.L
00002ED6  00D4      
00002ED8  42B9 0B00 5145          clr.l     _z.L
00002EDC  00D0      
00002EDE  42B9 0B00 5146          clr.l     _y.L
00002EE2  00CC      
00002EE4  42B9 0B00 5147          clr.l     _x.L
00002EE8  00C8      
00002EEA  4282      5148          clr.l     D2
                    5149   ; Trace = GoFlag = 0;                       // used in tracing/single stepping
00002EEC  42B9 0B00 5150          clr.l     _GoFlag.L
00002EF0  00DC      
00002EF2  42B9 0B00 5151          clr.l     _Trace.L
00002EF6  00D8      
                    5152   ; Echo = 1 ;
00002EF8  23FC 0000 5153          move.l    #1,_Echo.L
00002EFC  0001 0B00 
00002F00  00E0      
                    5154   ; d0=d1=d2=d3=d4=d5=d6=d7=0 ;
00002F02  42B9 0B00 5155          clr.l     _d7.L
00002F06  0100      
00002F08  42B9 0B00 5156          clr.l     _d6.L
00002F0C  00FC      
00002F0E  42B9 0B00 5157          clr.l     _d5.L
00002F12  00F8      
00002F14  42B9 0B00 5158          clr.l     _d4.L
00002F18  00F4      
00002F1A  42B9 0B00 5159          clr.l     _d3.L
00002F1E  00F0      
00002F20  42B9 0B00 5160          clr.l     _d2.L
00002F24  00EC      
00002F26  42B9 0B00 5161          clr.l     _d1.L
00002F2A  00E8      
00002F2C  42B9 0B00 5162          clr.l     _d0.L
00002F30  00E4      
                    5163   ; a0=a1=a2=a3=a4=a5=a6=0 ;
00002F32  42B9 0B00 5164          clr.l     _a6.L
00002F36  011C      
00002F38  42B9 0B00 5165          clr.l     _a5.L
00002F3C  0118      
00002F3E  42B9 0B00 5166          clr.l     _a4.L
00002F42  0114      
00002F44  42B9 0B00 5167          clr.l     _a3.L
00002F48  0110      
00002F4A  42B9 0B00 5168          clr.l     _a2.L
00002F4E  010C      
00002F50  42B9 0B00 5169          clr.l     _a1.L
00002F54  0108      
00002F56  42B9 0B00 5170          clr.l     _a0.L
00002F5A  0104      
                    5171   ; PC = ProgramStart, SSP=TopOfStack, USP = TopOfStack;
00002F5C  23FC 0800 5172          move.l    #134217728,_PC.L
00002F60  0000 0B00 
00002F64  0120      
00002F66  23FC 0C00 5173          move.l    #201326592,_SSP.L
00002F6A  0000 0B00 
00002F6E  0124      
00002F70  23FC 0C00 5174          move.l    #201326592,_USP.L
00002F74  0000 0B00 
00002F78  0128      
                    5175   ; SR = 0x2000;                            // clear interrupts enable tracing  uses IRQ6
00002F7A  33FC 2000 5176          move.w    #8192,_SR.L
00002F7E  0B00 012C 
                    5177   ; // Initialise Breakpoint variables
                    5178   ; for(i = 0; i < 8; i++)  {
00002F82  4282      5179          clr.l     D2
                    5180   main_1:
00002F84  0C82 0000 5181          cmp.l     #8,D2
00002F88  0008      
00002F8A  6C00 004C 5182          bge       main_3
                    5183   ; BreakPointAddress[i] = 0;               //array of 8 breakpoint addresses
00002F8E  2002      5184          move.l    D2,D0
00002F90  E588      5185          lsl.l     #2,D0
00002F92  41F9 0B00 5186          lea       _BreakPointAddress.L,A0
00002F96  012E      
00002F98  42B0 0800 5187          clr.l     0(A0,D0.L)
                    5188   ; WatchPointAddress[i] = 0 ;
00002F9C  2002      5189          move.l    D2,D0
00002F9E  E588      5190          lsl.l     #2,D0
00002FA0  41F9 0B00 5191          lea       _WatchPointAddress.L,A0
00002FA4  0182      
00002FA6  42B0 0800 5192          clr.l     0(A0,D0.L)
                    5193   ; BreakPointInstruction[i] = 0;           // to hold the instruction at the break point
00002FAA  2002      5194          move.l    D2,D0
00002FAC  E388      5195          lsl.l     #1,D0
00002FAE  41F9 0B00 5196          lea       _BreakPointInstruction.L,A0
00002FB2  014E      
00002FB4  4270 0800 5197          clr.w     0(A0,D0.L)
                    5198   ; BreakPointSetOrCleared[i] = 0;          // indicates if break point set
00002FB8  2002      5199          move.l    D2,D0
00002FBA  E588      5200          lsl.l     #2,D0
00002FBC  41F9 0B00 5201          lea       _BreakPointSetOrCleared.L,A0
00002FC0  015E      
00002FC2  42B0 0800 5202          clr.l     0(A0,D0.L)
                    5203   ; WatchPointSetOrCleared[i] = 0;
00002FC6  2002      5204          move.l    D2,D0
00002FC8  E588      5205          lsl.l     #2,D0
00002FCA  41F9 0B00 5206          lea       _WatchPointSetOrCleared.L,A0
00002FCE  01A2      
00002FD0  42B0 0800 5207          clr.l     0(A0,D0.L)
00002FD4  5282      5208          addq.l    #1,D2
00002FD6  60AC      5209          bra       main_1
                    5210   main_3:
                    5211   ; }
                    5212   ; Init_RS232() ;     // initialise the RS232 port
00002FD8  4EB8 0B12 5213          jsr       _Init_RS232
                    5214   ; Init_LCD() ;
00002FDC  4EB8 095E 5215          jsr       _Init_LCD
                    5216   ; for( i = 32; i < 48; i++)
00002FE0  7420      5217          moveq     #32,D2
                    5218   main_4:
00002FE2  0C82 0000 5219          cmp.l     #48,D2
00002FE6  0030      
00002FE8  6C0E      5220          bge.s     main_6
                    5221   ; InstallExceptionHandler(UnhandledTrap, i) ;		        // install Trap exception handler on vector 32-47
00002FEA  2F02      5222          move.l    D2,-(A7)
00002FEC  4878 2494 5223          pea       _UnhandledTrap.L
00002FF0  4E92      5224          jsr       (A2)
00002FF2  504F      5225          addq.w    #8,A7
00002FF4  5282      5226          addq.l    #1,D2
00002FF6  60EA      5227          bra       main_4
                    5228   main_6:
                    5229   ; InstallExceptionHandler(menu, 47) ;		                   // TRAP #15 call debug and end program
00002FF8  4878 002F 5230          pea       47
00002FFC  4878 216E 5231          pea       _menu.L
00003000  4E92      5232          jsr       (A2)
00003002  504F      5233          addq.w    #8,A7
                    5234   ; InstallExceptionHandler(UnhandledIRQ1, 25) ;		      // install handler for interrupts
00003004  4878 0019 5235          pea       25
00003008  4878 243A 5236          pea       _UnhandledIRQ1.L
0000300C  4E92      5237          jsr       (A2)
0000300E  504F      5238          addq.w    #8,A7
                    5239   ; InstallExceptionHandler(UnhandledIRQ2, 26) ;		      // install handler for interrupts
00003010  4878 001A 5240          pea       26
00003014  4878 2446 5241          pea       _UnhandledIRQ2.L
00003018  4E92      5242          jsr       (A2)
0000301A  504F      5243          addq.w    #8,A7
                    5244   ; InstallExceptionHandler(UnhandledIRQ3, 27) ;		      // install handler for interrupts
0000301C  4878 001B 5245          pea       27
00003020  4878 2452 5246          pea       _UnhandledIRQ3.L
00003024  4E92      5247          jsr       (A2)
00003026  504F      5248          addq.w    #8,A7
                    5249   ; InstallExceptionHandler(UnhandledIRQ4, 28) ;		      // install handler for interrupts
00003028  4878 001C 5250          pea       28
0000302C  4878 245E 5251          pea       _UnhandledIRQ4.L
00003030  4E92      5252          jsr       (A2)
00003032  504F      5253          addq.w    #8,A7
                    5254   ; InstallExceptionHandler(UnhandledIRQ5, 29) ;		      // install handler for interrupts
00003034  4878 001D 5255          pea       29
00003038  4878 246A 5256          pea       _UnhandledIRQ5.L
0000303C  4E92      5257          jsr       (A2)
0000303E  504F      5258          addq.w    #8,A7
                    5259   ; InstallExceptionHandler(UnhandledIRQ6, 30) ;		      // install handler for interrupts
00003040  4878 001E 5260          pea       30
00003044  4878 2476 5261          pea       _UnhandledIRQ6.L
00003048  4E92      5262          jsr       (A2)
0000304A  504F      5263          addq.w    #8,A7
                    5264   ; InstallExceptionHandler(UnhandledIRQ7, 31) ;		      // install handler for interrupts
0000304C  4878 001F 5265          pea       31
00003050  4878 2488 5266          pea       _UnhandledIRQ7.L
00003054  4E92      5267          jsr       (A2)
00003056  504F      5268          addq.w    #8,A7
                    5269   ; InstallExceptionHandler(HandleBreakPoint, 46) ;		           // install Trap 14 Break Point exception handler on vector 46
00003058  4878 002E 5270          pea       46
0000305C  4878 1EAA 5271          pea       _HandleBreakPoint.L
00003060  4E92      5272          jsr       (A2)
00003062  504F      5273          addq.w    #8,A7
                    5274   ; InstallExceptionHandler(DumpRegistersandPause, 29) ;		   // install TRACE handler for IRQ5 on vector 29
00003064  4878 001D 5275          pea       29
00003068  4878 158A 5276          pea       _DumpRegistersandPause.L
0000306C  4E92      5277          jsr       (A2)
0000306E  504F      5278          addq.w    #8,A7
                    5279   ; InstallExceptionHandler(BusError,2) ;                          // install Bus error handler
00003070  4878 0002 5280          pea       2
00003074  4878 24A2 5281          pea       _BusError.L
00003078  4E92      5282          jsr       (A2)
0000307A  504F      5283          addq.w    #8,A7
                    5284   ; InstallExceptionHandler(AddressError,3) ;                      // install address error handler (doesn't work on soft core 68k implementation)
0000307C  4878 0003 5285          pea       3
00003080  4878 24B0 5286          pea       _AddressError.L
00003084  4E92      5287          jsr       (A2)
00003086  504F      5288          addq.w    #8,A7
                    5289   ; InstallExceptionHandler(IllegalInstruction,4) ;                // install illegal instruction exception handler
00003088  4878 0004 5290          pea       4
0000308C  4878 24BE 5291          pea       _IllegalInstruction.L
00003090  4E92      5292          jsr       (A2)
00003092  504F      5293          addq.w    #8,A7
                    5294   ; InstallExceptionHandler(Dividebyzero,5) ;                      // install /0 exception handler
00003094  4878 0005 5295          pea       5
00003098  4878 24CC 5296          pea       _Dividebyzero.L
0000309C  4E92      5297          jsr       (A2)
0000309E  504F      5298          addq.w    #8,A7
                    5299   ; InstallExceptionHandler(Check,6) ;                             // install check instruction exception handler
000030A0  4878 0006 5300          pea       6
000030A4  4878 24DA 5301          pea       _Check.L
000030A8  4E92      5302          jsr       (A2)
000030AA  504F      5303          addq.w    #8,A7
                    5304   ; InstallExceptionHandler(Trapv,7) ;                             // install trapv instruction exception handler
000030AC  4878 0007 5305          pea       7
000030B0  4878 24E8 5306          pea       _Trapv.L
000030B4  4E92      5307          jsr       (A2)
000030B6  504F      5308          addq.w    #8,A7
                    5309   ; InstallExceptionHandler(PrivError,8) ;                         // install Priv Violation exception handler
000030B8  4878 0008 5310          pea       8
000030BC  4878 24F6 5311          pea       _PrivError.L
000030C0  4E92      5312          jsr       (A2)
000030C2  504F      5313          addq.w    #8,A7
                    5314   ; InstallExceptionHandler(UnitIRQ,15) ;                          // install uninitialised IRQ exception handler
000030C4  4878 000F 5315          pea       15
000030C8  4878 2504 5316          pea       _UnitIRQ.L
000030CC  4E92      5317          jsr       (A2)
000030CE  504F      5318          addq.w    #8,A7
                    5319   ; InstallExceptionHandler(Check,24) ;                            // install spurious IRQ exception handler
000030D0  4878 0018 5320          pea       24
000030D4  4878 24DA 5321          pea       _Check.L
000030D8  4E92      5322          jsr       (A2)
000030DA  504F      5323          addq.w    #8,A7
                    5324   ; FlushKeyboard() ;                        // dump unread characters from keyboard
000030DC  4EB8 0BA6 5325          jsr       _FlushKeyboard
                    5326   ; TraceException = 0 ;                     // clear trace exception port to remove any software generated single step/trace
000030E0  4239 0040 5327          clr.b     4194314
000030E4  000A      
                    5328   ; // test for auto flash boot and run from Flash by reading switch 9 on DE1-soc board. If set, copy program from flash into Dram and run
                    5329   ; while(((char)(PortB & 0x02)) == (char)(0x02))    {
                    5330   main_7:
000030E6  1039 0040 5331          move.b    4194306,D0
000030EA  0002      
000030EC  C03C 0002 5332          and.b     #2,D0
000030F0  0C00 0002 5333          cmp.b     #2,D0
000030F4  662A      5334          bne.s     main_9
                    5335   ; LoadFromFlashChip();
000030F6  4EB8 10C6 5336          jsr       _LoadFromFlashChip
                    5337   ; printf("\r\nRunning.....") ;
000030FA  4879 0000 5338          pea       @m68kde~1_159.L
000030FE  59C6      
00003100  4E93      5339          jsr       (A3)
00003102  584F      5340          addq.w    #4,A7
                    5341   ; Oline1("Running.....") ;
00003104  4879 0000 5342          pea       @m68kde~1_160.L
00003108  59D6      
0000310A  4EB8 0A02 5343          jsr       _Oline1
0000310E  584F      5344          addq.w    #4,A7
                    5345   ; GoFlag = 1;
00003110  23FC 0000 5346          move.l    #1,_GoFlag.L
00003114  0001 0B00 
00003118  00DC      
                    5347   ; go() ;
0000311A  4EB8 08B8 5348          jsr       _go
0000311E  60C6      5349          bra       main_7
                    5350   main_9:
                    5351   ; }
                    5352   ; // otherwise start the debug monitor
                    5353   ; Oline0(BugMessage) ;
00003120  2F03      5354          move.l    D3,-(A7)
00003122  4EB8 09D4 5355          jsr       _Oline0
00003126  584F      5356          addq.w    #4,A7
                    5357   ; Oline1("By: PJ Davies") ;
00003128  4879 0000 5358          pea       @m68kde~1_161.L
0000312C  59E4      
0000312E  4EB8 0A02 5359          jsr       _Oline1
00003132  584F      5360          addq.w    #4,A7
                    5361   ; printf("\r\n%s", BugMessage) ;
00003134  2F03      5362          move.l    D3,-(A7)
00003136  4879 0000 5363          pea       @m68kde~1_162.L
0000313A  59F2      
0000313C  4E93      5364          jsr       (A3)
0000313E  504F      5365          addq.w    #8,A7
                    5366   ; printf("\r\n%s", CopyrightMessage) ;
00003140  2F2E FFFC 5367          move.l    -4(A6),-(A7)
00003144  4879 0000 5368          pea       @m68kde~1_162.L
00003148  59F2      
0000314A  4E93      5369          jsr       (A3)
0000314C  504F      5370          addq.w    #8,A7
                    5371   ; printf("\r\nNancy Makar - 33464918 and Steven Chin - 40108540");
0000314E  4879 0000 5372          pea       @m68kde~1_163.L
00003152  59F8      
00003154  4E93      5373          jsr       (A3)
00003156  584F      5374          addq.w    #4,A7
                    5375   ; menu();
00003158  4EB8 216E 5376          jsr       _menu
0000315C  4CDF 0C0C 5377          movem.l   (A7)+,D2/D3/A2/A3
00003160  4E5E      5378          unlk      A6
00003162  4E75      5379          rts
                    5380   ; }
                    5381   _strcpy:
00003164  206F 0004 5382          move.l    (4,A7),A0
00003168  226F 0008 5383          move.l    (8,A7),A1
0000316C  2008      5384          move.l    A0,D0
                    5385   strcpy_1:
0000316E  10D9      5386          move.b    (A1)+,(A0)+
00003170  66FC      5387          bne       strcpy_1
00003172  4E75      5388          rts
                    5389   ULDIV:
00003174  4E56 0000 5390          link    A6,#0
00003178  48E7 C000 5391          movem.l D0/D1,-(A7)
0000317C  222E 0008 5392          move.l  8(A6),D1
00003180  202E 000C 5393          move.l  12(A6),D0
00003184  6036      5394          bra.s   ldiv_3
                    5395   LDIV:
00003186  4E56 0000 5396          link    A6,#0
0000318A  48E7 C000 5397          movem.l D0/D1,-(A7)
0000318E  222E 0008 5398          move.l  8(A6),D1
00003192  202E 000C 5399          move.l  12(A6),D0
00003196  4A80      5400          tst.l   D0
00003198  6A0E      5401          bpl.s   ldiv_1
0000319A  4480      5402          neg.l   D0
0000319C  4A81      5403          tst.l   D1
0000319E  6A14      5404          bpl.s   ldiv_2
000031A0  4481      5405          neg.l   D1
000031A2  612A      5406          bsr.s   dodiv
000031A4  4481      5407          neg.l   D1
000031A6  6016      5408          bra.s   ldiv_4
                    5409   ldiv_1:
000031A8  4A81      5410          tst.l   D1
000031AA  6A10      5411          bpl.s   ldiv_3
000031AC  4481      5412          neg.l   D1
000031AE  611E      5413          bsr.s   dodiv
000031B0  4480      5414          neg.l   D0
000031B2  600A      5415          bra.s   ldiv_4
                    5416   ldiv_2:
000031B4  6118      5417          bsr.s   dodiv
000031B6  4480      5418          neg.l   D0
000031B8  4481      5419          neg.l   D1
000031BA  6002      5420          bra.s   ldiv_4
                    5421   ldiv_3:
000031BC  6110      5422          bsr.s   dodiv
                    5423   ldiv_4:
000031BE  2D40 0008 5424          move.l  D0,8(A6)
000031C2  2D41 000C 5425          move.l  D1,12(A6)
000031C6  4CDF 0003 5426          movem.l (A7)+,D0/D1
000031CA  4E5E      5427          unlk    A6
000031CC  4E75      5428          rts
                    5429   dodiv:
000031CE  0C81 0000 5430          cmpi.l  #$FFFF,D1
000031D2  FFFF      
000031D4  6236      5431          bhi.s   dodiv_2
000031D6  0C80 0000 5432          cmpi.l  #$FFFF,D0
000031DA  FFFF      
000031DC  6210      5433          bhi.s   dodiv_1
000031DE  80C1      5434          divu    D1,D0
000031E0  2200      5435          move.l  D0,D1
000031E2  4241      5436          clr.w   D1
000031E4  4841      5437          swap    D1
000031E6  0280 0000 5438          andi.l  #$FFFF,D0
000031EA  FFFF      
000031EC  4E75      5439          rts
                    5440   dodiv_1:
000031EE  48A7 A000 5441          movem.w D0/D2,-(A7)
000031F2  4240      5442          clr.w   D0
000031F4  4840      5443          swap    D0
000031F6  80C1      5444          divu    D1,D0
000031F8  3400      5445          move.w  D0,D2
000031FA  301F      5446          move.w  (A7)+,D0
000031FC  80C1      5447          divu    D1,D0
000031FE  4840      5448          swap    D0
00003200  4281      5449          clr.l   D1
00003202  3200      5450          move.w  D0,D1
00003204  3002      5451          move.w  D2,D0
00003206  4840      5452          swap    D0
00003208  341F      5453          move.w  (A7)+,D2
0000320A  4E75      5454          rts
                    5455   dodiv_2:
0000320C  48E7 3800 5456          movem.l D2/D3/D4,-(A7)
00003210  2401      5457          move.l  D1,D2
00003212  4242      5458          clr.w   D2
00003214  4842      5459          swap    D2
00003216  5282      5460          addq.l  #1,D2
00003218  2600      5461          move.l  D0,D3
0000321A  2801      5462          move.l  D1,D4
0000321C  2202      5463          move.l  D2,D1
0000321E  61CE      5464          bsr.s   dodiv_1
00003220  2204      5465          move.l  D4,D1
00003222  82C2      5466          divu    D2,D1
00003224  80C1      5467          divu    D1,D0
00003226  0280 0000 5468          andi.l  #$FFFF,D0
0000322A  FFFF      
                    5469   dodiv_3:
0000322C  2204      5470          move.l  D4,D1
0000322E  2404      5471          move.l  D4,D2
00003230  4842      5472          swap    D2
00003232  C2C0      5473          mulu    D0,D1
00003234  C4C0      5474          mulu    D0,D2
00003236  4842      5475          swap    D2
00003238  D282      5476          add.l   D2,D1
0000323A  9283      5477          sub.l   D3,D1
0000323C  620A      5478          bhi.s   dodiv_4
0000323E  4481      5479          neg.l   D1
00003240  B881      5480          cmp.l   D1,D4
00003242  6208      5481          bhi.s   dodiv_5
00003244  5280      5482          addq.l  #1,D0
00003246  60E4      5483          bra.s   dodiv_3
                    5484   dodiv_4:
00003248  5380      5485          subq.l  #1,D0
0000324A  60E0      5486          bra.s   dodiv_3
                    5487   dodiv_5:
0000324C  4CDF 001C 5488          movem.l (A7)+,D2/D3/D4
00003250  4E75      5489          rts
                    5490   _putch:
00003252  4E56 0000 5491          link      A6,#0
00003256  48E7 2000 5492          movem.l   D2,-(A7)
0000325A  242E 0008 5493          move.l    8(A6),D2
0000325E  0C82 0000 5494          cmp.l     #10,D2
00003262  000A      
00003264  660A      5495          bne.s     putch_1
00003266  4878 000D 5496          pea       13
0000326A  6100 D8D0 5497          bsr       __putch
0000326E  584F      5498          addq.w    #4,A7
                    5499   putch_1:
00003270  2F02      5500          move.l    D2,-(A7)
00003272  6100 D8C8 5501          bsr       __putch
00003276  584F      5502          addq.w    #4,A7
00003278  2002      5503          move.l    D2,D0
0000327A  4CDF 0004 5504          movem.l   (A7)+,D2
0000327E  4E5E      5505          unlk      A6
00003280  4E75      5506          rts
                    5507   _getch:
00003282  48E7 2000 5508          movem.l   D2,-(A7)
00003286  2439 0B00 5509          move.l    __ungetbuf,D2
0000328A  00C0      
0000328C  2039 0B00 5510          move.l    __ungetbuf,D0
00003290  00C0      
00003292  0C80 FFFF 5511          cmp.l     #-1,D0
00003296  FFFF      
00003298  670C      5512          beq.s     getch_1
0000329A  23FC FFFF 5513          move.l    #-1,__ungetbuf
0000329E  FFFF 0B00 
000032A2  00C0      
000032A4  6010      5514          bra.s     getch_3
                    5515   getch_1:
000032A6  6100 D8C0 5516          bsr       __getch
000032AA  2400      5517          move.l    D0,D2
000032AC  0C80 0000 5518          cmp.l     #13,D0
000032B0  000D      
000032B2  6602      5519          bne.s     getch_3
000032B4  740A      5520          moveq     #10,D2
                    5521   getch_3:
000032B6  2002      5522          move.l    D2,D0
000032B8  4CDF 0004 5523          movem.l   (A7)+,D2
000032BC  4E75      5524          rts
                    5525   _tolower:
000032BE  4E56 0000 5526          link      A6,#0
000032C2  48E7 2000 5527          movem.l   D2,-(A7)
000032C6  242E 0008 5528          move.l    8(A6),D2
000032CA  0C82 0000 5529          cmp.l     #65,D2
000032CE  0041      
000032D0  6D0E      5530          blt.s     tolower_1
000032D2  0C82 0000 5531          cmp.l     #90,D2
000032D6  005A      
000032D8  6E06      5532          bgt.s     tolower_1
000032DA  84BC 0000 5533          or.l      #32,D2
000032DE  0020      
                    5534   tolower_1:
000032E0  2002      5535          move.l    D2,D0
000032E2  4CDF 0004 5536          movem.l   (A7)+,D2
000032E6  4E5E      5537          unlk      A6
000032E8  4E75      5538          rts
                    5539   _sprintf:
000032EA  4E56 FFFC 5540          link      A6,#-4
000032EE  48E7 2000 5541          movem.l   D2,-(A7)
000032F2  41EE 000C 5542          lea       12(A6),A0
000032F6  5848      5543          addq.w    #4,A0
000032F8  2408      5544          move.l    A0,D2
000032FA  2F02      5545          move.l    D2,-(A7)
000032FC  2F2E 000C 5546          move.l    12(A6),-(A7)
00003300  2F2E 0008 5547          move.l    8(A6),-(A7)
00003304  6100 09D4 5548          bsr       _vsprintf
00003308  DEFC 000C 5549          add.w     #12,A7
0000330C  2D40 FFFC 5550          move.l    D0,-4(A6)
00003310  4282      5551          clr.l     D2
00003312  202E FFFC 5552          move.l    -4(A6),D0
00003316  4CDF 0004 5553          movem.l   (A7)+,D2
0000331A  4E5E      5554          unlk      A6
0000331C  4E75      5555          rts
                    5556   _strcat:
0000331E  206F 0004 5557          move.l    (4,A7),A0	
00003322  226F 0008 5558          move.l    (8,A7),A1	
00003326  2008      5559          move.l    A0,D0		
                    5560   strcat_0:
00003328  4A18      5561          tst.b     (A0)+
0000332A  66FC      5562          bne       strcat_0
0000332C  5348      5563          subq      #1,A0
                    5564   strcat_1:
0000332E  10D9      5565          move.b    (A1)+,(A0)+
00003330  66FC      5566          bne       strcat_1
00003332  4E75      5567          rts
                    5568   _toupper:
00003334  4E56 0000 5569          link      A6,#0
00003338  48E7 2000 5570          movem.l   D2,-(A7)
0000333C  242E 0008 5571          move.l    8(A6),D2
00003340  0C82 0000 5572          cmp.l     #97,D2
00003344  0061      
00003346  6D0E      5573          blt.s     toupper_1
00003348  0C82 0000 5574          cmp.l     #122,D2
0000334C  007A      
0000334E  6E06      5575          bgt.s     toupper_1
00003350  C4BC 0000 5576          and.l     #95,D2
00003354  005F      
                    5577   toupper_1:
00003356  2002      5578          move.l    D2,D0
00003358  4CDF 0004 5579          movem.l   (A7)+,D2
0000335C  4E5E      5580          unlk      A6
0000335E  4E75      5581          rts
                    5582   @vsscanf_scanread:
00003360  4E56 FFFC 5583          link      A6,#-4
00003364  48E7 0020 5584          movem.l   A2,-(A7)
00003368  45F9 0000 5585          lea       @vsscanf_bufx,A2
0000336C  5A2C      
0000336E  4AAE 0008 5586          tst.l     8(A6)
00003372  6722      5587          beq.s     @vsscanf_scanread_1
00003374  206E 0008 5588          move.l    8(A6),A0
00003378  58AE 0008 5589          addq.l    #4,8(A6)
0000337C  2050      5590          move.l    (A0),A0
0000337E  1010      5591          move.b    (A0),D0
00003380  4880      5592          ext.w     D0
00003382  48C0      5593          ext.l     D0
00003384  2D40 FFFC 5594          move.l    D0,-4(A6)
00003388  6706      5595          beq.s     @vsscanf_scanread_3
0000338A  202E FFFC 5596          move.l    -4(A6),D0
0000338E  6002      5597          bra.s     @vsscanf_scanread_4
                    5598   @vsscanf_scanread_3:
00003390  70FF      5599          moveq     #-1,D0
                    5600   @vsscanf_scanread_4:
00003392  6000 0032 5601          bra       @vsscanf_scanread_5
                    5602   @vsscanf_scanread_1:
00003396  2052      5603          move.l    (A2),A0
00003398  1010      5604          move.b    (A0),D0
0000339A  6620      5605          bne.s     @vsscanf_scanread_6
0000339C  4879 0B00 5606          pea       @vsscanf_buf
000033A0  0546      
000033A2  6100 1038 5607          bsr       _gets
000033A6  584F      5608          addq.w    #4,A7
000033A8  2480      5609          move.l    D0,(A2)
000033AA  4879 0000 5610          pea       @vsscanf_1
000033AE  5A30      
000033B0  4879 0B00 5611          pea       @vsscanf_buf
000033B4  0546      
000033B6  6100 FF66 5612          bsr       _strcat
000033BA  504F      5613          addq.w    #8,A7
                    5614   @vsscanf_scanread_6:
000033BC  2052      5615          move.l    (A2),A0
000033BE  5292      5616          addq.l    #1,(A2)
000033C0  1010      5617          move.b    (A0),D0
000033C2  4880      5618          ext.w     D0
000033C4  48C0      5619          ext.l     D0
                    5620   @vsscanf_scanread_5:
000033C6  4CDF 0400 5621          movem.l   (A7)+,A2
000033CA  4E5E      5622          unlk      A6
000033CC  4E75      5623          rts
                    5624   @vsscanf_scanputback:
000033CE  4E56 0000 5625          link      A6,#0
000033D2  48E7 3000 5626          movem.l   D2/D3,-(A7)
000033D6  242E 000C 5627          move.l    12(A6),D2
000033DA  262E 0008 5628          move.l    8(A6),D3
000033DE  6718      5629          beq.s     @vsscanf_scanputback_1
000033E0  0C82 FFFF 5630          cmp.l     #-1,D2
000033E4  FFFF      
000033E6  670A      5631          beq.s     @vsscanf_scanputback_3
000033E8  5983      5632          subq.l    #4,D3
000033EA  2043      5633          move.l    D3,A0
000033EC  2050      5634          move.l    (A0),A0
000033EE  1082      5635          move.b    D2,(A0)
000033F0  6004      5636          bra.s     @vsscanf_scanputback_4
                    5637   @vsscanf_scanputback_3:
000033F2  2043      5638          move.l    D3,A0
000033F4  5390      5639          subq.l    #1,(A0)
                    5640   @vsscanf_scanputback_4:
000033F6  602E      5641          bra.s     @vsscanf_scanputback_6
                    5642   @vsscanf_scanputback_1:
000033F8  41F9 0B00 5643          lea       @vsscanf_buf,A0
000033FC  0546      
000033FE  2008      5644          move.l    A0,D0
00003400  B0B9 0000 5645          cmp.l     @vsscanf_bufx,D0
00003404  5A2C      
00003406  6610      5646          bne.s     @vsscanf_scanputback_5
00003408  4239 0B00 5647          clr.b     @vsscanf_buf
0000340C  0546      
0000340E  2F02      5648          move.l    D2,-(A7)
00003410  6100 103C 5649          bsr       _ungetch
00003414  584F      5650          addq.w    #4,A7
00003416  600E      5651          bra.s     @vsscanf_scanputback_6
                    5652   @vsscanf_scanputback_5:
00003418  53B9 0000 5653          subq.l    #1,@vsscanf_bufx
0000341C  5A2C      
0000341E  2079 0000 5654          move.l    @vsscanf_bufx,A0
00003422  5A2C      
00003424  1082      5655          move.b    D2,(A0)
                    5656   @vsscanf_scanputback_6:
00003426  2002      5657          move.l    D2,D0
00003428  4CDF 000C 5658          movem.l   (A7)+,D2/D3
0000342C  4E5E      5659          unlk      A6
0000342E  4E75      5660          rts
                    5661   @vsscanf_scanspace:
00003430  4E56 0000 5662          link      A6,#0
00003434  48E7 2000 5663          movem.l   D2,-(A7)
                    5664   @vsscanf_scanspace_1:
00003438  2F2E 0008 5665          move.l    8(A6),-(A7)
0000343C  6100 FF22 5666          bsr       @vsscanf_scanread
00003440  584F      5667          addq.w    #4,A7
00003442  2400      5668          move.l    D0,D2
00003444  206E 000C 5669          move.l    12(A6),A0
00003448  5290      5670          addq.l    #1,(A0)
0000344A  2042      5671          move.l    D2,A0
0000344C  43F9 0000 5672          lea       __ctype,A1
00003450  5A32      
00003452  1030 9801 5673          move.b    1(A0,A1.L),D0
00003456  C03C 0010 5674          and.b     #16,D0
0000345A  66DC      5675          bne       @vsscanf_scanspace_1
0000345C  2002      5676          move.l    D2,D0
0000345E  4CDF 0004 5677          movem.l   (A7)+,D2
00003462  4E5E      5678          unlk      A6
00003464  4E75      5679          rts
                    5680   @vsscanf_scanselect:
00003466  4E56 0000 5681          link      A6,#0
0000346A  48E7 3F20 5682          movem.l   D2/D3/D4/D5/D6/D7/A2,-(A7)
0000346E  262E 000C 5683          move.l    12(A6),D3
00003472  2C2E 0018 5684          move.l    24(A6),D6
00003476  2E2E 0014 5685          move.l    20(A6),D7
0000347A  2043      5686          move.l    D3,A0
0000347C  1010      5687          move.b    (A0),D0
0000347E  4880      5688          ext.w     D0
00003480  48C0      5689          ext.l     D0
00003482  0C80 0000 5690          cmp.l     #94,D0
00003486  005E      
00003488  6608      5691          bne.s     @vsscanf_scanselect_1
0000348A  347C 0001 5692          move.w    #1,A2
0000348E  5283      5693          addq.l    #1,D3
00003490  6004      5694          bra.s     @vsscanf_scanselect_2
                    5695   @vsscanf_scanselect_1:
00003492  347C 0000 5696          move.w    #0,A2
                    5697   @vsscanf_scanselect_2:
00003496  202E 0010 5698          move.l    16(A6),D0
0000349A  53AE 0010 5699          subq.l    #1,16(A6)
0000349E  4A80      5700          tst.l     D0
000034A0  6700 0108 5701          beq       @vsscanf_scanselect_5
000034A4  2F2E 0008 5702          move.l    8(A6),-(A7)
000034A8  6100 FEB6 5703          bsr       @vsscanf_scanread
000034AC  584F      5704          addq.w    #4,A7
000034AE  2800      5705          move.l    D0,D4
000034B0  0C84 FFFF 5706          cmp.l     #-1,D4
000034B4  FFFF      
000034B6  6604      5707          bne.s     @vsscanf_scanselect_6
000034B8  6000 00F0 5708          bra       @vsscanf_scanselect_5
                    5709   @vsscanf_scanselect_6:
000034BC  206E 001C 5710          move.l    28(A6),A0
000034C0  5290      5711          addq.l    #1,(A0)
000034C2  4285      5712          clr.l     D5
000034C4  4282      5713          clr.l     D2
                    5714   @vsscanf_scanselect_8:
000034C6  2043      5715          move.l    D3,A0
000034C8  1030 2800 5716          move.b    0(A0,D2.L),D0
000034CC  4880      5717          ext.w     D0
000034CE  48C0      5718          ext.l     D0
000034D0  0C80 0000 5719          cmp.l     #93,D0
000034D4  005D      
000034D6  6700 008E 5720          beq       @vsscanf_scanselect_10
000034DA  4A82      5721          tst.l     D2
000034DC  6716      5722          beq.s     @vsscanf_scanselect_11
000034DE  2043      5723          move.l    D3,A0
000034E0  1030 2800 5724          move.b    0(A0,D2.L),D0
000034E4  4880      5725          ext.w     D0
000034E6  48C0      5726          ext.l     D0
000034E8  0C80 0000 5727          cmp.l     #93,D0
000034EC  005D      
000034EE  6604      5728          bne.s     @vsscanf_scanselect_11
000034F0  6000 0074 5729          bra       @vsscanf_scanselect_10
                    5730   @vsscanf_scanselect_11:
000034F4  4A82      5731          tst.l     D2
000034F6  6700 0058 5732          beq       @vsscanf_scanselect_15
000034FA  2043      5733          move.l    D3,A0
000034FC  1030 2800 5734          move.b    0(A0,D2.L),D0
00003500  4880      5735          ext.w     D0
00003502  48C0      5736          ext.l     D0
00003504  0C80 0000 5737          cmp.l     #45,D0
00003508  002D      
0000350A  6600 0044 5738          bne       @vsscanf_scanselect_15
0000350E  2043      5739          move.l    D3,A0
00003510  2002      5740          move.l    D2,D0
00003512  5380      5741          subq.l    #1,D0
00003514  2243      5742          move.l    D3,A1
00003516  2F08      5743          move.l    A0,-(A7)
00003518  2042      5744          move.l    D2,A0
0000351A  1230 0800 5745          move.b    0(A0,D0.L),D1
0000351E  B230 9801 5746          cmp.b     1(A0,A1.L),D1
00003522  6C00 002C 5747          bge       @vsscanf_scanselect_15
00003526  205F      5748          move.l    (A7)+,A0
00003528  2043      5749          move.l    D3,A0
0000352A  2002      5750          move.l    D2,D0
0000352C  5380      5751          subq.l    #1,D0
0000352E  1030 0800 5752          move.b    0(A0,D0.L),D0
00003532  4880      5753          ext.w     D0
00003534  48C0      5754          ext.l     D0
00003536  B880      5755          cmp.l     D0,D4
00003538  6D12      5756          blt.s     @vsscanf_scanselect_17
0000353A  2043      5757          move.l    D3,A0
0000353C  2242      5758          move.l    D2,A1
0000353E  1031 8801 5759          move.b    1(A1,A0.L),D0
00003542  4880      5760          ext.w     D0
00003544  48C0      5761          ext.l     D0
00003546  B880      5762          cmp.l     D0,D4
00003548  6E02      5763          bgt.s     @vsscanf_scanselect_17
0000354A  601A      5764          bra.s     @vsscanf_scanselect_10
                    5765   @vsscanf_scanselect_17:
0000354C  5282      5766          addq.l    #1,D2
0000354E  6010      5767          bra.s     @vsscanf_scanselect_19
                    5768   @vsscanf_scanselect_15:
00003550  2043      5769          move.l    D3,A0
00003552  1030 2800 5770          move.b    0(A0,D2.L),D0
00003556  4880      5771          ext.w     D0
00003558  48C0      5772          ext.l     D0
0000355A  B880      5773          cmp.l     D0,D4
0000355C  6602      5774          bne.s     @vsscanf_scanselect_19
0000355E  6006      5775          bra.s     @vsscanf_scanselect_10
                    5776   @vsscanf_scanselect_19:
00003560  5282      5777          addq.l    #1,D2
00003562  6000 FF62 5778          bra       @vsscanf_scanselect_8
                    5779   @vsscanf_scanselect_10:
00003566  4A82      5780          tst.l     D2
00003568  6712      5781          beq.s     @vsscanf_scanselect_23
0000356A  2043      5782          move.l    D3,A0
0000356C  1030 2800 5783          move.b    0(A0,D2.L),D0
00003570  4880      5784          ext.w     D0
00003572  48C0      5785          ext.l     D0
00003574  0C80 0000 5786          cmp.l     #93,D0
00003578  005D      
0000357A  6702      5787          beq.s     @vsscanf_scanselect_21
                    5788   @vsscanf_scanselect_23:
0000357C  7A01      5789          moveq     #1,D5
                    5790   @vsscanf_scanselect_21:
0000357E  200A      5791          move.l    A2,D0
00003580  6712      5792          beq.s     @vsscanf_scanselect_24
00003582  4A85      5793          tst.l     D5
00003584  660C      5794          bne.s     @vsscanf_scanselect_26
00003586  4A87      5795          tst.l     D7
00003588  6606      5796          bne.s     @vsscanf_scanselect_28
0000358A  2046      5797          move.l    D6,A0
0000358C  5286      5798          addq.l    #1,D6
0000358E  1084      5799          move.b    D4,(A0)
                    5800   @vsscanf_scanselect_28:
00003590  6014      5801          bra.s     @vsscanf_scanselect_4
                    5802   @vsscanf_scanselect_26:
00003592  6016      5803          bra.s     @vsscanf_scanselect_5
                    5804   @vsscanf_scanselect_24:
00003594  4A85      5805          tst.l     D5
00003596  670C      5806          beq.s     @vsscanf_scanselect_30
00003598  4A87      5807          tst.l     D7
0000359A  6606      5808          bne.s     @vsscanf_scanselect_32
0000359C  2046      5809          move.l    D6,A0
0000359E  5286      5810          addq.l    #1,D6
000035A0  1084      5811          move.b    D4,(A0)
                    5812   @vsscanf_scanselect_32:
000035A2  6002      5813          bra.s     @vsscanf_scanselect_4
                    5814   @vsscanf_scanselect_30:
000035A4  6004      5815          bra.s     @vsscanf_scanselect_5
                    5816   @vsscanf_scanselect_4:
000035A6  6000 FEEE 5817          bra       @vsscanf_scanselect_2
                    5818   @vsscanf_scanselect_5:
000035AA  0C84 FFFF 5819          cmp.l     #-1,D4
000035AE  FFFF      
000035B0  6712      5820          beq.s     @vsscanf_scanselect_34
000035B2  2F04      5821          move.l    D4,-(A7)
000035B4  2F2E 0008 5822          move.l    8(A6),-(A7)
000035B8  6100 FE14 5823          bsr       @vsscanf_scanputback
000035BC  504F      5824          addq.w    #8,A7
000035BE  206E 001C 5825          move.l    28(A6),A0
000035C2  5390      5826          subq.l    #1,(A0)
                    5827   @vsscanf_scanselect_34:
000035C4  4A87      5828          tst.l     D7
000035C6  6604      5829          bne.s     @vsscanf_scanselect_36
000035C8  2046      5830          move.l    D6,A0
000035CA  4210      5831          clr.b     (A0)
                    5832   @vsscanf_scanselect_36:
000035CC  5283      5833          addq.l    #1,D3
000035CE  2043      5834          move.l    D3,A0
000035D0  1010      5835          move.b    (A0),D0
000035D2  4880      5836          ext.w     D0
000035D4  48C0      5837          ext.l     D0
000035D6  0C80 0000 5838          cmp.l     #93,D0
000035DA  005D      
000035DC  6702      5839          beq.s     @vsscanf_scanselect_40
000035DE  60EC      5840          bra       @vsscanf_scanselect_36
                    5841   @vsscanf_scanselect_40:
000035E0  5283      5842          addq.l    #1,D3
000035E2  2003      5843          move.l    D3,D0
000035E4  4CDF 04FC 5844          movem.l   (A7)+,D2/D3/D4/D5/D6/D7/A2
000035E8  4E5E      5845          unlk      A6
000035EA  4E75      5846          rts
                    5847   _scanflush:
000035EC  41F9 0B00 5848          lea       @vsscanf_buf,A0
000035F0  0546      
000035F2  23C8 0000 5849          move.l    A0,@vsscanf_bufx
000035F6  5A2C      
000035F8  4239 0B00 5850          clr.b     @vsscanf_buf
000035FC  0546      
000035FE  4878 FFFF 5851          pea       -1
00003602  6100 0E4A 5852          bsr       _ungetch
00003606  584F      5853          addq.w    #4,A7
00003608  4E75      5854          rts
                    5855   _vsscanf:
0000360A  4E56 FF88 5856          link      A6,#-120
0000360E  48E7 3F3C 5857          movem.l   D2/D3/D4/D5/D6/D7/A2/A3/A4/A5,-(A7)
00003612  47F8 3360 5858          lea       @vsscanf_scanread,A3
00003616  4AAE 0008 5859          tst.l     8(A6)
0000361A  6706      5860          beq.s     vsscanf_1
0000361C  41EE 0008 5861          lea       8(A6),A0
00003620  6004      5862          bra.s     vsscanf_2
                    5863   vsscanf_1:
00003622  4280      5864          clr.l     D0
00003624  2040      5865          move.l    D0,A0
                    5866   vsscanf_2:
00003626  2A08      5867          move.l    A0,D5
00003628  42AE FFE4 5868          clr.l     -28(A6)
0000362C  4284      5869          clr.l     D4
                    5870   vsscanf_3:
0000362E  206E 000C 5871          move.l    12(A6),A0
00003632  52AE 000C 5872          addq.l    #1,12(A6)
00003636  1010      5873          move.b    (A0),D0
00003638  4880      5874          ext.w     D0
0000363A  48C0      5875          ext.l     D0
0000363C  2600      5876          move.l    D0,D3
0000363E  6700 05AC 5877          beq       vsscanf_5
00003642  4286      5878          clr.l     D6
00003644  387C 0000 5879          move.w    #0,A4
00003648  0C83 0000 5880          cmp.l     #32,D3
0000364C  0020      
0000364E  6712      5881          beq.s     vsscanf_8
00003650  0C83 0000 5882          cmp.l     #9,D3
00003654  0009      
00003656  670A      5883          beq.s     vsscanf_8
00003658  0C83 0000 5884          cmp.l     #10,D3
0000365C  000A      
0000365E  6600 0048 5885          bne       vsscanf_6
                    5886   vsscanf_8:
00003662  2F05      5887          move.l    D5,-(A7)
00003664  4E93      5888          jsr       (A3)
00003666  584F      5889          addq.w    #4,A7
00003668  2400      5890          move.l    D0,D2
0000366A  52AE FFE4 5891          addq.l    #1,-28(A6)
0000366E  0C82 FFFF 5892          cmp.l     #-1,D2
00003672  FFFF      
00003674  660E      5893          bne.s     vsscanf_11
00003676  4A84      5894          tst.l     D4
00003678  6704      5895          beq.s     vsscanf_13
0000367A  2004      5896          move.l    D4,D0
0000367C  6002      5897          bra.s     vsscanf_14
                    5898   vsscanf_13:
0000367E  70FF      5899          moveq     #-1,D0
                    5900   vsscanf_14:
00003680  6000 056C 5901          bra       vsscanf_15
                    5902   vsscanf_11:
00003684  2042      5903          move.l    D2,A0
00003686  43F9 0000 5904          lea       __ctype,A1
0000368A  5A32      
0000368C  1030 9801 5905          move.b    1(A0,A1.L),D0
00003690  C03C 0010 5906          and.b     #16,D0
00003694  66CC      5907          bne       vsscanf_8
00003696  53AE FFE4 5908          subq.l    #1,-28(A6)
0000369A  2F02      5909          move.l    D2,-(A7)
0000369C  2F05      5910          move.l    D5,-(A7)
0000369E  6100 FD2E 5911          bsr       @vsscanf_scanputback
000036A2  504F      5912          addq.w    #8,A7
000036A4  6000 0542 5913          bra       vsscanf_139
                    5914   vsscanf_6:
000036A8  0C83 0000 5915          cmp.l     #37,D3
000036AC  0025      
000036AE  6600 0502 5916          bne       vsscanf_127
000036B2  206E 000C 5917          move.l    12(A6),A0
000036B6  52AE 000C 5918          addq.l    #1,12(A6)
000036BA  1010      5919          move.b    (A0),D0
000036BC  4880      5920          ext.w     D0
000036BE  48C0      5921          ext.l     D0
000036C0  2600      5922          move.l    D0,D3
000036C2  42AE FFEC 5923          clr.l     -20(A6)
000036C6  4286      5924          clr.l     D6
000036C8  42AE FFE8 5925          clr.l     -24(A6)
000036CC  347C 7FFF 5926          move.w    #32767,A2
000036D0  0C83 0000 5927          cmp.l     #42,D3
000036D4  002A      
000036D6  6612      5928          bne.s     vsscanf_18
000036D8  7C01      5929          moveq     #1,D6
000036DA  206E 000C 5930          move.l    12(A6),A0
000036DE  52AE 000C 5931          addq.l    #1,12(A6)
000036E2  1010      5932          move.b    (A0),D0
000036E4  4880      5933          ext.w     D0
000036E6  48C0      5934          ext.l     D0
000036E8  2600      5935          move.l    D0,D3
                    5936   vsscanf_18:
000036EA  2043      5937          move.l    D3,A0
000036EC  43F9 0000 5938          lea       __ctype,A1
000036F0  5A32      
000036F2  1030 9801 5939          move.b    1(A0,A1.L),D0
000036F6  C03C 0004 5940          and.b     #4,D0
000036FA  6700 004E 5941          beq       vsscanf_24
000036FE  2003      5942          move.l    D3,D0
00003700  0480 0000 5943          sub.l     #48,D0
00003704  0030      
00003706  2440      5944          move.l    D0,A2
                    5945   vsscanf_22:
00003708  206E 000C 5946          move.l    12(A6),A0
0000370C  52AE 000C 5947          addq.l    #1,12(A6)
00003710  1010      5948          move.b    (A0),D0
00003712  4880      5949          ext.w     D0
00003714  48C0      5950          ext.l     D0
00003716  2600      5951          move.l    D0,D3
00003718  2040      5952          move.l    D0,A0
0000371A  43F9 0000 5953          lea       __ctype,A1
0000371E  5A32      
00003720  1030 9801 5954          move.b    1(A0,A1.L),D0
00003724  C0BC 0000 5955          and.l     #255,D0
00003728  00FF      
0000372A  C0BC 0000 5956          and.l     #4,D0
0000372E  0004      
00003730  6718      5957          beq.s     vsscanf_24
00003732  70D0      5958          moveq     #-48,D0
00003734  2F0A      5959          move.l    A2,-(A7)
00003736  4878 000A 5960          pea       10
0000373A  6100 0C12 5961          bsr       LMUL
0000373E  2217      5962          move.l    (A7),D1
00003740  504F      5963          addq.w    #8,A7
00003742  D283      5964          add.l     D3,D1
00003744  D081      5965          add.l     D1,D0
00003746  2440      5966          move.l    D0,A2
00003748  60BE      5967          bra       vsscanf_22
                    5968   vsscanf_24:
0000374A  0C83 0000 5969          cmp.l     #108,D3
0000374E  006C      
00003750  6708      5970          beq.s     vsscanf_27
00003752  0C83 0000 5971          cmp.l     #76,D3
00003756  004C      
00003758  661A      5972          bne.s     vsscanf_25
                    5973   vsscanf_27:
0000375A  2D7C 0000 5974          move.l    #1,-24(A6)
0000375E  0001 FFE8 
00003762  206E 000C 5975          move.l    12(A6),A0
00003766  52AE 000C 5976          addq.l    #1,12(A6)
0000376A  1010      5977          move.b    (A0),D0
0000376C  4880      5978          ext.w     D0
0000376E  48C0      5979          ext.l     D0
00003770  2600      5980          move.l    D0,D3
00003772  6020      5981          bra.s     vsscanf_28
                    5982   vsscanf_25:
00003774  0C83 0000 5983          cmp.l     #104,D3
00003778  0068      
0000377A  6618      5984          bne.s     vsscanf_28
0000377C  2D7C 0000 5985          move.l    #1,-20(A6)
00003780  0001 FFEC 
00003784  206E 000C 5986          move.l    12(A6),A0
00003788  52AE 000C 5987          addq.l    #1,12(A6)
0000378C  1010      5988          move.b    (A0),D0
0000378E  4880      5989          ext.w     D0
00003790  48C0      5990          ext.l     D0
00003792  2600      5991          move.l    D0,D3
                    5992   vsscanf_28:
00003794  0C83 0000 5993          cmp.l     #91,D3
00003798  005B      
0000379A  6600 0036 5994          bne       vsscanf_30
0000379E  4A86      5995          tst.l     D6
000037A0  660A      5996          bne.s     vsscanf_32
000037A2  206E 0010 5997          move.l    16(A6),A0
000037A6  58AE 0010 5998          addq.l    #4,16(A6)
000037AA  2E10      5999          move.l    (A0),D7
                    6000   vsscanf_32:
000037AC  486E FFE4 6001          pea       -28(A6)
000037B0  2F07      6002          move.l    D7,-(A7)
000037B2  2F06      6003          move.l    D6,-(A7)
000037B4  2F0A      6004          move.l    A2,-(A7)
000037B6  2F2E 000C 6005          move.l    12(A6),-(A7)
000037BA  2F05      6006          move.l    D5,-(A7)
000037BC  6100 FCA8 6007          bsr       @vsscanf_scanselect
000037C0  DEFC 0018 6008          add.w     #24,A7
000037C4  2D40 000C 6009          move.l    D0,12(A6)
000037C8  4A86      6010          tst.l     D6
000037CA  6602      6011          bne.s     vsscanf_34
000037CC  5284      6012          addq.l    #1,D4
                    6013   vsscanf_34:
000037CE  6000 0418 6014          bra       vsscanf_139
                    6015   vsscanf_30:
000037D2  0C83 0000 6016          cmp.l     #110,D3
000037D6  006E      
000037D8  661A      6017          bne.s     vsscanf_36
000037DA  4A86      6018          tst.l     D6
000037DC  6612      6019          bne.s     vsscanf_38
000037DE  206E 0010 6020          move.l    16(A6),A0
000037E2  58AE 0010 6021          addq.l    #4,16(A6)
000037E6  2E10      6022          move.l    (A0),D7
000037E8  2047      6023          move.l    D7,A0
000037EA  20AE FFE4 6024          move.l    -28(A6),(A0)
000037EE  5284      6025          addq.l    #1,D4
                    6026   vsscanf_38:
000037F0  6000 03F6 6027          bra       vsscanf_139
                    6028   vsscanf_36:
000037F4  0C83 0000 6029          cmp.l     #115,D3
000037F8  0073      
000037FA  6600 00AC 6030          bne       vsscanf_40
000037FE  486E FFE4 6031          pea       -28(A6)
00003802  2F05      6032          move.l    D5,-(A7)
00003804  6100 FC2A 6033          bsr       @vsscanf_scanspace
00003808  504F      6034          addq.w    #8,A7
0000380A  2400      6035          move.l    D0,D2
0000380C  4A86      6036          tst.l     D6
0000380E  660A      6037          bne.s     vsscanf_42
00003810  206E 0010 6038          move.l    16(A6),A0
00003814  58AE 0010 6039          addq.l    #4,16(A6)
00003818  2E10      6040          move.l    (A0),D7
                    6041   vsscanf_42:
0000381A  52AE FFE4 6042          addq.l    #1,-28(A6)
                    6043   vsscanf_44:
0000381E  200A      6044          move.l    A2,D0
00003820  534A      6045          subq.w    #1,A2
00003822  4A80      6046          tst.l     D0
00003824  6700 0038 6047          beq       vsscanf_46
00003828  2042      6048          move.l    D2,A0
0000382A  43F9 0000 6049          lea       __ctype,A1
0000382E  5A32      
00003830  1030 9801 6050          move.b    1(A0,A1.L),D0
00003834  C03C 0010 6051          and.b     #16,D0
00003838  6624      6052          bne.s     vsscanf_46
0000383A  0C82 FFFF 6053          cmp.l     #-1,D2
0000383E  FFFF      
00003840  671C      6054          beq.s     vsscanf_46
00003842  387C 0001 6055          move.w    #1,A4
00003846  4A86      6056          tst.l     D6
00003848  6606      6057          bne.s     vsscanf_47
0000384A  2047      6058          move.l    D7,A0
0000384C  5287      6059          addq.l    #1,D7
0000384E  1082      6060          move.b    D2,(A0)
                    6061   vsscanf_47:
00003850  2F05      6062          move.l    D5,-(A7)
00003852  4E93      6063          jsr       (A3)
00003854  584F      6064          addq.w    #4,A7
00003856  2400      6065          move.l    D0,D2
00003858  52AE FFE4 6066          addq.l    #1,-28(A6)
0000385C  60C0      6067          bra       vsscanf_44
                    6068   vsscanf_46:
0000385E  4A86      6069          tst.l     D6
00003860  660A      6070          bne.s     vsscanf_51
00003862  2047      6071          move.l    D7,A0
00003864  4210      6072          clr.b     (A0)
00003866  200C      6073          move.l    A4,D0
00003868  6702      6074          beq.s     vsscanf_51
0000386A  5284      6075          addq.l    #1,D4
                    6076   vsscanf_51:
0000386C  0C82 FFFF 6077          cmp.l     #-1,D2
00003870  FFFF      
00003872  6708      6078          beq.s     vsscanf_55
00003874  4A86      6079          tst.l     D6
00003876  661E      6080          bne.s     vsscanf_53
00003878  200C      6081          move.l    A4,D0
0000387A  661A      6082          bne.s     vsscanf_53
                    6083   vsscanf_55:
0000387C  4A84      6084          tst.l     D4
0000387E  6704      6085          beq.s     vsscanf_56
00003880  2004      6086          move.l    D4,D0
00003882  600E      6087          bra.s     vsscanf_59
                    6088   vsscanf_56:
00003884  0C82 FFFF 6089          cmp.l     #-1,D2
00003888  FFFF      
0000388A  6604      6090          bne.s     vsscanf_58
0000388C  70FF      6091          moveq     #-1,D0
0000388E  6002      6092          bra.s     vsscanf_59
                    6093   vsscanf_58:
00003890  2004      6094          move.l    D4,D0
                    6095   vsscanf_59:
00003892  6000 035A 6096          bra       vsscanf_15
                    6097   vsscanf_53:
00003896  53AE FFE4 6098          subq.l    #1,-28(A6)
0000389A  2F02      6099          move.l    D2,-(A7)
0000389C  2F05      6100          move.l    D5,-(A7)
0000389E  6100 FB2E 6101          bsr       @vsscanf_scanputback
000038A2  504F      6102          addq.w    #8,A7
000038A4  6000 0342 6103          bra       vsscanf_139
                    6104   vsscanf_40:
000038A8  0C83 0000 6105          cmp.l     #99,D3
000038AC  0063      
000038AE  6600 008E 6106          bne       vsscanf_60
000038B2  4A86      6107          tst.l     D6
000038B4  660A      6108          bne.s     vsscanf_62
000038B6  206E 0010 6109          move.l    16(A6),A0
000038BA  58AE 0010 6110          addq.l    #4,16(A6)
000038BE  2E10      6111          move.l    (A0),D7
                    6112   vsscanf_62:
000038C0  2F05      6113          move.l    D5,-(A7)
000038C2  4E93      6114          jsr       (A3)
000038C4  584F      6115          addq.w    #4,A7
000038C6  2400      6116          move.l    D0,D2
000038C8  52AE FFE4 6117          addq.l    #1,-28(A6)
000038CC  200A      6118          move.l    A2,D0
000038CE  0C80 0000 6119          cmp.l     #32767,D0
000038D2  7FFF      
000038D4  6604      6120          bne.s     vsscanf_64
000038D6  347C 0001 6121          move.w    #1,A2
                    6122   vsscanf_64:
000038DA  0C82 FFFF 6123          cmp.l     #-1,D2
000038DE  FFFF      
000038E0  6606      6124          bne.s     vsscanf_66
000038E2  4A86      6125          tst.l     D6
000038E4  6602      6126          bne.s     vsscanf_66
000038E6  5384      6127          subq.l    #1,D4
                    6128   vsscanf_66:
000038E8  200A      6129          move.l    A2,D0
000038EA  534A      6130          subq.w    #1,A2
000038EC  4A80      6131          tst.l     D0
000038EE  6720      6132          beq.s     vsscanf_70
000038F0  0C82 FFFF 6133          cmp.l     #-1,D2
000038F4  FFFF      
000038F6  6718      6134          beq.s     vsscanf_70
000038F8  4A86      6135          tst.l     D6
000038FA  6606      6136          bne.s     vsscanf_71
000038FC  2047      6137          move.l    D7,A0
000038FE  5287      6138          addq.l    #1,D7
00003900  1082      6139          move.b    D2,(A0)
                    6140   vsscanf_71:
00003902  2F05      6141          move.l    D5,-(A7)
00003904  4E93      6142          jsr       (A3)
00003906  584F      6143          addq.w    #4,A7
00003908  2400      6144          move.l    D0,D2
0000390A  52AE FFE4 6145          addq.l    #1,-28(A6)
0000390E  60D8      6146          bra       vsscanf_66
                    6147   vsscanf_70:
00003910  0C82 FFFF 6148          cmp.l     #-1,D2
00003914  FFFF      
00003916  660E      6149          bne.s     vsscanf_73
00003918  4A84      6150          tst.l     D4
0000391A  6704      6151          beq.s     vsscanf_75
0000391C  2004      6152          move.l    D4,D0
0000391E  6002      6153          bra.s     vsscanf_76
                    6154   vsscanf_75:
00003920  70FF      6155          moveq     #-1,D0
                    6156   vsscanf_76:
00003922  6000 02CA 6157          bra       vsscanf_15
                    6158   vsscanf_73:
00003926  4A86      6159          tst.l     D6
00003928  6602      6160          bne.s     vsscanf_77
0000392A  5284      6161          addq.l    #1,D4
                    6162   vsscanf_77:
0000392C  53AE FFE4 6163          subq.l    #1,-28(A6)
00003930  2F02      6164          move.l    D2,-(A7)
00003932  2F05      6165          move.l    D5,-(A7)
00003934  6100 FA98 6166          bsr       @vsscanf_scanputback
00003938  504F      6167          addq.w    #8,A7
0000393A  6000 02AC 6168          bra       vsscanf_139
                    6169   vsscanf_60:
0000393E  0C83 0000 6170          cmp.l     #105,D3
00003942  0069      
00003944  6600 0060 6171          bne       vsscanf_82
00003948  486E FFE4 6172          pea       -28(A6)
0000394C  2F05      6173          move.l    D5,-(A7)
0000394E  6100 FAE0 6174          bsr       @vsscanf_scanspace
00003952  504F      6175          addq.w    #8,A7
00003954  2400      6176          move.l    D0,D2
00003956  0C82 0000 6177          cmp.l     #48,D2
0000395A  0030      
0000395C  6600 0038 6178          bne       vsscanf_81
00003960  387C 0001 6179          move.w    #1,A4
00003964  2F05      6180          move.l    D5,-(A7)
00003966  4E93      6181          jsr       (A3)
00003968  584F      6182          addq.w    #4,A7
0000396A  2400      6183          move.l    D0,D2
0000396C  2F02      6184          move.l    D2,-(A7)
0000396E  6100 F94E 6185          bsr       _tolower
00003972  584F      6186          addq.w    #4,A7
00003974  0C80 0000 6187          cmp.l     #120,D0
00003978  0078      
0000397A  6604      6188          bne.s     vsscanf_83
0000397C  7678      6189          moveq     #120,D3
0000397E  6010      6190          bra.s     vsscanf_84
                    6191   vsscanf_83:
00003980  53AE FFE4 6192          subq.l    #1,-28(A6)
00003984  2F02      6193          move.l    D2,-(A7)
00003986  2F05      6194          move.l    D5,-(A7)
00003988  6100 FA44 6195          bsr       @vsscanf_scanputback
0000398C  504F      6196          addq.w    #8,A7
0000398E  766F      6197          moveq     #111,D3
                    6198   vsscanf_84:
00003990  52AE FFE4 6199          addq.l    #1,-28(A6)
00003994  6010      6200          bra.s     vsscanf_82
                    6201   vsscanf_81:
00003996  53AE FFE4 6202          subq.l    #1,-28(A6)
0000399A  2F02      6203          move.l    D2,-(A7)
0000399C  2F05      6204          move.l    D5,-(A7)
0000399E  6100 FA2E 6205          bsr       @vsscanf_scanputback
000039A2  504F      6206          addq.w    #8,A7
000039A4  7664      6207          moveq     #100,D3
                    6208   vsscanf_82:
000039A6  0C83 0000 6209          cmp.l     #100,D3
000039AA  0064      
000039AC  671A      6210          beq.s     vsscanf_87
000039AE  0C83 0000 6211          cmp.l     #117,D3
000039B2  0075      
000039B4  6712      6212          beq.s     vsscanf_87
000039B6  0C83 0000 6213          cmp.l     #120,D3
000039BA  0078      
000039BC  670A      6214          beq.s     vsscanf_87
000039BE  0C83 0000 6215          cmp.l     #111,D3
000039C2  006F      
000039C4  6600 01A4 6216          bne       vsscanf_85
                    6217   vsscanf_87:
000039C8  486E FFE4 6218          pea       -28(A6)
000039CC  2F05      6219          move.l    D5,-(A7)
000039CE  6100 FA60 6220          bsr       @vsscanf_scanspace
000039D2  504F      6221          addq.w    #8,A7
000039D4  2400      6222          move.l    D0,D2
000039D6  2D7C 0000 6223          move.l    #10,-4(A6)
000039DA  000A FFFC 
000039DE  0C83 0000 6224          cmp.l     #120,D3
000039E2  0078      
000039E4  6608      6225          bne.s     vsscanf_88
000039E6  2D7C 0000 6226          move.l    #16,-4(A6)
000039EA  0010 FFFC 
                    6227   vsscanf_88:
000039EE  0C83 0000 6228          cmp.l     #111,D3
000039F2  006F      
000039F4  6608      6229          bne.s     vsscanf_90
000039F6  2D7C 0000 6230          move.l    #8,-4(A6)
000039FA  0008 FFFC 
                    6231   vsscanf_90:
000039FE  4A86      6232          tst.l     D6
00003A00  660A      6233          bne.s     vsscanf_92
00003A02  206E 0010 6234          move.l    16(A6),A0
00003A06  58AE 0010 6235          addq.l    #4,16(A6)
00003A0A  2E10      6236          move.l    (A0),D7
                    6237   vsscanf_92:
00003A0C  42AE FFE0 6238          clr.l     -32(A6)
00003A10  52AE FFE4 6239          addq.l    #1,-28(A6)
00003A14  0C83 0000 6240          cmp.l     #117,D3
00003A18  0075      
00003A1A  6720      6241          beq.s     vsscanf_94
00003A1C  0C82 0000 6242          cmp.l     #45,D2
00003A20  002D      
00003A22  6618      6243          bne.s     vsscanf_94
00003A24  2F05      6244          move.l    D5,-(A7)
00003A26  4E93      6245          jsr       (A3)
00003A28  584F      6246          addq.w    #4,A7
00003A2A  2400      6247          move.l    D0,D2
00003A2C  52AE FFE4 6248          addq.l    #1,-28(A6)
00003A30  2D7C 0000 6249          move.l    #1,-32(A6)
00003A34  0001 FFE0 
00003A38  387C 0001 6250          move.w    #1,A4
                    6251   vsscanf_94:
00003A3C  3A7C 0000 6252          move.w    #0,A5
00003A40  0C82 FFFF 6253          cmp.l     #-1,D2
00003A44  FFFF      
00003A46  660E      6254          bne.s     vsscanf_96
00003A48  4A84      6255          tst.l     D4
00003A4A  6704      6256          beq.s     vsscanf_98
00003A4C  2004      6257          move.l    D4,D0
00003A4E  6002      6258          bra.s     vsscanf_99
                    6259   vsscanf_98:
00003A50  70FF      6260          moveq     #-1,D0
                    6261   vsscanf_99:
00003A52  6000 019A 6262          bra       vsscanf_15
                    6263   vsscanf_96:
00003A56  200A      6264          move.l    A2,D0
00003A58  534A      6265          subq.w    #1,A2
00003A5A  4A80      6266          tst.l     D0
00003A5C  6700 0090 6267          beq       vsscanf_102
00003A60  0C83 0000 6268          cmp.l     #120,D3
00003A64  0078      
00003A66  6620      6269          bne.s     vsscanf_104
00003A68  2F02      6270          move.l    D2,-(A7)
00003A6A  6100 F8C8 6271          bsr       _toupper
00003A6E  584F      6272          addq.w    #4,A7
00003A70  0C80 0000 6273          cmp.l     #65,D0
00003A74  0041      
00003A76  6D10      6274          blt.s     vsscanf_104
00003A78  2F02      6275          move.l    D2,-(A7)
00003A7A  6100 F8B8 6276          bsr       _toupper
00003A7E  584F      6277          addq.w    #4,A7
00003A80  0C80 0000 6278          cmp.l     #70,D0
00003A84  0046      
00003A86  6F14      6279          ble.s     vsscanf_103
                    6280   vsscanf_104:
00003A88  2042      6281          move.l    D2,A0
00003A8A  43F9 0000 6282          lea       __ctype,A1
00003A8E  5A32      
00003A90  1030 9801 6283          move.b    1(A0,A1.L),D0
00003A94  C03C 0004 6284          and.b     #4,D0
00003A98  6700 0054 6285          beq       vsscanf_102
                    6286   vsscanf_103:
00003A9C  2042      6287          move.l    D2,A0
00003A9E  43F9 0000 6288          lea       __ctype,A1
00003AA2  5A32      
00003AA4  1030 9801 6289          move.b    1(A0,A1.L),D0
00003AA8  C03C 0004 6290          and.b     #4,D0
00003AAC  6614      6291          bne.s     vsscanf_105
00003AAE  70F9      6292          moveq     #-7,D0
00003AB0  2F00      6293          move.l    D0,-(A7)
00003AB2  2F02      6294          move.l    D2,-(A7)
00003AB4  6100 F87E 6295          bsr       _toupper
00003AB8  584F      6296          addq.w    #4,A7
00003ABA  2200      6297          move.l    D0,D1
00003ABC  201F      6298          move.l    (A7)+,D0
00003ABE  D081      6299          add.l     D1,D0
00003AC0  2400      6300          move.l    D0,D2
                    6301   vsscanf_105:
00003AC2  2F0D      6302          move.l    A5,-(A7)
00003AC4  2F2E FFFC 6303          move.l    -4(A6),-(A7)
00003AC8  6100 0884 6304          bsr       LMUL
00003ACC  2017      6305          move.l    (A7),D0
00003ACE  504F      6306          addq.w    #8,A7
00003AD0  D082      6307          add.l     D2,D0
00003AD2  0480 0000 6308          sub.l     #48,D0
00003AD6  0030      
00003AD8  2A40      6309          move.l    D0,A5
00003ADA  2F05      6310          move.l    D5,-(A7)
00003ADC  4E93      6311          jsr       (A3)
00003ADE  584F      6312          addq.w    #4,A7
00003AE0  2400      6313          move.l    D0,D2
00003AE2  52AE FFE4 6314          addq.l    #1,-28(A6)
00003AE6  387C 0001 6315          move.w    #1,A4
00003AEA  6000 FF6A 6316          bra       vsscanf_96
                    6317   vsscanf_102:
00003AEE  0C82 FFFF 6318          cmp.l     #-1,D2
00003AF2  FFFF      
00003AF4  671A      6319          beq.s     vsscanf_107
00003AF6  2F02      6320          move.l    D2,-(A7)
00003AF8  2F05      6321          move.l    D5,-(A7)
00003AFA  6100 F8D2 6322          bsr       @vsscanf_scanputback
00003AFE  504F      6323          addq.w    #8,A7
00003B00  53AE FFE4 6324          subq.l    #1,-28(A6)
00003B04  200C      6325          move.l    A4,D0
00003B06  6606      6326          bne.s     vsscanf_109
00003B08  2004      6327          move.l    D4,D0
00003B0A  6000 00E2 6328          bra       vsscanf_15
                    6329   vsscanf_109:
00003B0E  6012      6330          bra.s     vsscanf_111
                    6331   vsscanf_107:
00003B10  200C      6332          move.l    A4,D0
00003B12  660E      6333          bne.s     vsscanf_111
00003B14  4A84      6334          tst.l     D4
00003B16  6704      6335          beq.s     vsscanf_113
00003B18  2004      6336          move.l    D4,D0
00003B1A  6002      6337          bra.s     vsscanf_114
                    6338   vsscanf_113:
00003B1C  70FF      6339          moveq     #-1,D0
                    6340   vsscanf_114:
00003B1E  6000 00CE 6341          bra       vsscanf_15
                    6342   vsscanf_111:
00003B22  4AAE FFE0 6343          tst.l     -32(A6)
00003B26  6706      6344          beq.s     vsscanf_115
00003B28  200D      6345          move.l    A5,D0
00003B2A  4480      6346          neg.l     D0
00003B2C  2A40      6347          move.l    D0,A5
                    6348   vsscanf_115:
00003B2E  4A86      6349          tst.l     D6
00003B30  661E      6350          bne.s     vsscanf_117
00003B32  4AAE FFE8 6351          tst.l     -24(A6)
00003B36  6706      6352          beq.s     vsscanf_119
00003B38  2047      6353          move.l    D7,A0
00003B3A  208D      6354          move.l    A5,(A0)
00003B3C  6010      6355          bra.s     vsscanf_122
                    6356   vsscanf_119:
00003B3E  4AAE FFEC 6357          tst.l     -20(A6)
00003B42  6706      6358          beq.s     vsscanf_121
00003B44  2047      6359          move.l    D7,A0
00003B46  308D      6360          move.w    A5,(A0)
00003B48  6004      6361          bra.s     vsscanf_122
                    6362   vsscanf_121:
00003B4A  2047      6363          move.l    D7,A0
00003B4C  208D      6364          move.l    A5,(A0)
                    6365   vsscanf_122:
00003B4E  5284      6366          addq.l    #1,D4
                    6367   vsscanf_117:
00003B50  0C82 FFFF 6368          cmp.l     #-1,D2
00003B54  FFFF      
00003B56  660E      6369          bne.s     vsscanf_123
00003B58  4A84      6370          tst.l     D4
00003B5A  6704      6371          beq.s     vsscanf_125
00003B5C  2004      6372          move.l    D4,D0
00003B5E  6002      6373          bra.s     vsscanf_126
                    6374   vsscanf_125:
00003B60  70FF      6375          moveq     #-1,D0
                    6376   vsscanf_126:
00003B62  6000 008A 6377          bra       vsscanf_15
                    6378   vsscanf_123:
00003B66  6000 0080 6379          bra       vsscanf_139
                    6380   vsscanf_85:
00003B6A  0C83 0000 6381          cmp.l     #37,D3
00003B6E  0025      
00003B70  6600 0040 6382          bne       vsscanf_127
00003B74  2F05      6383          move.l    D5,-(A7)
00003B76  4E93      6384          jsr       (A3)
00003B78  584F      6385          addq.w    #4,A7
00003B7A  2400      6386          move.l    D0,D2
00003B7C  0C82 FFFF 6387          cmp.l     #-1,D2
00003B80  FFFF      
00003B82  660E      6388          bne.s     vsscanf_129
00003B84  4A84      6389          tst.l     D4
00003B86  6704      6390          beq.s     vsscanf_131
00003B88  2004      6391          move.l    D4,D0
00003B8A  6002      6392          bra.s     vsscanf_132
                    6393   vsscanf_131:
00003B8C  70FF      6394          moveq     #-1,D0
                    6395   vsscanf_132:
00003B8E  6000 005E 6396          bra       vsscanf_15
                    6397   vsscanf_129:
00003B92  52AE FFE4 6398          addq.l    #1,-28(A6)
00003B96  B483      6399          cmp.l     D3,D2
00003B98  6714      6400          beq.s     vsscanf_133
00003B9A  2F02      6401          move.l    D2,-(A7)
00003B9C  2F05      6402          move.l    D5,-(A7)
00003B9E  6100 F82E 6403          bsr       @vsscanf_scanputback
00003BA2  504F      6404          addq.w    #8,A7
00003BA4  53AE FFE4 6405          subq.l    #1,-28(A6)
00003BA8  2004      6406          move.l    D4,D0
00003BAA  6000 0042 6407          bra       vsscanf_15
                    6408   vsscanf_133:
00003BAE  6000 0038 6409          bra       vsscanf_139
                    6410   vsscanf_127:
00003BB2  2F05      6411          move.l    D5,-(A7)
00003BB4  4E93      6412          jsr       (A3)
00003BB6  584F      6413          addq.w    #4,A7
00003BB8  2400      6414          move.l    D0,D2
00003BBA  52AE FFE4 6415          addq.l    #1,-28(A6)
00003BBE  0C82 FFFF 6416          cmp.l     #-1,D2
00003BC2  FFFF      
00003BC4  660C      6417          bne.s     vsscanf_135
00003BC6  4A84      6418          tst.l     D4
00003BC8  6704      6419          beq.s     vsscanf_137
00003BCA  2004      6420          move.l    D4,D0
00003BCC  6002      6421          bra.s     vsscanf_138
                    6422   vsscanf_137:
00003BCE  70FF      6423          moveq     #-1,D0
                    6424   vsscanf_138:
00003BD0  601C      6425          bra.s     vsscanf_15
                    6426   vsscanf_135:
00003BD2  B483      6427          cmp.l     D3,D2
00003BD4  6712      6428          beq.s     vsscanf_139
00003BD6  2F02      6429          move.l    D2,-(A7)
00003BD8  2F05      6430          move.l    D5,-(A7)
00003BDA  6100 F7F2 6431          bsr       @vsscanf_scanputback
00003BDE  504F      6432          addq.w    #8,A7
00003BE0  53AE FFE4 6433          subq.l    #1,-28(A6)
00003BE4  2004      6434          move.l    D4,D0
00003BE6  6006      6435          bra.s     vsscanf_15
                    6436   vsscanf_139:
00003BE8  6000 FA44 6437          bra       vsscanf_3
                    6438   vsscanf_5:
00003BEC  2004      6439          move.l    D4,D0
                    6440   vsscanf_15:
00003BEE  4CDF 3CFC 6441          movem.l   (A7)+,D2/D3/D4/D5/D6/D7/A2/A3/A4/A5
00003BF2  4E5E      6442          unlk      A6
00003BF4  4E75      6443          rts
                    6444   _printf:
00003BF6  4E56 FFFC 6445          link      A6,#-4
00003BFA  48E7 2000 6446          movem.l   D2,-(A7)
00003BFE  41EE 0008 6447          lea       8(A6),A0
00003C02  5848      6448          addq.w    #4,A0
00003C04  2408      6449          move.l    A0,D2
00003C06  2F02      6450          move.l    D2,-(A7)
00003C08  2F2E 0008 6451          move.l    8(A6),-(A7)
00003C0C  42A7      6452          clr.l     -(A7)
00003C0E  6100 00CA 6453          bsr       _vsprintf
00003C12  DEFC 000C 6454          add.w     #12,A7
00003C16  2D40 FFFC 6455          move.l    D0,-4(A6)
00003C1A  4282      6456          clr.l     D2
00003C1C  202E FFFC 6457          move.l    -4(A6),D0
00003C20  4CDF 0004 6458          movem.l   (A7)+,D2
00003C24  4E5E      6459          unlk      A6
00003C26  4E75      6460          rts
                    6461   @vsprintf_copy:
00003C28  4E56 0000 6462          link      A6,#0
00003C2C  206E 0008 6463          move.l    8(A6),A0
00003C30  4A90      6464          tst.l     (A0)
00003C32  6710      6465          beq.s     @vsprintf_copy_1
00003C34  202E 000C 6466          move.l    12(A6),D0
00003C38  206E 0008 6467          move.l    8(A6),A0
00003C3C  2250      6468          move.l    (A0),A1
00003C3E  5290      6469          addq.l    #1,(A0)
00003C40  1280      6470          move.b    D0,(A1)
00003C42  600A      6471          bra.s     @vsprintf_copy_2
                    6472   @vsprintf_copy_1:
00003C44  2F2E 000C 6473          move.l    12(A6),-(A7)
00003C48  6100 F608 6474          bsr       _putch
00003C4C  584F      6475          addq.w    #4,A7
                    6476   @vsprintf_copy_2:
00003C4E  4E5E      6477          unlk      A6
00003C50  4E75      6478          rts
                    6479   @vsprintf_getval:
00003C52  4E56 0000 6480          link      A6,#0
00003C56  48E7 3000 6481          movem.l   D2/D3,-(A7)
00003C5A  242E 0008 6482          move.l    8(A6),D2
00003C5E  4283      6483          clr.l     D3
00003C60  2042      6484          move.l    D2,A0
00003C62  2050      6485          move.l    (A0),A0
00003C64  1010      6486          move.b    (A0),D0
00003C66  4880      6487          ext.w     D0
00003C68  48C0      6488          ext.l     D0
00003C6A  0C80 0000 6489          cmp.l     #42,D0
00003C6E  002A      
00003C70  6612      6490          bne.s     @vsprintf_getval_1
00003C72  206E 000C 6491          move.l    12(A6),A0
00003C76  2250      6492          move.l    (A0),A1
00003C78  5890      6493          addq.l    #4,(A0)
00003C7A  2611      6494          move.l    (A1),D3
00003C7C  2042      6495          move.l    D2,A0
00003C7E  5290      6496          addq.l    #1,(A0)
00003C80  6000 004E 6497          bra       @vsprintf_getval_5
                    6498   @vsprintf_getval_1:
00003C84  2042      6499          move.l    D2,A0
00003C86  2050      6500          move.l    (A0),A0
00003C88  1010      6501          move.b    (A0),D0
00003C8A  4880      6502          ext.w     D0
00003C8C  48C0      6503          ext.l     D0
00003C8E  0C80 0000 6504          cmp.l     #48,D0
00003C92  0030      
00003C94  6D00 003A 6505          blt       @vsprintf_getval_5
00003C98  2042      6506          move.l    D2,A0
00003C9A  2050      6507          move.l    (A0),A0
00003C9C  1010      6508          move.b    (A0),D0
00003C9E  4880      6509          ext.w     D0
00003CA0  48C0      6510          ext.l     D0
00003CA2  0C80 0000 6511          cmp.l     #57,D0
00003CA6  0039      
00003CA8  6E26      6512          bgt.s     @vsprintf_getval_5
00003CAA  2F03      6513          move.l    D3,-(A7)
00003CAC  4878 000A 6514          pea       10
00003CB0  6100 069C 6515          bsr       LMUL
00003CB4  2017      6516          move.l    (A7),D0
00003CB6  504F      6517          addq.w    #8,A7
00003CB8  2042      6518          move.l    D2,A0
00003CBA  2250      6519          move.l    (A0),A1
00003CBC  5290      6520          addq.l    #1,(A0)
00003CBE  1211      6521          move.b    (A1),D1
00003CC0  4881      6522          ext.w     D1
00003CC2  48C1      6523          ext.l     D1
00003CC4  D081      6524          add.l     D1,D0
00003CC6  0480 0000 6525          sub.l     #48,D0
00003CCA  0030      
00003CCC  2600      6526          move.l    D0,D3
00003CCE  60B4      6527          bra       @vsprintf_getval_1
                    6528   @vsprintf_getval_5:
00003CD0  2003      6529          move.l    D3,D0
00003CD2  4CDF 000C 6530          movem.l   (A7)+,D2/D3
00003CD6  4E5E      6531          unlk      A6
00003CD8  4E75      6532          rts
                    6533   _vsprintf:
00003CDA  4E56 FFCC 6534          link      A6,#-52
00003CDE  48E7 3F3C 6535          movem.l   D2/D3/D4/D5/D6/D7/A2/A3/A4/A5,-(A7)
00003CE2  45EE 0008 6536          lea       8(A6),A2
00003CE6  47F8 3C28 6537          lea       @vsprintf_copy,A3
00003CEA  49F9 0000 6538          lea       _ultoa,A4
00003CEE  4558      
00003CF0  4286      6539          clr.l     D6
                    6540   vsprintf_1:
00003CF2  206E 000C 6541          move.l    12(A6),A0
00003CF6  4A10      6542          tst.b     (A0)
00003CF8  6700 0624 6543          beq       vsprintf_3
00003CFC  206E 000C 6544          move.l    12(A6),A0
00003D00  1010      6545          move.b    (A0),D0
00003D02  4880      6546          ext.w     D0
00003D04  48C0      6547          ext.l     D0
00003D06  0C80 0000 6548          cmp.l     #37,D0
00003D0A  0025      
00003D0C  671C      6549          beq.s     vsprintf_4
00003D0E  206E 000C 6550          move.l    12(A6),A0
00003D12  52AE 000C 6551          addq.l    #1,12(A6)
00003D16  1210      6552          move.b    (A0),D1
00003D18  4881      6553          ext.w     D1
00003D1A  48C1      6554          ext.l     D1
00003D1C  2F01      6555          move.l    D1,-(A7)
00003D1E  2F0A      6556          move.l    A2,-(A7)
00003D20  4E93      6557          jsr       (A3)
00003D22  504F      6558          addq.w    #8,A7
00003D24  5286      6559          addq.l    #1,D6
00003D26  6000 05F2 6560          bra       vsprintf_2
                    6561   vsprintf_4:
00003D2A  52AE 000C 6562          addq.l    #1,12(A6)
00003D2E  422E FFD3 6563          clr.b     -45(A6)
00003D32  422E FFD2 6564          clr.b     -46(A6)
00003D36  422E FFD0 6565          clr.b     -48(A6)
00003D3A  422E FFCF 6566          clr.b     -49(A6)
00003D3E  422E FFCE 6567          clr.b     -50(A6)
00003D42  422E FFCD 6568          clr.b     -51(A6)
00003D46  42AE FFFC 6569          clr.l     -4(A6)
00003D4A  7AFF      6570          moveq     #-1,D5
00003D4C  41EE FFDC 6571          lea       -36(A6),A0
00003D50  2608      6572          move.l    A0,D3
00003D52  2408      6573          move.l    A0,D2
                    6574   vsprintf_6:
00003D54  206E 000C 6575          move.l    12(A6),A0
00003D58  1010      6576          move.b    (A0),D0
00003D5A  4880      6577          ext.w     D0
00003D5C  48C0      6578          ext.l     D0
00003D5E  0C80 0000 6579          cmp.l     #43,D0
00003D62  002B      
00003D64  6730      6580          beq.s     vsprintf_12
00003D66  6E18      6581          bgt.s     vsprintf_15
00003D68  0C80 0000 6582          cmp.l     #35,D0
00003D6C  0023      
00003D6E  6700 003E 6583          beq       vsprintf_14
00003D72  6E00 0046 6584          bgt       vsprintf_9
00003D76  0C80 0000 6585          cmp.l     #32,D0
00003D7A  0020      
00003D7C  6724      6586          beq.s     vsprintf_13
00003D7E  603A      6587          bra.s     vsprintf_9
                    6588   vsprintf_15:
00003D80  0C80 0000 6589          cmp.l     #45,D0
00003D84  002D      
00003D86  6702      6590          beq.s     vsprintf_11
00003D88  6030      6591          bra.s     vsprintf_9
                    6592   vsprintf_11:
00003D8A  1D7C 0001 6593          move.b    #1,-51(A6)
00003D8E  FFCD      
00003D90  52AE 000C 6594          addq.l    #1,12(A6)
00003D94  6026      6595          bra.s     vsprintf_7
                    6596   vsprintf_12:
00003D96  1D7C 0001 6597          move.b    #1,-50(A6)
00003D9A  FFCE      
00003D9C  52AE 000C 6598          addq.l    #1,12(A6)
00003DA0  601A      6599          bra.s     vsprintf_7
                    6600   vsprintf_13:
00003DA2  1D7C 0001 6601          move.b    #1,-49(A6)
00003DA6  FFCF      
00003DA8  52AE 000C 6602          addq.l    #1,12(A6)
00003DAC  600E      6603          bra.s     vsprintf_7
                    6604   vsprintf_14:
00003DAE  1D7C 0001 6605          move.b    #1,-48(A6)
00003DB2  FFD0      
00003DB4  52AE 000C 6606          addq.l    #1,12(A6)
00003DB8  6002      6607          bra.s     vsprintf_7
                    6608   vsprintf_9:
00003DBA  6002      6609          bra.s     vsprintf_8
                    6610   vsprintf_7:
00003DBC  6096      6611          bra       vsprintf_6
                    6612   vsprintf_8:
00003DBE  206E 000C 6613          move.l    12(A6),A0
00003DC2  1010      6614          move.b    (A0),D0
00003DC4  4880      6615          ext.w     D0
00003DC6  48C0      6616          ext.l     D0
00003DC8  0C80 0000 6617          cmp.l     #48,D0
00003DCC  0030      
00003DCE  660A      6618          bne.s     vsprintf_16
00003DD0  52AE 000C 6619          addq.l    #1,12(A6)
00003DD4  1D7C 0001 6620          move.b    #1,-46(A6)
00003DD8  FFD2      
                    6621   vsprintf_16:
00003DDA  486E 0010 6622          pea       16(A6)
00003DDE  486E 000C 6623          pea       12(A6)
00003DE2  6100 FE6E 6624          bsr       @vsprintf_getval
00003DE6  504F      6625          addq.w    #8,A7
00003DE8  2A40      6626          move.l    D0,A5
00003DEA  206E 000C 6627          move.l    12(A6),A0
00003DEE  1010      6628          move.b    (A0),D0
00003DF0  4880      6629          ext.w     D0
00003DF2  48C0      6630          ext.l     D0
00003DF4  0C80 0000 6631          cmp.l     #46,D0
00003DF8  002E      
00003DFA  6614      6632          bne.s     vsprintf_18
00003DFC  52AE 000C 6633          addq.l    #1,12(A6)
00003E00  486E 0010 6634          pea       16(A6)
00003E04  486E 000C 6635          pea       12(A6)
00003E08  6100 FE48 6636          bsr       @vsprintf_getval
00003E0C  504F      6637          addq.w    #8,A7
00003E0E  2A00      6638          move.l    D0,D5
                    6639   vsprintf_18:
00003E10  206E 000C 6640          move.l    12(A6),A0
00003E14  1010      6641          move.b    (A0),D0
00003E16  4880      6642          ext.w     D0
00003E18  48C0      6643          ext.l     D0
00003E1A  0C80 0000 6644          cmp.l     #108,D0
00003E1E  006C      
00003E20  660A      6645          bne.s     vsprintf_20
00003E22  52AE 000C 6646          addq.l    #1,12(A6)
00003E26  1D7C 0001 6647          move.b    #1,-45(A6)
00003E2A  FFD3      
                    6648   vsprintf_20:
00003E2C  206E 000C 6649          move.l    12(A6),A0
00003E30  1010      6650          move.b    (A0),D0
00003E32  4880      6651          ext.w     D0
00003E34  48C0      6652          ext.l     D0
00003E36  0C80 0000 6653          cmp.l     #111,D0
00003E3A  006F      
00003E3C  6700 00D4 6654          beq       vsprintf_27
00003E40  6E34      6655          bgt.s     vsprintf_33
00003E42  0C80 0000 6656          cmp.l     #100,D0
00003E46  0064      
00003E48  6700 0054 6657          beq       vsprintf_24
00003E4C  6E1C      6658          bgt.s     vsprintf_34
00003E4E  0C80 0000 6659          cmp.l     #99,D0
00003E52  0063      
00003E54  6700 012C 6660          beq       vsprintf_30
00003E58  6E00 016A 6661          bgt       vsprintf_22
00003E5C  0C80 0000 6662          cmp.l     #88,D0
00003E60  0058      
00003E62  6700 00E6 6663          beq       vsprintf_28
00003E66  6000 015C 6664          bra       vsprintf_22
                    6665   vsprintf_34:
00003E6A  0C80 0000 6666          cmp.l     #105,D0
00003E6E  0069      
00003E70  672C      6667          beq.s     vsprintf_24
00003E72  6000 0150 6668          bra       vsprintf_22
                    6669   vsprintf_33:
00003E76  0C80 0000 6670          cmp.l     #117,D0
00003E7A  0075      
00003E7C  6700 005C 6671          beq       vsprintf_26
00003E80  6E0E      6672          bgt.s     vsprintf_35
00003E82  0C80 0000 6673          cmp.l     #115,D0
00003E86  0073      
00003E88  6700 011C 6674          beq       vsprintf_31
00003E8C  6000 0136 6675          bra       vsprintf_22
                    6676   vsprintf_35:
00003E90  0C80 0000 6677          cmp.l     #120,D0
00003E94  0078      
00003E96  6700 00B2 6678          beq       vsprintf_28
00003E9A  6000 0128 6679          bra       vsprintf_22
                    6680   vsprintf_24:
00003E9E  4A2E FFD3 6681          tst.b     -45(A6)
00003EA2  671A      6682          beq.s     vsprintf_36
00003EA4  4878 000A 6683          pea       10
00003EA8  2F03      6684          move.l    D3,-(A7)
00003EAA  206E 0010 6685          move.l    16(A6),A0
00003EAE  58AE 0010 6686          addq.l    #4,16(A6)
00003EB2  2F10      6687          move.l    (A0),-(A7)
00003EB4  6100 061E 6688          bsr       _ltoa
00003EB8  DEFC 000C 6689          add.w     #12,A7
00003EBC  6018      6690          bra.s     vsprintf_37
                    6691   vsprintf_36:
00003EBE  4878 000A 6692          pea       10
00003EC2  2F03      6693          move.l    D3,-(A7)
00003EC4  206E 0010 6694          move.l    16(A6),A0
00003EC8  58AE 0010 6695          addq.l    #4,16(A6)
00003ECC  2F10      6696          move.l    (A0),-(A7)
00003ECE  6100 0604 6697          bsr       _ltoa
00003ED2  DEFC 000C 6698          add.w     #12,A7
                    6699   vsprintf_37:
00003ED6  6000 00FA 6700          bra       vsprintf_23
                    6701   vsprintf_26:
00003EDA  4A2E FFD3 6702          tst.b     -45(A6)
00003EDE  6718      6703          beq.s     vsprintf_38
00003EE0  4878 000A 6704          pea       10
00003EE4  2F03      6705          move.l    D3,-(A7)
00003EE6  206E 0010 6706          move.l    16(A6),A0
00003EEA  58AE 0010 6707          addq.l    #4,16(A6)
00003EEE  2F10      6708          move.l    (A0),-(A7)
00003EF0  4E94      6709          jsr       (A4)
00003EF2  DEFC 000C 6710          add.w     #12,A7
00003EF6  6016      6711          bra.s     vsprintf_39
                    6712   vsprintf_38:
00003EF8  4878 000A 6713          pea       10
00003EFC  2F03      6714          move.l    D3,-(A7)
00003EFE  206E 0010 6715          move.l    16(A6),A0
00003F02  58AE 0010 6716          addq.l    #4,16(A6)
00003F06  2F10      6717          move.l    (A0),-(A7)
00003F08  4E94      6718          jsr       (A4)
00003F0A  DEFC 000C 6719          add.w     #12,A7
                    6720   vsprintf_39:
00003F0E  6000 00C2 6721          bra       vsprintf_23
                    6722   vsprintf_27:
00003F12  4A2E FFD3 6723          tst.b     -45(A6)
00003F16  6718      6724          beq.s     vsprintf_40
00003F18  4878 0008 6725          pea       8
00003F1C  2F03      6726          move.l    D3,-(A7)
00003F1E  206E 0010 6727          move.l    16(A6),A0
00003F22  58AE 0010 6728          addq.l    #4,16(A6)
00003F26  2F10      6729          move.l    (A0),-(A7)
00003F28  4E94      6730          jsr       (A4)
00003F2A  DEFC 000C 6731          add.w     #12,A7
00003F2E  6016      6732          bra.s     vsprintf_41
                    6733   vsprintf_40:
00003F30  4878 0008 6734          pea       8
00003F34  2F03      6735          move.l    D3,-(A7)
00003F36  206E 0010 6736          move.l    16(A6),A0
00003F3A  58AE 0010 6737          addq.l    #4,16(A6)
00003F3E  2F10      6738          move.l    (A0),-(A7)
00003F40  4E94      6739          jsr       (A4)
00003F42  DEFC 000C 6740          add.w     #12,A7
                    6741   vsprintf_41:
00003F46  6000 008A 6742          bra       vsprintf_23
                    6743   vsprintf_28:
00003F4A  4A2E FFD3 6744          tst.b     -45(A6)
00003F4E  6718      6745          beq.s     vsprintf_42
00003F50  4878 0010 6746          pea       16
00003F54  2F03      6747          move.l    D3,-(A7)
00003F56  206E 0010 6748          move.l    16(A6),A0
00003F5A  58AE 0010 6749          addq.l    #4,16(A6)
00003F5E  2F10      6750          move.l    (A0),-(A7)
00003F60  4E94      6751          jsr       (A4)
00003F62  DEFC 000C 6752          add.w     #12,A7
00003F66  6016      6753          bra.s     vsprintf_43
                    6754   vsprintf_42:
00003F68  4878 0010 6755          pea       16
00003F6C  2F03      6756          move.l    D3,-(A7)
00003F6E  206E 0010 6757          move.l    16(A6),A0
00003F72  58AE 0010 6758          addq.l    #4,16(A6)
00003F76  2F10      6759          move.l    (A0),-(A7)
00003F78  4E94      6760          jsr       (A4)
00003F7A  DEFC 000C 6761          add.w     #12,A7
                    6762   vsprintf_43:
00003F7E  6000 0052 6763          bra       vsprintf_23
                    6764   vsprintf_30:
00003F82  206E 0010 6765          move.l    16(A6),A0
00003F86  58AE 0010 6766          addq.l    #4,16(A6)
00003F8A  2010      6767          move.l    (A0),D0
00003F8C  2042      6768          move.l    D2,A0
00003F8E  5282      6769          addq.l    #1,D2
00003F90  1080      6770          move.b    D0,(A0)
00003F92  2042      6771          move.l    D2,A0
00003F94  4210      6772          clr.b     (A0)
00003F96  200D      6773          move.l    A5,D0
00003F98  6704      6774          beq.s     vsprintf_44
00003F9A  200D      6775          move.l    A5,D0
00003F9C  6002      6776          bra.s     vsprintf_45
                    6777   vsprintf_44:
00003F9E  7001      6778          moveq     #1,D0
                    6779   vsprintf_45:
00003FA0  2A00      6780          move.l    D0,D5
00003FA2  6000 002E 6781          bra       vsprintf_23
                    6782   vsprintf_31:
00003FA6  206E 0010 6783          move.l    16(A6),A0
00003FAA  58AE 0010 6784          addq.l    #4,16(A6)
00003FAE  2610      6785          move.l    (A0),D3
00003FB0  0C85 FFFF 6786          cmp.l     #-1,D5
00003FB4  FFFF      
00003FB6  660A      6787          bne.s     vsprintf_46
00003FB8  2F03      6788          move.l    D3,-(A7)
00003FBA  6100 05FE 6789          bsr       _strlen
00003FBE  584F      6790          addq.w    #4,A7
00003FC0  2A00      6791          move.l    D0,D5
                    6792   vsprintf_46:
00003FC2  600E      6793          bra.s     vsprintf_23
                    6794   vsprintf_22:
00003FC4  206E 000C 6795          move.l    12(A6),A0
00003FC8  2242      6796          move.l    D2,A1
00003FCA  5282      6797          addq.l    #1,D2
00003FCC  1290      6798          move.b    (A0),(A1)
00003FCE  2042      6799          move.l    D2,A0
00003FD0  4210      6800          clr.b     (A0)
                    6801   vsprintf_23:
00003FD2  2F03      6802          move.l    D3,-(A7)
00003FD4  6100 05E4 6803          bsr       _strlen
00003FD8  584F      6804          addq.w    #4,A7
00003FDA  1800      6805          move.b    D0,D4
00003FDC  206E 000C 6806          move.l    12(A6),A0
00003FE0  1010      6807          move.b    (A0),D0
00003FE2  4880      6808          ext.w     D0
00003FE4  48C0      6809          ext.l     D0
00003FE6  0C80 0000 6810          cmp.l     #115,D0
00003FEA  0073      
00003FEC  6618      6811          bne.s     vsprintf_48
00003FEE  0C85 0000 6812          cmp.l     #0,D5
00003FF2  0000      
00003FF4  6D10      6813          blt.s     vsprintf_48
00003FF6  4884      6814          ext.w     D4
00003FF8  48C4      6815          ext.l     D4
00003FFA  B885      6816          cmp.l     D5,D4
00003FFC  6F04      6817          ble.s     vsprintf_50
00003FFE  1005      6818          move.b    D5,D0
00004000  6002      6819          bra.s     vsprintf_51
                    6820   vsprintf_50:
00004002  1004      6821          move.b    D4,D0
                    6822   vsprintf_51:
00004004  1800      6823          move.b    D0,D4
                    6824   vsprintf_48:
00004006  206E 000C 6825          move.l    12(A6),A0
0000400A  1010      6826          move.b    (A0),D0
0000400C  4880      6827          ext.w     D0
0000400E  48C0      6828          ext.l     D0
00004010  0C80 0000 6829          cmp.l     #88,D0
00004014  0058      
00004016  6600 0026 6830          bne       vsprintf_56
0000401A  41EE FFDC 6831          lea       -36(A6),A0
0000401E  2408      6832          move.l    A0,D2
                    6833   vsprintf_54:
00004020  2042      6834          move.l    D2,A0
00004022  4A10      6835          tst.b     (A0)
00004024  6718      6836          beq.s     vsprintf_56
00004026  2042      6837          move.l    D2,A0
00004028  1210      6838          move.b    (A0),D1
0000402A  4881      6839          ext.w     D1
0000402C  48C1      6840          ext.l     D1
0000402E  2F01      6841          move.l    D1,-(A7)
00004030  6100 F302 6842          bsr       _toupper
00004034  584F      6843          addq.w    #4,A7
00004036  2042      6844          move.l    D2,A0
00004038  1080      6845          move.b    D0,(A0)
0000403A  5282      6846          addq.l    #1,D2
0000403C  60E2      6847          bra       vsprintf_54
                    6848   vsprintf_56:
0000403E  7E00      6849          moveq     #0,D7
00004040  41EE FFD4 6850          lea       -44(A6),A0
00004044  2408      6851          move.l    A0,D2
00004046  206E 000C 6852          move.l    12(A6),A0
0000404A  1010      6853          move.b    (A0),D0
0000404C  4880      6854          ext.w     D0
0000404E  48C0      6855          ext.l     D0
00004050  0C80 0000 6856          cmp.l     #100,D0
00004054  0064      
00004056  6714      6857          beq.s     vsprintf_59
00004058  206E 000C 6858          move.l    12(A6),A0
0000405C  1010      6859          move.b    (A0),D0
0000405E  4880      6860          ext.w     D0
00004060  48C0      6861          ext.l     D0
00004062  0C80 0000 6862          cmp.l     #105,D0
00004066  0069      
00004068  6600 0076 6863          bne       vsprintf_65
                    6864   vsprintf_59:
0000406C  4A2E FFCE 6865          tst.b     -50(A6)
00004070  6612      6866          bne.s     vsprintf_62
00004072  2043      6867          move.l    D3,A0
00004074  1010      6868          move.b    (A0),D0
00004076  4880      6869          ext.w     D0
00004078  48C0      6870          ext.l     D0
0000407A  0C80 0000 6871          cmp.l     #45,D0
0000407E  002D      
00004080  6600 002E 6872          bne       vsprintf_60
                    6873   vsprintf_62:
00004084  2043      6874          move.l    D3,A0
00004086  1010      6875          move.b    (A0),D0
00004088  4880      6876          ext.w     D0
0000408A  48C0      6877          ext.l     D0
0000408C  0C80 0000 6878          cmp.l     #45,D0
00004090  002D      
00004092  660E      6879          bne.s     vsprintf_63
00004094  2043      6880          move.l    D3,A0
00004096  5283      6881          addq.l    #1,D3
00004098  2242      6882          move.l    D2,A1
0000409A  5282      6883          addq.l    #1,D2
0000409C  1290      6884          move.b    (A0),(A1)
0000409E  5304      6885          subq.b    #1,D4
000040A0  6008      6886          bra.s     vsprintf_64
                    6887   vsprintf_63:
000040A2  2042      6888          move.l    D2,A0
000040A4  5282      6889          addq.l    #1,D2
000040A6  10BC 002B 6890          move.b    #43,(A0)
                    6891   vsprintf_64:
000040AA  5287      6892          addq.l    #1,D7
000040AC  6000 0032 6893          bra       vsprintf_65
                    6894   vsprintf_60:
000040B0  4A2E FFCF 6895          tst.b     -49(A6)
000040B4  6700 002A 6896          beq       vsprintf_65
000040B8  2043      6897          move.l    D3,A0
000040BA  1010      6898          move.b    (A0),D0
000040BC  4880      6899          ext.w     D0
000040BE  48C0      6900          ext.l     D0
000040C0  0C80 0000 6901          cmp.l     #45,D0
000040C4  002D      
000040C6  660E      6902          bne.s     vsprintf_67
000040C8  2043      6903          move.l    D3,A0
000040CA  5283      6904          addq.l    #1,D3
000040CC  2242      6905          move.l    D2,A1
000040CE  5282      6906          addq.l    #1,D2
000040D0  1290      6907          move.b    (A0),(A1)
000040D2  5304      6908          subq.b    #1,D4
000040D4  6008      6909          bra.s     vsprintf_68
                    6910   vsprintf_67:
000040D6  2042      6911          move.l    D2,A0
000040D8  5282      6912          addq.l    #1,D2
000040DA  10BC 0020 6913          move.b    #32,(A0)
                    6914   vsprintf_68:
000040DE  5287      6915          addq.l    #1,D7
                    6916   vsprintf_65:
000040E0  4A2E FFD0 6917          tst.b     -48(A6)
000040E4  6700 0066 6918          beq       vsprintf_77
000040E8  206E 000C 6919          move.l    12(A6),A0
000040EC  1010      6920          move.b    (A0),D0
000040EE  4880      6921          ext.w     D0
000040F0  48C0      6922          ext.l     D0
000040F2  0C80 0000 6923          cmp.l     #111,D0
000040F6  006F      
000040F8  671A      6924          beq.s     vsprintf_73
000040FA  6E0C      6925          bgt.s     vsprintf_76
000040FC  0C80 0000 6926          cmp.l     #88,D0
00004100  0058      
00004102  6710      6927          beq.s     vsprintf_73
00004104  6000 0046 6928          bra       vsprintf_77
                    6929   vsprintf_76:
00004108  0C80 0000 6930          cmp.l     #120,D0
0000410C  0078      
0000410E  6704      6931          beq.s     vsprintf_73
00004110  6000 003A 6932          bra       vsprintf_77
                    6933   vsprintf_73:
00004114  2042      6934          move.l    D2,A0
00004116  5282      6935          addq.l    #1,D2
00004118  10BC 0030 6936          move.b    #48,(A0)
0000411C  5287      6937          addq.l    #1,D7
0000411E  206E 000C 6938          move.l    12(A6),A0
00004122  1010      6939          move.b    (A0),D0
00004124  4880      6940          ext.w     D0
00004126  48C0      6941          ext.l     D0
00004128  0C80 0000 6942          cmp.l     #120,D0
0000412C  0078      
0000412E  6712      6943          beq.s     vsprintf_79
00004130  206E 000C 6944          move.l    12(A6),A0
00004134  1010      6945          move.b    (A0),D0
00004136  4880      6946          ext.w     D0
00004138  48C0      6947          ext.l     D0
0000413A  0C80 0000 6948          cmp.l     #88,D0
0000413E  0058      
00004140  660A      6949          bne.s     vsprintf_77
                    6950   vsprintf_79:
00004142  2042      6951          move.l    D2,A0
00004144  5282      6952          addq.l    #1,D2
00004146  10BC 0078 6953          move.b    #120,(A0)
0000414A  5287      6954          addq.l    #1,D7
                    6955   vsprintf_77:
0000414C  2042      6956          move.l    D2,A0
0000414E  4210      6957          clr.b     (A0)
00004150  206E 000C 6958          move.l    12(A6),A0
00004154  1010      6959          move.b    (A0),D0
00004156  4880      6960          ext.w     D0
00004158  48C0      6961          ext.l     D0
0000415A  0C80 0000 6962          cmp.l     #105,D0
0000415E  0069      
00004160  6700 0076 6963          beq       vsprintf_82
00004164  6E42      6964          bgt.s     vsprintf_93
00004166  0C80 0000 6965          cmp.l     #99,D0
0000416A  0063      
0000416C  6700 0084 6966          beq       vsprintf_96
00004170  6E1C      6967          bgt.s     vsprintf_94
00004172  0C80 0000 6968          cmp.l     #88,D0
00004176  0058      
00004178  6700 005E 6969          beq       vsprintf_82
0000417C  6E00 0184 6970          bgt       vsprintf_80
00004180  0C80 0000 6971          cmp.l     #69,D0
00004184  0045      
00004186  6700 0050 6972          beq       vsprintf_82
0000418A  6000 0176 6973          bra       vsprintf_80
                    6974   vsprintf_94:
0000418E  0C80 0000 6975          cmp.l     #101,D0
00004192  0065      
00004194  6700 0042 6976          beq       vsprintf_82
00004198  6E00 0168 6977          bgt       vsprintf_80
0000419C  0C80 0000 6978          cmp.l     #100,D0
000041A0  0064      
000041A2  6734      6979          beq.s     vsprintf_82
000041A4  6000 015C 6980          bra       vsprintf_80
                    6981   vsprintf_93:
000041A8  0C80 0000 6982          cmp.l     #117,D0
000041AC  0075      
000041AE  6728      6983          beq.s     vsprintf_82
000041B0  6E1A      6984          bgt.s     vsprintf_95
000041B2  0C80 0000 6985          cmp.l     #115,D0
000041B6  0073      
000041B8  6700 0038 6986          beq       vsprintf_96
000041BC  6E00 0144 6987          bgt       vsprintf_80
000041C0  0C80 0000 6988          cmp.l     #111,D0
000041C4  006F      
000041C6  6710      6989          beq.s     vsprintf_82
000041C8  6000 0138 6990          bra       vsprintf_80
                    6991   vsprintf_95:
000041CC  0C80 0000 6992          cmp.l     #120,D0
000041D0  0078      
000041D2  6704      6993          beq.s     vsprintf_82
000041D4  6000 012C 6994          bra       vsprintf_80
                    6995   vsprintf_82:
000041D8  4A2E FFD2 6996          tst.b     -46(A6)
000041DC  6714      6997          beq.s     vsprintf_96
000041DE  4A2E FFCD 6998          tst.b     -51(A6)
000041E2  660E      6999          bne.s     vsprintf_96
000041E4  200D      7000          move.l    A5,D0
000041E6  9087      7001          sub.l     D7,D0
000041E8  4884      7002          ext.w     D4
000041EA  48C4      7003          ext.l     D4
000041EC  9084      7004          sub.l     D4,D0
000041EE  2D40 FFFC 7005          move.l    D0,-4(A6)
                    7006   vsprintf_96:
000041F2  202E FFFC 7007          move.l    -4(A6),D0
000041F6  0C80 0000 7008          cmp.l     #0,D0
000041FA  0000      
000041FC  6C04      7009          bge.s     vsprintf_98
000041FE  42AE FFFC 7010          clr.l     -4(A6)
                    7011   vsprintf_98:
00004202  4A2E FFCD 7012          tst.b     -51(A6)
00004206  6600 0030 7013          bne       vsprintf_104
0000420A  4884      7014          ext.w     D4
0000420C  48C4      7015          ext.l     D4
0000420E  2004      7016          move.l    D4,D0
00004210  D0AE FFFC 7017          add.l     -4(A6),D0
00004214  D087      7018          add.l     D7,D0
00004216  1D40 FFD1 7019          move.b    D0,-47(A6)
                    7020   vsprintf_102:
0000421A  102E FFD1 7021          move.b    -47(A6),D0
0000421E  4880      7022          ext.w     D0
00004220  48C0      7023          ext.l     D0
00004222  220D      7024          move.l    A5,D1
00004224  534D      7025          subq.w    #1,A5
00004226  B081      7026          cmp.l     D1,D0
00004228  6C0E      7027          bge.s     vsprintf_104
0000422A  4878 0020 7028          pea       32
0000422E  2F0A      7029          move.l    A2,-(A7)
00004230  4E93      7030          jsr       (A3)
00004232  504F      7031          addq.w    #8,A7
00004234  5286      7032          addq.l    #1,D6
00004236  60E2      7033          bra       vsprintf_102
                    7034   vsprintf_104:
00004238  41EE FFD4 7035          lea       -44(A6),A0
0000423C  2408      7036          move.l    A0,D2
                    7037   vsprintf_105:
0000423E  2042      7038          move.l    D2,A0
00004240  4A10      7039          tst.b     (A0)
00004242  6716      7040          beq.s     vsprintf_107
00004244  2042      7041          move.l    D2,A0
00004246  5282      7042          addq.l    #1,D2
00004248  1210      7043          move.b    (A0),D1
0000424A  4881      7044          ext.w     D1
0000424C  48C1      7045          ext.l     D1
0000424E  2F01      7046          move.l    D1,-(A7)
00004250  2F0A      7047          move.l    A2,-(A7)
00004252  4E93      7048          jsr       (A3)
00004254  504F      7049          addq.w    #8,A7
00004256  5286      7050          addq.l    #1,D6
00004258  60E4      7051          bra       vsprintf_105
                    7052   vsprintf_107:
0000425A  202E FFFC 7053          move.l    -4(A6),D0
0000425E  1D40 FFD1 7054          move.b    D0,-47(A6)
                    7055   vsprintf_108:
00004262  102E FFD1 7056          move.b    -47(A6),D0
00004266  532E FFD1 7057          subq.b    #1,-47(A6)
0000426A  4A00      7058          tst.b     D0
0000426C  670E      7059          beq.s     vsprintf_110
0000426E  4878 0030 7060          pea       48
00004272  2F0A      7061          move.l    A2,-(A7)
00004274  4E93      7062          jsr       (A3)
00004276  504F      7063          addq.w    #8,A7
00004278  5286      7064          addq.l    #1,D6
0000427A  60E6      7065          bra       vsprintf_108
                    7066   vsprintf_110:
0000427C  2043      7067          move.l    D3,A0
0000427E  4A10      7068          tst.b     (A0)
00004280  6700 0048 7069          beq       vsprintf_113
00004284  206E 000C 7070          move.l    12(A6),A0
00004288  1010      7071          move.b    (A0),D0
0000428A  4880      7072          ext.w     D0
0000428C  48C0      7073          ext.l     D0
0000428E  0C80 0000 7074          cmp.l     #115,D0
00004292  0073      
00004294  670C      7075          beq.s     vsprintf_116
00004296  6E18      7076          bgt.s     vsprintf_119
00004298  0C80 0000 7077          cmp.l     #99,D0
0000429C  0063      
0000429E  6702      7078          beq.s     vsprintf_116
000042A0  600E      7079          bra.s     vsprintf_119
                    7080   vsprintf_116:
000042A2  2005      7081          move.l    D5,D0
000042A4  5385      7082          subq.l    #1,D5
000042A6  0C80 0000 7083          cmp.l     #0,D0
000042AA  0000      
000042AC  6E02      7084          bgt.s     vsprintf_119
000042AE  6016      7085          bra.s     vsprintf_115
                    7086   vsprintf_119:
000042B0  2043      7087          move.l    D3,A0
000042B2  5283      7088          addq.l    #1,D3
000042B4  1210      7089          move.b    (A0),D1
000042B6  4881      7090          ext.w     D1
000042B8  48C1      7091          ext.l     D1
000042BA  2F01      7092          move.l    D1,-(A7)
000042BC  2F0A      7093          move.l    A2,-(A7)
000042BE  4E93      7094          jsr       (A3)
000042C0  504F      7095          addq.w    #8,A7
000042C2  5286      7096          addq.l    #1,D6
000042C4  6002      7097          bra.s     vsprintf_112
                    7098   vsprintf_115:
000042C6  6002      7099          bra.s     vsprintf_113
                    7100   vsprintf_112:
000042C8  60B2      7101          bra       vsprintf_110
                    7102   vsprintf_113:
000042CA  4A2E FFCD 7103          tst.b     -51(A6)
000042CE  6700 0030 7104          beq       vsprintf_125
000042D2  4884      7105          ext.w     D4
000042D4  48C4      7106          ext.l     D4
000042D6  2004      7107          move.l    D4,D0
000042D8  D0AE FFFC 7108          add.l     -4(A6),D0
000042DC  D087      7109          add.l     D7,D0
000042DE  1D40 FFD1 7110          move.b    D0,-47(A6)
                    7111   vsprintf_123:
000042E2  102E FFD1 7112          move.b    -47(A6),D0
000042E6  4880      7113          ext.w     D0
000042E8  48C0      7114          ext.l     D0
000042EA  220D      7115          move.l    A5,D1
000042EC  534D      7116          subq.w    #1,A5
000042EE  B081      7117          cmp.l     D1,D0
000042F0  6C0E      7118          bge.s     vsprintf_125
000042F2  4878 0020 7119          pea       32
000042F6  2F0A      7120          move.l    A2,-(A7)
000042F8  4E93      7121          jsr       (A3)
000042FA  504F      7122          addq.w    #8,A7
000042FC  5386      7123          subq.l    #1,D6
000042FE  60E2      7124          bra       vsprintf_123
                    7125   vsprintf_125:
00004300  6014      7126          bra.s     vsprintf_81
                    7127   vsprintf_80:
00004302  206E 000C 7128          move.l    12(A6),A0
00004306  1210      7129          move.b    (A0),D1
00004308  4881      7130          ext.w     D1
0000430A  48C1      7131          ext.l     D1
0000430C  2F01      7132          move.l    D1,-(A7)
0000430E  2F0A      7133          move.l    A2,-(A7)
00004310  4E93      7134          jsr       (A3)
00004312  504F      7135          addq.w    #8,A7
00004314  5286      7136          addq.l    #1,D6
                    7137   vsprintf_81:
00004316  52AE 000C 7138          addq.l    #1,12(A6)
                    7139   vsprintf_2:
0000431A  6000 F9D6 7140          bra       vsprintf_1
                    7141   vsprintf_3:
0000431E  4A92      7142          tst.l     (A2)
00004320  6710      7143          beq.s     vsprintf_126
00004322  4201      7144          clr.b     D1
00004324  C2BC 0000 7145          and.l     #255,D1
00004328  00FF      
0000432A  2F01      7146          move.l    D1,-(A7)
0000432C  2F0A      7147          move.l    A2,-(A7)
0000432E  4E93      7148          jsr       (A3)
00004330  504F      7149          addq.w    #8,A7
                    7150   vsprintf_126:
00004332  2006      7151          move.l    D6,D0
00004334  4CDF 3CFC 7152          movem.l   (A7)+,D2/D3/D4/D5/D6/D7/A2/A3/A4/A5
00004338  4E5E      7153          unlk      A6
0000433A  4E75      7154          rts
                    7155   ULMUL:
0000433C  4E56 0000 7156          link    A6,#0
00004340  48E7 C000 7157          movem.l D0/D1,-(A7)
00004344  222E 0008 7158          move.l  8(A6),D1
00004348  202E 000C 7159          move.l  12(A6),D0
0000434C  602C      7160          bra.s   lmul_3
                    7161   LMUL:
0000434E  4E56 0000 7162          link    A6,#0
00004352  48E7 C000 7163          movem.l D0/D1,-(A7)
00004356  222E 0008 7164          move.l  8(A6),D1
0000435A  202E 000C 7165          move.l  12(A6),D0
0000435E  4A80      7166          tst.l   D0
00004360  6A0A      7167          bpl.s   lmul_1
00004362  4480      7168          neg.l   D0
00004364  4A81      7169          tst.l   D1
00004366  6A0A      7170          bpl.s   lmul_2
00004368  4481      7171          neg.l   D1
0000436A  600E      7172          bra.s   lmul_3
                    7173   lmul_1:
0000436C  4A81      7174          tst.l   D1
0000436E  6A0A      7175          bpl.s   lmul_3
00004370  4481      7176          neg.l   D1
                    7177   lmul_2:
00004372  6114      7178          bsr.s   domul
00004374  4481      7179          neg.l   D1
00004376  4080      7180          negx.l  D0
00004378  6002      7181          bra.s   lmul_4
                    7182   lmul_3:
0000437A  610C      7183          bsr.s   domul
                    7184   lmul_4:
0000437C  2D41 0008 7185          move.l  D1,8(A6)
00004380  4CDF 0003 7186          movem.l (A7)+,D0/D1
00004384  4E5E      7187          unlk    A6
00004386  4E75      7188          rts
                    7189   domul:
00004388  0C81 0000 7190          cmpi.l  #$FFFF,D1
0000438C  FFFF      
0000438E  620C      7191          bhi.s   domul_1
00004390  0C80 0000 7192          cmpi.l  #$FFFF,D0
00004394  FFFF      
00004396  620E      7193          bhi.s   domul_2
00004398  C2C0      7194          mulu    D0,D1
0000439A  4E75      7195          rts
                    7196   domul_1:
0000439C  0C80 0000 7197          cmpi.l  #$FFFF,D0
000043A0  FFFF      
000043A2  6218      7198          bhi.s   domul_4
000043A4  6002      7199          bra.s   domul_3
                    7200   domul_2
000043A6  C141      7201          exg     D0,D1
                    7202   domul_3:
000043A8  2F02      7203          move.l  D2,-(A7)
000043AA  2401      7204          move.l  D1,D2
000043AC  4842      7205          swap    D2
000043AE  C2C0      7206          mulu    D0,D1
000043B0  C4C0      7207          mulu    D0,D2
000043B2  4842      7208          swap    D2
000043B4  4242      7209          clr.w   D2
000043B6  D282      7210          add.l   D2,D1
000043B8  241F      7211          move.l  (A7)+,D2
000043BA  4E75      7212          rts
                    7213   domul_4:
000043BC  48E7 3000 7214          movem.l D2/D3,-(A7)
000043C0  2401      7215          move.l  D1,D2
000043C2  2601      7216          move.l  D1,D3
000043C4  C2C0      7217          mulu    D0,D1
000043C6  4842      7218          swap    D2
000043C8  C4C0      7219          mulu    D0,D2
000043CA  4840      7220          swap    D0
000043CC  C6C0      7221          mulu    D0,D3
000043CE  D483      7222          add.l   D3,D2
000043D0  4842      7223          swap    D2
000043D2  4242      7224          clr.w   D2
000043D4  D282      7225          add.l   D2,D1
000043D6  4CDF 000C 7226          movem.l (A7)+,D2/D3
000043DA  4E75      7227          rts
                    7228   _gets:
000043DC  4E56 0000 7229          link      A6,#0
000043E0  48E7 3820 7230          movem.l   D2/D3/D4/A2,-(A7)
000043E4  45F8 3252 7231          lea       _putch,A2
000043E8  282E 0008 7232          move.l    8(A6),D4
000043EC  2404      7233          move.l    D4,D2
                    7234   gets_1:
000043EE  6100 EE92 7235          bsr       _getch
000043F2  2600      7236          move.l    D0,D3
000043F4  0C80 0000 7237          cmp.l     #10,D0
000043F8  000A      
000043FA  6700 003C 7238          beq       gets_3
000043FE  0C83 0000 7239          cmp.l     #8,D3
00004402  0008      
00004404  6712      7240          beq.s     gets_4
00004406  2042      7241          move.l    D2,A0
00004408  5282      7242          addq.l    #1,D2
0000440A  1083      7243          move.b    D3,(A0)
0000440C  4883      7244          ext.w     D3
0000440E  48C3      7245          ext.l     D3
00004410  2F03      7246          move.l    D3,-(A7)
00004412  4E92      7247          jsr       (A2)
00004414  584F      7248          addq.w    #4,A7
00004416  601E      7249          bra.s     gets_6
                    7250   gets_4:
00004418  B484      7251          cmp.l     D4,D2
0000441A  631A      7252          bls.s     gets_6
0000441C  4878 0008 7253          pea       8
00004420  4E92      7254          jsr       (A2)
00004422  584F      7255          addq.w    #4,A7
00004424  4878 0020 7256          pea       32
00004428  4E92      7257          jsr       (A2)
0000442A  584F      7258          addq.w    #4,A7
0000442C  4878 0008 7259          pea       8
00004430  4E92      7260          jsr       (A2)
00004432  584F      7261          addq.w    #4,A7
00004434  5382      7262          subq.l    #1,D2
                    7263   gets_6:
00004436  60B6      7264          bra       gets_1
                    7265   gets_3:
00004438  4878 000A 7266          pea       10
0000443C  4E92      7267          jsr       (A2)
0000443E  584F      7268          addq.w    #4,A7
00004440  2042      7269          move.l    D2,A0
00004442  4210      7270          clr.b     (A0)
00004444  2004      7271          move.l    D4,D0
00004446  4CDF 041C 7272          movem.l   (A7)+,D2/D3/D4/A2
0000444A  4E5E      7273          unlk      A6
0000444C  4E75      7274          rts
                    7275   _ungetch:
0000444E  4E56 0000 7276          link      A6,#0
00004452  23EE 0008 7277          move.l    8(A6),__ungetbuf
00004456  0B00 00C0 
0000445A  202E 0008 7278          move.l    8(A6),D0
0000445E  4E5E      7279          unlk      A6
00004460  4E75      7280          rts
                    7281   @itoa_convert:
00004462  4E56 0000 7282          link      A6,#0
00004466  48E7 3C00 7283          movem.l   D2/D3/D4/D5,-(A7)
0000446A  242E 0008 7284          move.l    8(A6),D2
0000446E  262E 0010 7285          move.l    16(A6),D3
00004472  2A2E 000C 7286          move.l    12(A6),D5
00004476  2F05      7287          move.l    D5,-(A7)
00004478  2F03      7288          move.l    D3,-(A7)
0000447A  6100 ECF8 7289          bsr       ULDIV
0000447E  202F 0004 7290          move.l    4(A7),D0
00004482  504F      7291          addq.w    #8,A7
00004484  2800      7292          move.l    D0,D4
00004486  BA83      7293          cmp.l     D3,D5
00004488  651A      7294          blo.s     @itoa_convert_1
0000448A  2F03      7295          move.l    D3,-(A7)
0000448C  2F05      7296          move.l    D5,-(A7)
0000448E  2F03      7297          move.l    D3,-(A7)
00004490  6100 ECE2 7298          bsr       ULDIV
00004494  2217      7299          move.l    (A7),D1
00004496  504F      7300          addq.w    #8,A7
00004498  2F01      7301          move.l    D1,-(A7)
0000449A  2F02      7302          move.l    D2,-(A7)
0000449C  61C4      7303          bsr       @itoa_convert
0000449E  DEFC 000C 7304          add.w     #12,A7
000044A2  2400      7305          move.l    D0,D2
                    7306   @itoa_convert_1:
000044A4  0C84 0000 7307          cmp.l     #9,D4
000044A8  0009      
000044AA  6E0A      7308          bgt.s     @itoa_convert_3
000044AC  2004      7309          move.l    D4,D0
000044AE  0680 0000 7310          add.l     #48,D0
000044B2  0030      
000044B4  600E      7311          bra.s     @itoa_convert_4
                    7312   @itoa_convert_3:
000044B6  2004      7313          move.l    D4,D0
000044B8  0680 0000 7314          add.l     #97,D0
000044BC  0061      
000044BE  0480 0000 7315          sub.l     #10,D0
000044C2  000A      
                    7316   @itoa_convert_4:
000044C4  2042      7317          move.l    D2,A0
000044C6  1080      7318          move.b    D0,(A0)
000044C8  2002      7319          move.l    D2,D0
000044CA  5280      7320          addq.l    #1,D0
000044CC  4CDF 003C 7321          movem.l   (A7)+,D2/D3/D4/D5
000044D0  4E5E      7322          unlk      A6
000044D2  4E75      7323          rts
                    7324   _ltoa:
000044D4  4E56 0000 7325          link      A6,#0
000044D8  48E7 3C00 7326          movem.l   D2/D3/D4/D5,-(A7)
000044DC  242E 0008 7327          move.l    8(A6),D2
000044E0  262E 000C 7328          move.l    12(A6),D3
000044E4  2A2E 0010 7329          move.l    16(A6),D5
000044E8  2803      7330          move.l    D3,D4
000044EA  0C85 0000 7331          cmp.l     #2,D5
000044EE  0002      
000044F0  6D08      7332          blt.s     ltoa_3
000044F2  0C85 0000 7333          cmp.l     #36,D5
000044F6  0024      
000044F8  6F06      7334          ble.s     ltoa_1
                    7335   ltoa_3:
000044FA  2003      7336          move.l    D3,D0
000044FC  6000 0052 7337          bra       ltoa_4
                    7338   ltoa_1:
00004500  0C85 0000 7339          cmp.l     #10,D5
00004504  000A      
00004506  6600 0032 7340          bne       ltoa_5
0000450A  0C82 0000 7341          cmp.l     #0,D2
0000450E  0000      
00004510  6C28      7342          bge.s     ltoa_5
00004512  2002      7343          move.l    D2,D0
00004514  4480      7344          neg.l     D0
00004516  2400      7345          move.l    D0,D2
00004518  0C82 0000 7346          cmp.l     #0,D2
0000451C  0000      
0000451E  6C12      7347          bge.s     ltoa_7
00004520  4879 0000 7348          pea       @itoa_1
00004524  5B34      
00004526  2F03      7349          move.l    D3,-(A7)
00004528  6100 EC3A 7350          bsr       _strcpy
0000452C  504F      7351          addq.w    #8,A7
0000452E  2003      7352          move.l    D3,D0
00004530  601E      7353          bra.s     ltoa_4
                    7354   ltoa_7:
00004532  2044      7355          move.l    D4,A0
00004534  5284      7356          addq.l    #1,D4
00004536  10BC 002D 7357          move.b    #45,(A0)
                    7358   ltoa_5:
0000453A  2F05      7359          move.l    D5,-(A7)
0000453C  2F02      7360          move.l    D2,-(A7)
0000453E  2F04      7361          move.l    D4,-(A7)
00004540  6100 FF20 7362          bsr       @itoa_convert
00004544  DEFC 000C 7363          add.w     #12,A7
00004548  2800      7364          move.l    D0,D4
0000454A  2044      7365          move.l    D4,A0
0000454C  4210      7366          clr.b     (A0)
0000454E  2003      7367          move.l    D3,D0
                    7368   ltoa_4:
00004550  4CDF 003C 7369          movem.l   (A7)+,D2/D3/D4/D5
00004554  4E5E      7370          unlk      A6
00004556  4E75      7371          rts
                    7372   _ultoa:
00004558  4E56 0000 7373          link      A6,#0
0000455C  48E7 3800 7374          movem.l   D2/D3/D4,-(A7)
00004560  262E 0010 7375          move.l    16(A6),D3
00004564  282E 000C 7376          move.l    12(A6),D4
00004568  2404      7377          move.l    D4,D2
0000456A  0C83 0000 7378          cmp.l     #2,D3
0000456E  0002      
00004570  6D08      7379          blt.s     ultoa_3
00004572  0C83 0000 7380          cmp.l     #36,D3
00004576  0024      
00004578  6F04      7381          ble.s     ultoa_1
                    7382   ultoa_3:
0000457A  2004      7383          move.l    D4,D0
0000457C  6018      7384          bra.s     ultoa_4
                    7385   ultoa_1:
0000457E  2F03      7386          move.l    D3,-(A7)
00004580  2F2E 0008 7387          move.l    8(A6),-(A7)
00004584  2F02      7388          move.l    D2,-(A7)
00004586  6100 FEDA 7389          bsr       @itoa_convert
0000458A  DEFC 000C 7390          add.w     #12,A7
0000458E  2400      7391          move.l    D0,D2
00004590  2042      7392          move.l    D2,A0
00004592  4210      7393          clr.b     (A0)
00004594  2004      7394          move.l    D4,D0
                    7395   ultoa_4:
00004596  4CDF 001C 7396          movem.l   (A7)+,D2/D3/D4
0000459A  4E5E      7397          unlk      A6
0000459C  4E75      7398          rts
                    7399   _itoa:
0000459E  4E56 0000 7400          link      A6,#0
000045A2  2F2E 0010 7401          move.l    16(A6),-(A7)
000045A6  2F2E 000C 7402          move.l    12(A6),-(A7)
000045AA  2F2E 0008 7403          move.l    8(A6),-(A7)
000045AE  6100 FF24 7404          bsr       _ltoa
000045B2  DEFC 000C 7405          add.w     #12,A7
000045B6  4E5E      7406          unlk      A6
000045B8  4E75      7407          rts
                    7408   _strlen:
000045BA  206F 0004 7409          move.l    (4,A7),A0
000045BE  2248      7410          move.l    A0,A1
                    7411   strlen_1:
000045C0  4A19      7412          tst.b     (A1)+
000045C2  66FC      7413          bne       strlen_1
000045C4  2009      7414          move.l    A1,D0
000045C6  9088      7415          sub.l     A0,D0
000045C8  5380      7416          subq.l    #1,D0
000045CA  4E75      7417          rts
                    7418          section   const
                    7419   
                    7420   @m68kde~1_1:
000045CC  0D0A 00   7421          dc.b      13,10,0
                    7422   @m68kde~1_2:
000045D0  0D53 7769 7423          dc.b      13,83,119,105,116,99,104,101,115,32,83,87,91
000045D4  7463 6865 
000045D8  7320 5357 
000045DC  5B        
000045DD  372D 305D 7424          dc.b      55,45,48,93,32,61,32,0
000045E1  203D 2000 
                    7425   @m68kde~1_3:
000045E6  3000      7426          dc.b      48,0
                    7427   @m68kde~1_4:
000045E8  3100      7428          dc.b      49,0
                    7429   @m68kde~1_5:
000045EA  0D0A 4475 7430          dc.b      13,10,68,117,109,112,32,77,101,109,111,114,121
000045EE  6D70 204D 
000045F2  656D 6F72 
000045F6  79        
000045F7  2042 6C6F 7431          dc.b      32,66,108,111,99,107,58,32,60,69,83,67,62,32
000045FB  636B 3A20 
000045FF  3C45 5343 
00004603  3E20      
00004605  746F 2041 7432          dc.b      116,111,32,65,98,111,114,116,44,32,60,83,80
00004609  626F 7274 
0000460D  2C20 3C53 
00004611  50        
00004612  4143 453E 7433          dc.b      65,67,69,62,32,116,111,32,67,111,110,116,105
00004616  2074 6F20 
0000461A  436F 6E74 
0000461E  69        
0000461F  6E75 6500 7434          dc.b      110,117,101,0
                    7435   @m68kde~1_6:
00004624  0D0A 456E 7436          dc.b      13,10,69,110,116,101,114,32,83,116,97,114,116
00004628  7465 7220 
0000462C  5374 6172 
00004630  74        
00004631  2041 6464 7437          dc.b      32,65,100,100,114,101,115,115,58,32,0
00004635  7265 7373 
00004639  3A20 00   
                    7438   @m68kde~1_7:
0000463C  0D0A 2530 7439          dc.b      13,10,37,48,56,120,32,0
00004640  3878 2000 
                    7440   @m68kde~1_8:
00004644  2530 3258 7441          dc.b      37,48,50,88,0
00004648  00        
                    7442   @m68kde~1_9:
0000464A  2020 00   7443          dc.b      32,32,0
                    7444   @m68kde~1_10:
0000464E  0D0A 4669 7445          dc.b      13,10,70,105,108,108,32,77,101,109,111,114,121
00004652  6C6C 204D 
00004656  656D 6F72 
0000465A  79        
0000465B  2042 6C6F 7446          dc.b      32,66,108,111,99,107,0
0000465F  636B 00   
                    7447   @m68kde~1_11:
00004662  0D0A 456E 7448          dc.b      13,10,69,110,116,101,114,32,69,110,100,32,65
00004666  7465 7220 
0000466A  456E 6420 
0000466E  41        
0000466F  6464 7265 7449          dc.b      100,100,114,101,115,115,58,32,0
00004673  7373 3A20 
00004677  00        
                    7450   @m68kde~1_12:
00004678  0D0A 456E 7451          dc.b      13,10,69,110,116,101,114,32,70,105,108,108,32
0000467C  7465 7220 
00004680  4669 6C6C 
00004684  20        
00004685  4461 7461 7452          dc.b      68,97,116,97,58,32,0
00004689  3A20 00   
                    7453   @m68kde~1_13:
0000468C  0D0A 4669 7454          dc.b      13,10,70,105,108,108,105,110,103,32,65,100,100
00004690  6C6C 696E 
00004694  6720 4164 
00004698  64        
00004699  7265 7373 7455          dc.b      114,101,115,115,101,115,32,91,36,37,48,56,88
0000469D  6573 205B 
000046A1  2425 3038 
000046A5  58        
000046A6  202D 2024 7456          dc.b      32,45,32,36,37,48,56,88,93,32,119,105,116,104
000046AA  2530 3858 
000046AE  5D20 7769 
000046B2  7468      
000046B4  2024 2530 7457          dc.b      32,36,37,48,50,88,0
000046B8  3258 00   
                    7458   @m68kde~1_14:
000046BC  0D0A 5573 7459          dc.b      13,10,85,115,101,32,72,121,112,101,114,84,101
000046C0  6520 4879 
000046C4  7065 7254 
000046C8  65        
000046C9  726D 696E 7460          dc.b      114,109,105,110,97,108,32,116,111,32,83,101
000046CD  616C 2074 
000046D1  6F20 5365 
000046D5  6E64 2054 7461          dc.b      110,100,32,84,101,120,116,32,70,105,108,101
000046D9  6578 7420 
000046DD  4669 6C65 
000046E1  2028 2E68 7462          dc.b      32,40,46,104,101,120,41,13,10,0
000046E5  6578 290D 
000046E9  0A00      
                    7463   @m68kde~1_15:
000046EC  0D0A 4C6F 7464          dc.b      13,10,76,111,97,100,32,70,97,105,108,101,100
000046F0  6164 2046 
000046F4  6169 6C65 
000046F8  64        
000046F9  2061 7420 7465          dc.b      32,97,116,32,65,100,100,114,101,115,115,32,61
000046FD  4164 6472 
00004701  6573 7320 
00004705  3D        
00004706  205B 2425 7466          dc.b      32,91,36,37,48,56,88,93,13,10,0
0000470A  3038 585D 
0000470E  0D0A 00   
                    7467   @m68kde~1_16:
00004712  0D0A 5375 7468          dc.b      13,10,83,117,99,99,101,115,115,58,32,68,111
00004716  6363 6573 
0000471A  733A 2044 
0000471E  6F        
0000471F  776E 6C6F 7469          dc.b      119,110,108,111,97,100,101,100,32,37,100,32
00004723  6164 6564 
00004727  2025 6420 
0000472B  6279 7465 7470          dc.b      98,121,116,101,115,13,10,0
0000472F  730D 0A00 
                    7471   @m68kde~1_17:
00004734  0D0A 4578 7472          dc.b      13,10,69,120,97,109,105,110,101,32,97,110,100
00004738  616D 696E 
0000473C  6520 616E 
00004740  64        
00004741  2043 6861 7473          dc.b      32,67,104,97,110,103,101,32,77,101,109,111,114
00004745  6E67 6520 
00004749  4D65 6D6F 
0000474D  72        
0000474E  7900      7474          dc.b      121,0
                    7475   @m68kde~1_18:
00004750  0D0A 3C45 7476          dc.b      13,10,60,69,83,67,62,32,116,111,32,83,116,111
00004754  5343 3E20 
00004758  746F 2053 
0000475C  746F      
0000475E  702C 203C 7477          dc.b      112,44,32,60,83,80,65,67,69,62,32,116,111,32
00004762  5350 4143 
00004766  453E 2074 
0000476A  6F20      
0000476C  4164 7661 7478          dc.b      65,100,118,97,110,99,101,44,32,39,45,39,32,116
00004770  6E63 652C 
00004774  2027 2D27 
00004778  2074      
0000477A  6F20 476F 7479          dc.b      111,32,71,111,32,66,97,99,107,44,32,60,68,65
0000477E  2042 6163 
00004782  6B2C 203C 
00004786  4441      
00004788  5441 3E20 7480          dc.b      84,65,62,32,116,111,32,99,104,97,110,103,101
0000478C  746F 2063 
00004790  6861 6E67 
00004794  65        
00004795  00        7481          dc.b      0
                    7482   @m68kde~1_19:
00004796  0D0A 456E 7483          dc.b      13,10,69,110,116,101,114,32,65,100,100,114,101
0000479A  7465 7220 
0000479E  4164 6472 
000047A2  65        
000047A3  7373 3A20 7484          dc.b      115,115,58,32,0
000047A7  00        
                    7485   @m68kde~1_20:
000047A8  0D0A 5B25 7486          dc.b      13,10,91,37,48,56,120,93,32,58,32,37,48,50,120
000047AC  3038 785D 
000047B0  203A 2025 
000047B4  3032 78   
000047B7  2020 00   7487          dc.b      32,32,0
                    7488   @m68kde~1_21:
000047BA  0D0A 5761 7489          dc.b      13,10,87,97,114,110,105,110,103,32,67,104,97
000047BE  726E 696E 
000047C2  6720 4368 
000047C6  61        
000047C7  6E67 6520 7490          dc.b      110,103,101,32,70,97,105,108,101,100,58,32,87
000047CB  4661 696C 
000047CF  6564 3A20 
000047D3  57        
000047D4  726F 7465 7491          dc.b      114,111,116,101,32,91,37,48,50,120,93,44,32
000047D8  205B 2530 
000047DC  3278 5D2C 
000047E0  20        
000047E1  5265 6164 7492          dc.b      82,101,97,100,32,91,37,48,50,120,93,0
000047E5  205B 2530 
000047E9  3278 5D00 
                    7493   @m68kde~1_22:
000047EE  0D0A 4C6F 7494          dc.b      13,10,76,111,97,100,105,110,103,32,80,114,111
000047F2  6164 696E 
000047F6  6720 5072 
000047FA  6F        
000047FB  6772 616D 7495          dc.b      103,114,97,109,32,70,114,111,109,32,83,80,73
000047FF  2046 726F 
00004803  6D20 5350 
00004807  49        
00004808  2046 6C61 7496          dc.b      32,70,108,97,115,104,46,46,46,46,0
0000480C  7368 2E2E 
00004810  2E2E 00   
                    7497   @m68kde~1_23:
00004814  2425 3038 7498          dc.b      36,37,48,56,88,32,32,0
00004818  5820 2000 
                    7499   @m68kde~1_24:
0000481C  2000      7500          dc.b      32,0
                    7501   @m68kde~1_25:
0000481E  2E00      7502          dc.b      46,0
                    7503   @m68kde~1_26:
00004820  2563 00   7504          dc.b      37,99,0
                    7505   @m68kde~1_27:
00004824  00        7506          dc.b      0
                    7507   @m68kde~1_28:
00004826  0D0A 0D0A 7508          dc.b      13,10,13,10,32,68,48,32,61,32,36,37,48,56,88
0000482A  2044 3020 
0000482E  3D20 2425 
00004832  3038 58   
00004835  2020 4130 7509          dc.b      32,32,65,48,32,61,32,36,37,48,56,88,0
00004839  203D 2024 
0000483D  2530 3858 
00004841  00        
                    7510   @m68kde~1_29:
00004842  0D0A 2044 7511          dc.b      13,10,32,68,49,32,61,32,36,37,48,56,88,32,32
00004846  3120 3D20 
0000484A  2425 3038 
0000484E  5820 20   
00004851  4131 203D 7512          dc.b      65,49,32,61,32,36,37,48,56,88,0
00004855  2024 2530 
00004859  3858 00   
                    7513   @m68kde~1_30:
0000485C  0D0A 2044 7514          dc.b      13,10,32,68,50,32,61,32,36,37,48,56,88,32,32
00004860  3220 3D20 
00004864  2425 3038 
00004868  5820 20   
0000486B  4132 203D 7515          dc.b      65,50,32,61,32,36,37,48,56,88,0
0000486F  2024 2530 
00004873  3858 00   
                    7516   @m68kde~1_31:
00004876  0D0A 2044 7517          dc.b      13,10,32,68,51,32,61,32,36,37,48,56,88,32,32
0000487A  3320 3D20 
0000487E  2425 3038 
00004882  5820 20   
00004885  4133 203D 7518          dc.b      65,51,32,61,32,36,37,48,56,88,0
00004889  2024 2530 
0000488D  3858 00   
                    7519   @m68kde~1_32:
00004890  0D0A 2044 7520          dc.b      13,10,32,68,52,32,61,32,36,37,48,56,88,32,32
00004894  3420 3D20 
00004898  2425 3038 
0000489C  5820 20   
0000489F  4134 203D 7521          dc.b      65,52,32,61,32,36,37,48,56,88,0
000048A3  2024 2530 
000048A7  3858 00   
                    7522   @m68kde~1_33:
000048AA  0D0A 2044 7523          dc.b      13,10,32,68,53,32,61,32,36,37,48,56,88,32,32
000048AE  3520 3D20 
000048B2  2425 3038 
000048B6  5820 20   
000048B9  4135 203D 7524          dc.b      65,53,32,61,32,36,37,48,56,88,0
000048BD  2024 2530 
000048C1  3858 00   
                    7525   @m68kde~1_34:
000048C4  0D0A 2044 7526          dc.b      13,10,32,68,54,32,61,32,36,37,48,56,88,32,32
000048C8  3620 3D20 
000048CC  2425 3038 
000048D0  5820 20   
000048D3  4136 203D 7527          dc.b      65,54,32,61,32,36,37,48,56,88,0
000048D7  2024 2530 
000048DB  3858 00   
                    7528   @m68kde~1_35:
000048DE  0D0A 2044 7529          dc.b      13,10,32,68,55,32,61,32,36,37,48,56,88,32,32
000048E2  3720 3D20 
000048E6  2425 3038 
000048EA  5820 20   
000048ED  4137 203D 7530          dc.b      65,55,32,61,32,36,37,48,56,88,0
000048F1  2024 2530 
000048F5  3858 00   
                    7531   @m68kde~1_36:
000048F8  0D0A 0D0A 7532          dc.b      13,10,13,10,85,83,80,32,61,32,36,37,48,56,88
000048FC  5553 5020 
00004900  3D20 2425 
00004904  3038 58   
00004907  2020 2841 7533          dc.b      32,32,40,65,55,41,32,85,115,101,114,32,83,80
0000490B  3729 2055 
0000490F  7365 7220 
00004913  5350      
00004915  00        7534          dc.b      0
                    7535   @m68kde~1_37:
00004916  0D0A 5353 7536          dc.b      13,10,83,83,80,32,61,32,36,37,48,56,88,32,32
0000491A  5020 3D20 
0000491E  2425 3038 
00004922  5820 20   
00004925  2841 3729 7537          dc.b      40,65,55,41,32,83,117,112,101,114,118,105,115
00004929  2053 7570 
0000492D  6572 7669 
00004931  73        
00004932  6F72 2053 7538          dc.b      111,114,32,83,80,0
00004936  5000      
                    7539   @m68kde~1_38:
00004938  0D0A 2053 7540          dc.b      13,10,32,83,82,32,61,32,36,37,48,52,88,32,32
0000493C  5220 3D20 
00004940  2425 3034 
00004944  5820 20   
00004947  2000      7541          dc.b      32,0
                    7542   @m68kde~1_39:
0000494A  2020 205B 7543          dc.b      32,32,32,91,0
0000494E  00        
                    7544   @m68kde~1_40:
00004950  0D0A 2050 7545          dc.b      13,10,32,80,67,32,61,32,36,37,48,56,88,32,32
00004954  4320 3D20 
00004958  2425 3038 
0000495C  5820 20   
0000495F  00        7546          dc.b      0
                    7547   @m68kde~1_41:
00004960  5B40 2042 7548          dc.b      91,64,32,66,82,69,65,75,80,79,73,78,84,93,0
00004964  5245 414B 
00004968  504F 494E 
0000496C  545D 00   
                    7549   @m68kde~1_42:
00004970  0D0A 5750 7550          dc.b      13,10,87,80,37,100,32,61,32,37,115,0
00004974  2564 203D 
00004978  2025 7300 
                    7551   @m68kde~1_43:
0000497C  0D0A 0D0A 7552          dc.b      13,10,13,10,13,10,13,10,13,10,13,10,83,105,110
00004980  0D0A 0D0A 
00004984  0D0A 0D0A 
00004988  5369 6E   
0000498B  676C 6520 7553          dc.b      103,108,101,32,83,116,101,112,32,32,58,91,79
0000498F  5374 6570 
00004993  2020 3A5B 
00004997  4F        
00004998  4E5D 00   7554          dc.b      78,93,0
                    7555   @m68kde~1_44:
0000499C  0D0A 4272 7556          dc.b      13,10,66,114,101,97,107,32,80,111,105,110,116
000049A0  6561 6B20 
000049A4  506F 696E 
000049A8  74        
000049A9  7320 3A5B 7557          dc.b      115,32,58,91,68,105,115,97,98,108,101,100,93
000049AD  4469 7361 
000049B1  626C 6564 
000049B5  5D        
000049B6  00        7558          dc.b      0
                    7559   @m68kde~1_45:
000049B8  0D0A 5072 7560          dc.b      13,10,80,114,101,115,115,32,60,83,80,65,67,69
000049BC  6573 7320 
000049C0  3C53 5041 
000049C4  4345      
000049C6  3E20 746F 7561          dc.b      62,32,116,111,32,69,120,101,99,117,116,101,32
000049CA  2045 7865 
000049CE  6375 7465 
000049D2  20        
000049D3  4E65 7874 7562          dc.b      78,101,120,116,32,73,110,115,116,114,117,99
000049D7  2049 6E73 
000049DB  7472 7563 
000049DF  7469 6F6E 7563          dc.b      116,105,111,110,0
000049E3  00        
                    7564   @m68kde~1_46:
000049E4  0D0A 5072 7565          dc.b      13,10,80,114,101,115,115,32,60,69,83,67,62,32
000049E8  6573 7320 
000049EC  3C45 5343 
000049F0  3E20      
000049F2  746F 2052 7566          dc.b      116,111,32,82,101,115,117,109,101,32,80,114
000049F6  6573 756D 
000049FA  6520 5072 
000049FE  6F67 7261 7567          dc.b      111,103,114,97,109,0
00004A02  6D00      
                    7568   @m68kde~1_47:
00004A04  0D0A 496C 7569          dc.b      13,10,73,108,108,101,103,97,108,32,68,97,116
00004A08  6C65 6761 
00004A0C  6C20 4461 
00004A10  74        
00004A11  6120 5265 7570          dc.b      97,32,82,101,103,105,115,116,101,114,32,58,32
00004A15  6769 7374 
00004A19  6572 203A 
00004A1D  20        
00004A1E  5573 6520 7571          dc.b      85,115,101,32,68,48,45,68,55,46,46,46,46,46
00004A22  4430 2D44 
00004A26  372E 2E2E 
00004A2A  2E2E      
00004A2C  0D0A 00   7572          dc.b      13,10,0
                    7573   @m68kde~1_48:
00004A30  0D0A 4425 7574          dc.b      13,10,68,37,99,32,61,32,0
00004A34  6320 3D20 
00004A38  00        
                    7575   @m68kde~1_49:
00004A3A  0D0A 496C 7576          dc.b      13,10,73,108,108,101,103,97,108,32,65,100,100
00004A3E  6C65 6761 
00004A42  6C20 4164 
00004A46  64        
00004A47  7265 7373 7577          dc.b      114,101,115,115,32,82,101,103,105,115,116,101
00004A4B  2052 6567 
00004A4F  6973 7465 
00004A53  7220 3A20 7578          dc.b      114,32,58,32,85,115,101,32,65,48,45,65,55,46
00004A57  5573 6520 
00004A5B  4130 2D41 
00004A5F  372E      
00004A61  2E2E 2E2E 7579          dc.b      46,46,46,46,13,10,0
00004A65  0D0A 00   
                    7580   @m68kde~1_50:
00004A68  0D0A 4125 7581          dc.b      13,10,65,37,99,32,61,32,0
00004A6C  6320 3D20 
00004A70  00        
                    7582   @m68kde~1_51:
00004A72  0D0A 5573 7583          dc.b      13,10,85,115,101,114,32,83,80,32,61,32,0
00004A76  6572 2053 
00004A7A  5020 3D20 
00004A7E  00        
                    7584   @m68kde~1_52:
00004A80  0D0A 496C 7585          dc.b      13,10,73,108,108,101,103,97,108,32,82,101,103
00004A84  6C65 6761 
00004A88  6C20 5265 
00004A8C  67        
00004A8D  6973 7465 7586          dc.b      105,115,116,101,114,46,46,46,46,0
00004A91  722E 2E2E 
00004A95  2E00      
                    7587   @m68kde~1_53:
00004A98  0D0A 5379 7588          dc.b      13,10,83,121,115,116,101,109,32,83,80,32,61
00004A9C  7374 656D 
00004AA0  2053 5020 
00004AA4  3D        
00004AA5  2000      7589          dc.b      32,0
                    7590   @m68kde~1_54:
00004AA8  0D0A 5043 7591          dc.b      13,10,80,67,32,61,32,0
00004AAC  203D 2000 
                    7592   @m68kde~1_55:
00004AB0  0D0A 5352 7593          dc.b      13,10,83,82,32,61,32,0
00004AB4  203D 2000 
                    7594   @m68kde~1_56:
00004AB8  0D0A 496C 7595          dc.b      13,10,73,108,108,101,103,97,108,32,82,101,103
00004ABC  6C65 6761 
00004AC0  6C20 5265 
00004AC4  67        
00004AC5  6973 7465 7596          dc.b      105,115,116,101,114,58,32,85,115,101,32,65,48
00004AC9  723A 2055 
00004ACD  7365 2041 
00004AD1  30        
00004AD2  2D41 372C 7597          dc.b      45,65,55,44,32,68,48,45,68,55,44,32,83,83,80
00004AD6  2044 302D 
00004ADA  4437 2C20 
00004ADE  5353 50   
00004AE1  2C20 5553 7598          dc.b      44,32,85,83,80,44,32,80,67,32,111,114,32,83
00004AE5  502C 2050 
00004AE9  4320 6F72 
00004AED  2053      
00004AEF  520D 0A00 7599          dc.b      82,13,10,0
                    7600   @m68kde~1_57:
00004AF4  0D0A 0D0A 7601          dc.b      13,10,13,10,78,117,109,32,32,32,32,32,65,100
00004AF8  4E75 6D20 
00004AFC  2020 2020 
00004B00  4164      
00004B02  6472 6573 7602          dc.b      100,114,101,115,115,32,32,32,32,32,32,73,110
00004B06  7320 2020 
00004B0A  2020 2049 
00004B0E  6E        
00004B0F  7374 7275 7603          dc.b      115,116,114,117,99,116,105,111,110,0
00004B13  6374 696F 
00004B17  6E00      
                    7604   @m68kde~1_58:
00004B1A  0D0A 2D2D 7605          dc.b      13,10,45,45,45,32,32,32,32,32,45,45,45,45,45
00004B1E  2D20 2020 
00004B22  2020 2D2D 
00004B26  2D2D 2D   
00004B29  2D2D 2D2D 7606          dc.b      45,45,45,45,32,32,32,32,45,45,45,45,45,45,45
00004B2D  2020 2020 
00004B31  2D2D 2D2D 
00004B35  2D2D 2D   
00004B38  2D2D 2D2D 7607          dc.b      45,45,45,45,0
00004B3C  00        
                    7608   @m68kde~1_59:
00004B3E  0D0A 4E6F 7609          dc.b      13,10,78,111,32,66,114,101,97,107,80,111,105
00004B42  2042 7265 
00004B46  616B 506F 
00004B4A  69        
00004B4B  6E74 7320 7610          dc.b      110,116,115,32,83,101,116,0
00004B4F  5365 7400 
                    7611   @m68kde~1_60:
00004B54  0D0A 2533 7612          dc.b      13,10,37,51,100,32,32,32,32,32,36,37,48,56,120
00004B58  6420 2020 
00004B5C  2020 2425 
00004B60  3038 78   
00004B63  00        7613          dc.b      0
                    7614   @m68kde~1_61:
00004B64  0D0A 4E75 7615          dc.b      13,10,78,117,109,32,32,32,32,32,65,100,100,114
00004B68  6D20 2020 
00004B6C  2020 4164 
00004B70  6472      
00004B72  6573 7300 7616          dc.b      101,115,115,0
                    7617   @m68kde~1_62:
00004B76  0D0A 2D2D 7618          dc.b      13,10,45,45,45,32,32,32,32,32,45,45,45,45,45
00004B7A  2D20 2020 
00004B7E  2020 2D2D 
00004B82  2D2D 2D   
00004B85  2D2D 2D2D 7619          dc.b      45,45,45,45,0
00004B89  00        
                    7620   @m68kde~1_63:
00004B8A  0D0A 4E6F 7621          dc.b      13,10,78,111,32,87,97,116,99,104,80,111,105
00004B8E  2057 6174 
00004B92  6368 506F 
00004B96  69        
00004B97  6E74 7320 7622          dc.b      110,116,115,32,83,101,116,0
00004B9B  5365 7400 
                    7623   @m68kde~1_64:
00004BA0  0D0A 456E 7624          dc.b      13,10,69,110,116,101,114,32,66,114,101,97,107
00004BA4  7465 7220 
00004BA8  4272 6561 
00004BAC  6B        
00004BAD  2050 6F69 7625          dc.b      32,80,111,105,110,116,32,78,117,109,98,101,114
00004BB1  6E74 204E 
00004BB5  756D 6265 
00004BB9  72        
00004BBA  3A20 00   7626          dc.b      58,32,0
                    7627   @m68kde~1_65:
00004BBE  0D0A 496C 7628          dc.b      13,10,73,108,108,101,103,97,108,32,82,97,110
00004BC2  6C65 6761 
00004BC6  6C20 5261 
00004BCA  6E        
00004BCB  6765 203A 7629          dc.b      103,101,32,58,32,85,115,101,32,48,32,45,32,55
00004BCF  2055 7365 
00004BD3  2030 202D 
00004BD7  2037      
00004BD9  00        7630          dc.b      0
                    7631   @m68kde~1_66:
00004BDA  0D0A 4272 7632          dc.b      13,10,66,114,101,97,107,32,80,111,105,110,116
00004BDE  6561 6B20 
00004BE2  506F 696E 
00004BE6  74        
00004BE7  2043 6C65 7633          dc.b      32,67,108,101,97,114,101,100,46,46,46,46,46
00004BEB  6172 6564 
00004BEF  2E2E 2E2E 
00004BF3  2E        
00004BF4  0D0A 00   7634          dc.b      13,10,0
                    7635   @m68kde~1_67:
00004BF8  0D0A 4272 7636          dc.b      13,10,66,114,101,97,107,32,80,111,105,110,116
00004BFC  6561 6B20 
00004C00  506F 696E 
00004C04  74        
00004C05  2077 6173 7637          dc.b      32,119,97,115,110,39,116,32,83,101,116,46,46
00004C09  6E27 7420 
00004C0D  5365 742E 
00004C11  2E        
00004C12  2E2E 2E00 7638          dc.b      46,46,46,0
                    7639   @m68kde~1_68:
00004C16  0D0A 456E 7640          dc.b      13,10,69,110,116,101,114,32,87,97,116,99,104
00004C1A  7465 7220 
00004C1E  5761 7463 
00004C22  68        
00004C23  2050 6F69 7641          dc.b      32,80,111,105,110,116,32,78,117,109,98,101,114
00004C27  6E74 204E 
00004C2B  756D 6265 
00004C2F  72        
00004C30  3A20 00   7642          dc.b      58,32,0
                    7643   @m68kde~1_69:
00004C34  0D0A 5761 7644          dc.b      13,10,87,97,116,99,104,32,80,111,105,110,116
00004C38  7463 6820 
00004C3C  506F 696E 
00004C40  74        
00004C41  2043 6C65 7645          dc.b      32,67,108,101,97,114,101,100,46,46,46,46,46
00004C45  6172 6564 
00004C49  2E2E 2E2E 
00004C4D  2E        
00004C4E  0D0A 00   7646          dc.b      13,10,0
                    7647   @m68kde~1_70:
00004C52  0D0A 5761 7648          dc.b      13,10,87,97,116,99,104,32,80,111,105,110,116
00004C56  7463 6820 
00004C5A  506F 696E 
00004C5E  74        
00004C5F  2057 6173 7649          dc.b      32,87,97,115,32,110,111,116,32,83,101,116,46
00004C63  206E 6F74 
00004C67  2053 6574 
00004C6B  2E        
00004C6C  2E2E 2E2E 7650          dc.b      46,46,46,46,0
00004C70  00        
                    7651   @m68kde~1_71:
00004C72  0D0A 4E6F 7652          dc.b      13,10,78,111,32,70,82,69,69,32,66,114,101,97
00004C76  2046 5245 
00004C7A  4520 4272 
00004C7E  6561      
00004C80  6B20 506F 7653          dc.b      107,32,80,111,105,110,116,115,46,46,46,46,46
00004C84  696E 7473 
00004C88  2E2E 2E2E 
00004C8C  2E        
00004C8D  00        7654          dc.b      0
                    7655   @m68kde~1_72:
00004C8E  0D0A 4272 7656          dc.b      13,10,66,114,101,97,107,32,80,111,105,110,116
00004C92  6561 6B20 
00004C96  506F 696E 
00004C9A  74        
00004C9B  2041 6464 7657          dc.b      32,65,100,100,114,101,115,115,58,32,0
00004C9F  7265 7373 
00004CA3  3A20 00   
                    7658   @m68kde~1_73:
00004CA6  0D0A 4572 7659          dc.b      13,10,69,114,114,111,114,32,58,32,66,114,101
00004CAA  726F 7220 
00004CAE  3A20 4272 
00004CB2  65        
00004CB3  616B 2050 7660          dc.b      97,107,32,80,111,105,110,116,115,32,67,65,78
00004CB7  6F69 6E74 
00004CBB  7320 4341 
00004CBF  4E        
00004CC0  4E4F 5420 7661          dc.b      78,79,84,32,98,101,32,115,101,116,32,97,116
00004CC4  6265 2073 
00004CC8  6574 2061 
00004CCC  74        
00004CCD  204F 4444 7662          dc.b      32,79,68,68,32,97,100,100,114,101,115,115,101
00004CD1  2061 6464 
00004CD5  7265 7373 
00004CD9  65        
00004CDA  7300      7663          dc.b      115,0
                    7664   @m68kde~1_74:
00004CDC  0D0A 4572 7665          dc.b      13,10,69,114,114,111,114,32,58,32,66,114,101
00004CE0  726F 7220 
00004CE4  3A20 4272 
00004CE8  65        
00004CE9  616B 2050 7666          dc.b      97,107,32,80,111,105,110,116,115,32,67,65,78
00004CED  6F69 6E74 
00004CF1  7320 4341 
00004CF5  4E        
00004CF6  4E4F 5420 7667          dc.b      78,79,84,32,98,101,32,115,101,116,32,102,111
00004CFA  6265 2073 
00004CFE  6574 2066 
00004D02  6F        
00004D03  7220 524F 7668          dc.b      114,32,82,79,77,32,105,110,32,82,97,110,103
00004D07  4D20 696E 
00004D0B  2052 616E 
00004D0F  67        
00004D10  6520 3A20 7669          dc.b      101,32,58,32,91,36,48,45,36,48,48,48,48,55,70
00004D14  5B24 302D 
00004D18  2430 3030 
00004D1C  3037 46   
00004D1F  4646 5D00 7670          dc.b      70,70,93,0
                    7671   @m68kde~1_75:
00004D24  0D0A 4572 7672          dc.b      13,10,69,114,114,111,114,58,32,66,114,101,97
00004D28  726F 723A 
00004D2C  2042 7265 
00004D30  61        
00004D31  6B20 506F 7673          dc.b      107,32,80,111,105,110,116,32,65,108,114,101
00004D35  696E 7420 
00004D39  416C 7265 
00004D3D  6164 7920 7674          dc.b      97,100,121,32,69,120,105,115,116,115,32,97,116
00004D41  4578 6973 
00004D45  7473 2061 
00004D49  74        
00004D4A  2041 6464 7675          dc.b      32,65,100,100,114,101,115,115,32,58,32,37,48
00004D4E  7265 7373 
00004D52  203A 2025 
00004D56  30        
00004D57  3878 0D0A 7676          dc.b      56,120,13,10,0
00004D5B  00        
                    7677   @m68kde~1_76:
00004D5C  0D0A 4272 7678          dc.b      13,10,66,114,101,97,107,32,80,111,105,110,116
00004D60  6561 6B20 
00004D64  506F 696E 
00004D68  74        
00004D69  2053 6574 7679          dc.b      32,83,101,116,32,97,116,32,65,100,100,114,101
00004D6D  2061 7420 
00004D71  4164 6472 
00004D75  65        
00004D76  7373 3A20 7680          dc.b      115,115,58,32,91,36,37,48,56,120,93,0
00004D7A  5B24 2530 
00004D7E  3878 5D00 
                    7681   @m68kde~1_77:
00004D82  0D0A 4E6F 7682          dc.b      13,10,78,111,32,70,82,69,69,32,87,97,116,99
00004D86  2046 5245 
00004D8A  4520 5761 
00004D8E  7463      
00004D90  6820 506F 7683          dc.b      104,32,80,111,105,110,116,115,46,46,46,46,46
00004D94  696E 7473 
00004D98  2E2E 2E2E 
00004D9C  2E        
00004D9D  00        7684          dc.b      0
                    7685   @m68kde~1_78:
00004D9E  0D0A 5761 7686          dc.b      13,10,87,97,116,99,104,32,80,111,105,110,116
00004DA2  7463 6820 
00004DA6  506F 696E 
00004DAA  74        
00004DAB  2041 6464 7687          dc.b      32,65,100,100,114,101,115,115,58,32,0
00004DAF  7265 7373 
00004DB3  3A20 00   
                    7688   @m68kde~1_79:
00004DB6  0D0A 4572 7689          dc.b      13,10,69,114,114,111,114,58,32,87,97,116,99
00004DBA  726F 723A 
00004DBE  2057 6174 
00004DC2  63        
00004DC3  6820 506F 7690          dc.b      104,32,80,111,105,110,116,32,65,108,114,101
00004DC7  696E 7420 
00004DCB  416C 7265 
00004DCF  6164 7920 7691          dc.b      97,100,121,32,83,101,116,32,97,116,32,65,100
00004DD3  5365 7420 
00004DD7  6174 2041 
00004DDB  64        
00004DDC  6472 6573 7692          dc.b      100,114,101,115,115,32,58,32,37,48,56,120,13
00004DE0  7320 3A20 
00004DE4  2530 3878 
00004DE8  0D        
00004DE9  0A00      7693          dc.b      10,0
                    7694   @m68kde~1_80:
00004DEC  0D0A 5761 7695          dc.b      13,10,87,97,116,99,104,32,80,111,105,110,116
00004DF0  7463 6820 
00004DF4  506F 696E 
00004DF8  74        
00004DF9  2053 6574 7696          dc.b      32,83,101,116,32,97,116,32,65,100,100,114,101
00004DFD  2061 7420 
00004E01  4164 6472 
00004E05  65        
00004E06  7373 3A20 7697          dc.b      115,115,58,32,91,36,37,48,56,120,93,0
00004E0A  5B24 2530 
00004E0E  3878 5D00 
                    7698   @m68kde~1_81:
00004E12  0D0A 0D0A 7699          dc.b      13,10,13,10,13,10,13,10,64,66,82,69,65,75,80
00004E16  0D0A 0D0A 
00004E1A  4042 5245 
00004E1E  414B 50   
00004E21  4F49 4E54 7700          dc.b      79,73,78,84,0
00004E25  00        
                    7701   @m68kde~1_82:
00004E26  0D0A 5369 7702          dc.b      13,10,83,105,110,103,108,101,32,83,116,101,112
00004E2A  6E67 6C65 
00004E2E  2053 7465 
00004E32  70        
00004E33  203A 205B 7703          dc.b      32,58,32,91,79,78,93,0
00004E37  4F4E 5D00 
                    7704   @m68kde~1_83:
00004E3C  0D0A 4272 7705          dc.b      13,10,66,114,101,97,107,80,111,105,110,116,115
00004E40  6561 6B50 
00004E44  6F69 6E74 
00004E48  73        
00004E49  203A 205B 7706          dc.b      32,58,32,91,69,110,97,98,108,101,100,93,0
00004E4D  456E 6162 
00004E51  6C65 645D 
00004E55  00        
                    7707   @m68kde~1_84:
00004E56  0D0A 5072 7708          dc.b      13,10,80,114,101,115,115,32,60,69,83,67,62,32
00004E5A  6573 7320 
00004E5E  3C45 5343 
00004E62  3E20      
00004E64  746F 2052 7709          dc.b      116,111,32,82,101,115,117,109,101,32,85,115
00004E68  6573 756D 
00004E6C  6520 5573 
00004E70  6572 2050 7710          dc.b      101,114,32,80,114,111,103,114,97,109,13,10,0
00004E74  726F 6772 
00004E78  616D 0D0A 
00004E7C  00        
                    7711   @m68kde~1_85:
00004E7E  0D0A 556E 7712          dc.b      13,10,85,110,107,110,111,119,110,32,67,111,109
00004E82  6B6E 6F77 
00004E86  6E20 436F 
00004E8A  6D        
00004E8B  6D61 6E64 7713          dc.b      109,97,110,100,46,46,46,46,46,13,10,0
00004E8F  2E2E 2E2E 
00004E93  2E0D 0A00 
                    7714   @m68kde~1_86:
00004E98  0D0A 5072 7715          dc.b      13,10,80,114,111,103,114,97,109,32,69,110,100
00004E9C  6F67 7261 
00004EA0  6D20 456E 
00004EA4  64        
00004EA5  6564 2028 7716          dc.b      101,100,32,40,84,82,65,80,32,35,49,53,41,46
00004EA9  5452 4150 
00004EAD  2023 3135 
00004EB1  292E      
00004EB3  2E2E 2E00 7717          dc.b      46,46,46,0
                    7718   @m68kde~1_87:
00004EB8  0D0A 4B69 7719          dc.b      13,10,75,105,108,108,32,65,108,108,32,66,114
00004EBC  6C6C 2041 
00004EC0  6C6C 2042 
00004EC4  72        
00004EC5  6561 6B20 7720          dc.b      101,97,107,32,80,111,105,110,116,115,46,46,46
00004EC9  506F 696E 
00004ECD  7473 2E2E 
00004ED1  2E        
00004ED2  2879 2F6E 7721          dc.b      40,121,47,110,41,63,0
00004ED6  293F 00   
                    7722   @m68kde~1_88:
00004EDA  0D0A 4B69 7723          dc.b      13,10,75,105,108,108,32,65,108,108,32,87,97
00004EDE  6C6C 2041 
00004EE2  6C6C 2057 
00004EE6  61        
00004EE7  7463 6820 7724          dc.b      116,99,104,32,80,111,105,110,116,115,46,46,46
00004EEB  506F 696E 
00004EEF  7473 2E2E 
00004EF3  2E        
00004EF4  2879 2F6E 7725          dc.b      40,121,47,110,41,63,0
00004EF8  293F 00   
                    7726   @m68kde~1_89:
00004EFC  0D0A 2D2D 7727          dc.b      13,10,45,45,45,45,45,45,45,45,45,45,45,45,45
00004F00  2D2D 2D2D 
00004F04  2D2D 2D2D 
00004F08  2D2D 2D   
00004F0B  2D2D 2D2D 7728          dc.b      45,45,45,45,45,45,45,45,45,45,45,45,45,45,45
00004F0F  2D2D 2D2D 
00004F13  2D2D 2D2D 
00004F17  2D2D 2D   
00004F1A  2D2D 2D2D 7729          dc.b      45,45,45,45,45,45,45,45,45,45,45,45,45,45,45
00004F1E  2D2D 2D2D 
00004F22  2D2D 2D2D 
00004F26  2D2D 2D   
00004F29  2D2D 2D2D 7730          dc.b      45,45,45,45,45,45,45,45,45,45,45,45,45,45,45
00004F2D  2D2D 2D2D 
00004F31  2D2D 2D2D 
00004F35  2D2D 2D   
00004F38  2D2D 2D2D 7731          dc.b      45,45,45,45,45,45,0
00004F3C  2D2D 00   
                    7732   @m68kde~1_90:
00004F40  0D0A 2020 7733          dc.b      13,10,32,32,68,101,98,117,103,103,101,114,32
00004F44  4465 6275 
00004F48  6767 6572 
00004F4C  20        
00004F4D  436F 6D6D 7734          dc.b      67,111,109,109,97,110,100,32,83,117,109,109
00004F51  616E 6420 
00004F55  5375 6D6D 
00004F59  6172 7900 7735          dc.b      97,114,121,0
                    7736   @m68kde~1_91:
00004F5E  0D0A 2020 7737          dc.b      13,10,32,32,46,40,114,101,103,41,32,32,32,32
00004F62  2E28 7265 
00004F66  6729 2020 
00004F6A  2020      
00004F6C  2020 202D 7738          dc.b      32,32,32,45,32,67,104,97,110,103,101,32,82,101
00004F70  2043 6861 
00004F74  6E67 6520 
00004F78  5265      
00004F7A  6769 7374 7739          dc.b      103,105,115,116,101,114,115,58,32,101,46,103
00004F7E  6572 733A 
00004F82  2065 2E67 
00004F86  2041 302D 7740          dc.b      32,65,48,45,65,55,44,68,48,45,68,55,44,80,67
00004F8A  4137 2C44 
00004F8E  302D 4437 
00004F92  2C50 43   
00004F95  2C53 5350 7741          dc.b      44,83,83,80,44,85,83,80,44,83,82,0
00004F99  2C55 5350 
00004F9D  2C53 5200 
                    7742   @m68kde~1_92:
00004FA2  0D0A 2020 7743          dc.b      13,10,32,32,66,68,47,66,83,47,66,67,47,66,75
00004FA6  4244 2F42 
00004FAA  532F 4243 
00004FAE  2F42 4B   
00004FB1  2020 2D20 7744          dc.b      32,32,45,32,66,114,101,97,107,32,80,111,105
00004FB5  4272 6561 
00004FB9  6B20 506F 
00004FBD  69        
00004FBE  6E74 3A20 7745          dc.b      110,116,58,32,68,105,115,112,108,97,121,47,83
00004FC2  4469 7370 
00004FC6  6C61 792F 
00004FCA  53        
00004FCB  6574 2F43 7746          dc.b      101,116,47,67,108,101,97,114,47,75,105,108,108
00004FCF  6C65 6172 
00004FD3  2F4B 696C 
00004FD7  6C        
00004FD8  00        7747          dc.b      0
                    7748   @m68kde~1_93:
00004FDA  0D0A 2020 7749          dc.b      13,10,32,32,67,32,32,32,32,32,32,32,32,32,32
00004FDE  4320 2020 
00004FE2  2020 2020 
00004FE6  2020 20   
00004FE9  2020 2D20 7750          dc.b      32,32,45,32,67,111,112,121,32,80,114,111,103
00004FED  436F 7079 
00004FF1  2050 726F 
00004FF5  67        
00004FF6  7261 6D20 7751          dc.b      114,97,109,32,102,114,111,109,32,70,108,97,115
00004FFA  6672 6F6D 
00004FFE  2046 6C61 
00005002  73        
00005003  6820 746F 7752          dc.b      104,32,116,111,32,77,97,105,110,32,77,101,109
00005007  204D 6169 
0000500B  6E20 4D65 
0000500F  6D        
00005010  6F72 7900 7753          dc.b      111,114,121,0
                    7754   @m68kde~1_94:
00005014  0D0A 2020 7755          dc.b      13,10,32,32,68,32,32,32,32,32,32,32,32,32,32
00005018  4420 2020 
0000501C  2020 2020 
00005020  2020 20   
00005023  2020 2D20 7756          dc.b      32,32,45,32,68,117,109,112,32,77,101,109,111
00005027  4475 6D70 
0000502B  204D 656D 
0000502F  6F        
00005030  7279 2043 7757          dc.b      114,121,32,67,111,110,116,101,110,116,115,32
00005034  6F6E 7465 
00005038  6E74 7320 
0000503C  746F 2053 7758          dc.b      116,111,32,83,99,114,101,101,110,0
00005040  6372 6565 
00005044  6E00      
                    7759   @m68kde~1_95:
00005046  0D0A 2020 7760          dc.b      13,10,32,32,69,32,32,32,32,32,32,32,32,32,32
0000504A  4520 2020 
0000504E  2020 2020 
00005052  2020 20   
00005055  2020 2D20 7761          dc.b      32,32,45,32,69,110,116,101,114,32,83,116,114
00005059  456E 7465 
0000505D  7220 5374 
00005061  72        
00005062  696E 6720 7762          dc.b      105,110,103,32,105,110,116,111,32,77,101,109
00005066  696E 746F 
0000506A  204D 656D 
0000506E  6F72 7900 7763          dc.b      111,114,121,0
                    7764   @m68kde~1_96:
00005072  0D0A 2020 7765          dc.b      13,10,32,32,70,32,32,32,32,32,32,32,32,32,32
00005076  4620 2020 
0000507A  2020 2020 
0000507E  2020 20   
00005081  2020 2D20 7766          dc.b      32,32,45,32,70,105,108,108,32,77,101,109,111
00005085  4669 6C6C 
00005089  204D 656D 
0000508D  6F        
0000508E  7279 2077 7767          dc.b      114,121,32,119,105,116,104,32,68,97,116,97,0
00005092  6974 6820 
00005096  4461 7461 
0000509A  00        
                    7768   @m68kde~1_97:
0000509C  0D0A 2020 7769          dc.b      13,10,32,32,71,32,32,32,32,32,32,32,32,32,32
000050A0  4720 2020 
000050A4  2020 2020 
000050A8  2020 20   
000050AB  2020 2D20 7770          dc.b      32,32,45,32,71,111,32,80,114,111,103,114,97
000050AF  476F 2050 
000050B3  726F 6772 
000050B7  61        
000050B8  6D20 5374 7771          dc.b      109,32,83,116,97,114,116,105,110,103,32,97,116
000050BC  6172 7469 
000050C0  6E67 2061 
000050C4  74        
000050C5  2041 6464 7772          dc.b      32,65,100,100,114,101,115,115,58,32,36,37,48
000050C9  7265 7373 
000050CD  3A20 2425 
000050D1  30        
000050D2  3858 00   7773          dc.b      56,88,0
                    7774   @m68kde~1_98:
000050D6  0D0A 2020 7775          dc.b      13,10,32,32,76,32,32,32,32,32,32,32,32,32,32
000050DA  4C20 2020 
000050DE  2020 2020 
000050E2  2020 20   
000050E5  2020 2D20 7776          dc.b      32,32,45,32,76,111,97,100,32,80,114,111,103
000050E9  4C6F 6164 
000050ED  2050 726F 
000050F1  67        
000050F2  7261 6D20 7777          dc.b      114,97,109,32,40,46,72,69,88,32,102,105,108
000050F6  282E 4845 
000050FA  5820 6669 
000050FE  6C        
000050FF  6529 2066 7778          dc.b      101,41,32,102,114,111,109,32,76,97,112,116,111
00005103  726F 6D20 
00005107  4C61 7074 
0000510B  6F        
0000510C  7000      7779          dc.b      112,0
                    7780   @m68kde~1_99:
0000510E  0D0A 2020 7781          dc.b      13,10,32,32,77,32,32,32,32,32,32,32,32,32,32
00005112  4D20 2020 
00005116  2020 2020 
0000511A  2020 20   
0000511D  2020 2D20 7782          dc.b      32,32,45,32,77,101,109,111,114,121,32,69,120
00005121  4D65 6D6F 
00005125  7279 2045 
00005129  78        
0000512A  616D 696E 7783          dc.b      97,109,105,110,101,32,97,110,100,32,67,104,97
0000512E  6520 616E 
00005132  6420 4368 
00005136  61        
00005137  6E67 6500 7784          dc.b      110,103,101,0
                    7785   @m68kde~1_100:
0000513C  0D0A 2020 7786          dc.b      13,10,32,32,80,32,32,32,32,32,32,32,32,32,32
00005140  5020 2020 
00005144  2020 2020 
00005148  2020 20   
0000514B  2020 2D20 7787          dc.b      32,32,45,32,80,114,111,103,114,97,109,32,70
0000514F  5072 6F67 
00005153  7261 6D20 
00005157  46        
00005158  6C61 7368 7788          dc.b      108,97,115,104,32,77,101,109,111,114,121,32
0000515C  204D 656D 
00005160  6F72 7920 
00005164  7769 7468 7789          dc.b      119,105,116,104,32,85,115,101,114,32,80,114
00005168  2055 7365 
0000516C  7220 5072 
00005170  6F67 7261 7790          dc.b      111,103,114,97,109,0
00005174  6D00      
                    7791   @m68kde~1_101:
00005176  0D0A 2020 7792          dc.b      13,10,32,32,82,32,32,32,32,32,32,32,32,32,32
0000517A  5220 2020 
0000517E  2020 2020 
00005182  2020 20   
00005185  2020 2D20 7793          dc.b      32,32,45,32,68,105,115,112,108,97,121,32,54
00005189  4469 7370 
0000518D  6C61 7920 
00005191  36        
00005192  3830 3030 7794          dc.b      56,48,48,48,32,82,101,103,105,115,116,101,114
00005196  2052 6567 
0000519A  6973 7465 
0000519E  72        
0000519F  7300      7795          dc.b      115,0
                    7796   @m68kde~1_102:
000051A2  0D0A 2020 7797          dc.b      13,10,32,32,83,32,32,32,32,32,32,32,32,32,32
000051A6  5320 2020 
000051AA  2020 2020 
000051AE  2020 20   
000051B1  2020 2D20 7798          dc.b      32,32,45,32,84,111,103,103,108,101,32,79,78
000051B5  546F 6767 
000051B9  6C65 204F 
000051BD  4E        
000051BE  2F4F 4646 7799          dc.b      47,79,70,70,32,83,105,110,103,108,101,32,83
000051C2  2053 696E 
000051C6  676C 6520 
000051CA  53        
000051CB  7465 7020 7800          dc.b      116,101,112,32,77,111,100,101,0
000051CF  4D6F 6465 
000051D3  00        
                    7801   @m68kde~1_103:
000051D4  0D0A 2020 7802          dc.b      13,10,32,32,84,77,32,32,32,32,32,32,32,32,32
000051D8  544D 2020 
000051DC  2020 2020 
000051E0  2020 20   
000051E3  2020 2D20 7803          dc.b      32,32,45,32,84,101,115,116,32,77,101,109,111
000051E7  5465 7374 
000051EB  204D 656D 
000051EF  6F        
000051F0  7279 00   7804          dc.b      114,121,0
                    7805   @m68kde~1_104:
000051F4  0D0A 2020 7806          dc.b      13,10,32,32,84,83,32,32,32,32,32,32,32,32,32
000051F8  5453 2020 
000051FC  2020 2020 
00005200  2020 20   
00005203  2020 2D20 7807          dc.b      32,32,45,32,84,101,115,116,32,83,119,105,116
00005207  5465 7374 
0000520B  2053 7769 
0000520F  74        
00005210  6368 6573 7808          dc.b      99,104,101,115,58,32,83,87,55,45,48,0
00005214  3A20 5357 
00005218  372D 3000 
                    7809   @m68kde~1_105:
0000521C  0D0A 2020 7810          dc.b      13,10,32,32,84,68,32,32,32,32,32,32,32,32,32
00005220  5444 2020 
00005224  2020 2020 
00005228  2020 20   
0000522B  2020 2D20 7811          dc.b      32,32,45,32,84,101,115,116,32,68,105,115,112
0000522F  5465 7374 
00005233  2044 6973 
00005237  70        
00005238  6C61 7973 7812          dc.b      108,97,121,115,58,32,76,69,68,115,32,97,110
0000523C  3A20 4C45 
00005240  4473 2061 
00005244  6E        
00005245  6420 372D 7813          dc.b      100,32,55,45,83,101,103,109,101,110,116,0
00005249  5365 676D 
0000524D  656E 7400 
                    7814   @m68kde~1_106:
00005252  0D0A 2020 7815          dc.b      13,10,32,32,87,68,47,87,83,47,87,67,47,87,75
00005256  5744 2F57 
0000525A  532F 5743 
0000525E  2F57 4B   
00005261  2020 2D20 7816          dc.b      32,32,45,32,87,97,116,99,104,32,80,111,105,110
00005265  5761 7463 
00005269  6820 506F 
0000526D  696E      
0000526F  743A 2044 7817          dc.b      116,58,32,68,105,115,112,108,97,121,47,83,101
00005273  6973 706C 
00005277  6179 2F53 
0000527B  65        
0000527C  742F 436C 7818          dc.b      116,47,67,108,101,97,114,47,75,105,108,108,0
00005280  6561 722F 
00005284  4B69 6C6C 
00005288  00        
                    7819   @m68kde~1_107:
0000528A  0D0A 2300 7820          dc.b      13,10,35,0
                    7821   @m68kde~1_108:
0000528E  0D0A 5072 7822          dc.b      13,10,80,114,111,103,114,97,109,32,82,117,110
00005292  6F67 7261 
00005296  6D20 5275 
0000529A  6E        
0000529B  6E69 6E67 7823          dc.b      110,105,110,103,46,46,46,46,46,0
0000529F  2E2E 2E2E 
000052A3  2E00      
                    7824   @m68kde~1_109:
000052A6  0D0A 5072 7825          dc.b      13,10,80,114,101,115,115,32,60,82,69,83,69,84
000052AA  6573 7320 
000052AE  3C52 4553 
000052B2  4554      
000052B4  3E20 6275 7826          dc.b      62,32,98,117,116,116,111,110,32,60,75,101,121
000052B8  7474 6F6E 
000052BC  203C 4B65 
000052C0  79        
000052C1  303E 206F 7827          dc.b      48,62,32,111,110,32,68,69,49,32,116,111,32,115
000052C5  6E20 4445 
000052C9  3120 746F 
000052CD  2073      
000052CF  746F 7000 7828          dc.b      116,111,112,0
                    7829   @m68kde~1_110:
000052D4  0D0A 4572 7830          dc.b      13,10,69,114,114,111,114,58,32,80,114,101,115
000052D8  726F 723A 
000052DC  2050 7265 
000052E0  73        
000052E1  7320 2747 7831          dc.b      115,32,39,71,39,32,102,105,114,115,116,32,116
000052E5  2720 6669 
000052E9  7273 7420 
000052ED  74        
000052EE  6F20 7374 7832          dc.b      111,32,115,116,97,114,116,32,112,114,111,103
000052F2  6172 7420 
000052F6  7072 6F67 
000052FA  7261 6D00 7833          dc.b      114,97,109,0
                    7834   @m68kde~1_111:
000052FE  0D0A 5369 7835          dc.b      13,10,83,105,110,103,108,101,32,83,116,101,112
00005302  6E67 6C65 
00005306  2053 7465 
0000530A  70        
0000530B  2020 3A5B 7836          dc.b      32,32,58,91,79,78,93,0
0000530F  4F4E 5D00 
                    7837   @m68kde~1_112:
00005314  0D0A 5072 7838          dc.b      13,10,80,114,101,115,115,32,39,71,39,32,116
00005318  6573 7320 
0000531C  2747 2720 
00005320  74        
00005321  6F20 5472 7839          dc.b      111,32,84,114,97,99,101,32,80,114,111,103,114
00005325  6163 6520 
00005329  5072 6F67 
0000532D  72        
0000532E  616D 2066 7840          dc.b      97,109,32,102,114,111,109,32,97,100,100,114
00005332  726F 6D20 
00005336  6164 6472 
0000533A  6573 7320 7841          dc.b      101,115,115,32,36,37,48,56,120,46,46,46,46,46
0000533E  2425 3038 
00005342  782E 2E2E 
00005346  2E2E      
00005348  00        7842          dc.b      0
                    7843   @m68kde~1_113:
0000534A  0D0A 5075 7844          dc.b      13,10,80,117,115,104,32,60,82,69,83,69,84,32
0000534E  7368 203C 
00005352  5245 5345 
00005356  5420      
00005358  4275 7474 7845          dc.b      66,117,116,116,111,110,62,32,116,111,32,83,116
0000535C  6F6E 3E20 
00005360  746F 2053 
00005364  74        
00005365  6F70 2E2E 7846          dc.b      111,112,46,46,46,46,46,0
00005369  2E2E 2E00 
                    7847   @m68kde~1_114:
0000536E  0D0A 5369 7848          dc.b      13,10,83,105,110,103,108,101,32,83,116,101,112
00005372  6E67 6C65 
00005376  2053 7465 
0000537A  70        
0000537B  203A 205B 7849          dc.b      32,58,32,91,79,70,70,93,0
0000537F  4F46 465D 
00005383  00        
                    7850   @m68kde~1_115:
00005384  0D0A 4272 7851          dc.b      13,10,66,114,101,97,107,32,80,111,105,110,116
00005388  6561 6B20 
0000538C  506F 696E 
00005390  74        
00005391  7320 3A5B 7852          dc.b      115,32,58,91,69,110,97,98,108,101,100,93,0
00005395  456E 6162 
00005399  6C65 645D 
0000539D  00        
                    7853   @m68kde~1_116:
0000539E  0D0A 5072 7854          dc.b      13,10,80,114,101,115,115,32,60,69,83,67,62,32
000053A2  6573 7320 
000053A6  3C45 5343 
000053AA  3E20      
000053AC  746F 2052 7855          dc.b      116,111,32,82,101,115,117,109,101,32,85,115
000053B0  6573 756D 
000053B4  6520 5573 
000053B8  6572 2050 7856          dc.b      101,114,32,80,114,111,103,114,97,109,46,46,46
000053BC  726F 6772 
000053C0  616D 2E2E 
000053C4  2E        
000053C5  2E2E 00   7857          dc.b      46,46,0
                    7858   @m68kde~1_117:
000053C8  0D0A 5369 7859          dc.b      13,10,83,105,110,103,108,101,32,83,116,101,112
000053CC  6E67 6C65 
000053D0  2053 7465 
000053D4  70        
000053D5  2020 3A5B 7860          dc.b      32,32,58,91,79,70,70,93,0
000053D9  4F46 465D 
000053DD  00        
                    7861   @m68kde~1_118:
000053DE  0D0A 0D0A 7862          dc.b      13,10,13,10,80,114,111,103,114,97,109,32,65
000053E2  5072 6F67 
000053E6  7261 6D20 
000053EA  41        
000053EB  424F 5254 7863          dc.b      66,79,82,84,32,33,33,33,33,33,33,13,10,0
000053EF  2021 2121 
000053F3  2121 210D 
000053F7  0A00      
                    7864   @m68kde~1_119:
000053FA  2573 0D0A 7865          dc.b      37,115,13,10,0
000053FE  00        
                    7866   @m68kde~1_120:
00005400  0D0A 0D0A 7867          dc.b      13,10,13,10,80,114,111,103,114,97,109,32,65
00005404  5072 6F67 
00005408  7261 6D20 
0000540C  41        
0000540D  424F 5254 7868          dc.b      66,79,82,84,32,33,33,33,33,33,0
00005411  2021 2121 
00005415  2121 00   
                    7869   @m68kde~1_121:
00005418  0D0A 556E 7870          dc.b      13,10,85,110,104,97,110,100,108,101,100,32,73
0000541C  6861 6E64 
00005420  6C65 6420 
00005424  49        
00005425  6E74 6572 7871          dc.b      110,116,101,114,114,117,112,116,58,32,73,82
00005429  7275 7074 
0000542D  3A20 4952 
00005431  5125 6420 7872          dc.b      81,37,100,32,33,33,33,33,33,0
00005435  2121 2121 
00005439  2100      
                    7873   @m68kde~1_122:
0000543C  4144 4452 7874          dc.b      65,68,68,82,69,83,83,32,69,82,82,79,82,58,32
00005440  4553 5320 
00005444  4552 524F 
00005448  523A 20   
0000544B  3136 206F 7875          dc.b      49,54,32,111,114,32,51,50,32,66,105,116,32,84
0000544F  7220 3332 
00005453  2042 6974 
00005457  2054      
00005459  7261 6E73 7876          dc.b      114,97,110,115,102,101,114,32,116,111,47,102
0000545D  6665 7220 
00005461  746F 2F66 
00005465  726F 6D20 7877          dc.b      114,111,109,32,97,110,32,79,68,68,32,65,100
00005469  616E 204F 
0000546D  4444 2041 
00005471  64        
00005472  6472 6573 7878          dc.b      100,114,101,115,115,46,46,46,46,0
00005476  732E 2E2E 
0000547A  2E00      
                    7879   @m68kde~1_123:
0000547C  556E 6861 7880          dc.b      85,110,104,97,110,100,108,101,100,32,84,114
00005480  6E64 6C65 
00005484  6420 5472 
00005488  6170 2021 7881          dc.b      97,112,32,33,33,33,33,33,0
0000548C  2121 2121 
00005490  00        
                    7882   @m68kde~1_124:
00005492  4255 5320 7883          dc.b      66,85,83,32,69,114,114,111,114,33,0
00005496  4572 726F 
0000549A  7221 00   
                    7884   @m68kde~1_125:
0000549E  4144 4452 7885          dc.b      65,68,68,82,69,83,83,32,69,114,114,111,114,33
000054A2  4553 5320 
000054A6  4572 726F 
000054AA  7221      
000054AC  00        7886          dc.b      0
                    7887   @m68kde~1_126:
000054AE  494C 4C45 7888          dc.b      73,76,76,69,71,65,76,32,73,78,83,84,82,85,67
000054B2  4741 4C20 
000054B6  494E 5354 
000054BA  5255 43   
000054BD  5449 4F4E 7889          dc.b      84,73,79,78,0
000054C1  00        
                    7890   @m68kde~1_127:
000054C2  4449 5649 7891          dc.b      68,73,86,73,68,69,32,66,89,32,90,69,82,79,0
000054C6  4445 2042 
000054CA  5920 5A45 
000054CE  524F 00   
                    7892   @m68kde~1_128:
000054D2  2743 484B 7893          dc.b      39,67,72,75,39,32,73,78,83,84,82,85,67,84,73
000054D6  2720 494E 
000054DA  5354 5255 
000054DE  4354 49   
000054E1  4F4E 00   7894          dc.b      79,78,0
                    7895   @m68kde~1_129:
000054E4  5452 4150 7896          dc.b      84,82,65,80,86,32,73,78,83,84,82,85,67,84,73
000054E8  5620 494E 
000054EC  5354 5255 
000054F0  4354 49   
000054F3  4F4E 00   7897          dc.b      79,78,0
                    7898   @m68kde~1_130:
000054F6  5052 4956 7899          dc.b      80,82,73,86,73,76,69,71,69,32,86,73,79,76,65
000054FA  494C 4547 
000054FE  4520 5649 
00005502  4F4C 41   
00005505  5449 4F4E 7900          dc.b      84,73,79,78,0
00005509  00        
                    7901   @m68kde~1_131:
0000550A  554E 494E 7902          dc.b      85,78,73,78,73,84,73,65,76,73,83,69,68,32,73
0000550E  4954 4941 
00005512  4C49 5345 
00005516  4420 49   
00005519  5251 00   7903          dc.b      82,81,0
                    7904   @m68kde~1_132:
0000551C  5350 5552 7905          dc.b      83,80,85,82,73,79,85,83,32,73,82,81,0
00005520  494F 5553 
00005524  2049 5251 
00005528  00        
                    7906   @m68kde~1_133:
0000552A  0D0A 5374 7907          dc.b      13,10,83,116,97,114,116,32,65,100,100,114,101
0000552E  6172 7420 
00005532  4164 6472 
00005536  65        
00005537  7373 2069 7908          dc.b      115,115,32,105,110,32,77,101,109,111,114,121
0000553B  6E20 4D65 
0000553F  6D6F 7279 
00005543  3A20 00   7909          dc.b      58,32,0
                    7910   @m68kde~1_134:
00005546  0D0A 456E 7911          dc.b      13,10,69,110,116,101,114,32,83,116,114,105,110
0000554A  7465 7220 
0000554E  5374 7269 
00005552  6E        
00005553  6720 2845 7912          dc.b      103,32,40,69,83,67,32,116,111,32,101,110,100
00005557  5343 2074 
0000555B  6F20 656E 
0000555F  64        
00005560  2920 3A00 7913          dc.b      41,32,58,0
                    7914   @m68kde~1_135:
00005564  0D0A 5265 7915          dc.b      13,10,82,101,97,100,105,110,103,32,65,100,100
00005568  6164 696E 
0000556C  6720 4164 
00005570  64        
00005571  7265 7373 7916          dc.b      114,101,115,115,101,115,32,91,36,37,48,56,88
00005575  6573 205B 
00005579  2425 3038 
0000557D  58        
0000557E  202D 2024 7917          dc.b      32,45,32,36,37,48,56,88,93,32,102,111,114,32
00005582  2530 3858 
00005586  5D20 666F 
0000558A  7220      
0000558C  2425 3032 7918          dc.b      36,37,48,50,88,0
00005590  5800      
                    7919   @m68kde~1_136:
00005592  0D0A 5661 7920          dc.b      13,10,86,97,108,117,101,32,105,110,99,111,114
00005596  6C75 6520 
0000559A  696E 636F 
0000559E  72        
0000559F  7265 6374 7921          dc.b      114,101,99,116,32,97,116,32,97,100,100,114,101
000055A3  2061 7420 
000055A7  6164 6472 
000055AB  65        
000055AC  7373 6573 7922          dc.b      115,115,101,115,32,36,37,48,56,88,32,46,46,46
000055B0  2024 2530 
000055B4  3858 202E 
000055B8  2E2E      
000055BA  2073 686F 7923          dc.b      32,115,104,111,117,108,100,32,98,101,32,36,37
000055BE  756C 6420 
000055C2  6265 2024 
000055C6  25        
000055C7  3032 5820 7924          dc.b      48,50,88,32,98,117,116,32,102,111,117,110,100
000055CB  6275 7420 
000055CF  666F 756E 
000055D3  64        
000055D4  2024 2530 7925          dc.b      32,36,37,48,50,88,0
000055D8  3258 00   
                    7926   @m68kde~1_137:
000055DC  0D0A 5661 7927          dc.b      13,10,86,97,108,117,101,58,32,36,37,48,50,88
000055E0  6C75 653A 
000055E4  2024 2530 
000055E8  3258      
000055EA  2066 6F75 7928          dc.b      32,102,111,117,110,100,32,97,116,32,65,100,100
000055EE  6E64 2061 
000055F2  7420 4164 
000055F6  64        
000055F7  7265 7373 7929          dc.b      114,101,115,115,58,32,36,37,48,56,88,0
000055FB  3A20 2425 
000055FF  3038 5800 
                    7930   @m68kde~1_138:
00005604  0D0A 5661 7931          dc.b      13,10,86,97,108,117,101,58,32,36,37,48,50,88
00005608  6C75 653A 
0000560C  2024 2530 
00005610  3258      
00005612  2024 2530 7932          dc.b      32,36,37,48,50,88,32,102,111,117,110,100,32
00005616  3258 2066 
0000561A  6F75 6E64 
0000561E  20        
0000561F  6174 2041 7933          dc.b      97,116,32,65,100,100,114,101,115,115,58,32,36
00005623  6464 7265 
00005627  7373 3A20 
0000562B  24        
0000562C  2530 3858 7934          dc.b      37,48,56,88,32,97,110,100,32,36,37,48,56,88
00005630  2061 6E64 
00005634  2024 2530 
00005638  3858      
0000563A  00        7935          dc.b      0
                    7936   @m68kde~1_139:
0000563C  0D0A 5661 7937          dc.b      13,10,86,97,108,117,101,58,32,36,37,48,50,88
00005640  6C75 653A 
00005644  2024 2530 
00005648  3258      
0000564A  2024 2530 7938          dc.b      32,36,37,48,50,88,32,36,37,48,50,88,32,36,37
0000564E  3258 2024 
00005652  2530 3258 
00005656  2024 25   
00005659  3032 5820 7939          dc.b      48,50,88,32,102,111,117,110,100,32,97,116,32
0000565D  666F 756E 
00005661  6420 6174 
00005665  20        
00005666  4164 6472 7940          dc.b      65,100,100,114,101,115,115,58,32,36,37,48,56
0000566A  6573 733A 
0000566E  2024 2530 
00005672  38        
00005673  5820 2D20 7941          dc.b      88,32,45,32,36,37,48,56,88,0
00005677  2425 3038 
0000567B  5800      
                    7942   @m68kde~1_140:
0000567E  0D0A 5465 7943          dc.b      13,10,84,101,115,116,32,112,97,115,115,101,100
00005682  7374 2070 
00005686  6173 7365 
0000568A  64        
0000568B  2073 7563 7944          dc.b      32,115,117,99,99,101,115,115,102,117,108,108
0000568F  6365 7373 
00005693  6675 6C6C 
00005697  792E 204E 7945          dc.b      121,46,32,78,111,116,101,58,32,116,104,101,32
0000569B  6F74 653A 
0000569F  2074 6865 
000056A3  20        
000056A4  7361 6D70 7946          dc.b      115,97,109,112,108,101,32,100,97,116,97,32,97
000056A8  6C65 2064 
000056AC  6174 6120 
000056B0  61        
000056B1  7265 2070 7947          dc.b      114,101,32,112,114,105,110,116,101,100,32,101
000056B5  7269 6E74 
000056B9  6564 2065 
000056BD  7665 7279 7948          dc.b      118,101,114,121,32,49,48,48,48,32,97,100,100
000056C1  2031 3030 
000056C5  3020 6164 
000056C9  64        
000056CA  7265 7373 7949          dc.b      114,101,115,115,101,115,0
000056CE  6573 00   
                    7950   @m68kde~1_141:
000056D2  0D0A 456E 7951          dc.b      13,10,69,110,116,101,114,32,109,101,109,111
000056D6  7465 7220 
000056DA  6D65 6D6F 
000056DE  7279 2074 7952          dc.b      114,121,32,116,101,115,116,32,99,111,110,102
000056E2  6573 7420 
000056E6  636F 6E66 
000056EA  6967 7572 7953          dc.b      105,103,117,114,97,116,105,111,110,40,49,32
000056EE  6174 696F 
000056F2  6E28 3120 
000056F6  2D20 6279 7954          dc.b      45,32,98,121,116,101,115,44,32,50,32,45,32,119
000056FA  7465 732C 
000056FE  2032 202D 
00005702  2077      
00005704  6F72 6473 7955          dc.b      111,114,100,115,44,32,51,32,45,32,108,111,110
00005708  2C20 3320 
0000570C  2D20 6C6F 
00005710  6E        
00005711  6720 776F 7956          dc.b      103,32,119,111,114,100,115,41,58,32,0
00005715  7264 7329 
00005719  3A20 00   
                    7957   @m68kde~1_142:
0000571C  0D0A 436F 7958          dc.b      13,10,67,111,110,102,105,103,117,114,97,116
00005720  6E66 6967 
00005724  7572 6174 
00005728  696F 6E20 7959          dc.b      105,111,110,32,105,110,118,97,108,105,100,32
0000572C  696E 7661 
00005730  6C69 6420 
00005734  2564 2C20 7960          dc.b      37,100,44,32,116,114,121,32,97,103,97,105,110
00005738  7472 7920 
0000573C  6167 6169 
00005740  6E        
00005741  00        7961          dc.b      0
                    7962   @m68kde~1_143:
00005742  0D0A 4368 7963          dc.b      13,10,67,104,111,111,115,101,32,98,101,116,119
00005746  6F6F 7365 
0000574A  2062 6574 
0000574E  77        
0000574F  6565 6E20 7964          dc.b      101,101,110,32,100,105,102,102,101,114,101,110
00005753  6469 6666 
00005757  6572 656E 
0000575B  7420 6D65 7965          dc.b      116,32,109,101,109,111,114,121,32,116,101,115
0000575F  6D6F 7279 
00005763  2074 6573 
00005767  7420 7061 7966          dc.b      116,32,112,97,116,116,101,114,110,115,40,49
0000576B  7474 6572 
0000576F  6E73 2831 
00005773  202D 2035 7967          dc.b      32,45,32,53,44,32,50,32,45,32,65,44,32,51,32
00005777  2C20 3220 
0000577B  2D20 412C 
0000577F  2033 20   
00005782  2D20 462C 7968          dc.b      45,32,70,44,32,52,32,45,32,48,41,58,32,0
00005786  2034 202D 
0000578A  2030 293A 
0000578E  2000      
                    7969   @m68kde~1_144:
00005790  0D0A 5061 7970          dc.b      13,10,80,97,116,116,101,114,110,32,105,110,118
00005794  7474 6572 
00005798  6E20 696E 
0000579C  76        
0000579D  616C 6964 7971          dc.b      97,108,105,100,44,32,116,114,121,32,97,103,97
000057A1  2C20 7472 
000057A5  7920 6167 
000057A9  61        
000057AA  696E 00   7972          dc.b      105,110,0
                    7973   @m68kde~1_145:
000057AE  0D0A 456E 7974          dc.b      13,10,69,110,116,101,114,32,115,116,97,114,116
000057B2  7465 7220 
000057B6  7374 6172 
000057BA  74        
000057BB  696E 6720 7975          dc.b      105,110,103,32,97,100,100,114,101,115,115,40
000057BF  6164 6472 
000057C3  6573 7328 
000057C7  2530 3858 7976          dc.b      37,48,56,88,32,45,32,37,48,56,88,32,105,110
000057CB  202D 2025 
000057CF  3038 5820 
000057D3  696E      
000057D5  636C 7573 7977          dc.b      99,108,117,115,105,118,101,41,58,32,0
000057D9  6976 6529 
000057DD  3A20 00   
                    7978   @m68kde~1_146:
000057E0  0D0A 496E 7979          dc.b      13,10,73,110,118,97,108,105,100,32,115,116,97
000057E4  7661 6C69 
000057E8  6420 7374 
000057EC  61        
000057ED  7274 696E 7980          dc.b      114,116,105,110,103,32,97,100,100,114,101,115
000057F1  6720 6164 
000057F5  6472 6573 
000057F9  732E 2E20 7981          dc.b      115,46,46,32,116,114,121,32,97,103,97,105,110
000057FD  7472 7920 
00005801  6167 6169 
00005805  6E        
00005806  00        7982          dc.b      0
                    7983   @m68kde~1_147:
00005808  0D0A 456E 7984          dc.b      13,10,69,110,116,101,114,32,101,110,100,105
0000580C  7465 7220 
00005810  656E 6469 
00005814  6E67 2061 7985          dc.b      110,103,32,97,100,100,114,101,115,115,40,37
00005818  6464 7265 
0000581C  7373 2825 
00005820  3038 5820 7986          dc.b      48,56,88,32,45,32,37,48,56,88,32,105,110,99
00005824  2D20 2530 
00005828  3858 2069 
0000582C  6E63      
0000582E  6C75 7369 7987          dc.b      108,117,115,105,118,101,41,58,32,0
00005832  7665 293A 
00005836  2000      
                    7988   @m68kde~1_148:
00005838  0D0A 456E 7989          dc.b      13,10,69,110,100,105,110,103,32,97,100,100,114
0000583C  6469 6E67 
00005840  2061 6464 
00005844  72        
00005845  6573 7320 7990          dc.b      101,115,115,32,111,117,116,32,111,102,32,98
00005849  6F75 7420 
0000584D  6F66 2062 
00005851  6F75 6E64 7991          dc.b      111,117,110,100,115,46,46,32,116,114,121,32
00005855  732E 2E20 
00005859  7472 7920 
0000585D  6167 6169 7992          dc.b      97,103,97,105,110,0
00005861  6E00      
                    7993   @m68kde~1_149:
00005864  0D0A 5772 7994          dc.b      13,10,87,114,105,116,105,110,103,32,116,111
00005868  6974 696E 
0000586C  6720 746F 
00005870  2053 5241 7995          dc.b      32,83,82,65,77,32,46,46,46,0
00005874  4D20 2E2E 
00005878  2E00      
                    7996   @m68kde~1_150:
0000587A  0D0A 2E2E 7997          dc.b      13,10,46,46,46,46,46,46,46,46,46,46,46,46,46
0000587E  2E2E 2E2E 
00005882  2E2E 2E2E 
00005886  2E2E 2E   
00005889  2E2E 2E2E 7998          dc.b      46,46,46,46,46,46,46,46,46,46,46,46,46,46,46
0000588D  2E2E 2E2E 
00005891  2E2E 2E2E 
00005895  2E2E 2E   
00005898  2E2E 2E2E 7999          dc.b      46,46,46,46,46,46,46,46,46,46,46,46,46,46,46
0000589C  2E2E 2E2E 
000058A0  2E2E 2E2E 
000058A4  2E2E 2E   
000058A7  2E2E 2E2E 8000          dc.b      46,46,46,46,46,46,46,46,46,46,46,46,46,46,46
000058AB  2E2E 2E2E 
000058AF  2E2E 2E2E 
000058B3  2E2E 2E   
000058B6  2E2E 2E2E 8001          dc.b      46,46,46,46,46,46,46,46,46,46,46,46,46,46,46
000058BA  2E2E 2E2E 
000058BE  2E2E 2E2E 
000058C2  2E2E 2E   
000058C5  2E2E 2E2E 8002          dc.b      46,46,46,46,46,46,46,46,46,46,46,46,46,46,46
000058C9  2E2E 2E2E 
000058CD  2E2E 2E2E 
000058D1  2E2E 2E   
000058D4  2E2E 2E2E 8003          dc.b      46,46,46,46,46,46,46,46,46,46,46,46,46,46,46
000058D8  2E2E 2E2E 
000058DC  2E2E 2E2E 
000058E0  2E2E 2E   
000058E3  2E2E 2E2E 8004          dc.b      46,46,46,46,46,0
000058E7  2E00      
                    8005   @m68kde~1_151:
000058EA  0D0A 4669 8006          dc.b      13,10,70,105,110,105,115,104,101,100,32,119
000058EE  6E69 7368 
000058F2  6564 2077 
000058F6  7269 7469 8007          dc.b      114,105,116,105,110,103,32,116,111,32,83,82
000058FA  6E67 2074 
000058FE  6F20 5352 
00005902  414D 202E 8008          dc.b      65,77,32,46,0
00005906  00        
                    8009   @m68kde~1_152:
00005908  0D0A 4368 8010          dc.b      13,10,67,104,101,99,107,32,83,82,65,77,32,99
0000590C  6563 6B20 
00005910  5352 414D 
00005914  2063      
00005916  6F6E 7465 8011          dc.b      111,110,116,101,110,116,0
0000591A  6E74 00   
                    8012   @m68kde~1_153:
0000591E  0D0A 5265 8013          dc.b      13,10,82,101,97,100,105,110,103,32,102,114,111
00005922  6164 696E 
00005926  6720 6672 
0000592A  6F        
0000592B  6D20 5352 8014          dc.b      109,32,83,82,65,77,32,46,46,46,0
0000592F  414D 202E 
00005933  2E2E 00   
                    8015   @m68kde~1_154:
00005936  0D0A 2E2E 8016          dc.b      13,10,46,46,46,46,46,46,46,46,46,46,46,46,46
0000593A  2E2E 2E2E 
0000593E  2E2E 2E2E 
00005942  2E2E 2E   
00005945  2E2E 2E2E 8017          dc.b      46,46,46,46,46,46,46,46,46,46,32,98,101,103
00005949  2E2E 2E2E 
0000594D  2E2E 2062 
00005951  6567      
00005953  696E 2072 8018          dc.b      105,110,32,114,101,97,100,105,110,103,0
00005957  6561 6469 
0000595B  6E67 00   
                    8019   @m68kde~1_155:
0000595E  0D0A 4669 8020          dc.b      13,10,70,105,110,105,115,104,101,100,32,114
00005962  6E69 7368 
00005966  6564 2072 
0000596A  6561 6469 8021          dc.b      101,97,100,105,110,103,32,102,114,111,109,32
0000596E  6E67 2066 
00005972  726F 6D20 
00005976  5352 414D 8022          dc.b      83,82,65,77,32,46,46,46,0
0000597A  202E 2E2E 
0000597E  00        
                    8023   @m68kde~1_156:
00005980  0D0A 656E 8024          dc.b      13,10,101,110,100,32,111,102,32,112,114,111
00005984  6420 6F66 
00005988  2070 726F 
0000598C  6772 616D 8025          dc.b      103,114,97,109,32,46,46,46,0
00005990  202E 2E2E 
00005994  00        
                    8026   @m68kde~1_157:
00005996  4445 312D 8027          dc.b      68,69,49,45,54,56,107,32,66,117,103,32,86,49
0000599A  3638 6B20 
0000599E  4275 6720 
000059A2  5631      
000059A4  2E37 3700 8028          dc.b      46,55,55,0
                    8029   @m68kde~1_158:
000059A8  436F 7079 8030          dc.b      67,111,112,121,114,105,103,104,116,32,40,67
000059AC  7269 6768 
000059B0  7420 2843 
000059B4  2920 504A 8031          dc.b      41,32,80,74,32,68,97,118,105,101,115,32,50,48
000059B8  2044 6176 
000059BC  6965 7320 
000059C0  3230      
000059C2  3136 00   8032          dc.b      49,54,0
                    8033   @m68kde~1_159:
000059C6  0D0A 5275 8034          dc.b      13,10,82,117,110,110,105,110,103,46,46,46,46
000059CA  6E6E 696E 
000059CE  672E 2E2E 
000059D2  2E        
000059D3  2E00      8035          dc.b      46,0
                    8036   @m68kde~1_160:
000059D6  5275 6E6E 8037          dc.b      82,117,110,110,105,110,103,46,46,46,46,46,0
000059DA  696E 672E 
000059DE  2E2E 2E2E 
000059E2  00        
                    8038   @m68kde~1_161:
000059E4  4279 3A20 8039          dc.b      66,121,58,32,80,74,32,68,97,118,105,101,115
000059E8  504A 2044 
000059EC  6176 6965 
000059F0  73        
000059F1  00        8040          dc.b      0
                    8041   @m68kde~1_162:
000059F2  0D0A 2573 8042          dc.b      13,10,37,115,0
000059F6  00        
                    8043   @m68kde~1_163:
000059F8  0D0A 4E61 8044          dc.b      13,10,78,97,110,99,121,32,77,97,107,97,114,32
000059FC  6E63 7920 
00005A00  4D61 6B61 
00005A04  7220      
00005A06  2D20 3333 8045          dc.b      45,32,51,51,52,54,52,57,49,56,32,97,110,100
00005A0A  3436 3439 
00005A0E  3138 2061 
00005A12  6E64      
00005A14  2053 7465 8046          dc.b      32,83,116,101,118,101,110,32,67,104,105,110
00005A18  7665 6E20 
00005A1C  4368 696E 
00005A20  202D 2034 8047          dc.b      32,45,32,52,48,49,48,56,53,52,48,0
00005A24  3031 3038 
00005A28  3534 3000 
                    8048          section   data
00005A2C            8049                   align
          0000 5A2C 8050   DataStart       equ       *
                    8051   
                    8052   *********************************************************************************************************
                    8053   * Data Section for Initialised Data - these will be placed in rom as constants and have to be copied
                    8054   * to ram as part of the CStart routine in this file
                    8055   *********************************************************************************************************
                    8056   
                    8057   @vsscanf_bufx:
00005A2C  0B00 0546 8058          dc.l      @vsscanf_buf
                    8059   @vsscanf_1:
00005A30  0A00      8060          dc.b      10,0
                    8061   __ctype:
00005A32  0040 4040 8062          dc.b      0,64,64,64,64,64,64,64,64,64,80,80,80,80,80
00005A36  4040 4040 
00005A3A  4040 5050 
00005A3E  5050 50   
00005A41  4040 4040 8063          dc.b      64,64,64,64,64,64,64,64,64,64,64,64,64,64,64
00005A45  4040 4040 
00005A49  4040 4040 
00005A4D  4040 40   
00005A50  4040 40D0 8064          dc.b      64,64,64,208,160,160,160,160,160,160,160,160
00005A54  A0A0 A0A0 
00005A58  A0A0 A0A0 
00005A5C  A0A0 A0A0 8065          dc.b      160,160,160,160,160,160,160,140,140,140,140
00005A60  A0A0 A08C 
00005A64  8C8C 8C   
00005A67  8C8C 8C8C 8066          dc.b      140,140,140,140,140,140,160,160,160,160,160
00005A6B  8C8C A0A0 
00005A6F  A0A0 A0   
00005A72  A0A0 8A8A 8067          dc.b      160,160,138,138,138,138,138,138,130,130,130
00005A76  8A8A 8A8A 
00005A7A  8282 82   
00005A7D  8282 8282 8068          dc.b      130,130,130,130,130,130,130,130,130,130,130
00005A81  8282 8282 
00005A85  8282 82   
00005A88  8282 8282 8069          dc.b      130,130,130,130,130,130,160,160,160,160,160
00005A8C  8282 A0A0 
00005A90  A0A0 A0   
00005A93  A089 8989 8070          dc.b      160,137,137,137,137,137,137,129,129,129,129
00005A97  8989 8981 
00005A9B  8181 81   
00005A9E  8181 8181 8071          dc.b      129,129,129,129,129,129,129,129,129,129,129
00005AA2  8181 8181 
00005AA6  8181 81   
00005AA9  8181 8181 8072          dc.b      129,129,129,129,129,160,160,160,160,64,0,0,0
00005AAD  81A0 A0A0 
00005AB1  A040 0000 
00005AB5  00        
00005AB6  0000 0000 8073          dc.b      0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
00005ABA  0000 0000 
00005ABE  0000 0000 
00005AC2  0000 0000 
00005AC6  0000 0000 
00005ACA  0000      
00005ACC  0000 0000 8074          dc.b      0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
00005AD0  0000 0000 
00005AD4  0000 0000 
00005AD8  0000 0000 
00005ADC  0000 0000 
00005AE0  0000      
00005AE2  0000 0000 8075          dc.b      0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
00005AE6  0000 0000 
00005AEA  0000 0000 
00005AEE  0000 0000 
00005AF2  0000 0000 
00005AF6  0000      
00005AF8  0000 0000 8076          dc.b      0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
00005AFC  0000 0000 
00005B00  0000 0000 
00005B04  0000 0000 
00005B08  0000 0000 
00005B0C  0000      
00005B0E  0000 0000 8077          dc.b      0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
00005B12  0000 0000 
00005B16  0000 0000 
00005B1A  0000 0000 
00005B1E  0000 0000 
00005B22  0000      
00005B24  0000 0000 8078          dc.b      0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
00005B28  0000 0000 
00005B2C  0000 0000 
00005B30  0000 00   
                    8079   @itoa_1:
00005B34  2D32 3134 8080          dc.b      45,50,49,52,55,52,56,51,54,52,56,0
00005B38  3734 3833 
00005B3C  3634 3800 
                    8081          section   bss
00005B40            8082                   align
          0000 5B40 8083   DataEnd         equ     *                       this label will equate to the address of the last byte of global variable in it
                    8084   
                    8085   *********************************************************************************************************
                    8086   * Section for Uninitialised Data held in ROM as constants
                    8087   *********************************************************************************************************
                    8088   
0B000000            8089                   org     RamVectorTable          Ram based vector table must be stored here otherwise InstallException Handler will not work
          0000 0114 8090   DataLength      equ     DataEnd-DataStart       length of data needed to copy to Ram on bootup
                    8091   
                    8092   
0B000000            8093   bss             org       bss
                    8094   
                    8095   *********************************************************************************************************
                    8096   * Build a ram based vector table for interrupts so we can install our own Exception Handlers in C code at run time
                    8097   * install the exception handler using the C function InstallExceptionHandler()
                    8098   *********************************************************************************************************
                    8099   
                    8100   
                    8101   
0B000000            8102   VInitialSP       ds.l    1      dummy as we can't really install a handler for this
0B000004            8103   VInitialPC       ds.l    1      dummy as we can't reallin install a handler for this
0B000008            8104   VBusError        ds.l    1      storage for address of Bus Error Handler
0B00000C            8105   VAddressError    ds.l    1      storage for address of Address Error Handler
0B000010            8106   VIllegalInstr    ds.l    1      storage for address of Illegal Instruction handler
0B000014            8107   VDividebyZero    ds.l    1      storage for address of divide by zero handler
0B000018            8108   VCheck           ds.l    1      ditto
0B00001C            8109   VTrapV           ds.l    1      ditto
0B000020            8110   VPrivilege       ds.l    1      ditto
0B000024            8111   VTrace           ds.l    1
0B000028            8112   VLine1010emul    ds.l    1
0B00002C            8113   VLine1111emul    ds.l    1
0B000030            8114   VUnassigned1     ds.l    1
0B000034            8115   VUnassigned2     ds.l    1
0B000038            8116   VUnassigned3     ds.l    1
0B00003C            8117   VUninit_IRQ      ds.l    1
0B000040            8118   VUnassigned4     ds.l    1
0B000044            8119   VUnassigned5     ds.l    1
0B000048            8120   VUnassigned6     ds.l    1
0B00004C            8121   VUnassigned7     ds.l    1
0B000050            8122   VUnassigned8     ds.l    1
0B000054            8123   VUnassigned9     ds.l    1
0B000058            8124   VUnassigned10    ds.l    1
0B00005C            8125   VUnassigned11    ds.l    1
0B000060            8126   VSpuriousIRQ     ds.l    1
                    8127   
                    8128   * Interrupt handlers Vector 25-31
0B000064            8129   VL1IRQ           ds.l    1       storage for 4 byte address of IRQ handler in your C program - install the handler using the C function InstallExceptionHandler()
0B000068            8130   VL2IRQ           ds.l    1       storage for 4 byte address of IRQ handler in your C program - install the handler using the C function InstallExceptionHandler()
0B00006C            8131   VL3IRQ           ds.l    1       storage for 4 byte address of IRQ handler in your C program - install the handler using the C function InstallExceptionHandler()
0B000070            8132   VL4IRQ           ds.l    1       storage for 4 byte address of IRQ handler in your C program - install the handler using the C function InstallExceptionHandler()
0B000074            8133   VL5IRQ           ds.l    1       storage for 4 byte address of IRQ handler in your C program - install the handler using the C function InstallExceptionHandler()
0B000078            8134   VL6IRQ           ds.l    1       storage for 4 byte address of IRQ handler in your C program - install the handler using the C function InstallExceptionHandler()
0B00007C            8135   VL7IRQ           ds.l    1       storage for 4 byte address of IRQ handler in your C program - install the handler using the C function InstallExceptionHandler()
                    8136   
                    8137   * Trap Handler vectors 32-47
0B000080            8138   VTrap0           ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
0B000084            8139   VTrap1           ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
0B000088            8140   VTrap2           ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
0B00008C            8141   VTrap3           ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
0B000090            8142   VTrap4           ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
0B000094            8143   VTrap5           ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
0B000098            8144   VTrap6           ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
0B00009C            8145   VTrap7           ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
0B0000A0            8146   VTrap8           ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
0B0000A4            8147   VTrap9           ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
0B0000A8            8148   VTrap10          ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
0B0000AC            8149   VTrap11          ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
0B0000B0            8150   VTrap12          ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
0B0000B4            8151   VTrap13          ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
0B0000B8            8152   VTrap14          ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
0B0000BC            8153   VTrap15          ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
                    8154   
                    8155   * the remaining exceptions are unassigned in the 68000 so no need to allocate storage for them here
                    8156   
                    8157   ***********************************************************************************************************
                    8158   * Other Variables
                    8159   ***********************************************************************************************************
                    8160   *__DebugA5       ds.l    1
                    8161   *__UserA5        ds.l    1
                    8162   
                    8163   ***********************************************************************************************************
0B0000C0            8164   __ungetbuf:     ds.l    1       ; ungetbuffer for stdio functions
0B0000C4            8165   __allocp:       ds.l    0       ; start of allocation units
0B0000C4            8166   __heap:         ds.l    0       ; pointers for malloc functions
                    8167   
                    8168   *__himem:       ds.l    himem            ; highest memory location + 1
                    8169   *__stklen:      ds.l    stklen           ; default stack size
                    8170   
                    8171   *********************************************************************************************************
                    8172   * Section for Heap
                    8173   *********************************************************************************************************
                    8174   
                    8175   _i:
0B0000C4            8176          ds.b      4
                    8177   _x:
0B0000C8            8178          ds.b      4
                    8179   _y:
0B0000CC            8180          ds.b      4
                    8181   _z:
0B0000D0            8182          ds.b      4
                    8183   _PortA_Count:
0B0000D4            8184          ds.b      4
                    8185   _Trace:
0B0000D8            8186          ds.b      4
                    8187   _GoFlag:
0B0000DC            8188          ds.b      4
                    8189   _Echo:
0B0000E0            8190          ds.b      4
                    8191   _d0:
0B0000E4            8192          ds.b      4
                    8193   _d1:
0B0000E8            8194          ds.b      4
                    8195   _d2:
0B0000EC            8196          ds.b      4
                    8197   _d3:
0B0000F0            8198          ds.b      4
                    8199   _d4:
0B0000F4            8200          ds.b      4
                    8201   _d5:
0B0000F8            8202          ds.b      4
                    8203   _d6:
0B0000FC            8204          ds.b      4
                    8205   _d7:
0B000100            8206          ds.b      4
                    8207   _a0:
0B000104            8208          ds.b      4
                    8209   _a1:
0B000108            8210          ds.b      4
                    8211   _a2:
0B00010C            8212          ds.b      4
                    8213   _a3:
0B000110            8214          ds.b      4
                    8215   _a4:
0B000114            8216          ds.b      4
                    8217   _a5:
0B000118            8218          ds.b      4
                    8219   _a6:
0B00011C            8220          ds.b      4
                    8221   _PC:
0B000120            8222          ds.b      4
                    8223   _SSP:
0B000124            8224          ds.b      4
                    8225   _USP:
0B000128            8226          ds.b      4
                    8227   _SR:
0B00012C            8228          ds.b      2
                    8229   _BreakPointAddress:
0B00012E            8230          ds.b      32
                    8231   _BreakPointInstruction:
0B00014E            8232          ds.b      16
                    8233   _BreakPointSetOrCleared:
0B00015E            8234          ds.b      32
                    8235   _InstructionSize:
0B00017E            8236          ds.b      4
                    8237   _WatchPointAddress:
0B000182            8238          ds.b      32
                    8239   _WatchPointSetOrCleared:
0B0001A2            8240          ds.b      32
                    8241   _WatchPointString:
0B0001C2            8242          ds.b      800
                    8243   _TempString:
0B0004E2            8244          ds.b      100
                    8245   @vsscanf_buf:
0B000546            8246          ds.b      80
                    8247          section   heap
0B000596            8248                   align
          0B00 0596 8249   bssEnd          equ *                   end of storage space for unitialised variables
                    8250   *                                       we have to copy all initialised variable from rom to here at startup
          0B00 0596 8251   heap   equ       *
0B000596            8252                    align
          0000 0000

Assembly errors: 0
