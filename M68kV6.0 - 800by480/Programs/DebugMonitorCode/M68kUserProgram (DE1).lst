680x0 MACRO ASSEMBLER   Version 5.00   (c) 1992-2005 Peter J. Fondse

Date: 27 Feb 2023      Time: 12:08:47          Source: C:\CPEN412\GITHUB_STEUP\M68KV6.0 - 800BY480\PROGRAMS\DEBUGMONITORCODE\M68KUSERPROGRAM (DE1).C

                       1   ; C:\CPEN412\GITHUB_STEUP\M68KV6.0 - 800BY480\PROGRAMS\DEBUGMONITORCODE\M68KUSERPROGRAM (DE1).C - Compiled by CC68K  Version 5.00 (c) 1991-2005  Peter J. Fondse
                       2   ; #include <stdio.h>
                       3   ; #include <string.h>
                       4   ; #include <ctype.h>
                       5   ; //IMPORTANT
                       6   ; //
                       7   ; // Uncomment one of the two #defines below
                       8   ; // Define StartOfExceptionVectorTable as 08030000 if running programs from sram or
                       9   ; // 0B000000 for running programs from dram
                      10   ; //
                      11   ; // In your labs, you will initially start by designing a system with SRam and later move to
                      12   ; // Dram, so these constants will need to be changed based on the version of the system you have
                      13   ; // building
                      14   ; //
                      15   ; // The working 68k system SOF file posted on canvas that you can use for your pre-lab
                      16   ; // is based around Dram so #define accordingly before building
                      17   ; #define StartOfExceptionVectorTable 0x08030000
                      18   ; //#define StartOfExceptionVectorTable 0x0B000000
                      19   ; /**********************************************************************************************
                      20   ; **	Parallel port addresses
                      21   ; **********************************************************************************************/
                      22   ; #define PortA   *(volatile unsigned char *)(0x00400000)
                      23   ; #define PortB   *(volatile unsigned char *)(0x00400002)
                      24   ; #define PortC   *(volatile unsigned char *)(0x00400004)
                      25   ; #define PortD   *(volatile unsigned char *)(0x00400006)
                      26   ; #define PortE   *(volatile unsigned char *)(0x00400008)
                      27   ; /*********************************************************************************************
                      28   ; **	Hex 7 seg displays port addresses
                      29   ; *********************************************************************************************/
                      30   ; #define HEX_A        *(volatile unsigned char *)(0x00400010)
                      31   ; #define HEX_B        *(volatile unsigned char *)(0x00400012)
                      32   ; #define HEX_C        *(volatile unsigned char *)(0x00400014)    // de2 only
                      33   ; #define HEX_D        *(volatile unsigned char *)(0x00400016)    // de2 only
                      34   ; /**********************************************************************************************
                      35   ; **	LCD display port addresses
                      36   ; **********************************************************************************************/
                      37   ; #define LCDcommand   *(volatile unsigned char *)(0x00400020)
                      38   ; #define LCDdata      *(volatile unsigned char *)(0x00400022)
                      39   ; /********************************************************************************************
                      40   ; **	Timer Port addresses
                      41   ; *********************************************************************************************/
                      42   ; #define Timer1Data      *(volatile unsigned char *)(0x00400030)
                      43   ; #define Timer1Control   *(volatile unsigned char *)(0x00400032)
                      44   ; #define Timer1Status    *(volatile unsigned char *)(0x00400032)
                      45   ; #define Timer2Data      *(volatile unsigned char *)(0x00400034)
                      46   ; #define Timer2Control   *(volatile unsigned char *)(0x00400036)
                      47   ; #define Timer2Status    *(volatile unsigned char *)(0x00400036)
                      48   ; #define Timer3Data      *(volatile unsigned char *)(0x00400038)
                      49   ; #define Timer3Control   *(volatile unsigned char *)(0x0040003A)
                      50   ; #define Timer3Status    *(volatile unsigned char *)(0x0040003A)
                      51   ; #define Timer4Data      *(volatile unsigned char *)(0x0040003C)
                      52   ; #define Timer4Control   *(volatile unsigned char *)(0x0040003E)
                      53   ; #define Timer4Status    *(volatile unsigned char *)(0x0040003E)
                      54   ; /*********************************************************************************************
                      55   ; **	RS232 port addresses
                      56   ; *********************************************************************************************/
                      57   ; #define RS232_Control     *(volatile unsigned char *)(0x00400040)
                      58   ; #define RS232_Status      *(volatile unsigned char *)(0x00400040)
                      59   ; #define RS232_TxData      *(volatile unsigned char *)(0x00400042)
                      60   ; #define RS232_RxData      *(volatile unsigned char *)(0x00400042)
                      61   ; #define RS232_Baud        *(volatile unsigned char *)(0x00400044)
                      62   ; /*********************************************************************************************
                      63   ; **	PIA 1 and 2 port addresses
                      64   ; *********************************************************************************************/
                      65   ; #define PIA1_PortA_Data     *(volatile unsigned char *)(0x00400050)         // combined data and data direction register share same address
                      66   ; #define PIA1_PortA_Control *(volatile unsigned char *)(0x00400052)
                      67   ; #define PIA1_PortB_Data     *(volatile unsigned char *)(0x00400054)         // combined data and data direction register share same address
                      68   ; #define PIA1_PortB_Control *(volatile unsigned char *)(0x00400056)
                      69   ; #define PIA2_PortA_Data     *(volatile unsigned char *)(0x00400060)         // combined data and data direction register share same address
                      70   ; #define PIA2_PortA_Control *(volatile unsigned char *)(0x00400062)
                      71   ; #define PIA2_PortB_data     *(volatile unsigned char *)(0x00400064)         // combined data and data direction register share same address
                      72   ; #define PIA2_PortB_Control *(volatile unsigned char *)(0x00400066)
                      73   ; /*********************************************************************************************************************************
                      74   ; (( DO NOT initialise global variables here, do it main even if you want 0
                      75   ; (( it's a limitation of the compiler
                      76   ; (( YOU HAVE BEEN WARNED
                      77   ; *********************************************************************************************************************************/
                      78   ; unsigned int i, x, y, z, PortA_Count;
                      79   ; unsigned char Timer1Count, Timer2Count, Timer3Count, Timer4Count ;
                      80   ; /*******************************************************************************************
                      81   ; ** Function Prototypes
                      82   ; *******************************************************************************************/
                      83   ; void Wait1ms(void);
                      84   ; void Wait3ms(void);
                      85   ; void Init_LCD(void) ;
                      86   ; void LCDOutchar(int c);
                      87   ; void LCDOutMess(char *theMessage);
                      88   ; void LCDClearln(void);
                      89   ; void LCDline1Message(char *theMessage);
                      90   ; void LCDline2Message(char *theMessage);
                      91   ; int sprintf(char *out, const char *format, ...) ;
                      92   ; void ReadMemory(char* StartRamPtr, char* EndRamPtr, unsigned char FillData, int config);
                      93   ; void FillMemory(char* StartRamPtr, char* EndRamPtr, unsigned char FillData, int config);
                      94   ; int Get7HexDigits(char one, char two, char three, char four, char five, char six, char seven);
                      95   ; int Get8HexDigits(char pat);
                      96   ; int Get4HexDigits(char pat);
                      97   ; int Get2HexDigits(char pat);
                      98   ; char xtod(int c);
                      99   ; /*****************************************************************************************
                     100   ; **	Interrupt service routine for Timers
                     101   ; **
                     102   ; **  Timers 1 - 4 share a common IRQ on the CPU  so this function uses polling to figure
                     103   ; **  out which timer is producing the interrupt
                     104   ; **
                     105   ; *****************************************************************************************/
                     106   ; void Timer_ISR()
                     107   ; {
                     108          section   code
                     109          xdef      _Timer_ISR
                     110   _Timer_ISR:
                     111   ; if(Timer1Status == 1) {         // Did Timer 1 produce the Interrupt?
00000000  1039 0040  112          move.b    4194354,D0
00000004  0032      
00000006  0C00 0001  113          cmp.b     #1,D0
0000000A  661A       114          bne.s     Timer_ISR_1
                     115   ; Timer1Control = 3;      	// reset the timer to clear the interrupt, enable interrupts and allow counter to run
0000000C  13FC 0003  116          move.b    #3,4194354
00000010  0040 0032 
                     117   ; PortA = Timer1Count++ ;     // increment an LED count on PortA with each tick of Timer 1
00000014  1039 0000  118          move.b    _Timer1Count.L,D0
00000018  1378      
0000001A  5239 0000  119          addq.b    #1,_Timer1Count.L
0000001E  1378      
00000020  13C0 0040  120          move.b    D0,4194304
00000024  0000      
                     121   Timer_ISR_1:
                     122   ; }
                     123   ; if(Timer2Status == 1) {         // Did Timer 2 produce the Interrupt?
00000026  1039 0040  124          move.b    4194358,D0
0000002A  0036      
0000002C  0C00 0001  125          cmp.b     #1,D0
00000030  661A       126          bne.s     Timer_ISR_3
                     127   ; Timer2Control = 3;      	// reset the timer to clear the interrupt, enable interrupts and allow counter to run
00000032  13FC 0003  128          move.b    #3,4194358
00000036  0040 0036 
                     129   ; PortC = Timer2Count++ ;     // increment an LED count on PortC with each tick of Timer 2
0000003A  1039 0000  130          move.b    _Timer2Count.L,D0
0000003E  137A      
00000040  5239 0000  131          addq.b    #1,_Timer2Count.L
00000044  137A      
00000046  13C0 0040  132          move.b    D0,4194308
0000004A  0004      
                     133   Timer_ISR_3:
                     134   ; }
                     135   ; if(Timer3Status == 1) {         // Did Timer 3 produce the Interrupt?
0000004C  1039 0040  136          move.b    4194362,D0
00000050  003A      
00000052  0C00 0001  137          cmp.b     #1,D0
00000056  661A       138          bne.s     Timer_ISR_5
                     139   ; Timer3Control = 3;      	// reset the timer to clear the interrupt, enable interrupts and allow counter to run
00000058  13FC 0003  140          move.b    #3,4194362
0000005C  0040 003A 
                     141   ; HEX_A = Timer3Count++ ;     // increment a HEX count on Port HEX_A with each tick of Timer 3
00000060  1039 0000  142          move.b    _Timer3Count.L,D0
00000064  137C      
00000066  5239 0000  143          addq.b    #1,_Timer3Count.L
0000006A  137C      
0000006C  13C0 0040  144          move.b    D0,4194320
00000070  0010      
                     145   Timer_ISR_5:
                     146   ; }
                     147   ; if(Timer4Status == 1) {         // Did Timer 4 produce the Interrupt?
00000072  1039 0040  148          move.b    4194366,D0
00000076  003E      
00000078  0C00 0001  149          cmp.b     #1,D0
0000007C  661A       150          bne.s     Timer_ISR_7
                     151   ; Timer4Control = 3;      	// reset the timer to clear the interrupt, enable interrupts and allow counter to run
0000007E  13FC 0003  152          move.b    #3,4194366
00000082  0040 003E 
                     153   ; HEX_B = Timer4Count++ ;     // increment a HEX count on HEX_B with each tick of Timer 4
00000086  1039 0000  154          move.b    _Timer4Count.L,D0
0000008A  137E      
0000008C  5239 0000  155          addq.b    #1,_Timer4Count.L
00000090  137E      
00000092  13C0 0040  156          move.b    D0,4194322
00000096  0012      
                     157   Timer_ISR_7:
00000098  4E75       158          rts
                     159   ; }
                     160   ; }
                     161   ; /*****************************************************************************************
                     162   ; **	Interrupt service routine for ACIA. This device has it's own dedicate IRQ level
                     163   ; **  Add your code here to poll Status register and clear interrupt
                     164   ; *****************************************************************************************/
                     165   ; void ACIA_ISR()
                     166   ; {}
                     167          xdef      _ACIA_ISR
                     168   _ACIA_ISR:
0000009A  4E75       169          rts
                     170   ; /***************************************************************************************
                     171   ; **	Interrupt service routine for PIAs 1 and 2. These devices share an IRQ level
                     172   ; **  Add your code here to poll Status register and clear interrupt
                     173   ; *****************************************************************************************/
                     174   ; void PIA_ISR()
                     175   ; {}
                     176          xdef      _PIA_ISR
                     177   _PIA_ISR:
0000009C  4E75       178          rts
                     179   ; /***********************************************************************************
                     180   ; **	Interrupt service routine for Key 2 on DE1 board. Add your own response here
                     181   ; ************************************************************************************/
                     182   ; void Key2PressISR()
                     183   ; {}
                     184          xdef      _Key2PressISR
                     185   _Key2PressISR:
0000009E  4E75       186          rts
                     187   ; /***********************************************************************************
                     188   ; **	Interrupt service routine for Key 1 on DE1 board. Add your own response here
                     189   ; ************************************************************************************/
                     190   ; void Key1PressISR()
                     191   ; {}
                     192          xdef      _Key1PressISR
                     193   _Key1PressISR:
000000A0  4E75       194          rts
                     195   ; /************************************************************************************
                     196   ; **   Delay Subroutine to give the 68000 something useless to do to waste 1 mSec
                     197   ; ************************************************************************************/
                     198   ; void Wait1ms(void)
                     199   ; {
                     200          xdef      _Wait1ms
                     201   _Wait1ms:
000000A2  2F02       202          move.l    D2,-(A7)
                     203   ; int  i ;
                     204   ; for(i = 0; i < 1000; i ++)
000000A4  4282       205          clr.l     D2
                     206   Wait1ms_1:
000000A6  0C82 0000  207          cmp.l     #1000,D2
000000AA  03E8      
000000AC  6C04       208          bge.s     Wait1ms_3
000000AE  5282       209          addq.l    #1,D2
000000B0  60F4       210          bra       Wait1ms_1
                     211   Wait1ms_3:
000000B2  241F       212          move.l    (A7)+,D2
000000B4  4E75       213          rts
                     214   ; ;
                     215   ; }
                     216   ; /************************************************************************************
                     217   ; **  Subroutine to give the 68000 something useless to do to waste 3 mSec
                     218   ; **************************************************************************************/
                     219   ; void Wait3ms(void)
                     220   ; {
                     221          xdef      _Wait3ms
                     222   _Wait3ms:
000000B6  2F02       223          move.l    D2,-(A7)
                     224   ; int i ;
                     225   ; for(i = 0; i < 3; i++)
000000B8  4282       226          clr.l     D2
                     227   Wait3ms_1:
000000BA  0C82 0000  228          cmp.l     #3,D2
000000BE  0003      
000000C0  6C08       229          bge.s     Wait3ms_3
                     230   ; Wait1ms() ;
000000C2  4EB8 00A2  231          jsr       _Wait1ms
000000C6  5282       232          addq.l    #1,D2
000000C8  60F0       233          bra       Wait3ms_1
                     234   Wait3ms_3:
000000CA  241F       235          move.l    (A7)+,D2
000000CC  4E75       236          rts
                     237   ; }
                     238   ; /*********************************************************************************************
                     239   ; **  Subroutine to initialise the LCD display by writing some commands to the LCD internal registers
                     240   ; **  Sets it for parallel port and 2 line display mode (if I recall correctly)
                     241   ; *********************************************************************************************/
                     242   ; void Init_LCD(void)
                     243   ; {
                     244          xdef      _Init_LCD
                     245   _Init_LCD:
                     246   ; LCDcommand = 0x0c ;
000000CE  13FC 000C  247          move.b    #12,4194336
000000D2  0040 0020 
                     248   ; Wait3ms() ;
000000D6  4EB8 00B6  249          jsr       _Wait3ms
                     250   ; LCDcommand = 0x38 ;
000000DA  13FC 0038  251          move.b    #56,4194336
000000DE  0040 0020 
                     252   ; Wait3ms() ;
000000E2  4EB8 00B6  253          jsr       _Wait3ms
000000E6  4E75       254          rts
                     255   ; }
                     256   ; /*********************************************************************************************
                     257   ; **  Subroutine to initialise the RS232 Port by writing some commands to the internal registers
                     258   ; *********************************************************************************************/
                     259   ; void Init_RS232(void)
                     260   ; {
                     261          xdef      _Init_RS232
                     262   _Init_RS232:
                     263   ; RS232_Control = 0x15 ; //  %00010101 set up 6850 uses divide by 16 clock, set RTS low, 8 bits no parity, 1 stop bit, transmitter interrupt disabled
000000E8  13FC 0015  264          move.b    #21,4194368
000000EC  0040 0040 
                     265   ; RS232_Baud = 0x1 ;      // program baud rate generator 001 = 115k, 010 = 57.6k, 011 = 38.4k, 100 = 19.2, all others = 9600
000000F0  13FC 0001  266          move.b    #1,4194372
000000F4  0040 0044 
000000F8  4E75       267          rts
                     268   ; }
                     269   ; /*********************************************************************************************************
                     270   ; **  Subroutine to provide a low level output function to 6850 ACIA
                     271   ; **  This routine provides the basic functionality to output a single character to the serial Port
                     272   ; **  to allow the board to communicate with HyperTerminal Program
                     273   ; **
                     274   ; **  NOTE you do not call this function directly, instead you call the normal putchar() function
                     275   ; **  which in turn calls _putch() below). Other functions like puts(), printf() call putchar() so will
                     276   ; **  call _putch() also
                     277   ; *********************************************************************************************************/
                     278   ; int _putch( int c)
                     279   ; {
                     280          xdef      __putch
                     281   __putch:
000000FA  4E56 0000  282          link      A6,#0
                     283   ; while((RS232_Status & (char)(0x02)) != (char)(0x02))    // wait for Tx bit in status register or 6850 serial comms chip to be '1'
                     284   _putch_1:
000000FE  1039 0040  285          move.b    4194368,D0
00000102  0040      
00000104  C03C 0002  286          and.b     #2,D0
00000108  0C00 0002  287          cmp.b     #2,D0
0000010C  6702       288          beq.s     _putch_3
0000010E  60EE       289          bra       _putch_1
                     290   _putch_3:
                     291   ; ;
                     292   ; RS232_TxData = (c & (char)(0x7f));                      // write to the data register to output the character (mask off bit 8 to keep it 7 bit ASCII)
00000110  202E 0008  293          move.l    8(A6),D0
00000114  C0BC 0000  294          and.l     #127,D0
00000118  007F      
0000011A  13C0 0040  295          move.b    D0,4194370
0000011E  0042      
                     296   ; return c ;                                              // putchar() expects the character to be returned
00000120  202E 0008  297          move.l    8(A6),D0
00000124  4E5E       298          unlk      A6
00000126  4E75       299          rts
                     300   ; }
                     301   ; /*********************************************************************************************************
                     302   ; **  Subroutine to provide a low level input function to 6850 ACIA
                     303   ; **  This routine provides the basic functionality to input a single character from the serial Port
                     304   ; **  to allow the board to communicate with HyperTerminal Program Keyboard (your PC)
                     305   ; **
                     306   ; **  NOTE you do not call this function directly, instead you call the normal getchar() function
                     307   ; **  which in turn calls _getch() below). Other functions like gets(), scanf() call getchar() so will
                     308   ; **  call _getch() also
                     309   ; *********************************************************************************************************/
                     310   ; int _getch( void )
                     311   ; {
                     312          xdef      __getch
                     313   __getch:
00000128  4E56 FFFC  314          link      A6,#-4
                     315   ; char c ;
                     316   ; while((RS232_Status & (char)(0x01)) != (char)(0x01))    // wait for Rx bit in 6850 serial comms chip status register to be '1'
                     317   _getch_1:
0000012C  1039 0040  318          move.b    4194368,D0
00000130  0040      
00000132  C03C 0001  319          and.b     #1,D0
00000136  0C00 0001  320          cmp.b     #1,D0
0000013A  6702       321          beq.s     _getch_3
0000013C  60EE       322          bra       _getch_1
                     323   _getch_3:
                     324   ; ;
                     325   ; return (RS232_RxData & (char)(0x7f));                   // read received character, mask off top bit and return as 7 bit ASCII character
0000013E  1039 0040  326          move.b    4194370,D0
00000142  0042      
00000144  C0BC 0000  327          and.l     #255,D0
00000148  00FF      
0000014A  C0BC 0000  328          and.l     #127,D0
0000014E  007F      
00000150  4E5E       329          unlk      A6
00000152  4E75       330          rts
                     331   ; }
                     332   ; /******************************************************************************
                     333   ; **  Subroutine to output a single character to the 2 row LCD display
                     334   ; **  It is assumed the character is an ASCII code and it will be displayed at the
                     335   ; **  current cursor position
                     336   ; *******************************************************************************/
                     337   ; void LCDOutchar(int c)
                     338   ; {
                     339          xdef      _LCDOutchar
                     340   _LCDOutchar:
00000154  4E56 0000  341          link      A6,#0
                     342   ; LCDdata = (char)(c);
00000158  202E 0008  343          move.l    8(A6),D0
0000015C  13C0 0040  344          move.b    D0,4194338
00000160  0022      
                     345   ; Wait1ms() ;
00000162  4EB8 00A2  346          jsr       _Wait1ms
00000166  4E5E       347          unlk      A6
00000168  4E75       348          rts
                     349   ; }
                     350   ; /**********************************************************************************
                     351   ; *subroutine to output a message at the current cursor position of the LCD display
                     352   ; ************************************************************************************/
                     353   ; void LCDOutMessage(char *theMessage)
                     354   ; {
                     355          xdef      _LCDOutMessage
                     356   _LCDOutMessage:
0000016A  4E56 FFFC  357          link      A6,#-4
                     358   ; char c ;
                     359   ; while((c = *theMessage++) != 0)     // output characters from the string until NULL
                     360   LCDOutMessage_1:
0000016E  206E 0008  361          move.l    8(A6),A0
00000172  52AE 0008  362          addq.l    #1,8(A6)
00000176  1D50 FFFF  363          move.b    (A0),-1(A6)
0000017A  1010       364          move.b    (A0),D0
0000017C  6712       365          beq.s     LCDOutMessage_3
                     366   ; LCDOutchar(c) ;
0000017E  122E FFFF  367          move.b    -1(A6),D1
00000182  4881       368          ext.w     D1
00000184  48C1       369          ext.l     D1
00000186  2F01       370          move.l    D1,-(A7)
00000188  4EB8 0154  371          jsr       _LCDOutchar
0000018C  584F       372          addq.w    #4,A7
0000018E  60DE       373          bra       LCDOutMessage_1
                     374   LCDOutMessage_3:
00000190  4E5E       375          unlk      A6
00000192  4E75       376          rts
                     377   ; }
                     378   ; /******************************************************************************
                     379   ; *subroutine to clear the line by issuing 24 space characters
                     380   ; *******************************************************************************/
                     381   ; void LCDClearln(void)
                     382   ; {
                     383          xdef      _LCDClearln
                     384   _LCDClearln:
00000194  2F02       385          move.l    D2,-(A7)
                     386   ; int i ;
                     387   ; for(i = 0; i < 24; i ++)
00000196  4282       388          clr.l     D2
                     389   LCDClearln_1:
00000198  0C82 0000  390          cmp.l     #24,D2
0000019C  0018      
0000019E  6C0E       391          bge.s     LCDClearln_3
                     392   ; LCDOutchar(' ') ;       // write a space char to the LCD display
000001A0  4878 0020  393          pea       32
000001A4  4EB8 0154  394          jsr       _LCDOutchar
000001A8  584F       395          addq.w    #4,A7
000001AA  5282       396          addq.l    #1,D2
000001AC  60EA       397          bra       LCDClearln_1
                     398   LCDClearln_3:
000001AE  241F       399          move.l    (A7)+,D2
000001B0  4E75       400          rts
                     401   ; }
                     402   ; /******************************************************************************
                     403   ; **  Subroutine to move the LCD cursor to the start of line 1 and clear that line
                     404   ; *******************************************************************************/
                     405   ; void LCDLine1Message(char *theMessage)
                     406   ; {
                     407          xdef      _LCDLine1Message
                     408   _LCDLine1Message:
000001B2  4E56 0000  409          link      A6,#0
                     410   ; LCDcommand = 0x80 ;
000001B6  13FC 0080  411          move.b    #128,4194336
000001BA  0040 0020 
                     412   ; Wait3ms();
000001BE  4EB8 00B6  413          jsr       _Wait3ms
                     414   ; LCDClearln() ;
000001C2  4EB8 0194  415          jsr       _LCDClearln
                     416   ; LCDcommand = 0x80 ;
000001C6  13FC 0080  417          move.b    #128,4194336
000001CA  0040 0020 
                     418   ; Wait3ms() ;
000001CE  4EB8 00B6  419          jsr       _Wait3ms
                     420   ; LCDOutMessage(theMessage) ;
000001D2  2F2E 0008  421          move.l    8(A6),-(A7)
000001D6  4EB8 016A  422          jsr       _LCDOutMessage
000001DA  584F       423          addq.w    #4,A7
000001DC  4E5E       424          unlk      A6
000001DE  4E75       425          rts
                     426   ; }
                     427   ; /******************************************************************************
                     428   ; **  Subroutine to move the LCD cursor to the start of line 2 and clear that line
                     429   ; *******************************************************************************/
                     430   ; void LCDLine2Message(char *theMessage)
                     431   ; {
                     432          xdef      _LCDLine2Message
                     433   _LCDLine2Message:
000001E0  4E56 0000  434          link      A6,#0
                     435   ; LCDcommand = 0xC0 ;
000001E4  13FC 00C0  436          move.b    #192,4194336
000001E8  0040 0020 
                     437   ; Wait3ms();
000001EC  4EB8 00B6  438          jsr       _Wait3ms
                     439   ; LCDClearln() ;
000001F0  4EB8 0194  440          jsr       _LCDClearln
                     441   ; LCDcommand = 0xC0 ;
000001F4  13FC 00C0  442          move.b    #192,4194336
000001F8  0040 0020 
                     443   ; Wait3ms() ;
000001FC  4EB8 00B6  444          jsr       _Wait3ms
                     445   ; LCDOutMessage(theMessage) ;
00000200  2F2E 0008  446          move.l    8(A6),-(A7)
00000204  4EB8 016A  447          jsr       _LCDOutMessage
00000208  584F       448          addq.w    #4,A7
0000020A  4E5E       449          unlk      A6
0000020C  4E75       450          rts
                     451   ; }
                     452   ; /*********************************************************************************************************************************
                     453   ; **  IMPORTANT FUNCTION
                     454   ; **  This function install an exception handler so you can capture and deal with any 68000 exception in your program
                     455   ; **  You pass it the name of a function in your code that will get called in response to the exception (as the 1st parameter)
                     456   ; **  and in the 2nd parameter, you pass it the exception number that you want to take over (see 68000 exceptions for details)
                     457   ; **  Calling this function allows you to deal with Interrupts for example
                     458   ; ***********************************************************************************************************************************/
                     459   ; void InstallExceptionHandler( void (*function_ptr)(), int level)
                     460   ; {
                     461          xdef      _InstallExceptionHandler
                     462   _InstallExceptionHandler:
0000020E  4E56 FFFC  463          link      A6,#-4
                     464   ; volatile long int *RamVectorAddress = (volatile long int *)(StartOfExceptionVectorTable) ;   // pointer to the Ram based interrupt vector table created in Cstart in debug monitor
00000212  2D7C 0803  465          move.l    #134414336,-4(A6)
00000216  0000 FFFC 
                     466   ; RamVectorAddress[level] = (long int *)(function_ptr);                       // install the address of our function into the exception table
0000021A  206E FFFC  467          move.l    -4(A6),A0
0000021E  202E 000C  468          move.l    12(A6),D0
00000222  E588       469          lsl.l     #2,D0
00000224  21AE 0008  470          move.l    8(A6),0(A0,D0.L)
00000228  0800      
0000022A  4E5E       471          unlk      A6
0000022C  4E75       472          rts
                     473   ; }
                     474   ; /*
                     475   ; * Support functions for changing memory contents
                     476   ; */
                     477   ; // converts hex char to 4 bit binary equiv in range 0000-1111 (0-F)
                     478   ; // char assumed to be a valid hex char 0-9, a-f, A-F
                     479   ; char xtod(int c)
                     480   ; {
                     481          xdef      _xtod
                     482   _xtod:
0000022E  4E56 0000  483          link      A6,#0
00000232  2F02       484          move.l    D2,-(A7)
00000234  242E 0008  485          move.l    8(A6),D2
                     486   ; if ((char)(c) <= (char)('9'))
00000238  0C02 0039  487          cmp.b     #57,D2
0000023C  6E08       488          bgt.s     xtod_1
                     489   ; return c - (char)(0x30);    // 0 - 9 = 0x30 - 0x39 so convert to number by sutracting 0x30
0000023E  1002       490          move.b    D2,D0
00000240  0400 0030  491          sub.b     #48,D0
00000244  6014       492          bra.s     xtod_3
                     493   xtod_1:
                     494   ; else if ((char)(c) > (char)('F'))    // assume lower case
00000246  0C02 0046  495          cmp.b     #70,D2
0000024A  6F08       496          ble.s     xtod_4
                     497   ; return c - (char)(0x57);    // a-f = 0x61-66 so needs to be converted to 0x0A - 0x0F so subtract 0x57
0000024C  1002       498          move.b    D2,D0
0000024E  0400 0057  499          sub.b     #87,D0
00000252  6006       500          bra.s     xtod_3
                     501   xtod_4:
                     502   ; else
                     503   ; return c - (char)(0x37);    // A-F = 0x41-46 so needs to be converted to 0x0A - 0x0F so subtract 0x37
00000254  1002       504          move.b    D2,D0
00000256  0400 0037  505          sub.b     #55,D0
                     506   xtod_3:
0000025A  241F       507          move.l    (A7)+,D2
0000025C  4E5E       508          unlk      A6
0000025E  4E75       509          rts
                     510   ; }
                     511   ; int Get2HexDigits(char pat)
                     512   ; {
                     513          xdef      _Get2HexDigits
                     514   _Get2HexDigits:
00000260  4E56 0000  515          link      A6,#0
00000264  2F02       516          move.l    D2,-(A7)
                     517   ; register int i = (xtod(pat) << 4) | (xtod(pat));
00000266  122E 000B  518          move.b    11(A6),D1
0000026A  4881       519          ext.w     D1
0000026C  48C1       520          ext.l     D1
0000026E  2F01       521          move.l    D1,-(A7)
00000270  4EB8 022E  522          jsr       _xtod
00000274  584F       523          addq.w    #4,A7
00000276  C0BC 0000  524          and.l     #255,D0
0000027A  00FF      
0000027C  E980       525          asl.l     #4,D0
0000027E  2F00       526          move.l    D0,-(A7)
00000280  102E 000B  527          move.b    11(A6),D0
00000284  4880       528          ext.w     D0
00000286  48C0       529          ext.l     D0
00000288  2F00       530          move.l    D0,-(A7)
0000028A  4EB8 022E  531          jsr       _xtod
0000028E  584F       532          addq.w    #4,A7
00000290  2200       533          move.l    D0,D1
00000292  201F       534          move.l    (A7)+,D0
00000294  C2BC 0000  535          and.l     #255,D1
00000298  00FF      
0000029A  8081       536          or.l      D1,D0
0000029C  2400       537          move.l    D0,D2
                     538   ; return i;
0000029E  2002       539          move.l    D2,D0
000002A0  241F       540          move.l    (A7)+,D2
000002A2  4E5E       541          unlk      A6
000002A4  4E75       542          rts
                     543   ; }
                     544   ; int Get4HexDigits(char pat)
                     545   ; {
                     546          xdef      _Get4HexDigits
                     547   _Get4HexDigits:
000002A6  4E56 0000  548          link      A6,#0
                     549   ; return (Get2HexDigits(pat) << 8) | (Get2HexDigits(pat));
000002AA  122E 000B  550          move.b    11(A6),D1
000002AE  4881       551          ext.w     D1
000002B0  48C1       552          ext.l     D1
000002B2  2F01       553          move.l    D1,-(A7)
000002B4  4EB8 0260  554          jsr       _Get2HexDigits
000002B8  584F       555          addq.w    #4,A7
000002BA  E180       556          asl.l     #8,D0
000002BC  2F00       557          move.l    D0,-(A7)
000002BE  102E 000B  558          move.b    11(A6),D0
000002C2  4880       559          ext.w     D0
000002C4  48C0       560          ext.l     D0
000002C6  2F00       561          move.l    D0,-(A7)
000002C8  4EB8 0260  562          jsr       _Get2HexDigits
000002CC  584F       563          addq.w    #4,A7
000002CE  2200       564          move.l    D0,D1
000002D0  201F       565          move.l    (A7)+,D0
000002D2  8081       566          or.l      D1,D0
000002D4  4E5E       567          unlk      A6
000002D6  4E75       568          rts
                     569   ; }
                     570   ; int Get8HexDigits(char pat)
                     571   ; {
                     572          xdef      _Get8HexDigits
                     573   _Get8HexDigits:
000002D8  4E56 0000  574          link      A6,#0
                     575   ; return (Get4HexDigits(pat) << 16) | (Get4HexDigits(pat));
000002DC  122E 000B  576          move.b    11(A6),D1
000002E0  4881       577          ext.w     D1
000002E2  48C1       578          ext.l     D1
000002E4  2F01       579          move.l    D1,-(A7)
000002E6  4EB8 02A6  580          jsr       _Get4HexDigits
000002EA  584F       581          addq.w    #4,A7
000002EC  E180       582          asl.l     #8,D0
000002EE  E180       583          asl.l     #8,D0
000002F0  2F00       584          move.l    D0,-(A7)
000002F2  102E 000B  585          move.b    11(A6),D0
000002F6  4880       586          ext.w     D0
000002F8  48C0       587          ext.l     D0
000002FA  2F00       588          move.l    D0,-(A7)
000002FC  4EB8 02A6  589          jsr       _Get4HexDigits
00000300  584F       590          addq.w    #4,A7
00000302  2200       591          move.l    D0,D1
00000304  201F       592          move.l    (A7)+,D0
00000306  8081       593          or.l      D1,D0
00000308  4E5E       594          unlk      A6
0000030A  4E75       595          rts
                     596   ; }
                     597   ; int Get7HexDigits(char one, char two, char three, char four, char five, char six, char seven)
                     598   ; {
                     599          xdef      _Get7HexDigits
                     600   _Get7HexDigits:
0000030C  4E56 0000  601          link      A6,#0
00000310  48E7 2020  602          movem.l   D2/A2,-(A7)
00000314  45F8 022E  603          lea       _xtod.L,A2
                     604   ; register int i = (xtod(one) << 24) | (xtod(two) << 20) | (xtod(three) << 16) | (xtod(four) << 12) | (xtod(five) << 8) | (xtod(six) << 4) | (xtod(seven));
00000318  122E 000B  605          move.b    11(A6),D1
0000031C  4881       606          ext.w     D1
0000031E  48C1       607          ext.l     D1
00000320  2F01       608          move.l    D1,-(A7)
00000322  4E92       609          jsr       (A2)
00000324  584F       610          addq.w    #4,A7
00000326  C0BC 0000  611          and.l     #255,D0
0000032A  00FF      
0000032C  E180       612          asl.l     #8,D0
0000032E  E180       613          asl.l     #8,D0
00000330  E180       614          asl.l     #8,D0
00000332  2F00       615          move.l    D0,-(A7)
00000334  102E 000F  616          move.b    15(A6),D0
00000338  4880       617          ext.w     D0
0000033A  48C0       618          ext.l     D0
0000033C  2F00       619          move.l    D0,-(A7)
0000033E  4E92       620          jsr       (A2)
00000340  584F       621          addq.w    #4,A7
00000342  2200       622          move.l    D0,D1
00000344  201F       623          move.l    (A7)+,D0
00000346  C2BC 0000  624          and.l     #255,D1
0000034A  00FF      
0000034C  E181       625          asl.l     #8,D1
0000034E  E181       626          asl.l     #8,D1
00000350  E981       627          asl.l     #4,D1
00000352  8081       628          or.l      D1,D0
00000354  2F00       629          move.l    D0,-(A7)
00000356  102E 0013  630          move.b    19(A6),D0
0000035A  4880       631          ext.w     D0
0000035C  48C0       632          ext.l     D0
0000035E  2F00       633          move.l    D0,-(A7)
00000360  4E92       634          jsr       (A2)
00000362  584F       635          addq.w    #4,A7
00000364  2200       636          move.l    D0,D1
00000366  201F       637          move.l    (A7)+,D0
00000368  C2BC 0000  638          and.l     #255,D1
0000036C  00FF      
0000036E  E181       639          asl.l     #8,D1
00000370  E181       640          asl.l     #8,D1
00000372  8081       641          or.l      D1,D0
00000374  2F00       642          move.l    D0,-(A7)
00000376  102E 0017  643          move.b    23(A6),D0
0000037A  4880       644          ext.w     D0
0000037C  48C0       645          ext.l     D0
0000037E  2F00       646          move.l    D0,-(A7)
00000380  4E92       647          jsr       (A2)
00000382  584F       648          addq.w    #4,A7
00000384  2200       649          move.l    D0,D1
00000386  201F       650          move.l    (A7)+,D0
00000388  C2BC 0000  651          and.l     #255,D1
0000038C  00FF      
0000038E  E181       652          asl.l     #8,D1
00000390  E981       653          asl.l     #4,D1
00000392  8081       654          or.l      D1,D0
00000394  2F00       655          move.l    D0,-(A7)
00000396  102E 001B  656          move.b    27(A6),D0
0000039A  4880       657          ext.w     D0
0000039C  48C0       658          ext.l     D0
0000039E  2F00       659          move.l    D0,-(A7)
000003A0  4E92       660          jsr       (A2)
000003A2  584F       661          addq.w    #4,A7
000003A4  2200       662          move.l    D0,D1
000003A6  201F       663          move.l    (A7)+,D0
000003A8  C2BC 0000  664          and.l     #255,D1
000003AC  00FF      
000003AE  E181       665          asl.l     #8,D1
000003B0  8081       666          or.l      D1,D0
000003B2  2F00       667          move.l    D0,-(A7)
000003B4  102E 001F  668          move.b    31(A6),D0
000003B8  4880       669          ext.w     D0
000003BA  48C0       670          ext.l     D0
000003BC  2F00       671          move.l    D0,-(A7)
000003BE  4E92       672          jsr       (A2)
000003C0  584F       673          addq.w    #4,A7
000003C2  2200       674          move.l    D0,D1
000003C4  201F       675          move.l    (A7)+,D0
000003C6  C2BC 0000  676          and.l     #255,D1
000003CA  00FF      
000003CC  E981       677          asl.l     #4,D1
000003CE  8081       678          or.l      D1,D0
000003D0  2F00       679          move.l    D0,-(A7)
000003D2  102E 0023  680          move.b    35(A6),D0
000003D6  4880       681          ext.w     D0
000003D8  48C0       682          ext.l     D0
000003DA  2F00       683          move.l    D0,-(A7)
000003DC  4E92       684          jsr       (A2)
000003DE  584F       685          addq.w    #4,A7
000003E0  2200       686          move.l    D0,D1
000003E2  201F       687          move.l    (A7)+,D0
000003E4  C2BC 0000  688          and.l     #255,D1
000003E8  00FF      
000003EA  8081       689          or.l      D1,D0
000003EC  2400       690          move.l    D0,D2
                     691   ; return i;
000003EE  2002       692          move.l    D2,D0
000003F0  4CDF 0404  693          movem.l   (A7)+,D2/A2
000003F4  4E5E       694          unlk      A6
000003F6  4E75       695          rts
                     696   ; }
                     697   ; void FillMemory(char* StartRamPtr, char* EndRamPtr, unsigned char FillData, int config)
                     698   ; {
                     699          xdef      _FillMemory
                     700   _FillMemory:
000003F8  4E56 0000  701          link      A6,#0
000003FC  48E7 3C00  702          movem.l   D2/D3/D4/D5,-(A7)
00000400  262E 000C  703          move.l    12(A6),D3
00000404  182E 0013  704          move.b    19(A6),D4
00000408  C8BC 0000  705          and.l     #255,D4
0000040C  00FF      
0000040E  2A2E 0014  706          move.l    20(A6),D5
                     707   ; char* start = StartRamPtr;
00000412  242E 0008  708          move.l    8(A6),D2
                     709   ; printf("\r\nFilling Addresses [$%08X - $%08X] with $%02X", StartRamPtr, EndRamPtr, FillData);
00000416  C8BC 0000  710          and.l     #255,D4
0000041A  00FF      
0000041C  2F04       711          move.l    D4,-(A7)
0000041E  2F03       712          move.l    D3,-(A7)
00000420  2F2E 0008  713          move.l    8(A6),-(A7)
00000424  4879 0000  714          pea       @m68kus~1_1.L
00000428  0E6A      
                     715          jsr       _printf
********  **** ****  Error: Undefined or illegal symbol
00000430  DEFC 0010  716          add.w     #16,A7
                     717   ; if (config == 1) {
00000434  0C85 0000  718          cmp.l     #1,D5
00000438  0001      
0000043A  660C       719          bne.s     FillMemory_5
                     720   ; while (start <= EndRamPtr){
                     721   FillMemory_3:
0000043C  B483       722          cmp.l     D3,D2
0000043E  6208       723          bhi.s     FillMemory_5
                     724   ; *start++ = FillData;
00000440  2042       725          move.l    D2,A0
00000442  5282       726          addq.l    #1,D2
00000444  1084       727          move.b    D4,(A0)
00000446  60F4       728          bra       FillMemory_3
                     729   FillMemory_5:
                     730   ; }
                     731   ; }
                     732   ; if (config == 2) {
00000448  0C85 0000  733          cmp.l     #2,D5
0000044C  0002      
0000044E  660C       734          bne.s     FillMemory_10
                     735   ; while (start <= EndRamPtr) {
                     736   FillMemory_8:
00000450  B483       737          cmp.l     D3,D2
00000452  6208       738          bhi.s     FillMemory_10
                     739   ; *start = FillData;
00000454  2042       740          move.l    D2,A0
00000456  1084       741          move.b    D4,(A0)
                     742   ; start += 2;
00000458  5482       743          addq.l    #2,D2
0000045A  60F4       744          bra       FillMemory_8
                     745   FillMemory_10:
                     746   ; }
                     747   ; }
                     748   ; if (config == 3) {
0000045C  0C85 0000  749          cmp.l     #3,D5
00000460  0003      
00000462  660C       750          bne.s     FillMemory_15
                     751   ; while (start <= EndRamPtr) {
                     752   FillMemory_13:
00000464  B483       753          cmp.l     D3,D2
00000466  6208       754          bhi.s     FillMemory_15
                     755   ; *start = FillData;
00000468  2042       756          move.l    D2,A0
0000046A  1084       757          move.b    D4,(A0)
                     758   ; start += 4;
0000046C  5882       759          addq.l    #4,D2
0000046E  60F4       760          bra       FillMemory_13
                     761   FillMemory_15:
00000470  4CDF 003C  762          movem.l   (A7)+,D2/D3/D4/D5
00000474  4E5E       763          unlk      A6
00000476  4E75       764          rts
                     765   ; }
                     766   ; }
                     767   ; }
                     768   ; void ReadMemory(char* StartRamPtr, char* EndRamPtr, unsigned char FillData, int config)
                     769   ; {
                     770          xdef      _ReadMemory
                     771   _ReadMemory:
00000478  4E56 FFFC  772          link      A6,#-4
0000047C  48E7 3C20  773          movem.l   D2/D3/D4/D5/A2,-(A7)
00000480  162E 0013  774          move.b    19(A6),D3
00000484  C6BC 0000  775          and.l     #255,D3
00000488  00FF      
                     776          lea       _printf.L,A2
********  **** ****  Error: Undefined or illegal symbol
00000490  282E 000C  777          move.l    12(A6),D4
00000494  2A2E 0014  778          move.l    20(A6),D5
                     779   ; int counter = 0;
00000498  42AE FFFC  780          clr.l     -4(A6)
                     781   ; unsigned char* start = StartRamPtr;
0000049C  242E 0008  782          move.l    8(A6),D2
                     783   ; printf("\r\nReading Addresses [$%08X - $%08X] for $%02X", StartRamPtr, EndRamPtr, FillData);
000004A0  C6BC 0000  784          and.l     #255,D3
000004A4  00FF      
000004A6  2F03       785          move.l    D3,-(A7)
000004A8  2F04       786          move.l    D4,-(A7)
000004AA  2F2E 0008  787          move.l    8(A6),-(A7)
000004AE  4879 0000  788          pea       @m68kus~1_2.L
000004B2  0E9A      
000004B4  4E92       789          jsr       (A2)
000004B6  DEFC 0010  790          add.w     #16,A7
                     791   ; if (config == 1) {
000004BA  0C85 0000  792          cmp.l     #1,D5
000004BE  0001      
000004C0  6600 004E  793          bne       ReadMemory_5
                     794   ; while (start <= EndRamPtr) {
                     795   ReadMemory_3:
000004C4  B484       796          cmp.l     D4,D2
000004C6  6200 0048  797          bhi       ReadMemory_5
                     798   ; if (*start != FillData)
000004CA  2042       799          move.l    D2,A0
000004CC  B610       800          cmp.b     (A0),D3
000004CE  6722       801          beq.s     ReadMemory_6
                     802   ; printf("\r\nValue incorrect at addresses $%08X ... should be $%02X but found $%02X", start, FillData, *start);
000004D0  2042       803          move.l    D2,A0
000004D2  1210       804          move.b    (A0),D1
000004D4  C2BC 0000  805          and.l     #255,D1
000004D8  00FF      
000004DA  2F01       806          move.l    D1,-(A7)
000004DC  C6BC 0000  807          and.l     #255,D3
000004E0  00FF      
000004E2  2F03       808          move.l    D3,-(A7)
000004E4  2F02       809          move.l    D2,-(A7)
000004E6  4879 0000  810          pea       @m68kus~1_3.L
000004EA  0EC8      
000004EC  4E92       811          jsr       (A2)
000004EE  DEFC 0010  812          add.w     #16,A7
                     813   ReadMemory_6:
                     814   ; printf("\r\nValue: $%02X found at Address: $%08X", *start, start);
000004F2  2F02       815          move.l    D2,-(A7)
000004F4  2042       816          move.l    D2,A0
000004F6  1210       817          move.b    (A0),D1
000004F8  C2BC 0000  818          and.l     #255,D1
000004FC  00FF      
000004FE  2F01       819          move.l    D1,-(A7)
00000500  4879 0000  820          pea       @m68kus~1_4.L
00000504  0F12      
00000506  4E92       821          jsr       (A2)
00000508  DEFC 000C  822          add.w     #12,A7
                     823   ; start++;
0000050C  5282       824          addq.l    #1,D2
0000050E  60B4       825          bra       ReadMemory_3
                     826   ReadMemory_5:
                     827   ; }
                     828   ; }
                     829   ; if (config == 2) {
00000510  0C85 0000  830          cmp.l     #2,D5
00000514  0002      
00000516  6600 0062  831          bne       ReadMemory_12
                     832   ; while (start <= EndRamPtr) {
                     833   ReadMemory_10:
0000051A  B484       834          cmp.l     D4,D2
0000051C  6200 005C  835          bhi       ReadMemory_12
                     836   ; if(*start != FillData)
00000520  2042       837          move.l    D2,A0
00000522  B610       838          cmp.b     (A0),D3
00000524  6722       839          beq.s     ReadMemory_13
                     840   ; printf("\r\nValue incorrect at addresses $%08X ... should be $%02X but found $%02X", start, FillData, *start);
00000526  2042       841          move.l    D2,A0
00000528  1210       842          move.b    (A0),D1
0000052A  C2BC 0000  843          and.l     #255,D1
0000052E  00FF      
00000530  2F01       844          move.l    D1,-(A7)
00000532  C6BC 0000  845          and.l     #255,D3
00000536  00FF      
00000538  2F03       846          move.l    D3,-(A7)
0000053A  2F02       847          move.l    D2,-(A7)
0000053C  4879 0000  848          pea       @m68kus~1_3.L
00000540  0EC8      
00000542  4E92       849          jsr       (A2)
00000544  DEFC 0010  850          add.w     #16,A7
                     851   ReadMemory_13:
                     852   ; printf("\r\nValue: $%02X $%02X found at Address: $%08X - $%08X", *start, *(start+1), start, (start+1));
00000548  2202       853          move.l    D2,D1
0000054A  5281       854          addq.l    #1,D1
0000054C  2F01       855          move.l    D1,-(A7)
0000054E  2F02       856          move.l    D2,-(A7)
00000550  2042       857          move.l    D2,A0
00000552  1228 0001  858          move.b    1(A0),D1
00000556  C2BC 0000  859          and.l     #255,D1
0000055A  00FF      
0000055C  2F01       860          move.l    D1,-(A7)
0000055E  2042       861          move.l    D2,A0
00000560  1210       862          move.b    (A0),D1
00000562  C2BC 0000  863          and.l     #255,D1
00000566  00FF      
00000568  2F01       864          move.l    D1,-(A7)
0000056A  4879 0000  865          pea       @m68kus~1_5.L
0000056E  0F3A      
00000570  4E92       866          jsr       (A2)
00000572  DEFC 0014  867          add.w     #20,A7
                     868   ; start += 2;
00000576  5482       869          addq.l    #2,D2
00000578  60A0       870          bra       ReadMemory_10
                     871   ReadMemory_12:
                     872   ; }
                     873   ; }
                     874   ; if (config == 3) {
0000057A  0C85 0000  875          cmp.l     #3,D5
0000057E  0003      
00000580  6600 0062  876          bne       ReadMemory_19
                     877   ; while (start <= EndRamPtr) {
                     878   ReadMemory_17:
00000584  B484       879          cmp.l     D4,D2
00000586  6200 005C  880          bhi       ReadMemory_19
                     881   ; if (*start != FillData)
0000058A  2042       882          move.l    D2,A0
0000058C  B610       883          cmp.b     (A0),D3
0000058E  6722       884          beq.s     ReadMemory_20
                     885   ; printf("\r\nValue incorrect at addresses $%08X ... should be $%02X but found $%02X", start, FillData, *start);
00000590  2042       886          move.l    D2,A0
00000592  1210       887          move.b    (A0),D1
00000594  C2BC 0000  888          and.l     #255,D1
00000598  00FF      
0000059A  2F01       889          move.l    D1,-(A7)
0000059C  C6BC 0000  890          and.l     #255,D3
000005A0  00FF      
000005A2  2F03       891          move.l    D3,-(A7)
000005A4  2F02       892          move.l    D2,-(A7)
000005A6  4879 0000  893          pea       @m68kus~1_3.L
000005AA  0EC8      
000005AC  4E92       894          jsr       (A2)
000005AE  DEFC 0010  895          add.w     #16,A7
                     896   ReadMemory_20:
                     897   ; printf("\r\nValue: $%02X $%02X $%02X $%02X found at Address: $%08X - $%08X", *start, *(start+3), start, (start+3));
000005B2  2202       898          move.l    D2,D1
000005B4  5681       899          addq.l    #3,D1
000005B6  2F01       900          move.l    D1,-(A7)
000005B8  2F02       901          move.l    D2,-(A7)
000005BA  2042       902          move.l    D2,A0
000005BC  1228 0003  903          move.b    3(A0),D1
000005C0  C2BC 0000  904          and.l     #255,D1
000005C4  00FF      
000005C6  2F01       905          move.l    D1,-(A7)
000005C8  2042       906          move.l    D2,A0
000005CA  1210       907          move.b    (A0),D1
000005CC  C2BC 0000  908          and.l     #255,D1
000005D0  00FF      
000005D2  2F01       909          move.l    D1,-(A7)
000005D4  4879 0000  910          pea       @m68kus~1_6.L
000005D8  0F70      
000005DA  4E92       911          jsr       (A2)
000005DC  DEFC 0014  912          add.w     #20,A7
                     913   ; start += 4;
000005E0  5882       914          addq.l    #4,D2
000005E2  60A0       915          bra       ReadMemory_17
                     916   ReadMemory_19:
000005E4  4CDF 043C  917          movem.l   (A7)+,D2/D3/D4/D5/A2
000005E8  4E5E       918          unlk      A6
000005EA  4E75       919          rts
                     920   ; }
                     921   ; }
                     922   ; }
                     923   ; /******************************************************************************************************************************
                     924   ; * Start of user program
                     925   ; ******************************************************************************************************************************/
                     926   ; void main()
                     927   ; {
                     928          xdef      _main
                     929   _main:
000005EC  4E56 FF3C  930          link      A6,#-196
000005F0  48E7 383C  931          movem.l   D2/D3/D4/A2/A3/A4/A5,-(A7)
000005F4  45EE FFF8  932          lea       -8(A6),A2
                     933          lea       _printf.L,A3
********  **** ****  Error: Undefined or illegal symbol
000005FE  49EE FFF0  934          lea       -16(A6),A4
                     935          lea       _scanf.L,A5
********  **** ****  Error: Undefined or illegal symbol
                     936   ; unsigned int row, i = 0, count = 0, counter1 = 1;
00000608  42AE FF40  937          clr.l     -192(A6)
0000060C  42AE FF44  938          clr.l     -188(A6)
00000610  2D7C 0000  939          move.l    #1,-184(A6)
00000614  0001 FF48 
                     940   ; char c, text[150] ;
                     941   ; int PassFailFlag = 1 ;
00000618  2D7C 0000  942          move.l    #1,-28(A6)
0000061C  0001 FFE4 
                     943   ; int test_config = 0;
00000620  42AE FFE8  944          clr.l     -24(A6)
                     945   ; int test_pattern = 0;
00000624  42AE FFEC  946          clr.l     -20(A6)
                     947   ; char start_addr[7];
                     948   ; int start_val = 0;
00000628  4283       949          clr.l     D3
                     950   ; char end_addr[7];
                     951   ; int end_val = 0;
0000062A  4282       952          clr.l     D2
                     953   ; char digit;
                     954   ; i = x = y = z = PortA_Count = 0;
0000062C  42B9 0000  955          clr.l     _PortA_Count.L
00000630  1374      
00000632  42B9 0000  956          clr.l     _z.L
00000636  1370      
00000638  42B9 0000  957          clr.l     _y.L
0000063C  136C      
0000063E  42B9 0000  958          clr.l     _x.L
00000642  1368      
00000644  42AE FF40  959          clr.l     -192(A6)
                     960   ; Timer1Count = Timer2Count = Timer3Count = Timer4Count = 0;
00000648  4239 0000  961          clr.b     _Timer4Count.L
0000064C  137E      
0000064E  4239 0000  962          clr.b     _Timer3Count.L
00000652  137C      
00000654  4239 0000  963          clr.b     _Timer2Count.L
00000658  137A      
0000065A  4239 0000  964          clr.b     _Timer1Count.L
0000065E  1378      
                     965   ; InstallExceptionHandler(PIA_ISR, 25) ;          // install interrupt handler for PIAs 1 and 2 on level 1 IRQ
00000660  4878 0019  966          pea       25
00000664  4878 009C  967          pea       _PIA_ISR.L
00000668  4EB8 020E  968          jsr       _InstallExceptionHandler
0000066C  504F       969          addq.w    #8,A7
                     970   ; InstallExceptionHandler(ACIA_ISR, 26) ;		    // install interrupt handler for ACIA on level 2 IRQ
0000066E  4878 001A  971          pea       26
00000672  4878 009A  972          pea       _ACIA_ISR.L
00000676  4EB8 020E  973          jsr       _InstallExceptionHandler
0000067A  504F       974          addq.w    #8,A7
                     975   ; InstallExceptionHandler(Timer_ISR, 27) ;		// install interrupt handler for Timers 1-4 on level 3 IRQ
0000067C  4878 001B  976          pea       27
00000680  4878 0000  977          pea       _Timer_ISR.L
00000684  4EB8 020E  978          jsr       _InstallExceptionHandler
00000688  504F       979          addq.w    #8,A7
                     980   ; InstallExceptionHandler(Key2PressISR, 28) ;	    // install interrupt handler for Key Press 2 on DE1 board for level 4 IRQ
0000068A  4878 001C  981          pea       28
0000068E  4878 009E  982          pea       _Key2PressISR.L
00000692  4EB8 020E  983          jsr       _InstallExceptionHandler
00000696  504F       984          addq.w    #8,A7
                     985   ; InstallExceptionHandler(Key1PressISR, 29) ;	    // install interrupt handler for Key Press 1 on DE1 board for level 5 IRQ
00000698  4878 001D  986          pea       29
0000069C  4878 00A0  987          pea       _Key1PressISR.L
000006A0  4EB8 020E  988          jsr       _InstallExceptionHandler
000006A4  504F       989          addq.w    #8,A7
                     990   ; Timer1Data = 0x10;		// program time delay into timers 1-4
000006A6  13FC 0010  991          move.b    #16,4194352
000006AA  0040 0030 
                     992   ; Timer2Data = 0x20;
000006AE  13FC 0020  993          move.b    #32,4194356
000006B2  0040 0034 
                     994   ; Timer3Data = 0x15;
000006B6  13FC 0015  995          move.b    #21,4194360
000006BA  0040 0038 
                     996   ; Timer4Data = 0x25;
000006BE  13FC 0025  997          move.b    #37,4194364
000006C2  0040 003C 
                     998   ; Timer1Control = 3;		// write 3 to control register to Bit0 = 1 (enable interrupt from timers) 1 - 4 and allow them to count Bit 1 = 1
000006C6  13FC 0003  999          move.b    #3,4194354
000006CA  0040 0032 
                    1000   ; Timer2Control = 3;
000006CE  13FC 0003 1001          move.b    #3,4194358
000006D2  0040 0036 
                    1002   ; Timer3Control = 3;
000006D6  13FC 0003 1003          move.b    #3,4194362
000006DA  0040 003A 
                    1004   ; Timer4Control = 3;
000006DE  13FC 0003 1005          move.b    #3,4194366
000006E2  0040 003E 
                    1006   ; Init_LCD();             // initialise the LCD display to use a parallel data interface and 2 lines of display
000006E6  4EB8 00CE 1007          jsr       _Init_LCD
                    1008   ; Init_RS232() ;          // initialise the RS232 port for use with hyper terminal
000006EA  4EB8 00E8 1009          jsr       _Init_RS232
                    1010   ; /*************************************************************************************************
                    1011   ; **  Test of scanf function
                    1012   ; *************************************************************************************************/
                    1013   ; scanflush() ;                       // flush any text that may have been typed ahead
                    1014          jsr       _scanflush
********  **** ****  Error: Undefined or illegal symbol
                    1015   ; /*
                    1016   ; * User prompts
                    1017   ; */
                    1018   ; // Prompt the user to entre a test configuration
                    1019   ; printf("\r\nEnter memory test configuration(1 - bytes, 2 - words, 3 - long words): ");
000006F4  4879 0000 1020          pea       @m68kus~1_7.L
000006F8  0FB2      
000006FA  4E93      1021          jsr       (A3)
000006FC  584F      1022          addq.w    #4,A7
                    1023   ; scanf("%d", &test_config);
000006FE  486E FFE8 1024          pea       -24(A6)
00000702  4879 0000 1025          pea       @m68kus~1_8.L
00000706  0FFC      
00000708  4E95      1026          jsr       (A5)
0000070A  504F      1027          addq.w    #8,A7
                    1028   ; // Check for invalid configuration entry and re-prompt if needed
                    1029   ; while (test_config > 3 || test_config < 1) {
                    1030   main_1:
0000070C  202E FFE8 1031          move.l    -24(A6),D0
00000710  0C80 0000 1032          cmp.l     #3,D0
00000714  0003      
00000716  6E0C      1033          bgt.s     main_4
00000718  202E FFE8 1034          move.l    -24(A6),D0
0000071C  0C80 0000 1035          cmp.l     #1,D0
00000720  0001      
00000722  6C24      1036          bge.s     main_3
                    1037   main_4:
                    1038   ; printf("\r\nConfiguration invalid, try again");
00000724  4879 0000 1039          pea       @m68kus~1_9.L
00000728  1000      
0000072A  4E93      1040          jsr       (A3)
0000072C  584F      1041          addq.w    #4,A7
                    1042   ; printf("\r\nEnter memory test configuration(1 - bytes, 2 - words, 3 - long words): ");
0000072E  4879 0000 1043          pea       @m68kus~1_7.L
00000732  0FB2      
00000734  4E93      1044          jsr       (A3)
00000736  584F      1045          addq.w    #4,A7
                    1046   ; scanf("%d", &test_config);
00000738  486E FFE8 1047          pea       -24(A6)
0000073C  4879 0000 1048          pea       @m68kus~1_8.L
00000740  0FFC      
00000742  4E95      1049          jsr       (A5)
00000744  504F      1050          addq.w    #8,A7
00000746  60C4      1051          bra       main_1
                    1052   main_3:
                    1053   ; }
                    1054   ; // Prompt the user to entre a test pattern
                    1055   ; printf("\r\nChoose between different memory test patterns(1 - 5, 2 - A, 3 - F, 4 - 0): ");
00000748  4879 0000 1056          pea       @m68kus~1_10.L
0000074C  1024      
0000074E  4E93      1057          jsr       (A3)
00000750  584F      1058          addq.w    #4,A7
                    1059   ; scanf("%d", &test_pattern);
00000752  486E FFEC 1060          pea       -20(A6)
00000756  4879 0000 1061          pea       @m68kus~1_8.L
0000075A  0FFC      
0000075C  4E95      1062          jsr       (A5)
0000075E  504F      1063          addq.w    #8,A7
                    1064   ; // Check for invalid pattern entry and re-prompt if needed
                    1065   ; while (test_pattern > 4 || test_pattern < 1) {
                    1066   main_5:
00000760  202E FFEC 1067          move.l    -20(A6),D0
00000764  0C80 0000 1068          cmp.l     #4,D0
00000768  0004      
0000076A  6E0C      1069          bgt.s     main_8
0000076C  202E FFEC 1070          move.l    -20(A6),D0
00000770  0C80 0000 1071          cmp.l     #1,D0
00000774  0001      
00000776  6C24      1072          bge.s     main_7
                    1073   main_8:
                    1074   ; printf("\r\nPattern invalid, try again");
00000778  4879 0000 1075          pea       @m68kus~1_11.L
0000077C  1072      
0000077E  4E93      1076          jsr       (A3)
00000780  584F      1077          addq.w    #4,A7
                    1078   ; printf("\r\nChoose between different memory test patterns(1 - 5, 2 - A, 3 - F, 4 - 0): ");
00000782  4879 0000 1079          pea       @m68kus~1_10.L
00000786  1024      
00000788  4E93      1080          jsr       (A3)
0000078A  584F      1081          addq.w    #4,A7
                    1082   ; scanf("%d", &test_pattern);
0000078C  486E FFEC 1083          pea       -20(A6)
00000790  4879 0000 1084          pea       @m68kus~1_8.L
00000794  0FFC      
00000796  4E95      1085          jsr       (A5)
00000798  504F      1086          addq.w    #8,A7
0000079A  60C4      1087          bra       main_5
                    1088   main_7:
                    1089   ; }
                    1090   ; // Prompt the user to entre a starting address
                    1091   ; printf("\r\nEnter starting address(8020000 - 8030000 inclusive): ");
0000079C  4879 0000 1092          pea       @m68kus~1_12.L
000007A0  1090      
000007A2  4E93      1093          jsr       (A3)
000007A4  584F      1094          addq.w    #4,A7
                    1095   ; scanf("%s", &start_addr);
000007A6  2F0C      1096          move.l    A4,-(A7)
000007A8  4879 0000 1097          pea       @m68kus~1_13.L
000007AC  10C8      
000007AE  4E95      1098          jsr       (A5)
000007B0  504F      1099          addq.w    #8,A7
                    1100   ; start_val = Get7HexDigits(start_addr[0], start_addr[1], start_addr[2], start_addr[3], start_addr[4], start_addr[5], start_addr[6]);
000007B2  122C 0006 1101          move.b    6(A4),D1
000007B6  4881      1102          ext.w     D1
000007B8  48C1      1103          ext.l     D1
000007BA  2F01      1104          move.l    D1,-(A7)
000007BC  122C 0005 1105          move.b    5(A4),D1
000007C0  4881      1106          ext.w     D1
000007C2  48C1      1107          ext.l     D1
000007C4  2F01      1108          move.l    D1,-(A7)
000007C6  122C 0004 1109          move.b    4(A4),D1
000007CA  4881      1110          ext.w     D1
000007CC  48C1      1111          ext.l     D1
000007CE  2F01      1112          move.l    D1,-(A7)
000007D0  122C 0003 1113          move.b    3(A4),D1
000007D4  4881      1114          ext.w     D1
000007D6  48C1      1115          ext.l     D1
000007D8  2F01      1116          move.l    D1,-(A7)
000007DA  122C 0002 1117          move.b    2(A4),D1
000007DE  4881      1118          ext.w     D1
000007E0  48C1      1119          ext.l     D1
000007E2  2F01      1120          move.l    D1,-(A7)
000007E4  122C 0001 1121          move.b    1(A4),D1
000007E8  4881      1122          ext.w     D1
000007EA  48C1      1123          ext.l     D1
000007EC  2F01      1124          move.l    D1,-(A7)
000007EE  1214      1125          move.b    (A4),D1
000007F0  4881      1126          ext.w     D1
000007F2  48C1      1127          ext.l     D1
000007F4  2F01      1128          move.l    D1,-(A7)
000007F6  4EB8 030C 1129          jsr       _Get7HexDigits
000007FA  DEFC 001C 1130          add.w     #28,A7
000007FE  2600      1131          move.l    D0,D3
                    1132   ; // Check for invalid start address and re-prompt if needed
                    1133   ; while (start_val < 0x8020000 || start_val > 0x8030000 || strlen(start_addr) > 7) { // start address must be 7 chars and within bounds
                    1134   main_9:
00000800  0C83 0802 1135          cmp.l     #134348800,D3
00000804  0000      
00000806  6D1C      1136          blt.s     main_12
00000808  0C83 0803 1137          cmp.l     #134414336,D3
0000080C  0000      
0000080E  6E14      1138          bgt.s     main_12
00000810  2F0C      1139          move.l    A4,-(A7)
                    1140          jsr       _strlen
********  **** ****  Error: Undefined or illegal symbol
00000818  584F      1141          addq.w    #4,A7
0000081A  0C80 0000 1142          cmp.l     #7,D0
0000081E  0007      
00000820  6F00 0074 1143          ble       main_11
                    1144   main_12:
                    1145   ; printf("\r\nStarting address out of bounds.. try again");
00000824  4879 0000 1146          pea       @m68kus~1_14.L
00000828  10CC      
0000082A  4E93      1147          jsr       (A3)
0000082C  584F      1148          addq.w    #4,A7
                    1149   ; printf("\r\nEnter starting address(8020000 - 8030000 inclusive): ");
0000082E  4879 0000 1150          pea       @m68kus~1_12.L
00000832  1090      
00000834  4E93      1151          jsr       (A3)
00000836  584F      1152          addq.w    #4,A7
                    1153   ; scanf("%s", &start_addr);
00000838  2F0C      1154          move.l    A4,-(A7)
0000083A  4879 0000 1155          pea       @m68kus~1_13.L
0000083E  10C8      
00000840  4E95      1156          jsr       (A5)
00000842  504F      1157          addq.w    #8,A7
                    1158   ; start_val = Get7HexDigits(start_addr[0], start_addr[1], start_addr[2], start_addr[3], start_addr[4], start_addr[5], start_addr[6]);
00000844  122C 0006 1159          move.b    6(A4),D1
00000848  4881      1160          ext.w     D1
0000084A  48C1      1161          ext.l     D1
0000084C  2F01      1162          move.l    D1,-(A7)
0000084E  122C 0005 1163          move.b    5(A4),D1
00000852  4881      1164          ext.w     D1
00000854  48C1      1165          ext.l     D1
00000856  2F01      1166          move.l    D1,-(A7)
00000858  122C 0004 1167          move.b    4(A4),D1
0000085C  4881      1168          ext.w     D1
0000085E  48C1      1169          ext.l     D1
00000860  2F01      1170          move.l    D1,-(A7)
00000862  122C 0003 1171          move.b    3(A4),D1
00000866  4881      1172          ext.w     D1
00000868  48C1      1173          ext.l     D1
0000086A  2F01      1174          move.l    D1,-(A7)
0000086C  122C 0002 1175          move.b    2(A4),D1
00000870  4881      1176          ext.w     D1
00000872  48C1      1177          ext.l     D1
00000874  2F01      1178          move.l    D1,-(A7)
00000876  122C 0001 1179          move.b    1(A4),D1
0000087A  4881      1180          ext.w     D1
0000087C  48C1      1181          ext.l     D1
0000087E  2F01      1182          move.l    D1,-(A7)
00000880  1214      1183          move.b    (A4),D1
00000882  4881      1184          ext.w     D1
00000884  48C1      1185          ext.l     D1
00000886  2F01      1186          move.l    D1,-(A7)
00000888  4EB8 030C 1187          jsr       _Get7HexDigits
0000088C  DEFC 001C 1188          add.w     #28,A7
00000890  2600      1189          move.l    D0,D3
00000892  6000 FF6C 1190          bra       main_9
                    1191   main_11:
                    1192   ; }
                    1193   ; // Check for illegal address, start address must be even if writing words or long words to memory
                    1194   ; while (start_val % 2 != 0 && test_config != 1) {
                    1195   main_13:
00000896  2F03      1196          move.l    D3,-(A7)
00000898  4878 0002 1197          pea       2
                    1198          jsr       LDIV
********  **** ****  Error: Undefined or illegal symbol
000008A2  202F 0004 1199          move.l    4(A7),D0
000008A6  504F      1200          addq.w    #8,A7
000008A8  4A80      1201          tst.l     D0
000008AA  6700 0082 1202          beq       main_15
000008AE  202E FFE8 1203          move.l    -24(A6),D0
000008B2  0C80 0000 1204          cmp.l     #1,D0
000008B6  0001      
000008B8  6700 0074 1205          beq       main_15
                    1206   ; printf("\r\nOdd starting address.. try again");
000008BC  4879 0000 1207          pea       @m68kus~1_15.L
000008C0  10FA      
000008C2  4E93      1208          jsr       (A3)
000008C4  584F      1209          addq.w    #4,A7
                    1210   ; printf("\r\nEnter starting address(8020000 - 8030000 inclusive): ");
000008C6  4879 0000 1211          pea       @m68kus~1_12.L
000008CA  1090      
000008CC  4E93      1212          jsr       (A3)
000008CE  584F      1213          addq.w    #4,A7
                    1214   ; scanf("%s", &start_addr);
000008D0  2F0C      1215          move.l    A4,-(A7)
000008D2  4879 0000 1216          pea       @m68kus~1_13.L
000008D6  10C8      
000008D8  4E95      1217          jsr       (A5)
000008DA  504F      1218          addq.w    #8,A7
                    1219   ; start_val = Get7HexDigits(start_addr[0], start_addr[1], start_addr[2], start_addr[3], start_addr[4], start_addr[5], start_addr[6]);
000008DC  122C 0006 1220          move.b    6(A4),D1
000008E0  4881      1221          ext.w     D1
000008E2  48C1      1222          ext.l     D1
000008E4  2F01      1223          move.l    D1,-(A7)
000008E6  122C 0005 1224          move.b    5(A4),D1
000008EA  4881      1225          ext.w     D1
000008EC  48C1      1226          ext.l     D1
000008EE  2F01      1227          move.l    D1,-(A7)
000008F0  122C 0004 1228          move.b    4(A4),D1
000008F4  4881      1229          ext.w     D1
000008F6  48C1      1230          ext.l     D1
000008F8  2F01      1231          move.l    D1,-(A7)
000008FA  122C 0003 1232          move.b    3(A4),D1
000008FE  4881      1233          ext.w     D1
00000900  48C1      1234          ext.l     D1
00000902  2F01      1235          move.l    D1,-(A7)
00000904  122C 0002 1236          move.b    2(A4),D1
00000908  4881      1237          ext.w     D1
0000090A  48C1      1238          ext.l     D1
0000090C  2F01      1239          move.l    D1,-(A7)
0000090E  122C 0001 1240          move.b    1(A4),D1
00000912  4881      1241          ext.w     D1
00000914  48C1      1242          ext.l     D1
00000916  2F01      1243          move.l    D1,-(A7)
00000918  1214      1244          move.b    (A4),D1
0000091A  4881      1245          ext.w     D1
0000091C  48C1      1246          ext.l     D1
0000091E  2F01      1247          move.l    D1,-(A7)
00000920  4EB8 030C 1248          jsr       _Get7HexDigits
00000924  DEFC 001C 1249          add.w     #28,A7
00000928  2600      1250          move.l    D0,D3
0000092A  6000 FF6A 1251          bra       main_13
                    1252   main_15:
                    1253   ; }
                    1254   ; // Prompt the user to entre an ending address
                    1255   ; printf("\r\nEnter ending address(8020000 - 8030000 inclusive): ");
0000092E  4879 0000 1256          pea       @m68kus~1_16.L
00000932  111E      
00000934  4E93      1257          jsr       (A3)
00000936  584F      1258          addq.w    #4,A7
                    1259   ; scanf("%s", &end_addr);
00000938  2F0A      1260          move.l    A2,-(A7)
0000093A  4879 0000 1261          pea       @m68kus~1_13.L
0000093E  10C8      
00000940  4E95      1262          jsr       (A5)
00000942  504F      1263          addq.w    #8,A7
                    1264   ; end_val = Get7HexDigits(end_addr[0], end_addr[1], end_addr[2], end_addr[3], end_addr[4], end_addr[5], end_addr[6]);
00000944  122A 0006 1265          move.b    6(A2),D1
00000948  4881      1266          ext.w     D1
0000094A  48C1      1267          ext.l     D1
0000094C  2F01      1268          move.l    D1,-(A7)
0000094E  122A 0005 1269          move.b    5(A2),D1
00000952  4881      1270          ext.w     D1
00000954  48C1      1271          ext.l     D1
00000956  2F01      1272          move.l    D1,-(A7)
00000958  122A 0004 1273          move.b    4(A2),D1
0000095C  4881      1274          ext.w     D1
0000095E  48C1      1275          ext.l     D1
00000960  2F01      1276          move.l    D1,-(A7)
00000962  122A 0003 1277          move.b    3(A2),D1
00000966  4881      1278          ext.w     D1
00000968  48C1      1279          ext.l     D1
0000096A  2F01      1280          move.l    D1,-(A7)
0000096C  122A 0002 1281          move.b    2(A2),D1
00000970  4881      1282          ext.w     D1
00000972  48C1      1283          ext.l     D1
00000974  2F01      1284          move.l    D1,-(A7)
00000976  122A 0001 1285          move.b    1(A2),D1
0000097A  4881      1286          ext.w     D1
0000097C  48C1      1287          ext.l     D1
0000097E  2F01      1288          move.l    D1,-(A7)
00000980  1212      1289          move.b    (A2),D1
00000982  4881      1290          ext.w     D1
00000984  48C1      1291          ext.l     D1
00000986  2F01      1292          move.l    D1,-(A7)
00000988  4EB8 030C 1293          jsr       _Get7HexDigits
0000098C  DEFC 001C 1294          add.w     #28,A7
00000990  2400      1295          move.l    D0,D2
                    1296   ; while (end_val < 0x8020000 || end_val > 0x8030000 || strlen(end_addr) > 7) { // end address must be 7 chars and within bounds
                    1297   main_16:
00000992  0C82 0802 1298          cmp.l     #134348800,D2
00000996  0000      
00000998  6D1C      1299          blt.s     main_19
0000099A  0C82 0803 1300          cmp.l     #134414336,D2
0000099E  0000      
000009A0  6E14      1301          bgt.s     main_19
000009A2  2F0A      1302          move.l    A2,-(A7)
                    1303          jsr       _strlen
********  **** ****  Error: Undefined or illegal symbol
000009AA  584F      1304          addq.w    #4,A7
000009AC  0C80 0000 1305          cmp.l     #7,D0
000009B0  0007      
000009B2  6F00 0074 1306          ble       main_18
                    1307   main_19:
                    1308   ; printf("\r\nEnding address out of bounds.. try again");
000009B6  4879 0000 1309          pea       @m68kus~1_17.L
000009BA  1154      
000009BC  4E93      1310          jsr       (A3)
000009BE  584F      1311          addq.w    #4,A7
                    1312   ; printf("\r\nEnter ending address(8020000 - 8030000 inclusive): ");
000009C0  4879 0000 1313          pea       @m68kus~1_16.L
000009C4  111E      
000009C6  4E93      1314          jsr       (A3)
000009C8  584F      1315          addq.w    #4,A7
                    1316   ; scanf("%s", &end_addr);
000009CA  2F0A      1317          move.l    A2,-(A7)
000009CC  4879 0000 1318          pea       @m68kus~1_13.L
000009D0  10C8      
000009D2  4E95      1319          jsr       (A5)
000009D4  504F      1320          addq.w    #8,A7
                    1321   ; end_val = Get7HexDigits(end_addr[0], end_addr[1], end_addr[2], end_addr[3], end_addr[4], end_addr[5], end_addr[6]);
000009D6  122A 0006 1322          move.b    6(A2),D1
000009DA  4881      1323          ext.w     D1
000009DC  48C1      1324          ext.l     D1
000009DE  2F01      1325          move.l    D1,-(A7)
000009E0  122A 0005 1326          move.b    5(A2),D1
000009E4  4881      1327          ext.w     D1
000009E6  48C1      1328          ext.l     D1
000009E8  2F01      1329          move.l    D1,-(A7)
000009EA  122A 0004 1330          move.b    4(A2),D1
000009EE  4881      1331          ext.w     D1
000009F0  48C1      1332          ext.l     D1
000009F2  2F01      1333          move.l    D1,-(A7)
000009F4  122A 0003 1334          move.b    3(A2),D1
000009F8  4881      1335          ext.w     D1
000009FA  48C1      1336          ext.l     D1
000009FC  2F01      1337          move.l    D1,-(A7)
000009FE  122A 0002 1338          move.b    2(A2),D1
00000A02  4881      1339          ext.w     D1
00000A04  48C1      1340          ext.l     D1
00000A06  2F01      1341          move.l    D1,-(A7)
00000A08  122A 0001 1342          move.b    1(A2),D1
00000A0C  4881      1343          ext.w     D1
00000A0E  48C1      1344          ext.l     D1
00000A10  2F01      1345          move.l    D1,-(A7)
00000A12  1212      1346          move.b    (A2),D1
00000A14  4881      1347          ext.w     D1
00000A16  48C1      1348          ext.l     D1
00000A18  2F01      1349          move.l    D1,-(A7)
00000A1A  4EB8 030C 1350          jsr       _Get7HexDigits
00000A1E  DEFC 001C 1351          add.w     #28,A7
00000A22  2400      1352          move.l    D0,D2
00000A24  6000 FF6C 1353          bra       main_16
                    1354   main_18:
                    1355   ; }
                    1356   ; while (end_val < start_val) {
                    1357   main_20:
00000A28  B483      1358          cmp.l     D3,D2
00000A2A  6C00 0072 1359          bge       main_22
                    1360   ; printf("\r\nInvalid ending address.. try again");
00000A2E  4879 0000 1361          pea       @m68kus~1_18.L
00000A32  1180      
00000A34  4E93      1362          jsr       (A3)
00000A36  584F      1363          addq.w    #4,A7
                    1364   ; printf("\r\nEnter ending address(8020000 - 8030000 inclusive): ");
00000A38  4879 0000 1365          pea       @m68kus~1_16.L
00000A3C  111E      
00000A3E  4E93      1366          jsr       (A3)
00000A40  584F      1367          addq.w    #4,A7
                    1368   ; scanf("%s", &end_addr);
00000A42  2F0A      1369          move.l    A2,-(A7)
00000A44  4879 0000 1370          pea       @m68kus~1_13.L
00000A48  10C8      
00000A4A  4E95      1371          jsr       (A5)
00000A4C  504F      1372          addq.w    #8,A7
                    1373   ; end_val = Get7HexDigits(end_addr[0], end_addr[1], end_addr[2], end_addr[3], end_addr[4], end_addr[5], end_addr[6]);
00000A4E  122A 0006 1374          move.b    6(A2),D1
00000A52  4881      1375          ext.w     D1
00000A54  48C1      1376          ext.l     D1
00000A56  2F01      1377          move.l    D1,-(A7)
00000A58  122A 0005 1378          move.b    5(A2),D1
00000A5C  4881      1379          ext.w     D1
00000A5E  48C1      1380          ext.l     D1
00000A60  2F01      1381          move.l    D1,-(A7)
00000A62  122A 0004 1382          move.b    4(A2),D1
00000A66  4881      1383          ext.w     D1
00000A68  48C1      1384          ext.l     D1
00000A6A  2F01      1385          move.l    D1,-(A7)
00000A6C  122A 0003 1386          move.b    3(A2),D1
00000A70  4881      1387          ext.w     D1
00000A72  48C1      1388          ext.l     D1
00000A74  2F01      1389          move.l    D1,-(A7)
00000A76  122A 0002 1390          move.b    2(A2),D1
00000A7A  4881      1391          ext.w     D1
00000A7C  48C1      1392          ext.l     D1
00000A7E  2F01      1393          move.l    D1,-(A7)
00000A80  122A 0001 1394          move.b    1(A2),D1
00000A84  4881      1395          ext.w     D1
00000A86  48C1      1396          ext.l     D1
00000A88  2F01      1397          move.l    D1,-(A7)
00000A8A  1212      1398          move.b    (A2),D1
00000A8C  4881      1399          ext.w     D1
00000A8E  48C1      1400          ext.l     D1
00000A90  2F01      1401          move.l    D1,-(A7)
00000A92  4EB8 030C 1402          jsr       _Get7HexDigits
00000A96  DEFC 001C 1403          add.w     #28,A7
00000A9A  2400      1404          move.l    D0,D2
00000A9C  608A      1405          bra       main_20
                    1406   main_22:
                    1407   ; }
                    1408   ; // When writing words, the given address range should be a multiple of 2 bytes (size of a word)
                    1409   ; while ((end_val - start_val + 1) % 2 != 0  && test_config == 2) {
                    1410   main_23:
00000A9E  2002      1411          move.l    D2,D0
00000AA0  9083      1412          sub.l     D3,D0
00000AA2  5280      1413          addq.l    #1,D0
00000AA4  2F00      1414          move.l    D0,-(A7)
00000AA6  4878 0002 1415          pea       2
                    1416          jsr       LDIV
********  **** ****  Error: Undefined or illegal symbol
00000AB0  202F 0004 1417          move.l    4(A7),D0
00000AB4  504F      1418          addq.w    #8,A7
00000AB6  4A80      1419          tst.l     D0
00000AB8  6700 0082 1420          beq       main_25
00000ABC  202E FFE8 1421          move.l    -24(A6),D0
00000AC0  0C80 0000 1422          cmp.l     #2,D0
00000AC4  0002      
00000AC6  6600 0074 1423          bne       main_25
                    1424   ; printf("\r\nInvalid address range is too small.. try again");
00000ACA  4879 0000 1425          pea       @m68kus~1_19.L
00000ACE  11A6      
00000AD0  4E93      1426          jsr       (A3)
00000AD2  584F      1427          addq.w    #4,A7
                    1428   ; printf("\r\nEnter ending address(8020000 - 8030000 inclusive): ");
00000AD4  4879 0000 1429          pea       @m68kus~1_16.L
00000AD8  111E      
00000ADA  4E93      1430          jsr       (A3)
00000ADC  584F      1431          addq.w    #4,A7
                    1432   ; scanf("%s", &end_addr);
00000ADE  2F0A      1433          move.l    A2,-(A7)
00000AE0  4879 0000 1434          pea       @m68kus~1_13.L
00000AE4  10C8      
00000AE6  4E95      1435          jsr       (A5)
00000AE8  504F      1436          addq.w    #8,A7
                    1437   ; end_val = Get7HexDigits(end_addr[0], end_addr[1], end_addr[2], end_addr[3], end_addr[4], end_addr[5], end_addr[6]);
00000AEA  122A 0006 1438          move.b    6(A2),D1
00000AEE  4881      1439          ext.w     D1
00000AF0  48C1      1440          ext.l     D1
00000AF2  2F01      1441          move.l    D1,-(A7)
00000AF4  122A 0005 1442          move.b    5(A2),D1
00000AF8  4881      1443          ext.w     D1
00000AFA  48C1      1444          ext.l     D1
00000AFC  2F01      1445          move.l    D1,-(A7)
00000AFE  122A 0004 1446          move.b    4(A2),D1
00000B02  4881      1447          ext.w     D1
00000B04  48C1      1448          ext.l     D1
00000B06  2F01      1449          move.l    D1,-(A7)
00000B08  122A 0003 1450          move.b    3(A2),D1
00000B0C  4881      1451          ext.w     D1
00000B0E  48C1      1452          ext.l     D1
00000B10  2F01      1453          move.l    D1,-(A7)
00000B12  122A 0002 1454          move.b    2(A2),D1
00000B16  4881      1455          ext.w     D1
00000B18  48C1      1456          ext.l     D1
00000B1A  2F01      1457          move.l    D1,-(A7)
00000B1C  122A 0001 1458          move.b    1(A2),D1
00000B20  4881      1459          ext.w     D1
00000B22  48C1      1460          ext.l     D1
00000B24  2F01      1461          move.l    D1,-(A7)
00000B26  1212      1462          move.b    (A2),D1
00000B28  4881      1463          ext.w     D1
00000B2A  48C1      1464          ext.l     D1
00000B2C  2F01      1465          move.l    D1,-(A7)
00000B2E  4EB8 030C 1466          jsr       _Get7HexDigits
00000B32  DEFC 001C 1467          add.w     #28,A7
00000B36  2400      1468          move.l    D0,D2
00000B38  6000 FF64 1469          bra       main_23
                    1470   main_25:
                    1471   ; }
                    1472   ; // When writing long words, the given address range should be a multiple of 4 bytes (size of a long word)
                    1473   ; while ((end_val - start_val + 1) % 4 != 0 && test_config == 3) {
                    1474   main_26:
00000B3C  2002      1475          move.l    D2,D0
00000B3E  9083      1476          sub.l     D3,D0
00000B40  5280      1477          addq.l    #1,D0
00000B42  2F00      1478          move.l    D0,-(A7)
00000B44  4878 0004 1479          pea       4
                    1480          jsr       LDIV
********  **** ****  Error: Undefined or illegal symbol
00000B4E  202F 0004 1481          move.l    4(A7),D0
00000B52  504F      1482          addq.w    #8,A7
00000B54  4A80      1483          tst.l     D0
00000B56  6700 0082 1484          beq       main_28
00000B5A  202E FFE8 1485          move.l    -24(A6),D0
00000B5E  0C80 0000 1486          cmp.l     #3,D0
00000B62  0003      
00000B64  6600 0074 1487          bne       main_28
                    1488   ; printf("\r\nInvalid range is too small.. try again");
00000B68  4879 0000 1489          pea       @m68kus~1_20.L
00000B6C  11D8      
00000B6E  4E93      1490          jsr       (A3)
00000B70  584F      1491          addq.w    #4,A7
                    1492   ; printf("\r\nEnter ending address(8020000 - 8030000 inclusive): ");
00000B72  4879 0000 1493          pea       @m68kus~1_16.L
00000B76  111E      
00000B78  4E93      1494          jsr       (A3)
00000B7A  584F      1495          addq.w    #4,A7
                    1496   ; scanf("%s", &end_addr);
00000B7C  2F0A      1497          move.l    A2,-(A7)
00000B7E  4879 0000 1498          pea       @m68kus~1_13.L
00000B82  10C8      
00000B84  4E95      1499          jsr       (A5)
00000B86  504F      1500          addq.w    #8,A7
                    1501   ; end_val = Get7HexDigits(end_addr[0], end_addr[1], end_addr[2], end_addr[3], end_addr[4], end_addr[5], end_addr[6]);
00000B88  122A 0006 1502          move.b    6(A2),D1
00000B8C  4881      1503          ext.w     D1
00000B8E  48C1      1504          ext.l     D1
00000B90  2F01      1505          move.l    D1,-(A7)
00000B92  122A 0005 1506          move.b    5(A2),D1
00000B96  4881      1507          ext.w     D1
00000B98  48C1      1508          ext.l     D1
00000B9A  2F01      1509          move.l    D1,-(A7)
00000B9C  122A 0004 1510          move.b    4(A2),D1
00000BA0  4881      1511          ext.w     D1
00000BA2  48C1      1512          ext.l     D1
00000BA4  2F01      1513          move.l    D1,-(A7)
00000BA6  122A 0003 1514          move.b    3(A2),D1
00000BAA  4881      1515          ext.w     D1
00000BAC  48C1      1516          ext.l     D1
00000BAE  2F01      1517          move.l    D1,-(A7)
00000BB0  122A 0002 1518          move.b    2(A2),D1
00000BB4  4881      1519          ext.w     D1
00000BB6  48C1      1520          ext.l     D1
00000BB8  2F01      1521          move.l    D1,-(A7)
00000BBA  122A 0001 1522          move.b    1(A2),D1
00000BBE  4881      1523          ext.w     D1
00000BC0  48C1      1524          ext.l     D1
00000BC2  2F01      1525          move.l    D1,-(A7)
00000BC4  1212      1526          move.b    (A2),D1
00000BC6  4881      1527          ext.w     D1
00000BC8  48C1      1528          ext.l     D1
00000BCA  2F01      1529          move.l    D1,-(A7)
00000BCC  4EB8 030C 1530          jsr       _Get7HexDigits
00000BD0  DEFC 001C 1531          add.w     #28,A7
00000BD4  2400      1532          move.l    D0,D2
00000BD6  6000 FF64 1533          bra       main_26
                    1534   main_28:
                    1535   ; }
                    1536   ; printf("\r\nWriting to SRAM ...");
00000BDA  4879 0000 1537          pea       @m68kus~1_21.L
00000BDE  1202      
00000BE0  4E93      1538          jsr       (A3)
00000BE2  584F      1539          addq.w    #4,A7
                    1540   ; printf("\r\n............................................................................................................");
00000BE4  4879 0000 1541          pea       @m68kus~1_22.L
00000BE8  1218      
00000BEA  4E93      1542          jsr       (A3)
00000BEC  584F      1543          addq.w    #4,A7
                    1544   ; printf("\r\n............................................................................................................");
00000BEE  4879 0000 1545          pea       @m68kus~1_22.L
00000BF2  1218      
00000BF4  4E93      1546          jsr       (A3)
00000BF6  584F      1547          addq.w    #4,A7
                    1548   ; printf("\r\n............................................................................................................");
00000BF8  4879 0000 1549          pea       @m68kus~1_22.L
00000BFC  1218      
00000BFE  4E93      1550          jsr       (A3)
00000C00  584F      1551          addq.w    #4,A7
                    1552   ; switch (test_pattern) {
00000C02  202E FFEC 1553          move.l    -20(A6),D0
00000C06  5380      1554          subq.l    #1,D0
00000C08  6500 002C 1555          blo       main_29
00000C0C  0C80 0000 1556          cmp.l     #4,D0
00000C10  0004      
00000C12  6422      1557          bhs.s     main_29
00000C14  E380      1558          asl.l     #1,D0
00000C16  303B 0806 1559          move.w    main_31(PC,D0.L),D0
00000C1A  4EFB 0002 1560          jmp       main_31(PC,D0.W)
                    1561   main_31:
00000C1E  0008      1562          dc.w      main_32-main_31
00000C20  000C      1563          dc.w      main_33-main_31
00000C22  0010      1564          dc.w      main_34-main_31
00000C24  0014      1565          dc.w      main_35-main_31
                    1566   main_32:
                    1567   ; case 1: digit = '5';
00000C26  7835      1568          moveq     #53,D4
                    1569   ; break;
00000C28  600E      1570          bra.s     main_30
                    1571   main_33:
                    1572   ; case 2: digit = 'A';
00000C2A  7841      1573          moveq     #65,D4
                    1574   ; break;
00000C2C  600A      1575          bra.s     main_30
                    1576   main_34:
                    1577   ; case 3: digit = 'F';
00000C2E  7846      1578          moveq     #70,D4
                    1579   ; break;
00000C30  6006      1580          bra.s     main_30
                    1581   main_35:
                    1582   ; case 4: digit = '0';
00000C32  7830      1583          moveq     #48,D4
                    1584   ; break;
00000C34  6002      1585          bra.s     main_30
                    1586   main_29:
                    1587   ; default: digit = '5';
00000C36  7835      1588          moveq     #53,D4
                    1589   main_30:
                    1590   ; }
                    1591   ; switch (test_config) {
00000C38  202E FFE8 1592          move.l    -24(A6),D0
00000C3C  0C80 0000 1593          cmp.l     #2,D0
00000C40  0002      
00000C42  6700 004C 1594          beq       main_40
00000C46  6E0C      1595          bgt.s     main_43
00000C48  0C80 0000 1596          cmp.l     #1,D0
00000C4C  0001      
00000C4E  6712      1597          beq.s     main_39
00000C50  6000 0098 1598          bra       main_37
                    1599   main_43:
00000C54  0C80 0000 1600          cmp.l     #3,D0
00000C58  0003      
00000C5A  6700 0062 1601          beq       main_41
00000C5E  6000 008A 1602          bra       main_37
                    1603   main_39:
                    1604   ; case 1: FillMemory(start_val, end_val, Get2HexDigits(digit), 1);
00000C62  4878 0001 1605          pea       1
00000C66  2F00      1606          move.l    D0,-(A7)
00000C68  4884      1607          ext.w     D4
00000C6A  48C4      1608          ext.l     D4
00000C6C  2F04      1609          move.l    D4,-(A7)
00000C6E  4EB8 0260 1610          jsr       _Get2HexDigits
00000C72  584F      1611          addq.w    #4,A7
00000C74  2200      1612          move.l    D0,D1
00000C76  201F      1613          move.l    (A7)+,D0
00000C78  C2BC 0000 1614          and.l     #255,D1
00000C7C  00FF      
00000C7E  2F01      1615          move.l    D1,-(A7)
00000C80  2F02      1616          move.l    D2,-(A7)
00000C82  2F03      1617          move.l    D3,-(A7)
00000C84  4EB8 03F8 1618          jsr       _FillMemory
00000C88  DEFC 0010 1619          add.w     #16,A7
                    1620   ; break;
00000C8C  6000 0086 1621          bra       main_38
                    1622   main_40:
                    1623   ; case 2: FillMemory(start_val, end_val, Get4HexDigits(digit), 2);
00000C90  4878 0002 1624          pea       2
00000C94  2F00      1625          move.l    D0,-(A7)
00000C96  4884      1626          ext.w     D4
00000C98  48C4      1627          ext.l     D4
00000C9A  2F04      1628          move.l    D4,-(A7)
00000C9C  4EB8 02A6 1629          jsr       _Get4HexDigits
00000CA0  584F      1630          addq.w    #4,A7
00000CA2  2200      1631          move.l    D0,D1
00000CA4  201F      1632          move.l    (A7)+,D0
00000CA6  C2BC 0000 1633          and.l     #255,D1
00000CAA  00FF      
00000CAC  2F01      1634          move.l    D1,-(A7)
00000CAE  2F02      1635          move.l    D2,-(A7)
00000CB0  2F03      1636          move.l    D3,-(A7)
00000CB2  4EB8 03F8 1637          jsr       _FillMemory
00000CB6  DEFC 0010 1638          add.w     #16,A7
                    1639   ; break;
00000CBA  6000 0058 1640          bra       main_38
                    1641   main_41:
                    1642   ; case 3: FillMemory(start_val, end_val, Get8HexDigits(digit), 3);
00000CBE  4878 0003 1643          pea       3
00000CC2  2F00      1644          move.l    D0,-(A7)
00000CC4  4884      1645          ext.w     D4
00000CC6  48C4      1646          ext.l     D4
00000CC8  2F04      1647          move.l    D4,-(A7)
00000CCA  4EB8 02D8 1648          jsr       _Get8HexDigits
00000CCE  584F      1649          addq.w    #4,A7
00000CD0  2200      1650          move.l    D0,D1
00000CD2  201F      1651          move.l    (A7)+,D0
00000CD4  C2BC 0000 1652          and.l     #255,D1
00000CD8  00FF      
00000CDA  2F01      1653          move.l    D1,-(A7)
00000CDC  2F02      1654          move.l    D2,-(A7)
00000CDE  2F03      1655          move.l    D3,-(A7)
00000CE0  4EB8 03F8 1656          jsr       _FillMemory
00000CE4  DEFC 0010 1657          add.w     #16,A7
                    1658   ; break;
00000CE8  602A      1659          bra.s     main_38
                    1660   main_37:
                    1661   ; default: FillMemory(start_val, end_val, Get2HexDigits(digit), 1);;
00000CEA  4878 0001 1662          pea       1
00000CEE  2F00      1663          move.l    D0,-(A7)
00000CF0  4884      1664          ext.w     D4
00000CF2  48C4      1665          ext.l     D4
00000CF4  2F04      1666          move.l    D4,-(A7)
00000CF6  4EB8 0260 1667          jsr       _Get2HexDigits
00000CFA  584F      1668          addq.w    #4,A7
00000CFC  2200      1669          move.l    D0,D1
00000CFE  201F      1670          move.l    (A7)+,D0
00000D00  C2BC 0000 1671          and.l     #255,D1
00000D04  00FF      
00000D06  2F01      1672          move.l    D1,-(A7)
00000D08  2F02      1673          move.l    D2,-(A7)
00000D0A  2F03      1674          move.l    D3,-(A7)
00000D0C  4EB8 03F8 1675          jsr       _FillMemory
00000D10  DEFC 0010 1676          add.w     #16,A7
                    1677   main_38:
                    1678   ; }
                    1679   ; printf("\r\nFinished writing to SRAM .");
00000D14  4879 0000 1680          pea       @m68kus~1_23.L
00000D18  1288      
00000D1A  4E93      1681          jsr       (A3)
00000D1C  584F      1682          addq.w    #4,A7
                    1683   ; printf("\r\nCheck SRAM content");
00000D1E  4879 0000 1684          pea       @m68kus~1_24.L
00000D22  12A6      
00000D24  4E93      1685          jsr       (A3)
00000D26  584F      1686          addq.w    #4,A7
                    1687   ; printf("\r\nReading from SRAM ...");
00000D28  4879 0000 1688          pea       @m68kus~1_25.L
00000D2C  12BC      
00000D2E  4E93      1689          jsr       (A3)
00000D30  584F      1690          addq.w    #4,A7
                    1691   ; printf("\r\nPrinting out every 10k location from SRAM ...");
00000D32  4879 0000 1692          pea       @m68kus~1_26.L
00000D36  12D4      
00000D38  4E93      1693          jsr       (A3)
00000D3A  584F      1694          addq.w    #4,A7
                    1695   ; printf("\r\n............................................................................................................");
00000D3C  4879 0000 1696          pea       @m68kus~1_22.L
00000D40  1218      
00000D42  4E93      1697          jsr       (A3)
00000D44  584F      1698          addq.w    #4,A7
                    1699   ; printf("\r\n............................................................................................................");
00000D46  4879 0000 1700          pea       @m68kus~1_22.L
00000D4A  1218      
00000D4C  4E93      1701          jsr       (A3)
00000D4E  584F      1702          addq.w    #4,A7
                    1703   ; printf("\r\n............................................................................................................");
00000D50  4879 0000 1704          pea       @m68kus~1_22.L
00000D54  1218      
00000D56  4E93      1705          jsr       (A3)
00000D58  584F      1706          addq.w    #4,A7
                    1707   ; printf("\r\n....................... begin reading");
00000D5A  4879 0000 1708          pea       @m68kus~1_27.L
00000D5E  1304      
00000D60  4E93      1709          jsr       (A3)
00000D62  584F      1710          addq.w    #4,A7
                    1711   ; switch (test_config) {
00000D64  202E FFE8 1712          move.l    -24(A6),D0
00000D68  0C80 0000 1713          cmp.l     #2,D0
00000D6C  0002      
00000D6E  6700 004C 1714          beq       main_47
00000D72  6E0C      1715          bgt.s     main_50
00000D74  0C80 0000 1716          cmp.l     #1,D0
00000D78  0001      
00000D7A  6712      1717          beq.s     main_46
00000D7C  6000 0098 1718          bra       main_44
                    1719   main_50:
00000D80  0C80 0000 1720          cmp.l     #3,D0
00000D84  0003      
00000D86  6700 0062 1721          beq       main_48
00000D8A  6000 008A 1722          bra       main_44
                    1723   main_46:
                    1724   ; case 1: ReadMemory(start_val, end_val, Get2HexDigits(digit), 1);
00000D8E  4878 0001 1725          pea       1
00000D92  2F00      1726          move.l    D0,-(A7)
00000D94  4884      1727          ext.w     D4
00000D96  48C4      1728          ext.l     D4
00000D98  2F04      1729          move.l    D4,-(A7)
00000D9A  4EB8 0260 1730          jsr       _Get2HexDigits
00000D9E  584F      1731          addq.w    #4,A7
00000DA0  2200      1732          move.l    D0,D1
00000DA2  201F      1733          move.l    (A7)+,D0
00000DA4  C2BC 0000 1734          and.l     #255,D1
00000DA8  00FF      
00000DAA  2F01      1735          move.l    D1,-(A7)
00000DAC  2F02      1736          move.l    D2,-(A7)
00000DAE  2F03      1737          move.l    D3,-(A7)
00000DB0  4EB8 0478 1738          jsr       _ReadMemory
00000DB4  DEFC 0010 1739          add.w     #16,A7
                    1740   ; break;
00000DB8  6000 0086 1741          bra       main_45
                    1742   main_47:
                    1743   ; case 2: ReadMemory(start_val, end_val, Get4HexDigits(digit), 2);
00000DBC  4878 0002 1744          pea       2
00000DC0  2F00      1745          move.l    D0,-(A7)
00000DC2  4884      1746          ext.w     D4
00000DC4  48C4      1747          ext.l     D4
00000DC6  2F04      1748          move.l    D4,-(A7)
00000DC8  4EB8 02A6 1749          jsr       _Get4HexDigits
00000DCC  584F      1750          addq.w    #4,A7
00000DCE  2200      1751          move.l    D0,D1
00000DD0  201F      1752          move.l    (A7)+,D0
00000DD2  C2BC 0000 1753          and.l     #255,D1
00000DD6  00FF      
00000DD8  2F01      1754          move.l    D1,-(A7)
00000DDA  2F02      1755          move.l    D2,-(A7)
00000DDC  2F03      1756          move.l    D3,-(A7)
00000DDE  4EB8 0478 1757          jsr       _ReadMemory
00000DE2  DEFC 0010 1758          add.w     #16,A7
                    1759   ; break;
00000DE6  6000 0058 1760          bra       main_45
                    1761   main_48:
                    1762   ; case 3: ReadMemory(start_val, end_val, Get8HexDigits(digit), 3);
00000DEA  4878 0003 1763          pea       3
00000DEE  2F00      1764          move.l    D0,-(A7)
00000DF0  4884      1765          ext.w     D4
00000DF2  48C4      1766          ext.l     D4
00000DF4  2F04      1767          move.l    D4,-(A7)
00000DF6  4EB8 02D8 1768          jsr       _Get8HexDigits
00000DFA  584F      1769          addq.w    #4,A7
00000DFC  2200      1770          move.l    D0,D1
00000DFE  201F      1771          move.l    (A7)+,D0
00000E00  C2BC 0000 1772          and.l     #255,D1
00000E04  00FF      
00000E06  2F01      1773          move.l    D1,-(A7)
00000E08  2F02      1774          move.l    D2,-(A7)
00000E0A  2F03      1775          move.l    D3,-(A7)
00000E0C  4EB8 0478 1776          jsr       _ReadMemory
00000E10  DEFC 0010 1777          add.w     #16,A7
                    1778   ; break;
00000E14  602A      1779          bra.s     main_45
                    1780   main_44:
                    1781   ; default: ReadMemory(start_val, end_val, Get2HexDigits(digit), 1);;
00000E16  4878 0001 1782          pea       1
00000E1A  2F00      1783          move.l    D0,-(A7)
00000E1C  4884      1784          ext.w     D4
00000E1E  48C4      1785          ext.l     D4
00000E20  2F04      1786          move.l    D4,-(A7)
00000E22  4EB8 0260 1787          jsr       _Get2HexDigits
00000E26  584F      1788          addq.w    #4,A7
00000E28  2200      1789          move.l    D0,D1
00000E2A  201F      1790          move.l    (A7)+,D0
00000E2C  C2BC 0000 1791          and.l     #255,D1
00000E30  00FF      
00000E32  2F01      1792          move.l    D1,-(A7)
00000E34  2F02      1793          move.l    D2,-(A7)
00000E36  2F03      1794          move.l    D3,-(A7)
00000E38  4EB8 0478 1795          jsr       _ReadMemory
00000E3C  DEFC 0010 1796          add.w     #16,A7
                    1797   main_45:
                    1798   ; }
                    1799   ; printf("\r\nFinished reading from SRAM ...");
00000E40  4879 0000 1800          pea       @m68kus~1_28.L
00000E44  132C      
00000E46  4E93      1801          jsr       (A3)
00000E48  584F      1802          addq.w    #4,A7
                    1803   ; printf("\r\nend of program ...");
00000E4A  4879 0000 1804          pea       @m68kus~1_29.L
00000E4E  134E      
00000E50  4E93      1805          jsr       (A3)
00000E52  584F      1806          addq.w    #4,A7
                    1807   ; printf("\r\n............................................................................................................");
00000E54  4879 0000 1808          pea       @m68kus~1_22.L
00000E58  1218      
00000E5A  4E93      1809          jsr       (A3)
00000E5C  584F      1810          addq.w    #4,A7
                    1811   ; printf("\r\n............................................................................................................");
00000E5E  4879 0000 1812          pea       @m68kus~1_22.L
00000E62  1218      
00000E64  4E93      1813          jsr       (A3)
00000E66  584F      1814          addq.w    #4,A7
                    1815   ; // printf("\r\nEnter Integer: ") ;
                    1816   ; // scanf("%d", &i) ;
                    1817   ; // printf("You entered %d", i) ;
                    1818   ; // sprintf(text, "Hello CPEN 412 Student") ;
                    1819   ; // LCDLine1Message(text) ;
                    1820   ; // printf("\r\nHello CPEN 412 Student\r\nYour LEDs should be Flashing") ;
                    1821   ; // printf("\r\nYour LCD should be displaying") ;
                    1822   ; while(1);
                    1823   main_51:
00000E68  60FE      1824          bra       main_51
                    1825   ; // programs should NOT exit as there is nothing to Exit TO !!!!!!
                    1826   ; // There is no OS - just press the reset button to end program and call debug
                    1827   ; }
                    1828          section   const
                    1829   @m68kus~1_1:
00000E6A  0D0A 4669 1830          dc.b      13,10,70,105,108,108,105,110,103,32,65,100,100
00000E6E  6C6C 696E 
00000E72  6720 4164 
00000E76  64        
00000E77  7265 7373 1831          dc.b      114,101,115,115,101,115,32,91,36,37,48,56,88
00000E7B  6573 205B 
00000E7F  2425 3038 
00000E83  58        
00000E84  202D 2024 1832          dc.b      32,45,32,36,37,48,56,88,93,32,119,105,116,104
00000E88  2530 3858 
00000E8C  5D20 7769 
00000E90  7468      
00000E92  2024 2530 1833          dc.b      32,36,37,48,50,88,0
00000E96  3258 00   
                    1834   @m68kus~1_2:
00000E9A  0D0A 5265 1835          dc.b      13,10,82,101,97,100,105,110,103,32,65,100,100
00000E9E  6164 696E 
00000EA2  6720 4164 
00000EA6  64        
00000EA7  7265 7373 1836          dc.b      114,101,115,115,101,115,32,91,36,37,48,56,88
00000EAB  6573 205B 
00000EAF  2425 3038 
00000EB3  58        
00000EB4  202D 2024 1837          dc.b      32,45,32,36,37,48,56,88,93,32,102,111,114,32
00000EB8  2530 3858 
00000EBC  5D20 666F 
00000EC0  7220      
00000EC2  2425 3032 1838          dc.b      36,37,48,50,88,0
00000EC6  5800      
                    1839   @m68kus~1_3:
00000EC8  0D0A 5661 1840          dc.b      13,10,86,97,108,117,101,32,105,110,99,111,114
00000ECC  6C75 6520 
00000ED0  696E 636F 
00000ED4  72        
00000ED5  7265 6374 1841          dc.b      114,101,99,116,32,97,116,32,97,100,100,114,101
00000ED9  2061 7420 
00000EDD  6164 6472 
00000EE1  65        
00000EE2  7373 6573 1842          dc.b      115,115,101,115,32,36,37,48,56,88,32,46,46,46
00000EE6  2024 2530 
00000EEA  3858 202E 
00000EEE  2E2E      
00000EF0  2073 686F 1843          dc.b      32,115,104,111,117,108,100,32,98,101,32,36,37
00000EF4  756C 6420 
00000EF8  6265 2024 
00000EFC  25        
00000EFD  3032 5820 1844          dc.b      48,50,88,32,98,117,116,32,102,111,117,110,100
00000F01  6275 7420 
00000F05  666F 756E 
00000F09  64        
00000F0A  2024 2530 1845          dc.b      32,36,37,48,50,88,0
00000F0E  3258 00   
                    1846   @m68kus~1_4:
00000F12  0D0A 5661 1847          dc.b      13,10,86,97,108,117,101,58,32,36,37,48,50,88
00000F16  6C75 653A 
00000F1A  2024 2530 
00000F1E  3258      
00000F20  2066 6F75 1848          dc.b      32,102,111,117,110,100,32,97,116,32,65,100,100
00000F24  6E64 2061 
00000F28  7420 4164 
00000F2C  64        
00000F2D  7265 7373 1849          dc.b      114,101,115,115,58,32,36,37,48,56,88,0
00000F31  3A20 2425 
00000F35  3038 5800 
                    1850   @m68kus~1_5:
00000F3A  0D0A 5661 1851          dc.b      13,10,86,97,108,117,101,58,32,36,37,48,50,88
00000F3E  6C75 653A 
00000F42  2024 2530 
00000F46  3258      
00000F48  2024 2530 1852          dc.b      32,36,37,48,50,88,32,102,111,117,110,100,32
00000F4C  3258 2066 
00000F50  6F75 6E64 
00000F54  20        
00000F55  6174 2041 1853          dc.b      97,116,32,65,100,100,114,101,115,115,58,32,36
00000F59  6464 7265 
00000F5D  7373 3A20 
00000F61  24        
00000F62  2530 3858 1854          dc.b      37,48,56,88,32,45,32,36,37,48,56,88,0
00000F66  202D 2024 
00000F6A  2530 3858 
00000F6E  00        
                    1855   @m68kus~1_6:
00000F70  0D0A 5661 1856          dc.b      13,10,86,97,108,117,101,58,32,36,37,48,50,88
00000F74  6C75 653A 
00000F78  2024 2530 
00000F7C  3258      
00000F7E  2024 2530 1857          dc.b      32,36,37,48,50,88,32,36,37,48,50,88,32,36,37
00000F82  3258 2024 
00000F86  2530 3258 
00000F8A  2024 25   
00000F8D  3032 5820 1858          dc.b      48,50,88,32,102,111,117,110,100,32,97,116,32
00000F91  666F 756E 
00000F95  6420 6174 
00000F99  20        
00000F9A  4164 6472 1859          dc.b      65,100,100,114,101,115,115,58,32,36,37,48,56
00000F9E  6573 733A 
00000FA2  2024 2530 
00000FA6  38        
00000FA7  5820 2D20 1860          dc.b      88,32,45,32,36,37,48,56,88,0
00000FAB  2425 3038 
00000FAF  5800      
                    1861   @m68kus~1_7:
00000FB2  0D0A 456E 1862          dc.b      13,10,69,110,116,101,114,32,109,101,109,111
00000FB6  7465 7220 
00000FBA  6D65 6D6F 
00000FBE  7279 2074 1863          dc.b      114,121,32,116,101,115,116,32,99,111,110,102
00000FC2  6573 7420 
00000FC6  636F 6E66 
00000FCA  6967 7572 1864          dc.b      105,103,117,114,97,116,105,111,110,40,49,32
00000FCE  6174 696F 
00000FD2  6E28 3120 
00000FD6  2D20 6279 1865          dc.b      45,32,98,121,116,101,115,44,32,50,32,45,32,119
00000FDA  7465 732C 
00000FDE  2032 202D 
00000FE2  2077      
00000FE4  6F72 6473 1866          dc.b      111,114,100,115,44,32,51,32,45,32,108,111,110
00000FE8  2C20 3320 
00000FEC  2D20 6C6F 
00000FF0  6E        
00000FF1  6720 776F 1867          dc.b      103,32,119,111,114,100,115,41,58,32,0
00000FF5  7264 7329 
00000FF9  3A20 00   
                    1868   @m68kus~1_8:
00000FFC  2564 00   1869          dc.b      37,100,0
                    1870   @m68kus~1_9:
00001000  0D0A 436F 1871          dc.b      13,10,67,111,110,102,105,103,117,114,97,116
00001004  6E66 6967 
00001008  7572 6174 
0000100C  696F 6E20 1872          dc.b      105,111,110,32,105,110,118,97,108,105,100,44
00001010  696E 7661 
00001014  6C69 642C 
00001018  2074 7279 1873          dc.b      32,116,114,121,32,97,103,97,105,110,0
0000101C  2061 6761 
00001020  696E 00   
                    1874   @m68kus~1_10:
00001024  0D0A 4368 1875          dc.b      13,10,67,104,111,111,115,101,32,98,101,116,119
00001028  6F6F 7365 
0000102C  2062 6574 
00001030  77        
00001031  6565 6E20 1876          dc.b      101,101,110,32,100,105,102,102,101,114,101,110
00001035  6469 6666 
00001039  6572 656E 
0000103D  7420 6D65 1877          dc.b      116,32,109,101,109,111,114,121,32,116,101,115
00001041  6D6F 7279 
00001045  2074 6573 
00001049  7420 7061 1878          dc.b      116,32,112,97,116,116,101,114,110,115,40,49
0000104D  7474 6572 
00001051  6E73 2831 
00001055  202D 2035 1879          dc.b      32,45,32,53,44,32,50,32,45,32,65,44,32,51,32
00001059  2C20 3220 
0000105D  2D20 412C 
00001061  2033 20   
00001064  2D20 462C 1880          dc.b      45,32,70,44,32,52,32,45,32,48,41,58,32,0
00001068  2034 202D 
0000106C  2030 293A 
00001070  2000      
                    1881   @m68kus~1_11:
00001072  0D0A 5061 1882          dc.b      13,10,80,97,116,116,101,114,110,32,105,110,118
00001076  7474 6572 
0000107A  6E20 696E 
0000107E  76        
0000107F  616C 6964 1883          dc.b      97,108,105,100,44,32,116,114,121,32,97,103,97
00001083  2C20 7472 
00001087  7920 6167 
0000108B  61        
0000108C  696E 00   1884          dc.b      105,110,0
                    1885   @m68kus~1_12:
00001090  0D0A 456E 1886          dc.b      13,10,69,110,116,101,114,32,115,116,97,114,116
00001094  7465 7220 
00001098  7374 6172 
0000109C  74        
0000109D  696E 6720 1887          dc.b      105,110,103,32,97,100,100,114,101,115,115,40
000010A1  6164 6472 
000010A5  6573 7328 
000010A9  3830 3230 1888          dc.b      56,48,50,48,48,48,48,32,45,32,56,48,51,48,48
000010AD  3030 3020 
000010B1  2D20 3830 
000010B5  3330 30   
000010B8  3030 2069 1889          dc.b      48,48,32,105,110,99,108,117,115,105,118,101
000010BC  6E63 6C75 
000010C0  7369 7665 
000010C4  293A 2000 1890          dc.b      41,58,32,0
                    1891   @m68kus~1_13:
000010C8  2573 00   1892          dc.b      37,115,0
                    1893   @m68kus~1_14:
000010CC  0D0A 5374 1894          dc.b      13,10,83,116,97,114,116,105,110,103,32,97,100
000010D0  6172 7469 
000010D4  6E67 2061 
000010D8  64        
000010D9  6472 6573 1895          dc.b      100,114,101,115,115,32,111,117,116,32,111,102
000010DD  7320 6F75 
000010E1  7420 6F66 
000010E5  2062 6F75 1896          dc.b      32,98,111,117,110,100,115,46,46,32,116,114,121
000010E9  6E64 732E 
000010ED  2E20 7472 
000010F1  79        
000010F2  2061 6761 1897          dc.b      32,97,103,97,105,110,0
000010F6  696E 00   
                    1898   @m68kus~1_15:
000010FA  0D0A 4F64 1899          dc.b      13,10,79,100,100,32,115,116,97,114,116,105,110
000010FE  6420 7374 
00001102  6172 7469 
00001106  6E        
00001107  6720 6164 1900          dc.b      103,32,97,100,100,114,101,115,115,46,46,32,116
0000110B  6472 6573 
0000110F  732E 2E20 
00001113  74        
00001114  7279 2061 1901          dc.b      114,121,32,97,103,97,105,110,0
00001118  6761 696E 
0000111C  00        
                    1902   @m68kus~1_16:
0000111E  0D0A 456E 1903          dc.b      13,10,69,110,116,101,114,32,101,110,100,105
00001122  7465 7220 
00001126  656E 6469 
0000112A  6E67 2061 1904          dc.b      110,103,32,97,100,100,114,101,115,115,40,56
0000112E  6464 7265 
00001132  7373 2838 
00001136  3032 3030 1905          dc.b      48,50,48,48,48,48,32,45,32,56,48,51,48,48,48
0000113A  3030 202D 
0000113E  2038 3033 
00001142  3030 30   
00001145  3020 696E 1906          dc.b      48,32,105,110,99,108,117,115,105,118,101,41
00001149  636C 7573 
0000114D  6976 6529 
00001151  3A20 00   1907          dc.b      58,32,0
                    1908   @m68kus~1_17:
00001154  0D0A 456E 1909          dc.b      13,10,69,110,100,105,110,103,32,97,100,100,114
00001158  6469 6E67 
0000115C  2061 6464 
00001160  72        
00001161  6573 7320 1910          dc.b      101,115,115,32,111,117,116,32,111,102,32,98
00001165  6F75 7420 
00001169  6F66 2062 
0000116D  6F75 6E64 1911          dc.b      111,117,110,100,115,46,46,32,116,114,121,32
00001171  732E 2E20 
00001175  7472 7920 
00001179  6167 6169 1912          dc.b      97,103,97,105,110,0
0000117D  6E00      
                    1913   @m68kus~1_18:
00001180  0D0A 496E 1914          dc.b      13,10,73,110,118,97,108,105,100,32,101,110,100
00001184  7661 6C69 
00001188  6420 656E 
0000118C  64        
0000118D  696E 6720 1915          dc.b      105,110,103,32,97,100,100,114,101,115,115,46
00001191  6164 6472 
00001195  6573 732E 
00001199  2E20 7472 1916          dc.b      46,32,116,114,121,32,97,103,97,105,110,0
0000119D  7920 6167 
000011A1  6169 6E00 
                    1917   @m68kus~1_19:
000011A6  0D0A 496E 1918          dc.b      13,10,73,110,118,97,108,105,100,32,97,100,100
000011AA  7661 6C69 
000011AE  6420 6164 
000011B2  64        
000011B3  7265 7373 1919          dc.b      114,101,115,115,32,114,97,110,103,101,32,105
000011B7  2072 616E 
000011BB  6765 2069 
000011BF  7320 746F 1920          dc.b      115,32,116,111,111,32,115,109,97,108,108,46
000011C3  6F20 736D 
000011C7  616C 6C2E 
000011CB  2E20 7472 1921          dc.b      46,32,116,114,121,32,97,103,97,105,110,0
000011CF  7920 6167 
000011D3  6169 6E00 
                    1922   @m68kus~1_20:
000011D8  0D0A 496E 1923          dc.b      13,10,73,110,118,97,108,105,100,32,114,97,110
000011DC  7661 6C69 
000011E0  6420 7261 
000011E4  6E        
000011E5  6765 2069 1924          dc.b      103,101,32,105,115,32,116,111,111,32,115,109
000011E9  7320 746F 
000011ED  6F20 736D 
000011F1  616C 6C2E 1925          dc.b      97,108,108,46,46,32,116,114,121,32,97,103,97
000011F5  2E20 7472 
000011F9  7920 6167 
000011FD  61        
000011FE  696E 00   1926          dc.b      105,110,0
                    1927   @m68kus~1_21:
00001202  0D0A 5772 1928          dc.b      13,10,87,114,105,116,105,110,103,32,116,111
00001206  6974 696E 
0000120A  6720 746F 
0000120E  2053 5241 1929          dc.b      32,83,82,65,77,32,46,46,46,0
00001212  4D20 2E2E 
00001216  2E00      
                    1930   @m68kus~1_22:
00001218  0D0A 2E2E 1931          dc.b      13,10,46,46,46,46,46,46,46,46,46,46,46,46,46
0000121C  2E2E 2E2E 
00001220  2E2E 2E2E 
00001224  2E2E 2E   
00001227  2E2E 2E2E 1932          dc.b      46,46,46,46,46,46,46,46,46,46,46,46,46,46,46
0000122B  2E2E 2E2E 
0000122F  2E2E 2E2E 
00001233  2E2E 2E   
00001236  2E2E 2E2E 1933          dc.b      46,46,46,46,46,46,46,46,46,46,46,46,46,46,46
0000123A  2E2E 2E2E 
0000123E  2E2E 2E2E 
00001242  2E2E 2E   
00001245  2E2E 2E2E 1934          dc.b      46,46,46,46,46,46,46,46,46,46,46,46,46,46,46
00001249  2E2E 2E2E 
0000124D  2E2E 2E2E 
00001251  2E2E 2E   
00001254  2E2E 2E2E 1935          dc.b      46,46,46,46,46,46,46,46,46,46,46,46,46,46,46
00001258  2E2E 2E2E 
0000125C  2E2E 2E2E 
00001260  2E2E 2E   
00001263  2E2E 2E2E 1936          dc.b      46,46,46,46,46,46,46,46,46,46,46,46,46,46,46
00001267  2E2E 2E2E 
0000126B  2E2E 2E2E 
0000126F  2E2E 2E   
00001272  2E2E 2E2E 1937          dc.b      46,46,46,46,46,46,46,46,46,46,46,46,46,46,46
00001276  2E2E 2E2E 
0000127A  2E2E 2E2E 
0000127E  2E2E 2E   
00001281  2E2E 2E2E 1938          dc.b      46,46,46,46,46,0
00001285  2E00      
                    1939   @m68kus~1_23:
00001288  0D0A 4669 1940          dc.b      13,10,70,105,110,105,115,104,101,100,32,119
0000128C  6E69 7368 
00001290  6564 2077 
00001294  7269 7469 1941          dc.b      114,105,116,105,110,103,32,116,111,32,83,82
00001298  6E67 2074 
0000129C  6F20 5352 
000012A0  414D 202E 1942          dc.b      65,77,32,46,0
000012A4  00        
                    1943   @m68kus~1_24:
000012A6  0D0A 4368 1944          dc.b      13,10,67,104,101,99,107,32,83,82,65,77,32,99
000012AA  6563 6B20 
000012AE  5352 414D 
000012B2  2063      
000012B4  6F6E 7465 1945          dc.b      111,110,116,101,110,116,0
000012B8  6E74 00   
                    1946   @m68kus~1_25:
000012BC  0D0A 5265 1947          dc.b      13,10,82,101,97,100,105,110,103,32,102,114,111
000012C0  6164 696E 
000012C4  6720 6672 
000012C8  6F        
000012C9  6D20 5352 1948          dc.b      109,32,83,82,65,77,32,46,46,46,0
000012CD  414D 202E 
000012D1  2E2E 00   
                    1949   @m68kus~1_26:
000012D4  0D0A 5072 1950          dc.b      13,10,80,114,105,110,116,105,110,103,32,111
000012D8  696E 7469 
000012DC  6E67 206F 
000012E0  7574 2065 1951          dc.b      117,116,32,101,118,101,114,121,32,49,48,107
000012E4  7665 7279 
000012E8  2031 306B 
000012EC  206C 6F63 1952          dc.b      32,108,111,99,97,116,105,111,110,32,102,114
000012F0  6174 696F 
000012F4  6E20 6672 
000012F8  6F6D 2053 1953          dc.b      111,109,32,83,82,65,77,32,46,46,46,0
000012FC  5241 4D20 
00001300  2E2E 2E00 
                    1954   @m68kus~1_27:
00001304  0D0A 2E2E 1955          dc.b      13,10,46,46,46,46,46,46,46,46,46,46,46,46,46
00001308  2E2E 2E2E 
0000130C  2E2E 2E2E 
00001310  2E2E 2E   
00001313  2E2E 2E2E 1956          dc.b      46,46,46,46,46,46,46,46,46,46,32,98,101,103
00001317  2E2E 2E2E 
0000131B  2E2E 2062 
0000131F  6567      
00001321  696E 2072 1957          dc.b      105,110,32,114,101,97,100,105,110,103,0
00001325  6561 6469 
00001329  6E67 00   
                    1958   @m68kus~1_28:
0000132C  0D0A 4669 1959          dc.b      13,10,70,105,110,105,115,104,101,100,32,114
00001330  6E69 7368 
00001334  6564 2072 
00001338  6561 6469 1960          dc.b      101,97,100,105,110,103,32,102,114,111,109,32
0000133C  6E67 2066 
00001340  726F 6D20 
00001344  5352 414D 1961          dc.b      83,82,65,77,32,46,46,46,0
00001348  202E 2E2E 
0000134C  00        
                    1962   @m68kus~1_29:
0000134E  0D0A 656E 1963          dc.b      13,10,101,110,100,32,111,102,32,112,114,111
00001352  6420 6F66 
00001356  2070 726F 
0000135A  6772 616D 1964          dc.b      103,114,97,109,32,46,46,46,0
0000135E  202E 2E2E 
00001362  00        
                    1965          section   bss
                    1966          xdef      _i
                    1967   _i:
00001364            1968          ds.b      4
                    1969          xdef      _x
                    1970   _x:
00001368            1971          ds.b      4
                    1972          xdef      _y
                    1973   _y:
0000136C            1974          ds.b      4
                    1975          xdef      _z
                    1976   _z:
00001370            1977          ds.b      4
                    1978          xdef      _PortA_Count
                    1979   _PortA_Count:
00001374            1980          ds.b      4
                    1981          xdef      _Timer1Count
                    1982   _Timer1Count:
00001378            1983          ds.b      1
                    1984          xdef      _Timer2Count
                    1985   _Timer2Count:
0000137A            1986          ds.b      1
                    1987          xdef      _Timer3Count
                    1988   _Timer3Count:
0000137C            1989          ds.b      1
                    1990          xdef      _Timer4Count
                    1991   _Timer4Count:
0000137E            1992          ds.b      1
                    1993          xref      LDIV
                    1994          xref      _strlen
                    1995          xref      _scanf
                    1996          xref      _scanflush
                    1997          xref      _printf
          0000 0000

Assembly errors: 10
