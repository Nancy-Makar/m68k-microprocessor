680x0 MACRO ASSEMBLER   Version 5.00   (c) 1992-2005 Peter J. Fondse

Date: 25 Jan 2023      Time: 13:30:39          Source: C:\CPEN412\LAB1\M68KV6.0 - 800BY480\PROGRAMS\DEBUGMONITORCODE\DEBUGMONITORINTEGRATION.SRC

                       1          section   code
                       2   ; for initial stack use $08040000 if your system uses SRAM for main memory (top of 256kbyte SRAM space)
                       3   ; When your system is converted to use DRAM for main memory set this constant to $0C000000 (top of 64MByte DRAM space
                       4   
          0804 0000    5   StackPointerVal     equ $08040000      when using sram
                       6   ;StackPointerVal     equ $0C000000      when using dram
                       7   
                       8   ; define RamVectorTable as $0803000 if your system uses SRAM for main memory
                       9   ; When your system is converted to use DRAM for main memory define RamVectorTable constant as $0B000000 (top of 64MByte DRAM space)
                      10   
          0803 0000   11   RamVectorTable      equ $08030000      when using sram
                      12   ;RamVectorTable      equ $0B000000      when using dram
                      13   
                      14   
                      15   
                      16   ; CSTART.ASM  -  C startup-code for Debug Monitor
00000000              17                   align
                      18   
00000000              19                   org $00000000          ;start of rom based vector table, 68k hard wired to expect this at $0
                      20   
00000000  0804 0000   21   InitialSP       dc.l StackPointerVal   ;initial supervisor state stack pointer(stack decrements first before being used)
00000004  0000 0400   22   InitialPC       dc.l start             ;address of 1st instruction of program after a reset
00000008  0000 0802   23   BusError        dc.l E_BErro           ;bus error - stop program
0000000C  0000 0814   24   AddressError    dc.l E_AErro           ;address error - stop program
00000010  0000 0826   25   IllegalInstr    dc.l E_IInst           ;illegal instruction - stop program
00000014  0000 0838   26   DividebyZero    dc.l E_DZero           ;divide by zero error - stop program
00000018  0000 084A   27   Check           dc.l E_Check           ;Check instruction - stop program
0000001C  0000 085C   28   TrapV           dc.l E_Trapv           ;Trapv instruction - stop program
00000020  0000 086E   29   Privilege       dc.l E_Priv            ;privilige violation - stop program
00000024  0000 0880   30   Trace           dc.l E_Trace           ;stop on trace
00000028  0000 0892   31   Line1010emul    dc.l E_1010            ;1010 instructions stop
0000002C  0000 08A4   32   Line1111emul    dc.l E_1111            ;1111 instructions stop
00000030  0000 08B6   33   Unassigned1     dc.l E_Unnas1           ;unassigned vector
00000034  0000 08B6   34   Unassigned2     dc.l E_Unnas2           ;unassigned vector
00000038  0000 08B6   35   Unassigned3     dc.l E_Unnas3           ;unassigned vector
0000003C  0000 08B6   36   Uninit_IRQ      dc.l E_UnitI           ;uninitialised interrupt
00000040  0000 08B6   37   Unassigned4     dc.l E_Unnas4           ;unassigned vector
00000044  0000 08B6   38   Unassigned5     dc.l E_Unnas5           ;unassigned vector
00000048  0000 08B6   39   Unassigned6     dc.l E_Unnas6           ;unassigned vector
0000004C  0000 08B6   40   Unassigned7     dc.l E_Unnas7           ;unassigned vector
00000050  0000 08B6   41   Unassigned8     dc.l E_Unnas8           ;unassigned vector
00000054  0000 08B6   42   Unassigned9     dc.l E_Unnas9           ;unassigned vector
00000058  0000 08B6   43   Unassigned10    dc.l E_Unnas10           ;unassigned vector
0000005C  0000 08B6   44   Unassigned11    dc.l E_Unnas11           ;unassigned vector
00000060  0000 08B6   45   SpuriousIRQ     dc.l E_Spuri           ;stop on spurious irq
                      46   *
                      47   *
00000064  0000 049A   48   Level1IRQ       dc.l Level1RamISR
00000068  0000 04AC   49   Level2IRQ       dc.l Level2RamISR
0000006C  0000 04BE   50   Level3IRQ       dc.l Level3RamISR
00000070  0000 04D0   51   Level4IRQ       dc.l Level4RamISR
00000074  0000 04E2   52   Level5IRQ       dc.l Level5RamISR
00000078  0000 05EC   53   Level6IRQ       dc.l Level6RamISR
0000007C  0000 05FE   54   Level7IRQ       dc.l Level7RamISR
                      55   *
                      56   *
00000080  0000 0610   57   Trap0           dc.l Trap0RamISR        ; User installed trap handler
00000084  0000 0622   58   Trap1           dc.l Trap1RamISR        ; User installed trap handler
00000088  0000 0634   59   Trap2           dc.l Trap2RamISR        ; User installed trap handler
0000008C  0000 0646   60   Trap3           dc.l Trap3RamISR        ; User installed trap handler
00000090  0000 0658   61   Trap4           dc.l Trap4RamISR        ; User installed trap handler
00000094  0000 066A   62   Trap5           dc.l Trap5RamISR        ; User installed trap handler
00000098  0000 067C   63   Trap6           dc.l Trap6RamISR        ; User installed trap handler
0000009C  0000 068E   64   Trap7           dc.l Trap7RamISR        ; User installed trap handler
000000A0  0000 06A0   65   Trap8           dc.l Trap8RamISR        ; User installed trap handler
000000A4  0000 06B2   66   Trap9           dc.l Trap9RamISR        ; User installed trap handler
000000A8  0000 06C4   67   Trap10          dc.l Trap10RamISR       ; User installed trap handler
000000AC  0000 06D6   68   Trap11          dc.l Trap11RamISR       ; User installed trap handler
000000B0  0000 06E8   69   Trap12          dc.l Trap12RamISR       ; User installed trap handler
000000B4  0000 06FA   70   Trap13          dc.l Trap13RamISR       ; User installed trap handler
000000B8  0000 070C   71   Trap14          dc.l Trap14RamISR       ; User installed trap handler
000000BC  0000 07FC   72   Trap15          dc.l Trap15RamISR       ; User installed trap handler
                      73   
                      74   *
                      75   * Other vectors 64-255 are users vectors for autovectored IO device (not implemented in TG68)
                      76   *
                      77   
00000400              78                   org       $00000400
                      79   
00000400  46FC 2700   80   start:          move.w     #$2700,SR             set interrupts to disable until later
                      81   
                      82   *************************************************************************************
                      83   ** add some 68000 instruction to read and write to memory, IO etc. This doesn't do anything
                      84   ** important, it just creates read and write bus cycles to specific addresses which
                      85   ** help with debugging hardware in Quartus simulations
                      86   **************************************************************************************
                      87   
                      88                   ; perform some dummy read/write of 32 bit values to memory to see waveforms during a simulation
                      89   
00000404  23FC 1122   90                   move.l     #$11223344,$08060000 write 32 bits, to memory
00000408  3344 0806 
0000040C  0000      
0000040E  2039 0806   91                   move.l     $08060000,d0         read 32 bits back
00000412  0000      
00000414  13FC 0000   92                   move.b     #$00,$00400000         write to the output ports
00000418  0040 0000 
0000041C  13FC 0000   93                   move.b     #$00,$00400002         write to the output ports
00000420  0040 0002 
00000424  13FC 0000   94                   move.b     #$00,$00400004         write to the output ports
00000428  0040 0004 
0000042C  13FC 0000   95                   move.b     #$00,$00400006         write to the output ports
00000430  0040 0006 
00000434  13FC 0000   96                   move.b     #$00,$00400008         write to the output ports
00000438  0040 0008 
0000043C  13FC 0000   97                   move.b     #$00,$00400010         write to the hex display ports
00000440  0040 0010 
00000444  13FC 0000   98                   move.b     #$00,$00400012         write to the hex display ports
00000448  0040 0012 
0000044C  13FC 0000   99                   move.b     #$00,$00400014         write to the hex display ports
00000450  0040 0014 
00000454  13FC 0000  100                   move.b     #0,$00400020         write to the LCD
00000458  0040 0020 
0000045C  13FC 0000  101                   move.b     #0,$00400022         write to the LCD
00000460  0040 0022 
00000464  13FC 0000  102                   move.b     #0,$00400030         write to the Timer1 Data
00000468  0040 0030 
0000046C  13FC 0000  103                   move.b     #0,$00400032         write to the Timer1 Control
00000470  0040 0032 
                     104   
                     105                   ; some important initialisation do not modify
00000474  23FC FFFF  106                   move.l    #-1,__ungetbuf  ; unget-buffer for keyboard input
00000478  FFFF 0803 
0000047C  00C0      
0000047E  23FC 0000  107                   move.l    #0,__allocp     ; pointer to allocated memory for malloc-function
00000482  0000 0803 
00000486  00C4      
00000488  23FC 0803  108                   move.l    #heap,__heap    ; pointer to free memory
0000048C  0596 0803 
00000490  00C4      
                     109   
                     110   
00000492  4EB9 0000  111   mainloop        jsr       _main
00000496  2EA6      
00000498  60F8       112                   bra       mainloop
                     113   
                     114   *********************************************************************************************************
                     115   * Code to call Ram Based Interrupt handler and other exeception handler code
                     116   *********************************************************************************************************
0000049A  48E7 FFFE  117   Level1RamISR    movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
0000049E  2079 0803  118                   move.l    VL1IRQ,a0               get ram based address into a0
000004A2  0064      
000004A4  4E90       119                   jsr       0(a0)                   jump to the subroutine that is the interrupt handler, using ram based address
000004A6  4CDF 7FFF  120                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
000004AA  4E73       121                   rte
000004AC  48E7 FFFE  122   Level2RamISR    movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
000004B0  2079 0803  123                   move.l    VL2IRQ,a0               get ram based address into a0
000004B4  0068      
000004B6  4E90       124                   jsr       0(a0)                   jump to the subroutine that is the interrupt handler, using ram based address
000004B8  4CDF 7FFF  125                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
000004BC  4E73       126                   rte
000004BE  48E7 FFFE  127   Level3RamISR    movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
000004C2  2079 0803  128                   move.l    VL3IRQ,a0               get ram based address into a0
000004C6  006C      
000004C8  4E90       129                   jsr       0(a0)                   jump to the subroutine that is the interrupt handler, using ram based address
000004CA  4CDF 7FFF  130                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
000004CE  4E73       131                   rte
000004D0  48E7 FFFE  132   Level4RamISR    movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
000004D4  2079 0803  133                   move.l    VL4IRQ,a0               get ram based address into a0
000004D8  0070      
000004DA  4E90       134                   jsr       0(a0)                   jump to the subroutine that is the interrupt handler, using ram based address
000004DC  4CDF 7FFF  135                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
000004E0  4E73       136                   rte
                     137   
                     138   * Trace trap Handler
                     139   
                     140   Level5RamISR
                     141   *
                     142   **         Copy 68000 registers from debug monitor Variables,
                     143   *
                     144   *
000004E2  23FC 0000  145                   move.l    #1,_Trace              switch on Trace Mode
000004E6  0001 0803 
000004EA  00D8      
000004EC  13FC 0000  146                   move.b    #$0,$0040000A          turn off a trace exception so we don't when generate a trace when disassembling instruction in the register dump (disassembling causes access to use program)
000004F0  0040 000A 
000004F4  33DF 0803  147                   move.w    (sp)+,_SR              get at the users status register pointed to by stack pointer and copy
000004F8  012C      
000004FA  23DF 0803  148                   move.l    (sp)+,_PC              get at the users program counter and copy
000004FE  0120      
                     149   *
00000500  23CF 0803  150                   move.l    SP,_SSP                copy system stack pointer to debug monitor variable
00000504  0124      
00000506  23C0 0803  151                   move.l    d0,_d0
0000050A  00E4      
0000050C  23C1 0803  152                   move.l    d1,_d1
00000510  00E8      
00000512  23C2 0803  153                   move.l    d2,_d2
00000516  00EC      
00000518  23C3 0803  154                   move.l    d3,_d3
0000051C  00F0      
0000051E  23C4 0803  155                   move.l    d4,_d4
00000522  00F4      
00000524  23C5 0803  156                   move.l    d5,_d5
00000528  00F8      
0000052A  23C6 0803  157                   move.l    d6,_d6
0000052E  00FC      
00000530  23C7 0803  158                   move.l    d7,_d7
00000534  0100      
                     159   *
00000536  23C8 0803  160                   move.l    a0,_a0
0000053A  0104      
0000053C  23C9 0803  161                   move.l    a1,_a1
00000540  0108      
00000542  23CA 0803  162                   move.l    a2,_a2
00000546  010C      
00000548  23CB 0803  163                   move.l    a3,_a3
0000054C  0110      
0000054E  23CC 0803  164                   move.l    a4,_a4
00000552  0114      
00000554  23CD 0803  165                   move.l    a5,_a5
00000558  0118      
0000055A  23CE 0803  166                   move.l    a6,_a6
0000055E  011C      
00000560  4E68       167                   move.l    usp,a0
00000562  23C8 0803  168                   move.l    a0,_USP
00000566  0128      
                     169   *
00000568  2079 0803  170                   move.l    VL5IRQ,a0              get ram based address into a0, trace exception for next instruction will be generated in Menu SPACE command
0000056C  0074      
0000056E  4E90       171                   jsr       0(a0)                  jump to the subroutine that is the trap handler, using ram based address
                     172   
                     173   ** After trace, reload 68000 registers with new values before continuing
                     174   
00000570  2039 0803  175                   move.l   _d0,d0
00000574  00E4      
00000576  2239 0803  176                   move.l   _d1,d1
0000057A  00E8      
0000057C  2439 0803  177                   move.l   _d2,d2
00000580  00EC      
00000582  2639 0803  178                   move.l   _d3,d3
00000586  00F0      
00000588  2839 0803  179                   move.l   _d4,d4
0000058C  00F4      
0000058E  2A39 0803  180                   move.l   _d5,d5
00000592  00F8      
00000594  2C39 0803  181                   move.l   _d6,d6
00000598  00FC      
0000059A  2E39 0803  182                   move.l   _d7,d7
0000059E  0100      
                     183   
000005A0  2079 0803  184                   move.l   _USP,a0
000005A4  0128      
000005A6  4E60       185                   move.l   a0,USP                     load user stack pointer
000005A8  2079 0803  186                   move.l   _a0,a0
000005AC  0104      
000005AE  2279 0803  187                   move.l   _a1,a1
000005B2  0108      
000005B4  2479 0803  188                   move.l   _a2,a2
000005B8  010C      
000005BA  2679 0803  189                   move.l   _a3,a3
000005BE  0110      
000005C0  2879 0803  190                   move.l   _a4,a4
000005C4  0114      
000005C6  2A79 0803  191                   move.l   _a5,a5
000005CA  0118      
000005CC  2C79 0803  192                   move.l   _a6,a6
000005D0  011C      
                     193   
000005D2  2E79 0803  194                   move.l   _SSP,sp
000005D6  0124      
000005D8  2F39 0803  195                   move.l   _PC,-(sp)
000005DC  0120      
000005DE  3F39 0803  196                   move.w   _SR,-(sp)
000005E2  012C      
000005E4  11F8 0074  197                   move.b    $00000074,$0	          read trace exception vector after accessing disassembly to reset the trace request causes by disassembling program above
000005E8  0000      
000005EA  4E73       198                   rte
                     199   
                     200   * address trap handler
                     201   
000005EC  48E7 FFFE  202   Level6RamISR    movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
000005F0  2079 0803  203                   move.l    VL6IRQ,a0               get ram based address into a0
000005F4  0078      
000005F6  4E90       204                   jsr       0(a0)                   jump to the subroutine that is the interrupt handler, using ram based address
000005F8  4CDF 7FFF  205                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
000005FC  4E73       206                   rte
                     207   
000005FE  48E7 FFFE  208   Level7RamISR    movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000602  2079 0803  209                   move.l    VL7IRQ,a0               get ram based address into a0
00000606  007C      
00000608  4E90       210                   jsr       0(a0)                   jump to the subroutine that is the interrupt handler, using ram based address
0000060A  4CDF 7FFF  211                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
0000060E  4E73       212                   rte
                     213   
                     214   
                     215   ********************************************************************************************************
                     216   * Ram based Trap handler and other exeception handler code
                     217   *********************************************************************************************************
                     218   
00000610  48E7 FFFE  219   Trap0RamISR     movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000614  2079 0803  220                   move.l    VTrap0,a0                get ram based address into a0
00000618  0080      
0000061A  4E90       221                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
0000061C  4CDF 7FFF  222                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
00000620  4E73       223                   rte
                     224   
00000622  48E7 FFFE  225   Trap1RamISR     movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000626  2079 0803  226                   move.l    VTrap1,a0                get ram based address into a0
0000062A  0084      
0000062C  4E90       227                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
0000062E  4CDF 7FFF  228                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
00000632  4E73       229                   rte
                     230   
00000634  48E7 FFFE  231   Trap2RamISR     movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000638  2079 0803  232                   move.l    VTrap2,a0                get ram based address into a0
0000063C  0088      
0000063E  4E90       233                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
00000640  4CDF 7FFF  234                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
00000644  4E73       235                   rte
                     236   
00000646  48E7 FFFE  237   Trap3RamISR     movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
0000064A  2079 0803  238                   move.l    VTrap3,a0                get ram based address into a0
0000064E  008C      
00000650  4E90       239                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
00000652  4CDF 7FFF  240                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
00000656  4E73       241                   rte
                     242   
00000658  48E7 FFFE  243   Trap4RamISR     movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
0000065C  2079 0803  244                   move.l    VTrap4,a0                get ram based address into a0
00000660  0090      
00000662  4E90       245                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
00000664  4CDF 7FFF  246                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
00000668  4E73       247                   rte
                     248   
0000066A  48E7 FFFE  249   Trap5RamISR     movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
0000066E  2079 0803  250                   move.l    VTrap5,a0                get ram based address into a0
00000672  0094      
00000674  4E90       251                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
00000676  4CDF 7FFF  252                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
0000067A  4E73       253                   rte
                     254   
0000067C  48E7 FFFE  255   Trap6RamISR     movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000680  2079 0803  256                   move.l    VTrap6,a0                get ram based address into a0
00000684  0098      
00000686  4E90       257                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
00000688  4CDF 7FFF  258                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
0000068C  4E73       259                   rte
                     260   
0000068E  48E7 FFFE  261   Trap7RamISR     movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000692  2079 0803  262                   move.l    VTrap7,a0                get ram based address into a0
00000696  009C      
00000698  4E90       263                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
0000069A  4CDF 7FFF  264                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
0000069E  4E73       265                   rte
                     266   
000006A0  48E7 FFFE  267   Trap8RamISR     movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
000006A4  2079 0803  268                   move.l    VTrap8,a0                get ram based address into a0
000006A8  00A0      
000006AA  4E90       269                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
000006AC  4CDF 7FFF  270                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
000006B0  4E73       271                   rte
                     272   
000006B2  48E7 FFFE  273   Trap9RamISR     movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
000006B6  2079 0803  274                   move.l    VTrap9,a0                get ram based address into a0
000006BA  00A4      
000006BC  4E90       275                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
000006BE  4CDF 7FFF  276                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
000006C2  4E73       277                   rte
                     278   
000006C4  48E7 FFFE  279   Trap10RamISR    movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
000006C8  2079 0803  280                   move.l    VTrap10,a0                get ram based address into a0
000006CC  00A8      
000006CE  4E90       281                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
000006D0  4CDF 7FFF  282                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
000006D4  4E73       283                   rte
                     284   
000006D6  48E7 FFFE  285   Trap11RamISR    movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
000006DA  2079 0803  286                   move.l    VTrap11,a0                get ram based address into a0
000006DE  00AC      
000006E0  4E90       287                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
000006E2  4CDF 7FFF  288                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
000006E6  4E73       289                   rte
                     290   
000006E8  48E7 FFFE  291   Trap12RamISR    movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
000006EC  2079 0803  292                   move.l    VTrap12,a0                get ram based address into a0
000006F0  00B0      
000006F2  4E90       293                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
000006F4  4CDF 7FFF  294                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
000006F8  4E73       295                   rte
                     296   
000006FA  48E7 FFFE  297   Trap13RamISR    movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
000006FE  2079 0803  298                   move.l    VTrap13,a0                get ram based address into a0
00000702  00B4      
00000704  4E90       299                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
00000706  4CDF 7FFF  300                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
0000070A  4E73       301                   rte
                     302   
                     303   Trap14RamISR    ;Break Point Handler
                     304   *
                     305   **         Copy 68000 registers from debug monitor Variables
                     306   *
0000070C  23FC 0000  307                   move.l    #1,_Trace      switch on Trace Mode
00000710  0001 0803 
00000714  00D8      
00000716  33DF 0803  308                   move.w    (sp)+,_SR       get at the users status register pointed to by stack pointer and copy
0000071A  012C      
0000071C  23DF 0803  309                   move.l    (sp)+,_PC      get at the users program counter and copy
00000720  0120      
                     310   *
00000722  23C0 0803  311                   move.l    d0,_d0
00000726  00E4      
00000728  23C1 0803  312                   move.l    d1,_d1
0000072C  00E8      
0000072E  23C2 0803  313                   move.l    d2,_d2
00000732  00EC      
00000734  23C3 0803  314                   move.l    d3,_d3
00000738  00F0      
0000073A  23C4 0803  315                   move.l    d4,_d4
0000073E  00F4      
00000740  23C5 0803  316                   move.l    d5,_d5
00000744  00F8      
00000746  23C6 0803  317                   move.l    d6,_d6
0000074A  00FC      
0000074C  23C7 0803  318                   move.l    d7,_d7
00000750  0100      
                     319   *
00000752  23C8 0803  320                   move.l    a0,_a0
00000756  0104      
00000758  23C9 0803  321                   move.l    a1,_a1
0000075C  0108      
0000075E  23CA 0803  322                   move.l    a2,_a2
00000762  010C      
00000764  23CB 0803  323                   move.l    a3,_a3
00000768  0110      
0000076A  23CC 0803  324                   move.l    a4,_a4
0000076E  0114      
00000770  23CD 0803  325                   move.l    a5,_a5
00000774  0118      
00000776  23CE 0803  326                   move.l    a6,_a6
0000077A  011C      
0000077C  4E68       327                   move.l    USP,a0
0000077E  23C8 0803  328                   move.l    a0,_USP
00000782  0128      
                     329   *
00000784  2079 0803  330                   move.l    VTrap14,a0             get ram based address into a0
00000788  00B8      
0000078A  4E90       331                   jsr       0(a0)                  jump to the subroutine that is the trap handler, using ram based address
                     332   
                     333   ** After breakpoint reload 68000 registers with new values before continuing
                     334   
                     335   *                move.b    #$ff,$0040000A     generate a trace exception for the next instruction
0000078C  2039 0803  336                   move.l   _d0,d0
00000790  00E4      
00000792  2239 0803  337                   move.l   _d1,d1
00000796  00E8      
00000798  2439 0803  338                   move.l   _d2,d2
0000079C  00EC      
0000079E  2639 0803  339                   move.l   _d3,d3
000007A2  00F0      
000007A4  2839 0803  340                   move.l   _d4,d4
000007A8  00F4      
000007AA  2A39 0803  341                   move.l   _d5,d5
000007AE  00F8      
000007B0  2C39 0803  342                   move.l   _d6,d6
000007B4  00FC      
000007B6  2E39 0803  343                   move.l   _d7,d7
000007BA  0100      
                     344   
000007BC  2079 0803  345                   move.l   _USP,a0
000007C0  0128      
000007C2  4E60       346                   move.l   a0,USP        load user stack pointer A7
000007C4  2079 0803  347                   move.l   _a0,a0
000007C8  0104      
000007CA  2279 0803  348                   move.l   _a1,a1
000007CE  0108      
000007D0  2479 0803  349                   move.l   _a2,a2
000007D4  010C      
000007D6  2679 0803  350                   move.l   _a3,a3
000007DA  0110      
000007DC  2879 0803  351                   move.l   _a4,a4
000007E0  0114      
000007E2  2A79 0803  352                   move.l   _a5,a5
000007E6  0118      
000007E8  2C79 0803  353                   move.l   _a6,a6
000007EC  011C      
                     354   
000007EE  2F39 0803  355                   move.l   _PC,-(sp)
000007F2  0120      
000007F4  3F39 0803  356                   move.w   _SR,-(sp)
000007F8  012C      
000007FA  4E73       357                   rte
                     358   
000007FC  4EF9 0000  359   Trap15RamISR    jmp     _CallDebugMonitor
00000800  1F84      
                     360   *                movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
                     361   *                move.l    VTrap15,a0                get ram based address into a0
                     362   *                jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
                     363   *                movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
                     364   *                rte
                     365   
                     366   *********************************************************************************************************
                     367   *Default exception handler for everything without a specific handler
                     368   *********************************************************************************************************
                     369   
                     370   *
                     371   **              Jump here for each unhandled exception
                     372   **              If you need to, MAKE SURE YOU SAVE ALL IMPORTANT REGISTERS AND RESTORE THEM BEFORE RETURNING (IF APPROPRIATE)
                     373   *
                     374   
00000802  48E7 FFFE  375   E_BErro         movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000806  2079 0803  376                   move.l    VBusError,a0            get ram based address into a0
0000080A  0008      
0000080C  4E90       377                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
0000080E  4CDF 7FFF  378                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
00000812  4E73       379                   rte
00000814  48E7 FFFE  380   E_AErro         movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000818  2079 0803  381                   move.l    VAddressError,a0        get ram based address into a0
0000081C  000C      
0000081E  4E90       382                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
00000820  4CDF 7FFF  383                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
00000824  4E73       384                   rte
00000826  48E7 FFFE  385   E_IInst         movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
0000082A  2079 0803  386                   move.l    VIllegalInstr,a0        get ram based address into a0
0000082E  0010      
00000830  4E90       387                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
00000832  4CDF 7FFF  388                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
00000836  4E73       389                   rte
00000838  48E7 FFFE  390   E_DZero         movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
0000083C  2079 0803  391                   move.l    VDividebyZero,a0        get ram based address into a0
00000840  0014      
00000842  4E90       392                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
00000844  4CDF 7FFF  393                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
00000848  4E73       394                   rte
0000084A  48E7 FFFE  395   E_Check         movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
0000084E  2079 0803  396                   move.l    VCheck,a0               get ram based address into a0
00000852  0018      
00000854  4E90       397                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
00000856  4CDF 7FFF  398                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
0000085A  4E73       399                   rte
0000085C  48E7 FFFE  400   E_Trapv         movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000860  2079 0803  401                   move.l    VTrapV,a0               get ram based address into a0
00000864  001C      
00000866  4E90       402                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
00000868  4CDF 7FFF  403                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
0000086C  4E73       404                   rte
0000086E  48E7 FFFE  405   E_Priv          movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000872  2079 0803  406                   move.l    VPrivilege,a0           get ram based address into a0
00000876  0020      
00000878  4E90       407                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
0000087A  4CDF 7FFF  408                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
0000087E  4E73       409                   rte
00000880  48E7 FFFE  410   E_Trace         movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000884  2079 0803  411                   move.l    VTrace,a0               get ram based address into a0
00000888  0024      
0000088A  4E90       412                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
0000088C  4CDF 7FFF  413                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
00000890  4E73       414                   rte
00000892  48E7 FFFE  415   E_1010          movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000896  2079 0803  416                   move.l    VLine1010emul,a0        get ram based address into a0
0000089A  0028      
0000089C  4E90       417                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
0000089E  4CDF 7FFF  418                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
000008A2  4E73       419                   rte
000008A4  48E7 FFFE  420   E_1111          movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
000008A8  2079 0803  421                   move.l    VLine1111emul,a0        get ram based address into a0
000008AC  002C      
000008AE  4E90       422                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
000008B0  4CDF 7FFF  423                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
000008B4  4E73       424                   rte
                     425   E_Unnas1
                     426   E_Unnas2
                     427   E_Unnas3
                     428   E_UnitI
                     429   E_Unnas4
                     430   E_Unnas5
                     431   E_Unnas6
                     432   E_Unnas7
                     433   E_Unnas8
                     434   E_Unnas9
                     435   E_Unnas10
                     436   E_Unnas11
                     437   E_Spuri
000008B6  60FE       438   _stop            bra _stop                         stop
                     439   ***************************************************************************************************
                     440   * Go() function in debug monitor
                     441   ***************************************************************************************************
                     442   _go
000008B8  2E79 0803  443                   move.l   _SSP,a7        load system stack pointer (remember we are in supervisor mode when running this so a7 is the System stack pointer)
000008BC  0124      
000008BE  2F39 0803  444                   move.l   _PC,-(sp)      copy debug monitor PC variable to the stack
000008C2  0120      
000008C4  3F39 0803  445                   move.w   _SR,-(sp)      copy debug monitor status reg to the stack
000008C8  012C      
                     446   
000008CA  1038 0078  447                   move.b   $00000078,d0  remove any spurious address exception arising after power on
000008CE  2039 0803  448                   move.l   _d0,d0
000008D2  00E4      
000008D4  2239 0803  449                   move.l   _d1,d1
000008D8  00E8      
000008DA  2439 0803  450                   move.l   _d2,d2
000008DE  00EC      
000008E0  2639 0803  451                   move.l   _d3,d3
000008E4  00F0      
000008E6  2839 0803  452                   move.l   _d4,d4
000008EA  00F4      
000008EC  2A39 0803  453                   move.l   _d5,d5
000008F0  00F8      
000008F2  2C39 0803  454                   move.l   _d6,d6
000008F6  00FC      
000008F8  2E39 0803  455                   move.l   _d7,d7
000008FC  0100      
                     456   
000008FE  2079 0803  457                   move.l   _USP,a0
00000902  0128      
00000904  4E60       458                   move.l   a0,USP        load user stack pointer (remember we are in supervisor mode when running this, so a7 is the System stack pointer)
00000906  2079 0803  459                   move.l   _a0,a0
0000090A  0104      
0000090C  2279 0803  460                   move.l   _a1,a1
00000910  0108      
00000912  2479 0803  461                   move.l   _a2,a2
00000916  010C      
00000918  2679 0803  462                   move.l   _a3,a3
0000091C  0110      
0000091E  2879 0803  463                   move.l   _a4,a4
00000922  0114      
00000924  2A79 0803  464                   move.l   _a5,a5
00000928  0118      
0000092A  2C79 0803  465                   move.l   _a6,a6
0000092E  011C      
00000930  4E73       466                   rte                    load the status reg and PC from the stack and commence running
                     467                                          *used to be rte but this didn't load the status byte
                     468   
                     469   ; C:\CPEN412\LAB1\M68KV6.0 - 800BY480\PROGRAMS\DEBUGMONITORCODE\M68KDEBUG (NO DISASSEMBLER).C - Compiled by CC68K  Version 5.00 (c) 1991-2005  Peter J. Fondse
                     470   ; #include "DebugMonitor.h"
                     471   ; // use 08030000 for a system running from sram or 0B000000 for system running from dram
                     472   ; #define StartOfExceptionVectorTable 0x08030000
                     473   ; //#define StartOfExceptionVectorTable 0x0B000000
                     474   ; // use 0C000000 for dram or hex 08040000 for sram
                     475   ; #define TopOfStack 0x08040000
                     476   ; //#define TopOfStack 0x0C000000
                     477   ; /* DO NOT INITIALISE GLOBAL VARIABLES - DO IT in MAIN() */
                     478   ; unsigned int i, x, y, z, PortA_Count;
                     479   ; int     Trace, GoFlag, Echo;                       // used in tracing/single stepping
                     480   ; // 68000 register dump and preintialise value (these can be changed by the user program when it is running, e.g. stack pointer, registers etc
                     481   ; unsigned int d0,d1,d2,d3,d4,d5,d6,d7 ;
                     482   ; unsigned int a0,a1,a2,a3,a4,a5,a6 ;
                     483   ; unsigned int PC, SSP, USP ;
                     484   ; unsigned short int SR;
                     485   ; // Breakpoint variables
                     486   ; unsigned int BreakPointAddress[8];                      //array of 8 breakpoint addresses
                     487   ; unsigned short int BreakPointInstruction[8] ;           // to hold the instruction opcode at the breakpoint
                     488   ; unsigned int BreakPointSetOrCleared[8] ;
                     489   ; unsigned int InstructionSize ;
                     490   ; // watchpoint variables
                     491   ; unsigned int WatchPointAddress[8];                      //array of 8 breakpoint addresses
                     492   ; unsigned int WatchPointSetOrCleared[8] ;
                     493   ; char WatchPointString[8][100] ;
                     494   ; char    TempString[100] ;
                     495   ; /************************************************************************************
                     496   ; *Subroutine to give the 68000 something useless to do to waste 1 mSec
                     497   ; ************************************************************************************/
                     498   ; void Wait1ms(void)
                     499   ; {
                     500   _Wait1ms:
00000932  2F02       501          move.l    D2,-(A7)
                     502   ; long int  i ;
                     503   ; for(i = 0; i < 1000; i ++)
00000934  4282       504          clr.l     D2
                     505   Wait1ms_1:
00000936  0C82 0000  506          cmp.l     #1000,D2
0000093A  03E8      
0000093C  6C04       507          bge.s     Wait1ms_3
0000093E  5282       508          addq.l    #1,D2
00000940  60F4       509          bra       Wait1ms_1
                     510   Wait1ms_3:
00000942  241F       511          move.l    (A7)+,D2
00000944  4E75       512          rts
                     513   ; ;
                     514   ; }
                     515   ; /************************************************************************************
                     516   ; *Subroutine to give the 68000 something useless to do to waste 3 mSec
                     517   ; **************************************************************************************/
                     518   ; void Wait3ms(void)
                     519   ; {
                     520   _Wait3ms:
00000946  2F02       521          move.l    D2,-(A7)
                     522   ; int i ;
                     523   ; for(i = 0; i < 3; i++)
00000948  4282       524          clr.l     D2
                     525   Wait3ms_1:
0000094A  0C82 0000  526          cmp.l     #3,D2
0000094E  0003      
00000950  6C08       527          bge.s     Wait3ms_3
                     528   ; Wait1ms() ;
00000952  4EB8 0932  529          jsr       _Wait1ms
00000956  5282       530          addq.l    #1,D2
00000958  60F0       531          bra       Wait3ms_1
                     532   Wait3ms_3:
0000095A  241F       533          move.l    (A7)+,D2
0000095C  4E75       534          rts
                     535   ; }
                     536   ; /*********************************************************************************************
                     537   ; *Subroutine to initialise the display by writing some commands to the LCD internal registers
                     538   ; *********************************************************************************************/
                     539   ; void Init_LCD(void)
                     540   ; {
                     541   _Init_LCD:
                     542   ; LCDcommand = (char)(0x0c) ;
0000095E  13FC 000C  543          move.b    #12,4194336
00000962  0040 0020 
                     544   ; Wait3ms() ;
00000966  4EB8 0946  545          jsr       _Wait3ms
                     546   ; LCDcommand = (char)(0x38) ;
0000096A  13FC 0038  547          move.b    #56,4194336
0000096E  0040 0020 
                     548   ; Wait3ms() ;
00000972  4EB8 0946  549          jsr       _Wait3ms
00000976  4E75       550          rts
                     551   ; }
                     552   ; /******************************************************************************
                     553   ; *subroutine to output a single character held in d1 to the LCD display
                     554   ; *it is assumed the character is an ASCII code and it will be displayed at the
                     555   ; *current cursor position
                     556   ; *******************************************************************************/
                     557   ; void Outchar(int c)
                     558   ; {
                     559   _Outchar:
00000978  4E56 0000  560          link      A6,#0
                     561   ; LCDdata = (char)(c);
0000097C  202E 0008  562          move.l    8(A6),D0
00000980  13C0 0040  563          move.b    D0,4194338
00000984  0022      
                     564   ; Wait1ms() ;
00000986  4EB8 0932  565          jsr       _Wait1ms
0000098A  4E5E       566          unlk      A6
0000098C  4E75       567          rts
                     568   ; }
                     569   ; /**********************************************************************************
                     570   ; *subroutine to output a message at the current cursor position of the LCD display
                     571   ; ************************************************************************************/
                     572   ; void OutMess(char *theMessage)
                     573   ; {
                     574   _OutMess:
0000098E  4E56 FFFC  575          link      A6,#-4
                     576   ; char c ;
                     577   ; while((c = *theMessage++) != (char)(0))
                     578   OutMess_1:
00000992  206E 0008  579          move.l    8(A6),A0
00000996  52AE 0008  580          addq.l    #1,8(A6)
0000099A  1D50 FFFF  581          move.b    (A0),-1(A6)
0000099E  1010       582          move.b    (A0),D0
000009A0  6712       583          beq.s     OutMess_3
                     584   ; Outchar(c) ;
000009A2  122E FFFF  585          move.b    -1(A6),D1
000009A6  4881       586          ext.w     D1
000009A8  48C1       587          ext.l     D1
000009AA  2F01       588          move.l    D1,-(A7)
000009AC  4EB8 0978  589          jsr       _Outchar
000009B0  584F       590          addq.w    #4,A7
000009B2  60DE       591          bra       OutMess_1
                     592   OutMess_3:
000009B4  4E5E       593          unlk      A6
000009B6  4E75       594          rts
                     595   ; }
                     596   ; /******************************************************************************
                     597   ; *subroutine to clear the line by issuing 24 space characters
                     598   ; *******************************************************************************/
                     599   ; void Clearln(void)
                     600   ; {
                     601   _Clearln:
000009B8  2F02       602          move.l    D2,-(A7)
                     603   ; unsigned char i ;
                     604   ; for(i = 0; i < 24; i ++)
000009BA  4202       605          clr.b     D2
                     606   Clearln_1:
000009BC  0C02 0018  607          cmp.b     #24,D2
000009C0  640E       608          bhs.s     Clearln_3
                     609   ; Outchar(' ') ;  /* write a space char to the LCD display */
000009C2  4878 0020  610          pea       32
000009C6  4EB8 0978  611          jsr       _Outchar
000009CA  584F       612          addq.w    #4,A7
000009CC  5202       613          addq.b    #1,D2
000009CE  60EC       614          bra       Clearln_1
                     615   Clearln_3:
000009D0  241F       616          move.l    (A7)+,D2
000009D2  4E75       617          rts
                     618   ; }
                     619   ; /******************************************************************************
                     620   ; *subroutine to move the cursor to the start of line 1 and clear that line
                     621   ; *******************************************************************************/
                     622   ; void Oline0(char *theMessage)
                     623   ; {
                     624   _Oline0:
000009D4  4E56 0000  625          link      A6,#0
                     626   ; LCDcommand = (char)(0x80) ;
000009D8  13FC 0080  627          move.b    #128,4194336
000009DC  0040 0020 
                     628   ; Wait3ms();
000009E0  4EB8 0946  629          jsr       _Wait3ms
                     630   ; Clearln() ;
000009E4  4EB8 09B8  631          jsr       _Clearln
                     632   ; LCDcommand = (char)(0x80) ;
000009E8  13FC 0080  633          move.b    #128,4194336
000009EC  0040 0020 
                     634   ; Wait3ms() ;
000009F0  4EB8 0946  635          jsr       _Wait3ms
                     636   ; OutMess(theMessage) ;
000009F4  2F2E 0008  637          move.l    8(A6),-(A7)
000009F8  4EB8 098E  638          jsr       _OutMess
000009FC  584F       639          addq.w    #4,A7
000009FE  4E5E       640          unlk      A6
00000A00  4E75       641          rts
                     642   ; }
                     643   ; /******************************************************************************
                     644   ; *subroutine to move the cursor to the start of line 2 and clear that line
                     645   ; *******************************************************************************/
                     646   ; void Oline1(char *theMessage)
                     647   ; {
                     648   _Oline1:
00000A02  4E56 0000  649          link      A6,#0
                     650   ; LCDcommand = (char)(0xC0) ;
00000A06  13FC 00C0  651          move.b    #192,4194336
00000A0A  0040 0020 
                     652   ; Wait3ms();
00000A0E  4EB8 0946  653          jsr       _Wait3ms
                     654   ; Clearln() ;
00000A12  4EB8 09B8  655          jsr       _Clearln
                     656   ; LCDcommand = (char)(0xC0) ;
00000A16  13FC 00C0  657          move.b    #192,4194336
00000A1A  0040 0020 
                     658   ; Wait3ms() ;
00000A1E  4EB8 0946  659          jsr       _Wait3ms
                     660   ; OutMess(theMessage) ;
00000A22  2F2E 0008  661          move.l    8(A6),-(A7)
00000A26  4EB8 098E  662          jsr       _OutMess
00000A2A  584F       663          addq.w    #4,A7
00000A2C  4E5E       664          unlk      A6
00000A2E  4E75       665          rts
                     666   ; }
                     667   ; void InstallExceptionHandler( void (*function_ptr)(), int level)
                     668   ; {
                     669   _InstallExceptionHandler:
00000A30  4E56 FFFC  670          link      A6,#-4
                     671   ; volatile long int *RamVectorAddress = (volatile long int *)(StartOfExceptionVectorTable) ;   // pointer to the Ram based interrupt vector table created in Cstart in debug monitor
00000A34  2D7C 0803  672          move.l    #134414336,-4(A6)
00000A38  0000 FFFC 
                     673   ; RamVectorAddress[level] = (long int *)(function_ptr);
00000A3C  206E FFFC  674          move.l    -4(A6),A0
00000A40  202E 000C  675          move.l    12(A6),D0
00000A44  E588       676          lsl.l     #2,D0
00000A46  21AE 0008  677          move.l    8(A6),0(A0,D0.L)
00000A4A  0800      
00000A4C  4E5E       678          unlk      A6
00000A4E  4E75       679          rts
                     680   ; }
                     681   ; void TestLEDS(void)
                     682   ; {
                     683   _TestLEDS:
00000A50  48E7 3000  684          movem.l   D2/D3,-(A7)
                     685   ; int delay ;
                     686   ; unsigned char count = 0 ;
00000A54  4202       687          clr.b     D2
                     688   ; while(1)    {
                     689   TestLEDS_1:
                     690   ; PortA = PortB = PortC = PortD = HEX_A = HEX_B = HEX_C = HEX_D = ((count << 4) + (count & 0x0f)) ;
00000A56  1002       691          move.b    D2,D0
00000A58  E908       692          lsl.b     #4,D0
00000A5A  1202       693          move.b    D2,D1
00000A5C  C23C 000F  694          and.b     #15,D1
00000A60  D001       695          add.b     D1,D0
00000A62  13C0 0040  696          move.b    D0,4194326
00000A66  0016      
00000A68  13C0 0040  697          move.b    D0,4194324
00000A6C  0014      
00000A6E  13C0 0040  698          move.b    D0,4194322
00000A72  0012      
00000A74  13C0 0040  699          move.b    D0,4194320
00000A78  0010      
00000A7A  13C0 0040  700          move.b    D0,4194310
00000A7E  0006      
00000A80  13C0 0040  701          move.b    D0,4194308
00000A84  0004      
00000A86  13C0 0040  702          move.b    D0,4194306
00000A8A  0002      
00000A8C  13C0 0040  703          move.b    D0,4194304
00000A90  0000      
                     704   ; for(delay = 0; delay < 200000; delay ++)
00000A92  4283       705          clr.l     D3
                     706   TestLEDS_4:
00000A94  0C83 0003  707          cmp.l     #200000,D3
00000A98  0D40      
00000A9A  6C04       708          bge.s     TestLEDS_6
00000A9C  5283       709          addq.l    #1,D3
00000A9E  60F4       710          bra       TestLEDS_4
                     711   TestLEDS_6:
                     712   ; ;
                     713   ; count ++;
00000AA0  5202       714          addq.b    #1,D2
00000AA2  60B2       715          bra       TestLEDS_1
                     716   ; }
                     717   ; }
                     718   ; void SwitchTest(void)
                     719   ; {
                     720   _SwitchTest:
00000AA4  48E7 3020  721          movem.l   D2/D3/A2,-(A7)
00000AA8  45F9 0000  722          lea       _printf.L,A2
00000AAC  3C04      
                     723   ; int i, switches = 0 ;
00000AAE  4283       724          clr.l     D3
                     725   ; printf("\r\n") ;
00000AB0  4879 0000  726          pea       @m68kde~1_1.L
00000AB4  45C8      
00000AB6  4E92       727          jsr       (A2)
00000AB8  584F       728          addq.w    #4,A7
                     729   ; while(1)    {
                     730   SwitchTest_1:
                     731   ; switches = (PortB << 8) | (PortA) ;
00000ABA  1039 0040  732          move.b    4194306,D0
00000ABE  0002      
00000AC0  C0BC 0000  733          and.l     #255,D0
00000AC4  00FF      
00000AC6  E188       734          lsl.l     #8,D0
00000AC8  1239 0040  735          move.b    4194304,D1
00000ACC  0000      
00000ACE  C2BC 0000  736          and.l     #255,D1
00000AD2  00FF      
00000AD4  8081       737          or.l      D1,D0
00000AD6  2600       738          move.l    D0,D3
                     739   ; printf("\rSwitches SW[7-0] = ") ;
00000AD8  4879 0000  740          pea       @m68kde~1_2.L
00000ADC  45CC      
00000ADE  4E92       741          jsr       (A2)
00000AE0  584F       742          addq.w    #4,A7
                     743   ; for( i = (int)(0x00000080); i > 0; i = i >> 1)  {
00000AE2  243C 0000  744          move.l    #128,D2
00000AE6  0080      
                     745   SwitchTest_4:
00000AE8  0C82 0000  746          cmp.l     #0,D2
00000AEC  0000      
00000AEE  6F20       747          ble.s     SwitchTest_6
                     748   ; if((switches & i) == 0)
00000AF0  2003       749          move.l    D3,D0
00000AF2  C082       750          and.l     D2,D0
00000AF4  660C       751          bne.s     SwitchTest_7
                     752   ; printf("0") ;
00000AF6  4879 0000  753          pea       @m68kde~1_3.L
00000AFA  45E2      
00000AFC  4E92       754          jsr       (A2)
00000AFE  584F       755          addq.w    #4,A7
00000B00  600A       756          bra.s     SwitchTest_8
                     757   SwitchTest_7:
                     758   ; else
                     759   ; printf("1") ;
00000B02  4879 0000  760          pea       @m68kde~1_4.L
00000B06  45E4      
00000B08  4E92       761          jsr       (A2)
00000B0A  584F       762          addq.w    #4,A7
                     763   SwitchTest_8:
00000B0C  E282       764          asr.l     #1,D2
00000B0E  60D8       765          bra       SwitchTest_4
                     766   SwitchTest_6:
00000B10  60A8       767          bra       SwitchTest_1
                     768   ; }
                     769   ; }
                     770   ; }
                     771   ; /*********************************************************************************************
                     772   ; *Subroutine to initialise the RS232 Port by writing some commands to the internal registers
                     773   ; *********************************************************************************************/
                     774   ; void Init_RS232(void)
                     775   ; {
                     776   _Init_RS232:
                     777   ; RS232_Control = (char)(0x15) ; //  %00010101    divide by 16 clock, set rts low, 8 bits no parity, 1 stop bit transmitter interrupt disabled
00000B12  13FC 0015  778          move.b    #21,4194368
00000B16  0040 0040 
                     779   ; RS232_Baud = (char)(0x1) ;      // program baud rate generator 000 = 230k, 001 = 115k, 010 = 57.6k, 011 = 38.4k, 100 = 19.2, all others = 9600
00000B1A  13FC 0001  780          move.b    #1,4194372
00000B1E  0040 0044 
00000B22  4E75       781          rts
                     782   ; }
                     783   ; int kbhit(void)
                     784   ; {
                     785   _kbhit:
                     786   ; if(((char)(RS232_Status) & (char)(0x01)) == (char)(0x01))    // wait for Rx bit in status register to be '1'
00000B24  1039 0040  787          move.b    4194368,D0
00000B28  0040      
00000B2A  C03C 0001  788          and.b     #1,D0
00000B2E  0C00 0001  789          cmp.b     #1,D0
00000B32  6604       790          bne.s     kbhit_1
                     791   ; return 1 ;
00000B34  7001       792          moveq     #1,D0
00000B36  6002       793          bra.s     kbhit_3
                     794   kbhit_1:
                     795   ; else
                     796   ; return 0 ;
00000B38  4280       797          clr.l     D0
                     798   kbhit_3:
00000B3A  4E75       799          rts
                     800   ; }
                     801   ; /*********************************************************************************************************
                     802   ; **  Subroutine to provide a low level output function to 6850 ACIA
                     803   ; **  This routine provides the basic functionality to output a single character to the serial Port
                     804   ; **  to allow the board to communicate with HyperTerminal Program
                     805   ; **
                     806   ; **  NOTE you do not call this function directly, instead you call the normal putchar() function
                     807   ; **  which in turn calls _putch() below). Other functions like puts(), printf() call putchar() so will
                     808   ; **  call _putch() also
                     809   ; *********************************************************************************************************/
                     810   ; int _putch( int c)
                     811   ; {
                     812   __putch:
00000B3C  4E56 0000  813          link      A6,#0
                     814   ; while(((char)(RS232_Status) & (char)(0x02)) != (char)(0x02))    // wait for Tx bit in status register or 6850 serial comms chip to be '1'
                     815   _putch_1:
00000B40  1039 0040  816          move.b    4194368,D0
00000B44  0040      
00000B46  C03C 0002  817          and.b     #2,D0
00000B4A  0C00 0002  818          cmp.b     #2,D0
00000B4E  6702       819          beq.s     _putch_3
00000B50  60EE       820          bra       _putch_1
                     821   _putch_3:
                     822   ; ;
                     823   ; (char)(RS232_TxData) = ((char)(c) & (char)(0x7f));                      // write to the data register to output the character (mask off bit 8 to keep it 7 bit ASCII)
00000B52  202E 0008  824          move.l    8(A6),D0
00000B56  C03C 007F  825          and.b     #127,D0
00000B5A  13C0 0040  826          move.b    D0,4194370
00000B5E  0042      
                     827   ; return c ;                                              // putchar() expects the character to be returned
00000B60  202E 0008  828          move.l    8(A6),D0
00000B64  4E5E       829          unlk      A6
00000B66  4E75       830          rts
                     831   ; }
                     832   ; /*********************************************************************************************************
                     833   ; **  Subroutine to provide a low level input function to 6850 ACIA
                     834   ; **  This routine provides the basic functionality to input a single character from the serial Port
                     835   ; **  to allow the board to communicate with HyperTerminal Program Keyboard (your PC)
                     836   ; **
                     837   ; **  NOTE you do not call this function directly, instead you call the normal _getch() function
                     838   ; **  which in turn calls _getch() below). Other functions like gets(), scanf() call _getch() so will
                     839   ; **  call _getch() also
                     840   ; *********************************************************************************************************/
                     841   ; int _getch( void )
                     842   ; {
                     843   __getch:
00000B68  2F02       844          move.l    D2,-(A7)
                     845   ; int c ;
                     846   ; while(((char)(RS232_Status) & (char)(0x01)) != (char)(0x01))    // wait for Rx bit in 6850 serial comms chip status register to be '1'
                     847   _getch_1:
00000B6A  1039 0040  848          move.b    4194368,D0
00000B6E  0040      
00000B70  C03C 0001  849          and.b     #1,D0
00000B74  0C00 0001  850          cmp.b     #1,D0
00000B78  6702       851          beq.s     _getch_3
00000B7A  60EE       852          bra       _getch_1
                     853   _getch_3:
                     854   ; ;
                     855   ; c = (RS232_RxData & (char)(0x7f));                   // read received character, mask off top bit and return as 7 bit ASCII character
00000B7C  1039 0040  856          move.b    4194370,D0
00000B80  0042      
00000B82  C0BC 0000  857          and.l     #255,D0
00000B86  00FF      
00000B88  C0BC 0000  858          and.l     #127,D0
00000B8C  007F      
00000B8E  2400       859          move.l    D0,D2
                     860   ; // shall we echo the character? Echo is set to TRUE at reset, but for speed we don't want to echo when downloading code with the 'L' debugger command
                     861   ; if(Echo)
00000B90  4AB9 0803  862          tst.l     _Echo.L
00000B94  00E0      
00000B96  6708       863          beq.s     _getch_4
                     864   ; _putch(c);
00000B98  2F02       865          move.l    D2,-(A7)
00000B9A  4EB8 0B3C  866          jsr       __putch
00000B9E  584F       867          addq.w    #4,A7
                     868   _getch_4:
                     869   ; return c ;
00000BA0  2002       870          move.l    D2,D0
00000BA2  241F       871          move.l    (A7)+,D2
00000BA4  4E75       872          rts
                     873   ; }
                     874   ; // flush the input stream for any unread characters
                     875   ; void FlushKeyboard(void)
                     876   ; {
                     877   _FlushKeyboard:
00000BA6  4E56 FFFC  878          link      A6,#-4
                     879   ; char c ;
                     880   ; while(1)    {
                     881   FlushKeyboard_1:
                     882   ; if(((char)(RS232_Status) & (char)(0x01)) == (char)(0x01))    // if Rx bit in status register is '1'
00000BAA  1039 0040  883          move.b    4194368,D0
00000BAE  0040      
00000BB0  C03C 0001  884          and.b     #1,D0
00000BB4  0C00 0001  885          cmp.b     #1,D0
00000BB8  6610       886          bne.s     FlushKeyboard_4
                     887   ; c = ((char)(RS232_RxData) & (char)(0x7f)) ;
00000BBA  1039 0040  888          move.b    4194370,D0
00000BBE  0042      
00000BC0  C03C 007F  889          and.b     #127,D0
00000BC4  1D40 FFFF  890          move.b    D0,-1(A6)
00000BC8  6002       891          bra.s     FlushKeyboard_5
                     892   FlushKeyboard_4:
                     893   ; else
                     894   ; return ;
00000BCA  6002       895          bra.s     FlushKeyboard_6
                     896   FlushKeyboard_5:
00000BCC  60DC       897          bra       FlushKeyboard_1
                     898   FlushKeyboard_6:
00000BCE  4E5E       899          unlk      A6
00000BD0  4E75       900          rts
                     901   ; }
                     902   ; }
                     903   ; // converts hex char to 4 bit binary equiv in range 0000-1111 (0-F)
                     904   ; // char assumed to be a valid hex char 0-9, a-f, A-F
                     905   ; char xtod(int c)
                     906   ; {
                     907   _xtod:
00000BD2  4E56 0000  908          link      A6,#0
00000BD6  2F02       909          move.l    D2,-(A7)
00000BD8  242E 0008  910          move.l    8(A6),D2
                     911   ; if ((char)(c) <= (char)('9'))
00000BDC  0C02 0039  912          cmp.b     #57,D2
00000BE0  6E08       913          bgt.s     xtod_1
                     914   ; return c - (char)(0x30);    // 0 - 9 = 0x30 - 0x39 so convert to number by sutracting 0x30
00000BE2  1002       915          move.b    D2,D0
00000BE4  0400 0030  916          sub.b     #48,D0
00000BE8  6014       917          bra.s     xtod_3
                     918   xtod_1:
                     919   ; else if((char)(c) > (char)('F'))    // assume lower case
00000BEA  0C02 0046  920          cmp.b     #70,D2
00000BEE  6F08       921          ble.s     xtod_4
                     922   ; return c - (char)(0x57);    // a-f = 0x61-66 so needs to be converted to 0x0A - 0x0F so subtract 0x57
00000BF0  1002       923          move.b    D2,D0
00000BF2  0400 0057  924          sub.b     #87,D0
00000BF6  6006       925          bra.s     xtod_3
                     926   xtod_4:
                     927   ; else
                     928   ; return c - (char)(0x37);    // A-F = 0x41-46 so needs to be converted to 0x0A - 0x0F so subtract 0x37
00000BF8  1002       929          move.b    D2,D0
00000BFA  0400 0037  930          sub.b     #55,D0
                     931   xtod_3:
00000BFE  241F       932          move.l    (A7)+,D2
00000C00  4E5E       933          unlk      A6
00000C02  4E75       934          rts
                     935   ; }
                     936   ; int Get2HexDigits(char *CheckSumPtr)
                     937   ; {
                     938   _Get2HexDigits:
00000C04  4E56 0000  939          link      A6,#0
00000C08  2F02       940          move.l    D2,-(A7)
                     941   ; register int i = (xtod(_getch()) << 4) | (xtod(_getch()));
00000C0A  2F00       942          move.l    D0,-(A7)
00000C0C  4EB8 0B68  943          jsr       __getch
00000C10  2200       944          move.l    D0,D1
00000C12  201F       945          move.l    (A7)+,D0
00000C14  2F01       946          move.l    D1,-(A7)
00000C16  4EB8 0BD2  947          jsr       _xtod
00000C1A  584F       948          addq.w    #4,A7
00000C1C  C0BC 0000  949          and.l     #255,D0
00000C20  00FF      
00000C22  E980       950          asl.l     #4,D0
00000C24  2F00       951          move.l    D0,-(A7)
00000C26  2F01       952          move.l    D1,-(A7)
00000C28  4EB8 0B68  953          jsr       __getch
00000C2C  221F       954          move.l    (A7)+,D1
00000C2E  2F00       955          move.l    D0,-(A7)
00000C30  4EB8 0BD2  956          jsr       _xtod
00000C34  584F       957          addq.w    #4,A7
00000C36  2200       958          move.l    D0,D1
00000C38  201F       959          move.l    (A7)+,D0
00000C3A  C2BC 0000  960          and.l     #255,D1
00000C3E  00FF      
00000C40  8081       961          or.l      D1,D0
00000C42  2400       962          move.l    D0,D2
                     963   ; if(CheckSumPtr)
00000C44  4AAE 0008  964          tst.l     8(A6)
00000C48  6706       965          beq.s     Get2HexDigits_1
                     966   ; *CheckSumPtr += i ;
00000C4A  206E 0008  967          move.l    8(A6),A0
00000C4E  D510       968          add.b     D2,(A0)
                     969   Get2HexDigits_1:
                     970   ; return i ;
00000C50  2002       971          move.l    D2,D0
00000C52  241F       972          move.l    (A7)+,D2
00000C54  4E5E       973          unlk      A6
00000C56  4E75       974          rts
                     975   ; }
                     976   ; int Get4HexDigits(char *CheckSumPtr)
                     977   ; {
                     978   _Get4HexDigits:
00000C58  4E56 0000  979          link      A6,#0
                     980   ; return (Get2HexDigits(CheckSumPtr) << 8) | (Get2HexDigits(CheckSumPtr));
00000C5C  2F2E 0008  981          move.l    8(A6),-(A7)
00000C60  4EB8 0C04  982          jsr       _Get2HexDigits
00000C64  584F       983          addq.w    #4,A7
00000C66  E180       984          asl.l     #8,D0
00000C68  2F00       985          move.l    D0,-(A7)
00000C6A  2F2E 0008  986          move.l    8(A6),-(A7)
00000C6E  4EB8 0C04  987          jsr       _Get2HexDigits
00000C72  584F       988          addq.w    #4,A7
00000C74  2200       989          move.l    D0,D1
00000C76  201F       990          move.l    (A7)+,D0
00000C78  8081       991          or.l      D1,D0
00000C7A  4E5E       992          unlk      A6
00000C7C  4E75       993          rts
                     994   ; }
                     995   ; int Get6HexDigits(char *CheckSumPtr)
                     996   ; {
                     997   _Get6HexDigits:
00000C7E  4E56 0000  998          link      A6,#0
                     999   ; return (Get4HexDigits(CheckSumPtr) << 8) | (Get2HexDigits(CheckSumPtr));
00000C82  2F2E 0008 1000          move.l    8(A6),-(A7)
00000C86  4EB8 0C58 1001          jsr       _Get4HexDigits
00000C8A  584F      1002          addq.w    #4,A7
00000C8C  E180      1003          asl.l     #8,D0
00000C8E  2F00      1004          move.l    D0,-(A7)
00000C90  2F2E 0008 1005          move.l    8(A6),-(A7)
00000C94  4EB8 0C04 1006          jsr       _Get2HexDigits
00000C98  584F      1007          addq.w    #4,A7
00000C9A  2200      1008          move.l    D0,D1
00000C9C  201F      1009          move.l    (A7)+,D0
00000C9E  8081      1010          or.l      D1,D0
00000CA0  4E5E      1011          unlk      A6
00000CA2  4E75      1012          rts
                    1013   ; }
                    1014   ; int Get8HexDigits(char *CheckSumPtr)
                    1015   ; {
                    1016   _Get8HexDigits:
00000CA4  4E56 0000 1017          link      A6,#0
                    1018   ; return (Get4HexDigits(CheckSumPtr) << 16) | (Get4HexDigits(CheckSumPtr));
00000CA8  2F2E 0008 1019          move.l    8(A6),-(A7)
00000CAC  4EB8 0C58 1020          jsr       _Get4HexDigits
00000CB0  584F      1021          addq.w    #4,A7
00000CB2  E180      1022          asl.l     #8,D0
00000CB4  E180      1023          asl.l     #8,D0
00000CB6  2F00      1024          move.l    D0,-(A7)
00000CB8  2F2E 0008 1025          move.l    8(A6),-(A7)
00000CBC  4EB8 0C58 1026          jsr       _Get4HexDigits
00000CC0  584F      1027          addq.w    #4,A7
00000CC2  2200      1028          move.l    D0,D1
00000CC4  201F      1029          move.l    (A7)+,D0
00000CC6  8081      1030          or.l      D1,D0
00000CC8  4E5E      1031          unlk      A6
00000CCA  4E75      1032          rts
                    1033   ; }
                    1034   ; void DumpMemory(void)   // simple dump memory fn
                    1035   ; {
                    1036   _DumpMemory:
00000CCC  48E7 3C30 1037          movem.l   D2/D3/D4/D5/A2/A3,-(A7)
00000CD0  45F9 0000 1038          lea       _printf.L,A2
00000CD4  3C04      
00000CD6  47F9 0000 1039          lea       _putch.L,A3
00000CDA  3260      
                    1040   ; int i, j ;
                    1041   ; unsigned char *RamPtr,c ; // pointer to where the program is download (assumed)
                    1042   ; printf("\r\nDump Memory Block: <ESC> to Abort, <SPACE> to Continue") ;
00000CDC  4879 0000 1043          pea       @m68kde~1_5.L
00000CE0  45E6      
00000CE2  4E92      1044          jsr       (A2)
00000CE4  584F      1045          addq.w    #4,A7
                    1046   ; printf("\r\nEnter Start Address: ") ;
00000CE6  4879 0000 1047          pea       @m68kde~1_6.L
00000CEA  4620      
00000CEC  4E92      1048          jsr       (A2)
00000CEE  584F      1049          addq.w    #4,A7
                    1050   ; //RamPtr = Get8HexDigits(0) ;
                    1051   ; RamPtr = Get7HexDigits();
00000CF0  4EB9 0000 1052          jsr       _Get7HexDigits
00000CF4  276E      
00000CF6  2600      1053          move.l    D0,D3
                    1054   ; while(1)    {
                    1055   DumpMemory_1:
                    1056   ; for(i = 0; i < 16; i ++)    {
00000CF8  4285      1057          clr.l     D5
                    1058   DumpMemory_4:
00000CFA  0C85 0000 1059          cmp.l     #16,D5
00000CFE  0010      
00000D00  6C00 0096 1060          bge       DumpMemory_6
                    1061   ; printf("\r\n%08x ", RamPtr) ;
00000D04  2F03      1062          move.l    D3,-(A7)
00000D06  4879 0000 1063          pea       @m68kde~1_7.L
00000D0A  4638      
00000D0C  4E92      1064          jsr       (A2)
00000D0E  504F      1065          addq.w    #8,A7
                    1066   ; for(j=0; j < 16; j ++)  {
00000D10  4282      1067          clr.l     D2
                    1068   DumpMemory_7:
00000D12  0C82 0000 1069          cmp.l     #16,D2
00000D16  0010      
00000D18  6C24      1070          bge.s     DumpMemory_9
                    1071   ; printf("%02X",RamPtr[j]) ;
00000D1A  2043      1072          move.l    D3,A0
00000D1C  1230 2800 1073          move.b    0(A0,D2.L),D1
00000D20  C2BC 0000 1074          and.l     #255,D1
00000D24  00FF      
00000D26  2F01      1075          move.l    D1,-(A7)
00000D28  4879 0000 1076          pea       @m68kde~1_8.L
00000D2C  4640      
00000D2E  4E92      1077          jsr       (A2)
00000D30  504F      1078          addq.w    #8,A7
                    1079   ; putchar(' ') ;
00000D32  4878 0020 1080          pea       32
00000D36  4E93      1081          jsr       (A3)
00000D38  584F      1082          addq.w    #4,A7
00000D3A  5282      1083          addq.l    #1,D2
00000D3C  60D4      1084          bra       DumpMemory_7
                    1085   DumpMemory_9:
                    1086   ; }
                    1087   ; // now display the data as ASCII at the end
                    1088   ; printf("  ") ;
00000D3E  4879 0000 1089          pea       @m68kde~1_9.L
00000D42  4646      
00000D44  4E92      1090          jsr       (A2)
00000D46  584F      1091          addq.w    #4,A7
                    1092   ; for(j = 0; j < 16; j++) {
00000D48  4282      1093          clr.l     D2
                    1094   DumpMemory_10:
00000D4A  0C82 0000 1095          cmp.l     #16,D2
00000D4E  0010      
00000D50  6C00 003A 1096          bge       DumpMemory_12
                    1097   ; c = ((char)(RamPtr[j]) & 0x7f) ;
00000D54  2043      1098          move.l    D3,A0
00000D56  1030 2800 1099          move.b    0(A0,D2.L),D0
00000D5A  C03C 007F 1100          and.b     #127,D0
00000D5E  1800      1101          move.b    D0,D4
                    1102   ; if((c > (char)(0x7f)) || (c < ' '))
00000D60  0C04 007F 1103          cmp.b     #127,D4
00000D64  6206      1104          bhi.s     DumpMemory_15
00000D66  0C04 0020 1105          cmp.b     #32,D4
00000D6A  640A      1106          bhs.s     DumpMemory_13
                    1107   DumpMemory_15:
                    1108   ; putchar('.') ;
00000D6C  4878 002E 1109          pea       46
00000D70  4E93      1110          jsr       (A3)
00000D72  584F      1111          addq.w    #4,A7
00000D74  6012      1112          bra.s     DumpMemory_14
                    1113   DumpMemory_13:
                    1114   ; else
                    1115   ; putchar(RamPtr[j]) ;
00000D76  2043      1116          move.l    D3,A0
00000D78  1230 2800 1117          move.b    0(A0,D2.L),D1
00000D7C  C2BC 0000 1118          and.l     #255,D1
00000D80  00FF      
00000D82  2F01      1119          move.l    D1,-(A7)
00000D84  4E93      1120          jsr       (A3)
00000D86  584F      1121          addq.w    #4,A7
                    1122   DumpMemory_14:
00000D88  5282      1123          addq.l    #1,D2
00000D8A  60BE      1124          bra       DumpMemory_10
                    1125   DumpMemory_12:
                    1126   ; }
                    1127   ; RamPtr = RamPtr + 16 ;
00000D8C  0683 0000 1128          add.l     #16,D3
00000D90  0010      
00000D92  5285      1129          addq.l    #1,D5
00000D94  6000 FF64 1130          bra       DumpMemory_4
                    1131   DumpMemory_6:
                    1132   ; }
                    1133   ; printf("\r\n") ;
00000D98  4879 0000 1134          pea       @m68kde~1_1.L
00000D9C  45C8      
00000D9E  4E92      1135          jsr       (A2)
00000DA0  584F      1136          addq.w    #4,A7
                    1137   ; c = _getch() ;
00000DA2  4EB8 0B68 1138          jsr       __getch
00000DA6  1800      1139          move.b    D0,D4
                    1140   ; if(c == 0x1b)          // break on ESC
00000DA8  0C04 001B 1141          cmp.b     #27,D4
00000DAC  6602      1142          bne.s     DumpMemory_16
                    1143   ; break ;
00000DAE  6004      1144          bra.s     DumpMemory_3
                    1145   DumpMemory_16:
00000DB0  6000 FF46 1146          bra       DumpMemory_1
                    1147   DumpMemory_3:
00000DB4  4CDF 0C3C 1148          movem.l   (A7)+,D2/D3/D4/D5/A2/A3
00000DB8  4E75      1149          rts
                    1150   ; }
                    1151   ; }
                    1152   ; void FillMemory()
                    1153   ; {
                    1154   _FillMemory:
00000DBA  48E7 3820 1155          movem.l   D2/D3/D4/A2,-(A7)
00000DBE  45F9 0000 1156          lea       _printf.L,A2
00000DC2  3C04      
                    1157   ; char *StartRamPtr, *EndRamPtr ;
                    1158   ; unsigned char FillData ;
                    1159   ; printf("\r\nFill Memory Block") ;
00000DC4  4879 0000 1160          pea       @m68kde~1_10.L
00000DC8  464A      
00000DCA  4E92      1161          jsr       (A2)
00000DCC  584F      1162          addq.w    #4,A7
                    1163   ; printf("\r\nEnter Start Address: ") ;
00000DCE  4879 0000 1164          pea       @m68kde~1_6.L
00000DD2  4620      
00000DD4  4E92      1165          jsr       (A2)
00000DD6  584F      1166          addq.w    #4,A7
                    1167   ; StartRamPtr = Get8HexDigits(0) ;
00000DD8  42A7      1168          clr.l     -(A7)
00000DDA  4EB8 0CA4 1169          jsr       _Get8HexDigits
00000DDE  584F      1170          addq.w    #4,A7
00000DE0  2400      1171          move.l    D0,D2
                    1172   ; printf("\r\nEnter End Address: ") ;
00000DE2  4879 0000 1173          pea       @m68kde~1_11.L
00000DE6  465E      
00000DE8  4E92      1174          jsr       (A2)
00000DEA  584F      1175          addq.w    #4,A7
                    1176   ; EndRamPtr = Get8HexDigits(0) ;
00000DEC  42A7      1177          clr.l     -(A7)
00000DEE  4EB8 0CA4 1178          jsr       _Get8HexDigits
00000DF2  584F      1179          addq.w    #4,A7
00000DF4  2800      1180          move.l    D0,D4
                    1181   ; printf("\r\nEnter Fill Data: ") ;
00000DF6  4879 0000 1182          pea       @m68kde~1_12.L
00000DFA  4674      
00000DFC  4E92      1183          jsr       (A2)
00000DFE  584F      1184          addq.w    #4,A7
                    1185   ; FillData = Get2HexDigits(0) ;
00000E00  42A7      1186          clr.l     -(A7)
00000E02  4EB8 0C04 1187          jsr       _Get2HexDigits
00000E06  584F      1188          addq.w    #4,A7
00000E08  1600      1189          move.b    D0,D3
                    1190   ; printf("\r\nFilling Addresses [$%08X - $%08X] with $%02X", StartRamPtr, EndRamPtr, FillData) ;
00000E0A  C6BC 0000 1191          and.l     #255,D3
00000E0E  00FF      
00000E10  2F03      1192          move.l    D3,-(A7)
00000E12  2F04      1193          move.l    D4,-(A7)
00000E14  2F02      1194          move.l    D2,-(A7)
00000E16  4879 0000 1195          pea       @m68kde~1_13.L
00000E1A  4688      
00000E1C  4E92      1196          jsr       (A2)
00000E1E  DEFC 0010 1197          add.w     #16,A7
                    1198   ; while(StartRamPtr < EndRamPtr)
                    1199   FillMemory_1:
00000E22  B484      1200          cmp.l     D4,D2
00000E24  6408      1201          bhs.s     FillMemory_3
                    1202   ; *StartRamPtr++ = FillData ;
00000E26  2042      1203          move.l    D2,A0
00000E28  5282      1204          addq.l    #1,D2
00000E2A  1083      1205          move.b    D3,(A0)
00000E2C  60F4      1206          bra       FillMemory_1
                    1207   FillMemory_3:
00000E2E  4CDF 041C 1208          movem.l   (A7)+,D2/D3/D4/A2
00000E32  4E75      1209          rts
                    1210   ; }
                    1211   ; void Load_SRecordFile()
                    1212   ; {
                    1213   _Load_SRecordFile:
00000E34  4E56 FFDC 1214          link      A6,#-36
00000E38  48E7 3F3C 1215          movem.l   D2/D3/D4/D5/D6/D7/A2/A3/A4/A5,-(A7)
00000E3C  45EE FFFA 1216          lea       -6(A6),A2
00000E40  47F8 0C04 1217          lea       _Get2HexDigits.L,A3
00000E44  49F9 0000 1218          lea       _printf.L,A4
00000E48  3C04      
                    1219   ; int i, Address, AddressSize, DataByte, NumDataBytesToRead, LoadFailed, FailedAddress, AddressFail, SRecordCount = 0, ByteTotal = 0 ;
00000E4A  42AE FFEE 1220          clr.l     -18(A6)
00000E4E  3A7C 0000 1221          move.w    #0,A5
                    1222   ; int result, ByteCount ;
                    1223   ; char c, CheckSum, ReadCheckSum, HeaderType ;
                    1224   ; char *RamPtr ;                          // pointer to Memory where downloaded program will be stored
                    1225   ; LoadFailed = 0 ;                        //assume LOAD operation will pass
00000E52  7E00      1226          moveq     #0,D7
                    1227   ; AddressFail = 0 ;
00000E54  42AE FFEA 1228          clr.l     -22(A6)
                    1229   ; Echo = 0 ;                              // don't echo S records during download
00000E58  42B9 0803 1230          clr.l     _Echo.L
00000E5C  00E0      
                    1231   ; printf("\r\nUse HyperTerminal to Send Text File (.hex)\r\n") ;
00000E5E  4879 0000 1232          pea       @m68kde~1_14.L
00000E62  46B8      
00000E64  4E94      1233          jsr       (A4)
00000E66  584F      1234          addq.w    #4,A7
                    1235   ; while(1)    {
                    1236   Load_SRecordFile_1:
                    1237   ; CheckSum = 0 ;
00000E68  4212      1238          clr.b     (A2)
                    1239   ; do {
                    1240   Load_SRecordFile_4:
                    1241   ; c = toupper(_getch()) ;
00000E6A  2F00      1242          move.l    D0,-(A7)
00000E6C  4EB8 0B68 1243          jsr       __getch
00000E70  2200      1244          move.l    D0,D1
00000E72  201F      1245          move.l    (A7)+,D0
00000E74  2F01      1246          move.l    D1,-(A7)
00000E76  4EB9 0000 1247          jsr       _toupper
00000E7A  3342      
00000E7C  584F      1248          addq.w    #4,A7
00000E7E  1C00      1249          move.b    D0,D6
                    1250   ; if(c == 0x1b )      // if break
00000E80  0C06 001B 1251          cmp.b     #27,D6
00000E84  6604      1252          bne.s     Load_SRecordFile_6
                    1253   ; return;
00000E86  6000 0132 1254          bra       Load_SRecordFile_8
                    1255   Load_SRecordFile_6:
00000E8A  0C06 0053 1256          cmp.b     #83,D6
00000E8E  66DA      1257          bne       Load_SRecordFile_4
                    1258   ; }while(c != (char)('S'));   // wait for S start of header
                    1259   ; HeaderType = _getch() ;
00000E90  4EB8 0B68 1260          jsr       __getch
00000E94  1600      1261          move.b    D0,D3
                    1262   ; if(HeaderType == (char)('0') || HeaderType == (char)('5'))       // ignore s0, s5 records
00000E96  0C03 0030 1263          cmp.b     #48,D3
00000E9A  6706      1264          beq.s     Load_SRecordFile_11
00000E9C  0C03 0035 1265          cmp.b     #53,D3
00000EA0  6604      1266          bne.s     Load_SRecordFile_9
                    1267   Load_SRecordFile_11:
                    1268   ; continue ;
00000EA2  6000 00D2 1269          bra       Load_SRecordFile_23
                    1270   Load_SRecordFile_9:
                    1271   ; if(HeaderType >= (char)('7'))
00000EA6  0C03 0037 1272          cmp.b     #55,D3
00000EAA  6D04      1273          blt.s     Load_SRecordFile_12
                    1274   ; break ;                 // end load on s7,s8,s9 records
00000EAC  6000 00CC 1275          bra       Load_SRecordFile_3
                    1276   Load_SRecordFile_12:
                    1277   ; // get the bytecount
                    1278   ; ByteCount = Get2HexDigits(&CheckSum) ;
00000EB0  2F0A      1279          move.l    A2,-(A7)
00000EB2  4E93      1280          jsr       (A3)
00000EB4  584F      1281          addq.w    #4,A7
00000EB6  2D40 FFF6 1282          move.l    D0,-10(A6)
                    1283   ; // get the address, 4 digits for s1, 6 digits for s2, and 8 digits for s3 record
                    1284   ; if(HeaderType == (char)('1')) {
00000EBA  0C03 0031 1285          cmp.b     #49,D3
00000EBE  660E      1286          bne.s     Load_SRecordFile_14
                    1287   ; AddressSize = 2 ;       // 2 byte address
00000EC0  7A02      1288          moveq     #2,D5
                    1289   ; Address = Get4HexDigits(&CheckSum);
00000EC2  2F0A      1290          move.l    A2,-(A7)
00000EC4  4EB8 0C58 1291          jsr       _Get4HexDigits
00000EC8  584F      1292          addq.w    #4,A7
00000ECA  2800      1293          move.l    D0,D4
00000ECC  6020      1294          bra.s     Load_SRecordFile_17
                    1295   Load_SRecordFile_14:
                    1296   ; }
                    1297   ; else if (HeaderType == (char)('2')) {
00000ECE  0C03 0032 1298          cmp.b     #50,D3
00000ED2  660E      1299          bne.s     Load_SRecordFile_16
                    1300   ; AddressSize = 3 ;       // 3 byte address
00000ED4  7A03      1301          moveq     #3,D5
                    1302   ; Address = Get6HexDigits(&CheckSum) ;
00000ED6  2F0A      1303          move.l    A2,-(A7)
00000ED8  4EB8 0C7E 1304          jsr       _Get6HexDigits
00000EDC  584F      1305          addq.w    #4,A7
00000EDE  2800      1306          move.l    D0,D4
00000EE0  600C      1307          bra.s     Load_SRecordFile_17
                    1308   Load_SRecordFile_16:
                    1309   ; }
                    1310   ; else    {
                    1311   ; AddressSize = 4 ;       // 4 byte address
00000EE2  7A04      1312          moveq     #4,D5
                    1313   ; Address = Get8HexDigits(&CheckSum) ;
00000EE4  2F0A      1314          move.l    A2,-(A7)
00000EE6  4EB8 0CA4 1315          jsr       _Get8HexDigits
00000EEA  584F      1316          addq.w    #4,A7
00000EEC  2800      1317          move.l    D0,D4
                    1318   Load_SRecordFile_17:
                    1319   ; }
                    1320   ; RamPtr = (char *)(Address) ;                            // point to download area
00000EEE  2D44 FFFC 1321          move.l    D4,-4(A6)
                    1322   ; NumDataBytesToRead = ByteCount - AddressSize - 1 ;
00000EF2  202E FFF6 1323          move.l    -10(A6),D0
00000EF6  9085      1324          sub.l     D5,D0
00000EF8  5380      1325          subq.l    #1,D0
00000EFA  2D40 FFE2 1326          move.l    D0,-30(A6)
                    1327   ; for(i = 0; i < NumDataBytesToRead; i ++) {     // read in remaining data bytes (ignore address and checksum at the end
00000EFE  4282      1328          clr.l     D2
                    1329   Load_SRecordFile_18:
00000F00  B4AE FFE2 1330          cmp.l     -30(A6),D2
00000F04  6C1E      1331          bge.s     Load_SRecordFile_20
                    1332   ; DataByte = Get2HexDigits(&CheckSum) ;
00000F06  2F0A      1333          move.l    A2,-(A7)
00000F08  4E93      1334          jsr       (A3)
00000F0A  584F      1335          addq.w    #4,A7
00000F0C  2D40 FFDE 1336          move.l    D0,-34(A6)
                    1337   ; *RamPtr++ = DataByte ;                      // store downloaded byte in Ram at specified address
00000F10  202E FFDE 1338          move.l    -34(A6),D0
00000F14  206E FFFC 1339          move.l    -4(A6),A0
00000F18  52AE FFFC 1340          addq.l    #1,-4(A6)
00000F1C  1080      1341          move.b    D0,(A0)
                    1342   ; ByteTotal++;
00000F1E  524D      1343          addq.w    #1,A5
00000F20  5282      1344          addq.l    #1,D2
00000F22  60DC      1345          bra       Load_SRecordFile_18
                    1346   Load_SRecordFile_20:
                    1347   ; }
                    1348   ; // checksum is the 1's complement of the sum of all data pairs following the bytecount, i.e. it includes the address and the data itself
                    1349   ; ReadCheckSum = Get2HexDigits(0) ;
00000F24  42A7      1350          clr.l     -(A7)
00000F26  4E93      1351          jsr       (A3)
00000F28  584F      1352          addq.w    #4,A7
00000F2A  1D40 FFFB 1353          move.b    D0,-5(A6)
                    1354   ; if((~CheckSum&0Xff) != (ReadCheckSum&0Xff))   {
00000F2E  1012      1355          move.b    (A2),D0
00000F30  4600      1356          not.b     D0
00000F32  4880      1357          ext.w     D0
00000F34  C07C 00FF 1358          and.w     #255,D0
00000F38  122E FFFB 1359          move.b    -5(A6),D1
00000F3C  4881      1360          ext.w     D1
00000F3E  C27C 00FF 1361          and.w     #255,D1
00000F42  B041      1362          cmp.w     D1,D0
00000F44  6708      1363          beq.s     Load_SRecordFile_21
                    1364   ; LoadFailed = 1 ;
00000F46  7E01      1365          moveq     #1,D7
                    1366   ; FailedAddress = Address ;
00000F48  2D44 FFE6 1367          move.l    D4,-26(A6)
                    1368   ; break;
00000F4C  602C      1369          bra.s     Load_SRecordFile_3
                    1370   Load_SRecordFile_21:
                    1371   ; }
                    1372   ; SRecordCount++ ;
00000F4E  52AE FFEE 1373          addq.l    #1,-18(A6)
                    1374   ; // display feedback on progress
                    1375   ; if(SRecordCount % 25 == 0)
00000F52  2F2E FFEE 1376          move.l    -18(A6),-(A7)
00000F56  4878 0019 1377          pea       25
00000F5A  4EB9 0000 1378          jsr       LDIV
00000F5E  3182      
00000F60  202F 0004 1379          move.l    4(A7),D0
00000F64  504F      1380          addq.w    #8,A7
00000F66  4A80      1381          tst.l     D0
00000F68  660C      1382          bne.s     Load_SRecordFile_23
                    1383   ; putchar('.') ;
00000F6A  4878 002E 1384          pea       46
00000F6E  4EB9 0000 1385          jsr       _putch
00000F72  3260      
00000F74  584F      1386          addq.w    #4,A7
                    1387   Load_SRecordFile_23:
00000F76  6000 FEF0 1388          bra       Load_SRecordFile_1
                    1389   Load_SRecordFile_3:
                    1390   ; }
                    1391   ; if(LoadFailed == 1) {
00000F7A  0C87 0000 1392          cmp.l     #1,D7
00000F7E  0001      
00000F80  6610      1393          bne.s     Load_SRecordFile_25
                    1394   ; printf("\r\nLoad Failed at Address = [$%08X]\r\n", FailedAddress) ;
00000F82  2F2E FFE6 1395          move.l    -26(A6),-(A7)
00000F86  4879 0000 1396          pea       @m68kde~1_15.L
00000F8A  46E8      
00000F8C  4E94      1397          jsr       (A4)
00000F8E  504F      1398          addq.w    #8,A7
00000F90  600C      1399          bra.s     Load_SRecordFile_26
                    1400   Load_SRecordFile_25:
                    1401   ; }
                    1402   ; else
                    1403   ; printf("\r\nSuccess: Downloaded %d bytes\r\n", ByteTotal) ;
00000F92  2F0D      1404          move.l    A5,-(A7)
00000F94  4879 0000 1405          pea       @m68kde~1_16.L
00000F98  470E      
00000F9A  4E94      1406          jsr       (A4)
00000F9C  504F      1407          addq.w    #8,A7
                    1408   Load_SRecordFile_26:
                    1409   ; // pause at the end to wait for download to finish transmitting at the end of S8 etc
                    1410   ; for(i = 0; i < 400000; i ++)
00000F9E  4282      1411          clr.l     D2
                    1412   Load_SRecordFile_27:
00000FA0  0C82 0006 1413          cmp.l     #400000,D2
00000FA4  1A80      
00000FA6  6C04      1414          bge.s     Load_SRecordFile_29
00000FA8  5282      1415          addq.l    #1,D2
00000FAA  60F4      1416          bra       Load_SRecordFile_27
                    1417   Load_SRecordFile_29:
                    1418   ; ;
                    1419   ; FlushKeyboard() ;
00000FAC  4EB8 0BA6 1420          jsr       _FlushKeyboard
                    1421   ; Echo = 1;
00000FB0  23FC 0000 1422          move.l    #1,_Echo.L
00000FB4  0001 0803 
00000FB8  00E0      
                    1423   Load_SRecordFile_8:
00000FBA  4CDF 3CFC 1424          movem.l   (A7)+,D2/D3/D4/D5/D6/D7/A2/A3/A4/A5
00000FBE  4E5E      1425          unlk      A6
00000FC0  4E75      1426          rts
                    1427   ; }
                    1428   ; void MemoryChange(void)
                    1429   ; {
                    1430   _MemoryChange:
00000FC2  48E7 3820 1431          movem.l   D2/D3/D4/A2,-(A7)
00000FC6  45F9 0000 1432          lea       _printf.L,A2
00000FCA  3C04      
                    1433   ; unsigned char *RamPtr,c ; // pointer to memory
                    1434   ; int Data ;
                    1435   ; printf("\r\nExamine and Change Memory") ;
00000FCC  4879 0000 1436          pea       @m68kde~1_17.L
00000FD0  4730      
00000FD2  4E92      1437          jsr       (A2)
00000FD4  584F      1438          addq.w    #4,A7
                    1439   ; printf("\r\n<ESC> to Stop, <SPACE> to Advance, '-' to Go Back, <DATA> to change") ;
00000FD6  4879 0000 1440          pea       @m68kde~1_18.L
00000FDA  474C      
00000FDC  4E92      1441          jsr       (A2)
00000FDE  584F      1442          addq.w    #4,A7
                    1443   ; printf("\r\nEnter Address: ") ;
00000FE0  4879 0000 1444          pea       @m68kde~1_19.L
00000FE4  4792      
00000FE6  4E92      1445          jsr       (A2)
00000FE8  584F      1446          addq.w    #4,A7
                    1447   ; RamPtr = Get8HexDigits(0) ;
00000FEA  42A7      1448          clr.l     -(A7)
00000FEC  4EB8 0CA4 1449          jsr       _Get8HexDigits
00000FF0  584F      1450          addq.w    #4,A7
00000FF2  2600      1451          move.l    D0,D3
                    1452   ; while(1)    {
                    1453   MemoryChange_1:
                    1454   ; printf("\r\n[%08x] : %02x  ", RamPtr, *RamPtr) ;
00000FF4  2043      1455          move.l    D3,A0
00000FF6  1210      1456          move.b    (A0),D1
00000FF8  C2BC 0000 1457          and.l     #255,D1
00000FFC  00FF      
00000FFE  2F01      1458          move.l    D1,-(A7)
00001000  2F03      1459          move.l    D3,-(A7)
00001002  4879 0000 1460          pea       @m68kde~1_20.L
00001006  47A4      
00001008  4E92      1461          jsr       (A2)
0000100A  DEFC 000C 1462          add.w     #12,A7
                    1463   ; c = tolower(_getch()) ;
0000100E  2F00      1464          move.l    D0,-(A7)
00001010  4EB8 0B68 1465          jsr       __getch
00001014  2200      1466          move.l    D0,D1
00001016  201F      1467          move.l    (A7)+,D0
00001018  2F01      1468          move.l    D1,-(A7)
0000101A  4EB9 0000 1469          jsr       _tolower
0000101E  32CC      
00001020  584F      1470          addq.w    #4,A7
00001022  1400      1471          move.b    D0,D2
                    1472   ; if(c == (char)(0x1b))
00001024  0C02 001B 1473          cmp.b     #27,D2
00001028  6604      1474          bne.s     MemoryChange_4
                    1475   ; return ;                                // abort on escape
0000102A  6000 0090 1476          bra       MemoryChange_6
                    1477   MemoryChange_4:
                    1478   ; else if((c >= '0' && c <= '9') || (c >= 'a' && c <= 'f')) {  // are we trying to change data at this location by entering a hex char
0000102E  0C02 0030 1479          cmp.b     #48,D2
00001032  6506      1480          blo.s     MemoryChange_10
00001034  0C02 0039 1481          cmp.b     #57,D2
00001038  6310      1482          bls.s     MemoryChange_9
                    1483   MemoryChange_10:
0000103A  0C02 0061 1484          cmp.b     #97,D2
0000103E  6500 006E 1485          blo       MemoryChange_7
00001042  0C02 0066 1486          cmp.b     #102,D2
00001046  6200 0066 1487          bhi       MemoryChange_7
                    1488   MemoryChange_9:
                    1489   ; Data = (xtod(c) << 4) | (xtod(_getch()));
0000104A  C4BC 0000 1490          and.l     #255,D2
0000104E  00FF      
00001050  2F02      1491          move.l    D2,-(A7)
00001052  4EB8 0BD2 1492          jsr       _xtod
00001056  584F      1493          addq.w    #4,A7
00001058  C0BC 0000 1494          and.l     #255,D0
0000105C  00FF      
0000105E  E980      1495          asl.l     #4,D0
00001060  2F00      1496          move.l    D0,-(A7)
00001062  2F01      1497          move.l    D1,-(A7)
00001064  4EB8 0B68 1498          jsr       __getch
00001068  221F      1499          move.l    (A7)+,D1
0000106A  2F00      1500          move.l    D0,-(A7)
0000106C  4EB8 0BD2 1501          jsr       _xtod
00001070  584F      1502          addq.w    #4,A7
00001072  2200      1503          move.l    D0,D1
00001074  201F      1504          move.l    (A7)+,D0
00001076  C2BC 0000 1505          and.l     #255,D1
0000107A  00FF      
0000107C  8081      1506          or.l      D1,D0
0000107E  2800      1507          move.l    D0,D4
                    1508   ; *RamPtr = (char)(Data) ;
00001080  2043      1509          move.l    D3,A0
00001082  1084      1510          move.b    D4,(A0)
                    1511   ; if(*RamPtr != Data) {
00001084  2043      1512          move.l    D3,A0
00001086  1010      1513          move.b    (A0),D0
00001088  C0BC 0000 1514          and.l     #255,D0
0000108C  00FF      
0000108E  B084      1515          cmp.l     D4,D0
00001090  671A      1516          beq.s     MemoryChange_11
                    1517   ; printf("\r\nWarning Change Failed: Wrote [%02x], Read [%02x]", Data, *RamPtr) ;
00001092  2043      1518          move.l    D3,A0
00001094  1210      1519          move.b    (A0),D1
00001096  C2BC 0000 1520          and.l     #255,D1
0000109A  00FF      
0000109C  2F01      1521          move.l    D1,-(A7)
0000109E  2F04      1522          move.l    D4,-(A7)
000010A0  4879 0000 1523          pea       @m68kde~1_21.L
000010A4  47B6      
000010A6  4E92      1524          jsr       (A2)
000010A8  DEFC 000C 1525          add.w     #12,A7
                    1526   MemoryChange_11:
000010AC  6008      1527          bra.s     MemoryChange_13
                    1528   MemoryChange_7:
                    1529   ; }
                    1530   ; }
                    1531   ; else if(c == (char)('-'))
000010AE  0C02 002D 1532          cmp.b     #45,D2
000010B2  6602      1533          bne.s     MemoryChange_13
                    1534   ; RamPtr -= 2 ; ;
000010B4  5583      1535          subq.l    #2,D3
                    1536   MemoryChange_13:
                    1537   ; RamPtr ++ ;
000010B6  5283      1538          addq.l    #1,D3
000010B8  6000 FF3A 1539          bra       MemoryChange_1
                    1540   MemoryChange_6:
000010BC  4CDF 041C 1541          movem.l   (A7)+,D2/D3/D4/A2
000010C0  4E75      1542          rts
                    1543   ; }
                    1544   ; }
                    1545   ; /*******************************************************************
                    1546   ; ** Write a program to SPI Flash Chip from memory and verify by reading back
                    1547   ; ********************************************************************/
                    1548   ; void ProgramFlashChip(void)
                    1549   ; {
                    1550   _ProgramFlashChip:
000010C2  4E75      1551          rts
                    1552   ; //
                    1553   ; // TODO : put your code here to program the 1st 256k of ram (where user program is held at hex 08000000) to SPI flash chip
                    1554   ; // TODO : then verify by reading it back and comparing to memory
                    1555   ; //
                    1556   ; }
                    1557   ; /*************************************************************************
                    1558   ; ** Load a program from SPI Flash Chip and copy to Dram
                    1559   ; **************************************************************************/
                    1560   ; void LoadFromFlashChip(void)
                    1561   ; {
                    1562   _LoadFromFlashChip:
                    1563   ; printf("\r\nLoading Program From SPI Flash....") ;
000010C4  4879 0000 1564          pea       @m68kde~1_22.L
000010C8  47EA      
000010CA  4EB9 0000 1565          jsr       _printf
000010CE  3C04      
000010D0  584F      1566          addq.w    #4,A7
000010D2  4E75      1567          rts
                    1568   ; //
                    1569   ; // TODO : put your code here to read 256k of data from SPI flash chip and store in user ram starting at hex 08000000
                    1570   ; //
                    1571   ; }
                    1572   ; //////////////////////////////////////////////////////////////////////////////////////////////////
                    1573   ; // IMPORTANT
                    1574   ; // TG68 does not support the Native Trace mode of the original 68000 so tracing
                    1575   ; // has to be done with an interrupt (IRQ Level 6)
                    1576   ; //
                    1577   ; // To allow the 68000 to execute one more instruction after each pseudo trace (IRQ6)
                    1578   ; // the IRQ is removed in hardware once the TG68 reads the IRQ autovector (i.e. acknowledges the IRQ)
                    1579   ; //
                    1580   ; // on return from the IRQ service handler, the first access to the user memory program space
                    1581   ; // generates a fresh IRQ (in hardware) to generate a new trace, this allows the tg68 to
                    1582   ; // execute one more new instruction (without it the TG68 would trace on the same instruction
                    1583   ; // each time and not after the next one). It also means it doesn't simgle step outside the user
                    1584   ; // program area
                    1585   ; //
                    1586   ; // The bottom line is the Trace handler, which includes the Dump registers below
                    1587   ; // cannot access the user memory to display for example the Instruction Opcode or to disassemble etc
                    1588   ; // as this would lead to a new IRQ being reset and the TG68 would trace on same instruction
                    1589   ; // NOT SURE THIS IS TRUE NOW THAT TRACE HANDLER HAS BEEN MODIVIED TO NOT AUTOMATICALLY GENERATE A TRACE EXCEPTION
                    1590   ; // INSTEAD IT IS DONE IN THE 'N' COMMAND FOR NEXT
                    1591   ; /////////////////////////////////////////////////////////////////////////////////////////////////////
                    1592   ; void DumpRegisters()
                    1593   ; {
                    1594   _DumpRegisters:
000010D4  48E7 3F3C 1595          movem.l   D2/D3/D4/D5/D6/D7/A2/A3/A4/A5,-(A7)
000010D8  45F9 0000 1596          lea       _putch.L,A2
000010DC  3260      
000010DE  47F9 0000 1597          lea       _printf.L,A3
000010E2  3C04      
000010E4  49F9 0803 1598          lea       _SR.L,A4
000010E8  012C      
000010EA  4BF9 0803 1599          lea       _WatchPointString.L,A5
000010EE  01C2      
                    1600   ; short i, x, j, k ;
                    1601   ; unsigned char c, *BytePointer;
                    1602   ; // buld up strings for displaying watchpoints
                    1603   ; for(x = 0; x < (short)(8); x++)
000010F0  4242      1604          clr.w     D2
                    1605   DumpRegisters_1:
000010F2  0C42 0008 1606          cmp.w     #8,D2
000010F6  6C00 01C6 1607          bge       DumpRegisters_3
                    1608   ; {
                    1609   ; if(WatchPointSetOrCleared[x] == 1)
000010FA  48C2      1610          ext.l     D2
000010FC  2002      1611          move.l    D2,D0
000010FE  E588      1612          lsl.l     #2,D0
00001100  41F9 0803 1613          lea       _WatchPointSetOrCleared.L,A0
00001104  01A2      
00001106  2030 0800 1614          move.l    0(A0,D0.L),D0
0000110A  0C80 0000 1615          cmp.l     #1,D0
0000110E  0001      
00001110  6600 0186 1616          bne       DumpRegisters_4
                    1617   ; {
                    1618   ; sprintf(WatchPointString[x], "$%08X  ", WatchPointAddress[x]) ;
00001114  48C2      1619          ext.l     D2
00001116  2202      1620          move.l    D2,D1
00001118  E589      1621          lsl.l     #2,D1
0000111A  41F9 0803 1622          lea       _WatchPointAddress.L,A0
0000111E  0182      
00001120  2F30 1800 1623          move.l    0(A0,D1.L),-(A7)
00001124  4879 0000 1624          pea       @m68kde~1_23.L
00001128  4810      
0000112A  220D      1625          move.l    A5,D1
0000112C  48C2      1626          ext.l     D2
0000112E  2F00      1627          move.l    D0,-(A7)
00001130  2002      1628          move.l    D2,D0
00001132  C1FC 0064 1629          muls      #100,D0
00001136  D280      1630          add.l     D0,D1
00001138  201F      1631          move.l    (A7)+,D0
0000113A  2F01      1632          move.l    D1,-(A7)
0000113C  4EB9 0000 1633          jsr       _sprintf
00001140  32F8      
00001142  DEFC 000C 1634          add.w     #12,A7
                    1635   ; BytePointer = (char *)(WatchPointAddress[x]) ;
00001146  48C2      1636          ext.l     D2
00001148  2002      1637          move.l    D2,D0
0000114A  E588      1638          lsl.l     #2,D0
0000114C  41F9 0803 1639          lea       _WatchPointAddress.L,A0
00001150  0182      
00001152  2A30 0800 1640          move.l    0(A0,D0.L),D5
                    1641   ; for(j = 0; j < (short)(16); j+=2)
00001156  4243      1642          clr.w     D3
                    1643   DumpRegisters_6:
00001158  0C43 0010 1644          cmp.w     #16,D3
0000115C  6C00 0082 1645          bge       DumpRegisters_8
                    1646   ; {
                    1647   ; for(k = 0; k < (short)(2); k++)
00001160  4246      1648          clr.w     D6
                    1649   DumpRegisters_9:
00001162  0C46 0002 1650          cmp.w     #2,D6
00001166  6C00 0052 1651          bge       DumpRegisters_11
                    1652   ; {
                    1653   ; sprintf(TempString, "%02X", BytePointer[j+k]) ;
0000116A  2045      1654          move.l    D5,A0
0000116C  48C3      1655          ext.l     D3
0000116E  2203      1656          move.l    D3,D1
00001170  48C6      1657          ext.l     D6
00001172  D286      1658          add.l     D6,D1
00001174  1230 1800 1659          move.b    0(A0,D1.L),D1
00001178  C2BC 0000 1660          and.l     #255,D1
0000117C  00FF      
0000117E  2F01      1661          move.l    D1,-(A7)
00001180  4879 0000 1662          pea       @m68kde~1_8.L
00001184  4640      
00001186  4879 0803 1663          pea       _TempString.L
0000118A  04E2      
0000118C  4EB9 0000 1664          jsr       _sprintf
00001190  32F8      
00001192  DEFC 000C 1665          add.w     #12,A7
                    1666   ; strcat(WatchPointString[x], TempString) ;
00001196  4879 0803 1667          pea       _TempString.L
0000119A  04E2      
0000119C  220D      1668          move.l    A5,D1
0000119E  48C2      1669          ext.l     D2
000011A0  2F00      1670          move.l    D0,-(A7)
000011A2  2002      1671          move.l    D2,D0
000011A4  C1FC 0064 1672          muls      #100,D0
000011A8  D280      1673          add.l     D0,D1
000011AA  201F      1674          move.l    (A7)+,D0
000011AC  2F01      1675          move.l    D1,-(A7)
000011AE  4EB9 0000 1676          jsr       _strcat
000011B2  332C      
000011B4  504F      1677          addq.w    #8,A7
000011B6  5246      1678          addq.w    #1,D6
000011B8  60A8      1679          bra       DumpRegisters_9
                    1680   DumpRegisters_11:
                    1681   ; }
                    1682   ; strcat(WatchPointString[x]," ") ;
000011BA  4879 0000 1683          pea       @m68kde~1_24.L
000011BE  4818      
000011C0  220D      1684          move.l    A5,D1
000011C2  48C2      1685          ext.l     D2
000011C4  2F00      1686          move.l    D0,-(A7)
000011C6  2002      1687          move.l    D2,D0
000011C8  C1FC 0064 1688          muls      #100,D0
000011CC  D280      1689          add.l     D0,D1
000011CE  201F      1690          move.l    (A7)+,D0
000011D0  2F01      1691          move.l    D1,-(A7)
000011D2  4EB9 0000 1692          jsr       _strcat
000011D6  332C      
000011D8  504F      1693          addq.w    #8,A7
000011DA  5443      1694          addq.w    #2,D3
000011DC  6000 FF7A 1695          bra       DumpRegisters_6
                    1696   DumpRegisters_8:
                    1697   ; }
                    1698   ; strcat(WatchPointString[x], "  ") ;
000011E0  4879 0000 1699          pea       @m68kde~1_9.L
000011E4  4646      
000011E6  220D      1700          move.l    A5,D1
000011E8  48C2      1701          ext.l     D2
000011EA  2F00      1702          move.l    D0,-(A7)
000011EC  2002      1703          move.l    D2,D0
000011EE  C1FC 0064 1704          muls      #100,D0
000011F2  D280      1705          add.l     D0,D1
000011F4  201F      1706          move.l    (A7)+,D0
000011F6  2F01      1707          move.l    D1,-(A7)
000011F8  4EB9 0000 1708          jsr       _strcat
000011FC  332C      
000011FE  504F      1709          addq.w    #8,A7
                    1710   ; BytePointer = (char *)(WatchPointAddress[x]) ;
00001200  48C2      1711          ext.l     D2
00001202  2002      1712          move.l    D2,D0
00001204  E588      1713          lsl.l     #2,D0
00001206  41F9 0803 1714          lea       _WatchPointAddress.L,A0
0000120A  0182      
0000120C  2A30 0800 1715          move.l    0(A0,D0.L),D5
                    1716   ; for(j = 0; j < (short)(16); j++)
00001210  4243      1717          clr.w     D3
                    1718   DumpRegisters_12:
00001212  0C43 0010 1719          cmp.w     #16,D3
00001216  6C00 007E 1720          bge       DumpRegisters_14
                    1721   ; {
                    1722   ; c = ((char)(BytePointer[j]) & 0x7f) ;
0000121A  2045      1723          move.l    D5,A0
0000121C  48C3      1724          ext.l     D3
0000121E  1030 3800 1725          move.b    0(A0,D3.L),D0
00001222  C03C 007F 1726          and.b     #127,D0
00001226  1E00      1727          move.b    D0,D7
                    1728   ; if((c > (char)(0x7f)) || (c < (char)(' ')))
00001228  0C07 007F 1729          cmp.b     #127,D7
0000122C  6206      1730          bhi.s     DumpRegisters_17
0000122E  0C07 0020 1731          cmp.b     #32,D7
00001232  6416      1732          bhs.s     DumpRegisters_15
                    1733   DumpRegisters_17:
                    1734   ; sprintf(TempString, ".") ;
00001234  4879 0000 1735          pea       @m68kde~1_25.L
00001238  481A      
0000123A  4879 0803 1736          pea       _TempString.L
0000123E  04E2      
00001240  4EB9 0000 1737          jsr       _sprintf
00001244  32F8      
00001246  504F      1738          addq.w    #8,A7
00001248  6026      1739          bra.s     DumpRegisters_16
                    1740   DumpRegisters_15:
                    1741   ; else
                    1742   ; sprintf(TempString, "%c", BytePointer[j]) ;
0000124A  2045      1743          move.l    D5,A0
0000124C  48C3      1744          ext.l     D3
0000124E  1230 3800 1745          move.b    0(A0,D3.L),D1
00001252  C2BC 0000 1746          and.l     #255,D1
00001256  00FF      
00001258  2F01      1747          move.l    D1,-(A7)
0000125A  4879 0000 1748          pea       @m68kde~1_26.L
0000125E  481C      
00001260  4879 0803 1749          pea       _TempString.L
00001264  04E2      
00001266  4EB9 0000 1750          jsr       _sprintf
0000126A  32F8      
0000126C  DEFC 000C 1751          add.w     #12,A7
                    1752   DumpRegisters_16:
                    1753   ; strcat(WatchPointString[x], TempString) ;
00001270  4879 0803 1754          pea       _TempString.L
00001274  04E2      
00001276  220D      1755          move.l    A5,D1
00001278  48C2      1756          ext.l     D2
0000127A  2F00      1757          move.l    D0,-(A7)
0000127C  2002      1758          move.l    D2,D0
0000127E  C1FC 0064 1759          muls      #100,D0
00001282  D280      1760          add.l     D0,D1
00001284  201F      1761          move.l    (A7)+,D0
00001286  2F01      1762          move.l    D1,-(A7)
00001288  4EB9 0000 1763          jsr       _strcat
0000128C  332C      
0000128E  504F      1764          addq.w    #8,A7
00001290  5243      1765          addq.w    #1,D3
00001292  6000 FF7E 1766          bra       DumpRegisters_12
                    1767   DumpRegisters_14:
00001296  6020      1768          bra.s     DumpRegisters_5
                    1769   DumpRegisters_4:
                    1770   ; }
                    1771   ; }
                    1772   ; else
                    1773   ; strcpy(WatchPointString[x], "") ;
00001298  4879 0000 1774          pea       @m68kde~1_27.L
0000129C  4820      
0000129E  220D      1775          move.l    A5,D1
000012A0  48C2      1776          ext.l     D2
000012A2  2F00      1777          move.l    D0,-(A7)
000012A4  2002      1778          move.l    D2,D0
000012A6  C1FC 0064 1779          muls      #100,D0
000012AA  D280      1780          add.l     D0,D1
000012AC  201F      1781          move.l    (A7)+,D0
000012AE  2F01      1782          move.l    D1,-(A7)
000012B0  4EB9 0000 1783          jsr       _strcpy
000012B4  3160      
000012B6  504F      1784          addq.w    #8,A7
                    1785   DumpRegisters_5:
000012B8  5242      1786          addq.w    #1,D2
000012BA  6000 FE36 1787          bra       DumpRegisters_1
                    1788   DumpRegisters_3:
                    1789   ; }
                    1790   ; printf("\r\n\r\n D0 = $%08X  A0 = $%08X",d0,a0) ;
000012BE  2F39 0803 1791          move.l    _a0.L,-(A7)
000012C2  0104      
000012C4  2F39 0803 1792          move.l    _d0.L,-(A7)
000012C8  00E4      
000012CA  4879 0000 1793          pea       @m68kde~1_28.L
000012CE  4822      
000012D0  4E93      1794          jsr       (A3)
000012D2  DEFC 000C 1795          add.w     #12,A7
                    1796   ; printf("\r\n D1 = $%08X  A1 = $%08X",d1,a1) ;
000012D6  2F39 0803 1797          move.l    _a1.L,-(A7)
000012DA  0108      
000012DC  2F39 0803 1798          move.l    _d1.L,-(A7)
000012E0  00E8      
000012E2  4879 0000 1799          pea       @m68kde~1_29.L
000012E6  483E      
000012E8  4E93      1800          jsr       (A3)
000012EA  DEFC 000C 1801          add.w     #12,A7
                    1802   ; printf("\r\n D2 = $%08X  A2 = $%08X",d2,a2) ;
000012EE  2F39 0803 1803          move.l    _a2.L,-(A7)
000012F2  010C      
000012F4  2F39 0803 1804          move.l    _d2.L,-(A7)
000012F8  00EC      
000012FA  4879 0000 1805          pea       @m68kde~1_30.L
000012FE  4858      
00001300  4E93      1806          jsr       (A3)
00001302  DEFC 000C 1807          add.w     #12,A7
                    1808   ; printf("\r\n D3 = $%08X  A3 = $%08X",d3,a3) ;
00001306  2F39 0803 1809          move.l    _a3.L,-(A7)
0000130A  0110      
0000130C  2F39 0803 1810          move.l    _d3.L,-(A7)
00001310  00F0      
00001312  4879 0000 1811          pea       @m68kde~1_31.L
00001316  4872      
00001318  4E93      1812          jsr       (A3)
0000131A  DEFC 000C 1813          add.w     #12,A7
                    1814   ; printf("\r\n D4 = $%08X  A4 = $%08X",d4,a4) ;
0000131E  2F39 0803 1815          move.l    _a4.L,-(A7)
00001322  0114      
00001324  2F39 0803 1816          move.l    _d4.L,-(A7)
00001328  00F4      
0000132A  4879 0000 1817          pea       @m68kde~1_32.L
0000132E  488C      
00001330  4E93      1818          jsr       (A3)
00001332  DEFC 000C 1819          add.w     #12,A7
                    1820   ; printf("\r\n D5 = $%08X  A5 = $%08X",d5,a5) ;
00001336  2F39 0803 1821          move.l    _a5.L,-(A7)
0000133A  0118      
0000133C  2F39 0803 1822          move.l    _d5.L,-(A7)
00001340  00F8      
00001342  4879 0000 1823          pea       @m68kde~1_33.L
00001346  48A6      
00001348  4E93      1824          jsr       (A3)
0000134A  DEFC 000C 1825          add.w     #12,A7
                    1826   ; printf("\r\n D6 = $%08X  A6 = $%08X",d6,a6) ;
0000134E  2F39 0803 1827          move.l    _a6.L,-(A7)
00001352  011C      
00001354  2F39 0803 1828          move.l    _d6.L,-(A7)
00001358  00FC      
0000135A  4879 0000 1829          pea       @m68kde~1_34.L
0000135E  48C0      
00001360  4E93      1830          jsr       (A3)
00001362  DEFC 000C 1831          add.w     #12,A7
                    1832   ; printf("\r\n D7 = $%08X  A7 = $%08X",d7,((SR & (unsigned short int)(0x2000)) == ((unsigned short int)(0x2000))) ? SSP : USP) ;
00001366  3214      1833          move.w    (A4),D1
00001368  C27C 2000 1834          and.w     #8192,D1
0000136C  0C41 2000 1835          cmp.w     #8192,D1
00001370  6608      1836          bne.s     DumpRegisters_18
00001372  2239 0803 1837          move.l    _SSP.L,D1
00001376  0124      
00001378  6006      1838          bra.s     DumpRegisters_19
                    1839   DumpRegisters_18:
0000137A  2239 0803 1840          move.l    _USP.L,D1
0000137E  0128      
                    1841   DumpRegisters_19:
00001380  2F01      1842          move.l    D1,-(A7)
00001382  2F39 0803 1843          move.l    _d7.L,-(A7)
00001386  0100      
00001388  4879 0000 1844          pea       @m68kde~1_35.L
0000138C  48DA      
0000138E  4E93      1845          jsr       (A3)
00001390  DEFC 000C 1846          add.w     #12,A7
                    1847   ; printf("\r\n\r\nUSP = $%08X  (A7) User SP", USP ) ;
00001394  2F39 0803 1848          move.l    _USP.L,-(A7)
00001398  0128      
0000139A  4879 0000 1849          pea       @m68kde~1_36.L
0000139E  48F4      
000013A0  4E93      1850          jsr       (A3)
000013A2  504F      1851          addq.w    #8,A7
                    1852   ; printf("\r\nSSP = $%08X  (A7) Supervisor SP", SSP) ;
000013A4  2F39 0803 1853          move.l    _SSP.L,-(A7)
000013A8  0124      
000013AA  4879 0000 1854          pea       @m68kde~1_37.L
000013AE  4912      
000013B0  4E93      1855          jsr       (A3)
000013B2  504F      1856          addq.w    #8,A7
                    1857   ; printf("\r\n SR = $%04X   ",SR) ;
000013B4  3214      1858          move.w    (A4),D1
000013B6  C2BC 0000 1859          and.l     #65535,D1
000013BA  FFFF      
000013BC  2F01      1860          move.l    D1,-(A7)
000013BE  4879 0000 1861          pea       @m68kde~1_38.L
000013C2  4934      
000013C4  4E93      1862          jsr       (A3)
000013C6  504F      1863          addq.w    #8,A7
                    1864   ; // display the status word in characters etc.
                    1865   ; printf("   [") ;
000013C8  4879 0000 1866          pea       @m68kde~1_39.L
000013CC  4946      
000013CE  4E93      1867          jsr       (A3)
000013D0  584F      1868          addq.w    #4,A7
                    1869   ; if((SR & (unsigned short int)(0x8000)) == (unsigned short int)(0x8000)) putchar('T') ; else putchar('-') ;      // Trace bit(bit 15)
000013D2  3014      1870          move.w    (A4),D0
000013D4  C07C 8000 1871          and.w     #32768,D0
000013D8  0C40 8000 1872          cmp.w     #32768,D0
000013DC  660A      1873          bne.s     DumpRegisters_20
000013DE  4878 0054 1874          pea       84
000013E2  4E92      1875          jsr       (A2)
000013E4  584F      1876          addq.w    #4,A7
000013E6  6008      1877          bra.s     DumpRegisters_21
                    1878   DumpRegisters_20:
000013E8  4878 002D 1879          pea       45
000013EC  4E92      1880          jsr       (A2)
000013EE  584F      1881          addq.w    #4,A7
                    1882   DumpRegisters_21:
                    1883   ; if((SR & (unsigned short int)(0x2000)) == (unsigned short int)(0x2000)) putchar('S') ; else putchar('U') ;      // supervisor bit  (bit 13)
000013F0  3014      1884          move.w    (A4),D0
000013F2  C07C 2000 1885          and.w     #8192,D0
000013F6  0C40 2000 1886          cmp.w     #8192,D0
000013FA  660A      1887          bne.s     DumpRegisters_22
000013FC  4878 0053 1888          pea       83
00001400  4E92      1889          jsr       (A2)
00001402  584F      1890          addq.w    #4,A7
00001404  6008      1891          bra.s     DumpRegisters_23
                    1892   DumpRegisters_22:
00001406  4878 0055 1893          pea       85
0000140A  4E92      1894          jsr       (A2)
0000140C  584F      1895          addq.w    #4,A7
                    1896   DumpRegisters_23:
                    1897   ; if((SR & (unsigned short int)(0x0400)) == (unsigned short int)(0x0400)) putchar('1') ; else putchar('0') ;      // IRQ2 Bit (bit 10)
0000140E  3014      1898          move.w    (A4),D0
00001410  C07C 0400 1899          and.w     #1024,D0
00001414  0C40 0400 1900          cmp.w     #1024,D0
00001418  660A      1901          bne.s     DumpRegisters_24
0000141A  4878 0031 1902          pea       49
0000141E  4E92      1903          jsr       (A2)
00001420  584F      1904          addq.w    #4,A7
00001422  6008      1905          bra.s     DumpRegisters_25
                    1906   DumpRegisters_24:
00001424  4878 0030 1907          pea       48
00001428  4E92      1908          jsr       (A2)
0000142A  584F      1909          addq.w    #4,A7
                    1910   DumpRegisters_25:
                    1911   ; if((SR & (unsigned short int)(0x0200)) == (unsigned short int)(0x0200)) putchar('1') ; else putchar('0') ;      // IRQ1 Bit (bit 9)
0000142C  3014      1912          move.w    (A4),D0
0000142E  C07C 0200 1913          and.w     #512,D0
00001432  0C40 0200 1914          cmp.w     #512,D0
00001436  660A      1915          bne.s     DumpRegisters_26
00001438  4878 0031 1916          pea       49
0000143C  4E92      1917          jsr       (A2)
0000143E  584F      1918          addq.w    #4,A7
00001440  6008      1919          bra.s     DumpRegisters_27
                    1920   DumpRegisters_26:
00001442  4878 0030 1921          pea       48
00001446  4E92      1922          jsr       (A2)
00001448  584F      1923          addq.w    #4,A7
                    1924   DumpRegisters_27:
                    1925   ; if((SR & (unsigned short int)(0x0100)) == (unsigned short int)(0x0100)) putchar('1') ; else putchar('0') ;      // IRQ0 Bit (bit 8)
0000144A  3014      1926          move.w    (A4),D0
0000144C  C07C 0100 1927          and.w     #256,D0
00001450  0C40 0100 1928          cmp.w     #256,D0
00001454  660A      1929          bne.s     DumpRegisters_28
00001456  4878 0031 1930          pea       49
0000145A  4E92      1931          jsr       (A2)
0000145C  584F      1932          addq.w    #4,A7
0000145E  6008      1933          bra.s     DumpRegisters_29
                    1934   DumpRegisters_28:
00001460  4878 0030 1935          pea       48
00001464  4E92      1936          jsr       (A2)
00001466  584F      1937          addq.w    #4,A7
                    1938   DumpRegisters_29:
                    1939   ; if((SR & (unsigned short int)(0x0010)) == (unsigned short int)(0x0010)) putchar('X') ; else putchar('-') ;      // X Bit (bit 4)
00001468  3014      1940          move.w    (A4),D0
0000146A  C07C 0010 1941          and.w     #16,D0
0000146E  0C40 0010 1942          cmp.w     #16,D0
00001472  660A      1943          bne.s     DumpRegisters_30
00001474  4878 0058 1944          pea       88
00001478  4E92      1945          jsr       (A2)
0000147A  584F      1946          addq.w    #4,A7
0000147C  6008      1947          bra.s     DumpRegisters_31
                    1948   DumpRegisters_30:
0000147E  4878 002D 1949          pea       45
00001482  4E92      1950          jsr       (A2)
00001484  584F      1951          addq.w    #4,A7
                    1952   DumpRegisters_31:
                    1953   ; if((SR & (unsigned short int)(0x0008)) == (unsigned short int)(0x0008)) putchar('N') ; else putchar('-') ;      // N Bit (bit 3)
00001486  3014      1954          move.w    (A4),D0
00001488  C07C 0008 1955          and.w     #8,D0
0000148C  0C40 0008 1956          cmp.w     #8,D0
00001490  660A      1957          bne.s     DumpRegisters_32
00001492  4878 004E 1958          pea       78
00001496  4E92      1959          jsr       (A2)
00001498  584F      1960          addq.w    #4,A7
0000149A  6008      1961          bra.s     DumpRegisters_33
                    1962   DumpRegisters_32:
0000149C  4878 002D 1963          pea       45
000014A0  4E92      1964          jsr       (A2)
000014A2  584F      1965          addq.w    #4,A7
                    1966   DumpRegisters_33:
                    1967   ; if((SR & (unsigned short int)(0x0004)) == (unsigned short int)(0x0004)) putchar('Z') ; else putchar('-') ;      // Z Bit (bit 2)
000014A4  3014      1968          move.w    (A4),D0
000014A6  C07C 0004 1969          and.w     #4,D0
000014AA  0C40 0004 1970          cmp.w     #4,D0
000014AE  660A      1971          bne.s     DumpRegisters_34
000014B0  4878 005A 1972          pea       90
000014B4  4E92      1973          jsr       (A2)
000014B6  584F      1974          addq.w    #4,A7
000014B8  6008      1975          bra.s     DumpRegisters_35
                    1976   DumpRegisters_34:
000014BA  4878 002D 1977          pea       45
000014BE  4E92      1978          jsr       (A2)
000014C0  584F      1979          addq.w    #4,A7
                    1980   DumpRegisters_35:
                    1981   ; if((SR & (unsigned short int)(0x0002)) == (unsigned short int)(0x0002)) putchar('V') ; else putchar('-') ;      // V Bit (bit 1)
000014C2  3014      1982          move.w    (A4),D0
000014C4  C07C 0002 1983          and.w     #2,D0
000014C8  0C40 0002 1984          cmp.w     #2,D0
000014CC  660A      1985          bne.s     DumpRegisters_36
000014CE  4878 0056 1986          pea       86
000014D2  4E92      1987          jsr       (A2)
000014D4  584F      1988          addq.w    #4,A7
000014D6  6008      1989          bra.s     DumpRegisters_37
                    1990   DumpRegisters_36:
000014D8  4878 002D 1991          pea       45
000014DC  4E92      1992          jsr       (A2)
000014DE  584F      1993          addq.w    #4,A7
                    1994   DumpRegisters_37:
                    1995   ; if((SR & (unsigned short int)(0x0001)) == (unsigned short int)(0x0001)) putchar('C') ; else putchar('-') ;      // C Bit (bit 0)
000014E0  3014      1996          move.w    (A4),D0
000014E2  C07C 0001 1997          and.w     #1,D0
000014E6  0C40 0001 1998          cmp.w     #1,D0
000014EA  660A      1999          bne.s     DumpRegisters_38
000014EC  4878 0043 2000          pea       67
000014F0  4E92      2001          jsr       (A2)
000014F2  584F      2002          addq.w    #4,A7
000014F4  6008      2003          bra.s     DumpRegisters_39
                    2004   DumpRegisters_38:
000014F6  4878 002D 2005          pea       45
000014FA  4E92      2006          jsr       (A2)
000014FC  584F      2007          addq.w    #4,A7
                    2008   DumpRegisters_39:
                    2009   ; putchar(']') ;
000014FE  4878 005D 2010          pea       93
00001502  4E92      2011          jsr       (A2)
00001504  584F      2012          addq.w    #4,A7
                    2013   ; printf("\r\n PC = $%08X  ", PC) ;
00001506  2F39 0803 2014          move.l    _PC.L,-(A7)
0000150A  0120      
0000150C  4879 0000 2015          pea       @m68kde~1_40.L
00001510  494C      
00001512  4E93      2016          jsr       (A3)
00001514  504F      2017          addq.w    #8,A7
                    2018   ; if(*(unsigned short int *)(PC) == 0x4e4e)
00001516  2039 0803 2019          move.l    _PC.L,D0
0000151A  0120      
0000151C  2040      2020          move.l    D0,A0
0000151E  3010      2021          move.w    (A0),D0
00001520  0C40 4E4E 2022          cmp.w     #20046,D0
00001524  660A      2023          bne.s     DumpRegisters_40
                    2024   ; printf("[@ BREAKPOINT]") ;
00001526  4879 0000 2025          pea       @m68kde~1_41.L
0000152A  495C      
0000152C  4E93      2026          jsr       (A3)
0000152E  584F      2027          addq.w    #4,A7
                    2028   DumpRegisters_40:
                    2029   ; printf("\r\n") ;
00001530  4879 0000 2030          pea       @m68kde~1_1.L
00001534  45C8      
00001536  4E93      2031          jsr       (A3)
00001538  584F      2032          addq.w    #4,A7
                    2033   ; for(i=0; i < 8; i++)    {
0000153A  4244      2034          clr.w     D4
                    2035   DumpRegisters_42:
0000153C  0C44 0008 2036          cmp.w     #8,D4
00001540  6C00 0040 2037          bge       DumpRegisters_44
                    2038   ; if(WatchPointSetOrCleared[i] == 1)
00001544  48C4      2039          ext.l     D4
00001546  2004      2040          move.l    D4,D0
00001548  E588      2041          lsl.l     #2,D0
0000154A  41F9 0803 2042          lea       _WatchPointSetOrCleared.L,A0
0000154E  01A2      
00001550  2030 0800 2043          move.l    0(A0,D0.L),D0
00001554  0C80 0000 2044          cmp.l     #1,D0
00001558  0001      
0000155A  6622      2045          bne.s     DumpRegisters_45
                    2046   ; printf("\r\nWP%d = %s", i, WatchPointString[i]) ;
0000155C  220D      2047          move.l    A5,D1
0000155E  48C4      2048          ext.l     D4
00001560  2F00      2049          move.l    D0,-(A7)
00001562  2004      2050          move.l    D4,D0
00001564  C1FC 0064 2051          muls      #100,D0
00001568  D280      2052          add.l     D0,D1
0000156A  201F      2053          move.l    (A7)+,D0
0000156C  2F01      2054          move.l    D1,-(A7)
0000156E  48C4      2055          ext.l     D4
00001570  2F04      2056          move.l    D4,-(A7)
00001572  4879 0000 2057          pea       @m68kde~1_42.L
00001576  496C      
00001578  4E93      2058          jsr       (A3)
0000157A  DEFC 000C 2059          add.w     #12,A7
                    2060   DumpRegisters_45:
0000157E  5244      2061          addq.w    #1,D4
00001580  60BA      2062          bra       DumpRegisters_42
                    2063   DumpRegisters_44:
00001582  4CDF 3CFC 2064          movem.l   (A7)+,D2/D3/D4/D5/D6/D7/A2/A3/A4/A5
00001586  4E75      2065          rts
                    2066   ; }
                    2067   ; }
                    2068   ; // Trace Exception Handler
                    2069   ; void DumpRegistersandPause(void)
                    2070   ; {
                    2071   _DumpRegistersandPause:
00001588  2F0A      2072          move.l    A2,-(A7)
0000158A  45F9 0000 2073          lea       _printf.L,A2
0000158E  3C04      
                    2074   ; printf("\r\n\r\n\r\n\r\n\r\n\r\nSingle Step  :[ON]") ;
00001590  4879 0000 2075          pea       @m68kde~1_43.L
00001594  4978      
00001596  4E92      2076          jsr       (A2)
00001598  584F      2077          addq.w    #4,A7
                    2078   ; printf("\r\nBreak Points :[Disabled]") ;
0000159A  4879 0000 2079          pea       @m68kde~1_44.L
0000159E  4998      
000015A0  4E92      2080          jsr       (A2)
000015A2  584F      2081          addq.w    #4,A7
                    2082   ; DumpRegisters() ;
000015A4  4EB8 10D4 2083          jsr       _DumpRegisters
                    2084   ; printf("\r\nPress <SPACE> to Execute Next Instruction");
000015A8  4879 0000 2085          pea       @m68kde~1_45.L
000015AC  49B4      
000015AE  4E92      2086          jsr       (A2)
000015B0  584F      2087          addq.w    #4,A7
                    2088   ; printf("\r\nPress <ESC> to Resume Program") ;
000015B2  4879 0000 2089          pea       @m68kde~1_46.L
000015B6  49E0      
000015B8  4E92      2090          jsr       (A2)
000015BA  584F      2091          addq.w    #4,A7
                    2092   ; menu() ;
000015BC  4EB9 0000 2093          jsr       _menu
000015C0  216C      
000015C2  245F      2094          move.l    (A7)+,A2
000015C4  4E75      2095          rts
                    2096   ; }
                    2097   ; void ChangeRegisters(void)
                    2098   ; {
                    2099   _ChangeRegisters:
000015C6  4E56 FFFC 2100          link      A6,#-4
000015CA  48E7 303C 2101          movem.l   D2/D3/A2/A3/A4/A5,-(A7)
000015CE  45F9 0000 2102          lea       _printf.L,A2
000015D2  3C04      
000015D4  47EE FFFC 2103          lea       -4(A6),A3
000015D8  49F8 0CA4 2104          lea       _Get8HexDigits.L,A4
000015DC  4BF8 0B68 2105          lea       __getch.L,A5
                    2106   ; // get register name d0-d7, a0-a7, up, sp, sr, pc
                    2107   ; int reg_val ;
                    2108   ; char c, reg[3] ;
                    2109   ; reg[0] = tolower(_getch()) ;
000015E0  2F00      2110          move.l    D0,-(A7)
000015E2  4E95      2111          jsr       (A5)
000015E4  2200      2112          move.l    D0,D1
000015E6  201F      2113          move.l    (A7)+,D0
000015E8  2F01      2114          move.l    D1,-(A7)
000015EA  4EB9 0000 2115          jsr       _tolower
000015EE  32CC      
000015F0  584F      2116          addq.w    #4,A7
000015F2  1680      2117          move.b    D0,(A3)
                    2118   ; reg[1] = c = tolower(_getch()) ;
000015F4  2F00      2119          move.l    D0,-(A7)
000015F6  4E95      2120          jsr       (A5)
000015F8  2200      2121          move.l    D0,D1
000015FA  201F      2122          move.l    (A7)+,D0
000015FC  2F01      2123          move.l    D1,-(A7)
000015FE  4EB9 0000 2124          jsr       _tolower
00001602  32CC      
00001604  584F      2125          addq.w    #4,A7
00001606  1400      2126          move.b    D0,D2
00001608  1740 0001 2127          move.b    D0,1(A3)
                    2128   ; if(reg[0] == (char)('d'))  {    // change data register
0000160C  1013      2129          move.b    (A3),D0
0000160E  0C00 0064 2130          cmp.b     #100,D0
00001612  6600 00AE 2131          bne       ChangeRegisters_1
                    2132   ; if((reg[1] > (char)('7')) || (reg[1] < (char)('0'))) {
00001616  102B 0001 2133          move.b    1(A3),D0
0000161A  0C00 0037 2134          cmp.b     #55,D0
0000161E  6E0A      2135          bgt.s     ChangeRegisters_5
00001620  102B 0001 2136          move.b    1(A3),D0
00001624  0C00 0030 2137          cmp.b     #48,D0
00001628  6C0E      2138          bge.s     ChangeRegisters_3
                    2139   ChangeRegisters_5:
                    2140   ; printf("\r\nIllegal Data Register : Use D0-D7.....\r\n") ;
0000162A  4879 0000 2141          pea       @m68kde~1_47.L
0000162E  4A00      
00001630  4E92      2142          jsr       (A2)
00001632  584F      2143          addq.w    #4,A7
                    2144   ; return ;
00001634  6000 0244 2145          bra       ChangeRegisters_6
                    2146   ChangeRegisters_3:
                    2147   ; }
                    2148   ; else {
                    2149   ; printf("\r\nD%c = ", c) ;
00001638  4882      2150          ext.w     D2
0000163A  48C2      2151          ext.l     D2
0000163C  2F02      2152          move.l    D2,-(A7)
0000163E  4879 0000 2153          pea       @m68kde~1_48.L
00001642  4A2C      
00001644  4E92      2154          jsr       (A2)
00001646  504F      2155          addq.w    #8,A7
                    2156   ; reg_val = Get8HexDigits(0) ;    // read 32 bit value from user keyboard
00001648  42A7      2157          clr.l     -(A7)
0000164A  4E94      2158          jsr       (A4)
0000164C  584F      2159          addq.w    #4,A7
0000164E  2600      2160          move.l    D0,D3
                    2161   ; }
                    2162   ; // bit cludgy but d0-d7 not stored as an array for good reason
                    2163   ; if(c == (char)('0'))
00001650  0C02 0030 2164          cmp.b     #48,D2
00001654  660A      2165          bne.s     ChangeRegisters_7
                    2166   ; d0 = reg_val ;
00001656  23C3 0803 2167          move.l    D3,_d0.L
0000165A  00E4      
0000165C  6000 0060 2168          bra       ChangeRegisters_20
                    2169   ChangeRegisters_7:
                    2170   ; else if(c == (char)('1'))
00001660  0C02 0031 2171          cmp.b     #49,D2
00001664  660A      2172          bne.s     ChangeRegisters_9
                    2173   ; d1 = reg_val ;
00001666  23C3 0803 2174          move.l    D3,_d1.L
0000166A  00E8      
0000166C  6000 0050 2175          bra       ChangeRegisters_20
                    2176   ChangeRegisters_9:
                    2177   ; else if(c == (char)('2'))
00001670  0C02 0032 2178          cmp.b     #50,D2
00001674  660A      2179          bne.s     ChangeRegisters_11
                    2180   ; d2 = reg_val ;
00001676  23C3 0803 2181          move.l    D3,_d2.L
0000167A  00EC      
0000167C  6000 0040 2182          bra       ChangeRegisters_20
                    2183   ChangeRegisters_11:
                    2184   ; else if(c == (char)('3'))
00001680  0C02 0033 2185          cmp.b     #51,D2
00001684  6608      2186          bne.s     ChangeRegisters_13
                    2187   ; d3 = reg_val ;
00001686  23C3 0803 2188          move.l    D3,_d3.L
0000168A  00F0      
0000168C  6030      2189          bra.s     ChangeRegisters_20
                    2190   ChangeRegisters_13:
                    2191   ; else if(c == (char)('4'))
0000168E  0C02 0034 2192          cmp.b     #52,D2
00001692  6608      2193          bne.s     ChangeRegisters_15
                    2194   ; d4 = reg_val ;
00001694  23C3 0803 2195          move.l    D3,_d4.L
00001698  00F4      
0000169A  6022      2196          bra.s     ChangeRegisters_20
                    2197   ChangeRegisters_15:
                    2198   ; else if(c == (char)('5'))
0000169C  0C02 0035 2199          cmp.b     #53,D2
000016A0  6608      2200          bne.s     ChangeRegisters_17
                    2201   ; d5 = reg_val ;
000016A2  23C3 0803 2202          move.l    D3,_d5.L
000016A6  00F8      
000016A8  6014      2203          bra.s     ChangeRegisters_20
                    2204   ChangeRegisters_17:
                    2205   ; else if(c == (char)('6'))
000016AA  0C02 0036 2206          cmp.b     #54,D2
000016AE  6608      2207          bne.s     ChangeRegisters_19
                    2208   ; d6 = reg_val ;
000016B0  23C3 0803 2209          move.l    D3,_d6.L
000016B4  00FC      
000016B6  6006      2210          bra.s     ChangeRegisters_20
                    2211   ChangeRegisters_19:
                    2212   ; else
                    2213   ; d7 = reg_val ;
000016B8  23C3 0803 2214          move.l    D3,_d7.L
000016BC  0100      
                    2215   ChangeRegisters_20:
000016BE  6000 01B6 2216          bra       ChangeRegisters_51
                    2217   ChangeRegisters_1:
                    2218   ; }
                    2219   ; else if(reg[0] == (char)('a'))  {    // change address register, a7 is the user stack pointer, sp is the system stack pointer
000016C2  1013      2220          move.b    (A3),D0
000016C4  0C00 0061 2221          cmp.b     #97,D0
000016C8  6600 00A6 2222          bne       ChangeRegisters_21
                    2223   ; if((c > (char)('7')) || (c < (char)('0'))) {
000016CC  0C02 0037 2224          cmp.b     #55,D2
000016D0  6E06      2225          bgt.s     ChangeRegisters_25
000016D2  0C02 0030 2226          cmp.b     #48,D2
000016D6  6C0E      2227          bge.s     ChangeRegisters_23
                    2228   ChangeRegisters_25:
                    2229   ; printf("\r\nIllegal Address Register : Use A0-A7.....\r\n") ;
000016D8  4879 0000 2230          pea       @m68kde~1_49.L
000016DC  4A36      
000016DE  4E92      2231          jsr       (A2)
000016E0  584F      2232          addq.w    #4,A7
                    2233   ; return ;
000016E2  6000 0196 2234          bra       ChangeRegisters_6
                    2235   ChangeRegisters_23:
                    2236   ; }
                    2237   ; else {
                    2238   ; printf("\r\nA%c = ", c) ;
000016E6  4882      2239          ext.w     D2
000016E8  48C2      2240          ext.l     D2
000016EA  2F02      2241          move.l    D2,-(A7)
000016EC  4879 0000 2242          pea       @m68kde~1_50.L
000016F0  4A64      
000016F2  4E92      2243          jsr       (A2)
000016F4  504F      2244          addq.w    #8,A7
                    2245   ; reg_val = Get8HexDigits(0) ;    // read 32 bit value from user keyboard
000016F6  42A7      2246          clr.l     -(A7)
000016F8  4E94      2247          jsr       (A4)
000016FA  584F      2248          addq.w    #4,A7
000016FC  2600      2249          move.l    D0,D3
                    2250   ; }
                    2251   ; // bit cludgy but a0-a7 not stored as an array for good reason
                    2252   ; if(c == (char)('0'))
000016FE  0C02 0030 2253          cmp.b     #48,D2
00001702  660A      2254          bne.s     ChangeRegisters_26
                    2255   ; a0 = reg_val ;
00001704  23C3 0803 2256          move.l    D3,_a0.L
00001708  0104      
0000170A  6000 0060 2257          bra       ChangeRegisters_39
                    2258   ChangeRegisters_26:
                    2259   ; else if(c == (char)('1'))
0000170E  0C02 0031 2260          cmp.b     #49,D2
00001712  660A      2261          bne.s     ChangeRegisters_28
                    2262   ; a1 = reg_val ;
00001714  23C3 0803 2263          move.l    D3,_a1.L
00001718  0108      
0000171A  6000 0050 2264          bra       ChangeRegisters_39
                    2265   ChangeRegisters_28:
                    2266   ; else if(c == (char)('2'))
0000171E  0C02 0032 2267          cmp.b     #50,D2
00001722  660A      2268          bne.s     ChangeRegisters_30
                    2269   ; a2 = reg_val ;
00001724  23C3 0803 2270          move.l    D3,_a2.L
00001728  010C      
0000172A  6000 0040 2271          bra       ChangeRegisters_39
                    2272   ChangeRegisters_30:
                    2273   ; else if(c == (char)('3'))
0000172E  0C02 0033 2274          cmp.b     #51,D2
00001732  6608      2275          bne.s     ChangeRegisters_32
                    2276   ; a3 = reg_val ;
00001734  23C3 0803 2277          move.l    D3,_a3.L
00001738  0110      
0000173A  6030      2278          bra.s     ChangeRegisters_39
                    2279   ChangeRegisters_32:
                    2280   ; else if(c == (char)('4'))
0000173C  0C02 0034 2281          cmp.b     #52,D2
00001740  6608      2282          bne.s     ChangeRegisters_34
                    2283   ; a4 = reg_val ;
00001742  23C3 0803 2284          move.l    D3,_a4.L
00001746  0114      
00001748  6022      2285          bra.s     ChangeRegisters_39
                    2286   ChangeRegisters_34:
                    2287   ; else if(c == (char)('5'))
0000174A  0C02 0035 2288          cmp.b     #53,D2
0000174E  6608      2289          bne.s     ChangeRegisters_36
                    2290   ; a5 = reg_val ;
00001750  23C3 0803 2291          move.l    D3,_a5.L
00001754  0118      
00001756  6014      2292          bra.s     ChangeRegisters_39
                    2293   ChangeRegisters_36:
                    2294   ; else if(c == (char)('6'))
00001758  0C02 0036 2295          cmp.b     #54,D2
0000175C  6608      2296          bne.s     ChangeRegisters_38
                    2297   ; a6 = reg_val ;
0000175E  23C3 0803 2298          move.l    D3,_a6.L
00001762  011C      
00001764  6006      2299          bra.s     ChangeRegisters_39
                    2300   ChangeRegisters_38:
                    2301   ; else
                    2302   ; USP = reg_val ;
00001766  23C3 0803 2303          move.l    D3,_USP.L
0000176A  0128      
                    2304   ChangeRegisters_39:
0000176C  6000 0108 2305          bra       ChangeRegisters_51
                    2306   ChangeRegisters_21:
                    2307   ; }
                    2308   ; else if((reg[0] == (char)('u')) && (c == (char)('s')))  {
00001770  1013      2309          move.b    (A3),D0
00001772  0C00 0075 2310          cmp.b     #117,D0
00001776  6600 004E 2311          bne       ChangeRegisters_40
0000177A  0C02 0073 2312          cmp.b     #115,D2
0000177E  6600 0046 2313          bne       ChangeRegisters_40
                    2314   ; if(tolower(_getch()) == 'p')  {    // change user stack pointer
00001782  2F00      2315          move.l    D0,-(A7)
00001784  4E95      2316          jsr       (A5)
00001786  2200      2317          move.l    D0,D1
00001788  201F      2318          move.l    (A7)+,D0
0000178A  2F01      2319          move.l    D1,-(A7)
0000178C  4EB9 0000 2320          jsr       _tolower
00001790  32CC      
00001792  584F      2321          addq.w    #4,A7
00001794  0C80 0000 2322          cmp.l     #112,D0
00001798  0070      
0000179A  6618      2323          bne.s     ChangeRegisters_42
                    2324   ; printf("\r\nUser SP = ") ;
0000179C  4879 0000 2325          pea       @m68kde~1_51.L
000017A0  4A6E      
000017A2  4E92      2326          jsr       (A2)
000017A4  584F      2327          addq.w    #4,A7
                    2328   ; USP = Get8HexDigits(0) ;    // read 32 bit value from user keyboard
000017A6  42A7      2329          clr.l     -(A7)
000017A8  4E94      2330          jsr       (A4)
000017AA  584F      2331          addq.w    #4,A7
000017AC  23C0 0803 2332          move.l    D0,_USP.L
000017B0  0128      
000017B2  600E      2333          bra.s     ChangeRegisters_43
                    2334   ChangeRegisters_42:
                    2335   ; }
                    2336   ; else {
                    2337   ; printf("\r\nIllegal Register....") ;
000017B4  4879 0000 2338          pea       @m68kde~1_52.L
000017B8  4A7C      
000017BA  4E92      2339          jsr       (A2)
000017BC  584F      2340          addq.w    #4,A7
                    2341   ; return ;
000017BE  6000 00BA 2342          bra       ChangeRegisters_6
                    2343   ChangeRegisters_43:
000017C2  6000 00B2 2344          bra       ChangeRegisters_51
                    2345   ChangeRegisters_40:
                    2346   ; }
                    2347   ; }
                    2348   ; else if((reg[0] == (char)('s')) && (c == (char)('s')))  {
000017C6  1013      2349          move.b    (A3),D0
000017C8  0C00 0073 2350          cmp.b     #115,D0
000017CC  6600 004E 2351          bne       ChangeRegisters_44
000017D0  0C02 0073 2352          cmp.b     #115,D2
000017D4  6600 0046 2353          bne       ChangeRegisters_44
                    2354   ; if(tolower(_getch()) == 'p')  {    // change system stack pointer
000017D8  2F00      2355          move.l    D0,-(A7)
000017DA  4E95      2356          jsr       (A5)
000017DC  2200      2357          move.l    D0,D1
000017DE  201F      2358          move.l    (A7)+,D0
000017E0  2F01      2359          move.l    D1,-(A7)
000017E2  4EB9 0000 2360          jsr       _tolower
000017E6  32CC      
000017E8  584F      2361          addq.w    #4,A7
000017EA  0C80 0000 2362          cmp.l     #112,D0
000017EE  0070      
000017F0  6618      2363          bne.s     ChangeRegisters_46
                    2364   ; printf("\r\nSystem SP = ") ;
000017F2  4879 0000 2365          pea       @m68kde~1_53.L
000017F6  4A94      
000017F8  4E92      2366          jsr       (A2)
000017FA  584F      2367          addq.w    #4,A7
                    2368   ; SSP = Get8HexDigits(0) ;    // read 32 bit value from user keyboard
000017FC  42A7      2369          clr.l     -(A7)
000017FE  4E94      2370          jsr       (A4)
00001800  584F      2371          addq.w    #4,A7
00001802  23C0 0803 2372          move.l    D0,_SSP.L
00001806  0124      
00001808  600E      2373          bra.s     ChangeRegisters_47
                    2374   ChangeRegisters_46:
                    2375   ; }
                    2376   ; else {
                    2377   ; printf("\r\nIllegal Register....") ;
0000180A  4879 0000 2378          pea       @m68kde~1_52.L
0000180E  4A7C      
00001810  4E92      2379          jsr       (A2)
00001812  584F      2380          addq.w    #4,A7
                    2381   ; return ;
00001814  6000 0064 2382          bra       ChangeRegisters_6
                    2383   ChangeRegisters_47:
00001818  6000 005C 2384          bra       ChangeRegisters_51
                    2385   ChangeRegisters_44:
                    2386   ; }
                    2387   ; }
                    2388   ; else if((reg[0] == (char)('p')) && (c == (char)('c')))  {    // change program counter
0000181C  1013      2389          move.b    (A3),D0
0000181E  0C00 0070 2390          cmp.b     #112,D0
00001822  6620      2391          bne.s     ChangeRegisters_48
00001824  0C02 0063 2392          cmp.b     #99,D2
00001828  661A      2393          bne.s     ChangeRegisters_48
                    2394   ; printf("\r\nPC = ") ;
0000182A  4879 0000 2395          pea       @m68kde~1_54.L
0000182E  4AA4      
00001830  4E92      2396          jsr       (A2)
00001832  584F      2397          addq.w    #4,A7
                    2398   ; PC = Get8HexDigits(0) ;    // read 32 bit value from user keyboard
00001834  42A7      2399          clr.l     -(A7)
00001836  4E94      2400          jsr       (A4)
00001838  584F      2401          addq.w    #4,A7
0000183A  23C0 0803 2402          move.l    D0,_PC.L
0000183E  0120      
00001840  6000 0034 2403          bra       ChangeRegisters_51
                    2404   ChangeRegisters_48:
                    2405   ; }
                    2406   ; else if((reg[0] == (char)('s')) && (c == (char)('r')))  {    // change status register
00001844  1013      2407          move.b    (A3),D0
00001846  0C00 0073 2408          cmp.b     #115,D0
0000184A  6620      2409          bne.s     ChangeRegisters_50
0000184C  0C02 0072 2410          cmp.b     #114,D2
00001850  661A      2411          bne.s     ChangeRegisters_50
                    2412   ; printf("\r\nSR = ") ;
00001852  4879 0000 2413          pea       @m68kde~1_55.L
00001856  4AAC      
00001858  4E92      2414          jsr       (A2)
0000185A  584F      2415          addq.w    #4,A7
                    2416   ; SR = Get4HexDigits(0) ;    // read 16 bit value from user keyboard
0000185C  42A7      2417          clr.l     -(A7)
0000185E  4EB8 0C58 2418          jsr       _Get4HexDigits
00001862  584F      2419          addq.w    #4,A7
00001864  33C0 0803 2420          move.w    D0,_SR.L
00001868  012C      
0000186A  600A      2421          bra.s     ChangeRegisters_51
                    2422   ChangeRegisters_50:
                    2423   ; }
                    2424   ; else
                    2425   ; printf("\r\nIllegal Register: Use A0-A7, D0-D7, SSP, USP, PC or SR\r\n") ;
0000186C  4879 0000 2426          pea       @m68kde~1_56.L
00001870  4AB4      
00001872  4E92      2427          jsr       (A2)
00001874  584F      2428          addq.w    #4,A7
                    2429   ChangeRegisters_51:
                    2430   ; DumpRegisters() ;
00001876  4EB8 10D4 2431          jsr       _DumpRegisters
                    2432   ChangeRegisters_6:
0000187A  4CDF 3C0C 2433          movem.l   (A7)+,D2/D3/A2/A3/A4/A5
0000187E  4E5E      2434          unlk      A6
00001880  4E75      2435          rts
                    2436   ; }
                    2437   ; void BreakPointDisplay(void)
                    2438   ; {
                    2439   _BreakPointDisplay:
00001882  48E7 3030 2440          movem.l   D2/D3/A2/A3,-(A7)
00001886  45F9 0000 2441          lea       _printf.L,A2
0000188A  3C04      
0000188C  47F9 0803 2442          lea       _BreakPointAddress.L,A3
00001890  012E      
                    2443   ; int i, BreakPointsSet = 0 ;
00001892  4283      2444          clr.l     D3
                    2445   ; // any break points  set
                    2446   ; for(i = 0; i < 8; i++)  {
00001894  4282      2447          clr.l     D2
                    2448   BreakPointDisplay_1:
00001896  0C82 0000 2449          cmp.l     #8,D2
0000189A  0008      
0000189C  6C1C      2450          bge.s     BreakPointDisplay_3
                    2451   ; if(BreakPointSetOrCleared[i] == 1)
0000189E  2002      2452          move.l    D2,D0
000018A0  E588      2453          lsl.l     #2,D0
000018A2  41F9 0803 2454          lea       _BreakPointSetOrCleared.L,A0
000018A6  015E      
000018A8  2030 0800 2455          move.l    0(A0,D0.L),D0
000018AC  0C80 0000 2456          cmp.l     #1,D0
000018B0  0001      
000018B2  6602      2457          bne.s     BreakPointDisplay_4
                    2458   ; BreakPointsSet = 1;
000018B4  7601      2459          moveq     #1,D3
                    2460   BreakPointDisplay_4:
000018B6  5282      2461          addq.l    #1,D2
000018B8  60DC      2462          bra       BreakPointDisplay_1
                    2463   BreakPointDisplay_3:
                    2464   ; }
                    2465   ; if(BreakPointsSet == 1) {
000018BA  0C83 0000 2466          cmp.l     #1,D3
000018BE  0001      
000018C0  6616      2467          bne.s     BreakPointDisplay_6
                    2468   ; printf("\r\n\r\nNum     Address      Instruction") ;
000018C2  4879 0000 2469          pea       @m68kde~1_57.L
000018C6  4AF0      
000018C8  4E92      2470          jsr       (A2)
000018CA  584F      2471          addq.w    #4,A7
                    2472   ; printf("\r\n---     ---------    -----------") ;
000018CC  4879 0000 2473          pea       @m68kde~1_58.L
000018D0  4B16      
000018D2  4E92      2474          jsr       (A2)
000018D4  584F      2475          addq.w    #4,A7
000018D6  600A      2476          bra.s     BreakPointDisplay_7
                    2477   BreakPointDisplay_6:
                    2478   ; }
                    2479   ; else
                    2480   ; printf("\r\nNo BreakPoints Set") ;
000018D8  4879 0000 2481          pea       @m68kde~1_59.L
000018DC  4B3A      
000018DE  4E92      2482          jsr       (A2)
000018E0  584F      2483          addq.w    #4,A7
                    2484   BreakPointDisplay_7:
                    2485   ; for(i = 0; i < 8; i++)  {
000018E2  4282      2486          clr.l     D2
                    2487   BreakPointDisplay_8:
000018E4  0C82 0000 2488          cmp.l     #8,D2
000018E8  0008      
000018EA  6C00 005A 2489          bge       BreakPointDisplay_10
                    2490   ; // put opcode back, then put break point back
                    2491   ; if(BreakPointSetOrCleared[i] == 1)  {
000018EE  2002      2492          move.l    D2,D0
000018F0  E588      2493          lsl.l     #2,D0
000018F2  41F9 0803 2494          lea       _BreakPointSetOrCleared.L,A0
000018F6  015E      
000018F8  2030 0800 2495          move.l    0(A0,D0.L),D0
000018FC  0C80 0000 2496          cmp.l     #1,D0
00001900  0001      
00001902  6600 003E 2497          bne       BreakPointDisplay_11
                    2498   ; *(unsigned short int *)(BreakPointAddress[i]) = BreakPointInstruction[i];
00001906  2002      2499          move.l    D2,D0
00001908  E388      2500          lsl.l     #1,D0
0000190A  41F9 0803 2501          lea       _BreakPointInstruction.L,A0
0000190E  014E      
00001910  2202      2502          move.l    D2,D1
00001912  E589      2503          lsl.l     #2,D1
00001914  2233 1800 2504          move.l    0(A3,D1.L),D1
00001918  2241      2505          move.l    D1,A1
0000191A  32B0 0800 2506          move.w    0(A0,D0.L),(A1)
                    2507   ; *(unsigned short int *)(BreakPointAddress[i]) = (unsigned short int)(0x4e4e) ;
0000191E  2002      2508          move.l    D2,D0
00001920  E588      2509          lsl.l     #2,D0
00001922  2033 0800 2510          move.l    0(A3,D0.L),D0
00001926  2040      2511          move.l    D0,A0
00001928  30BC 4E4E 2512          move.w    #20046,(A0)
                    2513   ; printf("\r\n%3d     $%08x",i, BreakPointAddress[i]) ;
0000192C  2202      2514          move.l    D2,D1
0000192E  E589      2515          lsl.l     #2,D1
00001930  2F33 1800 2516          move.l    0(A3,D1.L),-(A7)
00001934  2F02      2517          move.l    D2,-(A7)
00001936  4879 0000 2518          pea       @m68kde~1_60.L
0000193A  4B50      
0000193C  4E92      2519          jsr       (A2)
0000193E  DEFC 000C 2520          add.w     #12,A7
                    2521   BreakPointDisplay_11:
00001942  5282      2522          addq.l    #1,D2
00001944  609E      2523          bra       BreakPointDisplay_8
                    2524   BreakPointDisplay_10:
                    2525   ; }
                    2526   ; }
                    2527   ; printf("\r\n") ;
00001946  4879 0000 2528          pea       @m68kde~1_1.L
0000194A  45C8      
0000194C  4E92      2529          jsr       (A2)
0000194E  584F      2530          addq.w    #4,A7
00001950  4CDF 0C0C 2531          movem.l   (A7)+,D2/D3/A2/A3
00001954  4E75      2532          rts
                    2533   ; }
                    2534   ; void WatchPointDisplay(void)
                    2535   ; {
                    2536   _WatchPointDisplay:
00001956  48E7 3020 2537          movem.l   D2/D3/A2,-(A7)
0000195A  45F9 0000 2538          lea       _printf.L,A2
0000195E  3C04      
                    2539   ; int i ;
                    2540   ; int WatchPointsSet = 0 ;
00001960  4283      2541          clr.l     D3
                    2542   ; // any watchpoints set
                    2543   ; for(i = 0; i < 8; i++)  {
00001962  4282      2544          clr.l     D2
                    2545   WatchPointDisplay_1:
00001964  0C82 0000 2546          cmp.l     #8,D2
00001968  0008      
0000196A  6C1C      2547          bge.s     WatchPointDisplay_3
                    2548   ; if(WatchPointSetOrCleared[i] == 1)
0000196C  2002      2549          move.l    D2,D0
0000196E  E588      2550          lsl.l     #2,D0
00001970  41F9 0803 2551          lea       _WatchPointSetOrCleared.L,A0
00001974  01A2      
00001976  2030 0800 2552          move.l    0(A0,D0.L),D0
0000197A  0C80 0000 2553          cmp.l     #1,D0
0000197E  0001      
00001980  6602      2554          bne.s     WatchPointDisplay_4
                    2555   ; WatchPointsSet = 1;
00001982  7601      2556          moveq     #1,D3
                    2557   WatchPointDisplay_4:
00001984  5282      2558          addq.l    #1,D2
00001986  60DC      2559          bra       WatchPointDisplay_1
                    2560   WatchPointDisplay_3:
                    2561   ; }
                    2562   ; if(WatchPointsSet == 1) {
00001988  0C83 0000 2563          cmp.l     #1,D3
0000198C  0001      
0000198E  6616      2564          bne.s     WatchPointDisplay_6
                    2565   ; printf("\r\nNum     Address") ;
00001990  4879 0000 2566          pea       @m68kde~1_61.L
00001994  4B60      
00001996  4E92      2567          jsr       (A2)
00001998  584F      2568          addq.w    #4,A7
                    2569   ; printf("\r\n---     ---------") ;
0000199A  4879 0000 2570          pea       @m68kde~1_62.L
0000199E  4B72      
000019A0  4E92      2571          jsr       (A2)
000019A2  584F      2572          addq.w    #4,A7
000019A4  600A      2573          bra.s     WatchPointDisplay_7
                    2574   WatchPointDisplay_6:
                    2575   ; }
                    2576   ; else
                    2577   ; printf("\r\nNo WatchPoints Set") ;
000019A6  4879 0000 2578          pea       @m68kde~1_63.L
000019AA  4B86      
000019AC  4E92      2579          jsr       (A2)
000019AE  584F      2580          addq.w    #4,A7
                    2581   WatchPointDisplay_7:
                    2582   ; for(i = 0; i < 8; i++)  {
000019B0  4282      2583          clr.l     D2
                    2584   WatchPointDisplay_8:
000019B2  0C82 0000 2585          cmp.l     #8,D2
000019B6  0008      
000019B8  6C00 0038 2586          bge       WatchPointDisplay_10
                    2587   ; if(WatchPointSetOrCleared[i] == 1)
000019BC  2002      2588          move.l    D2,D0
000019BE  E588      2589          lsl.l     #2,D0
000019C0  41F9 0803 2590          lea       _WatchPointSetOrCleared.L,A0
000019C4  01A2      
000019C6  2030 0800 2591          move.l    0(A0,D0.L),D0
000019CA  0C80 0000 2592          cmp.l     #1,D0
000019CE  0001      
000019D0  661C      2593          bne.s     WatchPointDisplay_11
                    2594   ; printf("\r\n%3d     $%08x",i, WatchPointAddress[i]) ;
000019D2  2202      2595          move.l    D2,D1
000019D4  E589      2596          lsl.l     #2,D1
000019D6  41F9 0803 2597          lea       _WatchPointAddress.L,A0
000019DA  0182      
000019DC  2F30 1800 2598          move.l    0(A0,D1.L),-(A7)
000019E0  2F02      2599          move.l    D2,-(A7)
000019E2  4879 0000 2600          pea       @m68kde~1_60.L
000019E6  4B50      
000019E8  4E92      2601          jsr       (A2)
000019EA  DEFC 000C 2602          add.w     #12,A7
                    2603   WatchPointDisplay_11:
000019EE  5282      2604          addq.l    #1,D2
000019F0  60C0      2605          bra       WatchPointDisplay_8
                    2606   WatchPointDisplay_10:
                    2607   ; }
                    2608   ; printf("\r\n") ;
000019F2  4879 0000 2609          pea       @m68kde~1_1.L
000019F6  45C8      
000019F8  4E92      2610          jsr       (A2)
000019FA  584F      2611          addq.w    #4,A7
000019FC  4CDF 040C 2612          movem.l   (A7)+,D2/D3/A2
00001A00  4E75      2613          rts
                    2614   ; }
                    2615   ; void BreakPointClear(void)
                    2616   ; {
                    2617   _BreakPointClear:
00001A02  4E56 FFFC 2618          link      A6,#-4
00001A06  48E7 2020 2619          movem.l   D2/A2,-(A7)
00001A0A  45F9 0000 2620          lea       _printf.L,A2
00001A0E  3C04      
                    2621   ; unsigned int i ;
                    2622   ; volatile unsigned short int *ProgramBreakPointAddress ;
                    2623   ; BreakPointDisplay() ;
00001A10  4EB8 1882 2624          jsr       _BreakPointDisplay
                    2625   ; printf("\r\nEnter Break Point Number: ") ;
00001A14  4879 0000 2626          pea       @m68kde~1_64.L
00001A18  4B9C      
00001A1A  4E92      2627          jsr       (A2)
00001A1C  584F      2628          addq.w    #4,A7
                    2629   ; i = xtod(_getch()) ;           // get break pointer number
00001A1E  2F00      2630          move.l    D0,-(A7)
00001A20  4EB8 0B68 2631          jsr       __getch
00001A24  2200      2632          move.l    D0,D1
00001A26  201F      2633          move.l    (A7)+,D0
00001A28  2F01      2634          move.l    D1,-(A7)
00001A2A  4EB8 0BD2 2635          jsr       _xtod
00001A2E  584F      2636          addq.w    #4,A7
00001A30  C0BC 0000 2637          and.l     #255,D0
00001A34  00FF      
00001A36  2400      2638          move.l    D0,D2
                    2639   ; if((i < 0) || (i > 7))   {
00001A38  0C82 0000 2640          cmp.l     #0,D2
00001A3C  0000      
00001A3E  6508      2641          blo.s     BreakPointClear_3
00001A40  0C82 0000 2642          cmp.l     #7,D2
00001A44  0007      
00001A46  630E      2643          bls.s     BreakPointClear_1
                    2644   BreakPointClear_3:
                    2645   ; printf("\r\nIllegal Range : Use 0 - 7") ;
00001A48  4879 0000 2646          pea       @m68kde~1_65.L
00001A4C  4BBA      
00001A4E  4E92      2647          jsr       (A2)
00001A50  584F      2648          addq.w    #4,A7
                    2649   ; return ;
00001A52  6000 0080 2650          bra       BreakPointClear_4
                    2651   BreakPointClear_1:
                    2652   ; }
                    2653   ; if(BreakPointSetOrCleared[i] == 1)  {       // if break point set
00001A56  2002      2654          move.l    D2,D0
00001A58  E588      2655          lsl.l     #2,D0
00001A5A  41F9 0803 2656          lea       _BreakPointSetOrCleared.L,A0
00001A5E  015E      
00001A60  2030 0800 2657          move.l    0(A0,D0.L),D0
00001A64  0C80 0000 2658          cmp.l     #1,D0
00001A68  0001      
00001A6A  6600 005A 2659          bne       BreakPointClear_5
                    2660   ; ProgramBreakPointAddress = (volatile unsigned short int *)(BreakPointAddress[i]) ;     // point to the instruction in the user program we are about to change
00001A6E  2002      2661          move.l    D2,D0
00001A70  E588      2662          lsl.l     #2,D0
00001A72  41F9 0803 2663          lea       _BreakPointAddress.L,A0
00001A76  012E      
00001A78  2D70 0800 2664          move.l    0(A0,D0.L),-4(A6)
00001A7C  FFFC      
                    2665   ; BreakPointAddress[i] = 0 ;
00001A7E  2002      2666          move.l    D2,D0
00001A80  E588      2667          lsl.l     #2,D0
00001A82  41F9 0803 2668          lea       _BreakPointAddress.L,A0
00001A86  012E      
00001A88  42B0 0800 2669          clr.l     0(A0,D0.L)
                    2670   ; BreakPointSetOrCleared[i] = 0 ;
00001A8C  2002      2671          move.l    D2,D0
00001A8E  E588      2672          lsl.l     #2,D0
00001A90  41F9 0803 2673          lea       _BreakPointSetOrCleared.L,A0
00001A94  015E      
00001A96  42B0 0800 2674          clr.l     0(A0,D0.L)
                    2675   ; *ProgramBreakPointAddress = BreakPointInstruction[i] ;  // put original instruction back
00001A9A  2002      2676          move.l    D2,D0
00001A9C  E388      2677          lsl.l     #1,D0
00001A9E  41F9 0803 2678          lea       _BreakPointInstruction.L,A0
00001AA2  014E      
00001AA4  226E FFFC 2679          move.l    -4(A6),A1
00001AA8  32B0 0800 2680          move.w    0(A0,D0.L),(A1)
                    2681   ; BreakPointInstruction[i] = 0 ;
00001AAC  2002      2682          move.l    D2,D0
00001AAE  E388      2683          lsl.l     #1,D0
00001AB0  41F9 0803 2684          lea       _BreakPointInstruction.L,A0
00001AB4  014E      
00001AB6  4270 0800 2685          clr.w     0(A0,D0.L)
                    2686   ; printf("\r\nBreak Point Cleared.....\r\n") ;
00001ABA  4879 0000 2687          pea       @m68kde~1_66.L
00001ABE  4BD6      
00001AC0  4E92      2688          jsr       (A2)
00001AC2  584F      2689          addq.w    #4,A7
00001AC4  600A      2690          bra.s     BreakPointClear_6
                    2691   BreakPointClear_5:
                    2692   ; }
                    2693   ; else
                    2694   ; printf("\r\nBreak Point wasn't Set.....") ;
00001AC6  4879 0000 2695          pea       @m68kde~1_67.L
00001ACA  4BF4      
00001ACC  4E92      2696          jsr       (A2)
00001ACE  584F      2697          addq.w    #4,A7
                    2698   BreakPointClear_6:
                    2699   ; BreakPointDisplay() ;
00001AD0  4EB8 1882 2700          jsr       _BreakPointDisplay
                    2701   ; return ;
                    2702   BreakPointClear_4:
00001AD4  4CDF 0404 2703          movem.l   (A7)+,D2/A2
00001AD8  4E5E      2704          unlk      A6
00001ADA  4E75      2705          rts
                    2706   ; }
                    2707   ; void WatchPointClear(void)
                    2708   ; {
                    2709   _WatchPointClear:
00001ADC  48E7 2020 2710          movem.l   D2/A2,-(A7)
00001AE0  45F9 0000 2711          lea       _printf.L,A2
00001AE4  3C04      
                    2712   ; unsigned int i ;
                    2713   ; WatchPointDisplay() ;
00001AE6  4EB8 1956 2714          jsr       _WatchPointDisplay
                    2715   ; printf("\r\nEnter Watch Point Number: ") ;
00001AEA  4879 0000 2716          pea       @m68kde~1_68.L
00001AEE  4C12      
00001AF0  4E92      2717          jsr       (A2)
00001AF2  584F      2718          addq.w    #4,A7
                    2719   ; i = xtod(_getch()) ;           // get watch pointer number
00001AF4  2F00      2720          move.l    D0,-(A7)
00001AF6  4EB8 0B68 2721          jsr       __getch
00001AFA  2200      2722          move.l    D0,D1
00001AFC  201F      2723          move.l    (A7)+,D0
00001AFE  2F01      2724          move.l    D1,-(A7)
00001B00  4EB8 0BD2 2725          jsr       _xtod
00001B04  584F      2726          addq.w    #4,A7
00001B06  C0BC 0000 2727          and.l     #255,D0
00001B0A  00FF      
00001B0C  2400      2728          move.l    D0,D2
                    2729   ; if((i < 0) || (i > 7))   {
00001B0E  0C82 0000 2730          cmp.l     #0,D2
00001B12  0000      
00001B14  6508      2731          blo.s     WatchPointClear_3
00001B16  0C82 0000 2732          cmp.l     #7,D2
00001B1A  0007      
00001B1C  630E      2733          bls.s     WatchPointClear_1
                    2734   WatchPointClear_3:
                    2735   ; printf("\r\nIllegal Range : Use 0 - 7") ;
00001B1E  4879 0000 2736          pea       @m68kde~1_65.L
00001B22  4BBA      
00001B24  4E92      2737          jsr       (A2)
00001B26  584F      2738          addq.w    #4,A7
                    2739   ; return ;
00001B28  6000 004E 2740          bra       WatchPointClear_4
                    2741   WatchPointClear_1:
                    2742   ; }
                    2743   ; if(WatchPointSetOrCleared[i] == 1)  {       // if watch point set
00001B2C  2002      2744          move.l    D2,D0
00001B2E  E588      2745          lsl.l     #2,D0
00001B30  41F9 0803 2746          lea       _WatchPointSetOrCleared.L,A0
00001B34  01A2      
00001B36  2030 0800 2747          move.l    0(A0,D0.L),D0
00001B3A  0C80 0000 2748          cmp.l     #1,D0
00001B3E  0001      
00001B40  6628      2749          bne.s     WatchPointClear_5
                    2750   ; WatchPointAddress[i] = 0 ;
00001B42  2002      2751          move.l    D2,D0
00001B44  E588      2752          lsl.l     #2,D0
00001B46  41F9 0803 2753          lea       _WatchPointAddress.L,A0
00001B4A  0182      
00001B4C  42B0 0800 2754          clr.l     0(A0,D0.L)
                    2755   ; WatchPointSetOrCleared[i] = 0 ;
00001B50  2002      2756          move.l    D2,D0
00001B52  E588      2757          lsl.l     #2,D0
00001B54  41F9 0803 2758          lea       _WatchPointSetOrCleared.L,A0
00001B58  01A2      
00001B5A  42B0 0800 2759          clr.l     0(A0,D0.L)
                    2760   ; printf("\r\nWatch Point Cleared.....\r\n") ;
00001B5E  4879 0000 2761          pea       @m68kde~1_69.L
00001B62  4C30      
00001B64  4E92      2762          jsr       (A2)
00001B66  584F      2763          addq.w    #4,A7
00001B68  600A      2764          bra.s     WatchPointClear_6
                    2765   WatchPointClear_5:
                    2766   ; }
                    2767   ; else
                    2768   ; printf("\r\nWatch Point Was not Set.....") ;
00001B6A  4879 0000 2769          pea       @m68kde~1_70.L
00001B6E  4C4E      
00001B70  4E92      2770          jsr       (A2)
00001B72  584F      2771          addq.w    #4,A7
                    2772   WatchPointClear_6:
                    2773   ; WatchPointDisplay() ;
00001B74  4EB8 1956 2774          jsr       _WatchPointDisplay
                    2775   ; return ;
                    2776   WatchPointClear_4:
00001B78  4CDF 0404 2777          movem.l   (A7)+,D2/A2
00001B7C  4E75      2778          rts
                    2779   ; }
                    2780   ; void DisableBreakPoints(void)
                    2781   ; {
                    2782   _DisableBreakPoints:
00001B7E  4E56 FFFC 2783          link      A6,#-4
00001B82  2F02      2784          move.l    D2,-(A7)
                    2785   ; int i ;
                    2786   ; volatile unsigned short int *ProgramBreakPointAddress ;
                    2787   ; for(i = 0; i < 8; i++)  {
00001B84  4282      2788          clr.l     D2
                    2789   DisableBreakPoints_1:
00001B86  0C82 0000 2790          cmp.l     #8,D2
00001B8A  0008      
00001B8C  6C00 003E 2791          bge       DisableBreakPoints_3
                    2792   ; if(BreakPointSetOrCleared[i] == 1)    {                                                    // if break point set
00001B90  2002      2793          move.l    D2,D0
00001B92  E588      2794          lsl.l     #2,D0
00001B94  41F9 0803 2795          lea       _BreakPointSetOrCleared.L,A0
00001B98  015E      
00001B9A  2030 0800 2796          move.l    0(A0,D0.L),D0
00001B9E  0C80 0000 2797          cmp.l     #1,D0
00001BA2  0001      
00001BA4  6622      2798          bne.s     DisableBreakPoints_4
                    2799   ; ProgramBreakPointAddress = (volatile unsigned short int *)(BreakPointAddress[i]) ;     // point to the instruction in the user program where the break point has been set
00001BA6  2002      2800          move.l    D2,D0
00001BA8  E588      2801          lsl.l     #2,D0
00001BAA  41F9 0803 2802          lea       _BreakPointAddress.L,A0
00001BAE  012E      
00001BB0  2D70 0800 2803          move.l    0(A0,D0.L),-4(A6)
00001BB4  FFFC      
                    2804   ; *ProgramBreakPointAddress = BreakPointInstruction[i];                                  // copy the instruction back to the user program overwritting the $4e4e
00001BB6  2002      2805          move.l    D2,D0
00001BB8  E388      2806          lsl.l     #1,D0
00001BBA  41F9 0803 2807          lea       _BreakPointInstruction.L,A0
00001BBE  014E      
00001BC0  226E FFFC 2808          move.l    -4(A6),A1
00001BC4  32B0 0800 2809          move.w    0(A0,D0.L),(A1)
                    2810   DisableBreakPoints_4:
00001BC8  5282      2811          addq.l    #1,D2
00001BCA  60BA      2812          bra       DisableBreakPoints_1
                    2813   DisableBreakPoints_3:
00001BCC  241F      2814          move.l    (A7)+,D2
00001BCE  4E5E      2815          unlk      A6
00001BD0  4E75      2816          rts
                    2817   ; }
                    2818   ; }
                    2819   ; }
                    2820   ; void EnableBreakPoints(void)
                    2821   ; {
                    2822   _EnableBreakPoints:
00001BD2  4E56 FFFC 2823          link      A6,#-4
00001BD6  2F02      2824          move.l    D2,-(A7)
                    2825   ; int i ;
                    2826   ; volatile unsigned short int *ProgramBreakPointAddress ;
                    2827   ; for(i = 0; i < 8; i++)  {
00001BD8  4282      2828          clr.l     D2
                    2829   EnableBreakPoints_1:
00001BDA  0C82 0000 2830          cmp.l     #8,D2
00001BDE  0008      
00001BE0  6C32      2831          bge.s     EnableBreakPoints_3
                    2832   ; if(BreakPointSetOrCleared[i] == 1)    {                                                     // if break point set
00001BE2  2002      2833          move.l    D2,D0
00001BE4  E588      2834          lsl.l     #2,D0
00001BE6  41F9 0803 2835          lea       _BreakPointSetOrCleared.L,A0
00001BEA  015E      
00001BEC  2030 0800 2836          move.l    0(A0,D0.L),D0
00001BF0  0C80 0000 2837          cmp.l     #1,D0
00001BF4  0001      
00001BF6  6618      2838          bne.s     EnableBreakPoints_4
                    2839   ; ProgramBreakPointAddress = (volatile unsigned short int *)(BreakPointAddress[i]) ;     // point to the instruction in the user program where the break point has been set
00001BF8  2002      2840          move.l    D2,D0
00001BFA  E588      2841          lsl.l     #2,D0
00001BFC  41F9 0803 2842          lea       _BreakPointAddress.L,A0
00001C00  012E      
00001C02  2D70 0800 2843          move.l    0(A0,D0.L),-4(A6)
00001C06  FFFC      
                    2844   ; *ProgramBreakPointAddress = (unsigned short int)(0x4e4e);                              // put the breakpoint back in user program
00001C08  206E FFFC 2845          move.l    -4(A6),A0
00001C0C  30BC 4E4E 2846          move.w    #20046,(A0)
                    2847   EnableBreakPoints_4:
00001C10  5282      2848          addq.l    #1,D2
00001C12  60C6      2849          bra       EnableBreakPoints_1
                    2850   EnableBreakPoints_3:
00001C14  241F      2851          move.l    (A7)+,D2
00001C16  4E5E      2852          unlk      A6
00001C18  4E75      2853          rts
                    2854   ; }
                    2855   ; }
                    2856   ; }
                    2857   ; void KillAllBreakPoints(void)
                    2858   ; {
                    2859   _KillAllBreakPoints:
00001C1A  4E56 FFFC 2860          link      A6,#-4
00001C1E  2F02      2861          move.l    D2,-(A7)
                    2862   ; int i ;
                    2863   ; volatile unsigned short int *ProgramBreakPointAddress ;
                    2864   ; for(i = 0; i < 8; i++)  {
00001C20  4282      2865          clr.l     D2
                    2866   KillAllBreakPoints_1:
00001C22  0C82 0000 2867          cmp.l     #8,D2
00001C26  0008      
00001C28  6C00 0052 2868          bge       KillAllBreakPoints_3
                    2869   ; // clear BP
                    2870   ; ProgramBreakPointAddress = (volatile unsigned short int *)(BreakPointAddress[i]) ;     // point to the instruction in the user program where the break point has been set
00001C2C  2002      2871          move.l    D2,D0
00001C2E  E588      2872          lsl.l     #2,D0
00001C30  41F9 0803 2873          lea       _BreakPointAddress.L,A0
00001C34  012E      
00001C36  2D70 0800 2874          move.l    0(A0,D0.L),-4(A6)
00001C3A  FFFC      
                    2875   ; *ProgramBreakPointAddress = BreakPointInstruction[i];                                  // copy the instruction back to the user program
00001C3C  2002      2876          move.l    D2,D0
00001C3E  E388      2877          lsl.l     #1,D0
00001C40  41F9 0803 2878          lea       _BreakPointInstruction.L,A0
00001C44  014E      
00001C46  226E FFFC 2879          move.l    -4(A6),A1
00001C4A  32B0 0800 2880          move.w    0(A0,D0.L),(A1)
                    2881   ; BreakPointAddress[i] = 0 ;                                                             // set BP address to NULL
00001C4E  2002      2882          move.l    D2,D0
00001C50  E588      2883          lsl.l     #2,D0
00001C52  41F9 0803 2884          lea       _BreakPointAddress.L,A0
00001C56  012E      
00001C58  42B0 0800 2885          clr.l     0(A0,D0.L)
                    2886   ; BreakPointInstruction[i] = 0 ;
00001C5C  2002      2887          move.l    D2,D0
00001C5E  E388      2888          lsl.l     #1,D0
00001C60  41F9 0803 2889          lea       _BreakPointInstruction.L,A0
00001C64  014E      
00001C66  4270 0800 2890          clr.w     0(A0,D0.L)
                    2891   ; BreakPointSetOrCleared[i] = 0 ;                                                        // mark break point as cleared for future setting
00001C6A  2002      2892          move.l    D2,D0
00001C6C  E588      2893          lsl.l     #2,D0
00001C6E  41F9 0803 2894          lea       _BreakPointSetOrCleared.L,A0
00001C72  015E      
00001C74  42B0 0800 2895          clr.l     0(A0,D0.L)
00001C78  5282      2896          addq.l    #1,D2
00001C7A  60A6      2897          bra       KillAllBreakPoints_1
                    2898   KillAllBreakPoints_3:
00001C7C  241F      2899          move.l    (A7)+,D2
00001C7E  4E5E      2900          unlk      A6
00001C80  4E75      2901          rts
                    2902   ; }
                    2903   ; //BreakPointDisplay() ;       // display the break points
                    2904   ; }
                    2905   ; void KillAllWatchPoints(void)
                    2906   ; {
                    2907   _KillAllWatchPoints:
00001C82  2F02      2908          move.l    D2,-(A7)
                    2909   ; int i ;
                    2910   ; for(i = 0; i < 8; i++)  {
00001C84  4282      2911          clr.l     D2
                    2912   KillAllWatchPoints_1:
00001C86  0C82 0000 2913          cmp.l     #8,D2
00001C8A  0008      
00001C8C  6C20      2914          bge.s     KillAllWatchPoints_3
                    2915   ; WatchPointAddress[i] = 0 ;                                                             // set BP address to NULL
00001C8E  2002      2916          move.l    D2,D0
00001C90  E588      2917          lsl.l     #2,D0
00001C92  41F9 0803 2918          lea       _WatchPointAddress.L,A0
00001C96  0182      
00001C98  42B0 0800 2919          clr.l     0(A0,D0.L)
                    2920   ; WatchPointSetOrCleared[i] = 0 ;                                                        // mark break point as cleared for future setting
00001C9C  2002      2921          move.l    D2,D0
00001C9E  E588      2922          lsl.l     #2,D0
00001CA0  41F9 0803 2923          lea       _WatchPointSetOrCleared.L,A0
00001CA4  01A2      
00001CA6  42B0 0800 2924          clr.l     0(A0,D0.L)
00001CAA  5282      2925          addq.l    #1,D2
00001CAC  60D8      2926          bra       KillAllWatchPoints_1
                    2927   KillAllWatchPoints_3:
00001CAE  241F      2928          move.l    (A7)+,D2
00001CB0  4E75      2929          rts
                    2930   ; }
                    2931   ; //WatchPointDisplay() ;       // display the break points
                    2932   ; }
                    2933   ; void SetBreakPoint(void)
                    2934   ; {
                    2935   _SetBreakPoint:
00001CB2  4E56 FFFC 2936          link      A6,#-4
00001CB6  48E7 3830 2937          movem.l   D2/D3/D4/A2/A3,-(A7)
00001CBA  45F9 0000 2938          lea       _printf.L,A2
00001CBE  3C04      
00001CC0  47F9 0803 2939          lea       _BreakPointSetOrCleared.L,A3
00001CC4  015E      
                    2940   ; int i ;
                    2941   ; int BPNumber;
                    2942   ; int BPAddress;
                    2943   ; volatile unsigned short int *ProgramBreakPointAddress ;
                    2944   ; // see if any free break points
                    2945   ; for(i = 0; i < 8; i ++) {
00001CC6  4282      2946          clr.l     D2
                    2947   SetBreakPoint_1:
00001CC8  0C82 0000 2948          cmp.l     #8,D2
00001CCC  0008      
00001CCE  6C10      2949          bge.s     SetBreakPoint_3
                    2950   ; if( BreakPointSetOrCleared[i] == 0)
00001CD0  2002      2951          move.l    D2,D0
00001CD2  E588      2952          lsl.l     #2,D0
00001CD4  2033 0800 2953          move.l    0(A3,D0.L),D0
00001CD8  6602      2954          bne.s     SetBreakPoint_4
                    2955   ; break ;         // if spare BP found allow user to set it
00001CDA  6004      2956          bra.s     SetBreakPoint_3
                    2957   SetBreakPoint_4:
00001CDC  5282      2958          addq.l    #1,D2
00001CDE  60E8      2959          bra       SetBreakPoint_1
                    2960   SetBreakPoint_3:
                    2961   ; }
                    2962   ; if(i == 8) {
00001CE0  0C82 0000 2963          cmp.l     #8,D2
00001CE4  0008      
00001CE6  660E      2964          bne.s     SetBreakPoint_6
                    2965   ; printf("\r\nNo FREE Break Points.....") ;
00001CE8  4879 0000 2966          pea       @m68kde~1_71.L
00001CEC  4C6E      
00001CEE  4E92      2967          jsr       (A2)
00001CF0  584F      2968          addq.w    #4,A7
                    2969   ; return ;
00001CF2  6000 00D6 2970          bra       SetBreakPoint_15
                    2971   SetBreakPoint_6:
                    2972   ; }
                    2973   ; printf("\r\nBreak Point Address: ") ;
00001CF6  4879 0000 2974          pea       @m68kde~1_72.L
00001CFA  4C8A      
00001CFC  4E92      2975          jsr       (A2)
00001CFE  584F      2976          addq.w    #4,A7
                    2977   ; BPAddress = Get8HexDigits(0) ;
00001D00  42A7      2978          clr.l     -(A7)
00001D02  4EB8 0CA4 2979          jsr       _Get8HexDigits
00001D06  584F      2980          addq.w    #4,A7
00001D08  2600      2981          move.l    D0,D3
                    2982   ; ProgramBreakPointAddress = (volatile unsigned short int *)(BPAddress) ;     // point to the instruction in the user program we are about to change
00001D0A  2803      2983          move.l    D3,D4
                    2984   ; if((BPAddress & 0x00000001) == 0x00000001)  {   // cannot set BP at an odd address
00001D0C  2003      2985          move.l    D3,D0
00001D0E  C0BC 0000 2986          and.l     #1,D0
00001D12  0001      
00001D14  0C80 0000 2987          cmp.l     #1,D0
00001D18  0001      
00001D1A  660E      2988          bne.s     SetBreakPoint_9
                    2989   ; printf("\r\nError : Break Points CANNOT be set at ODD addresses") ;
00001D1C  4879 0000 2990          pea       @m68kde~1_73.L
00001D20  4CA2      
00001D22  4E92      2991          jsr       (A2)
00001D24  584F      2992          addq.w    #4,A7
                    2993   ; return ;
00001D26  6000 00A2 2994          bra       SetBreakPoint_15
                    2995   SetBreakPoint_9:
                    2996   ; }
                    2997   ; if(BPAddress < 0x00008000)  {   // cannot set BP in ROM
00001D2A  0C83 0000 2998          cmp.l     #32768,D3
00001D2E  8000      
00001D30  640E      2999          bhs.s     SetBreakPoint_11
                    3000   ; printf("\r\nError : Break Points CANNOT be set for ROM in Range : [$0-$00007FFF]") ;
00001D32  4879 0000 3001          pea       @m68kde~1_74.L
00001D36  4CD8      
00001D38  4E92      3002          jsr       (A2)
00001D3A  584F      3003          addq.w    #4,A7
                    3004   ; return ;
00001D3C  6000 008C 3005          bra       SetBreakPoint_15
                    3006   SetBreakPoint_11:
                    3007   ; }
                    3008   ; // search for first free bp or existing same BP
                    3009   ; for(i = 0; i < 8; i++)  {
00001D40  4282      3010          clr.l     D2
                    3011   SetBreakPoint_13:
00001D42  0C82 0000 3012          cmp.l     #8,D2
00001D46  0008      
00001D48  6C00 0080 3013          bge       SetBreakPoint_15
                    3014   ; if(BreakPointAddress[i] == BPAddress)   {
00001D4C  2002      3015          move.l    D2,D0
00001D4E  E588      3016          lsl.l     #2,D0
00001D50  41F9 0803 3017          lea       _BreakPointAddress.L,A0
00001D54  012E      
00001D56  B6B0 0800 3018          cmp.l     0(A0,D0.L),D3
00001D5A  6610      3019          bne.s     SetBreakPoint_16
                    3020   ; printf("\r\nError: Break Point Already Exists at Address : %08x\r\n", BPAddress) ;
00001D5C  2F03      3021          move.l    D3,-(A7)
00001D5E  4879 0000 3022          pea       @m68kde~1_75.L
00001D62  4D20      
00001D64  4E92      3023          jsr       (A2)
00001D66  504F      3024          addq.w    #8,A7
                    3025   ; return ;
00001D68  6000 0060 3026          bra       SetBreakPoint_15
                    3027   SetBreakPoint_16:
                    3028   ; }
                    3029   ; if(BreakPointSetOrCleared[i] == 0) {
00001D6C  2002      3030          move.l    D2,D0
00001D6E  E588      3031          lsl.l     #2,D0
00001D70  2033 0800 3032          move.l    0(A3,D0.L),D0
00001D74  6600 004E 3033          bne       SetBreakPoint_18
                    3034   ; // set BP here
                    3035   ; BreakPointSetOrCleared[i] = 1 ;                                 // mark this breakpoint as set
00001D78  2002      3036          move.l    D2,D0
00001D7A  E588      3037          lsl.l     #2,D0
00001D7C  27BC 0000 3038          move.l    #1,0(A3,D0.L)
00001D80  0001 0800 
                    3039   ; BreakPointInstruction[i] = *ProgramBreakPointAddress ;          // copy the user program instruction here so we can put it back afterwards
00001D84  2044      3040          move.l    D4,A0
00001D86  2002      3041          move.l    D2,D0
00001D88  E388      3042          lsl.l     #1,D0
00001D8A  43F9 0803 3043          lea       _BreakPointInstruction.L,A1
00001D8E  014E      
00001D90  3390 0800 3044          move.w    (A0),0(A1,D0.L)
                    3045   ; printf("\r\nBreak Point Set at Address: [$%08x]", ProgramBreakPointAddress) ;
00001D94  2F04      3046          move.l    D4,-(A7)
00001D96  4879 0000 3047          pea       @m68kde~1_76.L
00001D9A  4D58      
00001D9C  4E92      3048          jsr       (A2)
00001D9E  504F      3049          addq.w    #8,A7
                    3050   ; *ProgramBreakPointAddress = (unsigned short int)(0x4e4e)    ;   // put a Trap14 instruction at the user specified address
00001DA0  2044      3051          move.l    D4,A0
00001DA2  30BC 4E4E 3052          move.w    #20046,(A0)
                    3053   ; BreakPointAddress[i] = BPAddress ;                              // record the address of this break point in the debugger
00001DA6  2002      3054          move.l    D2,D0
00001DA8  E588      3055          lsl.l     #2,D0
00001DAA  41F9 0803 3056          lea       _BreakPointAddress.L,A0
00001DAE  012E      
00001DB0  2183 0800 3057          move.l    D3,0(A0,D0.L)
                    3058   ; printf("\r\n") ;
00001DB4  4879 0000 3059          pea       @m68kde~1_1.L
00001DB8  45C8      
00001DBA  4E92      3060          jsr       (A2)
00001DBC  584F      3061          addq.w    #4,A7
                    3062   ; BreakPointDisplay() ;       // display the break points
00001DBE  4EB8 1882 3063          jsr       _BreakPointDisplay
                    3064   ; return ;
00001DC2  6006      3065          bra.s     SetBreakPoint_15
                    3066   SetBreakPoint_18:
00001DC4  5282      3067          addq.l    #1,D2
00001DC6  6000 FF7A 3068          bra       SetBreakPoint_13
                    3069   SetBreakPoint_15:
00001DCA  4CDF 0C1C 3070          movem.l   (A7)+,D2/D3/D4/A2/A3
00001DCE  4E5E      3071          unlk      A6
00001DD0  4E75      3072          rts
                    3073   ; }
                    3074   ; }
                    3075   ; }
                    3076   ; void SetWatchPoint(void)
                    3077   ; {
                    3078   _SetWatchPoint:
00001DD2  4E56 FFF8 3079          link      A6,#-8
00001DD6  48E7 3030 3080          movem.l   D2/D3/A2/A3,-(A7)
00001DDA  45F9 0000 3081          lea       _printf.L,A2
00001DDE  3C04      
00001DE0  47F9 0803 3082          lea       _WatchPointSetOrCleared.L,A3
00001DE4  01A2      
                    3083   ; int i ;
                    3084   ; int WPNumber;
                    3085   ; int WPAddress;
                    3086   ; volatile unsigned short int *ProgramWatchPointAddress ;
                    3087   ; // see if any free break points
                    3088   ; for(i = 0; i < 8; i ++) {
00001DE6  4282      3089          clr.l     D2
                    3090   SetWatchPoint_1:
00001DE8  0C82 0000 3091          cmp.l     #8,D2
00001DEC  0008      
00001DEE  6C10      3092          bge.s     SetWatchPoint_3
                    3093   ; if( WatchPointSetOrCleared[i] == 0)
00001DF0  2002      3094          move.l    D2,D0
00001DF2  E588      3095          lsl.l     #2,D0
00001DF4  2033 0800 3096          move.l    0(A3,D0.L),D0
00001DF8  6602      3097          bne.s     SetWatchPoint_4
                    3098   ; break ;         // if spare WP found allow user to set it
00001DFA  6004      3099          bra.s     SetWatchPoint_3
                    3100   SetWatchPoint_4:
00001DFC  5282      3101          addq.l    #1,D2
00001DFE  60E8      3102          bra       SetWatchPoint_1
                    3103   SetWatchPoint_3:
                    3104   ; }
                    3105   ; if(i == 8) {
00001E00  0C82 0000 3106          cmp.l     #8,D2
00001E04  0008      
00001E06  660E      3107          bne.s     SetWatchPoint_6
                    3108   ; printf("\r\nNo FREE Watch Points.....") ;
00001E08  4879 0000 3109          pea       @m68kde~1_77.L
00001E0C  4D7E      
00001E0E  4E92      3110          jsr       (A2)
00001E10  584F      3111          addq.w    #4,A7
                    3112   ; return ;
00001E12  6000 008C 3113          bra       SetWatchPoint_11
                    3114   SetWatchPoint_6:
                    3115   ; }
                    3116   ; printf("\r\nWatch Point Address: ") ;
00001E16  4879 0000 3117          pea       @m68kde~1_78.L
00001E1A  4D9A      
00001E1C  4E92      3118          jsr       (A2)
00001E1E  584F      3119          addq.w    #4,A7
                    3120   ; WPAddress = Get8HexDigits(0) ;
00001E20  42A7      3121          clr.l     -(A7)
00001E22  4EB8 0CA4 3122          jsr       _Get8HexDigits
00001E26  584F      3123          addq.w    #4,A7
00001E28  2600      3124          move.l    D0,D3
                    3125   ; // search for first free wp or existing same wp
                    3126   ; for(i = 0; i < 8; i++)  {
00001E2A  4282      3127          clr.l     D2
                    3128   SetWatchPoint_9:
00001E2C  0C82 0000 3129          cmp.l     #8,D2
00001E30  0008      
00001E32  6C00 006C 3130          bge       SetWatchPoint_11
                    3131   ; if(WatchPointAddress[i] == WPAddress && WPAddress != 0)   {     //so we can set a wp at 0
00001E36  2002      3132          move.l    D2,D0
00001E38  E588      3133          lsl.l     #2,D0
00001E3A  41F9 0803 3134          lea       _WatchPointAddress.L,A0
00001E3E  0182      
00001E40  B6B0 0800 3135          cmp.l     0(A0,D0.L),D3
00001E44  6614      3136          bne.s     SetWatchPoint_12
00001E46  4A83      3137          tst.l     D3
00001E48  6710      3138          beq.s     SetWatchPoint_12
                    3139   ; printf("\r\nError: Watch Point Already Set at Address : %08x\r\n", WPAddress) ;
00001E4A  2F03      3140          move.l    D3,-(A7)
00001E4C  4879 0000 3141          pea       @m68kde~1_79.L
00001E50  4DB2      
00001E52  4E92      3142          jsr       (A2)
00001E54  504F      3143          addq.w    #8,A7
                    3144   ; return ;
00001E56  6000 0048 3145          bra       SetWatchPoint_11
                    3146   SetWatchPoint_12:
                    3147   ; }
                    3148   ; if(WatchPointSetOrCleared[i] == 0) {
00001E5A  2002      3149          move.l    D2,D0
00001E5C  E588      3150          lsl.l     #2,D0
00001E5E  2033 0800 3151          move.l    0(A3,D0.L),D0
00001E62  6600 0038 3152          bne       SetWatchPoint_14
                    3153   ; WatchPointSetOrCleared[i] = 1 ;                                 // mark this watchpoint as set
00001E66  2002      3154          move.l    D2,D0
00001E68  E588      3155          lsl.l     #2,D0
00001E6A  27BC 0000 3156          move.l    #1,0(A3,D0.L)
00001E6E  0001 0800 
                    3157   ; printf("\r\nWatch Point Set at Address: [$%08x]", WPAddress) ;
00001E72  2F03      3158          move.l    D3,-(A7)
00001E74  4879 0000 3159          pea       @m68kde~1_80.L
00001E78  4DE8      
00001E7A  4E92      3160          jsr       (A2)
00001E7C  504F      3161          addq.w    #8,A7
                    3162   ; WatchPointAddress[i] = WPAddress ;                              // record the address of this watch point in the debugger
00001E7E  2002      3163          move.l    D2,D0
00001E80  E588      3164          lsl.l     #2,D0
00001E82  41F9 0803 3165          lea       _WatchPointAddress.L,A0
00001E86  0182      
00001E88  2183 0800 3166          move.l    D3,0(A0,D0.L)
                    3167   ; printf("\r\n") ;
00001E8C  4879 0000 3168          pea       @m68kde~1_1.L
00001E90  45C8      
00001E92  4E92      3169          jsr       (A2)
00001E94  584F      3170          addq.w    #4,A7
                    3171   ; WatchPointDisplay() ;       // display the break points
00001E96  4EB8 1956 3172          jsr       _WatchPointDisplay
                    3173   ; return ;
00001E9A  6004      3174          bra.s     SetWatchPoint_11
                    3175   SetWatchPoint_14:
00001E9C  5282      3176          addq.l    #1,D2
00001E9E  608C      3177          bra       SetWatchPoint_9
                    3178   SetWatchPoint_11:
00001EA0  4CDF 0C0C 3179          movem.l   (A7)+,D2/D3/A2/A3
00001EA4  4E5E      3180          unlk      A6
00001EA6  4E75      3181          rts
                    3182   ; }
                    3183   ; }
                    3184   ; }
                    3185   ; void HandleBreakPoint(void)
                    3186   ; {
                    3187   _HandleBreakPoint:
00001EA8  4E56 FFFC 3188          link      A6,#-4
00001EAC  48E7 0038 3189          movem.l   A2/A3/A4,-(A7)
00001EB0  45F9 0803 3190          lea       _i.L,A2
00001EB4  00C4      
00001EB6  47F9 0000 3191          lea       _printf.L,A3
00001EBA  3C04      
00001EBC  49F9 0803 3192          lea       _PC.L,A4
00001EC0  0120      
                    3193   ; volatile unsigned short int *ProgramBreakPointAddress ;
                    3194   ; // now we have to put the break point back to run the instruction
                    3195   ; // PC will contain the address of the TRAP instruction but advanced by two bytes so lets play with that
                    3196   ; PC = PC - 2 ;  // ready for user to resume after reaching breakpoint
00001EC2  5594      3197          subq.l    #2,(A4)
                    3198   ; printf("\r\n\r\n\r\n\r\n@BREAKPOINT") ;
00001EC4  4879 0000 3199          pea       @m68kde~1_81.L
00001EC8  4E0E      
00001ECA  4E93      3200          jsr       (A3)
00001ECC  584F      3201          addq.w    #4,A7
                    3202   ; printf("\r\nSingle Step : [ON]") ;
00001ECE  4879 0000 3203          pea       @m68kde~1_82.L
00001ED2  4E22      
00001ED4  4E93      3204          jsr       (A3)
00001ED6  584F      3205          addq.w    #4,A7
                    3206   ; printf("\r\nBreakPoints : [Enabled]") ;
00001ED8  4879 0000 3207          pea       @m68kde~1_83.L
00001EDC  4E38      
00001EDE  4E93      3208          jsr       (A3)
00001EE0  584F      3209          addq.w    #4,A7
                    3210   ; // now clear the break point (put original instruction back)
                    3211   ; ProgramBreakPointAddress = PC ;
00001EE2  2D54 FFFC 3212          move.l    (A4),-4(A6)
                    3213   ; for(i = 0; i < 8; i ++) {
00001EE6  4292      3214          clr.l     (A2)
                    3215   HandleBreakPoint_1:
00001EE8  2012      3216          move.l    (A2),D0
00001EEA  0C80 0000 3217          cmp.l     #8,D0
00001EEE  0008      
00001EF0  6400 0056 3218          bhs       HandleBreakPoint_3
                    3219   ; if(BreakPointAddress[i] == PC) {        // if we have found the breakpoint
00001EF4  2012      3220          move.l    (A2),D0
00001EF6  E588      3221          lsl.l     #2,D0
00001EF8  41F9 0803 3222          lea       _BreakPointAddress.L,A0
00001EFC  012E      
00001EFE  2230 0800 3223          move.l    0(A0,D0.L),D1
00001F02  B294      3224          cmp.l     (A4),D1
00001F04  6600 003E 3225          bne       HandleBreakPoint_4
                    3226   ; BreakPointAddress[i] = 0 ;
00001F08  2012      3227          move.l    (A2),D0
00001F0A  E588      3228          lsl.l     #2,D0
00001F0C  41F9 0803 3229          lea       _BreakPointAddress.L,A0
00001F10  012E      
00001F12  42B0 0800 3230          clr.l     0(A0,D0.L)
                    3231   ; BreakPointSetOrCleared[i] = 0 ;
00001F16  2012      3232          move.l    (A2),D0
00001F18  E588      3233          lsl.l     #2,D0
00001F1A  41F9 0803 3234          lea       _BreakPointSetOrCleared.L,A0
00001F1E  015E      
00001F20  42B0 0800 3235          clr.l     0(A0,D0.L)
                    3236   ; *ProgramBreakPointAddress = BreakPointInstruction[i] ;  // put original instruction back
00001F24  2012      3237          move.l    (A2),D0
00001F26  E388      3238          lsl.l     #1,D0
00001F28  41F9 0803 3239          lea       _BreakPointInstruction.L,A0
00001F2C  014E      
00001F2E  226E FFFC 3240          move.l    -4(A6),A1
00001F32  32B0 0800 3241          move.w    0(A0,D0.L),(A1)
                    3242   ; BreakPointInstruction[i] = 0 ;
00001F36  2012      3243          move.l    (A2),D0
00001F38  E388      3244          lsl.l     #1,D0
00001F3A  41F9 0803 3245          lea       _BreakPointInstruction.L,A0
00001F3E  014E      
00001F40  4270 0800 3246          clr.w     0(A0,D0.L)
                    3247   HandleBreakPoint_4:
00001F44  5292      3248          addq.l    #1,(A2)
00001F46  60A0      3249          bra       HandleBreakPoint_1
                    3250   HandleBreakPoint_3:
                    3251   ; }
                    3252   ; }
                    3253   ; DumpRegisters() ;
00001F48  4EB8 10D4 3254          jsr       _DumpRegisters
                    3255   ; printf("\r\nPress <SPACE> to Execute Next Instruction");
00001F4C  4879 0000 3256          pea       @m68kde~1_45.L
00001F50  49B4      
00001F52  4E93      3257          jsr       (A3)
00001F54  584F      3258          addq.w    #4,A7
                    3259   ; printf("\r\nPress <ESC> to Resume User Program\r\n") ;
00001F56  4879 0000 3260          pea       @m68kde~1_84.L
00001F5A  4E52      
00001F5C  4E93      3261          jsr       (A3)
00001F5E  584F      3262          addq.w    #4,A7
                    3263   ; menu() ;
00001F60  4EB9 0000 3264          jsr       _menu
00001F64  216C      
00001F66  4CDF 1C00 3265          movem.l   (A7)+,A2/A3/A4
00001F6A  4E5E      3266          unlk      A6
00001F6C  4E75      3267          rts
                    3268   ; }
                    3269   ; void UnknownCommand()
                    3270   ; {
                    3271   _UnknownCommand:
                    3272   ; printf("\r\nUnknown Command.....\r\n") ;
00001F6E  4879 0000 3273          pea       @m68kde~1_85.L
00001F72  4E7A      
00001F74  4EB9 0000 3274          jsr       _printf
00001F78  3C04      
00001F7A  584F      3275          addq.w    #4,A7
                    3276   ; Help() ;
00001F7C  4EB9 0000 3277          jsr       _Help
00001F80  2092      
00001F82  4E75      3278          rts
                    3279   ; }
                    3280   ; // system when the users program executes a TRAP #15 instruction to halt program and return to debug monitor
                    3281   ; void CallDebugMonitor(void)
                    3282   ; {
                    3283   _CallDebugMonitor:
                    3284   ; printf("\r\nProgram Ended (TRAP #15)....") ;
00001F84  4879 0000 3285          pea       @m68kde~1_86.L
00001F88  4E94      
00001F8A  4EB9 0000 3286          jsr       _printf
00001F8E  3C04      
00001F90  584F      3287          addq.w    #4,A7
                    3288   ; menu();
00001F92  4EB9 0000 3289          jsr       _menu
00001F96  216C      
00001F98  4E75      3290          rts
                    3291   ; }
                    3292   ; void Breakpoint(void)
                    3293   ; {
                    3294   _Breakpoint:
00001F9A  2F02      3295          move.l    D2,-(A7)
                    3296   ; char c;
                    3297   ; c = toupper(_getch());
00001F9C  2F00      3298          move.l    D0,-(A7)
00001F9E  4EB8 0B68 3299          jsr       __getch
00001FA2  2200      3300          move.l    D0,D1
00001FA4  201F      3301          move.l    (A7)+,D0
00001FA6  2F01      3302          move.l    D1,-(A7)
00001FA8  4EB9 0000 3303          jsr       _toupper
00001FAC  3342      
00001FAE  584F      3304          addq.w    #4,A7
00001FB0  1400      3305          move.b    D0,D2
                    3306   ; if( c == (char)('D'))                                      // BreakPoint Display
00001FB2  0C02 0044 3307          cmp.b     #68,D2
00001FB6  6608      3308          bne.s     Breakpoint_1
                    3309   ; BreakPointDisplay() ;
00001FB8  4EB8 1882 3310          jsr       _BreakPointDisplay
00001FBC  6000 0054 3311          bra       Breakpoint_10
                    3312   Breakpoint_1:
                    3313   ; else if(c == (char)('K')) {                                 // breakpoint Kill
00001FC0  0C02 004B 3314          cmp.b     #75,D2
00001FC4  6630      3315          bne.s     Breakpoint_3
                    3316   ; printf("\r\nKill All Break Points...(y/n)?") ;
00001FC6  4879 0000 3317          pea       @m68kde~1_87.L
00001FCA  4EB4      
00001FCC  4EB9 0000 3318          jsr       _printf
00001FD0  3C04      
00001FD2  584F      3319          addq.w    #4,A7
                    3320   ; c = toupper(_getch());
00001FD4  2F00      3321          move.l    D0,-(A7)
00001FD6  4EB8 0B68 3322          jsr       __getch
00001FDA  2200      3323          move.l    D0,D1
00001FDC  201F      3324          move.l    (A7)+,D0
00001FDE  2F01      3325          move.l    D1,-(A7)
00001FE0  4EB9 0000 3326          jsr       _toupper
00001FE4  3342      
00001FE6  584F      3327          addq.w    #4,A7
00001FE8  1400      3328          move.b    D0,D2
                    3329   ; if(c == (char)('Y'))
00001FEA  0C02 0059 3330          cmp.b     #89,D2
00001FEE  6604      3331          bne.s     Breakpoint_5
                    3332   ; KillAllBreakPoints() ;
00001FF0  4EB8 1C1A 3333          jsr       _KillAllBreakPoints
                    3334   Breakpoint_5:
00001FF4  601C      3335          bra.s     Breakpoint_10
                    3336   Breakpoint_3:
                    3337   ; }
                    3338   ; else if(c == (char)('S')) {
00001FF6  0C02 0053 3339          cmp.b     #83,D2
00001FFA  6606      3340          bne.s     Breakpoint_7
                    3341   ; SetBreakPoint() ;
00001FFC  4EB8 1CB2 3342          jsr       _SetBreakPoint
00002000  6010      3343          bra.s     Breakpoint_10
                    3344   Breakpoint_7:
                    3345   ; }
                    3346   ; else if(c == (char)('C')) {
00002002  0C02 0043 3347          cmp.b     #67,D2
00002006  6606      3348          bne.s     Breakpoint_9
                    3349   ; BreakPointClear() ;
00002008  4EB8 1A02 3350          jsr       _BreakPointClear
0000200C  6004      3351          bra.s     Breakpoint_10
                    3352   Breakpoint_9:
                    3353   ; }
                    3354   ; else
                    3355   ; UnknownCommand() ;
0000200E  4EB8 1F6E 3356          jsr       _UnknownCommand
                    3357   Breakpoint_10:
00002012  241F      3358          move.l    (A7)+,D2
00002014  4E75      3359          rts
                    3360   ; }
                    3361   ; void Watchpoint(void)
                    3362   ; {
                    3363   _Watchpoint:
00002016  2F02      3364          move.l    D2,-(A7)
                    3365   ; char c;
                    3366   ; c = toupper(_getch());
00002018  2F00      3367          move.l    D0,-(A7)
0000201A  4EB8 0B68 3368          jsr       __getch
0000201E  2200      3369          move.l    D0,D1
00002020  201F      3370          move.l    (A7)+,D0
00002022  2F01      3371          move.l    D1,-(A7)
00002024  4EB9 0000 3372          jsr       _toupper
00002028  3342      
0000202A  584F      3373          addq.w    #4,A7
0000202C  1400      3374          move.b    D0,D2
                    3375   ; if( c == (char)('D'))                                      // WatchPoint Display
0000202E  0C02 0044 3376          cmp.b     #68,D2
00002032  6608      3377          bne.s     Watchpoint_1
                    3378   ; WatchPointDisplay() ;
00002034  4EB8 1956 3379          jsr       _WatchPointDisplay
00002038  6000 0054 3380          bra       Watchpoint_10
                    3381   Watchpoint_1:
                    3382   ; else if(c == (char)('K')) {                                 // wtahcpoint Kill
0000203C  0C02 004B 3383          cmp.b     #75,D2
00002040  6630      3384          bne.s     Watchpoint_3
                    3385   ; printf("\r\nKill All Watch Points...(y/n)?") ;
00002042  4879 0000 3386          pea       @m68kde~1_88.L
00002046  4ED6      
00002048  4EB9 0000 3387          jsr       _printf
0000204C  3C04      
0000204E  584F      3388          addq.w    #4,A7
                    3389   ; c = toupper(_getch());
00002050  2F00      3390          move.l    D0,-(A7)
00002052  4EB8 0B68 3391          jsr       __getch
00002056  2200      3392          move.l    D0,D1
00002058  201F      3393          move.l    (A7)+,D0
0000205A  2F01      3394          move.l    D1,-(A7)
0000205C  4EB9 0000 3395          jsr       _toupper
00002060  3342      
00002062  584F      3396          addq.w    #4,A7
00002064  1400      3397          move.b    D0,D2
                    3398   ; if(c == (char)('Y'))
00002066  0C02 0059 3399          cmp.b     #89,D2
0000206A  6604      3400          bne.s     Watchpoint_5
                    3401   ; KillAllWatchPoints() ;
0000206C  4EB8 1C82 3402          jsr       _KillAllWatchPoints
                    3403   Watchpoint_5:
00002070  601C      3404          bra.s     Watchpoint_10
                    3405   Watchpoint_3:
                    3406   ; }
                    3407   ; else if(c == (char)('S')) {
00002072  0C02 0053 3408          cmp.b     #83,D2
00002076  6606      3409          bne.s     Watchpoint_7
                    3410   ; SetWatchPoint() ;
00002078  4EB8 1DD2 3411          jsr       _SetWatchPoint
0000207C  6010      3412          bra.s     Watchpoint_10
                    3413   Watchpoint_7:
                    3414   ; }
                    3415   ; else if(c == (char)('C')) {
0000207E  0C02 0043 3416          cmp.b     #67,D2
00002082  6606      3417          bne.s     Watchpoint_9
                    3418   ; WatchPointClear() ;
00002084  4EB8 1ADC 3419          jsr       _WatchPointClear
00002088  6004      3420          bra.s     Watchpoint_10
                    3421   Watchpoint_9:
                    3422   ; }
                    3423   ; else
                    3424   ; UnknownCommand() ;
0000208A  4EB8 1F6E 3425          jsr       _UnknownCommand
                    3426   Watchpoint_10:
0000208E  241F      3427          move.l    (A7)+,D2
00002090  4E75      3428          rts
                    3429   ; }
                    3430   ; void Help(void)
                    3431   ; {
                    3432   _Help:
00002092  48E7 2020 3433          movem.l   D2/A2,-(A7)
00002096  45F9 0000 3434          lea       _printf.L,A2
0000209A  3C04      
                    3435   ; char *banner = "\r\n----------------------------------------------------------------" ;
0000209C  41F9 0000 3436          lea       @m68kde~1_89.L,A0
000020A0  4EF8      
000020A2  2408      3437          move.l    A0,D2
                    3438   ; printf(banner) ;
000020A4  2F02      3439          move.l    D2,-(A7)
000020A6  4E92      3440          jsr       (A2)
000020A8  584F      3441          addq.w    #4,A7
                    3442   ; printf("\r\n  Debugger Command Summary") ;
000020AA  4879 0000 3443          pea       @m68kde~1_90.L
000020AE  4F3C      
000020B0  4E92      3444          jsr       (A2)
000020B2  584F      3445          addq.w    #4,A7
                    3446   ; printf(banner) ;
000020B4  2F02      3447          move.l    D2,-(A7)
000020B6  4E92      3448          jsr       (A2)
000020B8  584F      3449          addq.w    #4,A7
                    3450   ; printf("\r\n  .(reg)       - Change Registers: e.g A0-A7,D0-D7,PC,SSP,USP,SR");
000020BA  4879 0000 3451          pea       @m68kde~1_91.L
000020BE  4F5A      
000020C0  4E92      3452          jsr       (A2)
000020C2  584F      3453          addq.w    #4,A7
                    3454   ; printf("\r\n  BD/BS/BC/BK  - Break Point: Display/Set/Clear/Kill") ;
000020C4  4879 0000 3455          pea       @m68kde~1_92.L
000020C8  4F9E      
000020CA  4E92      3456          jsr       (A2)
000020CC  584F      3457          addq.w    #4,A7
                    3458   ; printf("\r\n  C            - Copy Program from Flash to Main Memory") ;
000020CE  4879 0000 3459          pea       @m68kde~1_93.L
000020D2  4FD6      
000020D4  4E92      3460          jsr       (A2)
000020D6  584F      3461          addq.w    #4,A7
                    3462   ; printf("\r\n  D            - Dump Memory Contents to Screen") ;
000020D8  4879 0000 3463          pea       @m68kde~1_94.L
000020DC  5010      
000020DE  4E92      3464          jsr       (A2)
000020E0  584F      3465          addq.w    #4,A7
                    3466   ; printf("\r\n  E            - Enter String into Memory") ;
000020E2  4879 0000 3467          pea       @m68kde~1_95.L
000020E6  5042      
000020E8  4E92      3468          jsr       (A2)
000020EA  584F      3469          addq.w    #4,A7
                    3470   ; printf("\r\n  F            - Fill Memory with Data") ;
000020EC  4879 0000 3471          pea       @m68kde~1_96.L
000020F0  506E      
000020F2  4E92      3472          jsr       (A2)
000020F4  584F      3473          addq.w    #4,A7
                    3474   ; printf("\r\n  G            - Go Program Starting at Address: $%08X", PC) ;
000020F6  2F39 0803 3475          move.l    _PC.L,-(A7)
000020FA  0120      
000020FC  4879 0000 3476          pea       @m68kde~1_97.L
00002100  5098      
00002102  4E92      3477          jsr       (A2)
00002104  504F      3478          addq.w    #8,A7
                    3479   ; printf("\r\n  L            - Load Program (.HEX file) from Laptop") ;
00002106  4879 0000 3480          pea       @m68kde~1_98.L
0000210A  50D2      
0000210C  4E92      3481          jsr       (A2)
0000210E  584F      3482          addq.w    #4,A7
                    3483   ; printf("\r\n  M            - Memory Examine and Change");
00002110  4879 0000 3484          pea       @m68kde~1_99.L
00002114  510A      
00002116  4E92      3485          jsr       (A2)
00002118  584F      3486          addq.w    #4,A7
                    3487   ; printf("\r\n  P            - Program Flash Memory with User Program") ;
0000211A  4879 0000 3488          pea       @m68kde~1_100.L
0000211E  5138      
00002120  4E92      3489          jsr       (A2)
00002122  584F      3490          addq.w    #4,A7
                    3491   ; printf("\r\n  R            - Display 68000 Registers") ;
00002124  4879 0000 3492          pea       @m68kde~1_101.L
00002128  5172      
0000212A  4E92      3493          jsr       (A2)
0000212C  584F      3494          addq.w    #4,A7
                    3495   ; printf("\r\n  S            - Toggle ON/OFF Single Step Mode") ;
0000212E  4879 0000 3496          pea       @m68kde~1_102.L
00002132  519E      
00002134  4E92      3497          jsr       (A2)
00002136  584F      3498          addq.w    #4,A7
                    3499   ; printf("\r\n  TM           - Test Memory") ;
00002138  4879 0000 3500          pea       @m68kde~1_103.L
0000213C  51D0      
0000213E  4E92      3501          jsr       (A2)
00002140  584F      3502          addq.w    #4,A7
                    3503   ; printf("\r\n  TS           - Test Switches: SW7-0") ;
00002142  4879 0000 3504          pea       @m68kde~1_104.L
00002146  51F0      
00002148  4E92      3505          jsr       (A2)
0000214A  584F      3506          addq.w    #4,A7
                    3507   ; printf("\r\n  TD           - Test Displays: LEDs and 7-Segment") ;
0000214C  4879 0000 3508          pea       @m68kde~1_105.L
00002150  5218      
00002152  4E92      3509          jsr       (A2)
00002154  584F      3510          addq.w    #4,A7
                    3511   ; printf("\r\n  WD/WS/WC/WK  - Watch Point: Display/Set/Clear/Kill") ;
00002156  4879 0000 3512          pea       @m68kde~1_106.L
0000215A  524E      
0000215C  4E92      3513          jsr       (A2)
0000215E  584F      3514          addq.w    #4,A7
                    3515   ; printf(banner) ;
00002160  2F02      3516          move.l    D2,-(A7)
00002162  4E92      3517          jsr       (A2)
00002164  584F      3518          addq.w    #4,A7
00002166  4CDF 0404 3519          movem.l   (A7)+,D2/A2
0000216A  4E75      3520          rts
                    3521   ; }
                    3522   ; void menu(void)
                    3523   ; {
                    3524   _menu:
0000216C  48E7 303C 3525          movem.l   D2/D3/A2/A3/A4/A5,-(A7)
00002170  45F9 0000 3526          lea       _printf.L,A2
00002174  3C04      
00002176  47F9 0803 3527          lea       _Trace.L,A3
0000217A  00D8      
0000217C  49F9 0803 3528          lea       _x.L,A4
00002180  00C8      
00002182  4BF9 0803 3529          lea       _SR.L,A5
00002186  012C      
                    3530   ; char c,c1 ;
                    3531   ; while(1)    {
                    3532   menu_1:
                    3533   ; FlushKeyboard() ;               // dump unread characters from keyboard
00002188  4EB8 0BA6 3534          jsr       _FlushKeyboard
                    3535   ; printf("\r\n#") ;
0000218C  4879 0000 3536          pea       @m68kde~1_107.L
00002190  5286      
00002192  4E92      3537          jsr       (A2)
00002194  584F      3538          addq.w    #4,A7
                    3539   ; c = toupper(_getch());
00002196  2F00      3540          move.l    D0,-(A7)
00002198  4EB8 0B68 3541          jsr       __getch
0000219C  2200      3542          move.l    D0,D1
0000219E  201F      3543          move.l    (A7)+,D0
000021A0  2F01      3544          move.l    D1,-(A7)
000021A2  4EB9 0000 3545          jsr       _toupper
000021A6  3342      
000021A8  584F      3546          addq.w    #4,A7
000021AA  1400      3547          move.b    D0,D2
                    3548   ; if( c == (char)('L'))                  // load s record file
000021AC  0C02 004C 3549          cmp.b     #76,D2
000021B0  6608      3550          bne.s     menu_4
                    3551   ; Load_SRecordFile() ;
000021B2  4EB8 0E34 3552          jsr       _Load_SRecordFile
000021B6  6000 021E 3553          bra       menu_46
                    3554   menu_4:
                    3555   ; else if( c == (char)('D'))             // dump memory
000021BA  0C02 0044 3556          cmp.b     #68,D2
000021BE  6608      3557          bne.s     menu_6
                    3558   ; DumpMemory() ;
000021C0  4EB8 0CCC 3559          jsr       _DumpMemory
000021C4  6000 0210 3560          bra       menu_46
                    3561   menu_6:
                    3562   ; else if( c == (char)('E'))             // Enter String into memory
000021C8  0C02 0045 3563          cmp.b     #69,D2
000021CC  660A      3564          bne.s     menu_8
                    3565   ; EnterString() ;
000021CE  4EB9 0000 3566          jsr       _EnterString
000021D2  251E      
000021D4  6000 0200 3567          bra       menu_46
                    3568   menu_8:
                    3569   ; else if( c == (char)('F'))             // fill memory
000021D8  0C02 0046 3570          cmp.b     #70,D2
000021DC  6608      3571          bne.s     menu_10
                    3572   ; FillMemory() ;
000021DE  4EB8 0DBA 3573          jsr       _FillMemory
000021E2  6000 01F2 3574          bra       menu_46
                    3575   menu_10:
                    3576   ; else if( c == (char)('G'))  {           // go user program
000021E6  0C02 0047 3577          cmp.b     #71,D2
000021EA  6626      3578          bne.s     menu_12
                    3579   ; printf("\r\nProgram Running.....") ;
000021EC  4879 0000 3580          pea       @m68kde~1_108.L
000021F0  528A      
000021F2  4E92      3581          jsr       (A2)
000021F4  584F      3582          addq.w    #4,A7
                    3583   ; printf("\r\nPress <RESET> button <Key0> on DE1 to stop") ;
000021F6  4879 0000 3584          pea       @m68kde~1_109.L
000021FA  52A2      
000021FC  4E92      3585          jsr       (A2)
000021FE  584F      3586          addq.w    #4,A7
                    3587   ; GoFlag = 1 ;
00002200  23FC 0000 3588          move.l    #1,_GoFlag.L
00002204  0001 0803 
00002208  00DC      
                    3589   ; go() ;
0000220A  4EB8 08B8 3590          jsr       _go
0000220E  6000 01C6 3591          bra       menu_46
                    3592   menu_12:
                    3593   ; }
                    3594   ; else if( c == (char)('M'))           // memory examine and modify
00002212  0C02 004D 3595          cmp.b     #77,D2
00002216  6608      3596          bne.s     menu_14
                    3597   ; MemoryChange() ;
00002218  4EB8 0FC2 3598          jsr       _MemoryChange
0000221C  6000 01B8 3599          bra       menu_46
                    3600   menu_14:
                    3601   ; else if( c == (char)('P'))            // Program Flash Chip
00002220  0C02 0050 3602          cmp.b     #80,D2
00002224  6608      3603          bne.s     menu_16
                    3604   ; ProgramFlashChip() ;
00002226  4EB8 10C2 3605          jsr       _ProgramFlashChip
0000222A  6000 01AA 3606          bra       menu_46
                    3607   menu_16:
                    3608   ; else if( c == (char)('C'))             // copy flash chip to ram and go
0000222E  0C02 0043 3609          cmp.b     #67,D2
00002232  6608      3610          bne.s     menu_18
                    3611   ; LoadFromFlashChip();
00002234  4EB8 10C4 3612          jsr       _LoadFromFlashChip
00002238  6000 019C 3613          bra       menu_46
                    3614   menu_18:
                    3615   ; else if( c == (char)('R'))             // dump registers
0000223C  0C02 0052 3616          cmp.b     #82,D2
00002240  6608      3617          bne.s     menu_20
                    3618   ; DumpRegisters() ;
00002242  4EB8 10D4 3619          jsr       _DumpRegisters
00002246  6000 018E 3620          bra       menu_46
                    3621   menu_20:
                    3622   ; else if( c == (char)('.'))           // change registers
0000224A  0C02 002E 3623          cmp.b     #46,D2
0000224E  6608      3624          bne.s     menu_22
                    3625   ; ChangeRegisters() ;
00002250  4EB8 15C6 3626          jsr       _ChangeRegisters
00002254  6000 0180 3627          bra       menu_46
                    3628   menu_22:
                    3629   ; else if( c == (char)('B'))              // breakpoint command
00002258  0C02 0042 3630          cmp.b     #66,D2
0000225C  6608      3631          bne.s     menu_24
                    3632   ; Breakpoint() ;
0000225E  4EB8 1F9A 3633          jsr       _Breakpoint
00002262  6000 0172 3634          bra       menu_46
                    3635   menu_24:
                    3636   ; else if( c == (char)('T'))  {          // Test command
00002266  0C02 0054 3637          cmp.b     #84,D2
0000226A  6600 0046 3638          bne       menu_26
                    3639   ; c1 = toupper(_getch()) ;
0000226E  2F00      3640          move.l    D0,-(A7)
00002270  4EB8 0B68 3641          jsr       __getch
00002274  2200      3642          move.l    D0,D1
00002276  201F      3643          move.l    (A7)+,D0
00002278  2F01      3644          move.l    D1,-(A7)
0000227A  4EB9 0000 3645          jsr       _toupper
0000227E  3342      
00002280  584F      3646          addq.w    #4,A7
00002282  1600      3647          move.b    D0,D3
                    3648   ; if(c1 == (char)('M'))                    // memory test
00002284  0C03 004D 3649          cmp.b     #77,D3
00002288  6608      3650          bne.s     menu_28
                    3651   ; MemoryTest() ;
0000228A  4EB9 0000 3652          jsr       _MemoryTest
0000228E  2A54      
00002290  601C      3653          bra.s     menu_33
                    3654   menu_28:
                    3655   ; else if( c1 == (char)('S'))              // Switch Test command
00002292  0C03 0053 3656          cmp.b     #83,D3
00002296  6606      3657          bne.s     menu_30
                    3658   ; SwitchTest() ;
00002298  4EB8 0AA4 3659          jsr       _SwitchTest
0000229C  6010      3660          bra.s     menu_33
                    3661   menu_30:
                    3662   ; else if( c1 == (char)('D'))              // display Test command
0000229E  0C03 0044 3663          cmp.b     #68,D3
000022A2  6606      3664          bne.s     menu_32
                    3665   ; TestLEDS() ;
000022A4  4EB8 0A50 3666          jsr       _TestLEDS
000022A8  6004      3667          bra.s     menu_33
                    3668   menu_32:
                    3669   ; else
                    3670   ; UnknownCommand() ;
000022AA  4EB8 1F6E 3671          jsr       _UnknownCommand
                    3672   menu_33:
000022AE  6000 0126 3673          bra       menu_46
                    3674   menu_26:
                    3675   ; }
                    3676   ; else if( c == (char)(' ')) {             // Next instruction command
000022B2  0C02 0020 3677          cmp.b     #32,D2
000022B6  6636      3678          bne.s     menu_34
                    3679   ; DisableBreakPoints() ;
000022B8  4EB8 1B7E 3680          jsr       _DisableBreakPoints
                    3681   ; if(Trace == 1 && GoFlag == 1)   {    // if the program is running and trace mode on then 'N' is valid
000022BC  2013      3682          move.l    (A3),D0
000022BE  0C80 0000 3683          cmp.l     #1,D0
000022C2  0001      
000022C4  661A      3684          bne.s     menu_36
000022C6  2039 0803 3685          move.l    _GoFlag.L,D0
000022CA  00DC      
000022CC  0C80 0000 3686          cmp.l     #1,D0
000022D0  0001      
000022D2  660C      3687          bne.s     menu_36
                    3688   ; TraceException = 1 ;             // generate a trace exception for the next instruction if user wants to single step though next instruction
000022D4  13FC 0001 3689          move.b    #1,4194314
000022D8  0040 000A 
                    3690   ; return ;
000022DC  6000 00FC 3691          bra       menu_38
                    3692   menu_36:
                    3693   ; }
                    3694   ; else
                    3695   ; printf("\r\nError: Press 'G' first to start program") ;
000022E0  4879 0000 3696          pea       @m68kde~1_110.L
000022E4  52D0      
000022E6  4E92      3697          jsr       (A2)
000022E8  584F      3698          addq.w    #4,A7
000022EA  6000 00EA 3699          bra       menu_46
                    3700   menu_34:
                    3701   ; }
                    3702   ; else if( c == (char)('S')) {             // single step
000022EE  0C02 0053 3703          cmp.b     #83,D2
000022F2  6600 008C 3704          bne       menu_39
                    3705   ; if(Trace == 0) {
000022F6  2013      3706          move.l    (A3),D0
000022F8  6600 0050 3707          bne       menu_41
                    3708   ; DisableBreakPoints() ;
000022FC  4EB8 1B7E 3709          jsr       _DisableBreakPoints
                    3710   ; printf("\r\nSingle Step  :[ON]") ;
00002300  4879 0000 3711          pea       @m68kde~1_111.L
00002304  52FA      
00002306  4E92      3712          jsr       (A2)
00002308  584F      3713          addq.w    #4,A7
                    3714   ; printf("\r\nBreak Points :[Disabled]") ;
0000230A  4879 0000 3715          pea       @m68kde~1_44.L
0000230E  4998      
00002310  4E92      3716          jsr       (A2)
00002312  584F      3717          addq.w    #4,A7
                    3718   ; SR = SR | (unsigned short int)(0x8000) ;    // set T bit in status register
00002314  0055 8000 3719          or.w      #32768,(A5)
                    3720   ; printf("\r\nPress 'G' to Trace Program from address $%X.....",PC) ;
00002318  2F39 0803 3721          move.l    _PC.L,-(A7)
0000231C  0120      
0000231E  4879 0000 3722          pea       @m68kde~1_112.L
00002322  5310      
00002324  4E92      3723          jsr       (A2)
00002326  504F      3724          addq.w    #8,A7
                    3725   ; printf("\r\nPush <RESET Button> to Stop.....") ;
00002328  4879 0000 3726          pea       @m68kde~1_113.L
0000232C  5344      
0000232E  4E92      3727          jsr       (A2)
00002330  584F      3728          addq.w    #4,A7
                    3729   ; DumpRegisters() ;
00002332  4EB8 10D4 3730          jsr       _DumpRegisters
                    3731   ; Trace = 1;
00002336  26BC 0000 3732          move.l    #1,(A3)
0000233A  0001      
                    3733   ; TraceException = 1;
0000233C  13FC 0001 3734          move.b    #1,4194314
00002340  0040 000A 
                    3735   ; x = *(unsigned int *)(0x00000074) ;       // simulate responding to a Level 5 IRQ by reading vector to reset Trace exception generator
00002344  28B8 0074 3736          move.l    116,(A4)
00002348  6032      3737          bra.s     menu_42
                    3738   menu_41:
                    3739   ; }
                    3740   ; else {
                    3741   ; Trace = 0 ;
0000234A  4293      3742          clr.l     (A3)
                    3743   ; TraceException = 0 ;
0000234C  4239 0040 3744          clr.b     4194314
00002350  000A      
                    3745   ; x = *(unsigned int *)(0x00000074) ;       // simulate responding to a Level 5 IRQ by reading vector to reset Trace exception generator
00002352  28B8 0074 3746          move.l    116,(A4)
                    3747   ; EnableBreakPoints() ;
00002356  4EB8 1BD2 3748          jsr       _EnableBreakPoints
                    3749   ; SR = SR & (unsigned short int)(0x7FFF) ;    // clear T bit in status register
0000235A  0255 7FFF 3750          and.w     #32767,(A5)
                    3751   ; printf("\r\nSingle Step : [OFF]") ;
0000235E  4879 0000 3752          pea       @m68kde~1_114.L
00002362  5368      
00002364  4E92      3753          jsr       (A2)
00002366  584F      3754          addq.w    #4,A7
                    3755   ; printf("\r\nBreak Points :[Enabled]") ;
00002368  4879 0000 3756          pea       @m68kde~1_115.L
0000236C  537E      
0000236E  4E92      3757          jsr       (A2)
00002370  584F      3758          addq.w    #4,A7
                    3759   ; printf("\r\nPress <ESC> to Resume User Program.....") ;
00002372  4879 0000 3760          pea       @m68kde~1_116.L
00002376  5398      
00002378  4E92      3761          jsr       (A2)
0000237A  584F      3762          addq.w    #4,A7
                    3763   menu_42:
0000237C  6000 0058 3764          bra       menu_46
                    3765   menu_39:
                    3766   ; }
                    3767   ; }
                    3768   ; else if(c == (char)(0x1b))  {   // if user choses to end trace and run program
00002380  0C02 001B 3769          cmp.b     #27,D2
00002384  6600 0040 3770          bne       menu_43
                    3771   ; Trace = 0;
00002388  4293      3772          clr.l     (A3)
                    3773   ; TraceException = 0;
0000238A  4239 0040 3774          clr.b     4194314
0000238E  000A      
                    3775   ; x = *(unsigned int *)(0x00000074) ;   // read IRQ 5 vector to reset trace vector generator
00002390  28B8 0074 3776          move.l    116,(A4)
                    3777   ; EnableBreakPoints() ;
00002394  4EB8 1BD2 3778          jsr       _EnableBreakPoints
                    3779   ; SR = SR & (unsigned short int)(0x7FFF) ;    // clear T bit in status register
00002398  0255 7FFF 3780          and.w     #32767,(A5)
                    3781   ; printf("\r\nSingle Step  :[OFF]") ;
0000239C  4879 0000 3782          pea       @m68kde~1_117.L
000023A0  53C2      
000023A2  4E92      3783          jsr       (A2)
000023A4  584F      3784          addq.w    #4,A7
                    3785   ; printf("\r\nBreak Points :[Enabled]");
000023A6  4879 0000 3786          pea       @m68kde~1_115.L
000023AA  537E      
000023AC  4E92      3787          jsr       (A2)
000023AE  584F      3788          addq.w    #4,A7
                    3789   ; printf("\r\nProgram Running.....") ;
000023B0  4879 0000 3790          pea       @m68kde~1_108.L
000023B4  528A      
000023B6  4E92      3791          jsr       (A2)
000023B8  584F      3792          addq.w    #4,A7
                    3793   ; printf("\r\nPress <RESET> button <Key0> on DE1 to stop") ;
000023BA  4879 0000 3794          pea       @m68kde~1_109.L
000023BE  52A2      
000023C0  4E92      3795          jsr       (A2)
000023C2  584F      3796          addq.w    #4,A7
                    3797   ; return ;
000023C4  6014      3798          bra.s     menu_38
                    3799   menu_43:
                    3800   ; }
                    3801   ; else if( c == (char)('W'))              // Watchpoint command
000023C6  0C02 0057 3802          cmp.b     #87,D2
000023CA  6606      3803          bne.s     menu_45
                    3804   ; Watchpoint() ;
000023CC  4EB8 2016 3805          jsr       _Watchpoint
000023D0  6004      3806          bra.s     menu_46
                    3807   menu_45:
                    3808   ; else
                    3809   ; UnknownCommand() ;
000023D2  4EB8 1F6E 3810          jsr       _UnknownCommand
                    3811   menu_46:
000023D6  6000 FDB0 3812          bra       menu_1
                    3813   menu_38:
000023DA  4CDF 3C0C 3814          movem.l   (A7)+,D2/D3/A2/A3/A4/A5
000023DE  4E75      3815          rts
                    3816   ; }
                    3817   ; }
                    3818   ; void PrintErrorMessageandAbort(char *string) {
                    3819   _PrintErrorMessageandAbort:
000023E0  4E56 0000 3820          link      A6,#0
                    3821   ; printf("\r\n\r\nProgram ABORT !!!!!!\r\n") ;
000023E4  4879 0000 3822          pea       @m68kde~1_118.L
000023E8  53D8      
000023EA  4EB9 0000 3823          jsr       _printf
000023EE  3C04      
000023F0  584F      3824          addq.w    #4,A7
                    3825   ; printf("%s\r\n", string) ;
000023F2  2F2E 0008 3826          move.l    8(A6),-(A7)
000023F6  4879 0000 3827          pea       @m68kde~1_119.L
000023FA  53F4      
000023FC  4EB9 0000 3828          jsr       _printf
00002400  3C04      
00002402  504F      3829          addq.w    #8,A7
                    3830   ; menu() ;
00002404  4EB8 216C 3831          jsr       _menu
00002408  4E5E      3832          unlk      A6
0000240A  4E75      3833          rts
                    3834   ; }
                    3835   ; void IRQMessage(int level) {
                    3836   _IRQMessage:
0000240C  4E56 0000 3837          link      A6,#0
                    3838   ; printf("\r\n\r\nProgram ABORT !!!!!");
00002410  4879 0000 3839          pea       @m68kde~1_120.L
00002414  53FA      
00002416  4EB9 0000 3840          jsr       _printf
0000241A  3C04      
0000241C  584F      3841          addq.w    #4,A7
                    3842   ; printf("\r\nUnhandled Interrupt: IRQ%d !!!!!", level) ;
0000241E  2F2E 0008 3843          move.l    8(A6),-(A7)
00002422  4879 0000 3844          pea       @m68kde~1_121.L
00002426  5412      
00002428  4EB9 0000 3845          jsr       _printf
0000242C  3C04      
0000242E  504F      3846          addq.w    #8,A7
                    3847   ; menu() ;
00002430  4EB8 216C 3848          jsr       _menu
00002434  4E5E      3849          unlk      A6
00002436  4E75      3850          rts
                    3851   ; }
                    3852   ; void UnhandledIRQ1(void) {
                    3853   _UnhandledIRQ1:
                    3854   ; IRQMessage(1);
00002438  4878 0001 3855          pea       1
0000243C  4EB8 240C 3856          jsr       _IRQMessage
00002440  584F      3857          addq.w    #4,A7
00002442  4E75      3858          rts
                    3859   ; }
                    3860   ; void UnhandledIRQ2(void) {
                    3861   _UnhandledIRQ2:
                    3862   ; IRQMessage(2);
00002444  4878 0002 3863          pea       2
00002448  4EB8 240C 3864          jsr       _IRQMessage
0000244C  584F      3865          addq.w    #4,A7
0000244E  4E75      3866          rts
                    3867   ; }
                    3868   ; void UnhandledIRQ3(void){
                    3869   _UnhandledIRQ3:
                    3870   ; IRQMessage(3);
00002450  4878 0003 3871          pea       3
00002454  4EB8 240C 3872          jsr       _IRQMessage
00002458  584F      3873          addq.w    #4,A7
0000245A  4E75      3874          rts
                    3875   ; }
                    3876   ; void UnhandledIRQ4(void) {
                    3877   _UnhandledIRQ4:
                    3878   ; IRQMessage(4);
0000245C  4878 0004 3879          pea       4
00002460  4EB8 240C 3880          jsr       _IRQMessage
00002464  584F      3881          addq.w    #4,A7
00002466  4E75      3882          rts
                    3883   ; }
                    3884   ; void UnhandledIRQ5(void) {
                    3885   _UnhandledIRQ5:
                    3886   ; IRQMessage(5);
00002468  4878 0005 3887          pea       5
0000246C  4EB8 240C 3888          jsr       _IRQMessage
00002470  584F      3889          addq.w    #4,A7
00002472  4E75      3890          rts
                    3891   ; }
                    3892   ; void UnhandledIRQ6(void) {
                    3893   _UnhandledIRQ6:
                    3894   ; PrintErrorMessageandAbort("ADDRESS ERROR: 16 or 32 Bit Transfer to/from an ODD Address....") ;
00002474  4879 0000 3895          pea       @m68kde~1_122.L
00002478  5436      
0000247A  4EB8 23E0 3896          jsr       _PrintErrorMessageandAbort
0000247E  584F      3897          addq.w    #4,A7
                    3898   ; menu() ;
00002480  4EB8 216C 3899          jsr       _menu
00002484  4E75      3900          rts
                    3901   ; }
                    3902   ; void UnhandledIRQ7(void) {
                    3903   _UnhandledIRQ7:
                    3904   ; IRQMessage(7);
00002486  4878 0007 3905          pea       7
0000248A  4EB8 240C 3906          jsr       _IRQMessage
0000248E  584F      3907          addq.w    #4,A7
00002490  4E75      3908          rts
                    3909   ; }
                    3910   ; void UnhandledTrap(void) {
                    3911   _UnhandledTrap:
                    3912   ; PrintErrorMessageandAbort("Unhandled Trap !!!!!") ;
00002492  4879 0000 3913          pea       @m68kde~1_123.L
00002496  5476      
00002498  4EB8 23E0 3914          jsr       _PrintErrorMessageandAbort
0000249C  584F      3915          addq.w    #4,A7
0000249E  4E75      3916          rts
                    3917   ; }
                    3918   ; void BusError() {
                    3919   _BusError:
                    3920   ; PrintErrorMessageandAbort("BUS Error!") ;
000024A0  4879 0000 3921          pea       @m68kde~1_124.L
000024A4  548C      
000024A6  4EB8 23E0 3922          jsr       _PrintErrorMessageandAbort
000024AA  584F      3923          addq.w    #4,A7
000024AC  4E75      3924          rts
                    3925   ; }
                    3926   ; void AddressError() {
                    3927   _AddressError:
                    3928   ; PrintErrorMessageandAbort("ADDRESS Error!") ;
000024AE  4879 0000 3929          pea       @m68kde~1_125.L
000024B2  5498      
000024B4  4EB8 23E0 3930          jsr       _PrintErrorMessageandAbort
000024B8  584F      3931          addq.w    #4,A7
000024BA  4E75      3932          rts
                    3933   ; }
                    3934   ; void IllegalInstruction() {
                    3935   _IllegalInstruction:
                    3936   ; PrintErrorMessageandAbort("ILLEGAL INSTRUCTION") ;
000024BC  4879 0000 3937          pea       @m68kde~1_126.L
000024C0  54A8      
000024C2  4EB8 23E0 3938          jsr       _PrintErrorMessageandAbort
000024C6  584F      3939          addq.w    #4,A7
000024C8  4E75      3940          rts
                    3941   ; }
                    3942   ; void Dividebyzero() {
                    3943   _Dividebyzero:
                    3944   ; PrintErrorMessageandAbort("DIVIDE BY ZERO") ;
000024CA  4879 0000 3945          pea       @m68kde~1_127.L
000024CE  54BC      
000024D0  4EB8 23E0 3946          jsr       _PrintErrorMessageandAbort
000024D4  584F      3947          addq.w    #4,A7
000024D6  4E75      3948          rts
                    3949   ; }
                    3950   ; void Check() {
                    3951   _Check:
                    3952   ; PrintErrorMessageandAbort("'CHK' INSTRUCTION") ;
000024D8  4879 0000 3953          pea       @m68kde~1_128.L
000024DC  54CC      
000024DE  4EB8 23E0 3954          jsr       _PrintErrorMessageandAbort
000024E2  584F      3955          addq.w    #4,A7
000024E4  4E75      3956          rts
                    3957   ; }
                    3958   ; void Trapv() {
                    3959   _Trapv:
                    3960   ; PrintErrorMessageandAbort("TRAPV INSTRUCTION") ;
000024E6  4879 0000 3961          pea       @m68kde~1_129.L
000024EA  54DE      
000024EC  4EB8 23E0 3962          jsr       _PrintErrorMessageandAbort
000024F0  584F      3963          addq.w    #4,A7
000024F2  4E75      3964          rts
                    3965   ; }
                    3966   ; void PrivError() {
                    3967   _PrivError:
                    3968   ; PrintErrorMessageandAbort("PRIVILEGE VIOLATION") ;
000024F4  4879 0000 3969          pea       @m68kde~1_130.L
000024F8  54F0      
000024FA  4EB8 23E0 3970          jsr       _PrintErrorMessageandAbort
000024FE  584F      3971          addq.w    #4,A7
00002500  4E75      3972          rts
                    3973   ; }
                    3974   ; void UnitIRQ() {
                    3975   _UnitIRQ:
                    3976   ; PrintErrorMessageandAbort("UNINITIALISED IRQ") ;
00002502  4879 0000 3977          pea       @m68kde~1_131.L
00002506  5504      
00002508  4EB8 23E0 3978          jsr       _PrintErrorMessageandAbort
0000250C  584F      3979          addq.w    #4,A7
0000250E  4E75      3980          rts
                    3981   ; }
                    3982   ; void Spurious() {
                    3983   _Spurious:
                    3984   ; PrintErrorMessageandAbort("SPURIOUS IRQ") ;
00002510  4879 0000 3985          pea       @m68kde~1_132.L
00002514  5516      
00002516  4EB8 23E0 3986          jsr       _PrintErrorMessageandAbort
0000251A  584F      3987          addq.w    #4,A7
0000251C  4E75      3988          rts
                    3989   ; }
                    3990   ; void EnterString(void)
                    3991   ; {
                    3992   _EnterString:
0000251E  4E56 FFFC 3993          link      A6,#-4
00002522  2F02      3994          move.l    D2,-(A7)
                    3995   ; unsigned char *Start;
                    3996   ; unsigned char c;
                    3997   ; printf("\r\nStart Address in Memory: ") ;
00002524  4879 0000 3998          pea       @m68kde~1_133.L
00002528  5524      
0000252A  4EB9 0000 3999          jsr       _printf
0000252E  3C04      
00002530  584F      4000          addq.w    #4,A7
                    4001   ; Start = Get8HexDigits(0) ;
00002532  42A7      4002          clr.l     -(A7)
00002534  4EB8 0CA4 4003          jsr       _Get8HexDigits
00002538  584F      4004          addq.w    #4,A7
0000253A  2400      4005          move.l    D0,D2
                    4006   ; printf("\r\nEnter String (ESC to end) :") ;
0000253C  4879 0000 4007          pea       @m68kde~1_134.L
00002540  5540      
00002542  4EB9 0000 4008          jsr       _printf
00002546  3C04      
00002548  584F      4009          addq.w    #4,A7
                    4010   ; while((c = getchar()) != 0x1b)
                    4011   EnterString_1:
0000254A  4EB9 0000 4012          jsr       _getch
0000254E  3290      
00002550  1D40 FFFF 4013          move.b    D0,-1(A6)
00002554  0C00 001B 4014          cmp.b     #27,D0
00002558  670A      4015          beq.s     EnterString_3
                    4016   ; *Start++ = c ;
0000255A  2042      4017          move.l    D2,A0
0000255C  5282      4018          addq.l    #1,D2
0000255E  10AE FFFF 4019          move.b    -1(A6),(A0)
00002562  60E6      4020          bra       EnterString_1
                    4021   EnterString_3:
                    4022   ; *Start = 0x00;  // terminate with a null
00002564  2042      4023          move.l    D2,A0
00002566  4210      4024          clr.b     (A0)
00002568  241F      4025          move.l    (A7)+,D2
0000256A  4E5E      4026          unlk      A6
0000256C  4E75      4027          rts
                    4028   ; }
                    4029   ; // Memory test helper functions
                    4030   ; int Get2HexDigitsForMemTest(char pat)
                    4031   ; {
                    4032   _Get2HexDigitsForMemTest:
0000256E  4E56 0000 4033          link      A6,#0
                    4034   ; return (xtod(pat) << 4) | (xtod(pat));
00002572  122E 000B 4035          move.b    11(A6),D1
00002576  4881      4036          ext.w     D1
00002578  48C1      4037          ext.l     D1
0000257A  2F01      4038          move.l    D1,-(A7)
0000257C  4EB8 0BD2 4039          jsr       _xtod
00002580  584F      4040          addq.w    #4,A7
00002582  C0BC 0000 4041          and.l     #255,D0
00002586  00FF      
00002588  E980      4042          asl.l     #4,D0
0000258A  2F00      4043          move.l    D0,-(A7)
0000258C  102E 000B 4044          move.b    11(A6),D0
00002590  4880      4045          ext.w     D0
00002592  48C0      4046          ext.l     D0
00002594  2F00      4047          move.l    D0,-(A7)
00002596  4EB8 0BD2 4048          jsr       _xtod
0000259A  584F      4049          addq.w    #4,A7
0000259C  2200      4050          move.l    D0,D1
0000259E  201F      4051          move.l    (A7)+,D0
000025A0  C2BC 0000 4052          and.l     #255,D1
000025A4  00FF      
000025A6  8081      4053          or.l      D1,D0
000025A8  4E5E      4054          unlk      A6
000025AA  4E75      4055          rts
                    4056   ; }
                    4057   ; int Get4HexDigitsForMemTest(char pat)
                    4058   ; {
                    4059   _Get4HexDigitsForMemTest:
000025AC  4E56 0000 4060          link      A6,#0
000025B0  2F02      4061          move.l    D2,-(A7)
000025B2  142E 000B 4062          move.b    11(A6),D2
000025B6  4882      4063          ext.w     D2
000025B8  48C2      4064          ext.l     D2
                    4065   ; return (xtod(pat) << 12) | (xtod(pat) << 8) |(Get2HexDigitsForMemTest(pat));
000025BA  4882      4066          ext.w     D2
000025BC  48C2      4067          ext.l     D2
000025BE  2F02      4068          move.l    D2,-(A7)
000025C0  4EB8 0BD2 4069          jsr       _xtod
000025C4  584F      4070          addq.w    #4,A7
000025C6  E100      4071          asl.b     #8,D0
000025C8  E900      4072          asl.b     #4,D0
000025CA  2F00      4073          move.l    D0,-(A7)
000025CC  4882      4074          ext.w     D2
000025CE  48C2      4075          ext.l     D2
000025D0  2F02      4076          move.l    D2,-(A7)
000025D2  4EB8 0BD2 4077          jsr       _xtod
000025D6  584F      4078          addq.w    #4,A7
000025D8  2200      4079          move.l    D0,D1
000025DA  201F      4080          move.l    (A7)+,D0
000025DC  E101      4081          asl.b     #8,D1
000025DE  8001      4082          or.b      D1,D0
000025E0  4880      4083          ext.w     D0
000025E2  48C0      4084          ext.l     D0
000025E4  2F00      4085          move.l    D0,-(A7)
000025E6  4882      4086          ext.w     D2
000025E8  48C2      4087          ext.l     D2
000025EA  2F02      4088          move.l    D2,-(A7)
000025EC  4EB8 256E 4089          jsr       _Get2HexDigitsForMemTest
000025F0  584F      4090          addq.w    #4,A7
000025F2  2200      4091          move.l    D0,D1
000025F4  201F      4092          move.l    (A7)+,D0
000025F6  8081      4093          or.l      D1,D0
000025F8  241F      4094          move.l    (A7)+,D2
000025FA  4E5E      4095          unlk      A6
000025FC  4E75      4096          rts
                    4097   ; }
                    4098   ; int Get8HexDigitsForMemTest(char pat)
                    4099   ; {
                    4100   _Get8HexDigitsForMemTest:
000025FE  4E56 0000 4101          link      A6,#0
00002602  48E7 2020 4102          movem.l   D2/A2,-(A7)
00002606  142E 000B 4103          move.b    11(A6),D2
0000260A  4882      4104          ext.w     D2
0000260C  48C2      4105          ext.l     D2
0000260E  45F8 0BD2 4106          lea       _xtod.L,A2
                    4107   ; return  (xtod(pat) << 28) | (xtod(pat) << 24) | (xtod(pat) << 20) | (xtod(pat) << 16) |(Get4HexDigitsForMemTest(pat));
00002612  4882      4108          ext.w     D2
00002614  48C2      4109          ext.l     D2
00002616  2F02      4110          move.l    D2,-(A7)
00002618  4E92      4111          jsr       (A2)
0000261A  584F      4112          addq.w    #4,A7
0000261C  E100      4113          asl.b     #8,D0
0000261E  E100      4114          asl.b     #8,D0
00002620  E100      4115          asl.b     #8,D0
00002622  E900      4116          asl.b     #4,D0
00002624  2F00      4117          move.l    D0,-(A7)
00002626  4882      4118          ext.w     D2
00002628  48C2      4119          ext.l     D2
0000262A  2F02      4120          move.l    D2,-(A7)
0000262C  4E92      4121          jsr       (A2)
0000262E  584F      4122          addq.w    #4,A7
00002630  2200      4123          move.l    D0,D1
00002632  201F      4124          move.l    (A7)+,D0
00002634  E101      4125          asl.b     #8,D1
00002636  E101      4126          asl.b     #8,D1
00002638  E101      4127          asl.b     #8,D1
0000263A  8001      4128          or.b      D1,D0
0000263C  2F00      4129          move.l    D0,-(A7)
0000263E  4882      4130          ext.w     D2
00002640  48C2      4131          ext.l     D2
00002642  2F02      4132          move.l    D2,-(A7)
00002644  4E92      4133          jsr       (A2)
00002646  584F      4134          addq.w    #4,A7
00002648  2200      4135          move.l    D0,D1
0000264A  201F      4136          move.l    (A7)+,D0
0000264C  E101      4137          asl.b     #8,D1
0000264E  E101      4138          asl.b     #8,D1
00002650  E901      4139          asl.b     #4,D1
00002652  8001      4140          or.b      D1,D0
00002654  2F00      4141          move.l    D0,-(A7)
00002656  4882      4142          ext.w     D2
00002658  48C2      4143          ext.l     D2
0000265A  2F02      4144          move.l    D2,-(A7)
0000265C  4E92      4145          jsr       (A2)
0000265E  584F      4146          addq.w    #4,A7
00002660  2200      4147          move.l    D0,D1
00002662  201F      4148          move.l    (A7)+,D0
00002664  E101      4149          asl.b     #8,D1
00002666  E101      4150          asl.b     #8,D1
00002668  8001      4151          or.b      D1,D0
0000266A  4880      4152          ext.w     D0
0000266C  48C0      4153          ext.l     D0
0000266E  2F00      4154          move.l    D0,-(A7)
00002670  4882      4155          ext.w     D2
00002672  48C2      4156          ext.l     D2
00002674  2F02      4157          move.l    D2,-(A7)
00002676  4EB8 25AC 4158          jsr       _Get4HexDigitsForMemTest
0000267A  584F      4159          addq.w    #4,A7
0000267C  2200      4160          move.l    D0,D1
0000267E  201F      4161          move.l    (A7)+,D0
00002680  8081      4162          or.l      D1,D0
00002682  4CDF 0404 4163          movem.l   (A7)+,D2/A2
00002686  4E5E      4164          unlk      A6
00002688  4E75      4165          rts
                    4166   ; }
                    4167   ; int Get7HexDigitsForMemTest(char one, char two, char three, char four, char five, char six, char seven)
                    4168   ; {
                    4169   _Get7HexDigitsForMemTest:
0000268A  4E56 0000 4170          link      A6,#0
0000268E  2F0A      4171          move.l    A2,-(A7)
00002690  45F8 0BD2 4172          lea       _xtod.L,A2
                    4173   ; return (xtod(one) << 24) | (xtod(two) << 20) | (xtod(three) << 16) | (xtod(four) << 12) | (xtod(five) << 8) | (xtod(six) << 4) | (xtod(seven));
00002694  122E 000B 4174          move.b    11(A6),D1
00002698  4881      4175          ext.w     D1
0000269A  48C1      4176          ext.l     D1
0000269C  2F01      4177          move.l    D1,-(A7)
0000269E  4E92      4178          jsr       (A2)
000026A0  584F      4179          addq.w    #4,A7
000026A2  C0BC 0000 4180          and.l     #255,D0
000026A6  00FF      
000026A8  E180      4181          asl.l     #8,D0
000026AA  E180      4182          asl.l     #8,D0
000026AC  E180      4183          asl.l     #8,D0
000026AE  2F00      4184          move.l    D0,-(A7)
000026B0  102E 000F 4185          move.b    15(A6),D0
000026B4  4880      4186          ext.w     D0
000026B6  48C0      4187          ext.l     D0
000026B8  2F00      4188          move.l    D0,-(A7)
000026BA  4E92      4189          jsr       (A2)
000026BC  584F      4190          addq.w    #4,A7
000026BE  2200      4191          move.l    D0,D1
000026C0  201F      4192          move.l    (A7)+,D0
000026C2  C2BC 0000 4193          and.l     #255,D1
000026C6  00FF      
000026C8  E181      4194          asl.l     #8,D1
000026CA  E181      4195          asl.l     #8,D1
000026CC  E981      4196          asl.l     #4,D1
000026CE  8081      4197          or.l      D1,D0
000026D0  2F00      4198          move.l    D0,-(A7)
000026D2  102E 0013 4199          move.b    19(A6),D0
000026D6  4880      4200          ext.w     D0
000026D8  48C0      4201          ext.l     D0
000026DA  2F00      4202          move.l    D0,-(A7)
000026DC  4E92      4203          jsr       (A2)
000026DE  584F      4204          addq.w    #4,A7
000026E0  2200      4205          move.l    D0,D1
000026E2  201F      4206          move.l    (A7)+,D0
000026E4  C2BC 0000 4207          and.l     #255,D1
000026E8  00FF      
000026EA  E181      4208          asl.l     #8,D1
000026EC  E181      4209          asl.l     #8,D1
000026EE  8081      4210          or.l      D1,D0
000026F0  2F00      4211          move.l    D0,-(A7)
000026F2  102E 0017 4212          move.b    23(A6),D0
000026F6  4880      4213          ext.w     D0
000026F8  48C0      4214          ext.l     D0
000026FA  2F00      4215          move.l    D0,-(A7)
000026FC  4E92      4216          jsr       (A2)
000026FE  584F      4217          addq.w    #4,A7
00002700  2200      4218          move.l    D0,D1
00002702  201F      4219          move.l    (A7)+,D0
00002704  C2BC 0000 4220          and.l     #255,D1
00002708  00FF      
0000270A  E181      4221          asl.l     #8,D1
0000270C  E981      4222          asl.l     #4,D1
0000270E  8081      4223          or.l      D1,D0
00002710  2F00      4224          move.l    D0,-(A7)
00002712  102E 001B 4225          move.b    27(A6),D0
00002716  4880      4226          ext.w     D0
00002718  48C0      4227          ext.l     D0
0000271A  2F00      4228          move.l    D0,-(A7)
0000271C  4E92      4229          jsr       (A2)
0000271E  584F      4230          addq.w    #4,A7
00002720  2200      4231          move.l    D0,D1
00002722  201F      4232          move.l    (A7)+,D0
00002724  C2BC 0000 4233          and.l     #255,D1
00002728  00FF      
0000272A  E181      4234          asl.l     #8,D1
0000272C  8081      4235          or.l      D1,D0
0000272E  2F00      4236          move.l    D0,-(A7)
00002730  102E 001F 4237          move.b    31(A6),D0
00002734  4880      4238          ext.w     D0
00002736  48C0      4239          ext.l     D0
00002738  2F00      4240          move.l    D0,-(A7)
0000273A  4E92      4241          jsr       (A2)
0000273C  584F      4242          addq.w    #4,A7
0000273E  2200      4243          move.l    D0,D1
00002740  201F      4244          move.l    (A7)+,D0
00002742  C2BC 0000 4245          and.l     #255,D1
00002746  00FF      
00002748  E981      4246          asl.l     #4,D1
0000274A  8081      4247          or.l      D1,D0
0000274C  2F00      4248          move.l    D0,-(A7)
0000274E  102E 0023 4249          move.b    35(A6),D0
00002752  4880      4250          ext.w     D0
00002754  48C0      4251          ext.l     D0
00002756  2F00      4252          move.l    D0,-(A7)
00002758  4E92      4253          jsr       (A2)
0000275A  584F      4254          addq.w    #4,A7
0000275C  2200      4255          move.l    D0,D1
0000275E  201F      4256          move.l    (A7)+,D0
00002760  C2BC 0000 4257          and.l     #255,D1
00002764  00FF      
00002766  8081      4258          or.l      D1,D0
00002768  245F      4259          move.l    (A7)+,A2
0000276A  4E5E      4260          unlk      A6
0000276C  4E75      4261          rts
                    4262   ; }
                    4263   ; int Get7HexDigits(void)
                    4264   ; {
                    4265   _Get7HexDigits:
0000276E  48E7 2030 4266          movem.l   D2/A2/A3,-(A7)
00002772  45F8 0B68 4267          lea       __getch.L,A2
00002776  47F8 0BD2 4268          lea       _xtod.L,A3
                    4269   ; register int i = (xtod(_getch()) << 24) | (xtod(_getch()) << 20) | (xtod(_getch()) << 16) | (xtod(_getch()) << 12) | (xtod(_getch()) << 8) | (xtod(_getch()) << 4) | (xtod(_getch()));
0000277A  2F00      4270          move.l    D0,-(A7)
0000277C  4E92      4271          jsr       (A2)
0000277E  2200      4272          move.l    D0,D1
00002780  201F      4273          move.l    (A7)+,D0
00002782  2F01      4274          move.l    D1,-(A7)
00002784  4E93      4275          jsr       (A3)
00002786  584F      4276          addq.w    #4,A7
00002788  C0BC 0000 4277          and.l     #255,D0
0000278C  00FF      
0000278E  E180      4278          asl.l     #8,D0
00002790  E180      4279          asl.l     #8,D0
00002792  E180      4280          asl.l     #8,D0
00002794  2F00      4281          move.l    D0,-(A7)
00002796  2F01      4282          move.l    D1,-(A7)
00002798  4E92      4283          jsr       (A2)
0000279A  221F      4284          move.l    (A7)+,D1
0000279C  2F00      4285          move.l    D0,-(A7)
0000279E  4E93      4286          jsr       (A3)
000027A0  584F      4287          addq.w    #4,A7
000027A2  2200      4288          move.l    D0,D1
000027A4  201F      4289          move.l    (A7)+,D0
000027A6  C2BC 0000 4290          and.l     #255,D1
000027AA  00FF      
000027AC  E181      4291          asl.l     #8,D1
000027AE  E181      4292          asl.l     #8,D1
000027B0  E981      4293          asl.l     #4,D1
000027B2  8081      4294          or.l      D1,D0
000027B4  2F00      4295          move.l    D0,-(A7)
000027B6  2F01      4296          move.l    D1,-(A7)
000027B8  4E92      4297          jsr       (A2)
000027BA  221F      4298          move.l    (A7)+,D1
000027BC  2F00      4299          move.l    D0,-(A7)
000027BE  4E93      4300          jsr       (A3)
000027C0  584F      4301          addq.w    #4,A7
000027C2  2200      4302          move.l    D0,D1
000027C4  201F      4303          move.l    (A7)+,D0
000027C6  C2BC 0000 4304          and.l     #255,D1
000027CA  00FF      
000027CC  E181      4305          asl.l     #8,D1
000027CE  E181      4306          asl.l     #8,D1
000027D0  8081      4307          or.l      D1,D0
000027D2  2F00      4308          move.l    D0,-(A7)
000027D4  2F01      4309          move.l    D1,-(A7)
000027D6  4E92      4310          jsr       (A2)
000027D8  221F      4311          move.l    (A7)+,D1
000027DA  2F00      4312          move.l    D0,-(A7)
000027DC  4E93      4313          jsr       (A3)
000027DE  584F      4314          addq.w    #4,A7
000027E0  2200      4315          move.l    D0,D1
000027E2  201F      4316          move.l    (A7)+,D0
000027E4  C2BC 0000 4317          and.l     #255,D1
000027E8  00FF      
000027EA  E181      4318          asl.l     #8,D1
000027EC  E981      4319          asl.l     #4,D1
000027EE  8081      4320          or.l      D1,D0
000027F0  2F00      4321          move.l    D0,-(A7)
000027F2  2F01      4322          move.l    D1,-(A7)
000027F4  4E92      4323          jsr       (A2)
000027F6  221F      4324          move.l    (A7)+,D1
000027F8  2F00      4325          move.l    D0,-(A7)
000027FA  4E93      4326          jsr       (A3)
000027FC  584F      4327          addq.w    #4,A7
000027FE  2200      4328          move.l    D0,D1
00002800  201F      4329          move.l    (A7)+,D0
00002802  C2BC 0000 4330          and.l     #255,D1
00002806  00FF      
00002808  E181      4331          asl.l     #8,D1
0000280A  8081      4332          or.l      D1,D0
0000280C  2F00      4333          move.l    D0,-(A7)
0000280E  2F01      4334          move.l    D1,-(A7)
00002810  4E92      4335          jsr       (A2)
00002812  221F      4336          move.l    (A7)+,D1
00002814  2F00      4337          move.l    D0,-(A7)
00002816  4E93      4338          jsr       (A3)
00002818  584F      4339          addq.w    #4,A7
0000281A  2200      4340          move.l    D0,D1
0000281C  201F      4341          move.l    (A7)+,D0
0000281E  C2BC 0000 4342          and.l     #255,D1
00002822  00FF      
00002824  E981      4343          asl.l     #4,D1
00002826  8081      4344          or.l      D1,D0
00002828  2F00      4345          move.l    D0,-(A7)
0000282A  2F01      4346          move.l    D1,-(A7)
0000282C  4E92      4347          jsr       (A2)
0000282E  221F      4348          move.l    (A7)+,D1
00002830  2F00      4349          move.l    D0,-(A7)
00002832  4E93      4350          jsr       (A3)
00002834  584F      4351          addq.w    #4,A7
00002836  2200      4352          move.l    D0,D1
00002838  201F      4353          move.l    (A7)+,D0
0000283A  C2BC 0000 4354          and.l     #255,D1
0000283E  00FF      
00002840  8081      4355          or.l      D1,D0
00002842  2400      4356          move.l    D0,D2
                    4357   ; return i;
00002844  2002      4358          move.l    D2,D0
00002846  4CDF 0C04 4359          movem.l   (A7)+,D2/A2/A3
0000284A  4E75      4360          rts
                    4361   ; }
                    4362   ; void FillMemoryForMemTest(char* StartRamPtr, char* EndRamPtr, unsigned long FillData, int config)
                    4363   ; {
                    4364   _FillMemoryForMemTest:
0000284C  4E56 0000 4365          link      A6,#0
00002850  48E7 3C00 4366          movem.l   D2/D3/D4/D5,-(A7)
00002854  262E 000C 4367          move.l    12(A6),D3
00002858  282E 0010 4368          move.l    16(A6),D4
0000285C  2A2E 0014 4369          move.l    20(A6),D5
                    4370   ; char* start = StartRamPtr;
00002860  242E 0008 4371          move.l    8(A6),D2
                    4372   ; printf("\r\nFilling Addresses [$%08X - $%08X] with $%08X", StartRamPtr, EndRamPtr, FillData);
00002864  2F04      4373          move.l    D4,-(A7)
00002866  2F03      4374          move.l    D3,-(A7)
00002868  2F2E 0008 4375          move.l    8(A6),-(A7)
0000286C  4879 0000 4376          pea       @m68kde~1_135.L
00002870  555E      
00002872  4EB9 0000 4377          jsr       _printf
00002876  3C04      
00002878  DEFC 0010 4378          add.w     #16,A7
                    4379   ; if (config == 1) {
0000287C  0C85 0000 4380          cmp.l     #1,D5
00002880  0001      
00002882  660C      4381          bne.s     FillMemoryForMemTest_5
                    4382   ; while (start <= EndRamPtr){
                    4383   FillMemoryForMemTest_3:
00002884  B483      4384          cmp.l     D3,D2
00002886  6208      4385          bhi.s     FillMemoryForMemTest_5
                    4386   ; *start++ = FillData;
00002888  2042      4387          move.l    D2,A0
0000288A  5282      4388          addq.l    #1,D2
0000288C  1084      4389          move.b    D4,(A0)
0000288E  60F4      4390          bra       FillMemoryForMemTest_3
                    4391   FillMemoryForMemTest_5:
                    4392   ; }
                    4393   ; }
                    4394   ; if (config == 2) {
00002890  0C85 0000 4395          cmp.l     #2,D5
00002894  0002      
00002896  660C      4396          bne.s     FillMemoryForMemTest_10
                    4397   ; while (start <= EndRamPtr) {
                    4398   FillMemoryForMemTest_8:
00002898  B483      4399          cmp.l     D3,D2
0000289A  6208      4400          bhi.s     FillMemoryForMemTest_10
                    4401   ; *start = FillData;
0000289C  2042      4402          move.l    D2,A0
0000289E  1084      4403          move.b    D4,(A0)
                    4404   ; start += 1;
000028A0  5282      4405          addq.l    #1,D2
000028A2  60F4      4406          bra       FillMemoryForMemTest_8
                    4407   FillMemoryForMemTest_10:
                    4408   ; }
                    4409   ; }
                    4410   ; if (config == 3) {
000028A4  0C85 0000 4411          cmp.l     #3,D5
000028A8  0003      
000028AA  660C      4412          bne.s     FillMemoryForMemTest_15
                    4413   ; while (start <= EndRamPtr) {
                    4414   FillMemoryForMemTest_13:
000028AC  B483      4415          cmp.l     D3,D2
000028AE  6208      4416          bhi.s     FillMemoryForMemTest_15
                    4417   ; *start = FillData;
000028B0  2042      4418          move.l    D2,A0
000028B2  1084      4419          move.b    D4,(A0)
                    4420   ; start += 1;
000028B4  5282      4421          addq.l    #1,D2
000028B6  60F4      4422          bra       FillMemoryForMemTest_13
                    4423   FillMemoryForMemTest_15:
000028B8  4CDF 003C 4424          movem.l   (A7)+,D2/D3/D4/D5
000028BC  4E5E      4425          unlk      A6
000028BE  4E75      4426          rts
                    4427   ; }
                    4428   ; }
                    4429   ; }
                    4430   ; void ReadMemoryForMemTest(char* StartRamPtr, char* EndRamPtr, unsigned long FillData, int config)
                    4431   ; {
                    4432   _ReadMemoryForMemTest:
000028C0  4E56 0000 4433          link      A6,#0
000028C4  48E7 3C20 4434          movem.l   D2/D3/D4/D5/A2,-(A7)
000028C8  262E 0010 4435          move.l    16(A6),D3
000028CC  45F9 0000 4436          lea       _printf.L,A2
000028D0  3C04      
000028D2  282E 000C 4437          move.l    12(A6),D4
000028D6  2A2E 0014 4438          move.l    20(A6),D5
                    4439   ; unsigned char* start = StartRamPtr;
000028DA  242E 0008 4440          move.l    8(A6),D2
                    4441   ; printf("\r\nReading Addresses [$%08X - $%08X] for $%02X", StartRamPtr, EndRamPtr, FillData);
000028DE  2F03      4442          move.l    D3,-(A7)
000028E0  2F04      4443          move.l    D4,-(A7)
000028E2  2F2E 0008 4444          move.l    8(A6),-(A7)
000028E6  4879 0000 4445          pea       @m68kde~1_136.L
000028EA  558E      
000028EC  4E92      4446          jsr       (A2)
000028EE  DEFC 0010 4447          add.w     #16,A7
                    4448   ; if (config == 1) {
000028F2  0C85 0000 4449          cmp.l     #1,D5
000028F6  0001      
000028F8  6600 0050 4450          bne       ReadMemoryForMemTest_5
                    4451   ; while (start <= EndRamPtr) {
                    4452   ReadMemoryForMemTest_3:
000028FC  B484      4453          cmp.l     D4,D2
000028FE  6200 004A 4454          bhi       ReadMemoryForMemTest_5
                    4455   ; if (*start != FillData)
00002902  2042      4456          move.l    D2,A0
00002904  1010      4457          move.b    (A0),D0
00002906  C0BC 0000 4458          and.l     #255,D0
0000290A  00FF      
0000290C  B083      4459          cmp.l     D3,D0
0000290E  671C      4460          beq.s     ReadMemoryForMemTest_6
                    4461   ; printf("\r\nValue incorrect at addresses $%08X ... should be $%02X but found $%02X", start, FillData, *start);
00002910  2042      4462          move.l    D2,A0
00002912  1210      4463          move.b    (A0),D1
00002914  C2BC 0000 4464          and.l     #255,D1
00002918  00FF      
0000291A  2F01      4465          move.l    D1,-(A7)
0000291C  2F03      4466          move.l    D3,-(A7)
0000291E  2F02      4467          move.l    D2,-(A7)
00002920  4879 0000 4468          pea       @m68kde~1_137.L
00002924  55BC      
00002926  4E92      4469          jsr       (A2)
00002928  DEFC 0010 4470          add.w     #16,A7
                    4471   ReadMemoryForMemTest_6:
                    4472   ; printf("\r\nValue: $%02X found at Address: $%08X", *start, start);
0000292C  2F02      4473          move.l    D2,-(A7)
0000292E  2042      4474          move.l    D2,A0
00002930  1210      4475          move.b    (A0),D1
00002932  C2BC 0000 4476          and.l     #255,D1
00002936  00FF      
00002938  2F01      4477          move.l    D1,-(A7)
0000293A  4879 0000 4478          pea       @m68kde~1_138.L
0000293E  5606      
00002940  4E92      4479          jsr       (A2)
00002942  DEFC 000C 4480          add.w     #12,A7
                    4481   ; start++;
00002946  5282      4482          addq.l    #1,D2
00002948  60B2      4483          bra       ReadMemoryForMemTest_3
                    4484   ReadMemoryForMemTest_5:
                    4485   ; }
                    4486   ; }
                    4487   ; if (config == 2) {
0000294A  0C85 0000 4488          cmp.l     #2,D5
0000294E  0002      
00002950  6600 0064 4489          bne       ReadMemoryForMemTest_12
                    4490   ; while (start <= EndRamPtr) {
                    4491   ReadMemoryForMemTest_10:
00002954  B484      4492          cmp.l     D4,D2
00002956  6200 005E 4493          bhi       ReadMemoryForMemTest_12
                    4494   ; if(*start != FillData)
0000295A  2042      4495          move.l    D2,A0
0000295C  1010      4496          move.b    (A0),D0
0000295E  C0BC 0000 4497          and.l     #255,D0
00002962  00FF      
00002964  B083      4498          cmp.l     D3,D0
00002966  671C      4499          beq.s     ReadMemoryForMemTest_13
                    4500   ; printf("\r\nValue incorrect at addresses $%08X ... should be $%02X but found $%02X", start, FillData, *start);
00002968  2042      4501          move.l    D2,A0
0000296A  1210      4502          move.b    (A0),D1
0000296C  C2BC 0000 4503          and.l     #255,D1
00002970  00FF      
00002972  2F01      4504          move.l    D1,-(A7)
00002974  2F03      4505          move.l    D3,-(A7)
00002976  2F02      4506          move.l    D2,-(A7)
00002978  4879 0000 4507          pea       @m68kde~1_137.L
0000297C  55BC      
0000297E  4E92      4508          jsr       (A2)
00002980  DEFC 0010 4509          add.w     #16,A7
                    4510   ReadMemoryForMemTest_13:
                    4511   ; printf("\r\nValue: $%02X $%02X found at Address: $%08X and $%08X", *start, *(start + 1), start, (start + 1));
00002984  2202      4512          move.l    D2,D1
00002986  5281      4513          addq.l    #1,D1
00002988  2F01      4514          move.l    D1,-(A7)
0000298A  2F02      4515          move.l    D2,-(A7)
0000298C  2042      4516          move.l    D2,A0
0000298E  1228 0001 4517          move.b    1(A0),D1
00002992  C2BC 0000 4518          and.l     #255,D1
00002996  00FF      
00002998  2F01      4519          move.l    D1,-(A7)
0000299A  2042      4520          move.l    D2,A0
0000299C  1210      4521          move.b    (A0),D1
0000299E  C2BC 0000 4522          and.l     #255,D1
000029A2  00FF      
000029A4  2F01      4523          move.l    D1,-(A7)
000029A6  4879 0000 4524          pea       @m68kde~1_139.L
000029AA  562E      
000029AC  4E92      4525          jsr       (A2)
000029AE  DEFC 0014 4526          add.w     #20,A7
                    4527   ; start += 2;
000029B2  5482      4528          addq.l    #2,D2
000029B4  609E      4529          bra       ReadMemoryForMemTest_10
                    4530   ReadMemoryForMemTest_12:
                    4531   ; }
                    4532   ; }
                    4533   ; if (config == 3) {
000029B6  0C85 0000 4534          cmp.l     #3,D5
000029BA  0003      
000029BC  6600 008E 4535          bne       ReadMemoryForMemTest_19
                    4536   ; while (start <= EndRamPtr) {
                    4537   ReadMemoryForMemTest_17:
000029C0  B484      4538          cmp.l     D4,D2
000029C2  6200 0088 4539          bhi       ReadMemoryForMemTest_19
                    4540   ; if (*start != FillData)
000029C6  2042      4541          move.l    D2,A0
000029C8  1010      4542          move.b    (A0),D0
000029CA  C0BC 0000 4543          and.l     #255,D0
000029CE  00FF      
000029D0  B083      4544          cmp.l     D3,D0
000029D2  671C      4545          beq.s     ReadMemoryForMemTest_20
                    4546   ; printf("\r\nValue incorrect at addresses $%08X ... should be $%02X but found $%02X", start, FillData, *start);
000029D4  2042      4547          move.l    D2,A0
000029D6  1210      4548          move.b    (A0),D1
000029D8  C2BC 0000 4549          and.l     #255,D1
000029DC  00FF      
000029DE  2F01      4550          move.l    D1,-(A7)
000029E0  2F03      4551          move.l    D3,-(A7)
000029E2  2F02      4552          move.l    D2,-(A7)
000029E4  4879 0000 4553          pea       @m68kde~1_137.L
000029E8  55BC      
000029EA  4E92      4554          jsr       (A2)
000029EC  DEFC 0010 4555          add.w     #16,A7
                    4556   ReadMemoryForMemTest_20:
                    4557   ; printf("\r\nValue: $%02X $%02X $%02X $%02X found at Address: $%08X - $%08X", *start, *(start + 1), *(start + 2), *(start + 3), start, (start + 1), (start + 2), (start + 3));
000029F0  2202      4558          move.l    D2,D1
000029F2  5681      4559          addq.l    #3,D1
000029F4  2F01      4560          move.l    D1,-(A7)
000029F6  2202      4561          move.l    D2,D1
000029F8  5481      4562          addq.l    #2,D1
000029FA  2F01      4563          move.l    D1,-(A7)
000029FC  2202      4564          move.l    D2,D1
000029FE  5281      4565          addq.l    #1,D1
00002A00  2F01      4566          move.l    D1,-(A7)
00002A02  2F02      4567          move.l    D2,-(A7)
00002A04  2042      4568          move.l    D2,A0
00002A06  1228 0003 4569          move.b    3(A0),D1
00002A0A  C2BC 0000 4570          and.l     #255,D1
00002A0E  00FF      
00002A10  2F01      4571          move.l    D1,-(A7)
00002A12  2042      4572          move.l    D2,A0
00002A14  1228 0002 4573          move.b    2(A0),D1
00002A18  C2BC 0000 4574          and.l     #255,D1
00002A1C  00FF      
00002A1E  2F01      4575          move.l    D1,-(A7)
00002A20  2042      4576          move.l    D2,A0
00002A22  1228 0001 4577          move.b    1(A0),D1
00002A26  C2BC 0000 4578          and.l     #255,D1
00002A2A  00FF      
00002A2C  2F01      4579          move.l    D1,-(A7)
00002A2E  2042      4580          move.l    D2,A0
00002A30  1210      4581          move.b    (A0),D1
00002A32  C2BC 0000 4582          and.l     #255,D1
00002A36  00FF      
00002A38  2F01      4583          move.l    D1,-(A7)
00002A3A  4879 0000 4584          pea       @m68kde~1_140.L
00002A3E  5666      
00002A40  4E92      4585          jsr       (A2)
00002A42  DEFC 0024 4586          add.w     #36,A7
                    4587   ; start += 4;
00002A46  5882      4588          addq.l    #4,D2
00002A48  6000 FF76 4589          bra       ReadMemoryForMemTest_17
                    4590   ReadMemoryForMemTest_19:
00002A4C  4CDF 043C 4591          movem.l   (A7)+,D2/D3/D4/D5/A2
00002A50  4E5E      4592          unlk      A6
00002A52  4E75      4593          rts
                    4594   ; }
                    4595   ; }
                    4596   ; }
                    4597   ; void MemoryTest(void)
                    4598   ; {
                    4599   _MemoryTest:
00002A54  4E56 FFF0 4600          link      A6,#-16
00002A58  48E7 3E3C 4601          movem.l   D2/D3/D4/D5/D6/A2/A3/A4/A5,-(A7)
00002A5C  45F9 0000 4602          lea       _printf.L,A2
00002A60  3C04      
00002A62  47F8 28C0 4603          lea       _ReadMemoryForMemTest.L,A3
00002A66  49F8 256E 4604          lea       _Get2HexDigitsForMemTest.L,A4
00002A6A  4BF8 284C 4605          lea       _FillMemoryForMemTest.L,A5
                    4606   ; int test_config = 0;
00002A6E  4285      4607          clr.l     D5
                    4608   ; int test_pattern = 0;
00002A70  4286      4609          clr.l     D6
                    4610   ; char start_addr[7];
                    4611   ; int start_val = 0;
00002A72  4282      4612          clr.l     D2
                    4613   ; char end_addr[7];
                    4614   ; int end_val = 0;
00002A74  4283      4615          clr.l     D3
                    4616   ; char digit;
                    4617   ; scanflush();
00002A76  4EB9 0000 4618          jsr       _scanflush
00002A7A  35FA      
                    4619   ; // Prompt the user to enter a test configuration
                    4620   ; printf("\r\nEnter memory test configuration(1 - bytes, 2 - words, 3 - long words): ");
00002A7C  4879 0000 4621          pea       @m68kde~1_141.L
00002A80  56A8      
00002A82  4E92      4622          jsr       (A2)
00002A84  584F      4623          addq.w    #4,A7
                    4624   ; test_config = (int)(xtod(_getch()));
00002A86  2F00      4625          move.l    D0,-(A7)
00002A88  4EB8 0B68 4626          jsr       __getch
00002A8C  2200      4627          move.l    D0,D1
00002A8E  201F      4628          move.l    (A7)+,D0
00002A90  2F01      4629          move.l    D1,-(A7)
00002A92  4EB8 0BD2 4630          jsr       _xtod
00002A96  584F      4631          addq.w    #4,A7
00002A98  4880      4632          ext.w     D0
00002A9A  48C0      4633          ext.l     D0
00002A9C  2A00      4634          move.l    D0,D5
                    4635   ; // Check for invalid configuration entry and re-prompt if needed
                    4636   ; while (test_config > 3 || test_config < 1) {
                    4637   MemoryTest_1:
00002A9E  0C85 0000 4638          cmp.l     #3,D5
00002AA2  0003      
00002AA4  6E0A      4639          bgt.s     MemoryTest_4
00002AA6  0C85 0000 4640          cmp.l     #1,D5
00002AAA  0001      
00002AAC  6C00 0032 4641          bge       MemoryTest_3
                    4642   MemoryTest_4:
                    4643   ; printf("\r\nConfiguration invalid %d, try again", test_config);
00002AB0  2F05      4644          move.l    D5,-(A7)
00002AB2  4879 0000 4645          pea       @m68kde~1_142.L
00002AB6  56F2      
00002AB8  4E92      4646          jsr       (A2)
00002ABA  504F      4647          addq.w    #8,A7
                    4648   ; printf("\r\nEnter memory test configuration(1 - bytes, 2 - words, 3 - long words): ");
00002ABC  4879 0000 4649          pea       @m68kde~1_141.L
00002AC0  56A8      
00002AC2  4E92      4650          jsr       (A2)
00002AC4  584F      4651          addq.w    #4,A7
                    4652   ; test_config = (int)(xtod(_getch()));
00002AC6  2F00      4653          move.l    D0,-(A7)
00002AC8  4EB8 0B68 4654          jsr       __getch
00002ACC  2200      4655          move.l    D0,D1
00002ACE  201F      4656          move.l    (A7)+,D0
00002AD0  2F01      4657          move.l    D1,-(A7)
00002AD2  4EB8 0BD2 4658          jsr       _xtod
00002AD6  584F      4659          addq.w    #4,A7
00002AD8  4880      4660          ext.w     D0
00002ADA  48C0      4661          ext.l     D0
00002ADC  2A00      4662          move.l    D0,D5
00002ADE  60BE      4663          bra       MemoryTest_1
                    4664   MemoryTest_3:
                    4665   ; //scanf("%d", &test_config);
                    4666   ; }
                    4667   ; // Prompt the user to enter a test pattern
                    4668   ; printf("\r\nChoose between different memory test patterns(1 - 5, 2 - A, 3 - F, 4 - 0): ");
00002AE0  4879 0000 4669          pea       @m68kde~1_143.L
00002AE4  5718      
00002AE6  4E92      4670          jsr       (A2)
00002AE8  584F      4671          addq.w    #4,A7
                    4672   ; test_pattern = (int)(xtod(_getch()));
00002AEA  2F00      4673          move.l    D0,-(A7)
00002AEC  4EB8 0B68 4674          jsr       __getch
00002AF0  2200      4675          move.l    D0,D1
00002AF2  201F      4676          move.l    (A7)+,D0
00002AF4  2F01      4677          move.l    D1,-(A7)
00002AF6  4EB8 0BD2 4678          jsr       _xtod
00002AFA  584F      4679          addq.w    #4,A7
00002AFC  4880      4680          ext.w     D0
00002AFE  48C0      4681          ext.l     D0
00002B00  2C00      4682          move.l    D0,D6
                    4683   ; // Check for invalid pattern entry and re-prompt if needed
                    4684   ; while (test_pattern > 4 || test_pattern < 1) {
                    4685   MemoryTest_5:
00002B02  0C86 0000 4686          cmp.l     #4,D6
00002B06  0004      
00002B08  6E0A      4687          bgt.s     MemoryTest_8
00002B0A  0C86 0000 4688          cmp.l     #1,D6
00002B0E  0001      
00002B10  6C00 0030 4689          bge       MemoryTest_7
                    4690   MemoryTest_8:
                    4691   ; printf("\r\nPattern invalid, try again");
00002B14  4879 0000 4692          pea       @m68kde~1_144.L
00002B18  5766      
00002B1A  4E92      4693          jsr       (A2)
00002B1C  584F      4694          addq.w    #4,A7
                    4695   ; printf("\r\nChoose between different memory test patterns(1 - 5, 2 - A, 3 - F, 4 - 0): ");
00002B1E  4879 0000 4696          pea       @m68kde~1_143.L
00002B22  5718      
00002B24  4E92      4697          jsr       (A2)
00002B26  584F      4698          addq.w    #4,A7
                    4699   ; //scanf("%d", &test_pattern);
                    4700   ; test_pattern = (int)(xtod(_getch()));
00002B28  2F00      4701          move.l    D0,-(A7)
00002B2A  4EB8 0B68 4702          jsr       __getch
00002B2E  2200      4703          move.l    D0,D1
00002B30  201F      4704          move.l    (A7)+,D0
00002B32  2F01      4705          move.l    D1,-(A7)
00002B34  4EB8 0BD2 4706          jsr       _xtod
00002B38  584F      4707          addq.w    #4,A7
00002B3A  4880      4708          ext.w     D0
00002B3C  48C0      4709          ext.l     D0
00002B3E  2C00      4710          move.l    D0,D6
00002B40  60C0      4711          bra       MemoryTest_5
                    4712   MemoryTest_7:
                    4713   ; }
                    4714   ; // Prompt the user to enter a starting address
                    4715   ; printf("\r\nEnter starting address(8020000 - 8030000 inclusive): ");
00002B42  4879 0000 4716          pea       @m68kde~1_145.L
00002B46  5784      
00002B48  4E92      4717          jsr       (A2)
00002B4A  584F      4718          addq.w    #4,A7
                    4719   ; start_val = Get7HexDigits();
00002B4C  4EB8 276E 4720          jsr       _Get7HexDigits
00002B50  2400      4721          move.l    D0,D2
                    4722   ; // Check for invalid start address and re-prompt if needed
                    4723   ; // Check for illegal address, start address must be even if writing words or long words to memory
                    4724   ; while (start_val < 0x8020000 || start_val > 0x8030000 || strlen(start_addr) > 7 || (start_val % 2 != 0 && test_config != 1)) { // start address must be 7 chars and within bounds
                    4725   MemoryTest_9:
00002B52  0C82 0802 4726          cmp.l     #134348800,D2
00002B56  0000      
00002B58  6D00 003C 4727          blt       MemoryTest_12
00002B5C  0C82 0803 4728          cmp.l     #134414336,D2
00002B60  0000      
00002B62  6E32      4729          bgt.s     MemoryTest_12
00002B64  486E FFF0 4730          pea       -16(A6)
00002B68  4EB9 0000 4731          jsr       _strlen
00002B6C  324E      
00002B6E  584F      4732          addq.w    #4,A7
00002B70  0C80 0000 4733          cmp.l     #7,D0
00002B74  0007      
00002B76  6E1E      4734          bgt.s     MemoryTest_12
00002B78  2F02      4735          move.l    D2,-(A7)
00002B7A  4878 0002 4736          pea       2
00002B7E  4EB9 0000 4737          jsr       LDIV
00002B82  3182      
00002B84  202F 0004 4738          move.l    4(A7),D0
00002B88  504F      4739          addq.w    #8,A7
00002B8A  4A80      4740          tst.l     D0
00002B8C  6724      4741          beq.s     MemoryTest_11
00002B8E  0C85 0000 4742          cmp.l     #1,D5
00002B92  0001      
00002B94  671C      4743          beq.s     MemoryTest_11
                    4744   MemoryTest_12:
                    4745   ; printf("\r\nInvalid starting address.. try again");
00002B96  4879 0000 4746          pea       @m68kde~1_146.L
00002B9A  57BC      
00002B9C  4E92      4747          jsr       (A2)
00002B9E  584F      4748          addq.w    #4,A7
                    4749   ; //printf("\r\nStarting address out of bounds.. try again");
                    4750   ; printf("\r\nEnter starting address(8020000 - 8030000 inclusive): ");
00002BA0  4879 0000 4751          pea       @m68kde~1_145.L
00002BA4  5784      
00002BA6  4E92      4752          jsr       (A2)
00002BA8  584F      4753          addq.w    #4,A7
                    4754   ; start_val = Get7HexDigits();
00002BAA  4EB8 276E 4755          jsr       _Get7HexDigits
00002BAE  2400      4756          move.l    D0,D2
00002BB0  60A0      4757          bra       MemoryTest_9
                    4758   MemoryTest_11:
                    4759   ; }
                    4760   ; // Prompt the user to enter an ending address
                    4761   ; printf("\r\nEnter ending address(8020000 - 8030000 inclusive): ");
00002BB2  4879 0000 4762          pea       @m68kde~1_147.L
00002BB6  57E4      
00002BB8  4E92      4763          jsr       (A2)
00002BBA  584F      4764          addq.w    #4,A7
                    4765   ; end_val = Get7HexDigits();
00002BBC  4EB8 276E 4766          jsr       _Get7HexDigits
00002BC0  2600      4767          move.l    D0,D3
                    4768   ; // When writing words, the given address range should be a multiple of 2 bytes (size of a word)
                    4769   ; // When writing long words, the given address range should be a multiple of 4 bytes (size of a long word)
                    4770   ; while (end_val < 0x8020000 || end_val > 0x8030000 || strlen(end_addr) > 7 ||
                    4771   MemoryTest_13:
00002BC2  0C83 0802 4772          cmp.l     #134348800,D3
00002BC6  0000      
00002BC8  6D00 0070 4773          blt       MemoryTest_16
00002BCC  0C83 0803 4774          cmp.l     #134414336,D3
00002BD0  0000      
00002BD2  6E00 0066 4775          bgt       MemoryTest_16
00002BD6  486E FFF8 4776          pea       -8(A6)
00002BDA  4EB9 0000 4777          jsr       _strlen
00002BDE  324E      
00002BE0  584F      4778          addq.w    #4,A7
00002BE2  0C80 0000 4779          cmp.l     #7,D0
00002BE6  0007      
00002BE8  6E00 0050 4780          bgt       MemoryTest_16
00002BEC  B682      4781          cmp.l     D2,D3
00002BEE  6D00 004A 4782          blt       MemoryTest_16
00002BF2  2003      4783          move.l    D3,D0
00002BF4  9082      4784          sub.l     D2,D0
00002BF6  5280      4785          addq.l    #1,D0
00002BF8  2F00      4786          move.l    D0,-(A7)
00002BFA  4878 0002 4787          pea       2
00002BFE  4EB9 0000 4788          jsr       LDIV
00002C02  3182      
00002C04  202F 0004 4789          move.l    4(A7),D0
00002C08  504F      4790          addq.w    #8,A7
00002C0A  4A80      4791          tst.l     D0
00002C0C  6708      4792          beq.s     MemoryTest_17
00002C0E  0C85 0000 4793          cmp.l     #2,D5
00002C12  0002      
00002C14  6724      4794          beq.s     MemoryTest_16
                    4795   MemoryTest_17:
00002C16  2003      4796          move.l    D3,D0
00002C18  9082      4797          sub.l     D2,D0
00002C1A  5280      4798          addq.l    #1,D0
00002C1C  2F00      4799          move.l    D0,-(A7)
00002C1E  4878 0004 4800          pea       4
00002C22  4EB9 0000 4801          jsr       LDIV
00002C26  3182      
00002C28  202F 0004 4802          move.l    4(A7),D0
00002C2C  504F      4803          addq.w    #8,A7
00002C2E  4A80      4804          tst.l     D0
00002C30  6726      4805          beq.s     MemoryTest_15
00002C32  0C85 0000 4806          cmp.l     #3,D5
00002C36  0003      
00002C38  661E      4807          bne.s     MemoryTest_15
                    4808   MemoryTest_16:
                    4809   ; end_val < start_val || ((end_val - start_val + 1) % 2 != 0 && test_config == 2) ||
                    4810   ; ((end_val - start_val + 1) % 4 != 0 && test_config == 3)) { // end address must be 7 chars and within bounds
                    4811   ; printf("\r\nEnding address out of bounds.. try again");
00002C3A  4879 0000 4812          pea       @m68kde~1_148.L
00002C3E  581A      
00002C40  4E92      4813          jsr       (A2)
00002C42  584F      4814          addq.w    #4,A7
                    4815   ; printf("\r\nEnter ending address(8020000 - 8030000 inclusive): ");
00002C44  4879 0000 4816          pea       @m68kde~1_147.L
00002C48  57E4      
00002C4A  4E92      4817          jsr       (A2)
00002C4C  584F      4818          addq.w    #4,A7
                    4819   ; end_val = Get7HexDigits();
00002C4E  4EB8 276E 4820          jsr       _Get7HexDigits
00002C52  2600      4821          move.l    D0,D3
00002C54  6000 FF6C 4822          bra       MemoryTest_13
                    4823   MemoryTest_15:
                    4824   ; }
                    4825   ; printf("\r\nWriting to SRAM ...");
00002C58  4879 0000 4826          pea       @m68kde~1_149.L
00002C5C  5846      
00002C5E  4E92      4827          jsr       (A2)
00002C60  584F      4828          addq.w    #4,A7
                    4829   ; printf("\r\n here");
00002C62  4879 0000 4830          pea       @m68kde~1_150.L
00002C66  585C      
00002C68  4E92      4831          jsr       (A2)
00002C6A  584F      4832          addq.w    #4,A7
                    4833   ; printf("\r\n............................................................................................................");
00002C6C  4879 0000 4834          pea       @m68kde~1_151.L
00002C70  5864      
00002C72  4E92      4835          jsr       (A2)
00002C74  584F      4836          addq.w    #4,A7
                    4837   ; printf("\r\n............................................................................................................");
00002C76  4879 0000 4838          pea       @m68kde~1_151.L
00002C7A  5864      
00002C7C  4E92      4839          jsr       (A2)
00002C7E  584F      4840          addq.w    #4,A7
                    4841   ; printf("\r\n............................................................................................................");
00002C80  4879 0000 4842          pea       @m68kde~1_151.L
00002C84  5864      
00002C86  4E92      4843          jsr       (A2)
00002C88  584F      4844          addq.w    #4,A7
                    4845   ; switch (test_pattern) {
00002C8A  2006      4846          move.l    D6,D0
00002C8C  5380      4847          subq.l    #1,D0
00002C8E  6500 002C 4848          blo       MemoryTest_18
00002C92  0C80 0000 4849          cmp.l     #4,D0
00002C96  0004      
00002C98  6422      4850          bhs.s     MemoryTest_18
00002C9A  E380      4851          asl.l     #1,D0
00002C9C  303B 0806 4852          move.w    MemoryTest_20(PC,D0.L),D0
00002CA0  4EFB 0002 4853          jmp       MemoryTest_20(PC,D0.W)
                    4854   MemoryTest_20:
00002CA4  0008      4855          dc.w      MemoryTest_21-MemoryTest_20
00002CA6  000C      4856          dc.w      MemoryTest_22-MemoryTest_20
00002CA8  0010      4857          dc.w      MemoryTest_23-MemoryTest_20
00002CAA  0014      4858          dc.w      MemoryTest_24-MemoryTest_20
                    4859   MemoryTest_21:
                    4860   ; case 1: digit = '5';
00002CAC  7835      4861          moveq     #53,D4
                    4862   ; break;
00002CAE  600E      4863          bra.s     MemoryTest_19
                    4864   MemoryTest_22:
                    4865   ; case 2: digit = 'A';
00002CB0  7841      4866          moveq     #65,D4
                    4867   ; break;
00002CB2  600A      4868          bra.s     MemoryTest_19
                    4869   MemoryTest_23:
                    4870   ; case 3: digit = 'F';
00002CB4  7846      4871          moveq     #70,D4
                    4872   ; break;
00002CB6  6006      4873          bra.s     MemoryTest_19
                    4874   MemoryTest_24:
                    4875   ; case 4: digit = '0';
00002CB8  7830      4876          moveq     #48,D4
                    4877   ; break;
00002CBA  6002      4878          bra.s     MemoryTest_19
                    4879   MemoryTest_18:
                    4880   ; default: digit = '5';
00002CBC  7835      4881          moveq     #53,D4
                    4882   MemoryTest_19:
                    4883   ; }
                    4884   ; switch (test_config) {
00002CBE  0C85 0000 4885          cmp.l     #2,D5
00002CC2  0002      
00002CC4  6700 0042 4886          beq       MemoryTest_29
00002CC8  6E0C      4887          bgt.s     MemoryTest_32
00002CCA  0C85 0000 4888          cmp.l     #1,D5
00002CCE  0001      
00002CD0  6712      4889          beq.s     MemoryTest_28
00002CD2  6000 007E 4890          bra       MemoryTest_26
                    4891   MemoryTest_32:
00002CD6  0C85 0000 4892          cmp.l     #3,D5
00002CDA  0003      
00002CDC  6700 0050 4893          beq       MemoryTest_30
00002CE0  6000 0070 4894          bra       MemoryTest_26
                    4895   MemoryTest_28:
                    4896   ; case 1: FillMemoryForMemTest(start_val, end_val, Get2HexDigitsForMemTest(digit), 1);
00002CE4  4878 0001 4897          pea       1
00002CE8  2F00      4898          move.l    D0,-(A7)
00002CEA  4884      4899          ext.w     D4
00002CEC  48C4      4900          ext.l     D4
00002CEE  2F04      4901          move.l    D4,-(A7)
00002CF0  4E94      4902          jsr       (A4)
00002CF2  584F      4903          addq.w    #4,A7
00002CF4  2200      4904          move.l    D0,D1
00002CF6  201F      4905          move.l    (A7)+,D0
00002CF8  2F01      4906          move.l    D1,-(A7)
00002CFA  2F03      4907          move.l    D3,-(A7)
00002CFC  2F02      4908          move.l    D2,-(A7)
00002CFE  4E95      4909          jsr       (A5)
00002D00  DEFC 0010 4910          add.w     #16,A7
                    4911   ; break;
00002D04  6000 006C 4912          bra       MemoryTest_27
                    4913   MemoryTest_29:
                    4914   ; case 2: FillMemoryForMemTest(start_val, end_val, Get4HexDigitsForMemTest(digit), 2);
00002D08  4878 0002 4915          pea       2
00002D0C  2F00      4916          move.l    D0,-(A7)
00002D0E  4884      4917          ext.w     D4
00002D10  48C4      4918          ext.l     D4
00002D12  2F04      4919          move.l    D4,-(A7)
00002D14  4EB8 25AC 4920          jsr       _Get4HexDigitsForMemTest
00002D18  584F      4921          addq.w    #4,A7
00002D1A  2200      4922          move.l    D0,D1
00002D1C  201F      4923          move.l    (A7)+,D0
00002D1E  2F01      4924          move.l    D1,-(A7)
00002D20  2F03      4925          move.l    D3,-(A7)
00002D22  2F02      4926          move.l    D2,-(A7)
00002D24  4E95      4927          jsr       (A5)
00002D26  DEFC 0010 4928          add.w     #16,A7
                    4929   ; break;
00002D2A  6000 0046 4930          bra       MemoryTest_27
                    4931   MemoryTest_30:
                    4932   ; case 3: FillMemoryForMemTest(start_val, end_val, Get8HexDigitsForMemTest(digit), 3);
00002D2E  4878 0003 4933          pea       3
00002D32  2F00      4934          move.l    D0,-(A7)
00002D34  4884      4935          ext.w     D4
00002D36  48C4      4936          ext.l     D4
00002D38  2F04      4937          move.l    D4,-(A7)
00002D3A  4EB8 25FE 4938          jsr       _Get8HexDigitsForMemTest
00002D3E  584F      4939          addq.w    #4,A7
00002D40  2200      4940          move.l    D0,D1
00002D42  201F      4941          move.l    (A7)+,D0
00002D44  2F01      4942          move.l    D1,-(A7)
00002D46  2F03      4943          move.l    D3,-(A7)
00002D48  2F02      4944          move.l    D2,-(A7)
00002D4A  4E95      4945          jsr       (A5)
00002D4C  DEFC 0010 4946          add.w     #16,A7
                    4947   ; break;
00002D50  6020      4948          bra.s     MemoryTest_27
                    4949   MemoryTest_26:
                    4950   ; default: FillMemoryForMemTest(start_val, end_val, Get2HexDigitsForMemTest(digit), 1);;
00002D52  4878 0001 4951          pea       1
00002D56  2F00      4952          move.l    D0,-(A7)
00002D58  4884      4953          ext.w     D4
00002D5A  48C4      4954          ext.l     D4
00002D5C  2F04      4955          move.l    D4,-(A7)
00002D5E  4E94      4956          jsr       (A4)
00002D60  584F      4957          addq.w    #4,A7
00002D62  2200      4958          move.l    D0,D1
00002D64  201F      4959          move.l    (A7)+,D0
00002D66  2F01      4960          move.l    D1,-(A7)
00002D68  2F03      4961          move.l    D3,-(A7)
00002D6A  2F02      4962          move.l    D2,-(A7)
00002D6C  4E95      4963          jsr       (A5)
00002D6E  DEFC 0010 4964          add.w     #16,A7
                    4965   MemoryTest_27:
                    4966   ; }
                    4967   ; printf("\r\nFinished writing to SRAM .");
00002D72  4879 0000 4968          pea       @m68kde~1_152.L
00002D76  58D4      
00002D78  4E92      4969          jsr       (A2)
00002D7A  584F      4970          addq.w    #4,A7
                    4971   ; printf("\r\nCheck SRAM content");
00002D7C  4879 0000 4972          pea       @m68kde~1_153.L
00002D80  58F2      
00002D82  4E92      4973          jsr       (A2)
00002D84  584F      4974          addq.w    #4,A7
                    4975   ; printf("\r\nReading from SRAM ...");
00002D86  4879 0000 4976          pea       @m68kde~1_154.L
00002D8A  5908      
00002D8C  4E92      4977          jsr       (A2)
00002D8E  584F      4978          addq.w    #4,A7
                    4979   ; printf("\r\nPrinting out every 400th location from SRAM ...");
00002D90  4879 0000 4980          pea       @m68kde~1_155.L
00002D94  5920      
00002D96  4E92      4981          jsr       (A2)
00002D98  584F      4982          addq.w    #4,A7
                    4983   ; printf("\r\n............................................................................................................");
00002D9A  4879 0000 4984          pea       @m68kde~1_151.L
00002D9E  5864      
00002DA0  4E92      4985          jsr       (A2)
00002DA2  584F      4986          addq.w    #4,A7
                    4987   ; printf("\r\n............................................................................................................");
00002DA4  4879 0000 4988          pea       @m68kde~1_151.L
00002DA8  5864      
00002DAA  4E92      4989          jsr       (A2)
00002DAC  584F      4990          addq.w    #4,A7
                    4991   ; printf("\r\n............................................................................................................");
00002DAE  4879 0000 4992          pea       @m68kde~1_151.L
00002DB2  5864      
00002DB4  4E92      4993          jsr       (A2)
00002DB6  584F      4994          addq.w    #4,A7
                    4995   ; printf("\r\n....................... begin reading");
00002DB8  4879 0000 4996          pea       @m68kde~1_156.L
00002DBC  5952      
00002DBE  4E92      4997          jsr       (A2)
00002DC0  584F      4998          addq.w    #4,A7
                    4999   ; switch (test_config) {
00002DC2  0C85 0000 5000          cmp.l     #2,D5
00002DC6  0002      
00002DC8  6700 0042 5001          beq       MemoryTest_36
00002DCC  6E0C      5002          bgt.s     MemoryTest_39
00002DCE  0C85 0000 5003          cmp.l     #1,D5
00002DD2  0001      
00002DD4  6712      5004          beq.s     MemoryTest_35
00002DD6  6000 007E 5005          bra       MemoryTest_33
                    5006   MemoryTest_39:
00002DDA  0C85 0000 5007          cmp.l     #3,D5
00002DDE  0003      
00002DE0  6700 0050 5008          beq       MemoryTest_37
00002DE4  6000 0070 5009          bra       MemoryTest_33
                    5010   MemoryTest_35:
                    5011   ; case 1: ReadMemoryForMemTest(start_val, end_val, Get2HexDigitsForMemTest(digit), 1);
00002DE8  4878 0001 5012          pea       1
00002DEC  2F00      5013          move.l    D0,-(A7)
00002DEE  4884      5014          ext.w     D4
00002DF0  48C4      5015          ext.l     D4
00002DF2  2F04      5016          move.l    D4,-(A7)
00002DF4  4E94      5017          jsr       (A4)
00002DF6  584F      5018          addq.w    #4,A7
00002DF8  2200      5019          move.l    D0,D1
00002DFA  201F      5020          move.l    (A7)+,D0
00002DFC  2F01      5021          move.l    D1,-(A7)
00002DFE  2F03      5022          move.l    D3,-(A7)
00002E00  2F02      5023          move.l    D2,-(A7)
00002E02  4E93      5024          jsr       (A3)
00002E04  DEFC 0010 5025          add.w     #16,A7
                    5026   ; break;
00002E08  6000 006C 5027          bra       MemoryTest_34
                    5028   MemoryTest_36:
                    5029   ; case 2: ReadMemoryForMemTest(start_val, end_val, Get4HexDigitsForMemTest(digit), 2);
00002E0C  4878 0002 5030          pea       2
00002E10  2F00      5031          move.l    D0,-(A7)
00002E12  4884      5032          ext.w     D4
00002E14  48C4      5033          ext.l     D4
00002E16  2F04      5034          move.l    D4,-(A7)
00002E18  4EB8 25AC 5035          jsr       _Get4HexDigitsForMemTest
00002E1C  584F      5036          addq.w    #4,A7
00002E1E  2200      5037          move.l    D0,D1
00002E20  201F      5038          move.l    (A7)+,D0
00002E22  2F01      5039          move.l    D1,-(A7)
00002E24  2F03      5040          move.l    D3,-(A7)
00002E26  2F02      5041          move.l    D2,-(A7)
00002E28  4E93      5042          jsr       (A3)
00002E2A  DEFC 0010 5043          add.w     #16,A7
                    5044   ; break;
00002E2E  6000 0046 5045          bra       MemoryTest_34
                    5046   MemoryTest_37:
                    5047   ; case 3: ReadMemoryForMemTest(start_val, end_val, Get8HexDigitsForMemTest(digit), 3);
00002E32  4878 0003 5048          pea       3
00002E36  2F00      5049          move.l    D0,-(A7)
00002E38  4884      5050          ext.w     D4
00002E3A  48C4      5051          ext.l     D4
00002E3C  2F04      5052          move.l    D4,-(A7)
00002E3E  4EB8 25FE 5053          jsr       _Get8HexDigitsForMemTest
00002E42  584F      5054          addq.w    #4,A7
00002E44  2200      5055          move.l    D0,D1
00002E46  201F      5056          move.l    (A7)+,D0
00002E48  2F01      5057          move.l    D1,-(A7)
00002E4A  2F03      5058          move.l    D3,-(A7)
00002E4C  2F02      5059          move.l    D2,-(A7)
00002E4E  4E93      5060          jsr       (A3)
00002E50  DEFC 0010 5061          add.w     #16,A7
                    5062   ; break;
00002E54  6020      5063          bra.s     MemoryTest_34
                    5064   MemoryTest_33:
                    5065   ; default: ReadMemoryForMemTest(start_val, end_val, Get2HexDigitsForMemTest(digit), 1);;
00002E56  4878 0001 5066          pea       1
00002E5A  2F00      5067          move.l    D0,-(A7)
00002E5C  4884      5068          ext.w     D4
00002E5E  48C4      5069          ext.l     D4
00002E60  2F04      5070          move.l    D4,-(A7)
00002E62  4E94      5071          jsr       (A4)
00002E64  584F      5072          addq.w    #4,A7
00002E66  2200      5073          move.l    D0,D1
00002E68  201F      5074          move.l    (A7)+,D0
00002E6A  2F01      5075          move.l    D1,-(A7)
00002E6C  2F03      5076          move.l    D3,-(A7)
00002E6E  2F02      5077          move.l    D2,-(A7)
00002E70  4E93      5078          jsr       (A3)
00002E72  DEFC 0010 5079          add.w     #16,A7
                    5080   MemoryTest_34:
                    5081   ; }
                    5082   ; printf("\r\nFinished reading from SRAM ...");
00002E76  4879 0000 5083          pea       @m68kde~1_157.L
00002E7A  597A      
00002E7C  4E92      5084          jsr       (A2)
00002E7E  584F      5085          addq.w    #4,A7
                    5086   ; printf("\r\nend of program ...");
00002E80  4879 0000 5087          pea       @m68kde~1_158.L
00002E84  599C      
00002E86  4E92      5088          jsr       (A2)
00002E88  584F      5089          addq.w    #4,A7
                    5090   ; printf("\r\n............................................................................................................");
00002E8A  4879 0000 5091          pea       @m68kde~1_151.L
00002E8E  5864      
00002E90  4E92      5092          jsr       (A2)
00002E92  584F      5093          addq.w    #4,A7
                    5094   ; printf("\r\n............................................................................................................");
00002E94  4879 0000 5095          pea       @m68kde~1_151.L
00002E98  5864      
00002E9A  4E92      5096          jsr       (A2)
00002E9C  584F      5097          addq.w    #4,A7
00002E9E  4CDF 3C7C 5098          movem.l   (A7)+,D2/D3/D4/D5/D6/A2/A3/A4/A5
00002EA2  4E5E      5099          unlk      A6
00002EA4  4E75      5100          rts
                    5101   ; }
                    5102   ; void main(void)
                    5103   ; {
                    5104   _main:
00002EA6  4E56 FFF4 5105          link      A6,#-12
00002EAA  48E7 3030 5106          movem.l   D2/D3/A2/A3,-(A7)
00002EAE  45F8 0A30 5107          lea       _InstallExceptionHandler.L,A2
00002EB2  47F9 0000 5108          lea       _printf.L,A3
00002EB6  3C04      
                    5109   ; char c ;
                    5110   ; int i, j ;
                    5111   ; char *BugMessage = "DE1-68k Bug V1.77";
00002EB8  41F9 0000 5112          lea       @m68kde~1_159.L,A0
00002EBC  59B2      
00002EBE  2608      5113          move.l    A0,D3
                    5114   ; char *CopyrightMessage = "Copyright (C) PJ Davies 2016";
00002EC0  41F9 0000 5115          lea       @m68kde~1_160.L,A0
00002EC4  59C4      
00002EC6  2D48 FFFC 5116          move.l    A0,-4(A6)
                    5117   ; KillAllBreakPoints() ;
00002ECA  4EB8 1C1A 5118          jsr       _KillAllBreakPoints
                    5119   ; i = x = y = z = PortA_Count = 0;
00002ECE  42B9 0803 5120          clr.l     _PortA_Count.L
00002ED2  00D4      
00002ED4  42B9 0803 5121          clr.l     _z.L
00002ED8  00D0      
00002EDA  42B9 0803 5122          clr.l     _y.L
00002EDE  00CC      
00002EE0  42B9 0803 5123          clr.l     _x.L
00002EE4  00C8      
00002EE6  4282      5124          clr.l     D2
                    5125   ; Trace = GoFlag = 0;                       // used in tracing/single stepping
00002EE8  42B9 0803 5126          clr.l     _GoFlag.L
00002EEC  00DC      
00002EEE  42B9 0803 5127          clr.l     _Trace.L
00002EF2  00D8      
                    5128   ; Echo = 1 ;
00002EF4  23FC 0000 5129          move.l    #1,_Echo.L
00002EF8  0001 0803 
00002EFC  00E0      
                    5130   ; d0=d1=d2=d3=d4=d5=d6=d7=0 ;
00002EFE  42B9 0803 5131          clr.l     _d7.L
00002F02  0100      
00002F04  42B9 0803 5132          clr.l     _d6.L
00002F08  00FC      
00002F0A  42B9 0803 5133          clr.l     _d5.L
00002F0E  00F8      
00002F10  42B9 0803 5134          clr.l     _d4.L
00002F14  00F4      
00002F16  42B9 0803 5135          clr.l     _d3.L
00002F1A  00F0      
00002F1C  42B9 0803 5136          clr.l     _d2.L
00002F20  00EC      
00002F22  42B9 0803 5137          clr.l     _d1.L
00002F26  00E8      
00002F28  42B9 0803 5138          clr.l     _d0.L
00002F2C  00E4      
                    5139   ; a0=a1=a2=a3=a4=a5=a6=0 ;
00002F2E  42B9 0803 5140          clr.l     _a6.L
00002F32  011C      
00002F34  42B9 0803 5141          clr.l     _a5.L
00002F38  0118      
00002F3A  42B9 0803 5142          clr.l     _a4.L
00002F3E  0114      
00002F40  42B9 0803 5143          clr.l     _a3.L
00002F44  0110      
00002F46  42B9 0803 5144          clr.l     _a2.L
00002F4A  010C      
00002F4C  42B9 0803 5145          clr.l     _a1.L
00002F50  0108      
00002F52  42B9 0803 5146          clr.l     _a0.L
00002F56  0104      
                    5147   ; PC = ProgramStart, SSP=TopOfStack, USP = TopOfStack;
00002F58  23FC 0800 5148          move.l    #134217728,_PC.L
00002F5C  0000 0803 
00002F60  0120      
00002F62  23FC 0804 5149          move.l    #134479872,_SSP.L
00002F66  0000 0803 
00002F6A  0124      
00002F6C  23FC 0804 5150          move.l    #134479872,_USP.L
00002F70  0000 0803 
00002F74  0128      
                    5151   ; SR = 0x2000;                            // clear interrupts enable tracing  uses IRQ6
00002F76  33FC 2000 5152          move.w    #8192,_SR.L
00002F7A  0803 012C 
                    5153   ; // Initialise Breakpoint variables
                    5154   ; for(i = 0; i < 8; i++)  {
00002F7E  4282      5155          clr.l     D2
                    5156   main_1:
00002F80  0C82 0000 5157          cmp.l     #8,D2
00002F84  0008      
00002F86  6C00 004C 5158          bge       main_3
                    5159   ; BreakPointAddress[i] = 0;               //array of 8 breakpoint addresses
00002F8A  2002      5160          move.l    D2,D0
00002F8C  E588      5161          lsl.l     #2,D0
00002F8E  41F9 0803 5162          lea       _BreakPointAddress.L,A0
00002F92  012E      
00002F94  42B0 0800 5163          clr.l     0(A0,D0.L)
                    5164   ; WatchPointAddress[i] = 0 ;
00002F98  2002      5165          move.l    D2,D0
00002F9A  E588      5166          lsl.l     #2,D0
00002F9C  41F9 0803 5167          lea       _WatchPointAddress.L,A0
00002FA0  0182      
00002FA2  42B0 0800 5168          clr.l     0(A0,D0.L)
                    5169   ; BreakPointInstruction[i] = 0;           // to hold the instruction at the break point
00002FA6  2002      5170          move.l    D2,D0
00002FA8  E388      5171          lsl.l     #1,D0
00002FAA  41F9 0803 5172          lea       _BreakPointInstruction.L,A0
00002FAE  014E      
00002FB0  4270 0800 5173          clr.w     0(A0,D0.L)
                    5174   ; BreakPointSetOrCleared[i] = 0;          // indicates if break point set
00002FB4  2002      5175          move.l    D2,D0
00002FB6  E588      5176          lsl.l     #2,D0
00002FB8  41F9 0803 5177          lea       _BreakPointSetOrCleared.L,A0
00002FBC  015E      
00002FBE  42B0 0800 5178          clr.l     0(A0,D0.L)
                    5179   ; WatchPointSetOrCleared[i] = 0;
00002FC2  2002      5180          move.l    D2,D0
00002FC4  E588      5181          lsl.l     #2,D0
00002FC6  41F9 0803 5182          lea       _WatchPointSetOrCleared.L,A0
00002FCA  01A2      
00002FCC  42B0 0800 5183          clr.l     0(A0,D0.L)
00002FD0  5282      5184          addq.l    #1,D2
00002FD2  60AC      5185          bra       main_1
                    5186   main_3:
                    5187   ; }
                    5188   ; Init_RS232() ;     // initialise the RS232 port
00002FD4  4EB8 0B12 5189          jsr       _Init_RS232
                    5190   ; Init_LCD() ;
00002FD8  4EB8 095E 5191          jsr       _Init_LCD
                    5192   ; for( i = 32; i < 48; i++)
00002FDC  7420      5193          moveq     #32,D2
                    5194   main_4:
00002FDE  0C82 0000 5195          cmp.l     #48,D2
00002FE2  0030      
00002FE4  6C0E      5196          bge.s     main_6
                    5197   ; InstallExceptionHandler(UnhandledTrap, i) ;		        // install Trap exception handler on vector 32-47
00002FE6  2F02      5198          move.l    D2,-(A7)
00002FE8  4878 2492 5199          pea       _UnhandledTrap.L
00002FEC  4E92      5200          jsr       (A2)
00002FEE  504F      5201          addq.w    #8,A7
00002FF0  5282      5202          addq.l    #1,D2
00002FF2  60EA      5203          bra       main_4
                    5204   main_6:
                    5205   ; InstallExceptionHandler(menu, 47) ;		                   // TRAP #15 call debug and end program
00002FF4  4878 002F 5206          pea       47
00002FF8  4878 216C 5207          pea       _menu.L
00002FFC  4E92      5208          jsr       (A2)
00002FFE  504F      5209          addq.w    #8,A7
                    5210   ; InstallExceptionHandler(UnhandledIRQ1, 25) ;		      // install handler for interrupts
00003000  4878 0019 5211          pea       25
00003004  4878 2438 5212          pea       _UnhandledIRQ1.L
00003008  4E92      5213          jsr       (A2)
0000300A  504F      5214          addq.w    #8,A7
                    5215   ; InstallExceptionHandler(UnhandledIRQ2, 26) ;		      // install handler for interrupts
0000300C  4878 001A 5216          pea       26
00003010  4878 2444 5217          pea       _UnhandledIRQ2.L
00003014  4E92      5218          jsr       (A2)
00003016  504F      5219          addq.w    #8,A7
                    5220   ; InstallExceptionHandler(UnhandledIRQ3, 27) ;		      // install handler for interrupts
00003018  4878 001B 5221          pea       27
0000301C  4878 2450 5222          pea       _UnhandledIRQ3.L
00003020  4E92      5223          jsr       (A2)
00003022  504F      5224          addq.w    #8,A7
                    5225   ; InstallExceptionHandler(UnhandledIRQ4, 28) ;		      // install handler for interrupts
00003024  4878 001C 5226          pea       28
00003028  4878 245C 5227          pea       _UnhandledIRQ4.L
0000302C  4E92      5228          jsr       (A2)
0000302E  504F      5229          addq.w    #8,A7
                    5230   ; InstallExceptionHandler(UnhandledIRQ5, 29) ;		      // install handler for interrupts
00003030  4878 001D 5231          pea       29
00003034  4878 2468 5232          pea       _UnhandledIRQ5.L
00003038  4E92      5233          jsr       (A2)
0000303A  504F      5234          addq.w    #8,A7
                    5235   ; InstallExceptionHandler(UnhandledIRQ6, 30) ;		      // install handler for interrupts
0000303C  4878 001E 5236          pea       30
00003040  4878 2474 5237          pea       _UnhandledIRQ6.L
00003044  4E92      5238          jsr       (A2)
00003046  504F      5239          addq.w    #8,A7
                    5240   ; InstallExceptionHandler(UnhandledIRQ7, 31) ;		      // install handler for interrupts
00003048  4878 001F 5241          pea       31
0000304C  4878 2486 5242          pea       _UnhandledIRQ7.L
00003050  4E92      5243          jsr       (A2)
00003052  504F      5244          addq.w    #8,A7
                    5245   ; InstallExceptionHandler(HandleBreakPoint, 46) ;		           // install Trap 14 Break Point exception handler on vector 46
00003054  4878 002E 5246          pea       46
00003058  4878 1EA8 5247          pea       _HandleBreakPoint.L
0000305C  4E92      5248          jsr       (A2)
0000305E  504F      5249          addq.w    #8,A7
                    5250   ; InstallExceptionHandler(DumpRegistersandPause, 29) ;		   // install TRACE handler for IRQ5 on vector 29
00003060  4878 001D 5251          pea       29
00003064  4878 1588 5252          pea       _DumpRegistersandPause.L
00003068  4E92      5253          jsr       (A2)
0000306A  504F      5254          addq.w    #8,A7
                    5255   ; InstallExceptionHandler(BusError,2) ;                          // install Bus error handler
0000306C  4878 0002 5256          pea       2
00003070  4878 24A0 5257          pea       _BusError.L
00003074  4E92      5258          jsr       (A2)
00003076  504F      5259          addq.w    #8,A7
                    5260   ; InstallExceptionHandler(AddressError,3) ;                      // install address error handler (doesn't work on soft core 68k implementation)
00003078  4878 0003 5261          pea       3
0000307C  4878 24AE 5262          pea       _AddressError.L
00003080  4E92      5263          jsr       (A2)
00003082  504F      5264          addq.w    #8,A7
                    5265   ; InstallExceptionHandler(IllegalInstruction,4) ;                // install illegal instruction exception handler
00003084  4878 0004 5266          pea       4
00003088  4878 24BC 5267          pea       _IllegalInstruction.L
0000308C  4E92      5268          jsr       (A2)
0000308E  504F      5269          addq.w    #8,A7
                    5270   ; InstallExceptionHandler(Dividebyzero,5) ;                      // install /0 exception handler
00003090  4878 0005 5271          pea       5
00003094  4878 24CA 5272          pea       _Dividebyzero.L
00003098  4E92      5273          jsr       (A2)
0000309A  504F      5274          addq.w    #8,A7
                    5275   ; InstallExceptionHandler(Check,6) ;                             // install check instruction exception handler
0000309C  4878 0006 5276          pea       6
000030A0  4878 24D8 5277          pea       _Check.L
000030A4  4E92      5278          jsr       (A2)
000030A6  504F      5279          addq.w    #8,A7
                    5280   ; InstallExceptionHandler(Trapv,7) ;                             // install trapv instruction exception handler
000030A8  4878 0007 5281          pea       7
000030AC  4878 24E6 5282          pea       _Trapv.L
000030B0  4E92      5283          jsr       (A2)
000030B2  504F      5284          addq.w    #8,A7
                    5285   ; InstallExceptionHandler(PrivError,8) ;                         // install Priv Violation exception handler
000030B4  4878 0008 5286          pea       8
000030B8  4878 24F4 5287          pea       _PrivError.L
000030BC  4E92      5288          jsr       (A2)
000030BE  504F      5289          addq.w    #8,A7
                    5290   ; InstallExceptionHandler(UnitIRQ,15) ;                          // install uninitialised IRQ exception handler
000030C0  4878 000F 5291          pea       15
000030C4  4878 2502 5292          pea       _UnitIRQ.L
000030C8  4E92      5293          jsr       (A2)
000030CA  504F      5294          addq.w    #8,A7
                    5295   ; InstallExceptionHandler(Check,24) ;                            // install spurious IRQ exception handler
000030CC  4878 0018 5296          pea       24
000030D0  4878 24D8 5297          pea       _Check.L
000030D4  4E92      5298          jsr       (A2)
000030D6  504F      5299          addq.w    #8,A7
                    5300   ; FlushKeyboard() ;                        // dump unread characters from keyboard
000030D8  4EB8 0BA6 5301          jsr       _FlushKeyboard
                    5302   ; TraceException = 0 ;                     // clear trace exception port to remove any software generated single step/trace
000030DC  4239 0040 5303          clr.b     4194314
000030E0  000A      
                    5304   ; // test for auto flash boot and run from Flash by reading switch 9 on DE1-soc board. If set, copy program from flash into Dram and run
                    5305   ; while(((char)(PortB & 0x02)) == (char)(0x02))    {
                    5306   main_7:
000030E2  1039 0040 5307          move.b    4194306,D0
000030E6  0002      
000030E8  C03C 0002 5308          and.b     #2,D0
000030EC  0C00 0002 5309          cmp.b     #2,D0
000030F0  662A      5310          bne.s     main_9
                    5311   ; LoadFromFlashChip();
000030F2  4EB8 10C4 5312          jsr       _LoadFromFlashChip
                    5313   ; printf("\r\nRunning.....") ;
000030F6  4879 0000 5314          pea       @m68kde~1_161.L
000030FA  59E2      
000030FC  4E93      5315          jsr       (A3)
000030FE  584F      5316          addq.w    #4,A7
                    5317   ; Oline1("Running.....") ;
00003100  4879 0000 5318          pea       @m68kde~1_162.L
00003104  59F2      
00003106  4EB8 0A02 5319          jsr       _Oline1
0000310A  584F      5320          addq.w    #4,A7
                    5321   ; GoFlag = 1;
0000310C  23FC 0000 5322          move.l    #1,_GoFlag.L
00003110  0001 0803 
00003114  00DC      
                    5323   ; go() ;
00003116  4EB8 08B8 5324          jsr       _go
0000311A  60C6      5325          bra       main_7
                    5326   main_9:
                    5327   ; }
                    5328   ; // otherwise start the debug monitor
                    5329   ; Oline0(BugMessage) ;
0000311C  2F03      5330          move.l    D3,-(A7)
0000311E  4EB8 09D4 5331          jsr       _Oline0
00003122  584F      5332          addq.w    #4,A7
                    5333   ; Oline1("By: PJ Davies") ;
00003124  4879 0000 5334          pea       @m68kde~1_163.L
00003128  5A00      
0000312A  4EB8 0A02 5335          jsr       _Oline1
0000312E  584F      5336          addq.w    #4,A7
                    5337   ; printf("\r\n%s", BugMessage) ;
00003130  2F03      5338          move.l    D3,-(A7)
00003132  4879 0000 5339          pea       @m68kde~1_164.L
00003136  5A0E      
00003138  4E93      5340          jsr       (A3)
0000313A  504F      5341          addq.w    #8,A7
                    5342   ; printf("\r\n%s", CopyrightMessage) ;
0000313C  2F2E FFFC 5343          move.l    -4(A6),-(A7)
00003140  4879 0000 5344          pea       @m68kde~1_164.L
00003144  5A0E      
00003146  4E93      5345          jsr       (A3)
00003148  504F      5346          addq.w    #8,A7
                    5347   ; printf("\r\nNancy Makar - 33464918 and Steven Chin - 40108540");
0000314A  4879 0000 5348          pea       @m68kde~1_165.L
0000314E  5A14      
00003150  4E93      5349          jsr       (A3)
00003152  584F      5350          addq.w    #4,A7
                    5351   ; menu();
00003154  4EB8 216C 5352          jsr       _menu
00003158  4CDF 0C0C 5353          movem.l   (A7)+,D2/D3/A2/A3
0000315C  4E5E      5354          unlk      A6
0000315E  4E75      5355          rts
                    5356   ; }
                    5357   _strcpy:
00003160  206F 0004 5358          move.l    (4,A7),A0
00003164  226F 0008 5359          move.l    (8,A7),A1
00003168  2008      5360          move.l    A0,D0
                    5361   strcpy_1:
0000316A  10D9      5362          move.b    (A1)+,(A0)+
0000316C  66FC      5363          bne       strcpy_1
0000316E  4E75      5364          rts
                    5365   ULDIV:
00003170  4E56 0000 5366          link    A6,#0
00003174  48E7 C000 5367          movem.l D0/D1,-(A7)
00003178  222E 0008 5368          move.l  8(A6),D1
0000317C  202E 000C 5369          move.l  12(A6),D0
00003180  6036      5370          bra.s   ldiv_3
                    5371   LDIV:
00003182  4E56 0000 5372          link    A6,#0
00003186  48E7 C000 5373          movem.l D0/D1,-(A7)
0000318A  222E 0008 5374          move.l  8(A6),D1
0000318E  202E 000C 5375          move.l  12(A6),D0
00003192  4A80      5376          tst.l   D0
00003194  6A0E      5377          bpl.s   ldiv_1
00003196  4480      5378          neg.l   D0
00003198  4A81      5379          tst.l   D1
0000319A  6A14      5380          bpl.s   ldiv_2
0000319C  4481      5381          neg.l   D1
0000319E  612A      5382          bsr.s   dodiv
000031A0  4481      5383          neg.l   D1
000031A2  6016      5384          bra.s   ldiv_4
                    5385   ldiv_1:
000031A4  4A81      5386          tst.l   D1
000031A6  6A10      5387          bpl.s   ldiv_3
000031A8  4481      5388          neg.l   D1
000031AA  611E      5389          bsr.s   dodiv
000031AC  4480      5390          neg.l   D0
000031AE  600A      5391          bra.s   ldiv_4
                    5392   ldiv_2:
000031B0  6118      5393          bsr.s   dodiv
000031B2  4480      5394          neg.l   D0
000031B4  4481      5395          neg.l   D1
000031B6  6002      5396          bra.s   ldiv_4
                    5397   ldiv_3:
000031B8  6110      5398          bsr.s   dodiv
                    5399   ldiv_4:
000031BA  2D40 0008 5400          move.l  D0,8(A6)
000031BE  2D41 000C 5401          move.l  D1,12(A6)
000031C2  4CDF 0003 5402          movem.l (A7)+,D0/D1
000031C6  4E5E      5403          unlk    A6
000031C8  4E75      5404          rts
                    5405   dodiv:
000031CA  0C81 0000 5406          cmpi.l  #$FFFF,D1
000031CE  FFFF      
000031D0  6236      5407          bhi.s   dodiv_2
000031D2  0C80 0000 5408          cmpi.l  #$FFFF,D0
000031D6  FFFF      
000031D8  6210      5409          bhi.s   dodiv_1
000031DA  80C1      5410          divu    D1,D0
000031DC  2200      5411          move.l  D0,D1
000031DE  4241      5412          clr.w   D1
000031E0  4841      5413          swap    D1
000031E2  0280 0000 5414          andi.l  #$FFFF,D0
000031E6  FFFF      
000031E8  4E75      5415          rts
                    5416   dodiv_1:
000031EA  48A7 A000 5417          movem.w D0/D2,-(A7)
000031EE  4240      5418          clr.w   D0
000031F0  4840      5419          swap    D0
000031F2  80C1      5420          divu    D1,D0
000031F4  3400      5421          move.w  D0,D2
000031F6  301F      5422          move.w  (A7)+,D0
000031F8  80C1      5423          divu    D1,D0
000031FA  4840      5424          swap    D0
000031FC  4281      5425          clr.l   D1
000031FE  3200      5426          move.w  D0,D1
00003200  3002      5427          move.w  D2,D0
00003202  4840      5428          swap    D0
00003204  341F      5429          move.w  (A7)+,D2
00003206  4E75      5430          rts
                    5431   dodiv_2:
00003208  48E7 3800 5432          movem.l D2/D3/D4,-(A7)
0000320C  2401      5433          move.l  D1,D2
0000320E  4242      5434          clr.w   D2
00003210  4842      5435          swap    D2
00003212  5282      5436          addq.l  #1,D2
00003214  2600      5437          move.l  D0,D3
00003216  2801      5438          move.l  D1,D4
00003218  2202      5439          move.l  D2,D1
0000321A  61CE      5440          bsr.s   dodiv_1
0000321C  2204      5441          move.l  D4,D1
0000321E  82C2      5442          divu    D2,D1
00003220  80C1      5443          divu    D1,D0
00003222  0280 0000 5444          andi.l  #$FFFF,D0
00003226  FFFF      
                    5445   dodiv_3:
00003228  2204      5446          move.l  D4,D1
0000322A  2404      5447          move.l  D4,D2
0000322C  4842      5448          swap    D2
0000322E  C2C0      5449          mulu    D0,D1
00003230  C4C0      5450          mulu    D0,D2
00003232  4842      5451          swap    D2
00003234  D282      5452          add.l   D2,D1
00003236  9283      5453          sub.l   D3,D1
00003238  620A      5454          bhi.s   dodiv_4
0000323A  4481      5455          neg.l   D1
0000323C  B881      5456          cmp.l   D1,D4
0000323E  6208      5457          bhi.s   dodiv_5
00003240  5280      5458          addq.l  #1,D0
00003242  60E4      5459          bra.s   dodiv_3
                    5460   dodiv_4:
00003244  5380      5461          subq.l  #1,D0
00003246  60E0      5462          bra.s   dodiv_3
                    5463   dodiv_5:
00003248  4CDF 001C 5464          movem.l (A7)+,D2/D3/D4
0000324C  4E75      5465          rts
                    5466   _strlen:
0000324E  206F 0004 5467          move.l    (4,A7),A0
00003252  2248      5468          move.l    A0,A1
                    5469   strlen_1:
00003254  4A19      5470          tst.b     (A1)+
00003256  66FC      5471          bne       strlen_1
00003258  2009      5472          move.l    A1,D0
0000325A  9088      5473          sub.l     A0,D0
0000325C  5380      5474          subq.l    #1,D0
0000325E  4E75      5475          rts
                    5476   _putch:
00003260  4E56 0000 5477          link      A6,#0
00003264  48E7 2000 5478          movem.l   D2,-(A7)
00003268  242E 0008 5479          move.l    8(A6),D2
0000326C  0C82 0000 5480          cmp.l     #10,D2
00003270  000A      
00003272  660A      5481          bne.s     putch_1
00003274  4878 000D 5482          pea       13
00003278  6100 D8C2 5483          bsr       __putch
0000327C  584F      5484          addq.w    #4,A7
                    5485   putch_1:
0000327E  2F02      5486          move.l    D2,-(A7)
00003280  6100 D8BA 5487          bsr       __putch
00003284  584F      5488          addq.w    #4,A7
00003286  2002      5489          move.l    D2,D0
00003288  4CDF 0004 5490          movem.l   (A7)+,D2
0000328C  4E5E      5491          unlk      A6
0000328E  4E75      5492          rts
                    5493   _getch:
00003290  48E7 2000 5494          movem.l   D2,-(A7)
00003294  2439 0803 5495          move.l    __ungetbuf,D2
00003298  00C0      
0000329A  2039 0803 5496          move.l    __ungetbuf,D0
0000329E  00C0      
000032A0  0C80 FFFF 5497          cmp.l     #-1,D0
000032A4  FFFF      
000032A6  670C      5498          beq.s     getch_1
000032A8  23FC FFFF 5499          move.l    #-1,__ungetbuf
000032AC  FFFF 0803 
000032B0  00C0      
000032B2  6010      5500          bra.s     getch_3
                    5501   getch_1:
000032B4  6100 D8B2 5502          bsr       __getch
000032B8  2400      5503          move.l    D0,D2
000032BA  0C80 0000 5504          cmp.l     #13,D0
000032BE  000D      
000032C0  6602      5505          bne.s     getch_3
000032C2  740A      5506          moveq     #10,D2
                    5507   getch_3:
000032C4  2002      5508          move.l    D2,D0
000032C6  4CDF 0004 5509          movem.l   (A7)+,D2
000032CA  4E75      5510          rts
                    5511   _tolower:
000032CC  4E56 0000 5512          link      A6,#0
000032D0  48E7 2000 5513          movem.l   D2,-(A7)
000032D4  242E 0008 5514          move.l    8(A6),D2
000032D8  0C82 0000 5515          cmp.l     #65,D2
000032DC  0041      
000032DE  6D0E      5516          blt.s     tolower_1
000032E0  0C82 0000 5517          cmp.l     #90,D2
000032E4  005A      
000032E6  6E06      5518          bgt.s     tolower_1
000032E8  84BC 0000 5519          or.l      #32,D2
000032EC  0020      
                    5520   tolower_1:
000032EE  2002      5521          move.l    D2,D0
000032F0  4CDF 0004 5522          movem.l   (A7)+,D2
000032F4  4E5E      5523          unlk      A6
000032F6  4E75      5524          rts
                    5525   _sprintf:
000032F8  4E56 FFFC 5526          link      A6,#-4
000032FC  48E7 2000 5527          movem.l   D2,-(A7)
00003300  41EE 000C 5528          lea       12(A6),A0
00003304  5848      5529          addq.w    #4,A0
00003306  2408      5530          move.l    A0,D2
00003308  2F02      5531          move.l    D2,-(A7)
0000330A  2F2E 000C 5532          move.l    12(A6),-(A7)
0000330E  2F2E 0008 5533          move.l    8(A6),-(A7)
00003312  6100 09D4 5534          bsr       _vsprintf
00003316  DEFC 000C 5535          add.w     #12,A7
0000331A  2D40 FFFC 5536          move.l    D0,-4(A6)
0000331E  4282      5537          clr.l     D2
00003320  202E FFFC 5538          move.l    -4(A6),D0
00003324  4CDF 0004 5539          movem.l   (A7)+,D2
00003328  4E5E      5540          unlk      A6
0000332A  4E75      5541          rts
                    5542   _strcat:
0000332C  206F 0004 5543          move.l    (4,A7),A0	
00003330  226F 0008 5544          move.l    (8,A7),A1	
00003334  2008      5545          move.l    A0,D0		
                    5546   strcat_0:
00003336  4A18      5547          tst.b     (A0)+
00003338  66FC      5548          bne       strcat_0
0000333A  5348      5549          subq      #1,A0
                    5550   strcat_1:
0000333C  10D9      5551          move.b    (A1)+,(A0)+
0000333E  66FC      5552          bne       strcat_1
00003340  4E75      5553          rts
                    5554   _toupper:
00003342  4E56 0000 5555          link      A6,#0
00003346  48E7 2000 5556          movem.l   D2,-(A7)
0000334A  242E 0008 5557          move.l    8(A6),D2
0000334E  0C82 0000 5558          cmp.l     #97,D2
00003352  0061      
00003354  6D0E      5559          blt.s     toupper_1
00003356  0C82 0000 5560          cmp.l     #122,D2
0000335A  007A      
0000335C  6E06      5561          bgt.s     toupper_1
0000335E  C4BC 0000 5562          and.l     #95,D2
00003362  005F      
                    5563   toupper_1:
00003364  2002      5564          move.l    D2,D0
00003366  4CDF 0004 5565          movem.l   (A7)+,D2
0000336A  4E5E      5566          unlk      A6
0000336C  4E75      5567          rts
                    5568   @vsscanf_scanread:
0000336E  4E56 FFFC 5569          link      A6,#-4
00003372  48E7 0020 5570          movem.l   A2,-(A7)
00003376  45F9 0000 5571          lea       @vsscanf_bufx,A2
0000337A  5A48      
0000337C  4AAE 0008 5572          tst.l     8(A6)
00003380  6722      5573          beq.s     @vsscanf_scanread_1
00003382  206E 0008 5574          move.l    8(A6),A0
00003386  58AE 0008 5575          addq.l    #4,8(A6)
0000338A  2050      5576          move.l    (A0),A0
0000338C  1010      5577          move.b    (A0),D0
0000338E  4880      5578          ext.w     D0
00003390  48C0      5579          ext.l     D0
00003392  2D40 FFFC 5580          move.l    D0,-4(A6)
00003396  6706      5581          beq.s     @vsscanf_scanread_3
00003398  202E FFFC 5582          move.l    -4(A6),D0
0000339C  6002      5583          bra.s     @vsscanf_scanread_4
                    5584   @vsscanf_scanread_3:
0000339E  70FF      5585          moveq     #-1,D0
                    5586   @vsscanf_scanread_4:
000033A0  6000 0032 5587          bra       @vsscanf_scanread_5
                    5588   @vsscanf_scanread_1:
000033A4  2052      5589          move.l    (A2),A0
000033A6  1010      5590          move.b    (A0),D0
000033A8  6620      5591          bne.s     @vsscanf_scanread_6
000033AA  4879 0803 5592          pea       @vsscanf_buf
000033AE  0546      
000033B0  6100 1038 5593          bsr       _gets
000033B4  584F      5594          addq.w    #4,A7
000033B6  2480      5595          move.l    D0,(A2)
000033B8  4879 0000 5596          pea       @vsscanf_1
000033BC  5A4C      
000033BE  4879 0803 5597          pea       @vsscanf_buf
000033C2  0546      
000033C4  6100 FF66 5598          bsr       _strcat
000033C8  504F      5599          addq.w    #8,A7
                    5600   @vsscanf_scanread_6:
000033CA  2052      5601          move.l    (A2),A0
000033CC  5292      5602          addq.l    #1,(A2)
000033CE  1010      5603          move.b    (A0),D0
000033D0  4880      5604          ext.w     D0
000033D2  48C0      5605          ext.l     D0
                    5606   @vsscanf_scanread_5:
000033D4  4CDF 0400 5607          movem.l   (A7)+,A2
000033D8  4E5E      5608          unlk      A6
000033DA  4E75      5609          rts
                    5610   @vsscanf_scanputback:
000033DC  4E56 0000 5611          link      A6,#0
000033E0  48E7 3000 5612          movem.l   D2/D3,-(A7)
000033E4  242E 000C 5613          move.l    12(A6),D2
000033E8  262E 0008 5614          move.l    8(A6),D3
000033EC  6718      5615          beq.s     @vsscanf_scanputback_1
000033EE  0C82 FFFF 5616          cmp.l     #-1,D2
000033F2  FFFF      
000033F4  670A      5617          beq.s     @vsscanf_scanputback_3
000033F6  5983      5618          subq.l    #4,D3
000033F8  2043      5619          move.l    D3,A0
000033FA  2050      5620          move.l    (A0),A0
000033FC  1082      5621          move.b    D2,(A0)
000033FE  6004      5622          bra.s     @vsscanf_scanputback_4
                    5623   @vsscanf_scanputback_3:
00003400  2043      5624          move.l    D3,A0
00003402  5390      5625          subq.l    #1,(A0)
                    5626   @vsscanf_scanputback_4:
00003404  602E      5627          bra.s     @vsscanf_scanputback_6
                    5628   @vsscanf_scanputback_1:
00003406  41F9 0803 5629          lea       @vsscanf_buf,A0
0000340A  0546      
0000340C  2008      5630          move.l    A0,D0
0000340E  B0B9 0000 5631          cmp.l     @vsscanf_bufx,D0
00003412  5A48      
00003414  6610      5632          bne.s     @vsscanf_scanputback_5
00003416  4239 0803 5633          clr.b     @vsscanf_buf
0000341A  0546      
0000341C  2F02      5634          move.l    D2,-(A7)
0000341E  6100 103C 5635          bsr       _ungetch
00003422  584F      5636          addq.w    #4,A7
00003424  600E      5637          bra.s     @vsscanf_scanputback_6
                    5638   @vsscanf_scanputback_5:
00003426  53B9 0000 5639          subq.l    #1,@vsscanf_bufx
0000342A  5A48      
0000342C  2079 0000 5640          move.l    @vsscanf_bufx,A0
00003430  5A48      
00003432  1082      5641          move.b    D2,(A0)
                    5642   @vsscanf_scanputback_6:
00003434  2002      5643          move.l    D2,D0
00003436  4CDF 000C 5644          movem.l   (A7)+,D2/D3
0000343A  4E5E      5645          unlk      A6
0000343C  4E75      5646          rts
                    5647   @vsscanf_scanspace:
0000343E  4E56 0000 5648          link      A6,#0
00003442  48E7 2000 5649          movem.l   D2,-(A7)
                    5650   @vsscanf_scanspace_1:
00003446  2F2E 0008 5651          move.l    8(A6),-(A7)
0000344A  6100 FF22 5652          bsr       @vsscanf_scanread
0000344E  584F      5653          addq.w    #4,A7
00003450  2400      5654          move.l    D0,D2
00003452  206E 000C 5655          move.l    12(A6),A0
00003456  5290      5656          addq.l    #1,(A0)
00003458  2042      5657          move.l    D2,A0
0000345A  43F9 0000 5658          lea       __ctype,A1
0000345E  5A4E      
00003460  1030 9801 5659          move.b    1(A0,A1.L),D0
00003464  C03C 0010 5660          and.b     #16,D0
00003468  66DC      5661          bne       @vsscanf_scanspace_1
0000346A  2002      5662          move.l    D2,D0
0000346C  4CDF 0004 5663          movem.l   (A7)+,D2
00003470  4E5E      5664          unlk      A6
00003472  4E75      5665          rts
                    5666   @vsscanf_scanselect:
00003474  4E56 0000 5667          link      A6,#0
00003478  48E7 3F20 5668          movem.l   D2/D3/D4/D5/D6/D7/A2,-(A7)
0000347C  262E 000C 5669          move.l    12(A6),D3
00003480  2C2E 0018 5670          move.l    24(A6),D6
00003484  2E2E 0014 5671          move.l    20(A6),D7
00003488  2043      5672          move.l    D3,A0
0000348A  1010      5673          move.b    (A0),D0
0000348C  4880      5674          ext.w     D0
0000348E  48C0      5675          ext.l     D0
00003490  0C80 0000 5676          cmp.l     #94,D0
00003494  005E      
00003496  6608      5677          bne.s     @vsscanf_scanselect_1
00003498  347C 0001 5678          move.w    #1,A2
0000349C  5283      5679          addq.l    #1,D3
0000349E  6004      5680          bra.s     @vsscanf_scanselect_2
                    5681   @vsscanf_scanselect_1:
000034A0  347C 0000 5682          move.w    #0,A2
                    5683   @vsscanf_scanselect_2:
000034A4  202E 0010 5684          move.l    16(A6),D0
000034A8  53AE 0010 5685          subq.l    #1,16(A6)
000034AC  4A80      5686          tst.l     D0
000034AE  6700 0108 5687          beq       @vsscanf_scanselect_5
000034B2  2F2E 0008 5688          move.l    8(A6),-(A7)
000034B6  6100 FEB6 5689          bsr       @vsscanf_scanread
000034BA  584F      5690          addq.w    #4,A7
000034BC  2800      5691          move.l    D0,D4
000034BE  0C84 FFFF 5692          cmp.l     #-1,D4
000034C2  FFFF      
000034C4  6604      5693          bne.s     @vsscanf_scanselect_6
000034C6  6000 00F0 5694          bra       @vsscanf_scanselect_5
                    5695   @vsscanf_scanselect_6:
000034CA  206E 001C 5696          move.l    28(A6),A0
000034CE  5290      5697          addq.l    #1,(A0)
000034D0  4285      5698          clr.l     D5
000034D2  4282      5699          clr.l     D2
                    5700   @vsscanf_scanselect_8:
000034D4  2043      5701          move.l    D3,A0
000034D6  1030 2800 5702          move.b    0(A0,D2.L),D0
000034DA  4880      5703          ext.w     D0
000034DC  48C0      5704          ext.l     D0
000034DE  0C80 0000 5705          cmp.l     #93,D0
000034E2  005D      
000034E4  6700 008E 5706          beq       @vsscanf_scanselect_10
000034E8  4A82      5707          tst.l     D2
000034EA  6716      5708          beq.s     @vsscanf_scanselect_11
000034EC  2043      5709          move.l    D3,A0
000034EE  1030 2800 5710          move.b    0(A0,D2.L),D0
000034F2  4880      5711          ext.w     D0
000034F4  48C0      5712          ext.l     D0
000034F6  0C80 0000 5713          cmp.l     #93,D0
000034FA  005D      
000034FC  6604      5714          bne.s     @vsscanf_scanselect_11
000034FE  6000 0074 5715          bra       @vsscanf_scanselect_10
                    5716   @vsscanf_scanselect_11:
00003502  4A82      5717          tst.l     D2
00003504  6700 0058 5718          beq       @vsscanf_scanselect_15
00003508  2043      5719          move.l    D3,A0
0000350A  1030 2800 5720          move.b    0(A0,D2.L),D0
0000350E  4880      5721          ext.w     D0
00003510  48C0      5722          ext.l     D0
00003512  0C80 0000 5723          cmp.l     #45,D0
00003516  002D      
00003518  6600 0044 5724          bne       @vsscanf_scanselect_15
0000351C  2043      5725          move.l    D3,A0
0000351E  2002      5726          move.l    D2,D0
00003520  5380      5727          subq.l    #1,D0
00003522  2243      5728          move.l    D3,A1
00003524  2F08      5729          move.l    A0,-(A7)
00003526  2042      5730          move.l    D2,A0
00003528  1230 0800 5731          move.b    0(A0,D0.L),D1
0000352C  B230 9801 5732          cmp.b     1(A0,A1.L),D1
00003530  6C00 002C 5733          bge       @vsscanf_scanselect_15
00003534  205F      5734          move.l    (A7)+,A0
00003536  2043      5735          move.l    D3,A0
00003538  2002      5736          move.l    D2,D0
0000353A  5380      5737          subq.l    #1,D0
0000353C  1030 0800 5738          move.b    0(A0,D0.L),D0
00003540  4880      5739          ext.w     D0
00003542  48C0      5740          ext.l     D0
00003544  B880      5741          cmp.l     D0,D4
00003546  6D12      5742          blt.s     @vsscanf_scanselect_17
00003548  2043      5743          move.l    D3,A0
0000354A  2242      5744          move.l    D2,A1
0000354C  1031 8801 5745          move.b    1(A1,A0.L),D0
00003550  4880      5746          ext.w     D0
00003552  48C0      5747          ext.l     D0
00003554  B880      5748          cmp.l     D0,D4
00003556  6E02      5749          bgt.s     @vsscanf_scanselect_17
00003558  601A      5750          bra.s     @vsscanf_scanselect_10
                    5751   @vsscanf_scanselect_17:
0000355A  5282      5752          addq.l    #1,D2
0000355C  6010      5753          bra.s     @vsscanf_scanselect_19
                    5754   @vsscanf_scanselect_15:
0000355E  2043      5755          move.l    D3,A0
00003560  1030 2800 5756          move.b    0(A0,D2.L),D0
00003564  4880      5757          ext.w     D0
00003566  48C0      5758          ext.l     D0
00003568  B880      5759          cmp.l     D0,D4
0000356A  6602      5760          bne.s     @vsscanf_scanselect_19
0000356C  6006      5761          bra.s     @vsscanf_scanselect_10
                    5762   @vsscanf_scanselect_19:
0000356E  5282      5763          addq.l    #1,D2
00003570  6000 FF62 5764          bra       @vsscanf_scanselect_8
                    5765   @vsscanf_scanselect_10:
00003574  4A82      5766          tst.l     D2
00003576  6712      5767          beq.s     @vsscanf_scanselect_23
00003578  2043      5768          move.l    D3,A0
0000357A  1030 2800 5769          move.b    0(A0,D2.L),D0
0000357E  4880      5770          ext.w     D0
00003580  48C0      5771          ext.l     D0
00003582  0C80 0000 5772          cmp.l     #93,D0
00003586  005D      
00003588  6702      5773          beq.s     @vsscanf_scanselect_21
                    5774   @vsscanf_scanselect_23:
0000358A  7A01      5775          moveq     #1,D5
                    5776   @vsscanf_scanselect_21:
0000358C  200A      5777          move.l    A2,D0
0000358E  6712      5778          beq.s     @vsscanf_scanselect_24
00003590  4A85      5779          tst.l     D5
00003592  660C      5780          bne.s     @vsscanf_scanselect_26
00003594  4A87      5781          tst.l     D7
00003596  6606      5782          bne.s     @vsscanf_scanselect_28
00003598  2046      5783          move.l    D6,A0
0000359A  5286      5784          addq.l    #1,D6
0000359C  1084      5785          move.b    D4,(A0)
                    5786   @vsscanf_scanselect_28:
0000359E  6014      5787          bra.s     @vsscanf_scanselect_4
                    5788   @vsscanf_scanselect_26:
000035A0  6016      5789          bra.s     @vsscanf_scanselect_5
                    5790   @vsscanf_scanselect_24:
000035A2  4A85      5791          tst.l     D5
000035A4  670C      5792          beq.s     @vsscanf_scanselect_30
000035A6  4A87      5793          tst.l     D7
000035A8  6606      5794          bne.s     @vsscanf_scanselect_32
000035AA  2046      5795          move.l    D6,A0
000035AC  5286      5796          addq.l    #1,D6
000035AE  1084      5797          move.b    D4,(A0)
                    5798   @vsscanf_scanselect_32:
000035B0  6002      5799          bra.s     @vsscanf_scanselect_4
                    5800   @vsscanf_scanselect_30:
000035B2  6004      5801          bra.s     @vsscanf_scanselect_5
                    5802   @vsscanf_scanselect_4:
000035B4  6000 FEEE 5803          bra       @vsscanf_scanselect_2
                    5804   @vsscanf_scanselect_5:
000035B8  0C84 FFFF 5805          cmp.l     #-1,D4
000035BC  FFFF      
000035BE  6712      5806          beq.s     @vsscanf_scanselect_34
000035C0  2F04      5807          move.l    D4,-(A7)
000035C2  2F2E 0008 5808          move.l    8(A6),-(A7)
000035C6  6100 FE14 5809          bsr       @vsscanf_scanputback
000035CA  504F      5810          addq.w    #8,A7
000035CC  206E 001C 5811          move.l    28(A6),A0
000035D0  5390      5812          subq.l    #1,(A0)
                    5813   @vsscanf_scanselect_34:
000035D2  4A87      5814          tst.l     D7
000035D4  6604      5815          bne.s     @vsscanf_scanselect_36
000035D6  2046      5816          move.l    D6,A0
000035D8  4210      5817          clr.b     (A0)
                    5818   @vsscanf_scanselect_36:
000035DA  5283      5819          addq.l    #1,D3
000035DC  2043      5820          move.l    D3,A0
000035DE  1010      5821          move.b    (A0),D0
000035E0  4880      5822          ext.w     D0
000035E2  48C0      5823          ext.l     D0
000035E4  0C80 0000 5824          cmp.l     #93,D0
000035E8  005D      
000035EA  6702      5825          beq.s     @vsscanf_scanselect_40
000035EC  60EC      5826          bra       @vsscanf_scanselect_36
                    5827   @vsscanf_scanselect_40:
000035EE  5283      5828          addq.l    #1,D3
000035F0  2003      5829          move.l    D3,D0
000035F2  4CDF 04FC 5830          movem.l   (A7)+,D2/D3/D4/D5/D6/D7/A2
000035F6  4E5E      5831          unlk      A6
000035F8  4E75      5832          rts
                    5833   _scanflush:
000035FA  41F9 0803 5834          lea       @vsscanf_buf,A0
000035FE  0546      
00003600  23C8 0000 5835          move.l    A0,@vsscanf_bufx
00003604  5A48      
00003606  4239 0803 5836          clr.b     @vsscanf_buf
0000360A  0546      
0000360C  4878 FFFF 5837          pea       -1
00003610  6100 0E4A 5838          bsr       _ungetch
00003614  584F      5839          addq.w    #4,A7
00003616  4E75      5840          rts
                    5841   _vsscanf:
00003618  4E56 FF88 5842          link      A6,#-120
0000361C  48E7 3F3C 5843          movem.l   D2/D3/D4/D5/D6/D7/A2/A3/A4/A5,-(A7)
00003620  47F8 336E 5844          lea       @vsscanf_scanread,A3
00003624  4AAE 0008 5845          tst.l     8(A6)
00003628  6706      5846          beq.s     vsscanf_1
0000362A  41EE 0008 5847          lea       8(A6),A0
0000362E  6004      5848          bra.s     vsscanf_2
                    5849   vsscanf_1:
00003630  4280      5850          clr.l     D0
00003632  2040      5851          move.l    D0,A0
                    5852   vsscanf_2:
00003634  2A08      5853          move.l    A0,D5
00003636  42AE FFE4 5854          clr.l     -28(A6)
0000363A  4284      5855          clr.l     D4
                    5856   vsscanf_3:
0000363C  206E 000C 5857          move.l    12(A6),A0
00003640  52AE 000C 5858          addq.l    #1,12(A6)
00003644  1010      5859          move.b    (A0),D0
00003646  4880      5860          ext.w     D0
00003648  48C0      5861          ext.l     D0
0000364A  2600      5862          move.l    D0,D3
0000364C  6700 05AC 5863          beq       vsscanf_5
00003650  4286      5864          clr.l     D6
00003652  387C 0000 5865          move.w    #0,A4
00003656  0C83 0000 5866          cmp.l     #32,D3
0000365A  0020      
0000365C  6712      5867          beq.s     vsscanf_8
0000365E  0C83 0000 5868          cmp.l     #9,D3
00003662  0009      
00003664  670A      5869          beq.s     vsscanf_8
00003666  0C83 0000 5870          cmp.l     #10,D3
0000366A  000A      
0000366C  6600 0048 5871          bne       vsscanf_6
                    5872   vsscanf_8:
00003670  2F05      5873          move.l    D5,-(A7)
00003672  4E93      5874          jsr       (A3)
00003674  584F      5875          addq.w    #4,A7
00003676  2400      5876          move.l    D0,D2
00003678  52AE FFE4 5877          addq.l    #1,-28(A6)
0000367C  0C82 FFFF 5878          cmp.l     #-1,D2
00003680  FFFF      
00003682  660E      5879          bne.s     vsscanf_11
00003684  4A84      5880          tst.l     D4
00003686  6704      5881          beq.s     vsscanf_13
00003688  2004      5882          move.l    D4,D0
0000368A  6002      5883          bra.s     vsscanf_14
                    5884   vsscanf_13:
0000368C  70FF      5885          moveq     #-1,D0
                    5886   vsscanf_14:
0000368E  6000 056C 5887          bra       vsscanf_15
                    5888   vsscanf_11:
00003692  2042      5889          move.l    D2,A0
00003694  43F9 0000 5890          lea       __ctype,A1
00003698  5A4E      
0000369A  1030 9801 5891          move.b    1(A0,A1.L),D0
0000369E  C03C 0010 5892          and.b     #16,D0
000036A2  66CC      5893          bne       vsscanf_8
000036A4  53AE FFE4 5894          subq.l    #1,-28(A6)
000036A8  2F02      5895          move.l    D2,-(A7)
000036AA  2F05      5896          move.l    D5,-(A7)
000036AC  6100 FD2E 5897          bsr       @vsscanf_scanputback
000036B0  504F      5898          addq.w    #8,A7
000036B2  6000 0542 5899          bra       vsscanf_139
                    5900   vsscanf_6:
000036B6  0C83 0000 5901          cmp.l     #37,D3
000036BA  0025      
000036BC  6600 0502 5902          bne       vsscanf_127
000036C0  206E 000C 5903          move.l    12(A6),A0
000036C4  52AE 000C 5904          addq.l    #1,12(A6)
000036C8  1010      5905          move.b    (A0),D0
000036CA  4880      5906          ext.w     D0
000036CC  48C0      5907          ext.l     D0
000036CE  2600      5908          move.l    D0,D3
000036D0  42AE FFEC 5909          clr.l     -20(A6)
000036D4  4286      5910          clr.l     D6
000036D6  42AE FFE8 5911          clr.l     -24(A6)
000036DA  347C 7FFF 5912          move.w    #32767,A2
000036DE  0C83 0000 5913          cmp.l     #42,D3
000036E2  002A      
000036E4  6612      5914          bne.s     vsscanf_18
000036E6  7C01      5915          moveq     #1,D6
000036E8  206E 000C 5916          move.l    12(A6),A0
000036EC  52AE 000C 5917          addq.l    #1,12(A6)
000036F0  1010      5918          move.b    (A0),D0
000036F2  4880      5919          ext.w     D0
000036F4  48C0      5920          ext.l     D0
000036F6  2600      5921          move.l    D0,D3
                    5922   vsscanf_18:
000036F8  2043      5923          move.l    D3,A0
000036FA  43F9 0000 5924          lea       __ctype,A1
000036FE  5A4E      
00003700  1030 9801 5925          move.b    1(A0,A1.L),D0
00003704  C03C 0004 5926          and.b     #4,D0
00003708  6700 004E 5927          beq       vsscanf_24
0000370C  2003      5928          move.l    D3,D0
0000370E  0480 0000 5929          sub.l     #48,D0
00003712  0030      
00003714  2440      5930          move.l    D0,A2
                    5931   vsscanf_22:
00003716  206E 000C 5932          move.l    12(A6),A0
0000371A  52AE 000C 5933          addq.l    #1,12(A6)
0000371E  1010      5934          move.b    (A0),D0
00003720  4880      5935          ext.w     D0
00003722  48C0      5936          ext.l     D0
00003724  2600      5937          move.l    D0,D3
00003726  2040      5938          move.l    D0,A0
00003728  43F9 0000 5939          lea       __ctype,A1
0000372C  5A4E      
0000372E  1030 9801 5940          move.b    1(A0,A1.L),D0
00003732  C0BC 0000 5941          and.l     #255,D0
00003736  00FF      
00003738  C0BC 0000 5942          and.l     #4,D0
0000373C  0004      
0000373E  6718      5943          beq.s     vsscanf_24
00003740  70D0      5944          moveq     #-48,D0
00003742  2F0A      5945          move.l    A2,-(A7)
00003744  4878 000A 5946          pea       10
00003748  6100 0C12 5947          bsr       LMUL
0000374C  2217      5948          move.l    (A7),D1
0000374E  504F      5949          addq.w    #8,A7
00003750  D283      5950          add.l     D3,D1
00003752  D081      5951          add.l     D1,D0
00003754  2440      5952          move.l    D0,A2
00003756  60BE      5953          bra       vsscanf_22
                    5954   vsscanf_24:
00003758  0C83 0000 5955          cmp.l     #108,D3
0000375C  006C      
0000375E  6708      5956          beq.s     vsscanf_27
00003760  0C83 0000 5957          cmp.l     #76,D3
00003764  004C      
00003766  661A      5958          bne.s     vsscanf_25
                    5959   vsscanf_27:
00003768  2D7C 0000 5960          move.l    #1,-24(A6)
0000376C  0001 FFE8 
00003770  206E 000C 5961          move.l    12(A6),A0
00003774  52AE 000C 5962          addq.l    #1,12(A6)
00003778  1010      5963          move.b    (A0),D0
0000377A  4880      5964          ext.w     D0
0000377C  48C0      5965          ext.l     D0
0000377E  2600      5966          move.l    D0,D3
00003780  6020      5967          bra.s     vsscanf_28
                    5968   vsscanf_25:
00003782  0C83 0000 5969          cmp.l     #104,D3
00003786  0068      
00003788  6618      5970          bne.s     vsscanf_28
0000378A  2D7C 0000 5971          move.l    #1,-20(A6)
0000378E  0001 FFEC 
00003792  206E 000C 5972          move.l    12(A6),A0
00003796  52AE 000C 5973          addq.l    #1,12(A6)
0000379A  1010      5974          move.b    (A0),D0
0000379C  4880      5975          ext.w     D0
0000379E  48C0      5976          ext.l     D0
000037A0  2600      5977          move.l    D0,D3
                    5978   vsscanf_28:
000037A2  0C83 0000 5979          cmp.l     #91,D3
000037A6  005B      
000037A8  6600 0036 5980          bne       vsscanf_30
000037AC  4A86      5981          tst.l     D6
000037AE  660A      5982          bne.s     vsscanf_32
000037B0  206E 0010 5983          move.l    16(A6),A0
000037B4  58AE 0010 5984          addq.l    #4,16(A6)
000037B8  2E10      5985          move.l    (A0),D7
                    5986   vsscanf_32:
000037BA  486E FFE4 5987          pea       -28(A6)
000037BE  2F07      5988          move.l    D7,-(A7)
000037C0  2F06      5989          move.l    D6,-(A7)
000037C2  2F0A      5990          move.l    A2,-(A7)
000037C4  2F2E 000C 5991          move.l    12(A6),-(A7)
000037C8  2F05      5992          move.l    D5,-(A7)
000037CA  6100 FCA8 5993          bsr       @vsscanf_scanselect
000037CE  DEFC 0018 5994          add.w     #24,A7
000037D2  2D40 000C 5995          move.l    D0,12(A6)
000037D6  4A86      5996          tst.l     D6
000037D8  6602      5997          bne.s     vsscanf_34
000037DA  5284      5998          addq.l    #1,D4
                    5999   vsscanf_34:
000037DC  6000 0418 6000          bra       vsscanf_139
                    6001   vsscanf_30:
000037E0  0C83 0000 6002          cmp.l     #110,D3
000037E4  006E      
000037E6  661A      6003          bne.s     vsscanf_36
000037E8  4A86      6004          tst.l     D6
000037EA  6612      6005          bne.s     vsscanf_38
000037EC  206E 0010 6006          move.l    16(A6),A0
000037F0  58AE 0010 6007          addq.l    #4,16(A6)
000037F4  2E10      6008          move.l    (A0),D7
000037F6  2047      6009          move.l    D7,A0
000037F8  20AE FFE4 6010          move.l    -28(A6),(A0)
000037FC  5284      6011          addq.l    #1,D4
                    6012   vsscanf_38:
000037FE  6000 03F6 6013          bra       vsscanf_139
                    6014   vsscanf_36:
00003802  0C83 0000 6015          cmp.l     #115,D3
00003806  0073      
00003808  6600 00AC 6016          bne       vsscanf_40
0000380C  486E FFE4 6017          pea       -28(A6)
00003810  2F05      6018          move.l    D5,-(A7)
00003812  6100 FC2A 6019          bsr       @vsscanf_scanspace
00003816  504F      6020          addq.w    #8,A7
00003818  2400      6021          move.l    D0,D2
0000381A  4A86      6022          tst.l     D6
0000381C  660A      6023          bne.s     vsscanf_42
0000381E  206E 0010 6024          move.l    16(A6),A0
00003822  58AE 0010 6025          addq.l    #4,16(A6)
00003826  2E10      6026          move.l    (A0),D7
                    6027   vsscanf_42:
00003828  52AE FFE4 6028          addq.l    #1,-28(A6)
                    6029   vsscanf_44:
0000382C  200A      6030          move.l    A2,D0
0000382E  534A      6031          subq.w    #1,A2
00003830  4A80      6032          tst.l     D0
00003832  6700 0038 6033          beq       vsscanf_46
00003836  2042      6034          move.l    D2,A0
00003838  43F9 0000 6035          lea       __ctype,A1
0000383C  5A4E      
0000383E  1030 9801 6036          move.b    1(A0,A1.L),D0
00003842  C03C 0010 6037          and.b     #16,D0
00003846  6624      6038          bne.s     vsscanf_46
00003848  0C82 FFFF 6039          cmp.l     #-1,D2
0000384C  FFFF      
0000384E  671C      6040          beq.s     vsscanf_46
00003850  387C 0001 6041          move.w    #1,A4
00003854  4A86      6042          tst.l     D6
00003856  6606      6043          bne.s     vsscanf_47
00003858  2047      6044          move.l    D7,A0
0000385A  5287      6045          addq.l    #1,D7
0000385C  1082      6046          move.b    D2,(A0)
                    6047   vsscanf_47:
0000385E  2F05      6048          move.l    D5,-(A7)
00003860  4E93      6049          jsr       (A3)
00003862  584F      6050          addq.w    #4,A7
00003864  2400      6051          move.l    D0,D2
00003866  52AE FFE4 6052          addq.l    #1,-28(A6)
0000386A  60C0      6053          bra       vsscanf_44
                    6054   vsscanf_46:
0000386C  4A86      6055          tst.l     D6
0000386E  660A      6056          bne.s     vsscanf_51
00003870  2047      6057          move.l    D7,A0
00003872  4210      6058          clr.b     (A0)
00003874  200C      6059          move.l    A4,D0
00003876  6702      6060          beq.s     vsscanf_51
00003878  5284      6061          addq.l    #1,D4
                    6062   vsscanf_51:
0000387A  0C82 FFFF 6063          cmp.l     #-1,D2
0000387E  FFFF      
00003880  6708      6064          beq.s     vsscanf_55
00003882  4A86      6065          tst.l     D6
00003884  661E      6066          bne.s     vsscanf_53
00003886  200C      6067          move.l    A4,D0
00003888  661A      6068          bne.s     vsscanf_53
                    6069   vsscanf_55:
0000388A  4A84      6070          tst.l     D4
0000388C  6704      6071          beq.s     vsscanf_56
0000388E  2004      6072          move.l    D4,D0
00003890  600E      6073          bra.s     vsscanf_59
                    6074   vsscanf_56:
00003892  0C82 FFFF 6075          cmp.l     #-1,D2
00003896  FFFF      
00003898  6604      6076          bne.s     vsscanf_58
0000389A  70FF      6077          moveq     #-1,D0
0000389C  6002      6078          bra.s     vsscanf_59
                    6079   vsscanf_58:
0000389E  2004      6080          move.l    D4,D0
                    6081   vsscanf_59:
000038A0  6000 035A 6082          bra       vsscanf_15
                    6083   vsscanf_53:
000038A4  53AE FFE4 6084          subq.l    #1,-28(A6)
000038A8  2F02      6085          move.l    D2,-(A7)
000038AA  2F05      6086          move.l    D5,-(A7)
000038AC  6100 FB2E 6087          bsr       @vsscanf_scanputback
000038B0  504F      6088          addq.w    #8,A7
000038B2  6000 0342 6089          bra       vsscanf_139
                    6090   vsscanf_40:
000038B6  0C83 0000 6091          cmp.l     #99,D3
000038BA  0063      
000038BC  6600 008E 6092          bne       vsscanf_60
000038C0  4A86      6093          tst.l     D6
000038C2  660A      6094          bne.s     vsscanf_62
000038C4  206E 0010 6095          move.l    16(A6),A0
000038C8  58AE 0010 6096          addq.l    #4,16(A6)
000038CC  2E10      6097          move.l    (A0),D7
                    6098   vsscanf_62:
000038CE  2F05      6099          move.l    D5,-(A7)
000038D0  4E93      6100          jsr       (A3)
000038D2  584F      6101          addq.w    #4,A7
000038D4  2400      6102          move.l    D0,D2
000038D6  52AE FFE4 6103          addq.l    #1,-28(A6)
000038DA  200A      6104          move.l    A2,D0
000038DC  0C80 0000 6105          cmp.l     #32767,D0
000038E0  7FFF      
000038E2  6604      6106          bne.s     vsscanf_64
000038E4  347C 0001 6107          move.w    #1,A2
                    6108   vsscanf_64:
000038E8  0C82 FFFF 6109          cmp.l     #-1,D2
000038EC  FFFF      
000038EE  6606      6110          bne.s     vsscanf_66
000038F0  4A86      6111          tst.l     D6
000038F2  6602      6112          bne.s     vsscanf_66
000038F4  5384      6113          subq.l    #1,D4
                    6114   vsscanf_66:
000038F6  200A      6115          move.l    A2,D0
000038F8  534A      6116          subq.w    #1,A2
000038FA  4A80      6117          tst.l     D0
000038FC  6720      6118          beq.s     vsscanf_70
000038FE  0C82 FFFF 6119          cmp.l     #-1,D2
00003902  FFFF      
00003904  6718      6120          beq.s     vsscanf_70
00003906  4A86      6121          tst.l     D6
00003908  6606      6122          bne.s     vsscanf_71
0000390A  2047      6123          move.l    D7,A0
0000390C  5287      6124          addq.l    #1,D7
0000390E  1082      6125          move.b    D2,(A0)
                    6126   vsscanf_71:
00003910  2F05      6127          move.l    D5,-(A7)
00003912  4E93      6128          jsr       (A3)
00003914  584F      6129          addq.w    #4,A7
00003916  2400      6130          move.l    D0,D2
00003918  52AE FFE4 6131          addq.l    #1,-28(A6)
0000391C  60D8      6132          bra       vsscanf_66
                    6133   vsscanf_70:
0000391E  0C82 FFFF 6134          cmp.l     #-1,D2
00003922  FFFF      
00003924  660E      6135          bne.s     vsscanf_73
00003926  4A84      6136          tst.l     D4
00003928  6704      6137          beq.s     vsscanf_75
0000392A  2004      6138          move.l    D4,D0
0000392C  6002      6139          bra.s     vsscanf_76
                    6140   vsscanf_75:
0000392E  70FF      6141          moveq     #-1,D0
                    6142   vsscanf_76:
00003930  6000 02CA 6143          bra       vsscanf_15
                    6144   vsscanf_73:
00003934  4A86      6145          tst.l     D6
00003936  6602      6146          bne.s     vsscanf_77
00003938  5284      6147          addq.l    #1,D4
                    6148   vsscanf_77:
0000393A  53AE FFE4 6149          subq.l    #1,-28(A6)
0000393E  2F02      6150          move.l    D2,-(A7)
00003940  2F05      6151          move.l    D5,-(A7)
00003942  6100 FA98 6152          bsr       @vsscanf_scanputback
00003946  504F      6153          addq.w    #8,A7
00003948  6000 02AC 6154          bra       vsscanf_139
                    6155   vsscanf_60:
0000394C  0C83 0000 6156          cmp.l     #105,D3
00003950  0069      
00003952  6600 0060 6157          bne       vsscanf_82
00003956  486E FFE4 6158          pea       -28(A6)
0000395A  2F05      6159          move.l    D5,-(A7)
0000395C  6100 FAE0 6160          bsr       @vsscanf_scanspace
00003960  504F      6161          addq.w    #8,A7
00003962  2400      6162          move.l    D0,D2
00003964  0C82 0000 6163          cmp.l     #48,D2
00003968  0030      
0000396A  6600 0038 6164          bne       vsscanf_81
0000396E  387C 0001 6165          move.w    #1,A4
00003972  2F05      6166          move.l    D5,-(A7)
00003974  4E93      6167          jsr       (A3)
00003976  584F      6168          addq.w    #4,A7
00003978  2400      6169          move.l    D0,D2
0000397A  2F02      6170          move.l    D2,-(A7)
0000397C  6100 F94E 6171          bsr       _tolower
00003980  584F      6172          addq.w    #4,A7
00003982  0C80 0000 6173          cmp.l     #120,D0
00003986  0078      
00003988  6604      6174          bne.s     vsscanf_83
0000398A  7678      6175          moveq     #120,D3
0000398C  6010      6176          bra.s     vsscanf_84
                    6177   vsscanf_83:
0000398E  53AE FFE4 6178          subq.l    #1,-28(A6)
00003992  2F02      6179          move.l    D2,-(A7)
00003994  2F05      6180          move.l    D5,-(A7)
00003996  6100 FA44 6181          bsr       @vsscanf_scanputback
0000399A  504F      6182          addq.w    #8,A7
0000399C  766F      6183          moveq     #111,D3
                    6184   vsscanf_84:
0000399E  52AE FFE4 6185          addq.l    #1,-28(A6)
000039A2  6010      6186          bra.s     vsscanf_82
                    6187   vsscanf_81:
000039A4  53AE FFE4 6188          subq.l    #1,-28(A6)
000039A8  2F02      6189          move.l    D2,-(A7)
000039AA  2F05      6190          move.l    D5,-(A7)
000039AC  6100 FA2E 6191          bsr       @vsscanf_scanputback
000039B0  504F      6192          addq.w    #8,A7
000039B2  7664      6193          moveq     #100,D3
                    6194   vsscanf_82:
000039B4  0C83 0000 6195          cmp.l     #100,D3
000039B8  0064      
000039BA  671A      6196          beq.s     vsscanf_87
000039BC  0C83 0000 6197          cmp.l     #117,D3
000039C0  0075      
000039C2  6712      6198          beq.s     vsscanf_87
000039C4  0C83 0000 6199          cmp.l     #120,D3
000039C8  0078      
000039CA  670A      6200          beq.s     vsscanf_87
000039CC  0C83 0000 6201          cmp.l     #111,D3
000039D0  006F      
000039D2  6600 01A4 6202          bne       vsscanf_85
                    6203   vsscanf_87:
000039D6  486E FFE4 6204          pea       -28(A6)
000039DA  2F05      6205          move.l    D5,-(A7)
000039DC  6100 FA60 6206          bsr       @vsscanf_scanspace
000039E0  504F      6207          addq.w    #8,A7
000039E2  2400      6208          move.l    D0,D2
000039E4  2D7C 0000 6209          move.l    #10,-4(A6)
000039E8  000A FFFC 
000039EC  0C83 0000 6210          cmp.l     #120,D3
000039F0  0078      
000039F2  6608      6211          bne.s     vsscanf_88
000039F4  2D7C 0000 6212          move.l    #16,-4(A6)
000039F8  0010 FFFC 
                    6213   vsscanf_88:
000039FC  0C83 0000 6214          cmp.l     #111,D3
00003A00  006F      
00003A02  6608      6215          bne.s     vsscanf_90
00003A04  2D7C 0000 6216          move.l    #8,-4(A6)
00003A08  0008 FFFC 
                    6217   vsscanf_90:
00003A0C  4A86      6218          tst.l     D6
00003A0E  660A      6219          bne.s     vsscanf_92
00003A10  206E 0010 6220          move.l    16(A6),A0
00003A14  58AE 0010 6221          addq.l    #4,16(A6)
00003A18  2E10      6222          move.l    (A0),D7
                    6223   vsscanf_92:
00003A1A  42AE FFE0 6224          clr.l     -32(A6)
00003A1E  52AE FFE4 6225          addq.l    #1,-28(A6)
00003A22  0C83 0000 6226          cmp.l     #117,D3
00003A26  0075      
00003A28  6720      6227          beq.s     vsscanf_94
00003A2A  0C82 0000 6228          cmp.l     #45,D2
00003A2E  002D      
00003A30  6618      6229          bne.s     vsscanf_94
00003A32  2F05      6230          move.l    D5,-(A7)
00003A34  4E93      6231          jsr       (A3)
00003A36  584F      6232          addq.w    #4,A7
00003A38  2400      6233          move.l    D0,D2
00003A3A  52AE FFE4 6234          addq.l    #1,-28(A6)
00003A3E  2D7C 0000 6235          move.l    #1,-32(A6)
00003A42  0001 FFE0 
00003A46  387C 0001 6236          move.w    #1,A4
                    6237   vsscanf_94:
00003A4A  3A7C 0000 6238          move.w    #0,A5
00003A4E  0C82 FFFF 6239          cmp.l     #-1,D2
00003A52  FFFF      
00003A54  660E      6240          bne.s     vsscanf_96
00003A56  4A84      6241          tst.l     D4
00003A58  6704      6242          beq.s     vsscanf_98
00003A5A  2004      6243          move.l    D4,D0
00003A5C  6002      6244          bra.s     vsscanf_99
                    6245   vsscanf_98:
00003A5E  70FF      6246          moveq     #-1,D0
                    6247   vsscanf_99:
00003A60  6000 019A 6248          bra       vsscanf_15
                    6249   vsscanf_96:
00003A64  200A      6250          move.l    A2,D0
00003A66  534A      6251          subq.w    #1,A2
00003A68  4A80      6252          tst.l     D0
00003A6A  6700 0090 6253          beq       vsscanf_102
00003A6E  0C83 0000 6254          cmp.l     #120,D3
00003A72  0078      
00003A74  6620      6255          bne.s     vsscanf_104
00003A76  2F02      6256          move.l    D2,-(A7)
00003A78  6100 F8C8 6257          bsr       _toupper
00003A7C  584F      6258          addq.w    #4,A7
00003A7E  0C80 0000 6259          cmp.l     #65,D0
00003A82  0041      
00003A84  6D10      6260          blt.s     vsscanf_104
00003A86  2F02      6261          move.l    D2,-(A7)
00003A88  6100 F8B8 6262          bsr       _toupper
00003A8C  584F      6263          addq.w    #4,A7
00003A8E  0C80 0000 6264          cmp.l     #70,D0
00003A92  0046      
00003A94  6F14      6265          ble.s     vsscanf_103
                    6266   vsscanf_104:
00003A96  2042      6267          move.l    D2,A0
00003A98  43F9 0000 6268          lea       __ctype,A1
00003A9C  5A4E      
00003A9E  1030 9801 6269          move.b    1(A0,A1.L),D0
00003AA2  C03C 0004 6270          and.b     #4,D0
00003AA6  6700 0054 6271          beq       vsscanf_102
                    6272   vsscanf_103:
00003AAA  2042      6273          move.l    D2,A0
00003AAC  43F9 0000 6274          lea       __ctype,A1
00003AB0  5A4E      
00003AB2  1030 9801 6275          move.b    1(A0,A1.L),D0
00003AB6  C03C 0004 6276          and.b     #4,D0
00003ABA  6614      6277          bne.s     vsscanf_105
00003ABC  70F9      6278          moveq     #-7,D0
00003ABE  2F00      6279          move.l    D0,-(A7)
00003AC0  2F02      6280          move.l    D2,-(A7)
00003AC2  6100 F87E 6281          bsr       _toupper
00003AC6  584F      6282          addq.w    #4,A7
00003AC8  2200      6283          move.l    D0,D1
00003ACA  201F      6284          move.l    (A7)+,D0
00003ACC  D081      6285          add.l     D1,D0
00003ACE  2400      6286          move.l    D0,D2
                    6287   vsscanf_105:
00003AD0  2F0D      6288          move.l    A5,-(A7)
00003AD2  2F2E FFFC 6289          move.l    -4(A6),-(A7)
00003AD6  6100 0884 6290          bsr       LMUL
00003ADA  2017      6291          move.l    (A7),D0
00003ADC  504F      6292          addq.w    #8,A7
00003ADE  D082      6293          add.l     D2,D0
00003AE0  0480 0000 6294          sub.l     #48,D0
00003AE4  0030      
00003AE6  2A40      6295          move.l    D0,A5
00003AE8  2F05      6296          move.l    D5,-(A7)
00003AEA  4E93      6297          jsr       (A3)
00003AEC  584F      6298          addq.w    #4,A7
00003AEE  2400      6299          move.l    D0,D2
00003AF0  52AE FFE4 6300          addq.l    #1,-28(A6)
00003AF4  387C 0001 6301          move.w    #1,A4
00003AF8  6000 FF6A 6302          bra       vsscanf_96
                    6303   vsscanf_102:
00003AFC  0C82 FFFF 6304          cmp.l     #-1,D2
00003B00  FFFF      
00003B02  671A      6305          beq.s     vsscanf_107
00003B04  2F02      6306          move.l    D2,-(A7)
00003B06  2F05      6307          move.l    D5,-(A7)
00003B08  6100 F8D2 6308          bsr       @vsscanf_scanputback
00003B0C  504F      6309          addq.w    #8,A7
00003B0E  53AE FFE4 6310          subq.l    #1,-28(A6)
00003B12  200C      6311          move.l    A4,D0
00003B14  6606      6312          bne.s     vsscanf_109
00003B16  2004      6313          move.l    D4,D0
00003B18  6000 00E2 6314          bra       vsscanf_15
                    6315   vsscanf_109:
00003B1C  6012      6316          bra.s     vsscanf_111
                    6317   vsscanf_107:
00003B1E  200C      6318          move.l    A4,D0
00003B20  660E      6319          bne.s     vsscanf_111
00003B22  4A84      6320          tst.l     D4
00003B24  6704      6321          beq.s     vsscanf_113
00003B26  2004      6322          move.l    D4,D0
00003B28  6002      6323          bra.s     vsscanf_114
                    6324   vsscanf_113:
00003B2A  70FF      6325          moveq     #-1,D0
                    6326   vsscanf_114:
00003B2C  6000 00CE 6327          bra       vsscanf_15
                    6328   vsscanf_111:
00003B30  4AAE FFE0 6329          tst.l     -32(A6)
00003B34  6706      6330          beq.s     vsscanf_115
00003B36  200D      6331          move.l    A5,D0
00003B38  4480      6332          neg.l     D0
00003B3A  2A40      6333          move.l    D0,A5
                    6334   vsscanf_115:
00003B3C  4A86      6335          tst.l     D6
00003B3E  661E      6336          bne.s     vsscanf_117
00003B40  4AAE FFE8 6337          tst.l     -24(A6)
00003B44  6706      6338          beq.s     vsscanf_119
00003B46  2047      6339          move.l    D7,A0
00003B48  208D      6340          move.l    A5,(A0)
00003B4A  6010      6341          bra.s     vsscanf_122
                    6342   vsscanf_119:
00003B4C  4AAE FFEC 6343          tst.l     -20(A6)
00003B50  6706      6344          beq.s     vsscanf_121
00003B52  2047      6345          move.l    D7,A0
00003B54  308D      6346          move.w    A5,(A0)
00003B56  6004      6347          bra.s     vsscanf_122
                    6348   vsscanf_121:
00003B58  2047      6349          move.l    D7,A0
00003B5A  208D      6350          move.l    A5,(A0)
                    6351   vsscanf_122:
00003B5C  5284      6352          addq.l    #1,D4
                    6353   vsscanf_117:
00003B5E  0C82 FFFF 6354          cmp.l     #-1,D2
00003B62  FFFF      
00003B64  660E      6355          bne.s     vsscanf_123
00003B66  4A84      6356          tst.l     D4
00003B68  6704      6357          beq.s     vsscanf_125
00003B6A  2004      6358          move.l    D4,D0
00003B6C  6002      6359          bra.s     vsscanf_126
                    6360   vsscanf_125:
00003B6E  70FF      6361          moveq     #-1,D0
                    6362   vsscanf_126:
00003B70  6000 008A 6363          bra       vsscanf_15
                    6364   vsscanf_123:
00003B74  6000 0080 6365          bra       vsscanf_139
                    6366   vsscanf_85:
00003B78  0C83 0000 6367          cmp.l     #37,D3
00003B7C  0025      
00003B7E  6600 0040 6368          bne       vsscanf_127
00003B82  2F05      6369          move.l    D5,-(A7)
00003B84  4E93      6370          jsr       (A3)
00003B86  584F      6371          addq.w    #4,A7
00003B88  2400      6372          move.l    D0,D2
00003B8A  0C82 FFFF 6373          cmp.l     #-1,D2
00003B8E  FFFF      
00003B90  660E      6374          bne.s     vsscanf_129
00003B92  4A84      6375          tst.l     D4
00003B94  6704      6376          beq.s     vsscanf_131
00003B96  2004      6377          move.l    D4,D0
00003B98  6002      6378          bra.s     vsscanf_132
                    6379   vsscanf_131:
00003B9A  70FF      6380          moveq     #-1,D0
                    6381   vsscanf_132:
00003B9C  6000 005E 6382          bra       vsscanf_15
                    6383   vsscanf_129:
00003BA0  52AE FFE4 6384          addq.l    #1,-28(A6)
00003BA4  B483      6385          cmp.l     D3,D2
00003BA6  6714      6386          beq.s     vsscanf_133
00003BA8  2F02      6387          move.l    D2,-(A7)
00003BAA  2F05      6388          move.l    D5,-(A7)
00003BAC  6100 F82E 6389          bsr       @vsscanf_scanputback
00003BB0  504F      6390          addq.w    #8,A7
00003BB2  53AE FFE4 6391          subq.l    #1,-28(A6)
00003BB6  2004      6392          move.l    D4,D0
00003BB8  6000 0042 6393          bra       vsscanf_15
                    6394   vsscanf_133:
00003BBC  6000 0038 6395          bra       vsscanf_139
                    6396   vsscanf_127:
00003BC0  2F05      6397          move.l    D5,-(A7)
00003BC2  4E93      6398          jsr       (A3)
00003BC4  584F      6399          addq.w    #4,A7
00003BC6  2400      6400          move.l    D0,D2
00003BC8  52AE FFE4 6401          addq.l    #1,-28(A6)
00003BCC  0C82 FFFF 6402          cmp.l     #-1,D2
00003BD0  FFFF      
00003BD2  660C      6403          bne.s     vsscanf_135
00003BD4  4A84      6404          tst.l     D4
00003BD6  6704      6405          beq.s     vsscanf_137
00003BD8  2004      6406          move.l    D4,D0
00003BDA  6002      6407          bra.s     vsscanf_138
                    6408   vsscanf_137:
00003BDC  70FF      6409          moveq     #-1,D0
                    6410   vsscanf_138:
00003BDE  601C      6411          bra.s     vsscanf_15
                    6412   vsscanf_135:
00003BE0  B483      6413          cmp.l     D3,D2
00003BE2  6712      6414          beq.s     vsscanf_139
00003BE4  2F02      6415          move.l    D2,-(A7)
00003BE6  2F05      6416          move.l    D5,-(A7)
00003BE8  6100 F7F2 6417          bsr       @vsscanf_scanputback
00003BEC  504F      6418          addq.w    #8,A7
00003BEE  53AE FFE4 6419          subq.l    #1,-28(A6)
00003BF2  2004      6420          move.l    D4,D0
00003BF4  6006      6421          bra.s     vsscanf_15
                    6422   vsscanf_139:
00003BF6  6000 FA44 6423          bra       vsscanf_3
                    6424   vsscanf_5:
00003BFA  2004      6425          move.l    D4,D0
                    6426   vsscanf_15:
00003BFC  4CDF 3CFC 6427          movem.l   (A7)+,D2/D3/D4/D5/D6/D7/A2/A3/A4/A5
00003C00  4E5E      6428          unlk      A6
00003C02  4E75      6429          rts
                    6430   _printf:
00003C04  4E56 FFFC 6431          link      A6,#-4
00003C08  48E7 2000 6432          movem.l   D2,-(A7)
00003C0C  41EE 0008 6433          lea       8(A6),A0
00003C10  5848      6434          addq.w    #4,A0
00003C12  2408      6435          move.l    A0,D2
00003C14  2F02      6436          move.l    D2,-(A7)
00003C16  2F2E 0008 6437          move.l    8(A6),-(A7)
00003C1A  42A7      6438          clr.l     -(A7)
00003C1C  6100 00CA 6439          bsr       _vsprintf
00003C20  DEFC 000C 6440          add.w     #12,A7
00003C24  2D40 FFFC 6441          move.l    D0,-4(A6)
00003C28  4282      6442          clr.l     D2
00003C2A  202E FFFC 6443          move.l    -4(A6),D0
00003C2E  4CDF 0004 6444          movem.l   (A7)+,D2
00003C32  4E5E      6445          unlk      A6
00003C34  4E75      6446          rts
                    6447   @vsprintf_copy:
00003C36  4E56 0000 6448          link      A6,#0
00003C3A  206E 0008 6449          move.l    8(A6),A0
00003C3E  4A90      6450          tst.l     (A0)
00003C40  6710      6451          beq.s     @vsprintf_copy_1
00003C42  202E 000C 6452          move.l    12(A6),D0
00003C46  206E 0008 6453          move.l    8(A6),A0
00003C4A  2250      6454          move.l    (A0),A1
00003C4C  5290      6455          addq.l    #1,(A0)
00003C4E  1280      6456          move.b    D0,(A1)
00003C50  600A      6457          bra.s     @vsprintf_copy_2
                    6458   @vsprintf_copy_1:
00003C52  2F2E 000C 6459          move.l    12(A6),-(A7)
00003C56  6100 F608 6460          bsr       _putch
00003C5A  584F      6461          addq.w    #4,A7
                    6462   @vsprintf_copy_2:
00003C5C  4E5E      6463          unlk      A6
00003C5E  4E75      6464          rts
                    6465   @vsprintf_getval:
00003C60  4E56 0000 6466          link      A6,#0
00003C64  48E7 3000 6467          movem.l   D2/D3,-(A7)
00003C68  242E 0008 6468          move.l    8(A6),D2
00003C6C  4283      6469          clr.l     D3
00003C6E  2042      6470          move.l    D2,A0
00003C70  2050      6471          move.l    (A0),A0
00003C72  1010      6472          move.b    (A0),D0
00003C74  4880      6473          ext.w     D0
00003C76  48C0      6474          ext.l     D0
00003C78  0C80 0000 6475          cmp.l     #42,D0
00003C7C  002A      
00003C7E  6612      6476          bne.s     @vsprintf_getval_1
00003C80  206E 000C 6477          move.l    12(A6),A0
00003C84  2250      6478          move.l    (A0),A1
00003C86  5890      6479          addq.l    #4,(A0)
00003C88  2611      6480          move.l    (A1),D3
00003C8A  2042      6481          move.l    D2,A0
00003C8C  5290      6482          addq.l    #1,(A0)
00003C8E  6000 004E 6483          bra       @vsprintf_getval_5
                    6484   @vsprintf_getval_1:
00003C92  2042      6485          move.l    D2,A0
00003C94  2050      6486          move.l    (A0),A0
00003C96  1010      6487          move.b    (A0),D0
00003C98  4880      6488          ext.w     D0
00003C9A  48C0      6489          ext.l     D0
00003C9C  0C80 0000 6490          cmp.l     #48,D0
00003CA0  0030      
00003CA2  6D00 003A 6491          blt       @vsprintf_getval_5
00003CA6  2042      6492          move.l    D2,A0
00003CA8  2050      6493          move.l    (A0),A0
00003CAA  1010      6494          move.b    (A0),D0
00003CAC  4880      6495          ext.w     D0
00003CAE  48C0      6496          ext.l     D0
00003CB0  0C80 0000 6497          cmp.l     #57,D0
00003CB4  0039      
00003CB6  6E26      6498          bgt.s     @vsprintf_getval_5
00003CB8  2F03      6499          move.l    D3,-(A7)
00003CBA  4878 000A 6500          pea       10
00003CBE  6100 069C 6501          bsr       LMUL
00003CC2  2017      6502          move.l    (A7),D0
00003CC4  504F      6503          addq.w    #8,A7
00003CC6  2042      6504          move.l    D2,A0
00003CC8  2250      6505          move.l    (A0),A1
00003CCA  5290      6506          addq.l    #1,(A0)
00003CCC  1211      6507          move.b    (A1),D1
00003CCE  4881      6508          ext.w     D1
00003CD0  48C1      6509          ext.l     D1
00003CD2  D081      6510          add.l     D1,D0
00003CD4  0480 0000 6511          sub.l     #48,D0
00003CD8  0030      
00003CDA  2600      6512          move.l    D0,D3
00003CDC  60B4      6513          bra       @vsprintf_getval_1
                    6514   @vsprintf_getval_5:
00003CDE  2003      6515          move.l    D3,D0
00003CE0  4CDF 000C 6516          movem.l   (A7)+,D2/D3
00003CE4  4E5E      6517          unlk      A6
00003CE6  4E75      6518          rts
                    6519   _vsprintf:
00003CE8  4E56 FFCC 6520          link      A6,#-52
00003CEC  48E7 3F3C 6521          movem.l   D2/D3/D4/D5/D6/D7/A2/A3/A4/A5,-(A7)
00003CF0  45EE 0008 6522          lea       8(A6),A2
00003CF4  47F8 3C36 6523          lea       @vsprintf_copy,A3
00003CF8  49F9 0000 6524          lea       _ultoa,A4
00003CFC  4566      
00003CFE  4286      6525          clr.l     D6
                    6526   vsprintf_1:
00003D00  206E 000C 6527          move.l    12(A6),A0
00003D04  4A10      6528          tst.b     (A0)
00003D06  6700 0624 6529          beq       vsprintf_3
00003D0A  206E 000C 6530          move.l    12(A6),A0
00003D0E  1010      6531          move.b    (A0),D0
00003D10  4880      6532          ext.w     D0
00003D12  48C0      6533          ext.l     D0
00003D14  0C80 0000 6534          cmp.l     #37,D0
00003D18  0025      
00003D1A  671C      6535          beq.s     vsprintf_4
00003D1C  206E 000C 6536          move.l    12(A6),A0
00003D20  52AE 000C 6537          addq.l    #1,12(A6)
00003D24  1210      6538          move.b    (A0),D1
00003D26  4881      6539          ext.w     D1
00003D28  48C1      6540          ext.l     D1
00003D2A  2F01      6541          move.l    D1,-(A7)
00003D2C  2F0A      6542          move.l    A2,-(A7)
00003D2E  4E93      6543          jsr       (A3)
00003D30  504F      6544          addq.w    #8,A7
00003D32  5286      6545          addq.l    #1,D6
00003D34  6000 05F2 6546          bra       vsprintf_2
                    6547   vsprintf_4:
00003D38  52AE 000C 6548          addq.l    #1,12(A6)
00003D3C  422E FFD3 6549          clr.b     -45(A6)
00003D40  422E FFD2 6550          clr.b     -46(A6)
00003D44  422E FFD0 6551          clr.b     -48(A6)
00003D48  422E FFCF 6552          clr.b     -49(A6)
00003D4C  422E FFCE 6553          clr.b     -50(A6)
00003D50  422E FFCD 6554          clr.b     -51(A6)
00003D54  42AE FFFC 6555          clr.l     -4(A6)
00003D58  7AFF      6556          moveq     #-1,D5
00003D5A  41EE FFDC 6557          lea       -36(A6),A0
00003D5E  2608      6558          move.l    A0,D3
00003D60  2408      6559          move.l    A0,D2
                    6560   vsprintf_6:
00003D62  206E 000C 6561          move.l    12(A6),A0
00003D66  1010      6562          move.b    (A0),D0
00003D68  4880      6563          ext.w     D0
00003D6A  48C0      6564          ext.l     D0
00003D6C  0C80 0000 6565          cmp.l     #43,D0
00003D70  002B      
00003D72  6730      6566          beq.s     vsprintf_12
00003D74  6E18      6567          bgt.s     vsprintf_15
00003D76  0C80 0000 6568          cmp.l     #35,D0
00003D7A  0023      
00003D7C  6700 003E 6569          beq       vsprintf_14
00003D80  6E00 0046 6570          bgt       vsprintf_9
00003D84  0C80 0000 6571          cmp.l     #32,D0
00003D88  0020      
00003D8A  6724      6572          beq.s     vsprintf_13
00003D8C  603A      6573          bra.s     vsprintf_9
                    6574   vsprintf_15:
00003D8E  0C80 0000 6575          cmp.l     #45,D0
00003D92  002D      
00003D94  6702      6576          beq.s     vsprintf_11
00003D96  6030      6577          bra.s     vsprintf_9
                    6578   vsprintf_11:
00003D98  1D7C 0001 6579          move.b    #1,-51(A6)
00003D9C  FFCD      
00003D9E  52AE 000C 6580          addq.l    #1,12(A6)
00003DA2  6026      6581          bra.s     vsprintf_7
                    6582   vsprintf_12:
00003DA4  1D7C 0001 6583          move.b    #1,-50(A6)
00003DA8  FFCE      
00003DAA  52AE 000C 6584          addq.l    #1,12(A6)
00003DAE  601A      6585          bra.s     vsprintf_7
                    6586   vsprintf_13:
00003DB0  1D7C 0001 6587          move.b    #1,-49(A6)
00003DB4  FFCF      
00003DB6  52AE 000C 6588          addq.l    #1,12(A6)
00003DBA  600E      6589          bra.s     vsprintf_7
                    6590   vsprintf_14:
00003DBC  1D7C 0001 6591          move.b    #1,-48(A6)
00003DC0  FFD0      
00003DC2  52AE 000C 6592          addq.l    #1,12(A6)
00003DC6  6002      6593          bra.s     vsprintf_7
                    6594   vsprintf_9:
00003DC8  6002      6595          bra.s     vsprintf_8
                    6596   vsprintf_7:
00003DCA  6096      6597          bra       vsprintf_6
                    6598   vsprintf_8:
00003DCC  206E 000C 6599          move.l    12(A6),A0
00003DD0  1010      6600          move.b    (A0),D0
00003DD2  4880      6601          ext.w     D0
00003DD4  48C0      6602          ext.l     D0
00003DD6  0C80 0000 6603          cmp.l     #48,D0
00003DDA  0030      
00003DDC  660A      6604          bne.s     vsprintf_16
00003DDE  52AE 000C 6605          addq.l    #1,12(A6)
00003DE2  1D7C 0001 6606          move.b    #1,-46(A6)
00003DE6  FFD2      
                    6607   vsprintf_16:
00003DE8  486E 0010 6608          pea       16(A6)
00003DEC  486E 000C 6609          pea       12(A6)
00003DF0  6100 FE6E 6610          bsr       @vsprintf_getval
00003DF4  504F      6611          addq.w    #8,A7
00003DF6  2A40      6612          move.l    D0,A5
00003DF8  206E 000C 6613          move.l    12(A6),A0
00003DFC  1010      6614          move.b    (A0),D0
00003DFE  4880      6615          ext.w     D0
00003E00  48C0      6616          ext.l     D0
00003E02  0C80 0000 6617          cmp.l     #46,D0
00003E06  002E      
00003E08  6614      6618          bne.s     vsprintf_18
00003E0A  52AE 000C 6619          addq.l    #1,12(A6)
00003E0E  486E 0010 6620          pea       16(A6)
00003E12  486E 000C 6621          pea       12(A6)
00003E16  6100 FE48 6622          bsr       @vsprintf_getval
00003E1A  504F      6623          addq.w    #8,A7
00003E1C  2A00      6624          move.l    D0,D5
                    6625   vsprintf_18:
00003E1E  206E 000C 6626          move.l    12(A6),A0
00003E22  1010      6627          move.b    (A0),D0
00003E24  4880      6628          ext.w     D0
00003E26  48C0      6629          ext.l     D0
00003E28  0C80 0000 6630          cmp.l     #108,D0
00003E2C  006C      
00003E2E  660A      6631          bne.s     vsprintf_20
00003E30  52AE 000C 6632          addq.l    #1,12(A6)
00003E34  1D7C 0001 6633          move.b    #1,-45(A6)
00003E38  FFD3      
                    6634   vsprintf_20:
00003E3A  206E 000C 6635          move.l    12(A6),A0
00003E3E  1010      6636          move.b    (A0),D0
00003E40  4880      6637          ext.w     D0
00003E42  48C0      6638          ext.l     D0
00003E44  0C80 0000 6639          cmp.l     #111,D0
00003E48  006F      
00003E4A  6700 00D4 6640          beq       vsprintf_27
00003E4E  6E34      6641          bgt.s     vsprintf_33
00003E50  0C80 0000 6642          cmp.l     #100,D0
00003E54  0064      
00003E56  6700 0054 6643          beq       vsprintf_24
00003E5A  6E1C      6644          bgt.s     vsprintf_34
00003E5C  0C80 0000 6645          cmp.l     #99,D0
00003E60  0063      
00003E62  6700 012C 6646          beq       vsprintf_30
00003E66  6E00 016A 6647          bgt       vsprintf_22
00003E6A  0C80 0000 6648          cmp.l     #88,D0
00003E6E  0058      
00003E70  6700 00E6 6649          beq       vsprintf_28
00003E74  6000 015C 6650          bra       vsprintf_22
                    6651   vsprintf_34:
00003E78  0C80 0000 6652          cmp.l     #105,D0
00003E7C  0069      
00003E7E  672C      6653          beq.s     vsprintf_24
00003E80  6000 0150 6654          bra       vsprintf_22
                    6655   vsprintf_33:
00003E84  0C80 0000 6656          cmp.l     #117,D0
00003E88  0075      
00003E8A  6700 005C 6657          beq       vsprintf_26
00003E8E  6E0E      6658          bgt.s     vsprintf_35
00003E90  0C80 0000 6659          cmp.l     #115,D0
00003E94  0073      
00003E96  6700 011C 6660          beq       vsprintf_31
00003E9A  6000 0136 6661          bra       vsprintf_22
                    6662   vsprintf_35:
00003E9E  0C80 0000 6663          cmp.l     #120,D0
00003EA2  0078      
00003EA4  6700 00B2 6664          beq       vsprintf_28
00003EA8  6000 0128 6665          bra       vsprintf_22
                    6666   vsprintf_24:
00003EAC  4A2E FFD3 6667          tst.b     -45(A6)
00003EB0  671A      6668          beq.s     vsprintf_36
00003EB2  4878 000A 6669          pea       10
00003EB6  2F03      6670          move.l    D3,-(A7)
00003EB8  206E 0010 6671          move.l    16(A6),A0
00003EBC  58AE 0010 6672          addq.l    #4,16(A6)
00003EC0  2F10      6673          move.l    (A0),-(A7)
00003EC2  6100 061E 6674          bsr       _ltoa
00003EC6  DEFC 000C 6675          add.w     #12,A7
00003ECA  6018      6676          bra.s     vsprintf_37
                    6677   vsprintf_36:
00003ECC  4878 000A 6678          pea       10
00003ED0  2F03      6679          move.l    D3,-(A7)
00003ED2  206E 0010 6680          move.l    16(A6),A0
00003ED6  58AE 0010 6681          addq.l    #4,16(A6)
00003EDA  2F10      6682          move.l    (A0),-(A7)
00003EDC  6100 0604 6683          bsr       _ltoa
00003EE0  DEFC 000C 6684          add.w     #12,A7
                    6685   vsprintf_37:
00003EE4  6000 00FA 6686          bra       vsprintf_23
                    6687   vsprintf_26:
00003EE8  4A2E FFD3 6688          tst.b     -45(A6)
00003EEC  6718      6689          beq.s     vsprintf_38
00003EEE  4878 000A 6690          pea       10
00003EF2  2F03      6691          move.l    D3,-(A7)
00003EF4  206E 0010 6692          move.l    16(A6),A0
00003EF8  58AE 0010 6693          addq.l    #4,16(A6)
00003EFC  2F10      6694          move.l    (A0),-(A7)
00003EFE  4E94      6695          jsr       (A4)
00003F00  DEFC 000C 6696          add.w     #12,A7
00003F04  6016      6697          bra.s     vsprintf_39
                    6698   vsprintf_38:
00003F06  4878 000A 6699          pea       10
00003F0A  2F03      6700          move.l    D3,-(A7)
00003F0C  206E 0010 6701          move.l    16(A6),A0
00003F10  58AE 0010 6702          addq.l    #4,16(A6)
00003F14  2F10      6703          move.l    (A0),-(A7)
00003F16  4E94      6704          jsr       (A4)
00003F18  DEFC 000C 6705          add.w     #12,A7
                    6706   vsprintf_39:
00003F1C  6000 00C2 6707          bra       vsprintf_23
                    6708   vsprintf_27:
00003F20  4A2E FFD3 6709          tst.b     -45(A6)
00003F24  6718      6710          beq.s     vsprintf_40
00003F26  4878 0008 6711          pea       8
00003F2A  2F03      6712          move.l    D3,-(A7)
00003F2C  206E 0010 6713          move.l    16(A6),A0
00003F30  58AE 0010 6714          addq.l    #4,16(A6)
00003F34  2F10      6715          move.l    (A0),-(A7)
00003F36  4E94      6716          jsr       (A4)
00003F38  DEFC 000C 6717          add.w     #12,A7
00003F3C  6016      6718          bra.s     vsprintf_41
                    6719   vsprintf_40:
00003F3E  4878 0008 6720          pea       8
00003F42  2F03      6721          move.l    D3,-(A7)
00003F44  206E 0010 6722          move.l    16(A6),A0
00003F48  58AE 0010 6723          addq.l    #4,16(A6)
00003F4C  2F10      6724          move.l    (A0),-(A7)
00003F4E  4E94      6725          jsr       (A4)
00003F50  DEFC 000C 6726          add.w     #12,A7
                    6727   vsprintf_41:
00003F54  6000 008A 6728          bra       vsprintf_23
                    6729   vsprintf_28:
00003F58  4A2E FFD3 6730          tst.b     -45(A6)
00003F5C  6718      6731          beq.s     vsprintf_42
00003F5E  4878 0010 6732          pea       16
00003F62  2F03      6733          move.l    D3,-(A7)
00003F64  206E 0010 6734          move.l    16(A6),A0
00003F68  58AE 0010 6735          addq.l    #4,16(A6)
00003F6C  2F10      6736          move.l    (A0),-(A7)
00003F6E  4E94      6737          jsr       (A4)
00003F70  DEFC 000C 6738          add.w     #12,A7
00003F74  6016      6739          bra.s     vsprintf_43
                    6740   vsprintf_42:
00003F76  4878 0010 6741          pea       16
00003F7A  2F03      6742          move.l    D3,-(A7)
00003F7C  206E 0010 6743          move.l    16(A6),A0
00003F80  58AE 0010 6744          addq.l    #4,16(A6)
00003F84  2F10      6745          move.l    (A0),-(A7)
00003F86  4E94      6746          jsr       (A4)
00003F88  DEFC 000C 6747          add.w     #12,A7
                    6748   vsprintf_43:
00003F8C  6000 0052 6749          bra       vsprintf_23
                    6750   vsprintf_30:
00003F90  206E 0010 6751          move.l    16(A6),A0
00003F94  58AE 0010 6752          addq.l    #4,16(A6)
00003F98  2010      6753          move.l    (A0),D0
00003F9A  2042      6754          move.l    D2,A0
00003F9C  5282      6755          addq.l    #1,D2
00003F9E  1080      6756          move.b    D0,(A0)
00003FA0  2042      6757          move.l    D2,A0
00003FA2  4210      6758          clr.b     (A0)
00003FA4  200D      6759          move.l    A5,D0
00003FA6  6704      6760          beq.s     vsprintf_44
00003FA8  200D      6761          move.l    A5,D0
00003FAA  6002      6762          bra.s     vsprintf_45
                    6763   vsprintf_44:
00003FAC  7001      6764          moveq     #1,D0
                    6765   vsprintf_45:
00003FAE  2A00      6766          move.l    D0,D5
00003FB0  6000 002E 6767          bra       vsprintf_23
                    6768   vsprintf_31:
00003FB4  206E 0010 6769          move.l    16(A6),A0
00003FB8  58AE 0010 6770          addq.l    #4,16(A6)
00003FBC  2610      6771          move.l    (A0),D3
00003FBE  0C85 FFFF 6772          cmp.l     #-1,D5
00003FC2  FFFF      
00003FC4  660A      6773          bne.s     vsprintf_46
00003FC6  2F03      6774          move.l    D3,-(A7)
00003FC8  6100 F284 6775          bsr       _strlen
00003FCC  584F      6776          addq.w    #4,A7
00003FCE  2A00      6777          move.l    D0,D5
                    6778   vsprintf_46:
00003FD0  600E      6779          bra.s     vsprintf_23
                    6780   vsprintf_22:
00003FD2  206E 000C 6781          move.l    12(A6),A0
00003FD6  2242      6782          move.l    D2,A1
00003FD8  5282      6783          addq.l    #1,D2
00003FDA  1290      6784          move.b    (A0),(A1)
00003FDC  2042      6785          move.l    D2,A0
00003FDE  4210      6786          clr.b     (A0)
                    6787   vsprintf_23:
00003FE0  2F03      6788          move.l    D3,-(A7)
00003FE2  6100 F26A 6789          bsr       _strlen
00003FE6  584F      6790          addq.w    #4,A7
00003FE8  1800      6791          move.b    D0,D4
00003FEA  206E 000C 6792          move.l    12(A6),A0
00003FEE  1010      6793          move.b    (A0),D0
00003FF0  4880      6794          ext.w     D0
00003FF2  48C0      6795          ext.l     D0
00003FF4  0C80 0000 6796          cmp.l     #115,D0
00003FF8  0073      
00003FFA  6618      6797          bne.s     vsprintf_48
00003FFC  0C85 0000 6798          cmp.l     #0,D5
00004000  0000      
00004002  6D10      6799          blt.s     vsprintf_48
00004004  4884      6800          ext.w     D4
00004006  48C4      6801          ext.l     D4
00004008  B885      6802          cmp.l     D5,D4
0000400A  6F04      6803          ble.s     vsprintf_50
0000400C  1005      6804          move.b    D5,D0
0000400E  6002      6805          bra.s     vsprintf_51
                    6806   vsprintf_50:
00004010  1004      6807          move.b    D4,D0
                    6808   vsprintf_51:
00004012  1800      6809          move.b    D0,D4
                    6810   vsprintf_48:
00004014  206E 000C 6811          move.l    12(A6),A0
00004018  1010      6812          move.b    (A0),D0
0000401A  4880      6813          ext.w     D0
0000401C  48C0      6814          ext.l     D0
0000401E  0C80 0000 6815          cmp.l     #88,D0
00004022  0058      
00004024  6600 0026 6816          bne       vsprintf_56
00004028  41EE FFDC 6817          lea       -36(A6),A0
0000402C  2408      6818          move.l    A0,D2
                    6819   vsprintf_54:
0000402E  2042      6820          move.l    D2,A0
00004030  4A10      6821          tst.b     (A0)
00004032  6718      6822          beq.s     vsprintf_56
00004034  2042      6823          move.l    D2,A0
00004036  1210      6824          move.b    (A0),D1
00004038  4881      6825          ext.w     D1
0000403A  48C1      6826          ext.l     D1
0000403C  2F01      6827          move.l    D1,-(A7)
0000403E  6100 F302 6828          bsr       _toupper
00004042  584F      6829          addq.w    #4,A7
00004044  2042      6830          move.l    D2,A0
00004046  1080      6831          move.b    D0,(A0)
00004048  5282      6832          addq.l    #1,D2
0000404A  60E2      6833          bra       vsprintf_54
                    6834   vsprintf_56:
0000404C  7E00      6835          moveq     #0,D7
0000404E  41EE FFD4 6836          lea       -44(A6),A0
00004052  2408      6837          move.l    A0,D2
00004054  206E 000C 6838          move.l    12(A6),A0
00004058  1010      6839          move.b    (A0),D0
0000405A  4880      6840          ext.w     D0
0000405C  48C0      6841          ext.l     D0
0000405E  0C80 0000 6842          cmp.l     #100,D0
00004062  0064      
00004064  6714      6843          beq.s     vsprintf_59
00004066  206E 000C 6844          move.l    12(A6),A0
0000406A  1010      6845          move.b    (A0),D0
0000406C  4880      6846          ext.w     D0
0000406E  48C0      6847          ext.l     D0
00004070  0C80 0000 6848          cmp.l     #105,D0
00004074  0069      
00004076  6600 0076 6849          bne       vsprintf_65
                    6850   vsprintf_59:
0000407A  4A2E FFCE 6851          tst.b     -50(A6)
0000407E  6612      6852          bne.s     vsprintf_62
00004080  2043      6853          move.l    D3,A0
00004082  1010      6854          move.b    (A0),D0
00004084  4880      6855          ext.w     D0
00004086  48C0      6856          ext.l     D0
00004088  0C80 0000 6857          cmp.l     #45,D0
0000408C  002D      
0000408E  6600 002E 6858          bne       vsprintf_60
                    6859   vsprintf_62:
00004092  2043      6860          move.l    D3,A0
00004094  1010      6861          move.b    (A0),D0
00004096  4880      6862          ext.w     D0
00004098  48C0      6863          ext.l     D0
0000409A  0C80 0000 6864          cmp.l     #45,D0
0000409E  002D      
000040A0  660E      6865          bne.s     vsprintf_63
000040A2  2043      6866          move.l    D3,A0
000040A4  5283      6867          addq.l    #1,D3
000040A6  2242      6868          move.l    D2,A1
000040A8  5282      6869          addq.l    #1,D2
000040AA  1290      6870          move.b    (A0),(A1)
000040AC  5304      6871          subq.b    #1,D4
000040AE  6008      6872          bra.s     vsprintf_64
                    6873   vsprintf_63:
000040B0  2042      6874          move.l    D2,A0
000040B2  5282      6875          addq.l    #1,D2
000040B4  10BC 002B 6876          move.b    #43,(A0)
                    6877   vsprintf_64:
000040B8  5287      6878          addq.l    #1,D7
000040BA  6000 0032 6879          bra       vsprintf_65
                    6880   vsprintf_60:
000040BE  4A2E FFCF 6881          tst.b     -49(A6)
000040C2  6700 002A 6882          beq       vsprintf_65
000040C6  2043      6883          move.l    D3,A0
000040C8  1010      6884          move.b    (A0),D0
000040CA  4880      6885          ext.w     D0
000040CC  48C0      6886          ext.l     D0
000040CE  0C80 0000 6887          cmp.l     #45,D0
000040D2  002D      
000040D4  660E      6888          bne.s     vsprintf_67
000040D6  2043      6889          move.l    D3,A0
000040D8  5283      6890          addq.l    #1,D3
000040DA  2242      6891          move.l    D2,A1
000040DC  5282      6892          addq.l    #1,D2
000040DE  1290      6893          move.b    (A0),(A1)
000040E0  5304      6894          subq.b    #1,D4
000040E2  6008      6895          bra.s     vsprintf_68
                    6896   vsprintf_67:
000040E4  2042      6897          move.l    D2,A0
000040E6  5282      6898          addq.l    #1,D2
000040E8  10BC 0020 6899          move.b    #32,(A0)
                    6900   vsprintf_68:
000040EC  5287      6901          addq.l    #1,D7
                    6902   vsprintf_65:
000040EE  4A2E FFD0 6903          tst.b     -48(A6)
000040F2  6700 0066 6904          beq       vsprintf_77
000040F6  206E 000C 6905          move.l    12(A6),A0
000040FA  1010      6906          move.b    (A0),D0
000040FC  4880      6907          ext.w     D0
000040FE  48C0      6908          ext.l     D0
00004100  0C80 0000 6909          cmp.l     #111,D0
00004104  006F      
00004106  671A      6910          beq.s     vsprintf_73
00004108  6E0C      6911          bgt.s     vsprintf_76
0000410A  0C80 0000 6912          cmp.l     #88,D0
0000410E  0058      
00004110  6710      6913          beq.s     vsprintf_73
00004112  6000 0046 6914          bra       vsprintf_77
                    6915   vsprintf_76:
00004116  0C80 0000 6916          cmp.l     #120,D0
0000411A  0078      
0000411C  6704      6917          beq.s     vsprintf_73
0000411E  6000 003A 6918          bra       vsprintf_77
                    6919   vsprintf_73:
00004122  2042      6920          move.l    D2,A0
00004124  5282      6921          addq.l    #1,D2
00004126  10BC 0030 6922          move.b    #48,(A0)
0000412A  5287      6923          addq.l    #1,D7
0000412C  206E 000C 6924          move.l    12(A6),A0
00004130  1010      6925          move.b    (A0),D0
00004132  4880      6926          ext.w     D0
00004134  48C0      6927          ext.l     D0
00004136  0C80 0000 6928          cmp.l     #120,D0
0000413A  0078      
0000413C  6712      6929          beq.s     vsprintf_79
0000413E  206E 000C 6930          move.l    12(A6),A0
00004142  1010      6931          move.b    (A0),D0
00004144  4880      6932          ext.w     D0
00004146  48C0      6933          ext.l     D0
00004148  0C80 0000 6934          cmp.l     #88,D0
0000414C  0058      
0000414E  660A      6935          bne.s     vsprintf_77
                    6936   vsprintf_79:
00004150  2042      6937          move.l    D2,A0
00004152  5282      6938          addq.l    #1,D2
00004154  10BC 0078 6939          move.b    #120,(A0)
00004158  5287      6940          addq.l    #1,D7
                    6941   vsprintf_77:
0000415A  2042      6942          move.l    D2,A0
0000415C  4210      6943          clr.b     (A0)
0000415E  206E 000C 6944          move.l    12(A6),A0
00004162  1010      6945          move.b    (A0),D0
00004164  4880      6946          ext.w     D0
00004166  48C0      6947          ext.l     D0
00004168  0C80 0000 6948          cmp.l     #105,D0
0000416C  0069      
0000416E  6700 0076 6949          beq       vsprintf_82
00004172  6E42      6950          bgt.s     vsprintf_93
00004174  0C80 0000 6951          cmp.l     #99,D0
00004178  0063      
0000417A  6700 0084 6952          beq       vsprintf_96
0000417E  6E1C      6953          bgt.s     vsprintf_94
00004180  0C80 0000 6954          cmp.l     #88,D0
00004184  0058      
00004186  6700 005E 6955          beq       vsprintf_82
0000418A  6E00 0184 6956          bgt       vsprintf_80
0000418E  0C80 0000 6957          cmp.l     #69,D0
00004192  0045      
00004194  6700 0050 6958          beq       vsprintf_82
00004198  6000 0176 6959          bra       vsprintf_80
                    6960   vsprintf_94:
0000419C  0C80 0000 6961          cmp.l     #101,D0
000041A0  0065      
000041A2  6700 0042 6962          beq       vsprintf_82
000041A6  6E00 0168 6963          bgt       vsprintf_80
000041AA  0C80 0000 6964          cmp.l     #100,D0
000041AE  0064      
000041B0  6734      6965          beq.s     vsprintf_82
000041B2  6000 015C 6966          bra       vsprintf_80
                    6967   vsprintf_93:
000041B6  0C80 0000 6968          cmp.l     #117,D0
000041BA  0075      
000041BC  6728      6969          beq.s     vsprintf_82
000041BE  6E1A      6970          bgt.s     vsprintf_95
000041C0  0C80 0000 6971          cmp.l     #115,D0
000041C4  0073      
000041C6  6700 0038 6972          beq       vsprintf_96
000041CA  6E00 0144 6973          bgt       vsprintf_80
000041CE  0C80 0000 6974          cmp.l     #111,D0
000041D2  006F      
000041D4  6710      6975          beq.s     vsprintf_82
000041D6  6000 0138 6976          bra       vsprintf_80
                    6977   vsprintf_95:
000041DA  0C80 0000 6978          cmp.l     #120,D0
000041DE  0078      
000041E0  6704      6979          beq.s     vsprintf_82
000041E2  6000 012C 6980          bra       vsprintf_80
                    6981   vsprintf_82:
000041E6  4A2E FFD2 6982          tst.b     -46(A6)
000041EA  6714      6983          beq.s     vsprintf_96
000041EC  4A2E FFCD 6984          tst.b     -51(A6)
000041F0  660E      6985          bne.s     vsprintf_96
000041F2  200D      6986          move.l    A5,D0
000041F4  9087      6987          sub.l     D7,D0
000041F6  4884      6988          ext.w     D4
000041F8  48C4      6989          ext.l     D4
000041FA  9084      6990          sub.l     D4,D0
000041FC  2D40 FFFC 6991          move.l    D0,-4(A6)
                    6992   vsprintf_96:
00004200  202E FFFC 6993          move.l    -4(A6),D0
00004204  0C80 0000 6994          cmp.l     #0,D0
00004208  0000      
0000420A  6C04      6995          bge.s     vsprintf_98
0000420C  42AE FFFC 6996          clr.l     -4(A6)
                    6997   vsprintf_98:
00004210  4A2E FFCD 6998          tst.b     -51(A6)
00004214  6600 0030 6999          bne       vsprintf_104
00004218  4884      7000          ext.w     D4
0000421A  48C4      7001          ext.l     D4
0000421C  2004      7002          move.l    D4,D0
0000421E  D0AE FFFC 7003          add.l     -4(A6),D0
00004222  D087      7004          add.l     D7,D0
00004224  1D40 FFD1 7005          move.b    D0,-47(A6)
                    7006   vsprintf_102:
00004228  102E FFD1 7007          move.b    -47(A6),D0
0000422C  4880      7008          ext.w     D0
0000422E  48C0      7009          ext.l     D0
00004230  220D      7010          move.l    A5,D1
00004232  534D      7011          subq.w    #1,A5
00004234  B081      7012          cmp.l     D1,D0
00004236  6C0E      7013          bge.s     vsprintf_104
00004238  4878 0020 7014          pea       32
0000423C  2F0A      7015          move.l    A2,-(A7)
0000423E  4E93      7016          jsr       (A3)
00004240  504F      7017          addq.w    #8,A7
00004242  5286      7018          addq.l    #1,D6
00004244  60E2      7019          bra       vsprintf_102
                    7020   vsprintf_104:
00004246  41EE FFD4 7021          lea       -44(A6),A0
0000424A  2408      7022          move.l    A0,D2
                    7023   vsprintf_105:
0000424C  2042      7024          move.l    D2,A0
0000424E  4A10      7025          tst.b     (A0)
00004250  6716      7026          beq.s     vsprintf_107
00004252  2042      7027          move.l    D2,A0
00004254  5282      7028          addq.l    #1,D2
00004256  1210      7029          move.b    (A0),D1
00004258  4881      7030          ext.w     D1
0000425A  48C1      7031          ext.l     D1
0000425C  2F01      7032          move.l    D1,-(A7)
0000425E  2F0A      7033          move.l    A2,-(A7)
00004260  4E93      7034          jsr       (A3)
00004262  504F      7035          addq.w    #8,A7
00004264  5286      7036          addq.l    #1,D6
00004266  60E4      7037          bra       vsprintf_105
                    7038   vsprintf_107:
00004268  202E FFFC 7039          move.l    -4(A6),D0
0000426C  1D40 FFD1 7040          move.b    D0,-47(A6)
                    7041   vsprintf_108:
00004270  102E FFD1 7042          move.b    -47(A6),D0
00004274  532E FFD1 7043          subq.b    #1,-47(A6)
00004278  4A00      7044          tst.b     D0
0000427A  670E      7045          beq.s     vsprintf_110
0000427C  4878 0030 7046          pea       48
00004280  2F0A      7047          move.l    A2,-(A7)
00004282  4E93      7048          jsr       (A3)
00004284  504F      7049          addq.w    #8,A7
00004286  5286      7050          addq.l    #1,D6
00004288  60E6      7051          bra       vsprintf_108
                    7052   vsprintf_110:
0000428A  2043      7053          move.l    D3,A0
0000428C  4A10      7054          tst.b     (A0)
0000428E  6700 0048 7055          beq       vsprintf_113
00004292  206E 000C 7056          move.l    12(A6),A0
00004296  1010      7057          move.b    (A0),D0
00004298  4880      7058          ext.w     D0
0000429A  48C0      7059          ext.l     D0
0000429C  0C80 0000 7060          cmp.l     #115,D0
000042A0  0073      
000042A2  670C      7061          beq.s     vsprintf_116
000042A4  6E18      7062          bgt.s     vsprintf_119
000042A6  0C80 0000 7063          cmp.l     #99,D0
000042AA  0063      
000042AC  6702      7064          beq.s     vsprintf_116
000042AE  600E      7065          bra.s     vsprintf_119
                    7066   vsprintf_116:
000042B0  2005      7067          move.l    D5,D0
000042B2  5385      7068          subq.l    #1,D5
000042B4  0C80 0000 7069          cmp.l     #0,D0
000042B8  0000      
000042BA  6E02      7070          bgt.s     vsprintf_119
000042BC  6016      7071          bra.s     vsprintf_115
                    7072   vsprintf_119:
000042BE  2043      7073          move.l    D3,A0
000042C0  5283      7074          addq.l    #1,D3
000042C2  1210      7075          move.b    (A0),D1
000042C4  4881      7076          ext.w     D1
000042C6  48C1      7077          ext.l     D1
000042C8  2F01      7078          move.l    D1,-(A7)
000042CA  2F0A      7079          move.l    A2,-(A7)
000042CC  4E93      7080          jsr       (A3)
000042CE  504F      7081          addq.w    #8,A7
000042D0  5286      7082          addq.l    #1,D6
000042D2  6002      7083          bra.s     vsprintf_112
                    7084   vsprintf_115:
000042D4  6002      7085          bra.s     vsprintf_113
                    7086   vsprintf_112:
000042D6  60B2      7087          bra       vsprintf_110
                    7088   vsprintf_113:
000042D8  4A2E FFCD 7089          tst.b     -51(A6)
000042DC  6700 0030 7090          beq       vsprintf_125
000042E0  4884      7091          ext.w     D4
000042E2  48C4      7092          ext.l     D4
000042E4  2004      7093          move.l    D4,D0
000042E6  D0AE FFFC 7094          add.l     -4(A6),D0
000042EA  D087      7095          add.l     D7,D0
000042EC  1D40 FFD1 7096          move.b    D0,-47(A6)
                    7097   vsprintf_123:
000042F0  102E FFD1 7098          move.b    -47(A6),D0
000042F4  4880      7099          ext.w     D0
000042F6  48C0      7100          ext.l     D0
000042F8  220D      7101          move.l    A5,D1
000042FA  534D      7102          subq.w    #1,A5
000042FC  B081      7103          cmp.l     D1,D0
000042FE  6C0E      7104          bge.s     vsprintf_125
00004300  4878 0020 7105          pea       32
00004304  2F0A      7106          move.l    A2,-(A7)
00004306  4E93      7107          jsr       (A3)
00004308  504F      7108          addq.w    #8,A7
0000430A  5386      7109          subq.l    #1,D6
0000430C  60E2      7110          bra       vsprintf_123
                    7111   vsprintf_125:
0000430E  6014      7112          bra.s     vsprintf_81
                    7113   vsprintf_80:
00004310  206E 000C 7114          move.l    12(A6),A0
00004314  1210      7115          move.b    (A0),D1
00004316  4881      7116          ext.w     D1
00004318  48C1      7117          ext.l     D1
0000431A  2F01      7118          move.l    D1,-(A7)
0000431C  2F0A      7119          move.l    A2,-(A7)
0000431E  4E93      7120          jsr       (A3)
00004320  504F      7121          addq.w    #8,A7
00004322  5286      7122          addq.l    #1,D6
                    7123   vsprintf_81:
00004324  52AE 000C 7124          addq.l    #1,12(A6)
                    7125   vsprintf_2:
00004328  6000 F9D6 7126          bra       vsprintf_1
                    7127   vsprintf_3:
0000432C  4A92      7128          tst.l     (A2)
0000432E  6710      7129          beq.s     vsprintf_126
00004330  4201      7130          clr.b     D1
00004332  C2BC 0000 7131          and.l     #255,D1
00004336  00FF      
00004338  2F01      7132          move.l    D1,-(A7)
0000433A  2F0A      7133          move.l    A2,-(A7)
0000433C  4E93      7134          jsr       (A3)
0000433E  504F      7135          addq.w    #8,A7
                    7136   vsprintf_126:
00004340  2006      7137          move.l    D6,D0
00004342  4CDF 3CFC 7138          movem.l   (A7)+,D2/D3/D4/D5/D6/D7/A2/A3/A4/A5
00004346  4E5E      7139          unlk      A6
00004348  4E75      7140          rts
                    7141   ULMUL:
0000434A  4E56 0000 7142          link    A6,#0
0000434E  48E7 C000 7143          movem.l D0/D1,-(A7)
00004352  222E 0008 7144          move.l  8(A6),D1
00004356  202E 000C 7145          move.l  12(A6),D0
0000435A  602C      7146          bra.s   lmul_3
                    7147   LMUL:
0000435C  4E56 0000 7148          link    A6,#0
00004360  48E7 C000 7149          movem.l D0/D1,-(A7)
00004364  222E 0008 7150          move.l  8(A6),D1
00004368  202E 000C 7151          move.l  12(A6),D0
0000436C  4A80      7152          tst.l   D0
0000436E  6A0A      7153          bpl.s   lmul_1
00004370  4480      7154          neg.l   D0
00004372  4A81      7155          tst.l   D1
00004374  6A0A      7156          bpl.s   lmul_2
00004376  4481      7157          neg.l   D1
00004378  600E      7158          bra.s   lmul_3
                    7159   lmul_1:
0000437A  4A81      7160          tst.l   D1
0000437C  6A0A      7161          bpl.s   lmul_3
0000437E  4481      7162          neg.l   D1
                    7163   lmul_2:
00004380  6114      7164          bsr.s   domul
00004382  4481      7165          neg.l   D1
00004384  4080      7166          negx.l  D0
00004386  6002      7167          bra.s   lmul_4
                    7168   lmul_3:
00004388  610C      7169          bsr.s   domul
                    7170   lmul_4:
0000438A  2D41 0008 7171          move.l  D1,8(A6)
0000438E  4CDF 0003 7172          movem.l (A7)+,D0/D1
00004392  4E5E      7173          unlk    A6
00004394  4E75      7174          rts
                    7175   domul:
00004396  0C81 0000 7176          cmpi.l  #$FFFF,D1
0000439A  FFFF      
0000439C  620C      7177          bhi.s   domul_1
0000439E  0C80 0000 7178          cmpi.l  #$FFFF,D0
000043A2  FFFF      
000043A4  620E      7179          bhi.s   domul_2
000043A6  C2C0      7180          mulu    D0,D1
000043A8  4E75      7181          rts
                    7182   domul_1:
000043AA  0C80 0000 7183          cmpi.l  #$FFFF,D0
000043AE  FFFF      
000043B0  6218      7184          bhi.s   domul_4
000043B2  6002      7185          bra.s   domul_3
                    7186   domul_2
000043B4  C141      7187          exg     D0,D1
                    7188   domul_3:
000043B6  2F02      7189          move.l  D2,-(A7)
000043B8  2401      7190          move.l  D1,D2
000043BA  4842      7191          swap    D2
000043BC  C2C0      7192          mulu    D0,D1
000043BE  C4C0      7193          mulu    D0,D2
000043C0  4842      7194          swap    D2
000043C2  4242      7195          clr.w   D2
000043C4  D282      7196          add.l   D2,D1
000043C6  241F      7197          move.l  (A7)+,D2
000043C8  4E75      7198          rts
                    7199   domul_4:
000043CA  48E7 3000 7200          movem.l D2/D3,-(A7)
000043CE  2401      7201          move.l  D1,D2
000043D0  2601      7202          move.l  D1,D3
000043D2  C2C0      7203          mulu    D0,D1
000043D4  4842      7204          swap    D2
000043D6  C4C0      7205          mulu    D0,D2
000043D8  4840      7206          swap    D0
000043DA  C6C0      7207          mulu    D0,D3
000043DC  D483      7208          add.l   D3,D2
000043DE  4842      7209          swap    D2
000043E0  4242      7210          clr.w   D2
000043E2  D282      7211          add.l   D2,D1
000043E4  4CDF 000C 7212          movem.l (A7)+,D2/D3
000043E8  4E75      7213          rts
                    7214   _gets:
000043EA  4E56 0000 7215          link      A6,#0
000043EE  48E7 3820 7216          movem.l   D2/D3/D4/A2,-(A7)
000043F2  45F8 3260 7217          lea       _putch,A2
000043F6  282E 0008 7218          move.l    8(A6),D4
000043FA  2404      7219          move.l    D4,D2
                    7220   gets_1:
000043FC  6100 EE92 7221          bsr       _getch
00004400  2600      7222          move.l    D0,D3
00004402  0C80 0000 7223          cmp.l     #10,D0
00004406  000A      
00004408  6700 003C 7224          beq       gets_3
0000440C  0C83 0000 7225          cmp.l     #8,D3
00004410  0008      
00004412  6712      7226          beq.s     gets_4
00004414  2042      7227          move.l    D2,A0
00004416  5282      7228          addq.l    #1,D2
00004418  1083      7229          move.b    D3,(A0)
0000441A  4883      7230          ext.w     D3
0000441C  48C3      7231          ext.l     D3
0000441E  2F03      7232          move.l    D3,-(A7)
00004420  4E92      7233          jsr       (A2)
00004422  584F      7234          addq.w    #4,A7
00004424  601E      7235          bra.s     gets_6
                    7236   gets_4:
00004426  B484      7237          cmp.l     D4,D2
00004428  631A      7238          bls.s     gets_6
0000442A  4878 0008 7239          pea       8
0000442E  4E92      7240          jsr       (A2)
00004430  584F      7241          addq.w    #4,A7
00004432  4878 0020 7242          pea       32
00004436  4E92      7243          jsr       (A2)
00004438  584F      7244          addq.w    #4,A7
0000443A  4878 0008 7245          pea       8
0000443E  4E92      7246          jsr       (A2)
00004440  584F      7247          addq.w    #4,A7
00004442  5382      7248          subq.l    #1,D2
                    7249   gets_6:
00004444  60B6      7250          bra       gets_1
                    7251   gets_3:
00004446  4878 000A 7252          pea       10
0000444A  4E92      7253          jsr       (A2)
0000444C  584F      7254          addq.w    #4,A7
0000444E  2042      7255          move.l    D2,A0
00004450  4210      7256          clr.b     (A0)
00004452  2004      7257          move.l    D4,D0
00004454  4CDF 041C 7258          movem.l   (A7)+,D2/D3/D4/A2
00004458  4E5E      7259          unlk      A6
0000445A  4E75      7260          rts
                    7261   _ungetch:
0000445C  4E56 0000 7262          link      A6,#0
00004460  23EE 0008 7263          move.l    8(A6),__ungetbuf
00004464  0803 00C0 
00004468  202E 0008 7264          move.l    8(A6),D0
0000446C  4E5E      7265          unlk      A6
0000446E  4E75      7266          rts
                    7267   @itoa_convert:
00004470  4E56 0000 7268          link      A6,#0
00004474  48E7 3C00 7269          movem.l   D2/D3/D4/D5,-(A7)
00004478  242E 0008 7270          move.l    8(A6),D2
0000447C  262E 0010 7271          move.l    16(A6),D3
00004480  2A2E 000C 7272          move.l    12(A6),D5
00004484  2F05      7273          move.l    D5,-(A7)
00004486  2F03      7274          move.l    D3,-(A7)
00004488  6100 ECE6 7275          bsr       ULDIV
0000448C  202F 0004 7276          move.l    4(A7),D0
00004490  504F      7277          addq.w    #8,A7
00004492  2800      7278          move.l    D0,D4
00004494  BA83      7279          cmp.l     D3,D5
00004496  651A      7280          blo.s     @itoa_convert_1
00004498  2F03      7281          move.l    D3,-(A7)
0000449A  2F05      7282          move.l    D5,-(A7)
0000449C  2F03      7283          move.l    D3,-(A7)
0000449E  6100 ECD0 7284          bsr       ULDIV
000044A2  2217      7285          move.l    (A7),D1
000044A4  504F      7286          addq.w    #8,A7
000044A6  2F01      7287          move.l    D1,-(A7)
000044A8  2F02      7288          move.l    D2,-(A7)
000044AA  61C4      7289          bsr       @itoa_convert
000044AC  DEFC 000C 7290          add.w     #12,A7
000044B0  2400      7291          move.l    D0,D2
                    7292   @itoa_convert_1:
000044B2  0C84 0000 7293          cmp.l     #9,D4
000044B6  0009      
000044B8  6E0A      7294          bgt.s     @itoa_convert_3
000044BA  2004      7295          move.l    D4,D0
000044BC  0680 0000 7296          add.l     #48,D0
000044C0  0030      
000044C2  600E      7297          bra.s     @itoa_convert_4
                    7298   @itoa_convert_3:
000044C4  2004      7299          move.l    D4,D0
000044C6  0680 0000 7300          add.l     #97,D0
000044CA  0061      
000044CC  0480 0000 7301          sub.l     #10,D0
000044D0  000A      
                    7302   @itoa_convert_4:
000044D2  2042      7303          move.l    D2,A0
000044D4  1080      7304          move.b    D0,(A0)
000044D6  2002      7305          move.l    D2,D0
000044D8  5280      7306          addq.l    #1,D0
000044DA  4CDF 003C 7307          movem.l   (A7)+,D2/D3/D4/D5
000044DE  4E5E      7308          unlk      A6
000044E0  4E75      7309          rts
                    7310   _ltoa:
000044E2  4E56 0000 7311          link      A6,#0
000044E6  48E7 3C00 7312          movem.l   D2/D3/D4/D5,-(A7)
000044EA  242E 0008 7313          move.l    8(A6),D2
000044EE  262E 000C 7314          move.l    12(A6),D3
000044F2  2A2E 0010 7315          move.l    16(A6),D5
000044F6  2803      7316          move.l    D3,D4
000044F8  0C85 0000 7317          cmp.l     #2,D5
000044FC  0002      
000044FE  6D08      7318          blt.s     ltoa_3
00004500  0C85 0000 7319          cmp.l     #36,D5
00004504  0024      
00004506  6F06      7320          ble.s     ltoa_1
                    7321   ltoa_3:
00004508  2003      7322          move.l    D3,D0
0000450A  6000 0052 7323          bra       ltoa_4
                    7324   ltoa_1:
0000450E  0C85 0000 7325          cmp.l     #10,D5
00004512  000A      
00004514  6600 0032 7326          bne       ltoa_5
00004518  0C82 0000 7327          cmp.l     #0,D2
0000451C  0000      
0000451E  6C28      7328          bge.s     ltoa_5
00004520  2002      7329          move.l    D2,D0
00004522  4480      7330          neg.l     D0
00004524  2400      7331          move.l    D0,D2
00004526  0C82 0000 7332          cmp.l     #0,D2
0000452A  0000      
0000452C  6C12      7333          bge.s     ltoa_7
0000452E  4879 0000 7334          pea       @itoa_1
00004532  5B50      
00004534  2F03      7335          move.l    D3,-(A7)
00004536  6100 EC28 7336          bsr       _strcpy
0000453A  504F      7337          addq.w    #8,A7
0000453C  2003      7338          move.l    D3,D0
0000453E  601E      7339          bra.s     ltoa_4
                    7340   ltoa_7:
00004540  2044      7341          move.l    D4,A0
00004542  5284      7342          addq.l    #1,D4
00004544  10BC 002D 7343          move.b    #45,(A0)
                    7344   ltoa_5:
00004548  2F05      7345          move.l    D5,-(A7)
0000454A  2F02      7346          move.l    D2,-(A7)
0000454C  2F04      7347          move.l    D4,-(A7)
0000454E  6100 FF20 7348          bsr       @itoa_convert
00004552  DEFC 000C 7349          add.w     #12,A7
00004556  2800      7350          move.l    D0,D4
00004558  2044      7351          move.l    D4,A0
0000455A  4210      7352          clr.b     (A0)
0000455C  2003      7353          move.l    D3,D0
                    7354   ltoa_4:
0000455E  4CDF 003C 7355          movem.l   (A7)+,D2/D3/D4/D5
00004562  4E5E      7356          unlk      A6
00004564  4E75      7357          rts
                    7358   _ultoa:
00004566  4E56 0000 7359          link      A6,#0
0000456A  48E7 3800 7360          movem.l   D2/D3/D4,-(A7)
0000456E  262E 0010 7361          move.l    16(A6),D3
00004572  282E 000C 7362          move.l    12(A6),D4
00004576  2404      7363          move.l    D4,D2
00004578  0C83 0000 7364          cmp.l     #2,D3
0000457C  0002      
0000457E  6D08      7365          blt.s     ultoa_3
00004580  0C83 0000 7366          cmp.l     #36,D3
00004584  0024      
00004586  6F04      7367          ble.s     ultoa_1
                    7368   ultoa_3:
00004588  2004      7369          move.l    D4,D0
0000458A  6018      7370          bra.s     ultoa_4
                    7371   ultoa_1:
0000458C  2F03      7372          move.l    D3,-(A7)
0000458E  2F2E 0008 7373          move.l    8(A6),-(A7)
00004592  2F02      7374          move.l    D2,-(A7)
00004594  6100 FEDA 7375          bsr       @itoa_convert
00004598  DEFC 000C 7376          add.w     #12,A7
0000459C  2400      7377          move.l    D0,D2
0000459E  2042      7378          move.l    D2,A0
000045A0  4210      7379          clr.b     (A0)
000045A2  2004      7380          move.l    D4,D0
                    7381   ultoa_4:
000045A4  4CDF 001C 7382          movem.l   (A7)+,D2/D3/D4
000045A8  4E5E      7383          unlk      A6
000045AA  4E75      7384          rts
                    7385   _itoa:
000045AC  4E56 0000 7386          link      A6,#0
000045B0  2F2E 0010 7387          move.l    16(A6),-(A7)
000045B4  2F2E 000C 7388          move.l    12(A6),-(A7)
000045B8  2F2E 0008 7389          move.l    8(A6),-(A7)
000045BC  6100 FF24 7390          bsr       _ltoa
000045C0  DEFC 000C 7391          add.w     #12,A7
000045C4  4E5E      7392          unlk      A6
000045C6  4E75      7393          rts
                    7394          section   const
                    7395   
                    7396   @m68kde~1_1:
000045C8  0D0A 00   7397          dc.b      13,10,0
                    7398   @m68kde~1_2:
000045CC  0D53 7769 7399          dc.b      13,83,119,105,116,99,104,101,115,32,83,87,91
000045D0  7463 6865 
000045D4  7320 5357 
000045D8  5B        
000045D9  372D 305D 7400          dc.b      55,45,48,93,32,61,32,0
000045DD  203D 2000 
                    7401   @m68kde~1_3:
000045E2  3000      7402          dc.b      48,0
                    7403   @m68kde~1_4:
000045E4  3100      7404          dc.b      49,0
                    7405   @m68kde~1_5:
000045E6  0D0A 4475 7406          dc.b      13,10,68,117,109,112,32,77,101,109,111,114,121
000045EA  6D70 204D 
000045EE  656D 6F72 
000045F2  79        
000045F3  2042 6C6F 7407          dc.b      32,66,108,111,99,107,58,32,60,69,83,67,62,32
000045F7  636B 3A20 
000045FB  3C45 5343 
000045FF  3E20      
00004601  746F 2041 7408          dc.b      116,111,32,65,98,111,114,116,44,32,60,83,80
00004605  626F 7274 
00004609  2C20 3C53 
0000460D  50        
0000460E  4143 453E 7409          dc.b      65,67,69,62,32,116,111,32,67,111,110,116,105
00004612  2074 6F20 
00004616  436F 6E74 
0000461A  69        
0000461B  6E75 6500 7410          dc.b      110,117,101,0
                    7411   @m68kde~1_6:
00004620  0D0A 456E 7412          dc.b      13,10,69,110,116,101,114,32,83,116,97,114,116
00004624  7465 7220 
00004628  5374 6172 
0000462C  74        
0000462D  2041 6464 7413          dc.b      32,65,100,100,114,101,115,115,58,32,0
00004631  7265 7373 
00004635  3A20 00   
                    7414   @m68kde~1_7:
00004638  0D0A 2530 7415          dc.b      13,10,37,48,56,120,32,0
0000463C  3878 2000 
                    7416   @m68kde~1_8:
00004640  2530 3258 7417          dc.b      37,48,50,88,0
00004644  00        
                    7418   @m68kde~1_9:
00004646  2020 00   7419          dc.b      32,32,0
                    7420   @m68kde~1_10:
0000464A  0D0A 4669 7421          dc.b      13,10,70,105,108,108,32,77,101,109,111,114,121
0000464E  6C6C 204D 
00004652  656D 6F72 
00004656  79        
00004657  2042 6C6F 7422          dc.b      32,66,108,111,99,107,0
0000465B  636B 00   
                    7423   @m68kde~1_11:
0000465E  0D0A 456E 7424          dc.b      13,10,69,110,116,101,114,32,69,110,100,32,65
00004662  7465 7220 
00004666  456E 6420 
0000466A  41        
0000466B  6464 7265 7425          dc.b      100,100,114,101,115,115,58,32,0
0000466F  7373 3A20 
00004673  00        
                    7426   @m68kde~1_12:
00004674  0D0A 456E 7427          dc.b      13,10,69,110,116,101,114,32,70,105,108,108,32
00004678  7465 7220 
0000467C  4669 6C6C 
00004680  20        
00004681  4461 7461 7428          dc.b      68,97,116,97,58,32,0
00004685  3A20 00   
                    7429   @m68kde~1_13:
00004688  0D0A 4669 7430          dc.b      13,10,70,105,108,108,105,110,103,32,65,100,100
0000468C  6C6C 696E 
00004690  6720 4164 
00004694  64        
00004695  7265 7373 7431          dc.b      114,101,115,115,101,115,32,91,36,37,48,56,88
00004699  6573 205B 
0000469D  2425 3038 
000046A1  58        
000046A2  202D 2024 7432          dc.b      32,45,32,36,37,48,56,88,93,32,119,105,116,104
000046A6  2530 3858 
000046AA  5D20 7769 
000046AE  7468      
000046B0  2024 2530 7433          dc.b      32,36,37,48,50,88,0
000046B4  3258 00   
                    7434   @m68kde~1_14:
000046B8  0D0A 5573 7435          dc.b      13,10,85,115,101,32,72,121,112,101,114,84,101
000046BC  6520 4879 
000046C0  7065 7254 
000046C4  65        
000046C5  726D 696E 7436          dc.b      114,109,105,110,97,108,32,116,111,32,83,101
000046C9  616C 2074 
000046CD  6F20 5365 
000046D1  6E64 2054 7437          dc.b      110,100,32,84,101,120,116,32,70,105,108,101
000046D5  6578 7420 
000046D9  4669 6C65 
000046DD  2028 2E68 7438          dc.b      32,40,46,104,101,120,41,13,10,0
000046E1  6578 290D 
000046E5  0A00      
                    7439   @m68kde~1_15:
000046E8  0D0A 4C6F 7440          dc.b      13,10,76,111,97,100,32,70,97,105,108,101,100
000046EC  6164 2046 
000046F0  6169 6C65 
000046F4  64        
000046F5  2061 7420 7441          dc.b      32,97,116,32,65,100,100,114,101,115,115,32,61
000046F9  4164 6472 
000046FD  6573 7320 
00004701  3D        
00004702  205B 2425 7442          dc.b      32,91,36,37,48,56,88,93,13,10,0
00004706  3038 585D 
0000470A  0D0A 00   
                    7443   @m68kde~1_16:
0000470E  0D0A 5375 7444          dc.b      13,10,83,117,99,99,101,115,115,58,32,68,111
00004712  6363 6573 
00004716  733A 2044 
0000471A  6F        
0000471B  776E 6C6F 7445          dc.b      119,110,108,111,97,100,101,100,32,37,100,32
0000471F  6164 6564 
00004723  2025 6420 
00004727  6279 7465 7446          dc.b      98,121,116,101,115,13,10,0
0000472B  730D 0A00 
                    7447   @m68kde~1_17:
00004730  0D0A 4578 7448          dc.b      13,10,69,120,97,109,105,110,101,32,97,110,100
00004734  616D 696E 
00004738  6520 616E 
0000473C  64        
0000473D  2043 6861 7449          dc.b      32,67,104,97,110,103,101,32,77,101,109,111,114
00004741  6E67 6520 
00004745  4D65 6D6F 
00004749  72        
0000474A  7900      7450          dc.b      121,0
                    7451   @m68kde~1_18:
0000474C  0D0A 3C45 7452          dc.b      13,10,60,69,83,67,62,32,116,111,32,83,116,111
00004750  5343 3E20 
00004754  746F 2053 
00004758  746F      
0000475A  702C 203C 7453          dc.b      112,44,32,60,83,80,65,67,69,62,32,116,111,32
0000475E  5350 4143 
00004762  453E 2074 
00004766  6F20      
00004768  4164 7661 7454          dc.b      65,100,118,97,110,99,101,44,32,39,45,39,32,116
0000476C  6E63 652C 
00004770  2027 2D27 
00004774  2074      
00004776  6F20 476F 7455          dc.b      111,32,71,111,32,66,97,99,107,44,32,60,68,65
0000477A  2042 6163 
0000477E  6B2C 203C 
00004782  4441      
00004784  5441 3E20 7456          dc.b      84,65,62,32,116,111,32,99,104,97,110,103,101
00004788  746F 2063 
0000478C  6861 6E67 
00004790  65        
00004791  00        7457          dc.b      0
                    7458   @m68kde~1_19:
00004792  0D0A 456E 7459          dc.b      13,10,69,110,116,101,114,32,65,100,100,114,101
00004796  7465 7220 
0000479A  4164 6472 
0000479E  65        
0000479F  7373 3A20 7460          dc.b      115,115,58,32,0
000047A3  00        
                    7461   @m68kde~1_20:
000047A4  0D0A 5B25 7462          dc.b      13,10,91,37,48,56,120,93,32,58,32,37,48,50,120
000047A8  3038 785D 
000047AC  203A 2025 
000047B0  3032 78   
000047B3  2020 00   7463          dc.b      32,32,0
                    7464   @m68kde~1_21:
000047B6  0D0A 5761 7465          dc.b      13,10,87,97,114,110,105,110,103,32,67,104,97
000047BA  726E 696E 
000047BE  6720 4368 
000047C2  61        
000047C3  6E67 6520 7466          dc.b      110,103,101,32,70,97,105,108,101,100,58,32,87
000047C7  4661 696C 
000047CB  6564 3A20 
000047CF  57        
000047D0  726F 7465 7467          dc.b      114,111,116,101,32,91,37,48,50,120,93,44,32
000047D4  205B 2530 
000047D8  3278 5D2C 
000047DC  20        
000047DD  5265 6164 7468          dc.b      82,101,97,100,32,91,37,48,50,120,93,0
000047E1  205B 2530 
000047E5  3278 5D00 
                    7469   @m68kde~1_22:
000047EA  0D0A 4C6F 7470          dc.b      13,10,76,111,97,100,105,110,103,32,80,114,111
000047EE  6164 696E 
000047F2  6720 5072 
000047F6  6F        
000047F7  6772 616D 7471          dc.b      103,114,97,109,32,70,114,111,109,32,83,80,73
000047FB  2046 726F 
000047FF  6D20 5350 
00004803  49        
00004804  2046 6C61 7472          dc.b      32,70,108,97,115,104,46,46,46,46,0
00004808  7368 2E2E 
0000480C  2E2E 00   
                    7473   @m68kde~1_23:
00004810  2425 3038 7474          dc.b      36,37,48,56,88,32,32,0
00004814  5820 2000 
                    7475   @m68kde~1_24:
00004818  2000      7476          dc.b      32,0
                    7477   @m68kde~1_25:
0000481A  2E00      7478          dc.b      46,0
                    7479   @m68kde~1_26:
0000481C  2563 00   7480          dc.b      37,99,0
                    7481   @m68kde~1_27:
00004820  00        7482          dc.b      0
                    7483   @m68kde~1_28:
00004822  0D0A 0D0A 7484          dc.b      13,10,13,10,32,68,48,32,61,32,36,37,48,56,88
00004826  2044 3020 
0000482A  3D20 2425 
0000482E  3038 58   
00004831  2020 4130 7485          dc.b      32,32,65,48,32,61,32,36,37,48,56,88,0
00004835  203D 2024 
00004839  2530 3858 
0000483D  00        
                    7486   @m68kde~1_29:
0000483E  0D0A 2044 7487          dc.b      13,10,32,68,49,32,61,32,36,37,48,56,88,32,32
00004842  3120 3D20 
00004846  2425 3038 
0000484A  5820 20   
0000484D  4131 203D 7488          dc.b      65,49,32,61,32,36,37,48,56,88,0
00004851  2024 2530 
00004855  3858 00   
                    7489   @m68kde~1_30:
00004858  0D0A 2044 7490          dc.b      13,10,32,68,50,32,61,32,36,37,48,56,88,32,32
0000485C  3220 3D20 
00004860  2425 3038 
00004864  5820 20   
00004867  4132 203D 7491          dc.b      65,50,32,61,32,36,37,48,56,88,0
0000486B  2024 2530 
0000486F  3858 00   
                    7492   @m68kde~1_31:
00004872  0D0A 2044 7493          dc.b      13,10,32,68,51,32,61,32,36,37,48,56,88,32,32
00004876  3320 3D20 
0000487A  2425 3038 
0000487E  5820 20   
00004881  4133 203D 7494          dc.b      65,51,32,61,32,36,37,48,56,88,0
00004885  2024 2530 
00004889  3858 00   
                    7495   @m68kde~1_32:
0000488C  0D0A 2044 7496          dc.b      13,10,32,68,52,32,61,32,36,37,48,56,88,32,32
00004890  3420 3D20 
00004894  2425 3038 
00004898  5820 20   
0000489B  4134 203D 7497          dc.b      65,52,32,61,32,36,37,48,56,88,0
0000489F  2024 2530 
000048A3  3858 00   
                    7498   @m68kde~1_33:
000048A6  0D0A 2044 7499          dc.b      13,10,32,68,53,32,61,32,36,37,48,56,88,32,32
000048AA  3520 3D20 
000048AE  2425 3038 
000048B2  5820 20   
000048B5  4135 203D 7500          dc.b      65,53,32,61,32,36,37,48,56,88,0
000048B9  2024 2530 
000048BD  3858 00   
                    7501   @m68kde~1_34:
000048C0  0D0A 2044 7502          dc.b      13,10,32,68,54,32,61,32,36,37,48,56,88,32,32
000048C4  3620 3D20 
000048C8  2425 3038 
000048CC  5820 20   
000048CF  4136 203D 7503          dc.b      65,54,32,61,32,36,37,48,56,88,0
000048D3  2024 2530 
000048D7  3858 00   
                    7504   @m68kde~1_35:
000048DA  0D0A 2044 7505          dc.b      13,10,32,68,55,32,61,32,36,37,48,56,88,32,32
000048DE  3720 3D20 
000048E2  2425 3038 
000048E6  5820 20   
000048E9  4137 203D 7506          dc.b      65,55,32,61,32,36,37,48,56,88,0
000048ED  2024 2530 
000048F1  3858 00   
                    7507   @m68kde~1_36:
000048F4  0D0A 0D0A 7508          dc.b      13,10,13,10,85,83,80,32,61,32,36,37,48,56,88
000048F8  5553 5020 
000048FC  3D20 2425 
00004900  3038 58   
00004903  2020 2841 7509          dc.b      32,32,40,65,55,41,32,85,115,101,114,32,83,80
00004907  3729 2055 
0000490B  7365 7220 
0000490F  5350      
00004911  00        7510          dc.b      0
                    7511   @m68kde~1_37:
00004912  0D0A 5353 7512          dc.b      13,10,83,83,80,32,61,32,36,37,48,56,88,32,32
00004916  5020 3D20 
0000491A  2425 3038 
0000491E  5820 20   
00004921  2841 3729 7513          dc.b      40,65,55,41,32,83,117,112,101,114,118,105,115
00004925  2053 7570 
00004929  6572 7669 
0000492D  73        
0000492E  6F72 2053 7514          dc.b      111,114,32,83,80,0
00004932  5000      
                    7515   @m68kde~1_38:
00004934  0D0A 2053 7516          dc.b      13,10,32,83,82,32,61,32,36,37,48,52,88,32,32
00004938  5220 3D20 
0000493C  2425 3034 
00004940  5820 20   
00004943  2000      7517          dc.b      32,0
                    7518   @m68kde~1_39:
00004946  2020 205B 7519          dc.b      32,32,32,91,0
0000494A  00        
                    7520   @m68kde~1_40:
0000494C  0D0A 2050 7521          dc.b      13,10,32,80,67,32,61,32,36,37,48,56,88,32,32
00004950  4320 3D20 
00004954  2425 3038 
00004958  5820 20   
0000495B  00        7522          dc.b      0
                    7523   @m68kde~1_41:
0000495C  5B40 2042 7524          dc.b      91,64,32,66,82,69,65,75,80,79,73,78,84,93,0
00004960  5245 414B 
00004964  504F 494E 
00004968  545D 00   
                    7525   @m68kde~1_42:
0000496C  0D0A 5750 7526          dc.b      13,10,87,80,37,100,32,61,32,37,115,0
00004970  2564 203D 
00004974  2025 7300 
                    7527   @m68kde~1_43:
00004978  0D0A 0D0A 7528          dc.b      13,10,13,10,13,10,13,10,13,10,13,10,83,105,110
0000497C  0D0A 0D0A 
00004980  0D0A 0D0A 
00004984  5369 6E   
00004987  676C 6520 7529          dc.b      103,108,101,32,83,116,101,112,32,32,58,91,79
0000498B  5374 6570 
0000498F  2020 3A5B 
00004993  4F        
00004994  4E5D 00   7530          dc.b      78,93,0
                    7531   @m68kde~1_44:
00004998  0D0A 4272 7532          dc.b      13,10,66,114,101,97,107,32,80,111,105,110,116
0000499C  6561 6B20 
000049A0  506F 696E 
000049A4  74        
000049A5  7320 3A5B 7533          dc.b      115,32,58,91,68,105,115,97,98,108,101,100,93
000049A9  4469 7361 
000049AD  626C 6564 
000049B1  5D        
000049B2  00        7534          dc.b      0
                    7535   @m68kde~1_45:
000049B4  0D0A 5072 7536          dc.b      13,10,80,114,101,115,115,32,60,83,80,65,67,69
000049B8  6573 7320 
000049BC  3C53 5041 
000049C0  4345      
000049C2  3E20 746F 7537          dc.b      62,32,116,111,32,69,120,101,99,117,116,101,32
000049C6  2045 7865 
000049CA  6375 7465 
000049CE  20        
000049CF  4E65 7874 7538          dc.b      78,101,120,116,32,73,110,115,116,114,117,99
000049D3  2049 6E73 
000049D7  7472 7563 
000049DB  7469 6F6E 7539          dc.b      116,105,111,110,0
000049DF  00        
                    7540   @m68kde~1_46:
000049E0  0D0A 5072 7541          dc.b      13,10,80,114,101,115,115,32,60,69,83,67,62,32
000049E4  6573 7320 
000049E8  3C45 5343 
000049EC  3E20      
000049EE  746F 2052 7542          dc.b      116,111,32,82,101,115,117,109,101,32,80,114
000049F2  6573 756D 
000049F6  6520 5072 
000049FA  6F67 7261 7543          dc.b      111,103,114,97,109,0
000049FE  6D00      
                    7544   @m68kde~1_47:
00004A00  0D0A 496C 7545          dc.b      13,10,73,108,108,101,103,97,108,32,68,97,116
00004A04  6C65 6761 
00004A08  6C20 4461 
00004A0C  74        
00004A0D  6120 5265 7546          dc.b      97,32,82,101,103,105,115,116,101,114,32,58,32
00004A11  6769 7374 
00004A15  6572 203A 
00004A19  20        
00004A1A  5573 6520 7547          dc.b      85,115,101,32,68,48,45,68,55,46,46,46,46,46
00004A1E  4430 2D44 
00004A22  372E 2E2E 
00004A26  2E2E      
00004A28  0D0A 00   7548          dc.b      13,10,0
                    7549   @m68kde~1_48:
00004A2C  0D0A 4425 7550          dc.b      13,10,68,37,99,32,61,32,0
00004A30  6320 3D20 
00004A34  00        
                    7551   @m68kde~1_49:
00004A36  0D0A 496C 7552          dc.b      13,10,73,108,108,101,103,97,108,32,65,100,100
00004A3A  6C65 6761 
00004A3E  6C20 4164 
00004A42  64        
00004A43  7265 7373 7553          dc.b      114,101,115,115,32,82,101,103,105,115,116,101
00004A47  2052 6567 
00004A4B  6973 7465 
00004A4F  7220 3A20 7554          dc.b      114,32,58,32,85,115,101,32,65,48,45,65,55,46
00004A53  5573 6520 
00004A57  4130 2D41 
00004A5B  372E      
00004A5D  2E2E 2E2E 7555          dc.b      46,46,46,46,13,10,0
00004A61  0D0A 00   
                    7556   @m68kde~1_50:
00004A64  0D0A 4125 7557          dc.b      13,10,65,37,99,32,61,32,0
00004A68  6320 3D20 
00004A6C  00        
                    7558   @m68kde~1_51:
00004A6E  0D0A 5573 7559          dc.b      13,10,85,115,101,114,32,83,80,32,61,32,0
00004A72  6572 2053 
00004A76  5020 3D20 
00004A7A  00        
                    7560   @m68kde~1_52:
00004A7C  0D0A 496C 7561          dc.b      13,10,73,108,108,101,103,97,108,32,82,101,103
00004A80  6C65 6761 
00004A84  6C20 5265 
00004A88  67        
00004A89  6973 7465 7562          dc.b      105,115,116,101,114,46,46,46,46,0
00004A8D  722E 2E2E 
00004A91  2E00      
                    7563   @m68kde~1_53:
00004A94  0D0A 5379 7564          dc.b      13,10,83,121,115,116,101,109,32,83,80,32,61
00004A98  7374 656D 
00004A9C  2053 5020 
00004AA0  3D        
00004AA1  2000      7565          dc.b      32,0
                    7566   @m68kde~1_54:
00004AA4  0D0A 5043 7567          dc.b      13,10,80,67,32,61,32,0
00004AA8  203D 2000 
                    7568   @m68kde~1_55:
00004AAC  0D0A 5352 7569          dc.b      13,10,83,82,32,61,32,0
00004AB0  203D 2000 
                    7570   @m68kde~1_56:
00004AB4  0D0A 496C 7571          dc.b      13,10,73,108,108,101,103,97,108,32,82,101,103
00004AB8  6C65 6761 
00004ABC  6C20 5265 
00004AC0  67        
00004AC1  6973 7465 7572          dc.b      105,115,116,101,114,58,32,85,115,101,32,65,48
00004AC5  723A 2055 
00004AC9  7365 2041 
00004ACD  30        
00004ACE  2D41 372C 7573          dc.b      45,65,55,44,32,68,48,45,68,55,44,32,83,83,80
00004AD2  2044 302D 
00004AD6  4437 2C20 
00004ADA  5353 50   
00004ADD  2C20 5553 7574          dc.b      44,32,85,83,80,44,32,80,67,32,111,114,32,83
00004AE1  502C 2050 
00004AE5  4320 6F72 
00004AE9  2053      
00004AEB  520D 0A00 7575          dc.b      82,13,10,0
                    7576   @m68kde~1_57:
00004AF0  0D0A 0D0A 7577          dc.b      13,10,13,10,78,117,109,32,32,32,32,32,65,100
00004AF4  4E75 6D20 
00004AF8  2020 2020 
00004AFC  4164      
00004AFE  6472 6573 7578          dc.b      100,114,101,115,115,32,32,32,32,32,32,73,110
00004B02  7320 2020 
00004B06  2020 2049 
00004B0A  6E        
00004B0B  7374 7275 7579          dc.b      115,116,114,117,99,116,105,111,110,0
00004B0F  6374 696F 
00004B13  6E00      
                    7580   @m68kde~1_58:
00004B16  0D0A 2D2D 7581          dc.b      13,10,45,45,45,32,32,32,32,32,45,45,45,45,45
00004B1A  2D20 2020 
00004B1E  2020 2D2D 
00004B22  2D2D 2D   
00004B25  2D2D 2D2D 7582          dc.b      45,45,45,45,32,32,32,32,45,45,45,45,45,45,45
00004B29  2020 2020 
00004B2D  2D2D 2D2D 
00004B31  2D2D 2D   
00004B34  2D2D 2D2D 7583          dc.b      45,45,45,45,0
00004B38  00        
                    7584   @m68kde~1_59:
00004B3A  0D0A 4E6F 7585          dc.b      13,10,78,111,32,66,114,101,97,107,80,111,105
00004B3E  2042 7265 
00004B42  616B 506F 
00004B46  69        
00004B47  6E74 7320 7586          dc.b      110,116,115,32,83,101,116,0
00004B4B  5365 7400 
                    7587   @m68kde~1_60:
00004B50  0D0A 2533 7588          dc.b      13,10,37,51,100,32,32,32,32,32,36,37,48,56,120
00004B54  6420 2020 
00004B58  2020 2425 
00004B5C  3038 78   
00004B5F  00        7589          dc.b      0
                    7590   @m68kde~1_61:
00004B60  0D0A 4E75 7591          dc.b      13,10,78,117,109,32,32,32,32,32,65,100,100,114
00004B64  6D20 2020 
00004B68  2020 4164 
00004B6C  6472      
00004B6E  6573 7300 7592          dc.b      101,115,115,0
                    7593   @m68kde~1_62:
00004B72  0D0A 2D2D 7594          dc.b      13,10,45,45,45,32,32,32,32,32,45,45,45,45,45
00004B76  2D20 2020 
00004B7A  2020 2D2D 
00004B7E  2D2D 2D   
00004B81  2D2D 2D2D 7595          dc.b      45,45,45,45,0
00004B85  00        
                    7596   @m68kde~1_63:
00004B86  0D0A 4E6F 7597          dc.b      13,10,78,111,32,87,97,116,99,104,80,111,105
00004B8A  2057 6174 
00004B8E  6368 506F 
00004B92  69        
00004B93  6E74 7320 7598          dc.b      110,116,115,32,83,101,116,0
00004B97  5365 7400 
                    7599   @m68kde~1_64:
00004B9C  0D0A 456E 7600          dc.b      13,10,69,110,116,101,114,32,66,114,101,97,107
00004BA0  7465 7220 
00004BA4  4272 6561 
00004BA8  6B        
00004BA9  2050 6F69 7601          dc.b      32,80,111,105,110,116,32,78,117,109,98,101,114
00004BAD  6E74 204E 
00004BB1  756D 6265 
00004BB5  72        
00004BB6  3A20 00   7602          dc.b      58,32,0
                    7603   @m68kde~1_65:
00004BBA  0D0A 496C 7604          dc.b      13,10,73,108,108,101,103,97,108,32,82,97,110
00004BBE  6C65 6761 
00004BC2  6C20 5261 
00004BC6  6E        
00004BC7  6765 203A 7605          dc.b      103,101,32,58,32,85,115,101,32,48,32,45,32,55
00004BCB  2055 7365 
00004BCF  2030 202D 
00004BD3  2037      
00004BD5  00        7606          dc.b      0
                    7607   @m68kde~1_66:
00004BD6  0D0A 4272 7608          dc.b      13,10,66,114,101,97,107,32,80,111,105,110,116
00004BDA  6561 6B20 
00004BDE  506F 696E 
00004BE2  74        
00004BE3  2043 6C65 7609          dc.b      32,67,108,101,97,114,101,100,46,46,46,46,46
00004BE7  6172 6564 
00004BEB  2E2E 2E2E 
00004BEF  2E        
00004BF0  0D0A 00   7610          dc.b      13,10,0
                    7611   @m68kde~1_67:
00004BF4  0D0A 4272 7612          dc.b      13,10,66,114,101,97,107,32,80,111,105,110,116
00004BF8  6561 6B20 
00004BFC  506F 696E 
00004C00  74        
00004C01  2077 6173 7613          dc.b      32,119,97,115,110,39,116,32,83,101,116,46,46
00004C05  6E27 7420 
00004C09  5365 742E 
00004C0D  2E        
00004C0E  2E2E 2E00 7614          dc.b      46,46,46,0
                    7615   @m68kde~1_68:
00004C12  0D0A 456E 7616          dc.b      13,10,69,110,116,101,114,32,87,97,116,99,104
00004C16  7465 7220 
00004C1A  5761 7463 
00004C1E  68        
00004C1F  2050 6F69 7617          dc.b      32,80,111,105,110,116,32,78,117,109,98,101,114
00004C23  6E74 204E 
00004C27  756D 6265 
00004C2B  72        
00004C2C  3A20 00   7618          dc.b      58,32,0
                    7619   @m68kde~1_69:
00004C30  0D0A 5761 7620          dc.b      13,10,87,97,116,99,104,32,80,111,105,110,116
00004C34  7463 6820 
00004C38  506F 696E 
00004C3C  74        
00004C3D  2043 6C65 7621          dc.b      32,67,108,101,97,114,101,100,46,46,46,46,46
00004C41  6172 6564 
00004C45  2E2E 2E2E 
00004C49  2E        
00004C4A  0D0A 00   7622          dc.b      13,10,0
                    7623   @m68kde~1_70:
00004C4E  0D0A 5761 7624          dc.b      13,10,87,97,116,99,104,32,80,111,105,110,116
00004C52  7463 6820 
00004C56  506F 696E 
00004C5A  74        
00004C5B  2057 6173 7625          dc.b      32,87,97,115,32,110,111,116,32,83,101,116,46
00004C5F  206E 6F74 
00004C63  2053 6574 
00004C67  2E        
00004C68  2E2E 2E2E 7626          dc.b      46,46,46,46,0
00004C6C  00        
                    7627   @m68kde~1_71:
00004C6E  0D0A 4E6F 7628          dc.b      13,10,78,111,32,70,82,69,69,32,66,114,101,97
00004C72  2046 5245 
00004C76  4520 4272 
00004C7A  6561      
00004C7C  6B20 506F 7629          dc.b      107,32,80,111,105,110,116,115,46,46,46,46,46
00004C80  696E 7473 
00004C84  2E2E 2E2E 
00004C88  2E        
00004C89  00        7630          dc.b      0
                    7631   @m68kde~1_72:
00004C8A  0D0A 4272 7632          dc.b      13,10,66,114,101,97,107,32,80,111,105,110,116
00004C8E  6561 6B20 
00004C92  506F 696E 
00004C96  74        
00004C97  2041 6464 7633          dc.b      32,65,100,100,114,101,115,115,58,32,0
00004C9B  7265 7373 
00004C9F  3A20 00   
                    7634   @m68kde~1_73:
00004CA2  0D0A 4572 7635          dc.b      13,10,69,114,114,111,114,32,58,32,66,114,101
00004CA6  726F 7220 
00004CAA  3A20 4272 
00004CAE  65        
00004CAF  616B 2050 7636          dc.b      97,107,32,80,111,105,110,116,115,32,67,65,78
00004CB3  6F69 6E74 
00004CB7  7320 4341 
00004CBB  4E        
00004CBC  4E4F 5420 7637          dc.b      78,79,84,32,98,101,32,115,101,116,32,97,116
00004CC0  6265 2073 
00004CC4  6574 2061 
00004CC8  74        
00004CC9  204F 4444 7638          dc.b      32,79,68,68,32,97,100,100,114,101,115,115,101
00004CCD  2061 6464 
00004CD1  7265 7373 
00004CD5  65        
00004CD6  7300      7639          dc.b      115,0
                    7640   @m68kde~1_74:
00004CD8  0D0A 4572 7641          dc.b      13,10,69,114,114,111,114,32,58,32,66,114,101
00004CDC  726F 7220 
00004CE0  3A20 4272 
00004CE4  65        
00004CE5  616B 2050 7642          dc.b      97,107,32,80,111,105,110,116,115,32,67,65,78
00004CE9  6F69 6E74 
00004CED  7320 4341 
00004CF1  4E        
00004CF2  4E4F 5420 7643          dc.b      78,79,84,32,98,101,32,115,101,116,32,102,111
00004CF6  6265 2073 
00004CFA  6574 2066 
00004CFE  6F        
00004CFF  7220 524F 7644          dc.b      114,32,82,79,77,32,105,110,32,82,97,110,103
00004D03  4D20 696E 
00004D07  2052 616E 
00004D0B  67        
00004D0C  6520 3A20 7645          dc.b      101,32,58,32,91,36,48,45,36,48,48,48,48,55,70
00004D10  5B24 302D 
00004D14  2430 3030 
00004D18  3037 46   
00004D1B  4646 5D00 7646          dc.b      70,70,93,0
                    7647   @m68kde~1_75:
00004D20  0D0A 4572 7648          dc.b      13,10,69,114,114,111,114,58,32,66,114,101,97
00004D24  726F 723A 
00004D28  2042 7265 
00004D2C  61        
00004D2D  6B20 506F 7649          dc.b      107,32,80,111,105,110,116,32,65,108,114,101
00004D31  696E 7420 
00004D35  416C 7265 
00004D39  6164 7920 7650          dc.b      97,100,121,32,69,120,105,115,116,115,32,97,116
00004D3D  4578 6973 
00004D41  7473 2061 
00004D45  74        
00004D46  2041 6464 7651          dc.b      32,65,100,100,114,101,115,115,32,58,32,37,48
00004D4A  7265 7373 
00004D4E  203A 2025 
00004D52  30        
00004D53  3878 0D0A 7652          dc.b      56,120,13,10,0
00004D57  00        
                    7653   @m68kde~1_76:
00004D58  0D0A 4272 7654          dc.b      13,10,66,114,101,97,107,32,80,111,105,110,116
00004D5C  6561 6B20 
00004D60  506F 696E 
00004D64  74        
00004D65  2053 6574 7655          dc.b      32,83,101,116,32,97,116,32,65,100,100,114,101
00004D69  2061 7420 
00004D6D  4164 6472 
00004D71  65        
00004D72  7373 3A20 7656          dc.b      115,115,58,32,91,36,37,48,56,120,93,0
00004D76  5B24 2530 
00004D7A  3878 5D00 
                    7657   @m68kde~1_77:
00004D7E  0D0A 4E6F 7658          dc.b      13,10,78,111,32,70,82,69,69,32,87,97,116,99
00004D82  2046 5245 
00004D86  4520 5761 
00004D8A  7463      
00004D8C  6820 506F 7659          dc.b      104,32,80,111,105,110,116,115,46,46,46,46,46
00004D90  696E 7473 
00004D94  2E2E 2E2E 
00004D98  2E        
00004D99  00        7660          dc.b      0
                    7661   @m68kde~1_78:
00004D9A  0D0A 5761 7662          dc.b      13,10,87,97,116,99,104,32,80,111,105,110,116
00004D9E  7463 6820 
00004DA2  506F 696E 
00004DA6  74        
00004DA7  2041 6464 7663          dc.b      32,65,100,100,114,101,115,115,58,32,0
00004DAB  7265 7373 
00004DAF  3A20 00   
                    7664   @m68kde~1_79:
00004DB2  0D0A 4572 7665          dc.b      13,10,69,114,114,111,114,58,32,87,97,116,99
00004DB6  726F 723A 
00004DBA  2057 6174 
00004DBE  63        
00004DBF  6820 506F 7666          dc.b      104,32,80,111,105,110,116,32,65,108,114,101
00004DC3  696E 7420 
00004DC7  416C 7265 
00004DCB  6164 7920 7667          dc.b      97,100,121,32,83,101,116,32,97,116,32,65,100
00004DCF  5365 7420 
00004DD3  6174 2041 
00004DD7  64        
00004DD8  6472 6573 7668          dc.b      100,114,101,115,115,32,58,32,37,48,56,120,13
00004DDC  7320 3A20 
00004DE0  2530 3878 
00004DE4  0D        
00004DE5  0A00      7669          dc.b      10,0
                    7670   @m68kde~1_80:
00004DE8  0D0A 5761 7671          dc.b      13,10,87,97,116,99,104,32,80,111,105,110,116
00004DEC  7463 6820 
00004DF0  506F 696E 
00004DF4  74        
00004DF5  2053 6574 7672          dc.b      32,83,101,116,32,97,116,32,65,100,100,114,101
00004DF9  2061 7420 
00004DFD  4164 6472 
00004E01  65        
00004E02  7373 3A20 7673          dc.b      115,115,58,32,91,36,37,48,56,120,93,0
00004E06  5B24 2530 
00004E0A  3878 5D00 
                    7674   @m68kde~1_81:
00004E0E  0D0A 0D0A 7675          dc.b      13,10,13,10,13,10,13,10,64,66,82,69,65,75,80
00004E12  0D0A 0D0A 
00004E16  4042 5245 
00004E1A  414B 50   
00004E1D  4F49 4E54 7676          dc.b      79,73,78,84,0
00004E21  00        
                    7677   @m68kde~1_82:
00004E22  0D0A 5369 7678          dc.b      13,10,83,105,110,103,108,101,32,83,116,101,112
00004E26  6E67 6C65 
00004E2A  2053 7465 
00004E2E  70        
00004E2F  203A 205B 7679          dc.b      32,58,32,91,79,78,93,0
00004E33  4F4E 5D00 
                    7680   @m68kde~1_83:
00004E38  0D0A 4272 7681          dc.b      13,10,66,114,101,97,107,80,111,105,110,116,115
00004E3C  6561 6B50 
00004E40  6F69 6E74 
00004E44  73        
00004E45  203A 205B 7682          dc.b      32,58,32,91,69,110,97,98,108,101,100,93,0
00004E49  456E 6162 
00004E4D  6C65 645D 
00004E51  00        
                    7683   @m68kde~1_84:
00004E52  0D0A 5072 7684          dc.b      13,10,80,114,101,115,115,32,60,69,83,67,62,32
00004E56  6573 7320 
00004E5A  3C45 5343 
00004E5E  3E20      
00004E60  746F 2052 7685          dc.b      116,111,32,82,101,115,117,109,101,32,85,115
00004E64  6573 756D 
00004E68  6520 5573 
00004E6C  6572 2050 7686          dc.b      101,114,32,80,114,111,103,114,97,109,13,10,0
00004E70  726F 6772 
00004E74  616D 0D0A 
00004E78  00        
                    7687   @m68kde~1_85:
00004E7A  0D0A 556E 7688          dc.b      13,10,85,110,107,110,111,119,110,32,67,111,109
00004E7E  6B6E 6F77 
00004E82  6E20 436F 
00004E86  6D        
00004E87  6D61 6E64 7689          dc.b      109,97,110,100,46,46,46,46,46,13,10,0
00004E8B  2E2E 2E2E 
00004E8F  2E0D 0A00 
                    7690   @m68kde~1_86:
00004E94  0D0A 5072 7691          dc.b      13,10,80,114,111,103,114,97,109,32,69,110,100
00004E98  6F67 7261 
00004E9C  6D20 456E 
00004EA0  64        
00004EA1  6564 2028 7692          dc.b      101,100,32,40,84,82,65,80,32,35,49,53,41,46
00004EA5  5452 4150 
00004EA9  2023 3135 
00004EAD  292E      
00004EAF  2E2E 2E00 7693          dc.b      46,46,46,0
                    7694   @m68kde~1_87:
00004EB4  0D0A 4B69 7695          dc.b      13,10,75,105,108,108,32,65,108,108,32,66,114
00004EB8  6C6C 2041 
00004EBC  6C6C 2042 
00004EC0  72        
00004EC1  6561 6B20 7696          dc.b      101,97,107,32,80,111,105,110,116,115,46,46,46
00004EC5  506F 696E 
00004EC9  7473 2E2E 
00004ECD  2E        
00004ECE  2879 2F6E 7697          dc.b      40,121,47,110,41,63,0
00004ED2  293F 00   
                    7698   @m68kde~1_88:
00004ED6  0D0A 4B69 7699          dc.b      13,10,75,105,108,108,32,65,108,108,32,87,97
00004EDA  6C6C 2041 
00004EDE  6C6C 2057 
00004EE2  61        
00004EE3  7463 6820 7700          dc.b      116,99,104,32,80,111,105,110,116,115,46,46,46
00004EE7  506F 696E 
00004EEB  7473 2E2E 
00004EEF  2E        
00004EF0  2879 2F6E 7701          dc.b      40,121,47,110,41,63,0
00004EF4  293F 00   
                    7702   @m68kde~1_89:
00004EF8  0D0A 2D2D 7703          dc.b      13,10,45,45,45,45,45,45,45,45,45,45,45,45,45
00004EFC  2D2D 2D2D 
00004F00  2D2D 2D2D 
00004F04  2D2D 2D   
00004F07  2D2D 2D2D 7704          dc.b      45,45,45,45,45,45,45,45,45,45,45,45,45,45,45
00004F0B  2D2D 2D2D 
00004F0F  2D2D 2D2D 
00004F13  2D2D 2D   
00004F16  2D2D 2D2D 7705          dc.b      45,45,45,45,45,45,45,45,45,45,45,45,45,45,45
00004F1A  2D2D 2D2D 
00004F1E  2D2D 2D2D 
00004F22  2D2D 2D   
00004F25  2D2D 2D2D 7706          dc.b      45,45,45,45,45,45,45,45,45,45,45,45,45,45,45
00004F29  2D2D 2D2D 
00004F2D  2D2D 2D2D 
00004F31  2D2D 2D   
00004F34  2D2D 2D2D 7707          dc.b      45,45,45,45,45,45,0
00004F38  2D2D 00   
                    7708   @m68kde~1_90:
00004F3C  0D0A 2020 7709          dc.b      13,10,32,32,68,101,98,117,103,103,101,114,32
00004F40  4465 6275 
00004F44  6767 6572 
00004F48  20        
00004F49  436F 6D6D 7710          dc.b      67,111,109,109,97,110,100,32,83,117,109,109
00004F4D  616E 6420 
00004F51  5375 6D6D 
00004F55  6172 7900 7711          dc.b      97,114,121,0
                    7712   @m68kde~1_91:
00004F5A  0D0A 2020 7713          dc.b      13,10,32,32,46,40,114,101,103,41,32,32,32,32
00004F5E  2E28 7265 
00004F62  6729 2020 
00004F66  2020      
00004F68  2020 202D 7714          dc.b      32,32,32,45,32,67,104,97,110,103,101,32,82,101
00004F6C  2043 6861 
00004F70  6E67 6520 
00004F74  5265      
00004F76  6769 7374 7715          dc.b      103,105,115,116,101,114,115,58,32,101,46,103
00004F7A  6572 733A 
00004F7E  2065 2E67 
00004F82  2041 302D 7716          dc.b      32,65,48,45,65,55,44,68,48,45,68,55,44,80,67
00004F86  4137 2C44 
00004F8A  302D 4437 
00004F8E  2C50 43   
00004F91  2C53 5350 7717          dc.b      44,83,83,80,44,85,83,80,44,83,82,0
00004F95  2C55 5350 
00004F99  2C53 5200 
                    7718   @m68kde~1_92:
00004F9E  0D0A 2020 7719          dc.b      13,10,32,32,66,68,47,66,83,47,66,67,47,66,75
00004FA2  4244 2F42 
00004FA6  532F 4243 
00004FAA  2F42 4B   
00004FAD  2020 2D20 7720          dc.b      32,32,45,32,66,114,101,97,107,32,80,111,105
00004FB1  4272 6561 
00004FB5  6B20 506F 
00004FB9  69        
00004FBA  6E74 3A20 7721          dc.b      110,116,58,32,68,105,115,112,108,97,121,47,83
00004FBE  4469 7370 
00004FC2  6C61 792F 
00004FC6  53        
00004FC7  6574 2F43 7722          dc.b      101,116,47,67,108,101,97,114,47,75,105,108,108
00004FCB  6C65 6172 
00004FCF  2F4B 696C 
00004FD3  6C        
00004FD4  00        7723          dc.b      0
                    7724   @m68kde~1_93:
00004FD6  0D0A 2020 7725          dc.b      13,10,32,32,67,32,32,32,32,32,32,32,32,32,32
00004FDA  4320 2020 
00004FDE  2020 2020 
00004FE2  2020 20   
00004FE5  2020 2D20 7726          dc.b      32,32,45,32,67,111,112,121,32,80,114,111,103
00004FE9  436F 7079 
00004FED  2050 726F 
00004FF1  67        
00004FF2  7261 6D20 7727          dc.b      114,97,109,32,102,114,111,109,32,70,108,97,115
00004FF6  6672 6F6D 
00004FFA  2046 6C61 
00004FFE  73        
00004FFF  6820 746F 7728          dc.b      104,32,116,111,32,77,97,105,110,32,77,101,109
00005003  204D 6169 
00005007  6E20 4D65 
0000500B  6D        
0000500C  6F72 7900 7729          dc.b      111,114,121,0
                    7730   @m68kde~1_94:
00005010  0D0A 2020 7731          dc.b      13,10,32,32,68,32,32,32,32,32,32,32,32,32,32
00005014  4420 2020 
00005018  2020 2020 
0000501C  2020 20   
0000501F  2020 2D20 7732          dc.b      32,32,45,32,68,117,109,112,32,77,101,109,111
00005023  4475 6D70 
00005027  204D 656D 
0000502B  6F        
0000502C  7279 2043 7733          dc.b      114,121,32,67,111,110,116,101,110,116,115,32
00005030  6F6E 7465 
00005034  6E74 7320 
00005038  746F 2053 7734          dc.b      116,111,32,83,99,114,101,101,110,0
0000503C  6372 6565 
00005040  6E00      
                    7735   @m68kde~1_95:
00005042  0D0A 2020 7736          dc.b      13,10,32,32,69,32,32,32,32,32,32,32,32,32,32
00005046  4520 2020 
0000504A  2020 2020 
0000504E  2020 20   
00005051  2020 2D20 7737          dc.b      32,32,45,32,69,110,116,101,114,32,83,116,114
00005055  456E 7465 
00005059  7220 5374 
0000505D  72        
0000505E  696E 6720 7738          dc.b      105,110,103,32,105,110,116,111,32,77,101,109
00005062  696E 746F 
00005066  204D 656D 
0000506A  6F72 7900 7739          dc.b      111,114,121,0
                    7740   @m68kde~1_96:
0000506E  0D0A 2020 7741          dc.b      13,10,32,32,70,32,32,32,32,32,32,32,32,32,32
00005072  4620 2020 
00005076  2020 2020 
0000507A  2020 20   
0000507D  2020 2D20 7742          dc.b      32,32,45,32,70,105,108,108,32,77,101,109,111
00005081  4669 6C6C 
00005085  204D 656D 
00005089  6F        
0000508A  7279 2077 7743          dc.b      114,121,32,119,105,116,104,32,68,97,116,97,0
0000508E  6974 6820 
00005092  4461 7461 
00005096  00        
                    7744   @m68kde~1_97:
00005098  0D0A 2020 7745          dc.b      13,10,32,32,71,32,32,32,32,32,32,32,32,32,32
0000509C  4720 2020 
000050A0  2020 2020 
000050A4  2020 20   
000050A7  2020 2D20 7746          dc.b      32,32,45,32,71,111,32,80,114,111,103,114,97
000050AB  476F 2050 
000050AF  726F 6772 
000050B3  61        
000050B4  6D20 5374 7747          dc.b      109,32,83,116,97,114,116,105,110,103,32,97,116
000050B8  6172 7469 
000050BC  6E67 2061 
000050C0  74        
000050C1  2041 6464 7748          dc.b      32,65,100,100,114,101,115,115,58,32,36,37,48
000050C5  7265 7373 
000050C9  3A20 2425 
000050CD  30        
000050CE  3858 00   7749          dc.b      56,88,0
                    7750   @m68kde~1_98:
000050D2  0D0A 2020 7751          dc.b      13,10,32,32,76,32,32,32,32,32,32,32,32,32,32
000050D6  4C20 2020 
000050DA  2020 2020 
000050DE  2020 20   
000050E1  2020 2D20 7752          dc.b      32,32,45,32,76,111,97,100,32,80,114,111,103
000050E5  4C6F 6164 
000050E9  2050 726F 
000050ED  67        
000050EE  7261 6D20 7753          dc.b      114,97,109,32,40,46,72,69,88,32,102,105,108
000050F2  282E 4845 
000050F6  5820 6669 
000050FA  6C        
000050FB  6529 2066 7754          dc.b      101,41,32,102,114,111,109,32,76,97,112,116,111
000050FF  726F 6D20 
00005103  4C61 7074 
00005107  6F        
00005108  7000      7755          dc.b      112,0
                    7756   @m68kde~1_99:
0000510A  0D0A 2020 7757          dc.b      13,10,32,32,77,32,32,32,32,32,32,32,32,32,32
0000510E  4D20 2020 
00005112  2020 2020 
00005116  2020 20   
00005119  2020 2D20 7758          dc.b      32,32,45,32,77,101,109,111,114,121,32,69,120
0000511D  4D65 6D6F 
00005121  7279 2045 
00005125  78        
00005126  616D 696E 7759          dc.b      97,109,105,110,101,32,97,110,100,32,67,104,97
0000512A  6520 616E 
0000512E  6420 4368 
00005132  61        
00005133  6E67 6500 7760          dc.b      110,103,101,0
                    7761   @m68kde~1_100:
00005138  0D0A 2020 7762          dc.b      13,10,32,32,80,32,32,32,32,32,32,32,32,32,32
0000513C  5020 2020 
00005140  2020 2020 
00005144  2020 20   
00005147  2020 2D20 7763          dc.b      32,32,45,32,80,114,111,103,114,97,109,32,70
0000514B  5072 6F67 
0000514F  7261 6D20 
00005153  46        
00005154  6C61 7368 7764          dc.b      108,97,115,104,32,77,101,109,111,114,121,32
00005158  204D 656D 
0000515C  6F72 7920 
00005160  7769 7468 7765          dc.b      119,105,116,104,32,85,115,101,114,32,80,114
00005164  2055 7365 
00005168  7220 5072 
0000516C  6F67 7261 7766          dc.b      111,103,114,97,109,0
00005170  6D00      
                    7767   @m68kde~1_101:
00005172  0D0A 2020 7768          dc.b      13,10,32,32,82,32,32,32,32,32,32,32,32,32,32
00005176  5220 2020 
0000517A  2020 2020 
0000517E  2020 20   
00005181  2020 2D20 7769          dc.b      32,32,45,32,68,105,115,112,108,97,121,32,54
00005185  4469 7370 
00005189  6C61 7920 
0000518D  36        
0000518E  3830 3030 7770          dc.b      56,48,48,48,32,82,101,103,105,115,116,101,114
00005192  2052 6567 
00005196  6973 7465 
0000519A  72        
0000519B  7300      7771          dc.b      115,0
                    7772   @m68kde~1_102:
0000519E  0D0A 2020 7773          dc.b      13,10,32,32,83,32,32,32,32,32,32,32,32,32,32
000051A2  5320 2020 
000051A6  2020 2020 
000051AA  2020 20   
000051AD  2020 2D20 7774          dc.b      32,32,45,32,84,111,103,103,108,101,32,79,78
000051B1  546F 6767 
000051B5  6C65 204F 
000051B9  4E        
000051BA  2F4F 4646 7775          dc.b      47,79,70,70,32,83,105,110,103,108,101,32,83
000051BE  2053 696E 
000051C2  676C 6520 
000051C6  53        
000051C7  7465 7020 7776          dc.b      116,101,112,32,77,111,100,101,0
000051CB  4D6F 6465 
000051CF  00        
                    7777   @m68kde~1_103:
000051D0  0D0A 2020 7778          dc.b      13,10,32,32,84,77,32,32,32,32,32,32,32,32,32
000051D4  544D 2020 
000051D8  2020 2020 
000051DC  2020 20   
000051DF  2020 2D20 7779          dc.b      32,32,45,32,84,101,115,116,32,77,101,109,111
000051E3  5465 7374 
000051E7  204D 656D 
000051EB  6F        
000051EC  7279 00   7780          dc.b      114,121,0
                    7781   @m68kde~1_104:
000051F0  0D0A 2020 7782          dc.b      13,10,32,32,84,83,32,32,32,32,32,32,32,32,32
000051F4  5453 2020 
000051F8  2020 2020 
000051FC  2020 20   
000051FF  2020 2D20 7783          dc.b      32,32,45,32,84,101,115,116,32,83,119,105,116
00005203  5465 7374 
00005207  2053 7769 
0000520B  74        
0000520C  6368 6573 7784          dc.b      99,104,101,115,58,32,83,87,55,45,48,0
00005210  3A20 5357 
00005214  372D 3000 
                    7785   @m68kde~1_105:
00005218  0D0A 2020 7786          dc.b      13,10,32,32,84,68,32,32,32,32,32,32,32,32,32
0000521C  5444 2020 
00005220  2020 2020 
00005224  2020 20   
00005227  2020 2D20 7787          dc.b      32,32,45,32,84,101,115,116,32,68,105,115,112
0000522B  5465 7374 
0000522F  2044 6973 
00005233  70        
00005234  6C61 7973 7788          dc.b      108,97,121,115,58,32,76,69,68,115,32,97,110
00005238  3A20 4C45 
0000523C  4473 2061 
00005240  6E        
00005241  6420 372D 7789          dc.b      100,32,55,45,83,101,103,109,101,110,116,0
00005245  5365 676D 
00005249  656E 7400 
                    7790   @m68kde~1_106:
0000524E  0D0A 2020 7791          dc.b      13,10,32,32,87,68,47,87,83,47,87,67,47,87,75
00005252  5744 2F57 
00005256  532F 5743 
0000525A  2F57 4B   
0000525D  2020 2D20 7792          dc.b      32,32,45,32,87,97,116,99,104,32,80,111,105,110
00005261  5761 7463 
00005265  6820 506F 
00005269  696E      
0000526B  743A 2044 7793          dc.b      116,58,32,68,105,115,112,108,97,121,47,83,101
0000526F  6973 706C 
00005273  6179 2F53 
00005277  65        
00005278  742F 436C 7794          dc.b      116,47,67,108,101,97,114,47,75,105,108,108,0
0000527C  6561 722F 
00005280  4B69 6C6C 
00005284  00        
                    7795   @m68kde~1_107:
00005286  0D0A 2300 7796          dc.b      13,10,35,0
                    7797   @m68kde~1_108:
0000528A  0D0A 5072 7798          dc.b      13,10,80,114,111,103,114,97,109,32,82,117,110
0000528E  6F67 7261 
00005292  6D20 5275 
00005296  6E        
00005297  6E69 6E67 7799          dc.b      110,105,110,103,46,46,46,46,46,0
0000529B  2E2E 2E2E 
0000529F  2E00      
                    7800   @m68kde~1_109:
000052A2  0D0A 5072 7801          dc.b      13,10,80,114,101,115,115,32,60,82,69,83,69,84
000052A6  6573 7320 
000052AA  3C52 4553 
000052AE  4554      
000052B0  3E20 6275 7802          dc.b      62,32,98,117,116,116,111,110,32,60,75,101,121
000052B4  7474 6F6E 
000052B8  203C 4B65 
000052BC  79        
000052BD  303E 206F 7803          dc.b      48,62,32,111,110,32,68,69,49,32,116,111,32,115
000052C1  6E20 4445 
000052C5  3120 746F 
000052C9  2073      
000052CB  746F 7000 7804          dc.b      116,111,112,0
                    7805   @m68kde~1_110:
000052D0  0D0A 4572 7806          dc.b      13,10,69,114,114,111,114,58,32,80,114,101,115
000052D4  726F 723A 
000052D8  2050 7265 
000052DC  73        
000052DD  7320 2747 7807          dc.b      115,32,39,71,39,32,102,105,114,115,116,32,116
000052E1  2720 6669 
000052E5  7273 7420 
000052E9  74        
000052EA  6F20 7374 7808          dc.b      111,32,115,116,97,114,116,32,112,114,111,103
000052EE  6172 7420 
000052F2  7072 6F67 
000052F6  7261 6D00 7809          dc.b      114,97,109,0
                    7810   @m68kde~1_111:
000052FA  0D0A 5369 7811          dc.b      13,10,83,105,110,103,108,101,32,83,116,101,112
000052FE  6E67 6C65 
00005302  2053 7465 
00005306  70        
00005307  2020 3A5B 7812          dc.b      32,32,58,91,79,78,93,0
0000530B  4F4E 5D00 
                    7813   @m68kde~1_112:
00005310  0D0A 5072 7814          dc.b      13,10,80,114,101,115,115,32,39,71,39,32,116
00005314  6573 7320 
00005318  2747 2720 
0000531C  74        
0000531D  6F20 5472 7815          dc.b      111,32,84,114,97,99,101,32,80,114,111,103,114
00005321  6163 6520 
00005325  5072 6F67 
00005329  72        
0000532A  616D 2066 7816          dc.b      97,109,32,102,114,111,109,32,97,100,100,114
0000532E  726F 6D20 
00005332  6164 6472 
00005336  6573 7320 7817          dc.b      101,115,115,32,36,37,88,46,46,46,46,46,0
0000533A  2425 582E 
0000533E  2E2E 2E2E 
00005342  00        
                    7818   @m68kde~1_113:
00005344  0D0A 5075 7819          dc.b      13,10,80,117,115,104,32,60,82,69,83,69,84,32
00005348  7368 203C 
0000534C  5245 5345 
00005350  5420      
00005352  4275 7474 7820          dc.b      66,117,116,116,111,110,62,32,116,111,32,83,116
00005356  6F6E 3E20 
0000535A  746F 2053 
0000535E  74        
0000535F  6F70 2E2E 7821          dc.b      111,112,46,46,46,46,46,0
00005363  2E2E 2E00 
                    7822   @m68kde~1_114:
00005368  0D0A 5369 7823          dc.b      13,10,83,105,110,103,108,101,32,83,116,101,112
0000536C  6E67 6C65 
00005370  2053 7465 
00005374  70        
00005375  203A 205B 7824          dc.b      32,58,32,91,79,70,70,93,0
00005379  4F46 465D 
0000537D  00        
                    7825   @m68kde~1_115:
0000537E  0D0A 4272 7826          dc.b      13,10,66,114,101,97,107,32,80,111,105,110,116
00005382  6561 6B20 
00005386  506F 696E 
0000538A  74        
0000538B  7320 3A5B 7827          dc.b      115,32,58,91,69,110,97,98,108,101,100,93,0
0000538F  456E 6162 
00005393  6C65 645D 
00005397  00        
                    7828   @m68kde~1_116:
00005398  0D0A 5072 7829          dc.b      13,10,80,114,101,115,115,32,60,69,83,67,62,32
0000539C  6573 7320 
000053A0  3C45 5343 
000053A4  3E20      
000053A6  746F 2052 7830          dc.b      116,111,32,82,101,115,117,109,101,32,85,115
000053AA  6573 756D 
000053AE  6520 5573 
000053B2  6572 2050 7831          dc.b      101,114,32,80,114,111,103,114,97,109,46,46,46
000053B6  726F 6772 
000053BA  616D 2E2E 
000053BE  2E        
000053BF  2E2E 00   7832          dc.b      46,46,0
                    7833   @m68kde~1_117:
000053C2  0D0A 5369 7834          dc.b      13,10,83,105,110,103,108,101,32,83,116,101,112
000053C6  6E67 6C65 
000053CA  2053 7465 
000053CE  70        
000053CF  2020 3A5B 7835          dc.b      32,32,58,91,79,70,70,93,0
000053D3  4F46 465D 
000053D7  00        
                    7836   @m68kde~1_118:
000053D8  0D0A 0D0A 7837          dc.b      13,10,13,10,80,114,111,103,114,97,109,32,65
000053DC  5072 6F67 
000053E0  7261 6D20 
000053E4  41        
000053E5  424F 5254 7838          dc.b      66,79,82,84,32,33,33,33,33,33,33,13,10,0
000053E9  2021 2121 
000053ED  2121 210D 
000053F1  0A00      
                    7839   @m68kde~1_119:
000053F4  2573 0D0A 7840          dc.b      37,115,13,10,0
000053F8  00        
                    7841   @m68kde~1_120:
000053FA  0D0A 0D0A 7842          dc.b      13,10,13,10,80,114,111,103,114,97,109,32,65
000053FE  5072 6F67 
00005402  7261 6D20 
00005406  41        
00005407  424F 5254 7843          dc.b      66,79,82,84,32,33,33,33,33,33,0
0000540B  2021 2121 
0000540F  2121 00   
                    7844   @m68kde~1_121:
00005412  0D0A 556E 7845          dc.b      13,10,85,110,104,97,110,100,108,101,100,32,73
00005416  6861 6E64 
0000541A  6C65 6420 
0000541E  49        
0000541F  6E74 6572 7846          dc.b      110,116,101,114,114,117,112,116,58,32,73,82
00005423  7275 7074 
00005427  3A20 4952 
0000542B  5125 6420 7847          dc.b      81,37,100,32,33,33,33,33,33,0
0000542F  2121 2121 
00005433  2100      
                    7848   @m68kde~1_122:
00005436  4144 4452 7849          dc.b      65,68,68,82,69,83,83,32,69,82,82,79,82,58,32
0000543A  4553 5320 
0000543E  4552 524F 
00005442  523A 20   
00005445  3136 206F 7850          dc.b      49,54,32,111,114,32,51,50,32,66,105,116,32,84
00005449  7220 3332 
0000544D  2042 6974 
00005451  2054      
00005453  7261 6E73 7851          dc.b      114,97,110,115,102,101,114,32,116,111,47,102
00005457  6665 7220 
0000545B  746F 2F66 
0000545F  726F 6D20 7852          dc.b      114,111,109,32,97,110,32,79,68,68,32,65,100
00005463  616E 204F 
00005467  4444 2041 
0000546B  64        
0000546C  6472 6573 7853          dc.b      100,114,101,115,115,46,46,46,46,0
00005470  732E 2E2E 
00005474  2E00      
                    7854   @m68kde~1_123:
00005476  556E 6861 7855          dc.b      85,110,104,97,110,100,108,101,100,32,84,114
0000547A  6E64 6C65 
0000547E  6420 5472 
00005482  6170 2021 7856          dc.b      97,112,32,33,33,33,33,33,0
00005486  2121 2121 
0000548A  00        
                    7857   @m68kde~1_124:
0000548C  4255 5320 7858          dc.b      66,85,83,32,69,114,114,111,114,33,0
00005490  4572 726F 
00005494  7221 00   
                    7859   @m68kde~1_125:
00005498  4144 4452 7860          dc.b      65,68,68,82,69,83,83,32,69,114,114,111,114,33
0000549C  4553 5320 
000054A0  4572 726F 
000054A4  7221      
000054A6  00        7861          dc.b      0
                    7862   @m68kde~1_126:
000054A8  494C 4C45 7863          dc.b      73,76,76,69,71,65,76,32,73,78,83,84,82,85,67
000054AC  4741 4C20 
000054B0  494E 5354 
000054B4  5255 43   
000054B7  5449 4F4E 7864          dc.b      84,73,79,78,0
000054BB  00        
                    7865   @m68kde~1_127:
000054BC  4449 5649 7866          dc.b      68,73,86,73,68,69,32,66,89,32,90,69,82,79,0
000054C0  4445 2042 
000054C4  5920 5A45 
000054C8  524F 00   
                    7867   @m68kde~1_128:
000054CC  2743 484B 7868          dc.b      39,67,72,75,39,32,73,78,83,84,82,85,67,84,73
000054D0  2720 494E 
000054D4  5354 5255 
000054D8  4354 49   
000054DB  4F4E 00   7869          dc.b      79,78,0
                    7870   @m68kde~1_129:
000054DE  5452 4150 7871          dc.b      84,82,65,80,86,32,73,78,83,84,82,85,67,84,73
000054E2  5620 494E 
000054E6  5354 5255 
000054EA  4354 49   
000054ED  4F4E 00   7872          dc.b      79,78,0
                    7873   @m68kde~1_130:
000054F0  5052 4956 7874          dc.b      80,82,73,86,73,76,69,71,69,32,86,73,79,76,65
000054F4  494C 4547 
000054F8  4520 5649 
000054FC  4F4C 41   
000054FF  5449 4F4E 7875          dc.b      84,73,79,78,0
00005503  00        
                    7876   @m68kde~1_131:
00005504  554E 494E 7877          dc.b      85,78,73,78,73,84,73,65,76,73,83,69,68,32,73
00005508  4954 4941 
0000550C  4C49 5345 
00005510  4420 49   
00005513  5251 00   7878          dc.b      82,81,0
                    7879   @m68kde~1_132:
00005516  5350 5552 7880          dc.b      83,80,85,82,73,79,85,83,32,73,82,81,0
0000551A  494F 5553 
0000551E  2049 5251 
00005522  00        
                    7881   @m68kde~1_133:
00005524  0D0A 5374 7882          dc.b      13,10,83,116,97,114,116,32,65,100,100,114,101
00005528  6172 7420 
0000552C  4164 6472 
00005530  65        
00005531  7373 2069 7883          dc.b      115,115,32,105,110,32,77,101,109,111,114,121
00005535  6E20 4D65 
00005539  6D6F 7279 
0000553D  3A20 00   7884          dc.b      58,32,0
                    7885   @m68kde~1_134:
00005540  0D0A 456E 7886          dc.b      13,10,69,110,116,101,114,32,83,116,114,105,110
00005544  7465 7220 
00005548  5374 7269 
0000554C  6E        
0000554D  6720 2845 7887          dc.b      103,32,40,69,83,67,32,116,111,32,101,110,100
00005551  5343 2074 
00005555  6F20 656E 
00005559  64        
0000555A  2920 3A00 7888          dc.b      41,32,58,0
                    7889   @m68kde~1_135:
0000555E  0D0A 4669 7890          dc.b      13,10,70,105,108,108,105,110,103,32,65,100,100
00005562  6C6C 696E 
00005566  6720 4164 
0000556A  64        
0000556B  7265 7373 7891          dc.b      114,101,115,115,101,115,32,91,36,37,48,56,88
0000556F  6573 205B 
00005573  2425 3038 
00005577  58        
00005578  202D 2024 7892          dc.b      32,45,32,36,37,48,56,88,93,32,119,105,116,104
0000557C  2530 3858 
00005580  5D20 7769 
00005584  7468      
00005586  2024 2530 7893          dc.b      32,36,37,48,56,88,0
0000558A  3858 00   
                    7894   @m68kde~1_136:
0000558E  0D0A 5265 7895          dc.b      13,10,82,101,97,100,105,110,103,32,65,100,100
00005592  6164 696E 
00005596  6720 4164 
0000559A  64        
0000559B  7265 7373 7896          dc.b      114,101,115,115,101,115,32,91,36,37,48,56,88
0000559F  6573 205B 
000055A3  2425 3038 
000055A7  58        
000055A8  202D 2024 7897          dc.b      32,45,32,36,37,48,56,88,93,32,102,111,114,32
000055AC  2530 3858 
000055B0  5D20 666F 
000055B4  7220      
000055B6  2425 3032 7898          dc.b      36,37,48,50,88,0
000055BA  5800      
                    7899   @m68kde~1_137:
000055BC  0D0A 5661 7900          dc.b      13,10,86,97,108,117,101,32,105,110,99,111,114
000055C0  6C75 6520 
000055C4  696E 636F 
000055C8  72        
000055C9  7265 6374 7901          dc.b      114,101,99,116,32,97,116,32,97,100,100,114,101
000055CD  2061 7420 
000055D1  6164 6472 
000055D5  65        
000055D6  7373 6573 7902          dc.b      115,115,101,115,32,36,37,48,56,88,32,46,46,46
000055DA  2024 2530 
000055DE  3858 202E 
000055E2  2E2E      
000055E4  2073 686F 7903          dc.b      32,115,104,111,117,108,100,32,98,101,32,36,37
000055E8  756C 6420 
000055EC  6265 2024 
000055F0  25        
000055F1  3032 5820 7904          dc.b      48,50,88,32,98,117,116,32,102,111,117,110,100
000055F5  6275 7420 
000055F9  666F 756E 
000055FD  64        
000055FE  2024 2530 7905          dc.b      32,36,37,48,50,88,0
00005602  3258 00   
                    7906   @m68kde~1_138:
00005606  0D0A 5661 7907          dc.b      13,10,86,97,108,117,101,58,32,36,37,48,50,88
0000560A  6C75 653A 
0000560E  2024 2530 
00005612  3258      
00005614  2066 6F75 7908          dc.b      32,102,111,117,110,100,32,97,116,32,65,100,100
00005618  6E64 2061 
0000561C  7420 4164 
00005620  64        
00005621  7265 7373 7909          dc.b      114,101,115,115,58,32,36,37,48,56,88,0
00005625  3A20 2425 
00005629  3038 5800 
                    7910   @m68kde~1_139:
0000562E  0D0A 5661 7911          dc.b      13,10,86,97,108,117,101,58,32,36,37,48,50,88
00005632  6C75 653A 
00005636  2024 2530 
0000563A  3258      
0000563C  2024 2530 7912          dc.b      32,36,37,48,50,88,32,102,111,117,110,100,32
00005640  3258 2066 
00005644  6F75 6E64 
00005648  20        
00005649  6174 2041 7913          dc.b      97,116,32,65,100,100,114,101,115,115,58,32,36
0000564D  6464 7265 
00005651  7373 3A20 
00005655  24        
00005656  2530 3858 7914          dc.b      37,48,56,88,32,97,110,100,32,36,37,48,56,88
0000565A  2061 6E64 
0000565E  2024 2530 
00005662  3858      
00005664  00        7915          dc.b      0
                    7916   @m68kde~1_140:
00005666  0D0A 5661 7917          dc.b      13,10,86,97,108,117,101,58,32,36,37,48,50,88
0000566A  6C75 653A 
0000566E  2024 2530 
00005672  3258      
00005674  2024 2530 7918          dc.b      32,36,37,48,50,88,32,36,37,48,50,88,32,36,37
00005678  3258 2024 
0000567C  2530 3258 
00005680  2024 25   
00005683  3032 5820 7919          dc.b      48,50,88,32,102,111,117,110,100,32,97,116,32
00005687  666F 756E 
0000568B  6420 6174 
0000568F  20        
00005690  4164 6472 7920          dc.b      65,100,100,114,101,115,115,58,32,36,37,48,56
00005694  6573 733A 
00005698  2024 2530 
0000569C  38        
0000569D  5820 2D20 7921          dc.b      88,32,45,32,36,37,48,56,88,0
000056A1  2425 3038 
000056A5  5800      
                    7922   @m68kde~1_141:
000056A8  0D0A 456E 7923          dc.b      13,10,69,110,116,101,114,32,109,101,109,111
000056AC  7465 7220 
000056B0  6D65 6D6F 
000056B4  7279 2074 7924          dc.b      114,121,32,116,101,115,116,32,99,111,110,102
000056B8  6573 7420 
000056BC  636F 6E66 
000056C0  6967 7572 7925          dc.b      105,103,117,114,97,116,105,111,110,40,49,32
000056C4  6174 696F 
000056C8  6E28 3120 
000056CC  2D20 6279 7926          dc.b      45,32,98,121,116,101,115,44,32,50,32,45,32,119
000056D0  7465 732C 
000056D4  2032 202D 
000056D8  2077      
000056DA  6F72 6473 7927          dc.b      111,114,100,115,44,32,51,32,45,32,108,111,110
000056DE  2C20 3320 
000056E2  2D20 6C6F 
000056E6  6E        
000056E7  6720 776F 7928          dc.b      103,32,119,111,114,100,115,41,58,32,0
000056EB  7264 7329 
000056EF  3A20 00   
                    7929   @m68kde~1_142:
000056F2  0D0A 436F 7930          dc.b      13,10,67,111,110,102,105,103,117,114,97,116
000056F6  6E66 6967 
000056FA  7572 6174 
000056FE  696F 6E20 7931          dc.b      105,111,110,32,105,110,118,97,108,105,100,32
00005702  696E 7661 
00005706  6C69 6420 
0000570A  2564 2C20 7932          dc.b      37,100,44,32,116,114,121,32,97,103,97,105,110
0000570E  7472 7920 
00005712  6167 6169 
00005716  6E        
00005717  00        7933          dc.b      0
                    7934   @m68kde~1_143:
00005718  0D0A 4368 7935          dc.b      13,10,67,104,111,111,115,101,32,98,101,116,119
0000571C  6F6F 7365 
00005720  2062 6574 
00005724  77        
00005725  6565 6E20 7936          dc.b      101,101,110,32,100,105,102,102,101,114,101,110
00005729  6469 6666 
0000572D  6572 656E 
00005731  7420 6D65 7937          dc.b      116,32,109,101,109,111,114,121,32,116,101,115
00005735  6D6F 7279 
00005739  2074 6573 
0000573D  7420 7061 7938          dc.b      116,32,112,97,116,116,101,114,110,115,40,49
00005741  7474 6572 
00005745  6E73 2831 
00005749  202D 2035 7939          dc.b      32,45,32,53,44,32,50,32,45,32,65,44,32,51,32
0000574D  2C20 3220 
00005751  2D20 412C 
00005755  2033 20   
00005758  2D20 462C 7940          dc.b      45,32,70,44,32,52,32,45,32,48,41,58,32,0
0000575C  2034 202D 
00005760  2030 293A 
00005764  2000      
                    7941   @m68kde~1_144:
00005766  0D0A 5061 7942          dc.b      13,10,80,97,116,116,101,114,110,32,105,110,118
0000576A  7474 6572 
0000576E  6E20 696E 
00005772  76        
00005773  616C 6964 7943          dc.b      97,108,105,100,44,32,116,114,121,32,97,103,97
00005777  2C20 7472 
0000577B  7920 6167 
0000577F  61        
00005780  696E 00   7944          dc.b      105,110,0
                    7945   @m68kde~1_145:
00005784  0D0A 456E 7946          dc.b      13,10,69,110,116,101,114,32,115,116,97,114,116
00005788  7465 7220 
0000578C  7374 6172 
00005790  74        
00005791  696E 6720 7947          dc.b      105,110,103,32,97,100,100,114,101,115,115,40
00005795  6164 6472 
00005799  6573 7328 
0000579D  3830 3230 7948          dc.b      56,48,50,48,48,48,48,32,45,32,56,48,51,48,48
000057A1  3030 3020 
000057A5  2D20 3830 
000057A9  3330 30   
000057AC  3030 2069 7949          dc.b      48,48,32,105,110,99,108,117,115,105,118,101
000057B0  6E63 6C75 
000057B4  7369 7665 
000057B8  293A 2000 7950          dc.b      41,58,32,0
                    7951   @m68kde~1_146:
000057BC  0D0A 496E 7952          dc.b      13,10,73,110,118,97,108,105,100,32,115,116,97
000057C0  7661 6C69 
000057C4  6420 7374 
000057C8  61        
000057C9  7274 696E 7953          dc.b      114,116,105,110,103,32,97,100,100,114,101,115
000057CD  6720 6164 
000057D1  6472 6573 
000057D5  732E 2E20 7954          dc.b      115,46,46,32,116,114,121,32,97,103,97,105,110
000057D9  7472 7920 
000057DD  6167 6169 
000057E1  6E        
000057E2  00        7955          dc.b      0
                    7956   @m68kde~1_147:
000057E4  0D0A 456E 7957          dc.b      13,10,69,110,116,101,114,32,101,110,100,105
000057E8  7465 7220 
000057EC  656E 6469 
000057F0  6E67 2061 7958          dc.b      110,103,32,97,100,100,114,101,115,115,40,56
000057F4  6464 7265 
000057F8  7373 2838 
000057FC  3032 3030 7959          dc.b      48,50,48,48,48,48,32,45,32,56,48,51,48,48,48
00005800  3030 202D 
00005804  2038 3033 
00005808  3030 30   
0000580B  3020 696E 7960          dc.b      48,32,105,110,99,108,117,115,105,118,101,41
0000580F  636C 7573 
00005813  6976 6529 
00005817  3A20 00   7961          dc.b      58,32,0
                    7962   @m68kde~1_148:
0000581A  0D0A 456E 7963          dc.b      13,10,69,110,100,105,110,103,32,97,100,100,114
0000581E  6469 6E67 
00005822  2061 6464 
00005826  72        
00005827  6573 7320 7964          dc.b      101,115,115,32,111,117,116,32,111,102,32,98
0000582B  6F75 7420 
0000582F  6F66 2062 
00005833  6F75 6E64 7965          dc.b      111,117,110,100,115,46,46,32,116,114,121,32
00005837  732E 2E20 
0000583B  7472 7920 
0000583F  6167 6169 7966          dc.b      97,103,97,105,110,0
00005843  6E00      
                    7967   @m68kde~1_149:
00005846  0D0A 5772 7968          dc.b      13,10,87,114,105,116,105,110,103,32,116,111
0000584A  6974 696E 
0000584E  6720 746F 
00005852  2053 5241 7969          dc.b      32,83,82,65,77,32,46,46,46,0
00005856  4D20 2E2E 
0000585A  2E00      
                    7970   @m68kde~1_150:
0000585C  0D0A 2068 7971          dc.b      13,10,32,104,101,114,101,0
00005860  6572 6500 
                    7972   @m68kde~1_151:
00005864  0D0A 2E2E 7973          dc.b      13,10,46,46,46,46,46,46,46,46,46,46,46,46,46
00005868  2E2E 2E2E 
0000586C  2E2E 2E2E 
00005870  2E2E 2E   
00005873  2E2E 2E2E 7974          dc.b      46,46,46,46,46,46,46,46,46,46,46,46,46,46,46
00005877  2E2E 2E2E 
0000587B  2E2E 2E2E 
0000587F  2E2E 2E   
00005882  2E2E 2E2E 7975          dc.b      46,46,46,46,46,46,46,46,46,46,46,46,46,46,46
00005886  2E2E 2E2E 
0000588A  2E2E 2E2E 
0000588E  2E2E 2E   
00005891  2E2E 2E2E 7976          dc.b      46,46,46,46,46,46,46,46,46,46,46,46,46,46,46
00005895  2E2E 2E2E 
00005899  2E2E 2E2E 
0000589D  2E2E 2E   
000058A0  2E2E 2E2E 7977          dc.b      46,46,46,46,46,46,46,46,46,46,46,46,46,46,46
000058A4  2E2E 2E2E 
000058A8  2E2E 2E2E 
000058AC  2E2E 2E   
000058AF  2E2E 2E2E 7978          dc.b      46,46,46,46,46,46,46,46,46,46,46,46,46,46,46
000058B3  2E2E 2E2E 
000058B7  2E2E 2E2E 
000058BB  2E2E 2E   
000058BE  2E2E 2E2E 7979          dc.b      46,46,46,46,46,46,46,46,46,46,46,46,46,46,46
000058C2  2E2E 2E2E 
000058C6  2E2E 2E2E 
000058CA  2E2E 2E   
000058CD  2E2E 2E2E 7980          dc.b      46,46,46,46,46,0
000058D1  2E00      
                    7981   @m68kde~1_152:
000058D4  0D0A 4669 7982          dc.b      13,10,70,105,110,105,115,104,101,100,32,119
000058D8  6E69 7368 
000058DC  6564 2077 
000058E0  7269 7469 7983          dc.b      114,105,116,105,110,103,32,116,111,32,83,82
000058E4  6E67 2074 
000058E8  6F20 5352 
000058EC  414D 202E 7984          dc.b      65,77,32,46,0
000058F0  00        
                    7985   @m68kde~1_153:
000058F2  0D0A 4368 7986          dc.b      13,10,67,104,101,99,107,32,83,82,65,77,32,99
000058F6  6563 6B20 
000058FA  5352 414D 
000058FE  2063      
00005900  6F6E 7465 7987          dc.b      111,110,116,101,110,116,0
00005904  6E74 00   
                    7988   @m68kde~1_154:
00005908  0D0A 5265 7989          dc.b      13,10,82,101,97,100,105,110,103,32,102,114,111
0000590C  6164 696E 
00005910  6720 6672 
00005914  6F        
00005915  6D20 5352 7990          dc.b      109,32,83,82,65,77,32,46,46,46,0
00005919  414D 202E 
0000591D  2E2E 00   
                    7991   @m68kde~1_155:
00005920  0D0A 5072 7992          dc.b      13,10,80,114,105,110,116,105,110,103,32,111
00005924  696E 7469 
00005928  6E67 206F 
0000592C  7574 2065 7993          dc.b      117,116,32,101,118,101,114,121,32,52,48,48,116
00005930  7665 7279 
00005934  2034 3030 
00005938  74        
00005939  6820 6C6F 7994          dc.b      104,32,108,111,99,97,116,105,111,110,32,102
0000593D  6361 7469 
00005941  6F6E 2066 
00005945  726F 6D20 7995          dc.b      114,111,109,32,83,82,65,77,32,46,46,46,0
00005949  5352 414D 
0000594D  202E 2E2E 
00005951  00        
                    7996   @m68kde~1_156:
00005952  0D0A 2E2E 7997          dc.b      13,10,46,46,46,46,46,46,46,46,46,46,46,46,46
00005956  2E2E 2E2E 
0000595A  2E2E 2E2E 
0000595E  2E2E 2E   
00005961  2E2E 2E2E 7998          dc.b      46,46,46,46,46,46,46,46,46,46,32,98,101,103
00005965  2E2E 2E2E 
00005969  2E2E 2062 
0000596D  6567      
0000596F  696E 2072 7999          dc.b      105,110,32,114,101,97,100,105,110,103,0
00005973  6561 6469 
00005977  6E67 00   
                    8000   @m68kde~1_157:
0000597A  0D0A 4669 8001          dc.b      13,10,70,105,110,105,115,104,101,100,32,114
0000597E  6E69 7368 
00005982  6564 2072 
00005986  6561 6469 8002          dc.b      101,97,100,105,110,103,32,102,114,111,109,32
0000598A  6E67 2066 
0000598E  726F 6D20 
00005992  5352 414D 8003          dc.b      83,82,65,77,32,46,46,46,0
00005996  202E 2E2E 
0000599A  00        
                    8004   @m68kde~1_158:
0000599C  0D0A 656E 8005          dc.b      13,10,101,110,100,32,111,102,32,112,114,111
000059A0  6420 6F66 
000059A4  2070 726F 
000059A8  6772 616D 8006          dc.b      103,114,97,109,32,46,46,46,0
000059AC  202E 2E2E 
000059B0  00        
                    8007   @m68kde~1_159:
000059B2  4445 312D 8008          dc.b      68,69,49,45,54,56,107,32,66,117,103,32,86,49
000059B6  3638 6B20 
000059BA  4275 6720 
000059BE  5631      
000059C0  2E37 3700 8009          dc.b      46,55,55,0
                    8010   @m68kde~1_160:
000059C4  436F 7079 8011          dc.b      67,111,112,121,114,105,103,104,116,32,40,67
000059C8  7269 6768 
000059CC  7420 2843 
000059D0  2920 504A 8012          dc.b      41,32,80,74,32,68,97,118,105,101,115,32,50,48
000059D4  2044 6176 
000059D8  6965 7320 
000059DC  3230      
000059DE  3136 00   8013          dc.b      49,54,0
                    8014   @m68kde~1_161:
000059E2  0D0A 5275 8015          dc.b      13,10,82,117,110,110,105,110,103,46,46,46,46
000059E6  6E6E 696E 
000059EA  672E 2E2E 
000059EE  2E        
000059EF  2E00      8016          dc.b      46,0
                    8017   @m68kde~1_162:
000059F2  5275 6E6E 8018          dc.b      82,117,110,110,105,110,103,46,46,46,46,46,0
000059F6  696E 672E 
000059FA  2E2E 2E2E 
000059FE  00        
                    8019   @m68kde~1_163:
00005A00  4279 3A20 8020          dc.b      66,121,58,32,80,74,32,68,97,118,105,101,115
00005A04  504A 2044 
00005A08  6176 6965 
00005A0C  73        
00005A0D  00        8021          dc.b      0
                    8022   @m68kde~1_164:
00005A0E  0D0A 2573 8023          dc.b      13,10,37,115,0
00005A12  00        
                    8024   @m68kde~1_165:
00005A14  0D0A 4E61 8025          dc.b      13,10,78,97,110,99,121,32,77,97,107,97,114,32
00005A18  6E63 7920 
00005A1C  4D61 6B61 
00005A20  7220      
00005A22  2D20 3333 8026          dc.b      45,32,51,51,52,54,52,57,49,56,32,97,110,100
00005A26  3436 3439 
00005A2A  3138 2061 
00005A2E  6E64      
00005A30  2053 7465 8027          dc.b      32,83,116,101,118,101,110,32,67,104,105,110
00005A34  7665 6E20 
00005A38  4368 696E 
00005A3C  202D 2034 8028          dc.b      32,45,32,52,48,49,48,56,53,52,48,0
00005A40  3031 3038 
00005A44  3534 3000 
                    8029          section   data
00005A48            8030                   align
          0000 5A48 8031   DataStart       equ       *
                    8032   
                    8033   *********************************************************************************************************
                    8034   * Data Section for Initialised Data - these will be placed in rom as constants and have to be copied
                    8035   * to ram as part of the CStart routine in this file
                    8036   *********************************************************************************************************
                    8037   
                    8038   @vsscanf_bufx:
00005A48  0803 0546 8039          dc.l      @vsscanf_buf
                    8040   @vsscanf_1:
00005A4C  0A00      8041          dc.b      10,0
                    8042   __ctype:
00005A4E  0040 4040 8043          dc.b      0,64,64,64,64,64,64,64,64,64,80,80,80,80,80
00005A52  4040 4040 
00005A56  4040 5050 
00005A5A  5050 50   
00005A5D  4040 4040 8044          dc.b      64,64,64,64,64,64,64,64,64,64,64,64,64,64,64
00005A61  4040 4040 
00005A65  4040 4040 
00005A69  4040 40   
00005A6C  4040 40D0 8045          dc.b      64,64,64,208,160,160,160,160,160,160,160,160
00005A70  A0A0 A0A0 
00005A74  A0A0 A0A0 
00005A78  A0A0 A0A0 8046          dc.b      160,160,160,160,160,160,160,140,140,140,140
00005A7C  A0A0 A08C 
00005A80  8C8C 8C   
00005A83  8C8C 8C8C 8047          dc.b      140,140,140,140,140,140,160,160,160,160,160
00005A87  8C8C A0A0 
00005A8B  A0A0 A0   
00005A8E  A0A0 8A8A 8048          dc.b      160,160,138,138,138,138,138,138,130,130,130
00005A92  8A8A 8A8A 
00005A96  8282 82   
00005A99  8282 8282 8049          dc.b      130,130,130,130,130,130,130,130,130,130,130
00005A9D  8282 8282 
00005AA1  8282 82   
00005AA4  8282 8282 8050          dc.b      130,130,130,130,130,130,160,160,160,160,160
00005AA8  8282 A0A0 
00005AAC  A0A0 A0   
00005AAF  A089 8989 8051          dc.b      160,137,137,137,137,137,137,129,129,129,129
00005AB3  8989 8981 
00005AB7  8181 81   
00005ABA  8181 8181 8052          dc.b      129,129,129,129,129,129,129,129,129,129,129
00005ABE  8181 8181 
00005AC2  8181 81   
00005AC5  8181 8181 8053          dc.b      129,129,129,129,129,160,160,160,160,64,0,0,0
00005AC9  81A0 A0A0 
00005ACD  A040 0000 
00005AD1  00        
00005AD2  0000 0000 8054          dc.b      0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
00005AD6  0000 0000 
00005ADA  0000 0000 
00005ADE  0000 0000 
00005AE2  0000 0000 
00005AE6  0000      
00005AE8  0000 0000 8055          dc.b      0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
00005AEC  0000 0000 
00005AF0  0000 0000 
00005AF4  0000 0000 
00005AF8  0000 0000 
00005AFC  0000      
00005AFE  0000 0000 8056          dc.b      0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
00005B02  0000 0000 
00005B06  0000 0000 
00005B0A  0000 0000 
00005B0E  0000 0000 
00005B12  0000      
00005B14  0000 0000 8057          dc.b      0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
00005B18  0000 0000 
00005B1C  0000 0000 
00005B20  0000 0000 
00005B24  0000 0000 
00005B28  0000      
00005B2A  0000 0000 8058          dc.b      0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
00005B2E  0000 0000 
00005B32  0000 0000 
00005B36  0000 0000 
00005B3A  0000 0000 
00005B3E  0000      
00005B40  0000 0000 8059          dc.b      0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
00005B44  0000 0000 
00005B48  0000 0000 
00005B4C  0000 00   
                    8060   @itoa_1:
00005B50  2D32 3134 8061          dc.b      45,50,49,52,55,52,56,51,54,52,56,0
00005B54  3734 3833 
00005B58  3634 3800 
                    8062          section   bss
00005B5C            8063                   align
          0000 5B5C 8064   DataEnd         equ     *                       this label will equate to the address of the last byte of global variable in it
                    8065   
                    8066   *********************************************************************************************************
                    8067   * Section for Uninitialised Data held in ROM as constants
                    8068   *********************************************************************************************************
                    8069   
08030000            8070                   org     RamVectorTable          Ram based vector table must be stored here otherwise InstallException Handler will not work
          0000 0114 8071   DataLength      equ     DataEnd-DataStart       length of data needed to copy to Ram on bootup
                    8072   
                    8073   
08030000            8074   bss             org       bss
                    8075   
                    8076   *********************************************************************************************************
                    8077   * Build a ram based vector table for interrupts so we can install our own Exception Handlers in C code at run time
                    8078   * install the exception handler using the C function InstallExceptionHandler()
                    8079   *********************************************************************************************************
                    8080   
                    8081   
                    8082   
08030000            8083   VInitialSP       ds.l    1      dummy as we can't really install a handler for this
08030004            8084   VInitialPC       ds.l    1      dummy as we can't reallin install a handler for this
08030008            8085   VBusError        ds.l    1      storage for address of Bus Error Handler
0803000C            8086   VAddressError    ds.l    1      storage for address of Address Error Handler
08030010            8087   VIllegalInstr    ds.l    1      storage for address of Illegal Instruction handler
08030014            8088   VDividebyZero    ds.l    1      storage for address of divide by zero handler
08030018            8089   VCheck           ds.l    1      ditto
0803001C            8090   VTrapV           ds.l    1      ditto
08030020            8091   VPrivilege       ds.l    1      ditto
08030024            8092   VTrace           ds.l    1
08030028            8093   VLine1010emul    ds.l    1
0803002C            8094   VLine1111emul    ds.l    1
08030030            8095   VUnassigned1     ds.l    1
08030034            8096   VUnassigned2     ds.l    1
08030038            8097   VUnassigned3     ds.l    1
0803003C            8098   VUninit_IRQ      ds.l    1
08030040            8099   VUnassigned4     ds.l    1
08030044            8100   VUnassigned5     ds.l    1
08030048            8101   VUnassigned6     ds.l    1
0803004C            8102   VUnassigned7     ds.l    1
08030050            8103   VUnassigned8     ds.l    1
08030054            8104   VUnassigned9     ds.l    1
08030058            8105   VUnassigned10    ds.l    1
0803005C            8106   VUnassigned11    ds.l    1
08030060            8107   VSpuriousIRQ     ds.l    1
                    8108   
                    8109   * Interrupt handlers Vector 25-31
08030064            8110   VL1IRQ           ds.l    1       storage for 4 byte address of IRQ handler in your C program - install the handler using the C function InstallExceptionHandler()
08030068            8111   VL2IRQ           ds.l    1       storage for 4 byte address of IRQ handler in your C program - install the handler using the C function InstallExceptionHandler()
0803006C            8112   VL3IRQ           ds.l    1       storage for 4 byte address of IRQ handler in your C program - install the handler using the C function InstallExceptionHandler()
08030070            8113   VL4IRQ           ds.l    1       storage for 4 byte address of IRQ handler in your C program - install the handler using the C function InstallExceptionHandler()
08030074            8114   VL5IRQ           ds.l    1       storage for 4 byte address of IRQ handler in your C program - install the handler using the C function InstallExceptionHandler()
08030078            8115   VL6IRQ           ds.l    1       storage for 4 byte address of IRQ handler in your C program - install the handler using the C function InstallExceptionHandler()
0803007C            8116   VL7IRQ           ds.l    1       storage for 4 byte address of IRQ handler in your C program - install the handler using the C function InstallExceptionHandler()
                    8117   
                    8118   * Trap Handler vectors 32-47
08030080            8119   VTrap0           ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
08030084            8120   VTrap1           ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
08030088            8121   VTrap2           ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
0803008C            8122   VTrap3           ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
08030090            8123   VTrap4           ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
08030094            8124   VTrap5           ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
08030098            8125   VTrap6           ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
0803009C            8126   VTrap7           ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
080300A0            8127   VTrap8           ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
080300A4            8128   VTrap9           ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
080300A8            8129   VTrap10          ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
080300AC            8130   VTrap11          ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
080300B0            8131   VTrap12          ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
080300B4            8132   VTrap13          ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
080300B8            8133   VTrap14          ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
080300BC            8134   VTrap15          ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
                    8135   
                    8136   * the remaining exceptions are unassigned in the 68000 so no need to allocate storage for them here
                    8137   
                    8138   ***********************************************************************************************************
                    8139   * Other Variables
                    8140   ***********************************************************************************************************
                    8141   *__DebugA5       ds.l    1
                    8142   *__UserA5        ds.l    1
                    8143   
                    8144   ***********************************************************************************************************
080300C0            8145   __ungetbuf:     ds.l    1       ; ungetbuffer for stdio functions
080300C4            8146   __allocp:       ds.l    0       ; start of allocation units
080300C4            8147   __heap:         ds.l    0       ; pointers for malloc functions
                    8148   
                    8149   *__himem:       ds.l    himem            ; highest memory location + 1
                    8150   *__stklen:      ds.l    stklen           ; default stack size
                    8151   
                    8152   *********************************************************************************************************
                    8153   * Section for Heap
                    8154   *********************************************************************************************************
                    8155   
                    8156   _i:
080300C4            8157          ds.b      4
                    8158   _x:
080300C8            8159          ds.b      4
                    8160   _y:
080300CC            8161          ds.b      4
                    8162   _z:
080300D0            8163          ds.b      4
                    8164   _PortA_Count:
080300D4            8165          ds.b      4
                    8166   _Trace:
080300D8            8167          ds.b      4
                    8168   _GoFlag:
080300DC            8169          ds.b      4
                    8170   _Echo:
080300E0            8171          ds.b      4
                    8172   _d0:
080300E4            8173          ds.b      4
                    8174   _d1:
080300E8            8175          ds.b      4
                    8176   _d2:
080300EC            8177          ds.b      4
                    8178   _d3:
080300F0            8179          ds.b      4
                    8180   _d4:
080300F4            8181          ds.b      4
                    8182   _d5:
080300F8            8183          ds.b      4
                    8184   _d6:
080300FC            8185          ds.b      4
                    8186   _d7:
08030100            8187          ds.b      4
                    8188   _a0:
08030104            8189          ds.b      4
                    8190   _a1:
08030108            8191          ds.b      4
                    8192   _a2:
0803010C            8193          ds.b      4
                    8194   _a3:
08030110            8195          ds.b      4
                    8196   _a4:
08030114            8197          ds.b      4
                    8198   _a5:
08030118            8199          ds.b      4
                    8200   _a6:
0803011C            8201          ds.b      4
                    8202   _PC:
08030120            8203          ds.b      4
                    8204   _SSP:
08030124            8205          ds.b      4
                    8206   _USP:
08030128            8207          ds.b      4
                    8208   _SR:
0803012C            8209          ds.b      2
                    8210   _BreakPointAddress:
0803012E            8211          ds.b      32
                    8212   _BreakPointInstruction:
0803014E            8213          ds.b      16
                    8214   _BreakPointSetOrCleared:
0803015E            8215          ds.b      32
                    8216   _InstructionSize:
0803017E            8217          ds.b      4
                    8218   _WatchPointAddress:
08030182            8219          ds.b      32
                    8220   _WatchPointSetOrCleared:
080301A2            8221          ds.b      32
                    8222   _WatchPointString:
080301C2            8223          ds.b      800
                    8224   _TempString:
080304E2            8225          ds.b      100
                    8226   @vsscanf_buf:
08030546            8227          ds.b      80
                    8228          section   heap
08030596            8229                   align
          0803 0596 8230   bssEnd          equ *                   end of storage space for unitialised variables
                    8231   *                                       we have to copy all initialised variable from rom to here at startup
          0803 0596 8232   heap   equ       *
08030596            8233                    align
          0000 0000

Assembly errors: 0
